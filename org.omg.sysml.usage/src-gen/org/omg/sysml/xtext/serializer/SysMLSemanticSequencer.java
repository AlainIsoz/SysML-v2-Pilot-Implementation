/*
 * generated by Xtext 2.12.0
 */
package org.omg.sysml.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.omg.sysml.xtext.services.SysMLGrammarAccess;
import org.omg.sysml.xtext.sysML.BasicFeature;
import org.omg.sysml.xtext.sysML.BlockDefinition;
import org.omg.sysml.xtext.sysML.Bound;
import org.omg.sysml.xtext.sysML.ConnectableFeature;
import org.omg.sysml.xtext.sysML.ConnectionDirection;
import org.omg.sysml.xtext.sysML.Connector;
import org.omg.sysml.xtext.sysML.FeatureReferenceExpression;
import org.omg.sysml.xtext.sysML.Import;
import org.omg.sysml.xtext.sysML.IntegerLiteral;
import org.omg.sysml.xtext.sysML.Multiplicity;
import org.omg.sysml.xtext.sysML.Part;
import org.omg.sysml.xtext.sysML.RealLiteral;
import org.omg.sysml.xtext.sysML.Sign;
import org.omg.sysml.xtext.sysML.SysMLPackage;
import org.omg.sysml.xtext.sysML.Units;
import org.omg.sysml.xtext.sysML.UnitsExponent;
import org.omg.sysml.xtext.sysML.UnitsProduct;
import org.omg.sysml.xtext.sysML.UpperBound;
import org.omg.sysml.xtext.sysML.UsageIndex;
import org.omg.sysml.xtext.sysML.ValueTypeDefinition;

@SuppressWarnings("all")
public class SysMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SysMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SysMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SysMLPackage.BASIC_FEATURE:
				sequence_BasicFeature(context, (BasicFeature) semanticObject); 
				return; 
			case SysMLPackage.BLOCK_DEFINITION:
				sequence_BlockDefinition(context, (BlockDefinition) semanticObject); 
				return; 
			case SysMLPackage.BOUND:
				sequence_Bound(context, (Bound) semanticObject); 
				return; 
			case SysMLPackage.CONNECTABLE_FEATURE:
				sequence_ConnectableFeature(context, (ConnectableFeature) semanticObject); 
				return; 
			case SysMLPackage.CONNECTION_DIRECTION:
				sequence_ConnectionDirection(context, (ConnectionDirection) semanticObject); 
				return; 
			case SysMLPackage.CONNECTOR:
				sequence_Connector(context, (Connector) semanticObject); 
				return; 
			case SysMLPackage.FEATURE_REFERENCE_EXPRESSION:
				sequence_FeatureReferenceExpression(context, (FeatureReferenceExpression) semanticObject); 
				return; 
			case SysMLPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case SysMLPackage.INTEGER_LITERAL:
				if (rule == grammarAccess.getIntegerLiteralRule()) {
					sequence_IntegerLiteral(context, (IntegerLiteral) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getNumericLiteralRule()) {
					sequence_IntegerLiteral_NumericLiteral(context, (IntegerLiteral) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.MULTIPLICITY:
				sequence_Multiplicity(context, (Multiplicity) semanticObject); 
				return; 
			case SysMLPackage.PACKAGE:
				sequence_Package(context, (org.omg.sysml.xtext.sysML.Package) semanticObject); 
				return; 
			case SysMLPackage.PART:
				sequence_Part(context, (Part) semanticObject); 
				return; 
			case SysMLPackage.REAL_LITERAL:
				if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getNumericLiteralRule()) {
					sequence_NumericLiteral_RealLiteral(context, (RealLiteral) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRealLiteralRule()) {
					sequence_RealLiteral(context, (RealLiteral) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SIGN:
				sequence_Sign(context, (Sign) semanticObject); 
				return; 
			case SysMLPackage.UNITS:
				sequence_Units(context, (Units) semanticObject); 
				return; 
			case SysMLPackage.UNITS_EXPONENT:
				sequence_UnitsExponent(context, (UnitsExponent) semanticObject); 
				return; 
			case SysMLPackage.UNITS_PRODUCT:
				sequence_UnitsProduct(context, (UnitsProduct) semanticObject); 
				return; 
			case SysMLPackage.UPPER_BOUND:
				sequence_UpperBound(context, (UpperBound) semanticObject); 
				return; 
			case SysMLPackage.USAGE_INDEX:
				sequence_UsageIndex(context, (UsageIndex) semanticObject); 
				return; 
			case SysMLPackage.VALUE_TYPE_DEFINITION:
				sequence_ValueTypeDefinition(context, (ValueTypeDefinition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     PackageMember returns BasicFeature
	 *     Member returns BasicFeature
	 *     Feature returns BasicFeature
	 *     BasicFeature returns BasicFeature
	 *
	 * Constraint:
	 *     (name=Name (index=UsageIndex? definition=[Definition|QualifiedName])? multiplicity=Multiplicity? expression=Expression?)
	 */
	protected void sequence_BasicFeature(ISerializationContext context, BasicFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Container returns BlockDefinition
	 *     PackageMember returns BlockDefinition
	 *     Definition returns BlockDefinition
	 *     BlockDefinition returns BlockDefinition
	 *
	 * Constraint:
	 *     (name=Name feature+=Feature*)
	 */
	protected void sequence_BlockDefinition(ISerializationContext context, BlockDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Bound returns Bound
	 *
	 * Constraint:
	 *     (value=INT | var=Name)
	 */
	protected void sequence_Bound(ISerializationContext context, Bound semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackageMember returns ConnectableFeature
	 *     Member returns ConnectableFeature
	 *     Feature returns ConnectableFeature
	 *     ConnectableFeature returns ConnectableFeature
	 *
	 * Constraint:
	 *     (direction=ConnectionDirection name=Name (index=UsageIndex? definition=[Definition|QualifiedName])? multiplicity=Multiplicity?)
	 */
	protected void sequence_ConnectableFeature(ISerializationContext context, ConnectableFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConnectionDirection returns ConnectionDirection
	 *
	 * Constraint:
	 *     (IN='in' | OUT='out' | INOUT='inout')
	 */
	protected void sequence_ConnectionDirection(ISerializationContext context, ConnectionDirection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Member returns Connector
	 *     Connector returns Connector
	 *
	 * Constraint:
	 *     (name=Name? source=[ConnectableFeature|QualifiedName] target=[ConnectableFeature|QualifiedName])
	 */
	protected void sequence_Connector(ISerializationContext context, Connector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns FeatureReferenceExpression
	 *     FeatureReferenceExpression returns FeatureReferenceExpression
	 *
	 * Constraint:
	 *     feature=[Feature|QualifiedName]
	 */
	protected void sequence_FeatureReferenceExpression(ISerializationContext context, FeatureReferenceExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_REFERENCE_EXPRESSION__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_REFERENCE_EXPRESSION__FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFeatureReferenceExpressionAccess().getFeatureFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.FEATURE_REFERENCE_EXPRESSION__FEATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     importedNamespace=[PackageMember|QualifiedNameWithWildCard]
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.IMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getImportedNamespacePackageMemberQualifiedNameWithWildCardParserRuleCall_1_0_1(), semanticObject.eGet(SysMLPackage.Literals.IMPORT__IMPORTED_NAMESPACE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IntegerLiteral returns IntegerLiteral
	 *
	 * Constraint:
	 *     (sign=Sign? value=INT)
	 */
	protected void sequence_IntegerLiteral(ISerializationContext context, IntegerLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns IntegerLiteral
	 *     NumericLiteral returns IntegerLiteral
	 *
	 * Constraint:
	 *     (sign=Sign? value=INT units=Units?)
	 */
	protected void sequence_IntegerLiteral_NumericLiteral(ISerializationContext context, IntegerLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Multiplicity returns Multiplicity
	 *
	 * Constraint:
	 *     (lowerBound=Bound? upperBound=UpperBound)
	 */
	protected void sequence_Multiplicity(ISerializationContext context, Multiplicity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns RealLiteral
	 *     NumericLiteral returns RealLiteral
	 *
	 * Constraint:
	 *     (sign=Sign? integerPart=INT fractionPart=INT? units=Units?)
	 */
	protected void sequence_NumericLiteral_RealLiteral(ISerializationContext context, RealLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Container returns Package
	 *     Package returns Package
	 *     PackageMember returns Package
	 *
	 * Constraint:
	 *     (import+=Import* name=Name member+=PackageMember*)
	 */
	protected void sequence_Package(ISerializationContext context, org.omg.sysml.xtext.sysML.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackageMember returns Part
	 *     Part returns Part
	 *     Member returns Part
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (name=Name (index=UsageIndex? ((definition=[Definition|QualifiedName] base=[Part|QualifiedName]?) | base=[Part|QualifiedName]))?) | 
	 *             base=[Part|QualifiedName]
	 *         ) 
	 *         multiplicity=Multiplicity? 
	 *         member+=Member*
	 *     )
	 */
	protected void sequence_Part(ISerializationContext context, Part semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RealLiteral returns RealLiteral
	 *
	 * Constraint:
	 *     (sign=Sign? integerPart=INT fractionPart=INT?)
	 */
	protected void sequence_RealLiteral(ISerializationContext context, RealLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sign returns Sign
	 *
	 * Constraint:
	 *     (PLUS='+' | MINUS='-')
	 */
	protected void sequence_Sign(ISerializationContext context, Sign semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnitsExponent returns UnitsExponent
	 *
	 * Constraint:
	 *     (unit=ID exponent=IntegerLiteral?)
	 */
	protected void sequence_UnitsExponent(ISerializationContext context, UnitsExponent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnitsProduct returns UnitsProduct
	 *
	 * Constraint:
	 *     (factor+=UnitsExponent factor+=UnitsExponent*)
	 */
	protected void sequence_UnitsProduct(ISerializationContext context, UnitsProduct semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Units returns Units
	 *
	 * Constraint:
	 *     (numerator=UnitsProduct denominator=UnitsProduct?)
	 */
	protected void sequence_Units(ISerializationContext context, Units semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UpperBound returns UpperBound
	 *
	 * Constraint:
	 *     (value=INT | var=Name | unbounded?='*')
	 */
	protected void sequence_UpperBound(ISerializationContext context, UpperBound semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageIndex returns UsageIndex
	 *
	 * Constraint:
	 *     (name=Name multiplicity=Multiplicity?)
	 */
	protected void sequence_UsageIndex(ISerializationContext context, UsageIndex semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Container returns ValueTypeDefinition
	 *     PackageMember returns ValueTypeDefinition
	 *     Definition returns ValueTypeDefinition
	 *     ValueTypeDefinition returns ValueTypeDefinition
	 *
	 * Constraint:
	 *     (name=Name ((type=[ValueTypeDefinition|QualifiedName] units=Units?) | feature+=BasicFeature+)?)
	 */
	protected void sequence_ValueTypeDefinition(ISerializationContext context, ValueTypeDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
