package '2-Parts Interconnection-x' {
	import '1a-Parts Tree'::*;
	
	/* DEFINITIONS */

	// Blocks
	
	class VehicleA specializes Vehicle { 
		port fuelCmdPort: FuelCmdPort;
		port vehicleToRoadPort: VehicleToRoadPort;
	}
	
	class RearAxleAssembly specializes AxleAssembly { 
		port shaftPort_d: ShaftPort_d;
	}
	
	class RearAxle specializes Axle;
	
	/**
	 * Note: This class is used for both the left and
	 * right axles within a RearAxle.
	 */
	class WheelAxle { 
		port axleToDiffPort: AxlePort;
		port axleToWheelPort: AxleToWheelPort;
	}
	
	class Engine { 
		port fuelCmdPort: FuelCmdPort;
		port drivePwrPort: DrivePwrPort;
	}
	
	class Transmission { 
		port clutchPort: ClutchPort;
		port shaftPort_a: ShaftPort_a;
	}	
	class Driveshaft { 
		port shaftPort_b: ShaftPort_b;
		port shaftPort_c: ShaftPort_c;
	}	
	class Differential;
	
	/**
	 * Class Wheel does not include the ports its usages have.
	 */
	class Wheel is '1a-Parts Tree'::Wheel;
	
	// Port Types
	
	class FuelCmdPort;
	
	class DrivePwrPort;
	class ClutchPort;
	
	class ShaftPort_a;
	class ShaftPort_b;
	class ShaftPort_c;
	class ShaftPort_d;
	
	class DiffPort;
	class AxlePort;
	class AxleToWheelPort;
	class WheelToAxlePort;
	class WheelToRoadPort;
	
	class VehicleToRoadPort { 
		port wheelToRoadPort: WheelToRoadPort[2];
	}

	// Interfaces
	
	assoc EngineToTransmissionInterface {
		end drivePwrPort: DrivePwrPort;
		end clutchPort: ClutchPort;
	}
	
	assoc DriveshaftInterface {
		end port shaftPort_a: ShaftPort_a;
		end port shaftPort_d: ShaftPort_d;
		
		feature driveshaft: Driveshaft {
			port shaftPort_b: ShaftPort_b redefines Driveshaft::shaftPort_b;
			port shaftPort_c: ShaftPort_c redefines Driveshaft::shaftPort_c;
		}
		
		connector shaftPort_a to driveshaft::shaftPort_b;
		connector driveshaft::shaftPort_c to shaftPort_d;
	}
		
	/* USAGES */
	
	vehicle1_c1: VehicleA {
		port fuelCmdPort: FuelCmdPort redefines VehicleA::fuelCmdPort;
		
		binding fuelCmdPort = engine::fuelCmdPort;
		
		part engine: Engine {
			port fuelCmdPort: FuelCmdPort redefines Engine::fuelCmdPort;
			port drivePwrPort: DrivePwrPort redefines Engine::drivePwrPort;
		}
		
		connector :EngineToTransmissionInterface is 
			engine::drivePwrPort to transmission::clutchPort;
			
		part transmission: Transmission {
			port clutchPort: ClutchPort redefines Transmission::clutchPort;
			port shaftPort_a: ShaftPort_a redefines Transmission::shaftPort_a;	
		}
		
		
		
	}
	
}