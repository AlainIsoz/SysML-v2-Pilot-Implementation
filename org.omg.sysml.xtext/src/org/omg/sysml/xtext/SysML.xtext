/*****************************************************************************
 * SysML 2 Pilot Implementation
 * Copyright (c) 2018, 2020 Model Driven Solutions, Inc.
 * Copyright (c) 2018 IncQuery Labs Ltd.
 * Copyright (c) 2019 Maplesoft (Waterloo Maple, Inc.)
 * Copyright (c) 2019 Mgnite Inc.
 *    
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of theGNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * @license LGPL-3.0-or-later <http://spdx.org/licenses/LGPL-3.0-or-later>
 * 
 * Contributors:
 *  Ed Seidewitz, MDS
 *  Zoltan Kiss, IncQuery
 *  Balazs Grill, IncQuery
 *  Hisashi Miyashita, Maplesoft/Mgnite
 * 
 *****************************************************************************/

grammar org.omg.sysml.xtext.SysML hidden (WS, ML_NOTE, SL_NOTE)

import "http://www.eclipse.org/emf/2002/Ecore" as Ecore
import "http://www.omg.org/spec/SysML/2.0" as SysML

/* UNITS */

Unit returns SysML::Package :
	  AnonymousPackage
	| PackageUnit 
	| BlockUnit
	| ValueTypeUnit
	| IndividualDefinitionUnit
	| AssociationBlockUnit
	| InterfaceDefinitionUnit 
	| ActivityUnit
	| FunctionDefinitionUnit
	| StateDefinitionUnit
	| ConstraintDefinitionUnit
	| PartUnit
	| ValueUnit
	| ActionUnit
	| FunctionUnit
	| StateUnit
;

AnonymousPackage returns SysML::Package :
	PackageBody
;

PackageUnit returns SysML::Package: 
    UnitPrefix PackageDeclaration PackageBody 
;

BlockUnit returns SysML::Block:
	UnitPrefix BlockDeclaration DefinitionBody
;

ValueTypeUnit returns SysML::ValueType :
	UnitPrefix ValueTypeDeclaration DefinitionBody
;

IndividualDefinitionUnit returns SysML::IndividualDefinition :
	UnitPrefix IndividualDefDeclaration DefinitionBody
;

AssociationBlockUnit returns SysML::AssociationBlock :
	UnitPrefix AssociationBlockDeclaration AssociationBlockBody
;

InterfaceDefinitionUnit returns SysML::InterfaceDefinition :
	UnitPrefix InterfaceDeclaration InterfaceBody
;

ActivityUnit returns SysML::Activity :
	UnitPrefix ActivityDeclaration ActivityBody
;

FunctionDefinitionUnit returns SysML::FunctionDefinition :
	UnitPrefix FunctionDefDeclaration FunctionBody
;

StateDefinitionUnit returns SysML::StateDefinition :
	UnitPrefix StateDefDeclaration StateBody
;

ConstraintDefinitionUnit returns SysML::ConstraintDefinition :
	UnitPrefix ConstraintDefDeclaration ConstraintBody
;

PartUnit returns SysML::PartProperty :
	UnitPrefix PartDeclaration UsageCompletion
;

ValueUnit returns SysML::ValueProperty :
	UnitPrefix ValueDeclaration UsageCompletion
;

ActionUnit returns SysML::ActionUsage :
	UnitPrefix ActionDeclaration ActivityBody
;

FunctionUnit returns SysML::FunctionUsage :
	UnitPrefix FunctionDeclaration FunctionBody
;

StateUnit returns SysML::StateUsage :
	UnitPrefix StateDeclaration StateBody
;

fragment UnitPrefix returns SysML::Package :
	( ownedRelationship_comp += PrefixAnnotation )*
;

/* VISIBILITY */

enum PackageElementVisibilityIndicator returns SysML::VisibilityKind:
	public = 'public' | private = 'private'
;

enum VisibilityIndicator returns SysML::VisibilityKind :
	public = 'public' | private = 'private' | protected = 'protected'
;

/* COMMENTS */

Comment returns SysML::Comment :
	( 'comment' ( name = Name )? ownedRelationship_comp += Annotation
	| ownedRelationship_comp += EmptyAnnotation
	)
	body = ML_COMMENT
;

Annotation returns SysML::Annotation :
	{SysML::Annotation} ( 'about' annotatedElement = [SysML::Element|QualifiedName] )?
;

EmptyAnnotation returns SysML::Annotation :
	{SysML::Annotation}
;

PrefixAnnotation returns SysML::Annotation :
	ownedRelatedElement_comp += Documentation
;

Documentation returns SysML::Comment :
	('comment' ( name = Name )? )? body = DOCUMENTATION_COMMENT
;

/* IMPORTS */

Import returns SysML::Import :
	( ownedRelationship_comp += PrefixAnnotation )*
	( visibility = PackageElementVisibilityIndicator )?  
	'import' (
	  importedPackage = [SysML::Package|Name] ( '::' | '.' ) '*' 
	| importedPackage = [SysML::Package|ColonQualifiedName] '::' '*' 
	| importedPackage = [SysML::Package|DotQualifiedName] '.' '*'
	) ';'
;

/* PACKAGES */

Package returns SysML::Package :
	PackageDeclaration PackageBody
;

fragment PackageDeclaration returns SysML::Package : 
	'package' name = Name 
;

fragment PackageBody returns SysML::Package :
	'{' ( ownedMembership_comp += PackageMember | ownedImport_comp += Import )* '}'
;

/* PACKAGE MEMBERSHIPS */

PackageMember returns SysML::Membership : 
	PackageMemberPrefix	
	( PackagedDefinitionMember 
	| PackagedUsageMember
	)
;

fragment PackageMemberPrefix returns SysML::Membership :
	( ownedRelationship_comp += PrefixAnnotation )*
    ( visibility = PackageElementVisibilityIndicator )?		
;

fragment PackagedDefinitionMember returns SysML::Membership :
	( ownedMemberElement_comp = Package
	| ownedMemberElement_comp = Block
	| ownedMemberElement_comp = ValueType
	| ownedMemberElement_comp = IndividualDefinition
	| ownedMemberElement_comp = AssociationBlock
	| ownedMemberElement_comp = InterfaceDefinition
	| ownedMemberElement_comp = PortDefinition
	| ownedMemberElement_comp = Activity
    | ownedMemberElement_comp = FunctionDefinition
    | ownedMemberElement_comp = StateDefinition
    | ownedMemberElement_comp = ConstraintDefinition
    | ownedMemberElement_comp = RequirementDefinition
	| ownedMemberElement_comp = Comment
	| ( 'import' | 'alias' ) memberElement = [SysML::Element|QualifiedName] ( 'as' memberName = Name )? ';'
	)
;

fragment PackagedUsageMember returns SysML::Membership :
	  'part' ownedMemberElement_comp = PartProperty
	| 'abstract' 'part' ownedMemberElement_comp = AbstractPartProperty
	| 'value'? ownedMemberElement_comp = ValueProperty
	| 'abstract' 'value'? ownedMemberElement_comp = AbstractValueProperty
	| 'individual' ownedMemberElement_comp = IndividualUsage
	| 'abstract' 'individual' ownedMemberElement_comp = AbstractIndividualUsage
	| 'timeslice' ownedMemberElement_comp = TimeSliceUsage
	| 'abstract' 'timeslice' ownedMemberElement_comp = AbstractTimeSliceUsage
	| 'snapshot' ownedMemberElement_comp = SnapshotUsage
	| 'abstract' 'snapshot' ownedMemberElement_comp = AbstractSnapshotUsage
	| 'action' ownedMemberElement_comp = ActionUsage
	| 'abstract' 'action' ownedMemberElement_comp = AbstractActionUsage
	| FunctionKeyword ownedMemberElement_comp = FunctionUsage
	| 'abstract' FunctionKeyword ownedMemberElement_comp = AbstractFunctionUsage
	| 'state' ownedMemberElement_comp = StateUsage
	| 'abstract' 'state' ownedMemberElement_comp = AbstractStateUsage
	| 'constraint' ownedMemberElement_comp = ConstraintUsage
	| 'abstract' 'constraint' ownedMemberElement_comp = AbstractConstraintUsage
	| 'requirement' ownedMemberElement_comp = RequirementUsage
	| 'abstract' 'requirement' ownedMemberElement_comp = AbstractRequirementUsage
;

/* DEFINITIONS */

fragment DefinitionBody returns SysML::Type :
	  ';' 
	| '{' ( 
		  ownedMembership_comp += NestedDefinitionMember 
		| ownedFeatureMembership_comp += NestedUsageMember 
		| ownedImport_comp += Import
	)* '}'
;

fragment AbstractDefinitionBody returns SysML::Type :
	  isAbstract ?= ';' 
	| isAbstract ?= '{' ( 
		  ownedMembership_comp += NestedDefinitionMember 
		| ownedFeatureMembership_comp += NestedUsageMember 
		| ownedImport_comp += Import
	)* '}'
;

/* DEFINITION MEMBERSHIPS */

NestedDefinitionMember returns SysML::Membership : 
	DefinitionMemberPrefix PackagedDefinitionMember
;

NestedUsageMember returns SysML::FeatureMembership :
	StructureUsageMember | BehaviorUsageMember
;

StructureUsageMember returns SysML::FeatureMembership :
	NonPortStructureUsageMember | PortMember | ConjugatedPortMember
;

NonPortStructureUsageMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix
	(
	  isComposite ?= 'part' ownedMemberFeature_comp = PartProperty
	| 'abstract' isComposite ?= 'part' ownedMemberFeature_comp = AbstractPartProperty
	| 'ref' ( direction = FeatureDirection )? ownedMemberFeature_comp = ReferenceProperty
	| 'abstract' 'ref' ( direction = FeatureDirection )? ownedMemberFeature_comp = AbstractReferenceProperty
	| 'value'? ( direction = FeatureDirection )? ownedMemberFeature_comp = ValueProperty
	| 'abstract' 'value'? ( direction = FeatureDirection )? ownedMemberFeature_comp = AbstractValueProperty
	|  ( 'ref' 'individual' | isComposite ?= 'individual') ( direction = FeatureDirection )? ownedMemberFeature_comp = IndividualUsage
	| 'abstract' ( 'ref' 'individual' | isComposite ?= 'individual') ( direction = FeatureDirection )? ownedMemberFeature_comp = AbstractIndividualUsage
	|  ( 'ref' 'timeslice' | isComposite ?= 'timeslice' ) ( direction = FeatureDirection )? ownedMemberFeature_comp = TimeSliceUsage
	| 'abstract' ( 'ref' 'timeslice' | isComposite ?= 'timeslice' ) ( direction = FeatureDirection )? ownedMemberFeature_comp = AbstractTimeSliceUsage
	|  ( 'ref' 'snapshot' | isComposite ?= 'snapshot' ) ( direction = FeatureDirection )? ownedMemberFeature_comp = SnapshotUsage
	| 'abstract' ( 'ref' 'snapshot' | isComposite ?= 'snapshot' ) ( direction = FeatureDirection )? ownedMemberFeature_comp = AbstractSnapshotUsage
	| 'link' ownedMemberFeature_comp = ConnectionUsage 
    | 'abstract' 'link' ownedMemberFeature_comp = AbstractConnectionUsage
 	| 'connect' ownedMemberFeature_comp = Connector 
    | 'abstract' 'connect' ownedMemberFeature_comp = AbstractConnector
	| 'interface' ownedMemberFeature_comp = InterfaceUsage
	| 'abstract' 'interface' ownedMemberFeature_comp = AbstractInterfaceUsage
    | 'bind' ownedMemberFeature_comp = BindingConnector
	| 'succession' ownedMemberFeature_comp = Succession 
    | 'abstract' 'succession' ownedMemberFeature_comp = AbstractSuccession
	| 'stream' ownedMemberFeature_comp = ItemFlow 
    | 'abstract' 'stream' ownedMemberFeature_comp = AbstractItemFlow
	| 'flow' ownedMemberFeature_comp = SuccessionItemFlow 
    | 'abstract' 'flow' ownedMemberFeature_comp = AbstractSuccessionItemFlow
    )
;

BehaviorUsageMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix
	( ('ref' 'action' | isComposite ?= 'action' ) ( direction = FeatureDirection )? ownedMemberFeature_comp = ActionUsage
	| 'abstract' ('ref' 'action' | isComposite ?= 'action' )  ( direction = FeatureDirection )? ownedMemberFeature_comp = AbstractActionUsage
	| ('ref' FunctionKeyword | isComposite ?= FunctionKeyword ) ( direction = FeatureDirection )? ownedMemberFeature_comp = FunctionUsage
	| 'abstract' ('ref' FunctionKeyword | isComposite ?= FunctionKeyword )  ( direction = FeatureDirection )? ownedMemberFeature_comp = AbstractFunctionUsage
	| ('ref' 'state' | isComposite ?= 'state' )  ( direction = FeatureDirection )? ownedMemberFeature_comp = StateUsage
	| 'abstract' ('ref' 'state' | isComposite ?= 'state' )  ( direction = FeatureDirection )? ownedMemberFeature_comp = AbstractStateUsage
	| ( 'ref' 'constraint' | isComposite ?= 'constraint' ) ( direction = FeatureDirection )? ownedMemberFeature_comp = ConstraintUsage
	| 'abstract' ( 'ref' 'constraint' | isComposite ?= 'constraint' ) ( direction = FeatureDirection )? ownedMemberFeature_comp = AbstractConstraintUsage
	| ( 'ref' 'requirement' | isComposite ?= 'requirement' ) ( direction = FeatureDirection )? ownedMemberFeature_comp = RequirementUsage
	| 'abstract' ( 'ref' 'requirement' | isComposite ?= 'requirement' ) ( direction = FeatureDirection )? ownedMemberFeature_comp = AbstractRequirementUsage
	| 'perform' ownedMemberFeature_comp = PerformActionUsage
	| 'exhibit' ownedMemberFeature_comp = ExhibitStateUsage
	| 'assert' ownedMemberFeature_comp = AssertConstraintUsage
	| 'satisfy' ownedMemberFeature_comp = SatisfyRequirementUsage
	)
;

PortMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix
	( isPort ?= 'port' ownedMemberFeature_comp = PortUsage
	| 'abstract' isPort ?= 'port' ownedMemberFeature_comp = AbstractPortUsage
	)
;

ConjugatedPortMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix
	( isPort ?= 'port' ownedMemberFeature_comp = ConjugatedPortUsage
	| 'abstract' isPort ?= 'port' ownedMemberFeature_comp = AbstractConjugatedPortUsage
	)
;

enum FeatureDirection returns SysML::FeatureDirectionKind :
	in = 'in' | out = 'out' | inout = 'inout'
;

fragment DefinitionMemberPrefix returns SysML::Membership :
	( ownedRelationship_comp += PrefixAnnotation )*
    ( visibility = VisibilityIndicator )?
;

/* CLASSIFIERS */

fragment ClassifierDeclarationCompletion returns SysML::Classifier :	
	name = Name 
//  ( '<' ownedMember += ClassifierTemplateParameter ( ',' ownedMember += ClassifierTemplateParameter )* '>' )? 
	SuperclassingList?
;

fragment SuperclassingList returns SysML::Classifier :
	SpecializesKeyword ownedRelationship_comp += Superclassing ( ',' ownedRelationship_comp += Superclassing )*
;

SpecializesKeyword :
	':>' | 'specializes'
;

Superclassing returns SysML::Superclassing:
	superclass = [SysML::Classifier | QualifiedName]
;

/* BLOCKS */

Block returns SysML::Block :
	BlockDeclaration DefinitionBody
;

fragment BlockDeclaration returns SysML::Block :
	( isAbstract ?= 'abstract' )? 'block' ClassifierDeclarationCompletion
;

/* VALUE TYPES */

ValueType returns SysML::ValueType :
	ValueTypeDeclaration DefinitionBody
;

fragment ValueTypeDeclaration returns SysML::ValueType :
	( isAbstract ?= 'abstract' )? 'value' 'type' ClassifierDeclarationCompletion
;

/* INDIVIDUAL DEFINITIONS */

IndividualDefinition returns SysML::IndividualDefinition :
	IndividualDefDeclaration DefinitionBody
;

fragment IndividualDefDeclaration returns SysML::IndividualDefinition :
	( isAbstract ?= 'abstract' )? 'individual' 'def' ClassifierDeclarationCompletion
	ownedMembership_comp += LifeClassMembership
;

LifeClass returns SysML::LifeClass :
	{SysML::LifeClass}
;

/* INDIVIDUAL DEFINITION MEMBERSHIPS */

LifeClassMembership returns SysML::Membership :
	ownedMemberElement_comp = LifeClass
;

/* PORT DEFINITIONS */

PortDefinition returns SysML::PortDefinition :
	PortDeclaration DefinitionBody
;

fragment PortDeclaration returns SysML::PortDefinition :
	( isAbstract ?= 'abstract' )? 'port' 'def' ClassifierDeclarationCompletion
	ownedMembership_comp += ConjugatedPortDefinitionMember
;

ConjugatedPortDefinition returns SysML::ConjugatedPortDefinition :
	ownedRelationship_comp += PortConjugation
;

PortConjugation returns SysML::PortConjugation :
	{SysML::PortConjugation}
;

/* PORT DEFINITION MEMBERSHIPS */

ConjugatedPortDefinitionMember returns SysML::Membership :
	ownedMemberElement_comp = ConjugatedPortDefinition
;

/* ASSOCIATION BLOCKS */

AssociationBlock returns SysML::AssociationBlock :
	AssociationBlockDeclaration AssociationBlockBody
;

fragment AssociationBlockDeclaration returns SysML::AssociationBlock :
	( isAbstract ?= 'abstract' )? 'assoc' 'block' ClassifierDeclarationCompletion
;

fragment AssociationBlockBody returns SysML::Type :
	  ';'
	| '{' (
		  ownedMembership_comp += NestedDefinitionMember 
		| ownedFeatureMembership_comp += AssociationUsageMember
		| ownedImport_comp += Import
	  )* '}'
;

fragment AbstractAssociationBlockBody returns SysML::Type :
	  isAbstract ?= ';'
	| isAbstract ?= '{' ( 
		  ownedMembership_comp += NestedDefinitionMember 
		| ownedFeatureMembership_comp += AssociationUsageMember
		| ownedImport_comp += Import
	)* '}'
;

/* ASSOCIATION BLOCK MEMBERSHIPS */

AssociationUsageMember returns SysML::FeatureMembership :
	NestedUsageMember | AssociationEndMember | EndPortMember | ConjugatedEndPortMember
;

AssociationEndMember returns SysML::EndFeatureMembership :
	DefinitionMemberPrefix
    ( 'end' isComposite ?= 'part' ownedMemberFeature_comp = PartProperty 
    | 'abstract' 'end' isComposite ?= 'part' ownedMemberFeature_comp = AbstractPartProperty
    | 'end' 'ref'? ownedMemberFeature_comp = ReferenceProperty
    | 'abstract' 'end' 'ref'? ownedMemberFeature_comp = AbstractReferenceProperty
    | 'end' ( 'ref' 'action' | isComposite ?= 'action' ) ownedMemberFeature_comp = ActionUsage
	| 'abstract' 'end'('ref' 'action' | isComposite ?= 'action' )  ownedMemberFeature_comp = AbstractActionUsage
	| 'end' ('ref' FunctionKeyword | isComposite ?= FunctionKeyword ) ( direction = FeatureDirection )? ownedMemberFeature_comp = FunctionUsage
	| 'abstract' 'end' ('ref' FunctionKeyword | isComposite ?= FunctionKeyword )  ( direction = FeatureDirection )? ownedMemberFeature_comp = AbstractFunctionUsage
	| 'end' ('ref' 'state' | isComposite ?= 'state' )  ( direction = FeatureDirection )? ownedMemberFeature_comp = StateUsage
	| 'abstract' 'end'('ref' 'state' | isComposite ?= 'state' )  ( direction = FeatureDirection )? ownedMemberFeature_comp = AbstractStateUsage
	)
;

EndPortMember returns SysML::EndFeatureMembership :
	DefinitionMemberPrefix
	( 'end' isPort ?= 'port' ownedMemberFeature_comp = PortUsage
	| 'abstract' 'end' isPort ?= 'port' ownedMemberFeature_comp = AbstractPortUsage
	)
;

ConjugatedEndPortMember returns SysML::EndFeatureMembership :
	DefinitionMemberPrefix
	( 'end' isPort ?= 'port' ownedMemberFeature_comp = ConjugatedPortUsage
	| 'abstract' 'end' isPort ?= 'port' ownedMemberFeature_comp = AbstractConjugatedPortUsage
	)
;

/* INTERFACE DEFINITIONS */

InterfaceDefinition returns SysML::InterfaceDefinition :
	InterfaceDeclaration InterfaceBody
;

fragment InterfaceDeclaration returns SysML::InterfaceDefinition :
	( isAbstract ?= 'abstract' )? 'interface' 'def' ClassifierDeclarationCompletion
;

fragment InterfaceBody returns SysML::Type :
	  ';'
	| '{' ( 
		  ownedMembership_comp += NestedDefinitionMember 
		| ownedFeatureMembership_comp += InterfaceUsageMember
		| ownedImport_comp += Import
	)* '}'
;

fragment AbstractInterfaceBody returns SysML::Type :
	  isAbstract ?= ';'
	| isAbstract ?= '{' ( 
		  ownedMembership_comp += NestedDefinitionMember 
		| ownedFeatureMembership_comp += InterfaceUsageMember
		| ownedImport_comp += Import
	)* '}'
;

/* INTERFACE DEFINITION MEMBERSHIPS */

InterfaceUsageMember returns SysML::FeatureMembership :
	NestedUsageMember | InterfaceEndMember | ConjugatedInterfaceEndMember
;

InterfaceEndMember returns SysML::EndFeatureMembership :
	DefinitionMemberPrefix
    (
      isPort ?= 'end' 'port'? ownedMemberFeature_comp = PortUsage
    | 'abstract' isPort ?= 'end' 'port'? ownedMemberFeature_comp = AbstractPortUsage
	)
;

ConjugatedInterfaceEndMember returns SysML::EndFeatureMembership :
	DefinitionMemberPrefix
    (
      isPort ?= 'end' 'port'? ownedMemberFeature_comp = ConjugatedPortUsage
    | 'abstract' isPort ?= 'end' 'port'? ownedMemberFeature_comp = AbstractConjugatedPortUsage
	)
;

/* ACTIVITIES */

Activity returns SysML::Activity :
	ActivityDeclaration ActivityBody
;

fragment ActivityDeclaration returns SysML::Activity :
	( isAbstract ?= 'abstract')? 'activity' name = Name ParameterList? SuperclassingList?
;

fragment ParameterList returns SysML::Type :
	'(' ( ownedFeatureMembership_comp += ParameterMember ( ',' ownedFeatureMembership_comp += ParameterMember )* )? ')'
;

fragment ActivityBody returns SysML::Type :
	    ';' 
		// Note: Using a syntactic predicate here seems to avoid a possible infinite loop
		// while incrementally parsing.
	  | '{' => ActivityBodyItem* '}' 
;

fragment AbstractActivityBody returns SysML::Type :
	  isAbstract ?= ';' | isAbstract ?= '{' => ActivityBodyItem* '}'
;

fragment ActivityBodyItem returns SysML::Type :
	  ownedMembership_comp += NestedDefinitionMember 
	| ownedFeatureMembership_comp += StructureUsageMember
	| ownedFeatureMembership_comp += InitialNodeMember
	  ( ownedFeatureMembership_comp += TargetSuccessionMember )*
	| ( ownedFeatureMembership_comp += EmptySuccessionMember )? 
	  ownedFeatureMembership_comp += ( BehaviorUsageMember | ActivityNodeMember )
	  ( ownedFeatureMembership_comp += TargetSuccessionMember )*
	| ownedFeatureMembership_comp += GuardedSuccessionMember
	| ownedImport_comp += Import
;

/* ACTIVITY MEMBERSHIPS */

ParameterMember returns SysML::ParameterMembership :
	( direction = FeatureDirection )? memberName = Name ownedMemberFeature_comp = Parameter
;

InitialNodeMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix 'first' memberFeature = [SysML::Feature|QualifiedName] ';'
	
;

ActivityNodeMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedMemberFeature_comp = ActivityNode
;

TargetSuccessionMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedMemberFeature_comp = ( TargetSuccession | GuardedTargetSuccession | DefaultTargetSuccession ) ';'
;

GuardedSuccessionMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = GuardedSuccession ';'
;

/* FUNCTION DEFINITIONS */

FunctionDefinition returns SysML::FunctionDefinition :
	FunctionDefDeclaration 
	( FunctionBody 
	| '=' ownedFeatureMembership_comp += ExpressionMember ';'
	)
;

fragment FunctionDefDeclaration returns SysML::FunctionDefinition :
	( isAbstract ?= 'abstract')? FunctionKeyword 'def' name = Name 
	ParameterList? ReturnParameterPart SuperclassingList?
;

FunctionKeyword :
	'function' | 'fn' | 'calc' | 'compute'
;

fragment ReturnParameterPart returns SysML::Type :
	ownedFeatureMembership_comp += ReturnParameterMember
;

fragment FunctionBody returns SysML::Type :
	    ';' 
	  | '{' => FunctionBodyItem*
	        ( ownedFeatureMembership_comp += ExpressionMember )?
	    '}' 
;

fragment AbstractFunctionBody returns SysML::Type :
	    isAbstract ?= ';' 
	  | isAbstract ?= '{' 
	  		=> FunctionBodyItem*
	        ( ownedFeatureMembership_comp += ExpressionMember )?
	    '}'
;

fragment FunctionBodyItem returns SysML::Type :
	  ownedMembership_comp += NestedDefinitionMember 
	| ownedFeatureMembership_comp += StructureUsageMember
	| ownedFeatureMembership_comp += InitialNodeMember
	  ( ownedFeatureMembership_comp += TargetSuccessionMember )*
	| ( ownedFeatureMembership_comp += EmptySuccessionMember )? 
	  ownedFeatureMembership_comp += ( BehaviorUsageMember | ActivityNodeMember )
	  ( ownedFeatureMembership_comp += TargetSuccessionMember )*
	| ownedFeatureMembership_comp += GuardedSuccessionMember
	| ownedImport_comp += Import
;

/* FUNCTION DEFINITION MEMBERSHIPS */

ReturnParameterMember returns SysML::ReturnParameterMembership :
	( 'return' )? ( memberName = Name )? ownedMemberParameter_comp = Parameter
;

/* STATE DEFINITIONS */

StateDefinition returns SysML::StateDefinition :
	StateDefDeclaration StateBody
;

fragment StateDefDeclaration returns SysML::StateDefinition :
	( isAbstract ?= 'abstract')? 'state' 'def' name = Name ParameterList? SuperclassingList?
;

fragment StateBody returns SysML::Type :
	';' | '{' StateBodyPart '}'
;

fragment AbstractStateBody returns SysML::Type :
	isAbstract ?= ';' | isAbstract ?= '{' StateBodyPart '}'
;

fragment StateBodyPart returns SysML::Type :
	( ownedFeatureMembership_comp += EntryActionMember
	  ( ownedFeatureMembership_comp += EntryTransitionMember )*
	)?
	( ownedFeatureMembership_comp += DoActionMember )?
	( ownedFeatureMembership_comp += ExitActionMember )?
	
	// Note: Using a syntactic predicate here seems to avoid a possible infinite loop
	// while incrementally parsing.
	=> StateBodyItem*
;

fragment StateBodyItem returns SysML::Type :
	  ownedMembership_comp += NestedDefinitionMember 
	| ownedFeatureMembership_comp += StructureUsageMember
	| ownedFeatureMembership_comp += BehaviorUsageMember
		( ownedFeatureMembership_comp += TargetTransitionSuccessionMember )*
	| ownedFeatureMembership_comp += TransitionStepMember
	| ownedImport_comp += Import
;

StateActionUsage returns SysML::ActionUsage :
	  EmptyActionUsage ';' | PerformedActionUsage ActivityBody
;

PerformedActionUsage returns SysML::ActionUsage :
	PerformActionUsageDeclaration | AcceptActionNodeDeclaration | SendActionNodeDeclaration
;

EmptyActionUsage returns SysML::ActionUsage :
	{SysML::ActionUsage}
;

/* STATE DEFINITION MEMBERSHIPS */

EntryActionMember returns SysML::StateSubactionMembership :
	DefinitionMemberPrefix kind = EntryActionKind ownedMemberFeature_comp = StateActionUsage
;

EntryActionKind returns SysML::StateSubactionKind :
	'entry'
;

DoActionMember returns SysML::StateSubactionMembership :
	DefinitionMemberPrefix kind = DoActionKind ownedMemberFeature_comp = StateActionUsage
;

DoActionKind returns SysML::StateSubactionKind :
	'do'
;

ExitActionMember returns SysML::StateSubactionMembership :
	DefinitionMemberPrefix kind = ExitActionKind ownedMemberFeature_comp = StateActionUsage
;

ExitActionKind returns SysML::StateSubactionKind :
	'exit'
;

StateMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix
	( ( 'ref' 'state' | isComposite ?= 'state' ) ownedMemberFeature_comp = StateUsage
	| 'abstract' ( 'ref' 'state' | isComposite ?= 'state' ) ownedMemberFeature_comp = AbstractStateUsage
	)
;

EntryTransitionMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix 
	( ownedMemberFeature_comp = GuardedTargetSuccession 
	| 'then' ownedMemberFeature_comp = TransitionSuccession
	) ';'
;

TargetTransitionSuccessionMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedMemberFeature_comp = TargetTransitionStep ';'
;

TransitionStepMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedMemberFeature_comp = TransitionStep ';'
;

/* CONSTRAINT DEFINITIONS */

ConstraintDefinition returns SysML::ConstraintDefinition :
	ConstraintDefDeclaration ConstraintBody  
;

fragment ConstraintDefDeclaration returns SysML::ConstraintDefinition :
	( isAbstract ?= 'abstract' )? 'constraint' 'def' name = Name 
	ParameterList? EmptyReturnParameterPart SuperclassingList?
;

fragment ConstraintBody returns SysML::Type :
	  ';' | '{'  ConstraintMembers '}'
;

fragment AbstractConstraintBody returns SysML::Type :
	  isAbstract ?= ';' | isAbstract ?= '{' ConstraintMembers '}'
;

fragment ConstraintMembers returns SysML::Type :
	( ownedMembership_comp += NestedDefinitionMember 
	| ownedFeatureMembership_comp += NestedUsageMember 
	| ownedImport_comp += Import
	)* 
	( ownedFeatureMembership_comp += ConstraintExpressionMember )?
;

fragment EmptyReturnParameterPart returns SysML::Type :
	ownedFeatureMembership_comp += EmptyReturnParameterMember
;

/* CONSTRAINT DEFINITION MEMBERSHIPS */

EmptyReturnParameterMember returns SysML::ReturnParameterMembership :
	ownedMemberFeature_comp = EmptyParameter
;

ConstraintExpressionMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedMemberFeature_comp = Expression
;

/* REQUIREMENT DEFINITIONS */

RequirementDefinition returns SysML::RequirementDefinition :
	RequirementDefDeclaration RequirementBody  
;

fragment RequirementDefDeclaration returns SysML::RequirementDefinition :
	( isAbstract ?= 'abstract' )? 'requirement' 'def' ( 'id' reqId = Name )? name = Name 
	RequirementDefParameterList EmptyReturnParameterPart SuperclassingList?
;

fragment RequirementDefParameterList returns SysML::Type :
	  ownedFeatureMembership_comp += EmptyParameterMember
	| '(' ownedFeatureMembership_comp += EmptyParameterMember ')'
	| '(' ownedFeatureMembership_comp += ParameterMember ( ',' ownedFeatureMembership_comp += ParameterMember )* ')'
;

fragment RequirementBody returns SysML::Type :
	  ';' | '{' RequirementMembers '}'
;

fragment AbstractRequirementBody returns SysML::Type :
	  isAbstract ?= ';' | isAbstract ?= '{' RequirementMembers '}'
;

fragment RequirementMembers returns SysML::Type :
	( 
	  ownedMembership_comp += NestedDefinitionMember 
	| ownedFeatureMembership_comp += NestedUsageMember 
	| ownedFeatureMembership_comp += RequirementConstraintMember
	| ownedImport_comp += Import
	)*
;

RequirementConstraintUsage returns SysML::ConstraintUsage :
    ( ( ( name = Name )? TypePart? 'as' )? ownedRelationship_comp += Subset 
    | 'constraint' ( name = Name )? TypePart? 
    )
    ConstraintParameterPart ConstraintBody
;

/* REQUIREMENT DEFINITION MEMBERSHIPS */

RequirementConstraintMember returns SysML::RequirementConstraintMembership :
	DefinitionMemberPrefix kind = RequirementConstraintKind 
	ownedMemberFeature_comp = RequirementConstraintUsage
;

enum RequirementConstraintKind returns SysML::RequirementConstraintKind :
	assumption = 'assume' | requirement = 'require'
;

/* USAGES */

fragment Usage returns SysML::Usage :
	UsageDeclaration UsageCompletion
;

fragment AbstractUsage returns SysML::Usage :
	UsageDeclaration AbstractUsageCompletion
;

fragment UsageDeclaration returns SysML::Usage :
	  name = Name TypePart? SubsettingPart
	| TypePart SubsettingPart
	| RedefinesKeyword ownedRelationship_comp += Redefinition TypePart? SubsettingPart
;

fragment UsageCompletion returns SysML::Usage :
	ValuePart? DefinitionBody
;

fragment AbstractUsageCompletion returns SysML::Usage :
	ValuePart? AbstractDefinitionBody
;

fragment ValuePart returns SysML::Feature :
	'=' ownedFeatureMembership_comp += FeatureValue
;

FeatureValue returns SysML::FeatureValue :
	value_comp = Expression
;

fragment TypePart returns SysML::Feature :
	  TypedByKeyword ( ownedRelationship_comp += FeatureTyping ( ',' ownedRelationship_comp += FeatureTyping )* 
	  	    | 'any' ) MultiplicityPart?
	| MultiplicityPart
;

TypedByKeyword :
	':' | 'typed' 'by'
;

FeatureTyping returns SysML::FeatureTyping :
	type = [SysML::Type | QualifiedName]
;

fragment MultiplicityPart returns SysML::Feature :
	ownedFeatureMembership_comp += MultiplicityMember 
	( isOrdered ?= 'ordered'? & isNonunique ?= 'nonunique'? )	
;

Multiplicity returns SysML::MultiplicityRange :
	'[' ( ownedFeatureMembership_comp += NaturalLiteralMember '..' )? 
	      ownedFeatureMembership_comp += UnlimitedNaturalLiteralMember ']'
;

fragment SubsettingPart returns SysML::Feature :
	  (  
	  	Subsets ( ',' ownedRelationship_comp += Subset )*
	  | Redefines ( ',' ownedRelationship_comp += Redefinition )*
	  )*
;

fragment Subsets returns SysML::Feature :
	SubsetsKeyword ownedRelationship_comp += Subset 
;

SubsetsKeyword :
	':>' | 'subsets'
;

Subset returns SysML::Subsetting:
	subsettedFeature = [SysML::Feature|QualifiedName]
;

fragment Redefines returns SysML::Feature :
	RedefinesKeyword ownedRelationship_comp += Redefinition
;

RedefinesKeyword :
	':>>' | 'redefines'
;

Redefinition returns SysML::Redefinition:
	redefinedFeature = [SysML::Feature|QualifiedName] 
;

/* USAGE MEMBERSHIPS */

MultiplicityMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = Multiplicity
;

NaturalLiteralMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = NaturalLiteralExpression
;

UnlimitedNaturalLiteralMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = UnlimitedNaturalLiteralExpression
;

/* PARAMETERS */

Parameter returns SysML::Parameter :
	{SysML::Parameter} ParameterTypePart?
;

fragment ParameterTypePart returns SysML::Parameter :
	TypedByKeyword ( ownedRelationship_comp += FeatureTyping | 'any' ) MultiplicityPart?
	  | MultiplicityPart	
;

/* PART PROPERTIES */

fragment PartDeclaration returns SysML::PartProperty :
	( isAbstract ?= 'abstract' )? 'part' 
	name = Name TypePart? SubsettingPart
;

PartProperty returns SysML::PartProperty :
	Usage
;

AbstractPartProperty returns SysML::PartProperty :
	AbstractUsage
;

/* REFERENCE PROPERTIES */

ReferenceProperty returns SysML::ReferenceProperty :
	Usage
;

AbstractReferenceProperty returns SysML::ReferenceProperty :
	AbstractUsage
;

/* VALUE PROPERTIES */

fragment ValueDeclaration returns SysML::ValueProperty :
	( isAbstract ?= 'abstract' )? 'value'? 
	name = Name TypePart? SubsettingPart
;

ValueProperty returns SysML::ValueProperty :
	Usage
;

AbstractValueProperty returns SysML::ValueProperty :
	AbstractUsage
;

/* INDIVIDUALS */

IndividualUsage returns SysML::IndividualUsage :
	Usage
;

AbstractIndividualUsage returns SysML::IndividualUsage :
	AbstractUsage
;

TimeSliceUsage returns SysML::IndividualUsage :
	UsageDeclaration ownedFeatureMembership_comp += TimeSliceFeatureMember 
	UsageCompletion
;

AbstractTimeSliceUsage returns SysML::IndividualUsage :
	UsageDeclaration ownedFeatureMembership_comp += TimeSliceFeatureMember
	AbstractUsageCompletion
;

TimeSliceFeature returns SysML::TimeSliceFeature :
	{SysML::TimeSliceFeature}
;

SnapshotUsage returns SysML::IndividualUsage :
	UsageDeclaration ownedFeatureMembership_comp += SnapshotFeatureMember 
	UsageCompletion
;

AbstractSnapshotUsage returns SysML::IndividualUsage :
	UsageDeclaration ownedFeatureMembership_comp += SnapshotFeatureMember
	AbstractUsageCompletion
;

SnapshotFeature returns SysML::SnapshotFeature :
	{SysML::SnapshotFeature}
;

/* INDIVIDUAL MEMBERSHIPS */

TimeSliceFeatureMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = TimeSliceFeature
;

SnapshotFeatureMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = SnapshotFeature
;

/* PORT USAGE */

PortUsage returns SysML::PortUsage :
	Usage
;

AbstractPortUsage returns SysML::PortUsage :
	AbstractUsage
;

ConjugatedPortUsage returns SysML::PortUsage :
	ConjugatePortUsageDeclaration UsageCompletion
;

AbstractConjugatedPortUsage returns SysML::PortUsage :
	ConjugatePortUsageDeclaration AbstractUsageCompletion
;

fragment ConjugatePortUsageDeclaration returns SysML::Usage :
	  name = Name ConjugatePortTypePart MultiplicityPart? SubsettingPart
	| ConjugatePortTypePart MultiplicityPart? SubsettingPart
	| RedefinesKeyword ownedRelationship_comp += Redefinition ConjugatePortTypePart MultiplicityPart SubsettingPart
;

fragment ConjugatePortTypePart returns SysML::Feature :
	TypedByKeyword '~' ownedRelationship_comp += ConjugatedPortTyping
;

ConjugatedPortTyping returns SysML::ConjugatedPortTyping :
	portDefinition = [SysML::PortDefinition | QualifiedName]
;

/* CONNECTORS */

Connector returns SysML::ConnectionUsage :
	ConnectionPart AssociationBlockBody
;

AbstractConnector returns SysML::ConnectionUsage :
	ConnectionPart AbstractAssociationBlockBody
;

ConnectionUsage returns SysML::ConnectionUsage :
	UsageDeclaration 'connect' ConnectionPart AssociationBlockBody
;

AbstractConnectionUsage returns SysML::ConnectionUsage :
	UsageDeclaration 'connect' ConnectionPart AbstractAssociationBlockBody
;

fragment ConnectionPart returns SysML::ConnectionUsage :
	 ownedFeatureMembership_comp += ConnectorEndMember 'to' ownedFeatureMembership_comp += ConnectorEndMember
	| '(' ownedFeatureMembership_comp += ConnectorEndMember ',' ownedFeatureMembership_comp += ConnectorEndMember
	      ( ',' ownedFeatureMembership_comp += ConnectorEndMember )*
	  ')'
;

ConnectorEnd returns SysML::Feature :
	ownedRelationship_comp += Subset ( ownedFeatureMembership_comp += MultiplicityMember )?
;

MultiplicitySourceEnd returns SysML::Feature :
	{SysML::SourceEnd} (  ownedFeatureMembership_comp += MultiplicityMember )?
;

EmptySourceEnd returns SysML::Feature :
	{SysML::SourceEnd}
;

EmptyTargetEnd returns SysML::Feature :
	{SysML::TargetEnd}
;

/* CONNECTOR MEMBERSHIPS */

ConnectorEndMember returns SysML::EndFeatureMembership :
	( memberName = Name '=>' )? ownedMemberFeature_comp = ConnectorEnd
;

MultiplicitySourceEndMember returns SysML::EndFeatureMembership :
	ownedMemberFeature_comp = MultiplicitySourceEnd
;

EmptySourceEndMember returns SysML::EndFeatureMembership :
	ownedMemberFeature_comp = EmptySourceEnd
;

EmptyTargetEndMember returns SysML::EndFeatureMembership :
	ownedMemberFeature_comp = EmptyTargetEnd
;

/* INTERFACE CONNECTORS */

InterfaceUsage returns SysML::InterfaceUsage :	 
	UsageDeclaration 'connect' ConnectionPart InterfaceBody	  
;

AbstractInterfaceUsage returns SysML::InterfaceUsage :
	UsageDeclaration 'connect' ConnectionPart  AbstractInterfaceBody
;

/* BINDING CONNECTORS */

BindingConnector returns SysML::BindingConnector :
	( ( name = Name )? TypePart? 'as')?
	  ownedFeatureMembership_comp += ConnectorEndMember '=' ownedFeatureMembership_comp += ConnectorEndMember
	  DefinitionBody	
;

/* SUCCESSIONS */

Succession returns SysML::Succession :
	SuccessionDeclaration ';'
;

AbstractSuccession returns SysML::Succession :
	SuccessionDeclaration isAbstract ?= ';'
;

fragment SuccessionDeclaration returns SysML::Succession :
	( ( name = Name )? TypePart? 'first' )?
	ownedFeatureMembership_comp += ConnectorEndMember 'then' ownedFeatureMembership_comp += ConnectorEndMember
;

TargetSuccession returns SysML::Succession :
	'then' ownedFeatureMembership_comp += MultiplicitySourceEndMember ownedFeatureMembership_comp += ConnectorEndMember
;

EmptySuccession returns SysML::Succession :
	'then' ownedFeatureMembership_comp += MultiplicitySourceEndMember ownedFeatureMembership_comp += EmptyTargetEndMember
;

GuardedSuccession returns SysML::TransitionUsage :
	'succession' ( ( name = Name )? TypePart? 'first' )? 
	ownedFeatureMembership_comp += TransitionSourceMember 
	ownedFeatureMembership_comp += GuardExpressionMember
	'then' ownedFeatureMembership_comp += TransitionSuccessionMember
;

GuardedTargetSuccession returns SysML::TransitionUsage :
	ownedFeatureMembership_comp += GuardExpressionMember
	'then' ownedFeatureMembership_comp += TransitionSuccessionMember
;

DefaultTargetSuccession returns SysML::TransitionUsage :
	'else' ownedFeatureMembership_comp += TransitionSuccessionMember
;

/* ITEM FLOWS */

ItemFlow returns SysML::ItemFlow :
	ItemFlowDeclaration DefinitionBody
;

AbstractItemFlow returns SysML::ItemFlow :
	ItemFlowDeclaration AbstractDefinitionBody
;

SuccessionItemFlow returns SysML::SuccessionItemFlow :
	ItemFlowDeclaration DefinitionBody
;

AbstractSuccessionItemFlow returns SysML::SuccessionItemFlow :
	ItemFlowDeclaration AbstractDefinitionBody
;

fragment ItemFlowDeclaration returns SysML::ItemFlow :
	( ( name = Name )? TypePart? 
      ( 'of'  ownedFeatureMembership_comp += ItemFeatureMember
      | ownedFeatureMembership_comp += EmptyItemFeatureMember
      ) 'from'
    | ownedFeatureMembership_comp += EmptyItemFeatureMember
    )
	ownedFeatureMembership_comp += ItemFlowEndMember 'to' ownedFeatureMembership_comp += ItemFlowEndMember
;

ItemFeatureTyping returns SysML::ItemFeature :
	ownedRelationship_comp += FeatureTyping ( ownedFeatureMembership_comp += MultiplicityMember )?
;

EmptyItemFeature returns SysML::ItemFeature :
	{SysML::ItemFeature}
;

ItemFlowEnd returns SysML::ItemFlowEnd :
	ownedFeatureMembership_comp += ItemFlowFeatureMember
;

ItemFlowFeature returns SysML::ItemFlowFeature :
	ownedRelationship_comp += Redefinition
;

/* ITEM FLOW MEMBERSHIPS */

ItemFeatureMember returns SysML::FeatureMembership :
	( memberName = Name TypedByKeyword )? ownedMemberFeature_comp = ItemFeatureTyping
;

ItemFlowEndMember returns SysML::EndFeatureMembership :
	ownedMemberFeature_comp = ItemFlowEnd
;

ItemFlowFeatureMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = ItemFlowFeature
;

EmptyItemFeatureMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = EmptyItemFeature
;

/* ACTIONS */

fragment ActionDeclaration returns SysML::ActionUsage :
    ( isAbstract ?= 'abstract' )? 'action' 
	name = Name TypePart? SubsettingPart ( ValuePart | ActionParameterList )?
;

ActionUsage returns SysML::ActionUsage :
	{SysML::ActionUsage} ActionUsageDeclaration ActivityBody
;

AbstractActionUsage returns SysML::ActionUsage :
	ActionUsageDeclaration AbstractActivityBody
;

fragment ActionUsageDeclaration returns SysML::Step :
	  name = Name TypePart? SubsettingPart ( ValuePart | ActionParameterList )?
	| TypePart SubsettingPart ( ValuePart | ActionParameterList )?
	| RedefinesKeyword ownedRelationship_comp += Redefinition TypePart? SubsettingPart ( ValuePart | ActionParameterList )?
;

fragment ActionParameterList returns SysML::Type :
	'(' ( ownedFeatureMembership_comp += ActionParameterMember ( ownedFeatureMembership_comp += ActionParameterFlowMember )?
		  ( ',' ownedFeatureMembership_comp += ActionParameterMember ( ownedFeatureMembership_comp += ActionParameterFlowMember )? )*
		)?
	')'
;

ActionParameter returns SysML::Parameter :
	{SysML::Parameter} ParameterTypePart? ValuePart?
;

ActionParameterFlow returns SysML::ItemFlow :
	( 'stream' | {SysML::SuccessionItemFlow} 'flow' ) ownedFeatureMembership_comp += EmptyItemFeatureMember 
	'from' ownedFeatureMembership_comp += ItemFlowEndMember
;

PerformActionUsage returns SysML::PerformActionUsage :
	PerformActionUsageDeclaration ActivityBody
;

PerformActionUsageDeclaration returns SysML::PerformActionUsage :
   	( ( name = Name TypePart? 'as' )? ownedRelationship_comp += Subset 
   	| 'action' ( name = Name )? TypePart?
   	)
    SubsettingPart ( ValuePart | ActionParameterList )?
;

/* ACTIVITY NODES */

ActivityNode returns SysML::ActionUsage :
	  ActionNode | ControlNode
;

ActionNode returns SysML::ActionUsage :
	ActionNodeDeclaration ActivityBody
;

ActionNodeDeclaration returns SysML::ActionUsage :
	  AcceptActionNodeDeclaration
	| SendActionNodeDeclaration	
;

AcceptActionNodeDeclaration returns SysML::AcceptActionUsage :
	ownedFeatureMembership_comp += EmptyParameterMember
	'accept' ( name = Name TypePart? )? '(' ownedFeatureMembership_comp += ItemFeatureMember ')'
;

SendActionNodeDeclaration returns SysML::SendActionUsage :
	ownedFeatureMembership_comp += EmptyParameterMember ownedFeatureMembership_comp += EmptyItemFeatureMember
	'send' ( ( name = Name TypePart? )? 'of')? ownedFeatureMembership_comp += ExpressionMember 
	'to' ownedFeatureMembership_comp += ExpressionMember
;

ControlNode returns SysML::ControlNode :
	  MergeNode
	| DecisionNode
	| JoinNode
	| ForkNode
;

MergeNode returns SysML::MergeNode :
	{SysML::MergeNode} isComposite ?= 'merge' ( name = Name TypePart? )? ';'
;

DecisionNode returns SysML::DecisionNode :
	{SysML::DecisionNode} isComposite ?= 'decide' ( name = Name TypePart? )? ';'
;

JoinNode returns SysML::JoinNode :
	{SysML::JoinNode} isComposite ?= 'join' ( name = Name TypePart? )? ';'
;

ForkNode returns SysML::ForkNode :
	{SysML::ForkNode} isComposite ?= 'fork' ( name = Name TypePart? )? ';'
;

EmptyParameter returns SysML::Parameter :
	{SysML::Parameter}
;

/* ACTION MEMBERSHIPS */

ActionParameterMember returns SysML::ParameterMembership :
	( direction = FeatureDirection
    | ( direction = FeatureDirection )? memberName = Name 
    )
	ownedMemberFeature_comp = ActionParameter
;

ActionParameterFlowMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = ActionParameterFlow
;

EmptySuccessionMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = EmptySuccession
;

EmptyParameterMember returns SysML::ParameterMembership :
	ownedMemberFeature_comp = EmptyParameter
;

/* FUNCTIONS */

fragment FunctionDeclaration returns SysML::FunctionUsage :
    ( isAbstract ?= 'abstract' )? FunctionKeyword 
	name = Name TypePart? SubsettingPart ( ValuePart | ActionParameterList FunctionReturnParameterPart )?
;

FunctionUsage returns SysML::FunctionUsage :
	FunctionUsageDeclaration FunctionBody
;

AbstractFunctionUsage returns SysML::FunctionUsage :
	FunctionUsageDeclaration AbstractFunctionBody
;

fragment FunctionUsageDeclaration returns SysML::Step :
	  name = Name TypePart? SubsettingPart ( ValuePart | ActionParameterList FunctionReturnParameterPart )?
	| TypePart SubsettingPart ( ValuePart | ActionParameterList FunctionReturnParameterPart )?
	| RedefinesKeyword ownedRelationship_comp += Redefinition TypePart? 
	  SubsettingPart ( ValuePart | ActionParameterList FunctionReturnParameterPart )? 
;

fragment FunctionReturnParameterPart returns SysML::Type :
	ownedFeatureMembership_comp += FunctionReturnParameterMember
;

/* FUNCTION USAGE MEMBERSHIPS */

FunctionReturnParameterMember returns SysML::ReturnParameterMembership :
	( 'return' )? ( memberName = Name )? ownedMemberParameter_comp = ActionParameter
;

/* STATES */

fragment StateDeclaration returns SysML::StateUsage :
    ( isAbstract ?= 'abstract' )? 'state' 
	name = Name TypePart? SubsettingPart ( ValuePart | ActionParameterList )?
;

StateUsage returns SysML::StateUsage :
	{SysML::StateUsage} ActionUsageDeclaration StateBody
;

AbstractStateUsage returns SysML::StateUsage :
	{SysML::StateUsage} ActionUsageDeclaration AbstractStateBody
;

ExhibitStateUsage returns SysML::ExhibitStateUsage :
    ( ( name = Name TypePart? 'as' )? ownedRelationship_comp += Subset 
    | 'state' ( name = Name )? TypePart?
    )
    SubsettingPart ( ValuePart | ActionParameterList )?
	StateBody
;

/* TRANSITIONS */

TransitionStep returns SysML::TransitionUsage :
	'transition' ( ( name = Name )? TypePart? 'first' )? 
	ownedFeatureMembership_comp += TransitionSourceMember 
	( ownedFeatureMembership_comp += TriggerStepMember )?
	( ownedFeatureMembership_comp += GuardExpressionMember )?
	( ownedFeatureMembership_comp += EffectBehaviorMember )?
	'then' ownedFeatureMembership_comp += TransitionSuccessionMember
;

TargetTransitionStep returns SysML::TransitionUsage :
	( ownedFeatureMembership_comp += TriggerStepMember )?
	( ownedFeatureMembership_comp += GuardExpressionMember )?
	( ownedFeatureMembership_comp += EffectBehaviorMember )?
	'then' ownedFeatureMembership_comp += TransitionSuccessionMember
;

TriggerStep returns SysML::AcceptActionUsage :
	ownedFeatureMembership_comp += EmptyParameterMember
	ownedFeatureMembership_comp += ItemFeatureMember
;

EffectBehaviorUsage returns SysML::ActionUsage :
	  EmptyActionUsage | PerformedActionUsage ( '{' ActivityBodyItem* '}' )?
;

TransitionSuccession returns SysML::Succession :
	ownedFeatureMembership_comp += EmptySourceEndMember 
	ownedFeatureMembership_comp += ConnectorEndMember
;

/* TRANSITION MEMBERSHIPS */

TransitionSourceMember returns SysML::FeatureMembership :
	memberFeature = [SysML::Feature|QualifiedName]
;

TransitionSuccessionMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = TransitionSuccession
;

TriggerStepMember returns SysML::TransitionFeatureMembership :
	kind = TriggerFeatureKind ownedMemberFeature_comp = TriggerStep
;

enum TriggerFeatureKind returns SysML::TransitionFeatureKind :
	trigger = 'accept'
;

GuardExpressionMember returns SysML::TransitionFeatureMembership :
	kind = GuardFeatureKind ownedMemberFeature_comp = Expression
;

enum GuardFeatureKind returns SysML::TransitionFeatureKind :
	guard = 'if'
;

EffectBehaviorMember returns SysML::TransitionFeatureMembership :
	kind = EffectFeatureKind ownedMemberFeature_comp = EffectBehaviorUsage
;

enum EffectFeatureKind returns SysML::TransitionFeatureKind :
	effect = 'do'
;

/* CONSTRAINTS */

ConstraintUsage returns SysML::ConstraintUsage :
	ConstraintDeclaration ConstraintBody
;

AbstractConstraintUsage returns SysML::ConstraintUsage :
	ConstraintDeclaration AbstractConstraintBody
;

fragment ConstraintDeclaration returns SysML::ConstraintUsage :
	  name = Name TypePart? ConstraintParameterPart
	| TypePart? ( ValuePart | ActionParameterList )? EmptyReturnParameterPart
	| RedefinesKeyword ownedRelationship_comp += Redefinition 
		TypePart?( ValuePart | ActionParameterList )? EmptyReturnParameterPart
;

fragment ConstraintParameterPart returns SysML::ConstraintUsage :
	SubsettingPart ( ValuePart | ActionParameterList )? EmptyReturnParameterPart
;

AssertConstraintUsage returns SysML::AssertConstraintUsage :
    ( ( ( name = Name )? TypePart? 'as' )? ownedRelationship_comp += Subset 
    | 'constraint' ( name = Name )? TypePart? 
    )
    ConstraintParameterPart InvariantPart ConstraintBody
;

fragment InvariantPart returns SysML::Invariant :
	ownedFeatureMembership_comp += TrueLiteralMember
;

TrueLiteralExpression returns SysML::LiteralBoolean :
	{SysML::LiteralBoolean}
;

/* CONSTRAINT MEMBERSHIPS */

TrueLiteralMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = TrueLiteralExpression
;

/* REQUIREMENTS */

RequirementUsage returns SysML::RequirementUsage :
	RequirementDeclaration RequirementBody
;

AbstractRequirementUsage returns SysML::RequirementUsage :
	RequirementDeclaration AbstractRequirementBody
;

fragment RequirementDeclaration returns SysML::RequirementUsage :
	( 'id' reqId = Name )? 
	( name = Name TypePart? ConstraintParameterPart
	| TypePart? ( ValuePart | ActionParameterList )? EmptyReturnParameterPart
	| RedefinesKeyword ownedRelationship_comp += Redefinition 
		TypePart? ( ValuePart | ActionParameterList )? EmptyReturnParameterPart
	)
;

//fragment RequirementParameterPart returns SysML::RequirementUsage :
//	RequirementParameterList EmptyReturnParameterPart SubsettingPart ValuePart?
//;
//
//fragment RequirementParameterList returns SysML::RequirementUsage :
//	  ownedFeatureMembership_comp += EmptyParameterMember
//	| ParenRequirementParameterList
//;
//
//fragment ParenRequirementParameterList returns SysML::RequirementUsage :
//	  '(' ownedFeatureMembership_comp += EmptyParameterMember ')'
//	| '(' ownedFeatureMembership_comp += ActionParameterMember ( ownedFeatureMembership_comp += ActionParameterFlowMember )?
//		  ( ',' ownedFeatureMembership_comp += ActionParameterMember ( ownedFeatureMembership_comp += ActionParameterFlowMember )? )*
//	  ')'	
//;

SatisfyRequirementUsage returns SysML::SatisfyRequirementUsage :
     ( ( ( name = Name )? TypePart? 'as' )? ownedRelationship_comp += Subset 
     | 'requirement' ( name = Name )? TypePart? 
     )
     ( 'by' ownedFeatureMembership_comp += SatisfactionConnectorMember )?
     ConstraintParameterPart InvariantPart RequirementBody
;

SatisfactionConnector returns SysML::BindingConnector :
	ownedFeatureMembership_comp += EmptySourceEndMember ownedFeatureMembership_comp += ConnectorEndMember
;

/* REQUIREMENT MEMBERSHIPS */

SatisfactionConnectorMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = SatisfactionConnector
;

/* EXPRESSIONS */

Expression returns SysML::Expression :
	 ConditionalExpression | QueryPathExpression
;

// Conditional Test Expressions

ConditionalExpression returns SysML::Expression :
	NullCoalescingExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = ConditionalTestOperator operand_comp += Expression ':' operand_comp += ConditionalExpression
	)?
;

ConditionalTestOperator: 
	'?'
;

// Null Coalescing Expressions

NullCoalescingExpression returns SysML::Expression :
	ConditionalOrExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = NullCoalescingOperator operand_comp += ConditionalOrExpression )*
;

NullCoalescingOperator :
	'??'
;

// Conditional Logical Expressions

ConditionalOrExpression returns SysML::Expression :
	ConditionalAndExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = ConditionalOrOperator operand_comp += ConditionalAndExpression )*
;

ConditionalOrOperator :
	'||'
;

ConditionalAndExpression returns SysML::Expression :
	OrExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = ConditionalAndOperator operand_comp += OrExpression )*
;

ConditionalAndOperator :
	'&&'
;

// Logical Expressions

OrExpression returns SysML::Expression :
	XorExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = OrOperator operand_comp += XorExpression )*
;

OrOperator :
	'|'
;

XorExpression returns SysML::Expression :
	AndExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = XorOperator operand_comp += AndExpression )*
;

XorOperator :
	'^'
;

AndExpression returns SysML::Expression :
	EqualityExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = AndOperator operand_comp += EqualityExpression )*
;

AndOperator :
	'&'
;

// Equality Expressions

EqualityExpression returns SysML::Expression :
	ClassificationExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = EqualityOperator operand_comp += ClassificationExpression )*
	
;

EqualityOperator :
	'==' | '!=' 
;

// Classification Expressions

ClassificationExpression returns SysML::Expression :
	RelationalExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = ClassificationOperator ownedFeatureMembership_comp += TypeReferenceMember )?
;

ClassificationOperator :
	'instanceof' | 'hastype'
;

// Relational Expressions

RelationalExpression returns SysML::Expression :
	AdditiveExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = RelationalOperator operand_comp += AdditiveExpression )*
;

RelationalOperator :
	'<' | '>' | '<=' | '>='
;

// Arithmetic Expressions

AdditiveExpression returns SysML::Expression :
	MultiplicativeExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = AdditiveOperator operand_comp += MultiplicativeExpression )*	
;

AdditiveOperator :
	'+' | '-' 
;

MultiplicativeExpression returns SysML::Expression :
	ExponentiationExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = MultiplicativeOperator operand_comp += ExponentiationExpression )*	
;

MultiplicativeOperator :
	'*' | '/' 
;

ExponentiationExpression returns SysML::Expression :
	UnitsExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = ExponentiationOperator operand_comp += UnitsExpression )*		
;

ExponentiationOperator :
	'**'
;

// Units Expressions

UnitsExpression returns SysML::Expression :
	UnaryExpression ( {SysML::OperatorExpression.operand_comp += current} 
		operator = '@' '[' operand_comp += Expression ']' )?		
;

// Unary Expressions

UnaryExpression returns SysML::Expression:
	SequenceAccessExpression | {SysML::OperatorExpression} operator = UnaryOperator operand_comp += SequenceAccessExpression
;

UnaryOperator :
	'+' | '-' | '!' | '~'
;

SequenceAccessExpression returns SysML::Expression :
	 PrimaryExpression 
	 ( {SysML::OperatorExpression.operand_comp += current} operator = '[' operand_comp += Expression ']' )?
;

// Primary Expressions

PrimaryExpression returns SysML::Expression :
	BaseExpression ( {SysML::OperatorExpression.operand_comp += current} '->' 
		operator = Name ( ownedFeatureMembership_comp += BodyMember )+
	)*
;

// Body Expressions

BodyExpression returns SysML::BlockExpression :
	   => ( ownedFeatureMembership_comp += BodyParameterMember ( ownedFeatureMembership_comp += BodyParameterMember )* 
	   '(' ownedFeatureMembership_comp += ExpressionMember ')' )
	 | ownedRelationship_comp += ExpressionTyping
;

ExpressionTyping returns SysML::FeatureTyping :
	type = [ SysML::Function | QualifiedName ]
;

// Base Expressions

BaseExpression returns SysML::Expression :
	  NullExpression
	| LiteralExpression 
	| FeatureReferenceExpression 
	| InvocationExpression 
	| ClassExtentExpression
	| SequenceConstructionExpression 
	| '(' Expression ')'
;

FeatureReferenceExpression returns SysML::FeatureReferenceExpression :
	ownedFeatureMembership_comp += FeatureReferenceMember
;

FeatureReference returns SysML::Parameter :
	ownedRelationship_comp += Subset
;

InvocationExpression returns SysML::InvocationExpression :
	ownedRelationship_comp += FeatureTyping '(' Tuple? ')'
;

fragment Tuple returns SysML::Expression :
	PositionalTuple | NamedTuple
;

fragment PositionalTuple returns SysML::Expression :
	ownedFeatureMembership_comp += ExpressionMember ( ',' ownedFeatureMembership_comp += ExpressionMember )*
;

fragment NamedTuple returns SysML::Expression :
	ownedFeatureMembership_comp += NamedExpressionMember ( ',' ownedFeatureMembership_comp += NamedExpressionMember )*
;

ClassExtentExpression returns SysML::OperatorExpression :
	ownedFeatureMembership_comp += TypeReferenceMember '.' operator = 'allInstances' '(' ')'
;

TypeReference returns SysML::Feature :
	ownedRelationship_comp += FeatureTyping
;

SequenceConstructionExpression returns SysML::Expression :
	  {SysML::NullExpression} '{' '}'
	| '{' Expression
	      ( {SysML::OperatorExpression.operand_comp += current} operator = ',' operand_comp += SequenceElementList
	      | {SysML::OperatorExpression.operand_comp += current} operator = '..' operand_comp += Expression
	      )?
	  '}'
;

SequenceElementList returns SysML::Expression :	
	Expression ( {SysML::OperatorExpression.operand_comp += current} operator = ',' operand_comp += SequenceElementList )?
;

NullExpression returns SysML::NullExpression :
	{SysML::NullExpression} 'null'
;

// Literal Expressions

LiteralExpression returns SysML::LiteralExpression :
	BooleanLiteralExpression | StringLiteralExpression | RealLiteralExpression | UnlimitedNaturalLiteralExpression
;

BooleanLiteralExpression returns SysML::LiteralBoolean :
	value = BooleanValue
;

BooleanValue returns Ecore::EBoolean :
	'true' | 'false'
;

StringLiteralExpression returns SysML::LiteralString :
	value = STRING_VALUE
;

RealLiteralExpression returns SysML::LiteralReal:
	value = RealValue
;

RealValue returns Ecore::EDouble:
	DECIMAL_VALUE? '.' ( DECIMAL_VALUE | EXP_VALUE ) | EXP_VALUE
;

NaturalLiteralExpression returns SysML::LiteralInteger:
	value = DECIMAL_VALUE
;

UnlimitedNaturalLiteralExpression returns SysML::LiteralExpression:
	NaturalLiteralExpression | {SysML::LiteralUnbounded} '*'
;

/* EXPRESSION MEMBERSHIPS */

ExpressionMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = Expression
;

FeatureReferenceMember returns SysML::ReturnParameterMembership :
	ownedMemberFeature_comp = FeatureReference
;

TypeReferenceMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = TypeReference
;

NamedExpressionMember returns SysML::FeatureMembership :
	memberName = Name '=>' ownedMemberFeature_comp = Expression
;

BodyMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = BodyExpression
;

BodyParameterMember returns SysML::ParameterMembership :
	memberName = Name ownedMemberFeature_comp = Parameter
;

/* QUERY PATH EXPRESSIONS */

QueryPathExpression returns SysML::Expression :
	QueryHeadExpression
	( '[' {SysML::QueryQualifierExpression.operand_comp += current}
         ( ownedFeatureMembership_comp += BodyMember ) ']' )?
	( '/' {SysML::QueryPathStepExpression.operand_comp += current}
		operand_comp += QueryNameExpression
		( '[' {SysML::QueryQualifierExpression.operand_comp += current}
	         ( ownedFeatureMembership_comp += BodyMember ) ']' )?
	)*
;

QueryNameExpression returns SysML::QueryPathExpression :
    /* isParent ?= '..'
    | isDescendants ?= '/'
    | @traversal
    */
    ownedFeatureMembership_comp += FeatureReferenceMember
;

QueryHeadExpression returns SysML::QueryPathExpression :
	'./' ownedFeatureMembership_comp += FeatureReferenceMember
;        

/* NAMES */

Name :
	ID | UNRESTRICTED_NAME
;

QualifiedName :
	Name | ColonQualifiedName | DotQualifiedName
;

ColonQualifiedName :
	Name ('::' Name)+
;

DotQualifiedName :
	Name ('.' Name)+
;

/* TERMINALS */

//terminal NATURAL_VALUE returns Ecore::EInt :
//	('0' | '1'..'9' (('_')? '0'..'9')*) | //DECIMAL 
//	(('0b' | '0B') '0'..'1' (('_')? '0'..'1')*) | // BINARY
//	(('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')  (('_')? ('0'..'9'|'a'..'f'|'A'..'F'))*) | // HEX
//	('0' ('_')? '0'..'7' (('_')? '0'..'7')*) // OCT
//;

terminal DECIMAL_VALUE returns Ecore::EInt :
	'0'..'9' ('0'..'9')*
;

terminal EXP_VALUE :
	DECIMAL_VALUE ('e' | 'E') ('+' | '-')? DECIMAL_VALUE
;

terminal ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ;
terminal UNRESTRICTED_NAME returns Ecore::EString : 
	'\'' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'\'') )* '\'' ;

terminal STRING_VALUE returns Ecore::EString : 
	'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"' ;

terminal ML_COMMENT	: '/*' !'*' -> '*/';
terminal DOCUMENTATION_COMMENT : '/**' -> '*/' ;

terminal ML_NOTE : '//*' -> '*/';
terminal SL_NOTE : '//' (!('\n'|'\r') !('\n'|'\r')*)? ('\r'? '\n')?;

terminal WS : (' '|'\t'|'\r'|'\n')+;
