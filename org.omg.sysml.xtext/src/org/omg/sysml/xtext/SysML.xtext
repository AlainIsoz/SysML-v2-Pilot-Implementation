/*****************************************************************************
 * SysML 2 Pilot Implementation
 * Copyright (c) 2018, 2019 Model Driven Solutions, Inc.
 * Copyright (c) 2018 IncQuery Labs Ltd.
 * Copyright (c) 2019 Maplesoft (Waterloo Maple, Inc.)
 *    
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of theGNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * @license LGPL-3.0-or-later <http://spdx.org/licenses/LGPL-3.0-or-later>
 * 
 * Contributors:
 *  Ed Seidewitz, MDS
 *  Zoltan Kiss, IncQuery
 *  Balazs Grill, IncQuery
 *  Hisashi Miyashita, Maplesoft
 * 
 *****************************************************************************/

grammar org.omg.sysml.xtext.SysML hidden (WS, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as Ecore
import "http://www.omg.org/spec/SysML/2.0" as SysML

/* UNITS */

Unit returns SysML::Package :
	  AnonymousPackage
	| PackageUnit 
	| BlockUnit
	| ValueTypeUnit
	| AssociationBlockUnit
	| InterfaceDefinitionUnit 
	| ActivityUnit
	| StateDefinitionUnit
	| PartUnit
	| ValueUnit
	| ActionUnit
	| StateUnit
;

AnonymousPackage returns SysML::Package :
	PackageBody
;

PackageUnit returns SysML::Package: 
    UnitPrefix PackageDeclaration PackageBody 
;

BlockUnit returns SysML::Block:
	UnitPrefix BlockDeclaration DefinitionBody
;

ValueTypeUnit returns SysML::ValueType :
	UnitPrefix ValueTypeDeclaration DefinitionBody
;

AssociationBlockUnit returns SysML::AssociationBlock :
	UnitPrefix AssociationBlockDeclaration AssociationBlockBody
;

InterfaceDefinitionUnit returns SysML::InterfaceDefinition :
	UnitPrefix InterfaceDeclaration InterfaceBody
;

ActivityUnit returns SysML::Activity :
	UnitPrefix ActivityDeclaration ActivityBody
;

StateDefinitionUnit returns SysML::Behavior :
	UnitPrefix StateDefDeclaration StateBody
;

PartUnit returns SysML::PartProperty :
	UnitPrefix PartDeclaration UsageCompletion
;

ValueUnit returns SysML::ValueProperty :
	UnitPrefix ValueDeclaration UsageCompletion
;

ActionUnit returns SysML::ActionUsage :
	UnitPrefix ActionDeclaration ActivityBody
;

StateUnit returns SysML::ActionUsage :
	UnitPrefix StateDeclaration StateBody
;

fragment UnitPrefix returns SysML::Package :
	( ownedRelationship_comp += PrefixAnnotation )*
;

/* VISIBILITY */

enum PackageElementVisibilityIndicator returns SysML::VisibilityKind:
	public = 'public' | private = 'private'
;

enum VisibilityIndicator returns SysML::VisibilityKind :
	public = 'public' | private = 'private' | protected = 'protected'
;

/* COMMENTS */

Comment returns SysML::Comment :
	( 'comment' ( name = Name )? ownedRelationship_comp += Annotation
	| ownedRelationship_comp += EmptyAnnotation
	)
	body = ML_COMMENT
;

Annotation returns SysML::Annotation :
	{SysML::Annotation} ( 'about' annotatedElement = [SysML::Element|QualifiedName] )?
;

EmptyAnnotation returns SysML::Annotation :
	{SysML::Annotation}
;

PrefixAnnotation returns SysML::Annotation :
	ownedRelatedElement_comp += Documentation
;

Documentation returns SysML::Comment :
	('comment' ( name = Name )? )? body = DOCUMENTATION_COMMENT
;

/* IMPORTS */

Import returns SysML::Import :
	( ownedRelationship_comp += PrefixAnnotation )*
	( visibility = PackageElementVisibilityIndicator )?  
	'import' (
	  importedPackage = [SysML::Package|Name] ( '::' | '.' ) '*' 
	| importedPackage = [SysML::Package|ColonQualifiedName] '::' '*' 
	| importedPackage = [SysML::Package|DotQualifiedName] '.' '*'
	) ';'
;

/* PACKAGES */

Package returns SysML::Package :
	PackageDeclaration PackageBody
;

fragment PackageDeclaration returns SysML::Package : 
	'package' name = Name 
;

fragment PackageBody returns SysML::Package :
	'{' ( ownedMembership_comp += PackageMember | ownedImport_comp += Import )* '}'
;

/* PACKAGE MEMBERSHIPS */

PackageMember returns SysML::Membership : 
	PackageMemberPrefix	
	( PackagedDefinitionMember 
	| PackagedUsageMember
	)
;

fragment PackageMemberPrefix returns SysML::Membership :
	( ownedRelationship_comp += PrefixAnnotation )*
    ( visibility = PackageElementVisibilityIndicator )?		
;

fragment PackagedDefinitionMember returns SysML::Membership :
	( ownedMemberElement_comp = Package
	| 'package' ( memberName = Name )? 'is' memberElement = [SysML::Package|QualifiedName] ';'
	| ownedMemberElement_comp = Block
    | 'block' ( memberName = Name )? 'is' memberElement = [SysML::Block|QualifiedName] ';'
	| ownedMemberElement_comp = ValueType
    | 'value' 'type' ( memberName = Name )? 'is' memberElement = [SysML::ValueType|QualifiedName] ';'
	| ownedMemberElement_comp = AssociationBlock
    | 'assoc' 'block' ( memberName = Name )? 'is' memberElement = [SysML::AssociationBlock|QualifiedName] ';'
	| ownedMemberElement_comp = InterfaceDefinition
    | 'interface' 'def' ( memberName = Name )? 'is' memberElement = [SysML::InterfaceDefinition|QualifiedName] ';'
	| ownedMemberElement_comp = PortDefinition
    | 'port' 'def' ( memberName = Name )? 'is' memberElement = [SysML::PortDefinition|QualifiedName] ';'
	| ownedMemberElement_comp = Activity
    | 'activity' ( memberName = Name )? 'is' memberElement = [SysML::Activity|QualifiedName] ';'
    | ownedMemberElement_comp = StateDefinition
    | 'state' 'def' ( memberName = Name )? 'is' memberElement = [SysML::Behavior|QualifiedName] ';'
	| 'import' memberElement = [SysML::Element|QualifiedName] ( 'as' memberName = Name )? ';'
	| ownedMemberElement_comp = Comment
	| 'comment' ( memberName = Name )? 'is' memberElement = [SysML::Comment|QualifiedName] ';'
	)
;

fragment PackagedUsageMember returns SysML::Membership :
	  'part' ownedMemberElement_comp = PartProperty
	| 'abstract' 'part' ownedMemberElement_comp = AbstractPartProperty
	| 'part' ( memberName = Name )? 'is' memberElement = [SysML::PartProperty|QualifiedName] ';'
	| 'value'? ownedMemberElement_comp = ValueProperty
	| 'abstract' 'value'? ownedMemberElement_comp = AbstractValueProperty
	| ( 'value' ( memberName = Name )? | memberName = Name ) 'is' memberElement = [SysML::ValueProperty|QualifiedName] ';'
	| 'action' ownedMemberElement_comp = ActionUsage
	| 'abstract' 'action' ownedMemberElement_comp = AbstractActionUsage
	| 'action' ( memberName = Name )? 'is' memberElement = [SysML::ActionUsage|QualifiedName] ';'
	| 'state' ownedMemberElement_comp = StateUsage
	| 'abstract' 'state' ownedMemberElement_comp = AbstractStateUsage
	| 'state' ( memberName = Name )? 'is' memberElement = [SysML::ActionUsage|QualifiedName] ';'
;

/* DEFINITIONS */

fragment DefinitionBody returns SysML::Type :
	  ';' 
	| '{' ( 
		  ownedMembership_comp += NestedDefinitionMember 
		| ownedFeatureMembership_comp += NestedUsageMember 
		| ownedImport_comp += Import
	)* '}'
;

fragment AbstractDefinitionBody returns SysML::Type :
	  isAbstract ?= ';' 
	| isAbstract ?= '{' ( 
		  ownedMembership_comp += NestedDefinitionMember 
		| ownedFeatureMembership_comp += NestedUsageMember 
		| ownedImport_comp += Import
	)* '}'
;

/* DEFINITION MEMBERSHIPS */

NestedDefinitionMember returns SysML::Membership : 
	DefinitionMemberPrefix PackagedDefinitionMember
;

NestedUsageMember returns SysML::FeatureMembership :
	StructureUsageMember | BehaviorUsageMember
;

StructureUsageMember returns SysML::FeatureMembership :
	NonPortStructureUsageMember | PortMember | ConjugatedPortMember
;

NonPortStructureUsageMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix
	(
	  isComposite ?= 'part' ownedMemberFeature_comp = PartProperty
	| 'abstract' isComposite ?= 'part' ownedMemberFeature_comp = AbstractPartProperty
	| isComposite ?= 'part' ( memberName = Name )? 'is' memberFeature = [SysML::PartProperty|QualifiedName] ';'
	| 'ref' ( direction = FeatureDirection )? ownedMemberFeature_comp = ReferenceProperty
	| 'abstract' 'ref' ( direction = FeatureDirection )? ownedMemberFeature_comp = AbstractReferenceProperty
	| 'ref' ( direction = FeatureDirection )? ( memberName = Name )? 'is' memberFeature = [SysML::ReferenceProperty|QualifiedName] ';'
	| 'value'? ( direction = FeatureDirection )? ownedMemberFeature_comp = ValueProperty
	| 'abstract' 'value'? ( direction = FeatureDirection )? ownedMemberFeature_comp = AbstractValueProperty
	| 'value'? ( direction = FeatureDirection )? ( memberName = Name )? 'is' memberFeature = [SysML::ValueProperty|QualifiedName] ';'
	| 'interface' ownedMemberFeature_comp = InterfaceUsage
	| 'abstract' 'interface' ownedMemberFeature_comp = AbstractInterfaceUsage
	| 'interface' ( memberName = Name )? 'is' memberFeature = [SysML::InterfaceUsage|QualifiedName] ';'
	| 'link' ownedMemberFeature_comp = ConnectionUsage 
    | 'abstract' 'link' ownedMemberFeature_comp = AbstractConnectionUsage
	| 'connect' ownedMemberFeature_comp = Connector 
    | 'abstract' 'connect' ownedMemberFeature_comp = AbstractConnector
    | 'connect' ( memberName = Name )? 'is' memberFeature = [SysML::ConnectionUsage|QualifiedName] ';'
    | 'bind' ownedMemberFeature_comp = BindingConnector
	| 'succession' ownedMemberFeature_comp = Succession 
    | 'abstract' 'succession' ownedMemberFeature_comp = AbstractSuccession
	| 'succession' ( memberName = Name )? 'is' memberFeature = [SysML::Succession|QualifiedName] ';'
	| 'stream' ownedMemberFeature_comp = ItemFlow 
    | 'abstract' 'stream' ownedMemberFeature_comp = AbstractItemFlow
	| 'stream' ( memberName = Name )? 'is' memberFeature = [SysML::ItemFlow|QualifiedName] ';'
	| 'flow' ownedMemberFeature_comp = SuccessionItemFlow 
    | 'abstract' 'flow' ownedMemberFeature_comp = AbstractSuccessionItemFlow
	| 'flow' ( memberName = Name )? 'is' memberFeature = [SysML::SuccessionItemFlow|QualifiedName] ';'
    )
;

BehaviorUsageMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix
	( ('ref' 'action' | isComposite ?= 'action' ) ownedMemberFeature_comp = ActionUsage
	| 'abstract' ('ref' 'action' | isComposite ?= 'action' )  ownedMemberFeature_comp = AbstractActionUsage
	| 'action' ( memberName = Name )? 'is' memberFeature = [SysML::ActionUsage|QualifiedName] ';'
	| ('ref' 'state' | isComposite ?= 'state' )  ownedMemberFeature_comp = StateUsage
	| 'abstract' ('ref' 'state' | isComposite ?= 'state' )  ownedMemberFeature_comp = AbstractStateUsage
	| 'state' ( memberName = Name )? 'is' memberFeature = [SysML::ActionUsage|QualifiedName] ';'
	| 'perform' ownedMemberFeature_comp = PerformActionUsage
	| 'exhibit' ownedMemberFeature_comp = ExhibitStateUsage
	)
;

PortMember returns SysML::PortMembership :
	DefinitionMemberPrefix
	( isPort ?= 'port' ownedMemberFeature_comp = PortUsage
	| 'abstract' isPort ?= 'port' ownedMemberFeature_comp = AbstractPortUsage
	)
;

ConjugatedPortMember returns SysML::ConjugatedPortMembership :
	DefinitionMemberPrefix
	( isPort ?= 'port' ownedMemberFeature_comp = ConjugatedPortUsage
	| 'abstract' isPort ?= 'port' ownedMemberFeature_comp = AbstractConjugatedPortUsage
	)
;

enum FeatureDirection returns SysML::FeatureDirectionKind :
	in = 'in' | out = 'out' | inout = 'inout'
;

fragment DefinitionMemberPrefix returns SysML::Membership :
	( ownedRelationship_comp += PrefixAnnotation )*
    ( visibility = VisibilityIndicator )?
;

/* CLASSIFIERS */

fragment ClassifierDeclarationCompletion returns SysML::Classifier :	
	name = Name 
//  ( '<' ownedMember += ClassifierTemplateParameter ( ',' ownedMember += ClassifierTemplateParameter )* '>' )? 
	SuperclassingList?
;

fragment SuperclassingList returns SysML::Classifier :
	( ':>' | 'specializes' ) ownedRelationship_comp += Superclassing ( ',' ownedRelationship_comp += Superclassing )*
;

Superclassing returns SysML::Superclassing:
	superclass = [SysML::Classifier | QualifiedName]
;

/* BLOCKS */

Block returns SysML::Block :
	BlockDeclaration DefinitionBody
;

fragment BlockDeclaration returns SysML::Block :
	( isAbstract ?= 'abstract' )? 'block' ClassifierDeclarationCompletion
;

/* VALUE TYPES */

ValueType returns SysML::ValueType :
	ValueTypeDeclaration DefinitionBody
;

fragment ValueTypeDeclaration returns SysML::ValueType :
	( isAbstract ?= 'abstract' )? 'value' 'type' ClassifierDeclarationCompletion
;

/* PORT DEFINITIONS */

PortDefinition returns SysML::PortDefinition :
	PortDeclaration DefinitionBody
;

fragment PortDeclaration returns SysML::PortDefinition :
	( isAbstract ?= 'abstract' )? 'port' 'def' ClassifierDeclarationCompletion
;

/* ASSOCIATION BLOCKS */

AssociationBlock returns SysML::AssociationBlock :
	AssociationBlockDeclaration AssociationBlockBody
;

fragment AssociationBlockDeclaration returns SysML::AssociationBlock :
	( isAbstract ?= 'abstract' )? 'assoc' 'block' ClassifierDeclarationCompletion
;

fragment AssociationBlockBody returns SysML::Type :
	  ';'
	| '{' (
		  ownedMembership_comp += NestedDefinitionMember 
		| ownedFeatureMembership_comp += AssociationUsageMember
		| ownedImport_comp += Import
	  )* '}'
;

fragment AbstractAssociationBlockBody returns SysML::Type :
	  isAbstract ?= ';'
	| isAbstract ?= '{' ( 
		  ownedMembership_comp += NestedDefinitionMember 
		| ownedFeatureMembership_comp += AssociationUsageMember
		| ownedImport_comp += Import
	)* '}'
;

/* ASSOCIATION BLOCK MEMBERSHIPS */

AssociationUsageMember returns SysML::FeatureMembership :
	NestedUsageMember | AssociationEndMember | EndPortMember | ConjugatedEndPortMember
;

AssociationEndMember returns SysML::EndFeatureMembership :
	DefinitionMemberPrefix
    ( 'end' isComposite ?= 'part' ownedMemberFeature_comp = PartProperty 
    | 'abstract' 'end' isComposite ?= 'part' ownedMemberFeature_comp = AbstractPartProperty
    | 'end' isComposite ?= 'part' ( memberName = Name )? 'is' memberFeature = [SysML::PartProperty|QualifiedName]
    | 'end' 'ref'? ownedMemberFeature_comp = ReferenceProperty
    | 'abstract' 'end' 'ref'? ownedMemberFeature_comp = AbstractReferenceProperty
	| 'end' 'ref'? ( memberName = Name )? 'is' memberFeature = [SysML::ReferenceProperty|QualifiedName] ';'
    | 'end' ( 'ref' 'action' | isComposite ?= 'action' ) ownedMemberFeature_comp = ActionUsage
	| 'abstract' 'end'('ref' 'action' | isComposite ?= 'action' )  ownedMemberFeature_comp = AbstractActionUsage
	| 'end' 'action' ( memberName = Name )? 'is' memberFeature = [SysML::ActionUsage|QualifiedName] ';'
	)
;

EndPortMember returns SysML::EndPortMembership :
	DefinitionMemberPrefix
	( 'end' isPort ?= 'port' ownedMemberFeature_comp = PortUsage
	| 'abstract' 'end' isPort ?= 'port' ownedMemberFeature_comp = AbstractPortUsage
	)
;

ConjugatedEndPortMember returns SysML::ConjugatedEndPortMembership :
	DefinitionMemberPrefix
	( 'end' isPort ?= 'port' ownedMemberFeature_comp = ConjugatedPortUsage
	| 'abstract' 'end' isPort ?= 'port' ownedMemberFeature_comp = AbstractConjugatedPortUsage
	)
;

/* INTERFACE DEFINITIONS */

InterfaceDefinition returns SysML::InterfaceDefinition :
	InterfaceDeclaration InterfaceBody
;

fragment InterfaceDeclaration returns SysML::InterfaceDefinition :
	( isAbstract ?= 'abstract' )? 'interface' 'def' ClassifierDeclarationCompletion
;

fragment InterfaceBody returns SysML::Type :
	  ';'
	| '{' ( 
		  ownedMembership_comp += NestedDefinitionMember 
		| ownedFeatureMembership_comp += InterfaceUsageMember
		| ownedImport_comp += Import
	)* '}'
;

fragment AbstractInterfaceBody returns SysML::Type :
	  isAbstract ?= ';'
	| isAbstract ?= '{' ( 
		  ownedMembership_comp += NestedDefinitionMember 
		| ownedFeatureMembership_comp += InterfaceUsageMember
		| ownedImport_comp += Import
	)* '}'
;

/* INTERFACE DEFINITION MEMBERSHIPS */

InterfaceUsageMember returns SysML::FeatureMembership :
	NestedUsageMember | InterfaceEndMember | ConjugatedInterfaceEndMember
;

InterfaceEndMember returns SysML::EndPortMembership :
	DefinitionMemberPrefix
    (
      isPort ?= 'end' 'port'? ownedMemberFeature_comp = PortUsage
    | 'abstract' isPort ?= 'end' 'port'? ownedMemberFeature_comp = AbstractPortUsage
	)
;

ConjugatedInterfaceEndMember returns SysML::ConjugatedEndPortMembership :
	DefinitionMemberPrefix
    (
      isPort ?= 'end' 'port'? ownedMemberFeature_comp = ConjugatedPortUsage
    | 'abstract' isPort ?= 'end' 'port'? ownedMemberFeature_comp = AbstractConjugatedPortUsage
	)
;

/* ACTIVITIES */

Activity returns SysML::Activity :
	ActivityDeclaration ActivityBody
;

fragment ActivityDeclaration returns SysML::Activity :
	( isAbstract ?= 'abstract')? 'activity' name = Name ParameterList? SuperclassingList?
;

fragment ParameterList returns SysML::Type :
	'(' ( ownedFeatureMembership_comp += ParameterMember ( ',' ownedFeatureMembership_comp += ParameterMember )* )? ')'
;

fragment ActivityBody returns SysML::Type :
	  ';' | '{' ActivityBodyItem* '}'
;

fragment AbstractActivityBody returns SysML::Type :
	  isAbstract ?= ';' | isAbstract ?= '{' ActivityBodyItem* '}'
;

fragment ActivityBodyItem returns SysML::Type :
	  ownedMembership_comp += NestedDefinitionMember 
	| ownedFeatureMembership_comp += StructureUsageMember
	| ownedFeatureMembership_comp += InitialNodeMember
	  ( ownedFeatureMembership_comp += TargetSuccessionMember )*
	| ( ownedFeatureMembership_comp += EmptySuccessionMember )? 
	  ownedFeatureMembership_comp += ActivityNodeMember
	  ( ownedFeatureMembership_comp += TargetSuccessionMember )*
	| ownedImport_comp += Import
;

/* ACTIVITIY MEMBERSHIPS */

ParameterMember returns SysML::ParameterMembership :
	( direction = FeatureDirection )? memberName = Name ownedMemberFeature_comp = Parameter
;

InitialNodeMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix 'first' memberFeature = [SysML::Feature|QualifiedName] ';'
	
;

ActivityNodeMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedMemberFeature_comp = ActivityNode
;

TargetSuccessionMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedMemberFeature_comp = TargetSuccession ';'
;

/* STATE DEFINITIONS */

StateDefinition returns SysML::Behavior :
	StateDefDeclaration StateBody
;

fragment StateDefDeclaration returns SysML::Behavior :
	( isAbstract ?= 'abstract')? 'state' 'def' name = Name ParameterList? SuperclassingList?
;

fragment StateBody returns SysML::Type :
	';' | '{' StateBehaviorPart StateBodyItem* '}'
;

fragment AbstractStateBody returns SysML::Type :
	isAbstract ?= ';' | isAbstract ?= '{' StateBehaviorPart StateBodyItem* '}'
;

fragment StateBodyItem returns SysML::Type :
	  ownedMembership_comp += NestedDefinitionMember 
	| ownedFeatureMembership_comp += StructureUsageMember
	| ownedFeatureMembership_comp += StateMember
		( ownedFeatureMembership_comp += TargetTransitionSuccessionMember )*
	| ownedFeatureMembership_comp += TransitionSuccessionMember
	| ownedImport_comp += Import
;

fragment StateBehaviorPart returns SysML::Type :
	( ownedFeatureMembership_comp += EntryBehaviorMember
	  ( ownedFeatureMembership_comp += ConditionalTransitionSuccessionMember )*
	)?
	( ownedFeatureMembership_comp += DoBehaviorMember )?
	( ownedFeatureMembership_comp += ExitBehaviorMember )?
;

StateBehaviorUsage returns SysML::ActionUsage :
	EmptyActionUsage ';' | PerformActionUsage | ActionNode
;

EmptyActionUsage returns SysML::ActionUsage :
	{SysML::ActionUsage}
;

/* STATE MEMBERSHIPS */

EntryBehaviorMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix 'entry' ownedMemberFeature_comp = StateBehaviorUsage
;

DoBehaviorMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix 'do' ownedMemberFeature_comp = StateBehaviorUsage
;

ExitBehaviorMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix 'exit' ownedMemberFeature_comp = StateBehaviorUsage
;

StateMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix
	( ( 'ref' 'state' | isComposite ?= 'state' ) ownedMemberFeature_comp = StateUsage
	| 'abstract' ( 'ref' 'state' | isComposite ?= 'state' ) ownedMemberFeature_comp = AbstractStateUsage
	)
;

ConditionalTransitionSuccessionMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedMemberFeature_comp = ConditionalTransitionSuccession ';'
;

TargetTransitionSuccessionMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedMemberFeature_comp = TargetTransitionSuccession ';'
;

TransitionSuccessionMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedMemberFeature_comp = TransitionSuccession ';'
;

/* USAGES */

fragment Usage returns SysML::Usage :
	UsageDeclaration UsageCompletion
;

fragment AbstractUsage returns SysML::Usage :
	UsageDeclaration AbstractUsageCompletion
;

fragment UsageDeclaration returns SysML::Usage :
	  name = Name TypePart? SubsettingPart
	| TypePart SubsettingPart
	| ( ':>>' | 'redefines' ) ownedRelationship_comp += Redefinition TypePart? SubsettingPart
;

fragment UsageCompletion returns SysML::Usage :
	ValuePart? DefinitionBody
;

fragment AbstractUsageCompletion returns SysML::Usage :
	ValuePart? AbstractDefinitionBody
;

fragment ValuePart returns SysML::Feature :
	'=' ownedFeatureMembership_comp += FeatureValue
;

FeatureValue returns SysML::FeatureValue :
	value_comp = Expression
;

fragment TypePart returns SysML::Feature :
	  ':' ( ownedRelationship_comp += FeatureTyping | 'any' ) MultiplicityPart?
	| MultiplicityPart
;

FeatureTyping returns SysML::FeatureTyping :
	type = [SysML::Type | QualifiedName]
;

fragment MultiplicityPart returns SysML::Feature :
	ownedFeatureMembership_comp += MultiplicityMember 
	( isOrdered ?= 'ordered'? & isNonunique ?= 'nonunique'? )	
;

Multiplicity returns SysML::MultiplicityRange :
	'[' ( ownedFeatureMembership_comp += NaturalLiteralMember '..' )? 
	      ownedFeatureMembership_comp += UnlimitedNaturalLiteralMember ']'
;

fragment SubsettingPart returns SysML::Feature :
	  (  
	  	Subsets ( ',' ownedRelationship_comp += Subset )*
	  | Redefines ( ',' ownedRelationship_comp += Redefinition )*
	  )*
;

fragment Subsets returns SysML::Feature :
	( ':>' | 'subsets' ) ownedRelationship_comp += Subset 
;

Subset returns SysML::Subsetting:
	subsettedFeature = [SysML::Feature|QualifiedName]
;

fragment Redefines returns SysML::Feature :
	( ':>>' | 'redefines' ) ownedRelationship_comp += Redefinition
;

Redefinition returns SysML::Redefinition:
	redefinedFeature = [SysML::Feature|QualifiedName] 
;

/* USAGE MEMBERSHIPS */

MultiplicityMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = Multiplicity
;

NaturalLiteralMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = NaturalLiteralExpression
;

UnlimitedNaturalLiteralMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = UnlimitedNaturalLiteralExpression
;

/* PARAMETERS */

Parameter returns SysML::Parameter :
	{SysML::Parameter} TypePart? // ( Subsets | Redefines )*
;

/* PART PROPERTIES */

fragment PartDeclaration returns SysML::PartProperty :
	( isAbstract ?= 'abstract' )? 'part' 
	name = Name TypePart? SubsettingPart
;

PartProperty returns SysML::PartProperty :
	Usage
;

AbstractPartProperty returns SysML::PartProperty :
	AbstractUsage
;

/* REFERENCE PROPERTIES */

ReferenceProperty returns SysML::ReferenceProperty :
	Usage
;

AbstractReferenceProperty returns SysML::ReferenceProperty :
	AbstractUsage
;

/* VALUE PROPERTIES */

fragment ValueDeclaration returns SysML::ValueProperty :
	( isAbstract ?= 'abstract' )? 'value'? 
	name = Name TypePart? SubsettingPart
;

ValueProperty returns SysML::ValueProperty :
	Usage
;

AbstractValueProperty returns SysML::ValueProperty :
	AbstractUsage
;

/* PORT USAGE */

PortUsage returns SysML::PortUsage :
	Usage
;

AbstractPortUsage returns SysML::PortUsage :
	AbstractUsage
;

ConjugatedPortUsage returns SysML::PortUsage :
	ConjugatePortUsageDeclaration UsageCompletion
;

AbstractConjugatedPortUsage returns SysML::PortUsage :
	ConjugatePortUsageDeclaration AbstractUsageCompletion
;

fragment ConjugatePortUsageDeclaration returns SysML::Usage :
	  name = Name ConjugatePortTyping MultiplicityPart? SubsettingPart
	| ConjugatePortTyping MultiplicityPart? SubsettingPart
	| ( ':>>' | 'redefines' ) ownedRelationship_comp += Redefinition ConjugatePortTyping MultiplicityPart SubsettingPart
;

fragment ConjugatePortTyping returns SysML::Feature :
	':' '~' ( ownedRelationship_comp += FeatureTyping | 'any' )
;

/* CONNECTORS */

Connector returns SysML::ConnectionUsage :
	ConnectionPart AssociationBlockBody
;

AbstractConnector returns SysML::ConnectionUsage :
	ConnectionPart AbstractAssociationBlockBody
;

ConnectionUsage returns SysML::ConnectionUsage :
	UsageDeclaration 'connect' ConnectionPart AssociationBlockBody
;

AbstractConnectionUsage returns SysML::ConnectionUsage :
	UsageDeclaration 'connect' ConnectionPart AbstractAssociationBlockBody
;

fragment ConnectionPart returns SysML::ConnectionUsage :
	 ownedFeatureMembership_comp += ConnectorEndMember 'to' ownedFeatureMembership_comp += ConnectorEndMember
	| '(' ownedFeatureMembership_comp += ConnectorEndMember ',' ownedFeatureMembership_comp += ConnectorEndMember
	      ( ',' ownedFeatureMembership_comp += ConnectorEndMember )*
	  ')'
;

ConnectorEnd returns SysML::Feature :
	ownedRelationship_comp += Subset ( ownedFeatureMembership_comp += MultiplicityMember )?
;

MultiplicitySourceEnd returns SysML::Feature :
	{SysML::SourceEnd} (  ownedFeatureMembership_comp += MultiplicityMember )?
;

EmptySourceEnd returns SysML::Feature :
	{SysML::SourceEnd}
;

EmptyTargetEnd returns SysML::Feature :
	{SysML::TargetEnd}
;

/* CONNECTOR MEMBERSHIPS */

ConnectorEndMember returns SysML::EndFeatureMembership :
	( memberName = Name '=>' )? ownedMemberFeature_comp = ConnectorEnd
;

MultiplicitySourceEndMember returns SysML::EndFeatureMembership :
	ownedMemberFeature_comp = MultiplicitySourceEnd
;

EmptySourceEndMember returns SysML::EndFeatureMembership :
	ownedMemberFeature_comp = EmptySourceEnd
;

EmptyTargetEndMember returns SysML::EndFeatureMembership :
	ownedMemberFeature_comp = EmptyTargetEnd
;

/* INTERFACE CONNECTORS */

InterfaceUsage returns SysML::InterfaceUsage :	 
	UsageDeclaration 'connect' ConnectionPart InterfaceBody	  
;

AbstractInterfaceUsage returns SysML::InterfaceUsage :
	UsageDeclaration 'connect' ConnectionPart  AbstractInterfaceBody
;

/* BINDING CONNECTORS */

BindingConnector returns SysML::BindingConnector :
	( ( name = Name )? TypePart? 'of')?
	  ownedFeatureMembership_comp += ConnectorEndMember '=' ownedFeatureMembership_comp += ConnectorEndMember
	  DefinitionBody	
;

/* SUCCESSIONS */

Succession returns SysML::Succession :
	SuccessionDeclaration ';'
;

AbstractSuccession returns SysML::Succession :
	SuccessionDeclaration isAbstract ?= ';'
;

fragment SuccessionDeclaration returns SysML::Succession :
	( ( name = Name )? TypePart? 'first' )?
	ownedFeatureMembership_comp += ConnectorEndMember 'then' ownedFeatureMembership_comp += ConnectorEndMember
;

TargetSuccession returns SysML::Succession :
	'then' ownedFeatureMembership_comp += MultiplicitySourceEndMember ownedFeatureMembership_comp += ConnectorEndMember
;

EmptySuccession returns SysML::Succession :
	'then' ownedFeatureMembership_comp += MultiplicitySourceEndMember ownedFeatureMembership_comp += EmptyTargetEndMember
;

ConditionalSuccession returns SysML::Succession :
	ownedFeatureMembership_comp += ConditionalStepMember
	ownedFeatureMembership_comp += EmptySourceEndMember 
	'then' ownedFeatureMembership_comp += ConnectorEndMember
;

ConditionalStep returns SysML::Step :
	'if' ownedFeatureMembership_comp += ExpressionMember
;

DefaultSuccession returns SysML::Succession :
	ownedFeatureMembership_comp += EmptySourceEndMember 
	ownedFeatureMembership_comp += EmptyTransitionStepMember
	'else' ownedFeatureMembership_comp += ConnectorEndMember
;

EmptyTransitionStep returns SysML::Step :
	{SysML::Step}
;

TransitionSuccession returns SysML::Succession :
	'transition' ( ( name = Name )? TypePart? 'first' )? 
	ownedFeatureMembership_comp += ConnectorEndMember 
	ownedFeatureMembership_comp += TransitionStepMember 
	'then' ownedFeatureMembership_comp += ConnectorEndMember	
;

TargetTransitionSuccession returns SysML::Succession :
	ownedFeatureMembership_comp += EmptySourceEndMember
	ownedFeatureMembership_comp += TransitionStepMember 
	'then' ownedFeatureMembership_comp += ConnectorEndMember	
;

ConditionalTransitionSuccession returns SysML::Succession :
    ownedFeatureMembership_comp += EmptySourceEndMember
	( ownedFeatureMembership_comp += ConditionalStepMember )?
	'then' ownedFeatureMembership_comp += ConnectorEndMember	
;

TransitionStep returns SysML::Step :
	{SysML::Step}  
	( 'accept' ownedFeatureMembership_comp += TriggerStepMember )?
	( 'if' ownedFeatureMembership_comp += ExpressionMember )?
	( 'do' ownedFeatureMembership_comp += EffectBehaviorMember )?
;

TriggerStep returns SysML::AcceptActionUsage :
	ownedFeatureMembership_comp += EmptyParameterMember
	ownedFeatureMembership_comp += ItemFeatureMember
;

EffectBehaviorUsage returns SysML::ActionUsage :
	  EmptyActionUsage
	| ( PerformActionUsageDeclaration | ActionNodeDeclaration )
	  ( '{' ActivityBodyItem* '}' )?
;

/* SUCCESSION MEMBERHSIPS */

EmptyTransitionStepMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = EmptyTransitionStep
;

ConditionalStepMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = ConditionalStep
;

TransitionStepMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = TransitionStep
;

TriggerStepMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = TriggerStep
;

EffectBehaviorMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = EffectBehaviorUsage
;

/* ITEM FLOWS */

ItemFlow returns SysML::ItemFlow :
	ItemFlowDeclaration DefinitionBody
;

AbstractItemFlow returns SysML::ItemFlow :
	ItemFlowDeclaration AbstractDefinitionBody
;

SuccessionItemFlow returns SysML::SuccessionItemFlow :
	ItemFlowDeclaration DefinitionBody
;

AbstractSuccessionItemFlow returns SysML::SuccessionItemFlow :
	ItemFlowDeclaration AbstractDefinitionBody
;

fragment ItemFlowDeclaration returns SysML::ItemFlow :
	( ( name = Name )? TypePart? 
      ( 'of'  ownedFeatureMembership_comp += ItemFeatureMember
      | ownedFeatureMembership_comp += EmptyItemFeatureMember
      ) 'from'
    | ownedFeatureMembership_comp += EmptyItemFeatureMember
    )
	ownedFeatureMembership_comp += ItemFlowEndMember 'to' ownedFeatureMembership_comp += ItemFlowEndMember
;

ItemFeatureTyping returns SysML::ItemFeature :
	ownedRelationship_comp += FeatureTyping ( ownedFeatureMembership_comp += MultiplicityMember )?
;

EmptyItemFeature returns SysML::ItemFeature :
	{SysML::ItemFeature}
;

ItemFlowEnd returns SysML::ItemFlowEnd :
	ownedFeatureMembership_comp += ItemFlowFeatureMember
;

ItemFlowFeature returns SysML::ItemFlowFeature :
	ownedRelationship_comp += Redefinition
;

/* ITEM FLOW MEMBERSHIPS */

ItemFeatureMember returns SysML::FeatureMembership :
	( memberName = Name ':' )? ownedMemberFeature_comp = ItemFeatureTyping
;

ItemFlowEndMember returns SysML::EndFeatureMembership :
	ownedMemberFeature_comp = ItemFlowEnd
;

ItemFlowFeatureMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = ItemFlowFeature
;

EmptyItemFeatureMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = EmptyItemFeature
;

/* ACTIONS */

fragment ActionDeclaration returns SysML::ActionUsage :
    ( isAbstract ?= 'abstract' )? 'action' 
	name = Name TypePart? ActionParameterList? SubsettingPart ValuePart?
;

ActionUsage returns SysML::ActionUsage :
	{SysML::ActionUsage} ActionUsageDeclaration ActivityBody
;

AbstractActionUsage returns SysML::ActionUsage :
	ActionUsageDeclaration AbstractActivityBody
;

fragment ActionUsageDeclaration returns SysML::ActionUsage :
	  name = Name TypePart? ActionParameterList? SubsettingPart ValuePart?
	| TypePart? ActionParameterList? ValuePart?
	| ( ':>>' | 'redefines' ) ownedRelationship_comp += Redefinition TypePart? ActionParameterList? ValuePart?
;

fragment ActionParameterList returns SysML::Type :
	'(' ( ownedFeatureMembership_comp += ActionParameterMember ( ownedFeatureMembership_comp += ActionParameterFlowMember )?
		  ( ',' ownedFeatureMembership_comp += ActionParameterMember ( ownedFeatureMembership_comp += ActionParameterFlowMember )? )*
		)?
	')'
;

ActionParameter returns SysML::Parameter :
	{SysML::Parameter} TypePart? ValuePart?
;

ActionParameterFlow returns SysML::ItemFlow :
	( 'stream' | {SysML::SuccessionItemFlow} 'flow' ) ownedFeatureMembership_comp += EmptyItemFeatureMember 
	'from' ownedFeatureMembership_comp += ItemFlowEndMember
;

PerformActionUsage returns SysML::PerformActionUsage :
	PerformActionUsageDeclaration ActivityBody
;

PerformActionUsageDeclaration returns SysML::PerformActionUsage :
    ( name = Name TypePart? 'by' )? 
    ownedRelationship_comp += Subset 
    ActionParameterList? SubsettingPart ValuePart?
;

/* ACTIVITY NODES */

ActivityNode returns SysML::ActionUsage :
	  ActionNode | ControlNode
;

ActionNode returns SysML::ActionUsage :
	ActionNodeDeclaration ActivityBody
;

ActionNodeDeclaration returns SysML::ActionUsage :
	  ActionUsageNodeDeclaration
	| PerformActionNodeDeclaration
	| AcceptActionNodeDeclaration
	| SendActionNodeDeclaration	
;

ActionUsageNodeDeclaration returns SysML::ActionUsage :
    ( isAbstract ?= 'abstract' )? ('ref' 'action' | isComposite ?= 'action' )
    ActionUsageDeclaration
;

PerformActionNodeDeclaration returns SysML::PerformActionUsage :
    isComposite ?= 'perform' ( name = Name TypePart? 'by' )? 
    ownedRelationship_comp += Subset 
    ActionParameterList? SubsettingPart ValuePart?
;

AcceptActionNodeDeclaration returns SysML::AcceptActionUsage :
	ownedFeatureMembership_comp += EmptyParameterMember
	'accept' ( name = Name TypePart? )? '(' ownedFeatureMembership_comp += ItemFeatureMember ')'
;

SendActionNodeDeclaration returns SysML::SendActionUsage :
	ownedFeatureMembership_comp += EmptyParameterMember ownedFeatureMembership_comp += EmptyItemFeatureMember
	'send' ( ( name = Name TypePart? )? 'of')? ownedFeatureMembership_comp += ExpressionMember 
	'to' ownedFeatureMembership_comp += ExpressionMember
;

ControlNode returns SysML::ControlNode :
	  MergeNode
	| DecisionNode
	| JoinNode
	| ForkNode
;

MergeNode returns SysML::MergeNode :
	{SysML::MergeNode} isComposite ?= 'merge' ( name = Name TypePart? )? ';'
;

DecisionNode returns SysML::DecisionNode :
	{SysML::DecisionNode} isComposite ?= 'decide' ( name = Name TypePart? )? ';'
 	( ownedFeatureMembership_comp += ConditionalSuccessionMember ';'
 	  ( ownedFeatureMembership_comp += ConditionalSuccessionMember ';' )* 
 	  ( ownedFeatureMembership_comp += DefaultSuccessionMember ';' )? 
 	)?

;

JoinNode returns SysML::JoinNode :
	{SysML::JoinNode} isComposite ?= 'join' ( name = Name TypePart? )? ';'
;

ForkNode returns SysML::ForkNode :
	{SysML::ForkNode} isComposite ?= 'fork' ( name = Name TypePart? )? ';'
;

EmptyParameter returns SysML::Parameter :
	{SysML::Parameter}
;

/* ACTION MEMBERSHIPS */

ActionParameterMember returns SysML::ParameterMembership :
	( direction = FeatureDirection
    | ( direction = FeatureDirection )? memberName = Name 
    )
	ownedMemberFeature_comp = ActionParameter
;

ActionParameterFlowMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = ActionParameterFlow
;

EmptySuccessionMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = EmptySuccession
;

ConditionalSuccessionMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = ConditionalSuccession
;

DefaultSuccessionMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = DefaultSuccession
;

EmptyParameterMember returns SysML::ParameterMembership :
	ownedMemberFeature_comp = EmptyParameter
;

/* STATES */

fragment StateDeclaration returns SysML::ActionUsage :
    ( isAbstract ?= 'abstract' )? 'state' 
	name = Name TypePart? ActionParameterList? SubsettingPart ValuePart?
;

StateUsage returns SysML::ActionUsage :
	{SysML::ActionUsage} ActionUsageDeclaration StateBody
;

AbstractStateUsage returns SysML::ActionUsage :
	{SysML::ActionUsage} ActionUsageDeclaration AbstractStateBody
;

ExhibitStateUsage returns SysML::PerformActionUsage :
    ( name = Name TypePart? 'by' )? 
    ownedRelationship_comp += Subset 
    ActionParameterList? SubsettingPart ValuePart?
	StateBody
;

/* EXPRESSIONS */

Expression returns SysML::Expression :
	 ConditionalExpression | QueryPathExpression
;

// Conditional Test Expressions

ConditionalExpression returns SysML::Expression :
	NullCoalescingExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = ConditionalTestOperator operand_comp += Expression ':' operand_comp += ConditionalExpression
	)?
;

ConditionalTestOperator: 
	'?'
;

// Null Coalescing Expressions

NullCoalescingExpression returns SysML::Expression :
	ConditionalOrExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = NullCoalescingOperator operand_comp += ConditionalOrExpression )*
;

NullCoalescingOperator :
	'??'
;

// Conditional Logical Expressions

ConditionalOrExpression returns SysML::Expression :
	ConditionalAndExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = ConditionalOrOperator operand_comp += ConditionalAndExpression )*
;

ConditionalOrOperator :
	'||'
;

ConditionalAndExpression returns SysML::Expression :
	OrExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = ConditionalAndOperator operand_comp += OrExpression )*
;

ConditionalAndOperator :
	'&&'
;

OrExpression returns SysML::Expression :
	XorExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = OrOperator operand_comp += XorExpression )*
;

// Logical Expressions

OrOperator :
	'|'
;

XorExpression returns SysML::Expression :
	AndExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = XorOperator operand_comp += AndExpression )*
;

XorOperator :
	'^'
;

AndExpression returns SysML::Expression :
	EqualityExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = AndOperator operand_comp += EqualityExpression )*
;

AndOperator :
	'&'
;

// Equality Expressions

EqualityExpression returns SysML::Expression :
	ClassificationExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = EqualityOperator operand_comp += ClassificationExpression )*
	
;

EqualityOperator :
	'==' | '!=' 
;

// Classification Expressions

ClassificationExpression returns SysML::Expression :
	RelationalExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = ClassificationOperator ownedFeatureMembership_comp += TypeReferenceMember )?
;

ClassificationOperator :
	'instanceof' | 'hastype'
;

// Relational Expressions

RelationalExpression returns SysML::Expression :
	AdditiveExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = RelationalOperator operand_comp += AdditiveExpression )*
;

RelationalOperator :
	'<' | '>' | '<=' | '>='
;

// Arithmetic Expressions

AdditiveExpression returns SysML::Expression :
	MultiplicativeExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = AdditiveOperator operand_comp += MultiplicativeExpression )*	
;

AdditiveOperator :
	'+' | '-' 
;

MultiplicativeExpression returns SysML::Expression :
	UnitsExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = MultiplicativeOperator operand_comp += UnitsExpression )*	
;

MultiplicativeOperator :
	'*' | '/' | '**' 
;

// Units Expressions

UnitsExpression returns SysML::Expression :
	UnaryExpression ( {SysML::OperatorExpression.operand_comp += current} 
		operator = '@' '[' operand_comp += Expression ']' )?		
;

// Unary Expressions

UnaryExpression returns SysML::Expression:
	SequenceAccessExpression | {SysML::OperatorExpression} operator = UnaryOperator operand_comp += SequenceAccessExpression
;

UnaryOperator :
	'+' | '-' | '!' | '~'
;

SequenceAccessExpression returns SysML::Expression :
	 PrimaryExpression 
	 ( {SysML::OperatorExpression.operand_comp += current} operator = '[' operand_comp += Expression ']' )?
;

// Primary Expressions

PrimaryExpression returns SysML::Expression :
	BaseExpression ( {SysML::OperatorExpression.operand_comp += current} '->' 
		operator = Name ( ownedFeatureMembership_comp += BodyMember )+
	)*
;

// Body Expressions

BodyExpression returns SysML::BlockExpression :
	   => ( ownedFeatureMembership_comp += BodyParameterMember ( ownedFeatureMembership_comp += BodyParameterMember )* 
	   '(' ownedFeatureMembership_comp += ExpressionMember ')' )
	 | ownedRelationship_comp += ExpressionTyping
;

ExpressionTyping returns SysML::FeatureTyping :
	type = [ SysML::Function | QualifiedName ]
;

// Base Expressions

BaseExpression returns SysML::Expression :
	  NullExpression
	| LiteralExpression 
	| FeatureReferenceExpression 
	| InvocationExpression 
	| ClassExtentExpression
	| SequenceConstructionExpression 
	| '(' Expression ')'
;

FeatureReferenceExpression returns SysML::FeatureReferenceExpression :
	ownedFeatureMembership_comp += FeatureReference
;

InvocationExpression returns SysML::InvocationExpression :
	ownedRelationship_comp += FeatureTyping '(' Tuple? ')'
;

fragment Tuple returns SysML::Expression :
	PositionalTuple | NamedTuple
;

fragment PositionalTuple returns SysML::Expression :
	ownedFeatureMembership_comp += ExpressionMember ( ',' ownedFeatureMembership_comp += ExpressionMember )*
;

fragment NamedTuple returns SysML::Expression :
	ownedFeatureMembership_comp += NamedExpressionMember ( ',' ownedFeatureMembership_comp += NamedExpressionMember )*
;

ClassExtentExpression returns SysML::OperatorExpression :
	ownedFeatureMembership_comp += TypeReferenceMember '.' operator = 'allInstances' '(' ')'
;

TypeReference returns SysML::Feature :
	ownedRelationship_comp += FeatureTyping
;

SequenceConstructionExpression returns SysML::SequenceConstructionExpression:
	{SysML::SequenceConstructionExpression} '{' ( element_comp += Expression ( ',' element_comp += Expression )* )? '}'
;

NullExpression returns SysML::NullExpression :
	{SysML::NullExpression} 'null'
;

// Literal Expressions

LiteralExpression returns SysML::LiteralExpression :
	BooleanLiteralExpression | StringLiteralExpression | RealLiteralExpression | UnlimitedNaturalLiteralExpression
;

BooleanLiteralExpression returns SysML::LiteralBoolean :
	value = BOOLEAN_VALUE
;

StringLiteralExpression returns SysML::LiteralString :
	value = STRING_VALUE
;

RealLiteralExpression returns SysML::LiteralReal:
	value = RealValue
;

RealValue returns Ecore::EDouble:
	NATURAL_VALUE? '.' ( NATURAL_VALUE | EXP_VALUE ) | EXP_VALUE
;

NaturalLiteralExpression returns SysML::LiteralInteger:
	value = NATURAL_VALUE
;

UnlimitedNaturalLiteralExpression returns SysML::LiteralExpression:
	NaturalLiteralExpression | {SysML::LiteralUnbounded} '*'
;

/* EXPRESSION MEMBERSHIPS */

ExpressionMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = Expression
;

FeatureReference returns SysML::FeatureMembership :
	memberFeature = [SysML::Feature | QualifiedName ]
;

TypeReferenceMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = TypeReference
;

NamedExpressionMember returns SysML::FeatureMembership :
	memberName = Name '=>' ownedMemberFeature_comp = Expression
;

BodyMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = BodyExpression
;

BodyParameterMember returns SysML::ParameterMembership :
	memberName = Name ownedMemberFeature_comp = Parameter
;

/* QUERY PATH EXPRESSIONS */

QueryPathExpression returns SysML::Expression :
	QueryHeadExpression
	( '[' {SysML::QueryQualifierExpression.operand_comp += current}
         ( ownedFeatureMembership_comp += BodyMember ) ']' )?
	( '/' {SysML::QueryPathStepExpression.operand_comp += current}
		operand_comp += QueryNameExpression
		( '[' {SysML::QueryQualifierExpression.operand_comp += current}
	         ( ownedFeatureMembership_comp += BodyMember ) ']' )?
	)*
;

QueryNameExpression returns SysML::QueryPathExpression :
    /* isParent ?= '..'
    | isDescendants ?= '/'
    | @traversal
    */
    ownedFeatureMembership_comp += FeatureReference
;

QueryHeadExpression returns SysML::QueryPathExpression :
	'./' ownedFeatureMembership_comp += FeatureReference
;        

/* NAMES */

Name :
	ID | UNRESTRICTED_NAME
;

QualifiedName :
	Name | ColonQualifiedName | DotQualifiedName
;

ColonQualifiedName :
	Name ('::' Name)+
;

DotQualifiedName :
	Name ('.' Name)+
;

/* TERMINALS */

terminal BOOLEAN_VALUE returns Ecore::EBoolean : 
	'true' | 'false' ;

terminal NATURAL_VALUE returns Ecore::EInt :
	('0' | '1'..'9' (('_')? '0'..'9')*) | //DECIMAL 
	(('0b' | '0B') '0'..'1' (('_')? '0'..'1')*) | // BINARY
	(('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')  (('_')? ('0'..'9'|'a'..'f'|'A'..'F'))*) | // HEX
	('0' ('_')? '0'..'7' (('_')? '0'..'7')*) // OCT
;

terminal EXP_VALUE :
	NATURAL_VALUE ('e' | 'E') ('+' | '-')? NATURAL_VALUE
;

terminal ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ;
terminal UNRESTRICTED_NAME returns Ecore::EString : 
	'\'' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'\'') )* '\'' ;

terminal STRING_VALUE returns Ecore::EString : 
	'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"' ;

terminal DOCUMENTATION_COMMENT : '/**' -> '*/' ;

terminal ML_COMMENT	: '/*' !'*' -> '*/';
terminal SL_COMMENT : '//' (!('\n'|'\r') !('\n'|'\r')*)? ('\r'? '\n')?;

terminal WS : (' '|'\t'|'\r'|'\n')+;
