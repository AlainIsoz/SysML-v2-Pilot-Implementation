/*
 * generated by Xtext 2.25.0
 */
package org.omg.sysml.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.omg.kerml.expressions.xtext.serializer.KerMLExpressionsSemanticSequencer;
import org.omg.sysml.lang.sysml.AcceptActionUsage;
import org.omg.sysml.lang.sysml.ActionDefinition;
import org.omg.sysml.lang.sysml.ActionUsage;
import org.omg.sysml.lang.sysml.ActorMembership;
import org.omg.sysml.lang.sysml.AllocationDefinition;
import org.omg.sysml.lang.sysml.AllocationUsage;
import org.omg.sysml.lang.sysml.AnalysisCaseDefinition;
import org.omg.sysml.lang.sysml.AnalysisCaseUsage;
import org.omg.sysml.lang.sysml.Annotation;
import org.omg.sysml.lang.sysml.AssertConstraintUsage;
import org.omg.sysml.lang.sysml.AssignmentActionUsage;
import org.omg.sysml.lang.sysml.AttributeDefinition;
import org.omg.sysml.lang.sysml.AttributeUsage;
import org.omg.sysml.lang.sysml.BindingConnectorAsUsage;
import org.omg.sysml.lang.sysml.CalculationDefinition;
import org.omg.sysml.lang.sysml.CalculationUsage;
import org.omg.sysml.lang.sysml.CaseDefinition;
import org.omg.sysml.lang.sysml.CaseUsage;
import org.omg.sysml.lang.sysml.CollectExpression;
import org.omg.sysml.lang.sysml.Comment;
import org.omg.sysml.lang.sysml.ConcernDefinition;
import org.omg.sysml.lang.sysml.ConcernUsage;
import org.omg.sysml.lang.sysml.ConjugatedPortDefinition;
import org.omg.sysml.lang.sysml.ConjugatedPortTyping;
import org.omg.sysml.lang.sysml.ConnectionDefinition;
import org.omg.sysml.lang.sysml.ConnectionUsage;
import org.omg.sysml.lang.sysml.ConstraintDefinition;
import org.omg.sysml.lang.sysml.ConstraintUsage;
import org.omg.sysml.lang.sysml.DecisionNode;
import org.omg.sysml.lang.sysml.Definition;
import org.omg.sysml.lang.sysml.Dependency;
import org.omg.sysml.lang.sysml.Documentation;
import org.omg.sysml.lang.sysml.ElementFilterMembership;
import org.omg.sysml.lang.sysml.EndFeatureMembership;
import org.omg.sysml.lang.sysml.EnumerationDefinition;
import org.omg.sysml.lang.sysml.EnumerationUsage;
import org.omg.sysml.lang.sysml.EventOccurrenceUsage;
import org.omg.sysml.lang.sysml.ExhibitStateUsage;
import org.omg.sysml.lang.sysml.Expose;
import org.omg.sysml.lang.sysml.Expression;
import org.omg.sysml.lang.sysml.Feature;
import org.omg.sysml.lang.sysml.FeatureChainExpression;
import org.omg.sysml.lang.sysml.FeatureChaining;
import org.omg.sysml.lang.sysml.FeatureMembership;
import org.omg.sysml.lang.sysml.FeatureReferenceExpression;
import org.omg.sysml.lang.sysml.FeatureTyping;
import org.omg.sysml.lang.sysml.FeatureValue;
import org.omg.sysml.lang.sysml.FlowConnectionUsage;
import org.omg.sysml.lang.sysml.ForLoopActionUsage;
import org.omg.sysml.lang.sysml.ForkNode;
import org.omg.sysml.lang.sysml.FramedConcernMembership;
import org.omg.sysml.lang.sysml.IfActionUsage;
import org.omg.sysml.lang.sysml.Import;
import org.omg.sysml.lang.sysml.IncludeUseCaseUsage;
import org.omg.sysml.lang.sysml.InterfaceDefinition;
import org.omg.sysml.lang.sysml.InterfaceUsage;
import org.omg.sysml.lang.sysml.InvocationExpression;
import org.omg.sysml.lang.sysml.ItemDefinition;
import org.omg.sysml.lang.sysml.ItemFeature;
import org.omg.sysml.lang.sysml.ItemFlowEnd;
import org.omg.sysml.lang.sysml.ItemFlowFeature;
import org.omg.sysml.lang.sysml.ItemUsage;
import org.omg.sysml.lang.sysml.JoinNode;
import org.omg.sysml.lang.sysml.LifeClass;
import org.omg.sysml.lang.sysml.LiteralBoolean;
import org.omg.sysml.lang.sysml.LiteralInfinity;
import org.omg.sysml.lang.sysml.LiteralInteger;
import org.omg.sysml.lang.sysml.LiteralRational;
import org.omg.sysml.lang.sysml.LiteralString;
import org.omg.sysml.lang.sysml.Membership;
import org.omg.sysml.lang.sysml.MergeNode;
import org.omg.sysml.lang.sysml.MetadataDefinition;
import org.omg.sysml.lang.sysml.MetadataUsage;
import org.omg.sysml.lang.sysml.MultiplicityRange;
import org.omg.sysml.lang.sysml.Namespace;
import org.omg.sysml.lang.sysml.NullExpression;
import org.omg.sysml.lang.sysml.ObjectiveMembership;
import org.omg.sysml.lang.sysml.OccurrenceDefinition;
import org.omg.sysml.lang.sysml.OccurrenceUsage;
import org.omg.sysml.lang.sysml.OperatorExpression;
import org.omg.sysml.lang.sysml.OwningMembership;
import org.omg.sysml.lang.sysml.ParameterMembership;
import org.omg.sysml.lang.sysml.PartDefinition;
import org.omg.sysml.lang.sysml.PartUsage;
import org.omg.sysml.lang.sysml.PerformActionUsage;
import org.omg.sysml.lang.sysml.PortConjugation;
import org.omg.sysml.lang.sysml.PortDefinition;
import org.omg.sysml.lang.sysml.PortUsage;
import org.omg.sysml.lang.sysml.PortioningFeature;
import org.omg.sysml.lang.sysml.Redefinition;
import org.omg.sysml.lang.sysml.ReferenceUsage;
import org.omg.sysml.lang.sysml.RenderingDefinition;
import org.omg.sysml.lang.sysml.RenderingUsage;
import org.omg.sysml.lang.sysml.RequirementConstraintMembership;
import org.omg.sysml.lang.sysml.RequirementDefinition;
import org.omg.sysml.lang.sysml.RequirementUsage;
import org.omg.sysml.lang.sysml.RequirementVerificationMembership;
import org.omg.sysml.lang.sysml.ResultExpressionMembership;
import org.omg.sysml.lang.sysml.ReturnParameterMembership;
import org.omg.sysml.lang.sysml.SatisfyRequirementUsage;
import org.omg.sysml.lang.sysml.SelectExpression;
import org.omg.sysml.lang.sysml.SendActionUsage;
import org.omg.sysml.lang.sysml.SourceEnd;
import org.omg.sysml.lang.sysml.StakeholderMembership;
import org.omg.sysml.lang.sysml.StateDefinition;
import org.omg.sysml.lang.sysml.StateSubactionMembership;
import org.omg.sysml.lang.sysml.StateUsage;
import org.omg.sysml.lang.sysml.Subclassification;
import org.omg.sysml.lang.sysml.SubjectMembership;
import org.omg.sysml.lang.sysml.Subsetting;
import org.omg.sysml.lang.sysml.SuccessionAsUsage;
import org.omg.sysml.lang.sysml.SuccessionFlowConnectionUsage;
import org.omg.sysml.lang.sysml.SysMLPackage;
import org.omg.sysml.lang.sysml.TargetEnd;
import org.omg.sysml.lang.sysml.TextualRepresentation;
import org.omg.sysml.lang.sysml.TransitionFeatureMembership;
import org.omg.sysml.lang.sysml.TransitionUsage;
import org.omg.sysml.lang.sysml.TriggerInvocationExpression;
import org.omg.sysml.lang.sysml.Usage;
import org.omg.sysml.lang.sysml.UseCaseDefinition;
import org.omg.sysml.lang.sysml.UseCaseUsage;
import org.omg.sysml.lang.sysml.VariantMembership;
import org.omg.sysml.lang.sysml.VerificationCaseDefinition;
import org.omg.sysml.lang.sysml.VerificationCaseUsage;
import org.omg.sysml.lang.sysml.ViewDefinition;
import org.omg.sysml.lang.sysml.ViewRenderingMembership;
import org.omg.sysml.lang.sysml.ViewUsage;
import org.omg.sysml.lang.sysml.ViewpointDefinition;
import org.omg.sysml.lang.sysml.ViewpointUsage;
import org.omg.sysml.lang.sysml.WhileLoopActionUsage;
import org.omg.sysml.xtext.services.SysMLGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractSysMLSemanticSequencer extends KerMLExpressionsSemanticSequencer {

	@Inject
	private SysMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SysMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SysMLPackage.ACCEPT_ACTION_USAGE:
				if (rule == grammarAccess.getTriggerActionRule()) {
					sequence_AcceptParameterPart(context, (AcceptActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionNodeRule()
						|| rule == grammarAccess.getAcceptNodeRule()) {
					sequence_AcceptParameterPart_ActionBodyItem_BasicUsagePrefix_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(context, (AcceptActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStateActionUsageRule()
						|| rule == grammarAccess.getEffectBehaviorUsageRule()) {
					sequence_AcceptParameterPart_ActionBodyItem_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(context, (AcceptActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPerformedActionUsageRule()) {
					sequence_AcceptParameterPart_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(context, (AcceptActionUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ACTION_DEFINITION:
				sequence_ActionBodyItem_BasicDefinitionPrefix_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_SubclassificationPart(context, (ActionDefinition) semanticObject); 
				return; 
			case SysMLPackage.ACTION_USAGE:
				if (rule == grammarAccess.getActionBodyParameterRule()) {
					sequence_ActionBodyItem_ActionBodyParameter_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(context, (ActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()
						|| rule == grammarAccess.getActionUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (ActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStateActionUsageRule()
						|| rule == grammarAccess.getEmptyActionUsageRule()
						|| rule == grammarAccess.getEffectBehaviorUsageRule()) {
					sequence_EmptyActionUsage(context, (ActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (ActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (ActionUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ACTOR_MEMBERSHIP:
				sequence_ActorMember_MemberPrefix(context, (ActorMembership) semanticObject); 
				return; 
			case SysMLPackage.ALLOCATION_DEFINITION:
				sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_SubclassificationPart(context, (AllocationDefinition) semanticObject); 
				return; 
			case SysMLPackage.ALLOCATION_USAGE:
				sequence_BasicUsagePrefix_BinaryConnectorPart_DefinitionBodyItem_Identification_MultiplicityPart_NaryConnectorPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(context, (AllocationUsage) semanticObject); 
				return; 
			case SysMLPackage.ANALYSIS_CASE_DEFINITION:
				if (rule == grammarAccess.getDefinitionElementRule()) {
					sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SubclassificationPart(context, (AnalysisCaseDefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnalysisCaseDefinitionRule()) {
					sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SubclassificationPart(context, (AnalysisCaseDefinition) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ANALYSIS_CASE_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (AnalysisCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnalysisCaseUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (AnalysisCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (AnalysisCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (AnalysisCaseUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()) {
					sequence_Annotation(context, (Annotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyAnnotationRule()) {
					sequence_EmptyAnnotation(context, (Annotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPrefixMetadataAnnotationRule()) {
					sequence_PrefixMetadataAnnotation(context, (Annotation) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ASSERT_CONSTRAINT_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_AssertConstraintUsage_BasicUsagePrefix_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(context, (AssertConstraintUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAssertConstraintUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_AssertConstraintUsage_BasicUsagePrefix_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(context, (AssertConstraintUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ASSIGNMENT_ACTION_USAGE:
				if (rule == grammarAccess.getActionNodeRule()
						|| rule == grammarAccess.getAssignmentNodeRule()) {
					sequence_ActionBodyItem_AssignmentNodeDeclaration_BasicUsagePrefix_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(context, (AssignmentActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStateActionUsageRule()
						|| rule == grammarAccess.getEffectBehaviorUsageRule()) {
					sequence_ActionBodyItem_AssignmentNodeDeclaration_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(context, (AssignmentActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPerformedActionUsageRule()) {
					sequence_AssignmentNodeDeclaration_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(context, (AssignmentActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyAssignmentActionRule()) {
					sequence_EmptyAssignmentAction(context, (AssignmentActionUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ATTRIBUTE_DEFINITION:
				sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_SubclassificationPart(context, (AttributeDefinition) semanticObject); 
				return; 
			case SysMLPackage.ATTRIBUTE_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getNonOccurrenceUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getAttributeUsageRule()
						|| rule == grammarAccess.getInterfaceNonOccurrenceUsageElementRule()) {
					sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(context, (AttributeUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (AttributeUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (AttributeUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.BINDING_CONNECTOR_AS_USAGE:
				sequence_BasicUsagePrefix_BindingConnector_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(context, (BindingConnectorAsUsage) semanticObject); 
				return; 
			case SysMLPackage.CALCULATION_DEFINITION:
				if (rule == grammarAccess.getDefinitionElementRule()) {
					sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBody_CalculationBodyItem_CalculationDefinition_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SubclassificationPart(context, (CalculationDefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCalculationDefinitionRule()) {
					sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBody_CalculationBodyItem_CalculationDefinition_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SubclassificationPart(context, (CalculationDefinition) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CALCULATION_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (CalculationUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCalculationUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (CalculationUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (CalculationUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (CalculationUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CASE_DEFINITION:
				if (rule == grammarAccess.getDefinitionElementRule()) {
					sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SubclassificationPart(context, (CaseDefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCaseDefinitionRule()) {
					sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SubclassificationPart(context, (CaseDefinition) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CASE_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (CaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCaseUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (CaseUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.COLLECT_EXPRESSION:
				if (rule == grammarAccess.getOwnedExpressionRule()
						|| rule == grammarAccess.getConditionalExpressionRule()
						|| action == grammarAccess.getConditionalExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getNullCoalescingExpressionRule()
						|| action == grammarAccess.getNullCoalescingExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getXorExpressionRule()
						|| action == grammarAccess.getXorExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getEqualityExpressionRule()
						|| action == grammarAccess.getEqualityExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getClassificationExpressionRule()
						|| action == grammarAccess.getClassificationExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getRelationalExpressionRule()
						|| action == grammarAccess.getRelationalExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getRangeExpressionRule()
						|| action == grammarAccess.getRangeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAdditiveExpressionRule()
						|| action == grammarAccess.getAdditiveExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getMultiplicativeExpressionRule()
						|| action == grammarAccess.getMultiplicativeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getExponentiationExpressionRule()
						|| action == grammarAccess.getExponentiationExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getUnaryExpressionRule()
						|| rule == grammarAccess.getExtentExpressionRule()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| action == grammarAccess.getPrimaryExpressionAccess().getFeatureChainExpressionOperandAction_1_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_2_0_0_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_2_0_1_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getCollectExpressionOperandAction_2_0_2_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getSelectExpressionOperandAction_2_0_3_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getFeatureChainExpressionOperandAction_2_1_0()
						|| rule == grammarAccess.getBaseExpressionRule()
						|| rule == grammarAccess.getSequenceExpressionRule()
						|| action == grammarAccess.getSequenceExpressionAccess().getOperatorExpressionOperandAction_1_1_0()) {
					sequence_PrimaryExpression(context, (CollectExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTargetExpressionRule()
						|| action == grammarAccess.getTargetExpressionAccess().getFeatureChainExpressionOperandAction_1_0_0()
						|| action == grammarAccess.getTargetExpressionAccess().getOperatorExpressionOperandAction_1_1_0_0()
						|| action == grammarAccess.getTargetExpressionAccess().getOperatorExpressionOperandAction_1_1_1_0()
						|| action == grammarAccess.getTargetExpressionAccess().getCollectExpressionOperandAction_1_1_2_0()
						|| action == grammarAccess.getTargetExpressionAccess().getSelectExpressionOperandAction_1_1_3_0()) {
					sequence_PrimaryExpression_TargetExpression(context, (CollectExpression) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.COMMENT:
				if (rule == grammarAccess.getCommentRule()) {
					sequence_Comment_Identification(context, (Comment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnnotatingElementRule()
						|| rule == grammarAccess.getDefinitionElementRule()) {
					sequence_Comment_Identification_PrefixComment(context, (Comment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPrefixCommentRule()) {
					sequence_Identification_PrefixComment(context, (Comment) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CONCERN_DEFINITION:
				sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_EmptyReturnParameterPart_Identification_OccurrenceDefinitionPrefix_ParameterList_RequirementBodyItem_SubclassificationPart(context, (ConcernDefinition) semanticObject); 
				return; 
			case SysMLPackage.CONCERN_USAGE:
				if (rule == grammarAccess.getFramedConcernUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_DefinitionBodyItem_FramedConcernUsage_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (ConcernUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()
						|| rule == grammarAccess.getConcernUsageRule()) {
					sequence_ActionUsageParameterList_BasicUsagePrefix_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (ConcernUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (ConcernUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (ConcernUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CONJUGATED_PORT_DEFINITION:
				sequence_ConjugatedPortDefinition(context, (ConjugatedPortDefinition) semanticObject); 
				return; 
			case SysMLPackage.CONJUGATED_PORT_TYPING:
				sequence_ConjugatedPortTyping(context, (ConjugatedPortTyping) semanticObject); 
				return; 
			case SysMLPackage.CONNECTION_DEFINITION:
				sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_SubclassificationPart(context, (ConnectionDefinition) semanticObject); 
				return; 
			case SysMLPackage.CONNECTION_USAGE:
				sequence_BasicUsagePrefix_BinaryConnectorPart_DefinitionBodyItem_Identification_MultiplicityPart_NaryConnectorPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(context, (ConnectionUsage) semanticObject); 
				return; 
			case SysMLPackage.CONSTRAINT_DEFINITION:
				if (rule == grammarAccess.getDefinitionElementRule()) {
					sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBody_CalculationBodyItem_DefinitionExtensionKeyword_EmptyReturnParameterPart_Identification_OccurrenceDefinitionPrefix_ParameterList_SubclassificationPart(context, (ConstraintDefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getConstraintDefinitionRule()) {
					sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBody_CalculationBodyItem_DefinitionExtensionKeyword_EmptyReturnParameterPart_Identification_OccurrenceDefinitionPrefix_ParameterList_SubclassificationPart(context, (ConstraintDefinition) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CONSTRAINT_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (ConstraintUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getConstraintUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (ConstraintUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRequirementConstraintUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_RequirementConstraintUsage_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (ConstraintUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (ConstraintUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (ConstraintUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.DECISION_NODE:
				sequence_ControlNodePrefix_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings(context, (DecisionNode) semanticObject); 
				return; 
			case SysMLPackage.DEFINITION:
				sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_SubclassificationPart(context, (Definition) semanticObject); 
				return; 
			case SysMLPackage.DEPENDENCY:
				sequence_Dependency_Identification(context, (Dependency) semanticObject); 
				return; 
			case SysMLPackage.DOCUMENTATION:
				sequence_Documentation_Identification(context, (Documentation) semanticObject); 
				return; 
			case SysMLPackage.ELEMENT_FILTER_MEMBERSHIP:
				if (rule == grammarAccess.getElementFilterMemberRule()) {
					sequence_ElementFilterMember_MemberPrefix(context, (ElementFilterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFilterPackageMemberRule()) {
					sequence_FilterPackageMember(context, (ElementFilterMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.END_FEATURE_MEMBERSHIP:
				if (rule == grammarAccess.getConnectorEndMemberRule()) {
					sequence_ConnectorEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyItemFlowEndMemberRule()) {
					sequence_EmptyItemFlowEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptySourceEndMemberRule()) {
					sequence_EmptySourceEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyTargetEndMemberRule()) {
					sequence_EmptyTargetEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceEndMemberRule()) {
					sequence_InterfaceEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFlowEndMemberRule()) {
					sequence_ItemFlowEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMultiplicitySourceEndMemberRule()) {
					sequence_MultiplicitySourceEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ENUMERATION_DEFINITION:
				sequence_EnumerationBody_Identification_SubclassificationPart(context, (EnumerationDefinition) semanticObject); 
				return; 
			case SysMLPackage.ENUMERATION_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getNonOccurrenceUsageElementRule()
						|| rule == grammarAccess.getEnumerationUsageRule()
						|| rule == grammarAccess.getInterfaceNonOccurrenceUsageElementRule()) {
					sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(context, (EnumerationUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEnumeratedValueRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValueOrFlowPart_ValuePart(context, (EnumerationUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.EVENT_OCCURRENCE_USAGE:
				sequence_BasicUsagePrefix_DefinitionBodyItem_EventOccurrenceUsage_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(context, (EventOccurrenceUsage) semanticObject); 
				return; 
			case SysMLPackage.EXHIBIT_STATE_USAGE:
				sequence_ActionUsageParameterList_BasicUsagePrefix_ExhibitStateUsage_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_StateBodyItem_StateUsageBody_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (ExhibitStateUsage) semanticObject); 
				return; 
			case SysMLPackage.EXPOSE:
				sequence_Expose_ImportedFilterPackage_ImportedNamespace(context, (Expose) semanticObject); 
				return; 
			case SysMLPackage.EXPRESSION:
				if (rule == grammarAccess.getExpressionBodyRule()) {
					sequence_ActionBodyItem_CalculationBody_CalculationBodyItem(context, (Expression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getChangeExpressionRule()) {
					sequence_ChangeExpression(context, (Expression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFunctionReferenceRule()) {
					sequence_FunctionReference(context, (Expression) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE:
				if (rule == grammarAccess.getArgumentRule()) {
					sequence_Argument(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBodyParameterRule()) {
					sequence_BodyParameter(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getConnectorEndRule()) {
					sequence_ConnectorEnd(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyFeatureRule()) {
					sequence_EmptyFeature(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureChainPrefixRule()) {
					sequence_FeatureChainPrefix(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedFeatureChainRule()) {
					sequence_FeatureChain(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNamedArgumentRule()) {
					sequence_NamedArgument(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeReferenceRule()) {
					sequence_TypeReference(context, (Feature) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_CHAIN_EXPRESSION:
				if (rule == grammarAccess.getTargetExpressionRule()
						|| action == grammarAccess.getTargetExpressionAccess().getFeatureChainExpressionOperandAction_1_0_0()
						|| rule == grammarAccess.getOwnedExpressionRule()
						|| rule == grammarAccess.getConditionalExpressionRule()
						|| action == grammarAccess.getConditionalExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getNullCoalescingExpressionRule()
						|| action == grammarAccess.getNullCoalescingExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getXorExpressionRule()
						|| action == grammarAccess.getXorExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getEqualityExpressionRule()
						|| action == grammarAccess.getEqualityExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getClassificationExpressionRule()
						|| action == grammarAccess.getClassificationExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getRelationalExpressionRule()
						|| action == grammarAccess.getRelationalExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getRangeExpressionRule()
						|| action == grammarAccess.getRangeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAdditiveExpressionRule()
						|| action == grammarAccess.getAdditiveExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getMultiplicativeExpressionRule()
						|| action == grammarAccess.getMultiplicativeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getExponentiationExpressionRule()
						|| action == grammarAccess.getExponentiationExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getUnaryExpressionRule()
						|| rule == grammarAccess.getExtentExpressionRule()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| action == grammarAccess.getPrimaryExpressionAccess().getFeatureChainExpressionOperandAction_1_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_2_0_0_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_2_0_1_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getCollectExpressionOperandAction_2_0_2_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getSelectExpressionOperandAction_2_0_3_0()
						|| rule == grammarAccess.getBaseExpressionRule()
						|| rule == grammarAccess.getSequenceExpressionRule()
						|| action == grammarAccess.getSequenceExpressionAccess().getOperatorExpressionOperandAction_1_1_0()) {
					sequence_PrimaryExpression(context, (FeatureChainExpression) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getTargetExpressionAccess().getOperatorExpressionOperandAction_1_1_0_0()
						|| action == grammarAccess.getTargetExpressionAccess().getOperatorExpressionOperandAction_1_1_1_0()
						|| action == grammarAccess.getTargetExpressionAccess().getCollectExpressionOperandAction_1_1_2_0()
						|| action == grammarAccess.getTargetExpressionAccess().getSelectExpressionOperandAction_1_1_3_0()) {
					sequence_PrimaryExpression_TargetExpression_CollectExpression_1_1_2_0_OperatorExpression_1_1_0_0_OperatorExpression_1_1_1_0_SelectExpression_1_1_3_0(context, (FeatureChainExpression) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_CHAINING:
				sequence_OwnedFeatureChaining(context, (FeatureChaining) semanticObject); 
				return; 
			case SysMLPackage.FEATURE_MEMBERSHIP:
				if (rule == grammarAccess.getActionNodeMemberRule()) {
					sequence_ActionNodeMember_MemberPrefix(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBehaviorUsageMemberRule()) {
					sequence_BehaviorUsageMember_MemberPrefix(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getChangeExpressionMemberRule()) {
					sequence_ChangeExpressionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyItemFeatureMemberRule()) {
					sequence_EmptyItemFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyItemFlowFeatureMemberRule()) {
					sequence_EmptyItemFlowFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptySuccessionMemberRule()) {
					sequence_EmptySuccessionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEntryTransitionMemberRule()) {
					sequence_EntryTransitionMember_MemberPrefix(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEqualityExpressionMemberRule()) {
					sequence_EqualityExpressionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionBodyMemberRule()) {
					sequence_ExpressionBodyMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getForVariableDeclarationMemberRule()) {
					sequence_ForVariableDeclarationMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFunctionReferenceMemberRule()) {
					sequence_FunctionReferenceMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGuardedSuccessionMemberRule()) {
					sequence_GuardedSuccessionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getImpliesExpressionMemberRule()) {
					sequence_ImpliesExpressionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceNonOccurrenceUsageMemberRule()) {
					sequence_InterfaceNonOccurrenceUsageMember_MemberPrefix(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceOccurrenceUsageMemberRule()) {
					sequence_InterfaceOccurrenceUsageMember_MemberPrefix(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFeatureMemberRule()) {
					sequence_ItemFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFlowFeatureMemberRule()) {
					sequence_ItemFlowFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNonOccurrenceUsageMemberRule()) {
					sequence_MemberPrefix_NonOccurrenceUsageMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOccurrenceUsageMemberRule()) {
					sequence_MemberPrefix_OccurrenceUsageMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStructureUsageMemberRule()) {
					sequence_MemberPrefix_StructureUsageMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTargetSuccessionMemberRule()) {
					sequence_MemberPrefix_TargetSuccessionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTargetTransitionUsageMemberRule()) {
					sequence_MemberPrefix_TargetTransitionUsageMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTransitionUsageMemberRule()) {
					sequence_MemberPrefix_TransitionUsageMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMetadataBodyUsageMemberRule()) {
					sequence_MetadataBodyUsageMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOrExpressionMemberRule()) {
					sequence_OrExpressionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedExpressionMemberRule()) {
					sequence_OwnedExpressionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPortioningFeatureMemberRule()) {
					sequence_PortioningFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTargetAccessedFeatureMemberRule()) {
					sequence_TargetAccessedFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTargetFeatureMemberRule()) {
					sequence_TargetFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeReferenceMemberRule()) {
					sequence_TypeReferenceMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXorExpressionMemberRule()) {
					sequence_XorExpressionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_REFERENCE_EXPRESSION:
				if (rule == grammarAccess.getBodyExpressionRule()) {
					sequence_BodyExpression(context, (FeatureReferenceExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTargetExpressionRule()
						|| action == grammarAccess.getTargetExpressionAccess().getFeatureChainExpressionOperandAction_1_0_0()
						|| action == grammarAccess.getTargetExpressionAccess().getOperatorExpressionOperandAction_1_1_0_0()
						|| action == grammarAccess.getTargetExpressionAccess().getOperatorExpressionOperandAction_1_1_1_0()
						|| action == grammarAccess.getTargetExpressionAccess().getCollectExpressionOperandAction_1_1_2_0()
						|| action == grammarAccess.getTargetExpressionAccess().getSelectExpressionOperandAction_1_1_3_0()
						|| rule == grammarAccess.getOwnedExpressionRule()
						|| rule == grammarAccess.getConditionalExpressionRule()
						|| action == grammarAccess.getConditionalExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getNullCoalescingExpressionRule()
						|| action == grammarAccess.getNullCoalescingExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getXorExpressionRule()
						|| action == grammarAccess.getXorExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getEqualityExpressionRule()
						|| action == grammarAccess.getEqualityExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getClassificationExpressionRule()
						|| action == grammarAccess.getClassificationExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getRelationalExpressionRule()
						|| action == grammarAccess.getRelationalExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getRangeExpressionRule()
						|| action == grammarAccess.getRangeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAdditiveExpressionRule()
						|| action == grammarAccess.getAdditiveExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getMultiplicativeExpressionRule()
						|| action == grammarAccess.getMultiplicativeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getExponentiationExpressionRule()
						|| action == grammarAccess.getExponentiationExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getUnaryExpressionRule()
						|| rule == grammarAccess.getExtentExpressionRule()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| action == grammarAccess.getPrimaryExpressionAccess().getFeatureChainExpressionOperandAction_1_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_2_0_0_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_2_0_1_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getCollectExpressionOperandAction_2_0_2_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getSelectExpressionOperandAction_2_0_3_0()
						|| rule == grammarAccess.getBaseExpressionRule()
						|| rule == grammarAccess.getSequenceExpressionRule()
						|| action == grammarAccess.getSequenceExpressionAccess().getOperatorExpressionOperandAction_1_1_0()) {
					sequence_BodyExpression_FeatureReferenceExpression(context, (FeatureReferenceExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEqualityExpressionReferenceRule()) {
					sequence_EqualityExpressionReference(context, (FeatureReferenceExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureReferenceExpressionRule()) {
					sequence_FeatureReferenceExpression(context, (FeatureReferenceExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFunctionReferenceExpressionRule()) {
					sequence_FunctionReferenceExpression(context, (FeatureReferenceExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getImpliesExpressionReferenceRule()) {
					sequence_ImpliesExpressionReference(context, (FeatureReferenceExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOrExpressionReferenceRule()) {
					sequence_OrExpressionReference(context, (FeatureReferenceExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedExpressionReferenceRule()) {
					sequence_OwnedExpressionReference(context, (FeatureReferenceExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSatisfactionReferenceExpressionRule()) {
					sequence_SatisfactionReferenceExpression(context, (FeatureReferenceExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSelfReferenceExpressionRule()) {
					sequence_SelfReferenceExpression(context, (FeatureReferenceExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXorExpressionReferenceRule()) {
					sequence_XorExpressionReference(context, (FeatureReferenceExpression) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_TYPING:
				if (rule == grammarAccess.getMetadataTypingRule()) {
					sequence_MetadataTyping(context, (FeatureTyping) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureTypingRule()
						|| rule == grammarAccess.getOwnedFeatureTypingRule()) {
					sequence_OwnedFeatureTyping(context, (FeatureTyping) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getReferenceTypingRule()) {
					sequence_ReferenceTyping(context, (FeatureTyping) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_VALUE:
				if (rule == grammarAccess.getArgumentValueRule()) {
					sequence_ArgumentValue(context, (FeatureValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureBindingRule()) {
					sequence_FeatureBinding(context, (FeatureValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureValueExpressionRule()) {
					sequence_FeatureValueExpression(context, (FeatureValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureValueRule()) {
					sequence_FeatureValue(context, (FeatureValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSatisfactionFeatureValueRule()) {
					sequence_SatisfactionFeatureValue(context, (FeatureValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTargetBindingRule()) {
					sequence_TargetBinding(context, (FeatureValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTriggerFeatureValueRule()) {
					sequence_TriggerFeatureValue(context, (FeatureValue) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FLOW_CONNECTION_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()) {
					sequence_BasicUsagePrefix_BinaryConnectorPart_DefinitionBodyItem_FlowConnectionDeclaration_Identification_MessageDeclaration_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (FlowConnectionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMessageRule()) {
					sequence_BasicUsagePrefix_BinaryConnectorPart_DefinitionBodyItem_Identification_MessageDeclaration_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (FlowConnectionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFlowConnectionUsageRule()) {
					sequence_BasicUsagePrefix_DefinitionBodyItem_FlowConnectionDeclaration_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(context, (FlowConnectionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSourceItemFlowRule()) {
					sequence_SourceItemFlow(context, (FlowConnectionUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FOR_LOOP_ACTION_USAGE:
				sequence_BasicUsagePrefix_ForLoopNode_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(context, (ForLoopActionUsage) semanticObject); 
				return; 
			case SysMLPackage.FORK_NODE:
				sequence_ControlNodePrefix_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings(context, (ForkNode) semanticObject); 
				return; 
			case SysMLPackage.FRAMED_CONCERN_MEMBERSHIP:
				sequence_FramedConcernMember_MemberPrefix(context, (FramedConcernMembership) semanticObject); 
				return; 
			case SysMLPackage.IF_ACTION_USAGE:
				sequence_BasicUsagePrefix_Identification_IfNode_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(context, (IfActionUsage) semanticObject); 
				return; 
			case SysMLPackage.IMPORT:
				if (rule == grammarAccess.getImportRule()) {
					sequence_Import_ImportedFilterPackage_ImportedNamespace(context, (Import) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFilterPackageImportRule()) {
					sequence_ImportedNamespace(context, (Import) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.INCLUDE_USE_CASE_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBodyItem_CaseBody_CaseBodyItem_Identification_IncludeUseCaseUsage_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (IncludeUseCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getIncludeUseCaseUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBodyItem_CaseBody_CaseBodyItem_Identification_IncludeUseCaseUsage_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (IncludeUseCaseUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.INTERFACE_DEFINITION:
				sequence_BasicDefinitionPrefix_DefinitionExtensionKeyword_Identification_InterfaceBodyItem_OccurrenceDefinitionPrefix_SubclassificationPart(context, (InterfaceDefinition) semanticObject); 
				return; 
			case SysMLPackage.INTERFACE_USAGE:
				sequence_BasicUsagePrefix_BinaryInterfacePart_Identification_InterfaceBodyItem_MultiplicityPart_NaryInterfacePart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(context, (InterfaceUsage) semanticObject); 
				return; 
			case SysMLPackage.INVOCATION_EXPRESSION:
				sequence_InvocationExpression_NamedArgumentList_PositionalArgumentList(context, (InvocationExpression) semanticObject); 
				return; 
			case SysMLPackage.ITEM_DEFINITION:
				sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_SubclassificationPart(context, (ItemDefinition) semanticObject); 
				return; 
			case SysMLPackage.ITEM_FEATURE:
				if (rule == grammarAccess.getEmptyItemFeatureRule()) {
					sequence_EmptyItemFeature(context, (ItemFeature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFeatureRule()) {
					sequence_ItemFeature(context, (ItemFeature) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ITEM_FLOW_END:
				if (rule == grammarAccess.getEmptyItemFlowEndRule()) {
					sequence_EmptyItemFlowEnd(context, (ItemFlowEnd) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFlowEndRule()) {
					sequence_ItemFlowEnd(context, (ItemFlowEnd) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ITEM_FLOW_FEATURE:
				if (rule == grammarAccess.getEmptyItemFlowFeatureRule()) {
					sequence_EmptyItemFlowFeature(context, (ItemFlowFeature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFlowFeatureRule()) {
					sequence_ItemFlowFeature(context, (ItemFlowFeature) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ITEM_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getItemUsageRule()
						|| rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()) {
					sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(context, (ItemUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (ItemUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (ItemUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.JOIN_NODE:
				sequence_ControlNodePrefix_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings(context, (JoinNode) semanticObject); 
				return; 
			case SysMLPackage.LIFE_CLASS:
				sequence_LifeClass(context, (LifeClass) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_BOOLEAN:
				sequence_LiteralBoolean(context, (LiteralBoolean) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_INFINITY:
				sequence_LiteralInfinity(context, (LiteralInfinity) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_INTEGER:
				sequence_LiteralInteger(context, (LiteralInteger) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_RATIONAL:
				sequence_LiteralReal(context, (LiteralRational) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_STRING:
				sequence_LiteralString(context, (LiteralString) semanticObject); 
				return; 
			case SysMLPackage.MEMBERSHIP:
				if (rule == grammarAccess.getAliasMemberRule()) {
					sequence_AliasMember_MemberPrefix(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureChainMemberRule()) {
					sequence_FeatureChainMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureReferenceMemberRule()) {
					sequence_FeatureReferenceMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInitialNodeMemberRule()) {
					sequence_InitialNodeMember_MemberPrefix(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTransitionSourceMemberRule()) {
					sequence_TransitionSourceMember(context, (Membership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.MERGE_NODE:
				sequence_ControlNodePrefix_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings(context, (MergeNode) semanticObject); 
				return; 
			case SysMLPackage.METADATA_DEFINITION:
				sequence_DefinitionBodyItem_Identification_MetadataDefinition_SubclassificationPart(context, (MetadataDefinition) semanticObject); 
				return; 
			case SysMLPackage.METADATA_USAGE:
				if (rule == grammarAccess.getAnnotatingElementRule()
						|| rule == grammarAccess.getMetadataUsageRule()
						|| rule == grammarAccess.getDefinitionElementRule()) {
					sequence_Identification_MetadataBody_MetadataFeatureDeclaration_MetadataUsage(context, (MetadataUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPrefixMetadataUsageRule()) {
					sequence_PrefixMetadataUsage(context, (MetadataUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.MULTIPLICITY_RANGE:
				sequence_MultiplicityRange(context, (MultiplicityRange) semanticObject); 
				return; 
			case SysMLPackage.NAMESPACE:
				sequence_PackageBodyElement_RootNamespace(context, (Namespace) semanticObject); 
				return; 
			case SysMLPackage.NULL_EXPRESSION:
				sequence_NullExpression(context, (NullExpression) semanticObject); 
				return; 
			case SysMLPackage.OBJECTIVE_MEMBERSHIP:
				sequence_MemberPrefix_ObjectiveMember(context, (ObjectiveMembership) semanticObject); 
				return; 
			case SysMLPackage.OCCURRENCE_DEFINITION:
				if (rule == grammarAccess.getDefinitionElementRule()) {
					sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_IndividualDefinition_OccurrenceDefinitionPrefix_SubclassificationPart(context, (OccurrenceDefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getIndividualDefinitionRule()) {
					sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_IndividualDefinition_SubclassificationPart(context, (OccurrenceDefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOccurrenceDefinitionRule()) {
					sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_SubclassificationPart(context, (OccurrenceDefinition) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.OCCURRENCE_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()) {
					sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_IndividualUsage_MultiplicityPart_OccurrenceUsagePrefix_PortionUsage_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(context, (OccurrenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getIndividualUsageRule()) {
					sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_IndividualUsage_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(context, (OccurrenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOccurrenceUsageRule()) {
					sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(context, (OccurrenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPortionUsageRule()) {
					sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_PortionUsage_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(context, (OccurrenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (OccurrenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (OccurrenceUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.OPERATOR_EXPRESSION:
				if (rule == grammarAccess.getTargetExpressionRule()
						|| action == grammarAccess.getTargetExpressionAccess().getFeatureChainExpressionOperandAction_1_0_0()
						|| action == grammarAccess.getTargetExpressionAccess().getOperatorExpressionOperandAction_1_1_0_0()
						|| action == grammarAccess.getTargetExpressionAccess().getOperatorExpressionOperandAction_1_1_1_0()
						|| action == grammarAccess.getTargetExpressionAccess().getCollectExpressionOperandAction_1_1_2_0()
						|| action == grammarAccess.getTargetExpressionAccess().getSelectExpressionOperandAction_1_1_3_0()) {
					sequence_AdditiveExpression_AndExpression_ClassificationExpression_ConditionalExpression_EqualityExpression_ExponentiationExpression_ExtentExpression_ImpliesExpression_MultiplicativeExpression_NamedArgumentList_NullCoalescingExpression_OrExpression_PositionalArgumentList_PrimaryExpression_RangeExpression_RelationalExpression_SequenceExpression_TargetExpression_UnaryExpression_XorExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedExpressionRule()
						|| rule == grammarAccess.getConditionalExpressionRule()
						|| action == grammarAccess.getConditionalExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getNullCoalescingExpressionRule()
						|| action == grammarAccess.getNullCoalescingExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getXorExpressionRule()
						|| action == grammarAccess.getXorExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getEqualityExpressionRule()
						|| action == grammarAccess.getEqualityExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getClassificationExpressionRule()
						|| action == grammarAccess.getClassificationExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getRelationalExpressionRule()
						|| action == grammarAccess.getRelationalExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getRangeExpressionRule()
						|| action == grammarAccess.getRangeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAdditiveExpressionRule()
						|| action == grammarAccess.getAdditiveExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getMultiplicativeExpressionRule()
						|| action == grammarAccess.getMultiplicativeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getExponentiationExpressionRule()
						|| action == grammarAccess.getExponentiationExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getUnaryExpressionRule()
						|| rule == grammarAccess.getExtentExpressionRule()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| action == grammarAccess.getPrimaryExpressionAccess().getFeatureChainExpressionOperandAction_1_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_2_0_0_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_2_0_1_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getCollectExpressionOperandAction_2_0_2_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getSelectExpressionOperandAction_2_0_3_0()
						|| rule == grammarAccess.getBaseExpressionRule()
						|| rule == grammarAccess.getSequenceExpressionRule()
						|| action == grammarAccess.getSequenceExpressionAccess().getOperatorExpressionOperandAction_1_1_0()) {
					sequence_AdditiveExpression_AndExpression_ClassificationExpression_ConditionalExpression_EqualityExpression_ExponentiationExpression_ExtentExpression_ImpliesExpression_MultiplicativeExpression_NamedArgumentList_NullCoalescingExpression_OrExpression_PositionalArgumentList_PrimaryExpression_RangeExpression_RelationalExpression_SequenceExpression_UnaryExpression_XorExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getPrimaryExpressionAccess().getFeatureChainExpressionOperandAction_2_1_0()) {
					sequence_NamedArgumentList_PositionalArgumentList_PrimaryExpression_FeatureChainExpression_2_1_0(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.OWNING_MEMBERSHIP:
				if (rule == grammarAccess.getAnnotatingMemberRule()) {
					sequence_AnnotatingMember(context, (OwningMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getConjugatedPortDefinitionMemberRule()) {
					sequence_ConjugatedPortDefinitionMember(context, (OwningMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDefinitionMemberRule()) {
					sequence_DefinitionMember_MemberPrefix(context, (OwningMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyAssignmentActionMemberRule()) {
					sequence_EmptyAssignmentActionMember(context, (OwningMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureChainMemberRule()) {
					sequence_FeatureChainMember(context, (OwningMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLifeClassMembershipRule()) {
					sequence_LifeClassMembership(context, (OwningMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPackageMemberRule()) {
					sequence_MemberPrefix_PackageMember(context, (OwningMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMultiplicityExpressionMemberRule()) {
					sequence_MultiplicityExpressionMember(context, (OwningMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedMultiplicityRule()) {
					sequence_OwnedMultiplicity(context, (OwningMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPrefixMetadataMemberRule()) {
					sequence_PrefixMetadataMember(context, (OwningMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSourceItemFlowMemberRule()) {
					sequence_SourceItemFlowMember(context, (OwningMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTransitionSourceMemberRule()) {
					sequence_TransitionSourceMember(context, (OwningMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTransitionSuccessionMemberRule()) {
					sequence_TransitionSuccessionMember(context, (OwningMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PACKAGE:
				if (rule == grammarAccess.getFilterPackageRule()) {
					sequence_FilterPackage(context, (org.omg.sysml.lang.sysml.Package) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPackageRule()
						|| rule == grammarAccess.getDefinitionElementRule()) {
					sequence_Identification_Package_PackageBody(context, (org.omg.sysml.lang.sysml.Package) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PARAMETER_MEMBERSHIP:
				if (rule == grammarAccess.getActionBodyParameterMemberRule()) {
					sequence_ActionBodyParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterMemberRule()) {
					sequence_ActionUsageParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getArgumentMemberRule()) {
					sequence_ArgumentMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAssignmentTargetMemberRule()) {
					sequence_AssignmentTargetMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBodyParameterMemberRule()) {
					sequence_BodyParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyParameterMemberRule()) {
					sequence_EmptyParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyTargetMemberRule()) {
					sequence_EmptyTargetMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionParameterMemberRule()) {
					sequence_ExpressionParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getIfNodeParameterMemberRule()) {
					sequence_IfNodeParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNamedArgumentMemberRule()) {
					sequence_NamedArgumentMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNodeParameterMemberRule()) {
					sequence_NodeParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterMemberRule()) {
					sequence_ParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPayloadParameterMemberRule()) {
					sequence_PayloadParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PART_DEFINITION:
				sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_SubclassificationPart(context, (PartDefinition) semanticObject); 
				return; 
			case SysMLPackage.PART_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getPartUsageRule()
						|| rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()) {
					sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(context, (PartUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActorUsageRule()
						|| rule == grammarAccess.getStakeholderUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValueOrFlowPart_ValuePart(context, (PartUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (PartUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (PartUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PERFORM_ACTION_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()
						|| rule == grammarAccess.getPerformActionUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_Identification_MultiplicityPart_OccurrenceUsagePrefix_PerformActionUsageDeclaration_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (PerformActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStateActionUsageRule()
						|| rule == grammarAccess.getEffectBehaviorUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_Identification_MultiplicityPart_PerformActionUsageDeclaration_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (PerformActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPerformedActionUsageRule()) {
					sequence_ActionUsageParameterList_Identification_MultiplicityPart_PerformActionUsageDeclaration_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (PerformActionUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PORT_CONJUGATION:
				sequence_PortConjugation(context, (PortConjugation) semanticObject); 
				return; 
			case SysMLPackage.PORT_DEFINITION:
				sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_PortDefinition_SubclassificationPart(context, (PortDefinition) semanticObject); 
				return; 
			case SysMLPackage.PORT_USAGE:
				if (rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()) {
					sequence_BasicUsagePrefix_DefaultInterfaceEnd_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(context, (PortUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getPortUsageRule()) {
					sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(context, (PortUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDefaultInterfaceEndRule()) {
					sequence_DefaultInterfaceEnd_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValueOrFlowPart_ValuePart(context, (PortUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceEndRule()) {
					sequence_InterfaceEnd(context, (PortUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PORTIONING_FEATURE:
				sequence_PortioningFeature(context, (PortioningFeature) semanticObject); 
				return; 
			case SysMLPackage.REDEFINITION:
				if (rule == grammarAccess.getItemFlowRedefinitionRule()) {
					sequence_ItemFlowRedefinition(context, (Redefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedRedefinitionRule()) {
					sequence_OwnedRedefinition(context, (Redefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRedefinitionRule()) {
					sequence_ParameterRedefinition(context, (Redefinition) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.REFERENCE_USAGE:
				if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_ActionUsageParameter_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getReferenceUsageRule()
						|| rule == grammarAccess.getNonOccurrenceUsageElementRule()
						|| rule == grammarAccess.getInterfaceNonOccurrenceUsageElementRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_ValueOrFlowPart_ValuePart(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDefaultReferenceUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_ValueOrFlowPart_ValuePart(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVariantUsageElementRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_ValueOrFlowPart_ValuePart_VariantReference(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSubjectUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValueOrFlowPart_ValuePart(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVariantReferenceRule()) {
					sequence_DefinitionBodyItem_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_VariantReference(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyTargetParameterRule()) {
					sequence_EmptyTargetParameter(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyUsageRule()) {
					sequence_EmptyUsage(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPayloadParameterRule()) {
					sequence_Identification_MultiplicityPart_PayloadParameter_Redefines_Redefinitions_Subsets_Subsettings_TriggerValuePart_TypedBy_Typings_ValueOrFlowPart_ValuePart(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getForVariableDeclarationRule()) {
					sequence_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMetadataBodyUsageRule()) {
					sequence_MetadataBody_MetadataBodyUsage_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNodeParameterRule()) {
					sequence_NodeParameter(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSatisfactionParameterRule()) {
					sequence_SatisfactionParameter(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTargetFeatureRule()) {
					sequence_TargetFeature(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTargetParameterRule()) {
					sequence_TargetParameter(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.RENDERING_DEFINITION:
				sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_SubclassificationPart(context, (RenderingDefinition) semanticObject); 
				return; 
			case SysMLPackage.RENDERING_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()
						|| rule == grammarAccess.getRenderingUsageRule()) {
					sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(context, (RenderingUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getViewRenderingUsageRule()) {
					sequence_DefinitionBodyItem_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ViewRenderingUsage(context, (RenderingUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (RenderingUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (RenderingUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.REQUIREMENT_CONSTRAINT_MEMBERSHIP:
				sequence_MemberPrefix_RequirementConstraintMember(context, (RequirementConstraintMembership) semanticObject); 
				return; 
			case SysMLPackage.REQUIREMENT_DEFINITION:
				sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_EmptyReturnParameterPart_Identification_OccurrenceDefinitionPrefix_ParameterList_RequirementBodyItem_SubclassificationPart(context, (RequirementDefinition) semanticObject); 
				return; 
			case SysMLPackage.REQUIREMENT_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()
						|| rule == grammarAccess.getRequirementUsageRule()) {
					sequence_ActionUsageParameterList_BasicUsagePrefix_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (RequirementUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRequirementVerificationUsageRule()) {
					sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_RequirementVerificationUsage_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (RequirementUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getObjectiveRequirementUsageRule()) {
					sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (RequirementUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (RequirementUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (RequirementUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.REQUIREMENT_VERIFICATION_MEMBERSHIP:
				sequence_MemberPrefix_RequirementVerificationMember(context, (RequirementVerificationMembership) semanticObject); 
				return; 
			case SysMLPackage.RESULT_EXPRESSION_MEMBERSHIP:
				if (rule == grammarAccess.getChangeResultExpressionMemberRule()) {
					sequence_ChangeResultExpressionMember(context, (ResultExpressionMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getResultExpressionMemberRule()) {
					sequence_MemberPrefix_ResultExpressionMember(context, (ResultExpressionMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.RETURN_PARAMETER_MEMBERSHIP:
				if (rule == grammarAccess.getCalculationReturnParameterMemberRule()) {
					sequence_CalculationReturnParameterMember(context, (ReturnParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyReturnParameterMemberRule()) {
					sequence_EmptyReturnParameterMember(context, (ReturnParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getReturnParameterFlowUsageMemberRule()) {
					sequence_MemberPrefix_ReturnParameterFlowUsageMember(context, (ReturnParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getReturnParameterMemberRule()) {
					sequence_ReturnParameterMember(context, (ReturnParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSelfReferenceMemberRule()) {
					sequence_SelfReferenceMember(context, (ReturnParameterMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SATISFY_REQUIREMENT_USAGE:
				sequence_ActionUsageParameterList_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_RequirementBodyItem_SatisfyRequirementUsage_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (SatisfyRequirementUsage) semanticObject); 
				return; 
			case SysMLPackage.SELECT_EXPRESSION:
				if (rule == grammarAccess.getOwnedExpressionRule()
						|| rule == grammarAccess.getConditionalExpressionRule()
						|| action == grammarAccess.getConditionalExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getNullCoalescingExpressionRule()
						|| action == grammarAccess.getNullCoalescingExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getXorExpressionRule()
						|| action == grammarAccess.getXorExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getEqualityExpressionRule()
						|| action == grammarAccess.getEqualityExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getClassificationExpressionRule()
						|| action == grammarAccess.getClassificationExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getRelationalExpressionRule()
						|| action == grammarAccess.getRelationalExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getRangeExpressionRule()
						|| action == grammarAccess.getRangeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAdditiveExpressionRule()
						|| action == grammarAccess.getAdditiveExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getMultiplicativeExpressionRule()
						|| action == grammarAccess.getMultiplicativeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getExponentiationExpressionRule()
						|| action == grammarAccess.getExponentiationExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getUnaryExpressionRule()
						|| rule == grammarAccess.getExtentExpressionRule()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| action == grammarAccess.getPrimaryExpressionAccess().getFeatureChainExpressionOperandAction_1_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_2_0_0_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_2_0_1_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getCollectExpressionOperandAction_2_0_2_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getSelectExpressionOperandAction_2_0_3_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getFeatureChainExpressionOperandAction_2_1_0()
						|| rule == grammarAccess.getBaseExpressionRule()
						|| rule == grammarAccess.getSequenceExpressionRule()
						|| action == grammarAccess.getSequenceExpressionAccess().getOperatorExpressionOperandAction_1_1_0()) {
					sequence_PrimaryExpression(context, (SelectExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTargetExpressionRule()
						|| action == grammarAccess.getTargetExpressionAccess().getFeatureChainExpressionOperandAction_1_0_0()
						|| action == grammarAccess.getTargetExpressionAccess().getOperatorExpressionOperandAction_1_1_0_0()
						|| action == grammarAccess.getTargetExpressionAccess().getOperatorExpressionOperandAction_1_1_1_0()
						|| action == grammarAccess.getTargetExpressionAccess().getCollectExpressionOperandAction_1_1_2_0()
						|| action == grammarAccess.getTargetExpressionAccess().getSelectExpressionOperandAction_1_1_3_0()) {
					sequence_PrimaryExpression_TargetExpression(context, (SelectExpression) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SEND_ACTION_USAGE:
				if (rule == grammarAccess.getActionNodeRule()
						|| rule == grammarAccess.getSendNodeRule()) {
					sequence_ActionBodyItem_BasicUsagePrefix_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_SendNodeDeclaration_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(context, (SendActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStateActionUsageRule()
						|| rule == grammarAccess.getEffectBehaviorUsageRule()) {
					sequence_ActionBodyItem_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_SendNodeDeclaration_Subsets_Subsettings_TypedBy_Typings(context, (SendActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPerformedActionUsageRule()) {
					sequence_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_SendNodeDeclaration_Subsets_Subsettings_TypedBy_Typings(context, (SendActionUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SOURCE_END:
				if (rule == grammarAccess.getEmptySourceEndRule()) {
					sequence_EmptySourceEnd(context, (SourceEnd) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMultiplicitySourceEndRule()) {
					sequence_MultiplicitySourceEnd(context, (SourceEnd) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.STAKEHOLDER_MEMBERSHIP:
				sequence_MemberPrefix_StakeholderMember(context, (StakeholderMembership) semanticObject); 
				return; 
			case SysMLPackage.STATE_DEFINITION:
				sequence_BasicDefinitionPrefix_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_StateBodyItem_StateDefBody_SubclassificationPart(context, (StateDefinition) semanticObject); 
				return; 
			case SysMLPackage.STATE_SUBACTION_MEMBERSHIP:
				if (rule == grammarAccess.getDoActionMemberRule()) {
					sequence_DoActionMember_MemberPrefix(context, (StateSubactionMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEntryActionMemberRule()) {
					sequence_EntryActionMember_MemberPrefix(context, (StateSubactionMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExitActionMemberRule()) {
					sequence_ExitActionMember_MemberPrefix(context, (StateSubactionMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.STATE_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()
						|| rule == grammarAccess.getStateUsageRule()) {
					sequence_ActionUsageParameterList_BasicUsagePrefix_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_StateBodyItem_StateUsageBody_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (StateUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (StateUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (StateUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SUBCLASSIFICATION:
				sequence_OwnedSubclassification(context, (Subclassification) semanticObject); 
				return; 
			case SysMLPackage.SUBJECT_MEMBERSHIP:
				if (rule == grammarAccess.getSubjectMemberRule()) {
					sequence_MemberPrefix_SubjectMember(context, (SubjectMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSatisfactionSubjectMemberRule()) {
					sequence_SatisfactionSubjectMember(context, (SubjectMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SUBSETTING:
				if (rule == grammarAccess.getItemFlowEndSubsettingRule()) {
					sequence_ItemFlowEndSubsetting(context, (Subsetting) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedSubsettingRule()) {
					sequence_OwnedSubsetting(context, (Subsetting) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SUCCESSION_AS_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getNonOccurrenceUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getSuccessionRule()
						|| rule == grammarAccess.getInterfaceNonOccurrenceUsageElementRule()) {
					sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_Succession_TypedBy_Typings_UsageExtensionKeyword(context, (SuccessionAsUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptySuccessionRule()) {
					sequence_EmptySuccession(context, (SuccessionAsUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionTargetSuccessionRule()
						|| rule == grammarAccess.getTargetSuccessionRule()) {
					sequence_TargetSuccession(context, (SuccessionAsUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTransitionSuccessionRule()) {
					sequence_TransitionSuccession(context, (SuccessionAsUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SUCCESSION_FLOW_CONNECTION_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getSuccessionFlowConnectionUsageRule()
						|| rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()) {
					sequence_BasicUsagePrefix_DefinitionBodyItem_FlowConnectionDeclaration_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(context, (SuccessionFlowConnectionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSourceItemFlowRule()) {
					sequence_SourceItemFlow(context, (SuccessionFlowConnectionUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.TARGET_END:
				sequence_EmptyTargetEnd(context, (TargetEnd) semanticObject); 
				return; 
			case SysMLPackage.TEXTUAL_REPRESENTATION:
				sequence_Identification_TextualRepresentation(context, (TextualRepresentation) semanticObject); 
				return; 
			case SysMLPackage.TRANSITION_FEATURE_MEMBERSHIP:
				if (rule == grammarAccess.getEffectBehaviorMemberRule()) {
					sequence_EffectBehaviorMember(context, (TransitionFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGuardExpressionMemberRule()) {
					sequence_GuardExpressionMember(context, (TransitionFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTriggerActionMemberRule()) {
					sequence_TriggerActionMember(context, (TransitionFeatureMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.TRANSITION_USAGE:
				if (rule == grammarAccess.getActionTargetSuccessionRule()) {
					sequence_DefaultTargetSuccession_GuardedTargetSuccession(context, (TransitionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDefaultTargetSuccessionRule()) {
					sequence_DefaultTargetSuccession(context, (TransitionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGuardedSuccessionRule()) {
					sequence_GuardedSuccession_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(context, (TransitionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGuardedTargetSuccessionRule()) {
					sequence_GuardedTargetSuccession(context, (TransitionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTransitionUsageRule()) {
					sequence_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TransitionUsage_TypedBy_Typings(context, (TransitionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTargetTransitionUsageRule()) {
					sequence_TargetTransitionUsage(context, (TransitionUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.TRIGGER_INVOCATION_EXPRESSION:
				sequence_TriggerExpression(context, (TriggerInvocationExpression) semanticObject); 
				return; 
			case SysMLPackage.USAGE:
				sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(context, (Usage) semanticObject); 
				return; 
			case SysMLPackage.USE_CASE_DEFINITION:
				if (rule == grammarAccess.getDefinitionElementRule()) {
					sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SubclassificationPart(context, (UseCaseDefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUseCaseDefinitionRule()) {
					sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SubclassificationPart(context, (UseCaseDefinition) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.USE_CASE_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (UseCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUseCaseUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (UseCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (UseCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (UseCaseUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.VARIANT_MEMBERSHIP:
				if (rule == grammarAccess.getEnumerationUsageMemberRule()) {
					sequence_EnumerationUsageMember_MemberPrefix(context, (VariantMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVariantUsageMemberRule()) {
					sequence_MemberPrefix_VariantUsageMember(context, (VariantMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.VERIFICATION_CASE_DEFINITION:
				if (rule == grammarAccess.getDefinitionElementRule()) {
					sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SubclassificationPart(context, (VerificationCaseDefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVerificationCaseDefinitionRule()) {
					sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SubclassificationPart(context, (VerificationCaseDefinition) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.VERIFICATION_CASE_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (VerificationCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVerificationCaseUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (VerificationCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (VerificationCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (VerificationCaseUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.VIEW_DEFINITION:
				sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_SubclassificationPart_ViewDefinitionBodyItem(context, (ViewDefinition) semanticObject); 
				return; 
			case SysMLPackage.VIEW_RENDERING_MEMBERSHIP:
				sequence_MemberPrefix_ViewRenderingMember(context, (ViewRenderingMembership) semanticObject); 
				return; 
			case SysMLPackage.VIEW_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()
						|| rule == grammarAccess.getViewUsageRule()) {
					sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart_ViewBodyItem(context, (ViewUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (ViewUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (ViewUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.VIEWPOINT_DEFINITION:
				sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_EmptyReturnParameterPart_Identification_OccurrenceDefinitionPrefix_ParameterList_RequirementBodyItem_SubclassificationPart(context, (ViewpointDefinition) semanticObject); 
				return; 
			case SysMLPackage.VIEWPOINT_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getInterfaceOccurrenceUsageElementRule()
						|| rule == grammarAccess.getViewpointUsageRule()) {
					sequence_ActionUsageParameterList_BasicUsagePrefix_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(context, (ViewpointUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (ViewpointUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (ViewpointUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.WHILE_LOOP_ACTION_USAGE:
				sequence_BasicUsagePrefix_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_WhileLoopNode(context, (WhileLoopActionUsage) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     TriggerAction returns AcceptActionUsage
	 *
	 * Constraint:
	 *     (ownedRelationship+=PayloadParameterMember (ownedRelationship+=NodeParameterMember | ownedRelationship+=EmptyParameterMember))
	 */
	protected void sequence_AcceptParameterPart(ISerializationContext context, AcceptActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns AcceptActionUsage
	 *     AcceptNode returns AcceptActionUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         ownedRelationship+=PayloadParameterMember 
	 *         (ownedRelationship+=NodeParameterMember | ownedRelationship+=EmptyParameterMember) 
	 *         ownedRelationship+=VariantUsageMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	 *                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	 *                 (
	 *                     ownedRelationship+=EmptySuccessionMember? 
	 *                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                     ownedRelationship+=TargetSuccessionMember*
	 *                 ) | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             ownedRelationship+=VariantUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_AcceptParameterPart_ActionBodyItem_BasicUsagePrefix_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(ISerializationContext context, AcceptActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateActionUsage returns AcceptActionUsage
	 *     EffectBehaviorUsage returns AcceptActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         ownedRelationship+=PayloadParameterMember 
	 *         (ownedRelationship+=NodeParameterMember | ownedRelationship+=EmptyParameterMember) 
	 *         ownedRelationship+=VariantUsageMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	 *                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	 *                 (
	 *                     ownedRelationship+=EmptySuccessionMember? 
	 *                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                     ownedRelationship+=TargetSuccessionMember*
	 *                 ) | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             ownedRelationship+=VariantUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_AcceptParameterPart_ActionBodyItem_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, AcceptActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PerformedActionUsage returns AcceptActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         ownedRelationship+=PayloadParameterMember 
	 *         (ownedRelationship+=NodeParameterMember | ownedRelationship+=EmptyParameterMember)
	 *     )
	 */
	protected void sequence_AcceptParameterPart_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, AcceptActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionBodyParameter returns ActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionBodyParameter_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, ActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns AssertConstraintUsage
	 *     OccurrenceUsageElement returns AssertConstraintUsage
	 *     BehaviorUsageElement returns AssertConstraintUsage
	 *     VariantUsageElement returns AssertConstraintUsage
	 *     InterfaceOccurrenceUsageElement returns AssertConstraintUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         isNegated?='not'? 
	 *         ((shortName=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *         ownedRelationship+=CalculationReturnParameterMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember?
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_AssertConstraintUsage_BasicUsagePrefix_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(ISerializationContext context, AssertConstraintUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     AssertConstraintUsage returns AssertConstraintUsage
	//
	// Constraint:
	//     (
	//         direction=FeatureDirection? 
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         isReadOnly?='readonly'? 
	//         isDerived?='derived'? 
	//         isEnd?='end'? 
	//         isReference?='ref'? 
	//         isIndividual?='individual'? 
	//         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	//         ownedRelationship+=PrefixMetadataMember? 
	//         isNegated?='not'? 
	//         ((shortName=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	//         (
	//             ownedRelationship+=OwnedMultiplicity | 
	//             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	//         )? 
	//         (
	//             (
	//                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	//                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//             ) 
	//             (
	//                 ownedRelationship+=OwnedMultiplicity | 
	//                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	//             )?
	//         )* 
	//         (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	//         ownedRelationship+=CalculationReturnParameterMember? 
	//         ownedRelationship+=Import? 
	//         (
	//             (
	//                 ownedRelationship+=AliasMember | 
	//                 ownedRelationship+=DefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember
	//             )? 
	//             ownedRelationship+=Import?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_ActionUsageParameterList_AssertConstraintUsage_BasicUsagePrefix_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(ISerializationContext context, AssertConstraintUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     UsageElement returns AnalysisCaseUsage
	 *     OccurrenceUsageElement returns AnalysisCaseUsage
	 *     BehaviorUsageElement returns AnalysisCaseUsage
	 *     VariantUsageElement returns AnalysisCaseUsage
	 *     InterfaceOccurrenceUsageElement returns AnalysisCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=ActorMember | 
	 *                 ownedRelationship+=ObjectiveMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember?
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, AnalysisCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     AnalysisCaseUsage returns AnalysisCaseUsage
	//
	// Constraint:
	//     (
	//         direction=FeatureDirection? 
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         isReadOnly?='readonly'? 
	//         isDerived?='derived'? 
	//         isEnd?='end'? 
	//         isReference?='ref'? 
	//         isIndividual?='individual'? 
	//         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	//         ownedRelationship+=PrefixMetadataMember? 
	//         ((shortName=Name name=Name?) | name=Name)? 
	//         (
	//             ownedRelationship+=OwnedMultiplicity | 
	//             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	//         )? 
	//         (
	//             (
	//                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	//                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//             ) 
	//             (
	//                 ownedRelationship+=OwnedMultiplicity | 
	//                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	//             )?
	//         )* 
	//         (
	//             ownedRelationship+=FeatureValue | 
	//             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	//             (
	//                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	//                 ownedRelationship+=CalculationReturnParameterMember?
	//             )
	//         )? 
	//         ownedRelationship+=Import? 
	//         (
	//             (
	//                 ownedRelationship+=AliasMember | 
	//                 ownedRelationship+=DefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	//                 ownedRelationship+=SubjectMember | 
	//                 ownedRelationship+=ActorMember | 
	//                 ownedRelationship+=ObjectiveMember
	//             )? 
	//             ownedRelationship+=Import?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, AnalysisCaseUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     UsageElement returns CaseUsage
	 *     OccurrenceUsageElement returns CaseUsage
	 *     BehaviorUsageElement returns CaseUsage
	 *     VariantUsageElement returns CaseUsage
	 *     InterfaceOccurrenceUsageElement returns CaseUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=ActorMember | 
	 *                 ownedRelationship+=ObjectiveMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember?
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, CaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     CaseUsage returns CaseUsage
	//
	// Constraint:
	//     (
	//         direction=FeatureDirection? 
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         isReadOnly?='readonly'? 
	//         isDerived?='derived'? 
	//         isEnd?='end'? 
	//         isReference?='ref'? 
	//         isIndividual?='individual'? 
	//         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	//         ownedRelationship+=PrefixMetadataMember? 
	//         ((shortName=Name name=Name?) | name=Name)? 
	//         (
	//             ownedRelationship+=OwnedMultiplicity | 
	//             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	//         )? 
	//         (
	//             (
	//                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	//                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//             ) 
	//             (
	//                 ownedRelationship+=OwnedMultiplicity | 
	//                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	//             )?
	//         )* 
	//         (
	//             ownedRelationship+=FeatureValue | 
	//             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	//             (
	//                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	//                 ownedRelationship+=CalculationReturnParameterMember?
	//             )
	//         )? 
	//         ownedRelationship+=Import? 
	//         (
	//             (
	//                 ownedRelationship+=AliasMember | 
	//                 ownedRelationship+=DefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	//                 ownedRelationship+=SubjectMember | 
	//                 ownedRelationship+=ActorMember | 
	//                 ownedRelationship+=ObjectiveMember
	//             )? 
	//             ownedRelationship+=Import?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, CaseUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     UsageElement returns UseCaseUsage
	 *     OccurrenceUsageElement returns UseCaseUsage
	 *     BehaviorUsageElement returns UseCaseUsage
	 *     VariantUsageElement returns UseCaseUsage
	 *     InterfaceOccurrenceUsageElement returns UseCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=ActorMember | 
	 *                 ownedRelationship+=ObjectiveMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember?
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, UseCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     UseCaseUsage returns UseCaseUsage
	//
	// Constraint:
	//     (
	//         direction=FeatureDirection? 
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         isReadOnly?='readonly'? 
	//         isDerived?='derived'? 
	//         isEnd?='end'? 
	//         isReference?='ref'? 
	//         isIndividual?='individual'? 
	//         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	//         ownedRelationship+=PrefixMetadataMember? 
	//         ((shortName=Name name=Name?) | name=Name)? 
	//         (
	//             ownedRelationship+=OwnedMultiplicity | 
	//             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	//         )? 
	//         (
	//             (
	//                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	//                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//             ) 
	//             (
	//                 ownedRelationship+=OwnedMultiplicity | 
	//                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	//             )?
	//         )* 
	//         (
	//             ownedRelationship+=FeatureValue | 
	//             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	//             (
	//                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	//                 ownedRelationship+=CalculationReturnParameterMember?
	//             )
	//         )? 
	//         ownedRelationship+=Import? 
	//         (
	//             (
	//                 ownedRelationship+=AliasMember | 
	//                 ownedRelationship+=DefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	//                 ownedRelationship+=SubjectMember | 
	//                 ownedRelationship+=ActorMember | 
	//                 ownedRelationship+=ObjectiveMember
	//             )? 
	//             ownedRelationship+=Import?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, UseCaseUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     UsageElement returns VerificationCaseUsage
	 *     OccurrenceUsageElement returns VerificationCaseUsage
	 *     BehaviorUsageElement returns VerificationCaseUsage
	 *     VariantUsageElement returns VerificationCaseUsage
	 *     InterfaceOccurrenceUsageElement returns VerificationCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=ActorMember | 
	 *                 ownedRelationship+=ObjectiveMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember?
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, VerificationCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     VerificationCaseUsage returns VerificationCaseUsage
	//
	// Constraint:
	//     (
	//         direction=FeatureDirection? 
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         isReadOnly?='readonly'? 
	//         isDerived?='derived'? 
	//         isEnd?='end'? 
	//         isReference?='ref'? 
	//         isIndividual?='individual'? 
	//         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	//         ownedRelationship+=PrefixMetadataMember? 
	//         ((shortName=Name name=Name?) | name=Name)? 
	//         (
	//             ownedRelationship+=OwnedMultiplicity | 
	//             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	//         )? 
	//         (
	//             (
	//                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	//                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//             ) 
	//             (
	//                 ownedRelationship+=OwnedMultiplicity | 
	//                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	//             )?
	//         )* 
	//         (
	//             ownedRelationship+=FeatureValue | 
	//             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	//             (
	//                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	//                 ownedRelationship+=CalculationReturnParameterMember?
	//             )
	//         )? 
	//         ownedRelationship+=Import? 
	//         (
	//             (
	//                 ownedRelationship+=AliasMember | 
	//                 ownedRelationship+=DefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	//                 ownedRelationship+=SubjectMember | 
	//                 ownedRelationship+=ActorMember | 
	//                 ownedRelationship+=ObjectiveMember
	//             )? 
	//             ownedRelationship+=Import?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, VerificationCaseUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     UsageElement returns IncludeUseCaseUsage
	 *     OccurrenceUsageElement returns IncludeUseCaseUsage
	 *     BehaviorUsageElement returns IncludeUseCaseUsage
	 *     VariantUsageElement returns IncludeUseCaseUsage
	 *     InterfaceOccurrenceUsageElement returns IncludeUseCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *             (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)
	 *         )? 
	 *         ownedRelationship+=ObjectiveMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	 *                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?) | 
	 *                 (
	 *                     ownedRelationship+=EmptySuccessionMember? 
	 *                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                     ownedRelationship+=TargetSuccessionMember?
	 *                 ) | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=ActorMember
	 *             )? 
	 *             ownedRelationship+=ObjectiveMember?
	 *         )* 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBodyItem_CaseBody_CaseBodyItem_Identification_IncludeUseCaseUsage_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, IncludeUseCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     IncludeUseCaseUsage returns IncludeUseCaseUsage
	//
	// Constraint:
	//     (
	//         direction=FeatureDirection? 
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         isReadOnly?='readonly'? 
	//         isDerived?='derived'? 
	//         isEnd?='end'? 
	//         isReference?='ref'? 
	//         isIndividual?='individual'? 
	//         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	//         ownedRelationship+=PrefixMetadataMember? 
	//         ((shortName=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	//         (
	//             ownedRelationship+=OwnedMultiplicity | 
	//             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	//         )? 
	//         (
	//             (
	//                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	//                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//             ) 
	//             (
	//                 ownedRelationship+=OwnedMultiplicity | 
	//                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	//             )?
	//         )* 
	//         (
	//             ownedRelationship+=FeatureValue | 
	//             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	//             (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)
	//         )? 
	//         ownedRelationship+=Import? 
	//         (
	//             (
	//                 ownedRelationship+=AliasMember | 
	//                 ownedRelationship+=DefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	//                 ownedRelationship+=SubjectMember | 
	//                 ownedRelationship+=ActorMember | 
	//                 ownedRelationship+=ObjectiveMember
	//             )? 
	//             ownedRelationship+=Import?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBodyItem_CaseBody_CaseBodyItem_Identification_IncludeUseCaseUsage_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, IncludeUseCaseUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     UsageElement returns CalculationUsage
	 *     OccurrenceUsageElement returns CalculationUsage
	 *     BehaviorUsageElement returns CalculationUsage
	 *     VariantUsageElement returns CalculationUsage
	 *     InterfaceOccurrenceUsageElement returns CalculationUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember?
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, CalculationUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     CalculationUsage returns CalculationUsage
	//
	// Constraint:
	//     (
	//         direction=FeatureDirection? 
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         isReadOnly?='readonly'? 
	//         isDerived?='derived'? 
	//         isEnd?='end'? 
	//         isReference?='ref'? 
	//         isIndividual?='individual'? 
	//         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	//         ownedRelationship+=PrefixMetadataMember? 
	//         ((shortName=Name name=Name?) | name=Name)? 
	//         (
	//             ownedRelationship+=OwnedMultiplicity | 
	//             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	//         )? 
	//         (
	//             (
	//                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	//                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//             ) 
	//             (
	//                 ownedRelationship+=OwnedMultiplicity | 
	//                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	//             )?
	//         )* 
	//         (
	//             ownedRelationship+=FeatureValue | 
	//             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	//             (
	//                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	//                 ownedRelationship+=CalculationReturnParameterMember?
	//             )
	//         )? 
	//         ownedRelationship+=Import? 
	//         (
	//             (
	//                 ownedRelationship+=AliasMember | 
	//                 ownedRelationship+=DefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember
	//             )? 
	//             ownedRelationship+=Import?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, CalculationUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     UsageElement returns ConstraintUsage
	 *     OccurrenceUsageElement returns ConstraintUsage
	 *     BehaviorUsageElement returns ConstraintUsage
	 *     VariantUsageElement returns ConstraintUsage
	 *     InterfaceOccurrenceUsageElement returns ConstraintUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember?
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, ConstraintUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     ConstraintUsage returns ConstraintUsage
	//
	// Constraint:
	//     (
	//         direction=FeatureDirection? 
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         isReadOnly?='readonly'? 
	//         isDerived?='derived'? 
	//         isEnd?='end'? 
	//         isReference?='ref'? 
	//         isIndividual?='individual'? 
	//         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	//         ownedRelationship+=PrefixMetadataMember? 
	//         ((shortName=Name name=Name?) | name=Name)? 
	//         (
	//             ownedRelationship+=OwnedMultiplicity | 
	//             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	//         )? 
	//         (
	//             (
	//                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	//                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//             ) 
	//             (
	//                 ownedRelationship+=OwnedMultiplicity | 
	//                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	//             )?
	//         )* 
	//         (
	//             ownedRelationship+=FeatureValue | 
	//             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	//             (
	//                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	//                 ownedRelationship+=CalculationReturnParameterMember?
	//             )
	//         )? 
	//         ownedRelationship+=Import? 
	//         (
	//             (
	//                 ownedRelationship+=AliasMember | 
	//                 ownedRelationship+=DefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember
	//             )? 
	//             ownedRelationship+=Import?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, ConstraintUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     UsageElement returns PerformActionUsage
	 *     OccurrenceUsageElement returns PerformActionUsage
	 *     BehaviorUsageElement returns PerformActionUsage
	 *     VariantUsageElement returns PerformActionUsage
	 *     InterfaceOccurrenceUsageElement returns PerformActionUsage
	 *     PerformActionUsage returns PerformActionUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *             (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)
	 *         )? 
	 *         ownedRelationship+=VariantUsageMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	 *                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	 *                 (
	 *                     ownedRelationship+=EmptySuccessionMember? 
	 *                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                     ownedRelationship+=TargetSuccessionMember*
	 *                 ) | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             ownedRelationship+=VariantUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_Identification_MultiplicityPart_OccurrenceUsagePrefix_PerformActionUsageDeclaration_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, PerformActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns ActionUsage
	 *     OccurrenceUsageElement returns ActionUsage
	 *     BehaviorUsageElement returns ActionUsage
	 *     VariantUsageElement returns ActionUsage
	 *     InterfaceOccurrenceUsageElement returns ActionUsage
	 *     ActionUsage returns ActionUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *             (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_BasicUsagePrefix_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, ActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FramedConcernUsage returns ConcernUsage
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (
	 *                 (shortName=Name name=Name?) | 
	 *                 name=Name | 
	 *                 (
	 *                     ownedRelationship+=OwnedSubsetting? 
	 *                     (
	 *                         (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     )
	 *                 )
	 *             )? 
	 *             (
	 *                 (
	 *                     ownedRelationship+=OwnedMultiplicity | 
	 *                     (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                 )? 
	 *                 (
	 *                     (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                     (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                     (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                 )
	 *             )* 
	 *             (
	 *                 (
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )? 
	 *                     (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                     ownedRelationship+=CalculationReturnParameterMember? 
	 *                     (
	 *                         (
	 *                             ownedRelationship+=DefinitionMember | 
	 *                             ownedRelationship+=VariantUsageMember | 
	 *                             ownedRelationship+=NonOccurrenceUsageMember | 
	 *                             ownedRelationship+=AliasMember | 
	 *                             ownedRelationship+=Import | 
	 *                             ownedRelationship+=SubjectMember | 
	 *                             ownedRelationship+=RequirementConstraintMember | 
	 *                             ownedRelationship+=FramedConcernMember | 
	 *                             ownedRelationship+=RequirementVerificationMember | 
	 *                             ownedRelationship+=ActorMember | 
	 *                             ownedRelationship+=StakeholderMember
	 *                         )? 
	 *                         (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *                     )+
	 *                 ) | 
	 *                 (
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )? 
	 *                     (
	 *                         ownedRelationship+=FeatureValue | 
	 *                         (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *                         (
	 *                             (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                             ownedRelationship+=CalculationReturnParameterMember?
	 *                         )
	 *                     )? 
	 *                     (
	 *                         (
	 *                             ownedRelationship+=Import | 
	 *                             ownedRelationship+=AliasMember | 
	 *                             ownedRelationship+=DefinitionMember | 
	 *                             ownedRelationship+=VariantUsageMember | 
	 *                             ownedRelationship+=NonOccurrenceUsageMember | 
	 *                             ownedRelationship+=GuardedSuccessionMember | 
	 *                             ownedRelationship+=ReturnParameterFlowUsageMember
	 *                         )? 
	 *                         (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	 *                         (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *                         (
	 *                             ownedRelationship+=EmptySuccessionMember? 
	 *                             (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                             ownedRelationship+=TargetSuccessionMember*
	 *                         )?
	 *                     )+ 
	 *                     ownedRelationship+=ResultExpressionMember?
	 *                 )
	 *             )
	 *         ) | 
	 *         (
	 *             ownedRelationship+=OwnedSubsetting? 
	 *             (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *             ownedRelationship+=CalculationReturnParameterMember? 
	 *             (
	 *                 (
	 *                     ownedRelationship+=DefinitionMember | 
	 *                     ownedRelationship+=VariantUsageMember | 
	 *                     ownedRelationship+=NonOccurrenceUsageMember | 
	 *                     ownedRelationship+=AliasMember | 
	 *                     ownedRelationship+=Import | 
	 *                     ownedRelationship+=SubjectMember | 
	 *                     ownedRelationship+=RequirementConstraintMember | 
	 *                     ownedRelationship+=FramedConcernMember | 
	 *                     ownedRelationship+=RequirementVerificationMember | 
	 *                     ownedRelationship+=ActorMember | 
	 *                     ownedRelationship+=StakeholderMember
	 *                 )? 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *             )+
	 *         ) | 
	 *         (
	 *             ownedRelationship+=OwnedSubsetting? 
	 *             (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *             ownedRelationship+=CalculationReturnParameterMember? 
	 *             (
	 *                 (
	 *                     ownedRelationship+=Import | 
	 *                     ownedRelationship+=AliasMember | 
	 *                     ownedRelationship+=DefinitionMember | 
	 *                     ownedRelationship+=VariantUsageMember | 
	 *                     ownedRelationship+=NonOccurrenceUsageMember | 
	 *                     ownedRelationship+=GuardedSuccessionMember | 
	 *                     ownedRelationship+=ReturnParameterFlowUsageMember
	 *                 )? 
	 *                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *                 (
	 *                     ownedRelationship+=EmptySuccessionMember? 
	 *                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                     ownedRelationship+=TargetSuccessionMember*
	 *                 )?
	 *             )+ 
	 *             ownedRelationship+=ResultExpressionMember?
	 *         )
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_DefinitionBodyItem_FramedConcernUsage_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, ConcernUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RequirementConstraintUsage returns ConstraintUsage
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (
	 *                 (shortName=Name name=Name?) | 
	 *                 name=Name | 
	 *                 (
	 *                     ownedRelationship+=OwnedSubsetting? 
	 *                     (
	 *                         (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     )
	 *                 )
	 *             )? 
	 *             (
	 *                 (
	 *                     ownedRelationship+=OwnedMultiplicity | 
	 *                     (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                 )? 
	 *                 (
	 *                     (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                     (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                     (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                 )
	 *             )* 
	 *             (
	 *                 (
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )? 
	 *                     (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                     ownedRelationship+=CalculationReturnParameterMember? 
	 *                     (
	 *                         (
	 *                             ownedRelationship+=DefinitionMember | 
	 *                             ownedRelationship+=VariantUsageMember | 
	 *                             ownedRelationship+=NonOccurrenceUsageMember | 
	 *                             ownedRelationship+=AliasMember | 
	 *                             ownedRelationship+=Import | 
	 *                             ownedRelationship+=SubjectMember | 
	 *                             ownedRelationship+=RequirementConstraintMember | 
	 *                             ownedRelationship+=FramedConcernMember | 
	 *                             ownedRelationship+=RequirementVerificationMember | 
	 *                             ownedRelationship+=ActorMember | 
	 *                             ownedRelationship+=StakeholderMember
	 *                         )? 
	 *                         (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *                     )+
	 *                 ) | 
	 *                 (
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )? 
	 *                     (
	 *                         ownedRelationship+=FeatureValue | 
	 *                         (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *                         (
	 *                             (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                             ownedRelationship+=CalculationReturnParameterMember?
	 *                         )
	 *                     )? 
	 *                     (
	 *                         (
	 *                             ownedRelationship+=Import | 
	 *                             ownedRelationship+=AliasMember | 
	 *                             ownedRelationship+=DefinitionMember | 
	 *                             ownedRelationship+=VariantUsageMember | 
	 *                             ownedRelationship+=NonOccurrenceUsageMember | 
	 *                             ownedRelationship+=GuardedSuccessionMember | 
	 *                             ownedRelationship+=ReturnParameterFlowUsageMember
	 *                         )? 
	 *                         (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	 *                         (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *                         (
	 *                             ownedRelationship+=EmptySuccessionMember? 
	 *                             (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                             ownedRelationship+=TargetSuccessionMember*
	 *                         )?
	 *                     )+ 
	 *                     ownedRelationship+=ResultExpressionMember?
	 *                 )
	 *             )
	 *         ) | 
	 *         (
	 *             ownedRelationship+=OwnedSubsetting? 
	 *             (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *             ownedRelationship+=CalculationReturnParameterMember? 
	 *             (
	 *                 (
	 *                     ownedRelationship+=DefinitionMember | 
	 *                     ownedRelationship+=VariantUsageMember | 
	 *                     ownedRelationship+=NonOccurrenceUsageMember | 
	 *                     ownedRelationship+=AliasMember | 
	 *                     ownedRelationship+=Import | 
	 *                     ownedRelationship+=SubjectMember | 
	 *                     ownedRelationship+=RequirementConstraintMember | 
	 *                     ownedRelationship+=FramedConcernMember | 
	 *                     ownedRelationship+=RequirementVerificationMember | 
	 *                     ownedRelationship+=ActorMember | 
	 *                     ownedRelationship+=StakeholderMember
	 *                 )? 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *             )+
	 *         ) | 
	 *         (
	 *             ownedRelationship+=OwnedSubsetting? 
	 *             (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *             ownedRelationship+=CalculationReturnParameterMember? 
	 *             (
	 *                 (
	 *                     ownedRelationship+=Import | 
	 *                     ownedRelationship+=AliasMember | 
	 *                     ownedRelationship+=DefinitionMember | 
	 *                     ownedRelationship+=VariantUsageMember | 
	 *                     ownedRelationship+=NonOccurrenceUsageMember | 
	 *                     ownedRelationship+=GuardedSuccessionMember | 
	 *                     ownedRelationship+=ReturnParameterFlowUsageMember
	 *                 )? 
	 *                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *                 (
	 *                     ownedRelationship+=EmptySuccessionMember? 
	 *                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                     ownedRelationship+=TargetSuccessionMember*
	 *                 )?
	 *             )+ 
	 *             ownedRelationship+=ResultExpressionMember?
	 *         )
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_RequirementConstraintUsage_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, ConstraintUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateActionUsage returns PerformActionUsage
	 *     EffectBehaviorUsage returns PerformActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((shortName=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *             (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)
	 *         )? 
	 *         ownedRelationship+=VariantUsageMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	 *                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	 *                 (
	 *                     ownedRelationship+=EmptySuccessionMember? 
	 *                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                     ownedRelationship+=TargetSuccessionMember*
	 *                 ) | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             ownedRelationship+=VariantUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_Identification_MultiplicityPart_PerformActionUsageDeclaration_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, PerformActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns AssignmentActionUsage
	 *     AssignmentNode returns AssignmentActionUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         ownedRelationship+=AssignmentTargetMember 
	 *         ownedRelationship+=FeatureChainMember 
	 *         ownedRelationship+=NodeParameterMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionBodyItem_AssignmentNodeDeclaration_BasicUsagePrefix_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(ISerializationContext context, AssignmentActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateActionUsage returns AssignmentActionUsage
	 *     EffectBehaviorUsage returns AssignmentActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         ownedRelationship+=AssignmentTargetMember 
	 *         ownedRelationship+=FeatureChainMember 
	 *         ownedRelationship+=NodeParameterMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionBodyItem_AssignmentNodeDeclaration_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, AssignmentActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns AnalysisCaseDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         ownedRelationship+=ReturnParameterMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=ActorMember | 
	 *                 ownedRelationship+=ObjectiveMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember?
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SubclassificationPart(ISerializationContext context, AnalysisCaseDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     AnalysisCaseDefinition returns AnalysisCaseDefinition
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	//         ownedRelationship+=PrefixMetadataMember? 
	//         ((shortName=Name name=Name?) | name=Name)? 
	//         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	//         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	//         ownedRelationship+=ReturnParameterMember? 
	//         ownedRelationship+=Import? 
	//         (
	//             (
	//                 ownedRelationship+=AliasMember | 
	//                 ownedRelationship+=DefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	//                 ownedRelationship+=SubjectMember | 
	//                 ownedRelationship+=ActorMember | 
	//                 ownedRelationship+=ObjectiveMember
	//             )? 
	//             ownedRelationship+=Import?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SubclassificationPart(ISerializationContext context, AnalysisCaseDefinition semanticObject) { }
	
	/**
	 * Contexts:
	 *     DefinitionElement returns CaseDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         ownedRelationship+=ReturnParameterMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=ActorMember | 
	 *                 ownedRelationship+=ObjectiveMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember?
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SubclassificationPart(ISerializationContext context, CaseDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     CaseDefinition returns CaseDefinition
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	//         ownedRelationship+=PrefixMetadataMember? 
	//         ((shortName=Name name=Name?) | name=Name)? 
	//         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	//         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	//         ownedRelationship+=ReturnParameterMember? 
	//         ownedRelationship+=Import? 
	//         (
	//             (
	//                 ownedRelationship+=AliasMember | 
	//                 ownedRelationship+=DefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	//                 ownedRelationship+=SubjectMember | 
	//                 ownedRelationship+=ActorMember | 
	//                 ownedRelationship+=ObjectiveMember
	//             )? 
	//             ownedRelationship+=Import?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SubclassificationPart(ISerializationContext context, CaseDefinition semanticObject) { }
	
	/**
	 * Contexts:
	 *     DefinitionElement returns UseCaseDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         ownedRelationship+=ReturnParameterMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=ActorMember | 
	 *                 ownedRelationship+=ObjectiveMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember?
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SubclassificationPart(ISerializationContext context, UseCaseDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     UseCaseDefinition returns UseCaseDefinition
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	//         ownedRelationship+=PrefixMetadataMember? 
	//         ((shortName=Name name=Name?) | name=Name)? 
	//         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	//         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	//         ownedRelationship+=ReturnParameterMember? 
	//         ownedRelationship+=Import? 
	//         (
	//             (
	//                 ownedRelationship+=AliasMember | 
	//                 ownedRelationship+=DefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	//                 ownedRelationship+=SubjectMember | 
	//                 ownedRelationship+=ActorMember | 
	//                 ownedRelationship+=ObjectiveMember
	//             )? 
	//             ownedRelationship+=Import?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SubclassificationPart(ISerializationContext context, UseCaseDefinition semanticObject) { }
	
	/**
	 * Contexts:
	 *     DefinitionElement returns VerificationCaseDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         ownedRelationship+=ReturnParameterMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=ActorMember | 
	 *                 ownedRelationship+=ObjectiveMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember?
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SubclassificationPart(ISerializationContext context, VerificationCaseDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     VerificationCaseDefinition returns VerificationCaseDefinition
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	//         ownedRelationship+=PrefixMetadataMember? 
	//         ((shortName=Name name=Name?) | name=Name)? 
	//         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	//         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	//         ownedRelationship+=ReturnParameterMember? 
	//         ownedRelationship+=Import? 
	//         (
	//             (
	//                 ownedRelationship+=AliasMember | 
	//                 ownedRelationship+=DefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	//                 ownedRelationship+=SubjectMember | 
	//                 ownedRelationship+=ActorMember | 
	//                 ownedRelationship+=ObjectiveMember
	//             )? 
	//             ownedRelationship+=Import?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SubclassificationPart(ISerializationContext context, VerificationCaseDefinition semanticObject) { }
	
	/**
	 * Contexts:
	 *     DefinitionElement returns CalculationDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         ownedRelationship+=ReturnParameterMember? 
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         ownedRelationship+=Import | 
	 *                         ownedRelationship+=AliasMember | 
	 *                         ownedRelationship+=DefinitionMember | 
	 *                         ownedRelationship+=VariantUsageMember | 
	 *                         ownedRelationship+=NonOccurrenceUsageMember | 
	 *                         ownedRelationship+=GuardedSuccessionMember | 
	 *                         ownedRelationship+=ReturnParameterFlowUsageMember
	 *                     )? 
	 *                     (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *                     (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *                     (
	 *                         ownedRelationship+=EmptySuccessionMember? 
	 *                         (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                         ownedRelationship+=TargetSuccessionMember?
	 *                     )?
	 *                 )+ 
	 *                 ownedRelationship+=ResultExpressionMember?
	 *             ) | 
	 *             ownedRelationship+=ResultExpressionMember
	 *         )?
	 *     )
	 */
	protected void sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBody_CalculationBodyItem_CalculationDefinition_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SubclassificationPart(ISerializationContext context, CalculationDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     CalculationDefinition returns CalculationDefinition
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	//         ownedRelationship+=PrefixMetadataMember? 
	//         ((shortName=Name name=Name?) | name=Name)? 
	//         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	//         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	//         ownedRelationship+=ReturnParameterMember? 
	//         (
	//             (
	//                 ownedRelationship+=Import? 
	//                 (
	//                     (
	//                         ownedRelationship+=AliasMember | 
	//                         ownedRelationship+=DefinitionMember | 
	//                         ownedRelationship+=VariantUsageMember | 
	//                         ownedRelationship+=NonOccurrenceUsageMember | 
	//                         (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                         (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                         (
	//                             ownedRelationship+=EmptySuccessionMember? 
	//                             (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                             ownedRelationship+=TargetSuccessionMember*
	//                         ) | 
	//                         ownedRelationship+=GuardedSuccessionMember | 
	//                         ownedRelationship+=ReturnParameterFlowUsageMember
	//                     )? 
	//                     ownedRelationship+=Import?
	//                 )* 
	//                 ownedRelationship+=ResultExpressionMember?
	//             ) | 
	//             ownedRelationship+=ResultExpressionMember
	//         )?
	//     )
	//
	// protected void sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBody_CalculationBodyItem_CalculationDefinition_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SubclassificationPart(ISerializationContext context, CalculationDefinition semanticObject) { }
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ConstraintDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         ownedRelationship+=EmptyReturnParameterMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember?
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBody_CalculationBodyItem_DefinitionExtensionKeyword_EmptyReturnParameterPart_Identification_OccurrenceDefinitionPrefix_ParameterList_SubclassificationPart(ISerializationContext context, ConstraintDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     ConstraintDefinition returns ConstraintDefinition
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	//         ownedRelationship+=PrefixMetadataMember? 
	//         ((shortName=Name name=Name?) | name=Name)? 
	//         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	//         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	//         ownedRelationship+=EmptyReturnParameterMember 
	//         (
	//             (
	//                 ownedRelationship+=Import | 
	//                 ownedRelationship+=AliasMember | 
	//                 ownedRelationship+=DefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember
	//             )? 
	//             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	//             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	//             (
	//                 ownedRelationship+=EmptySuccessionMember? 
	//                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                 ownedRelationship+=TargetSuccessionMember*
	//             )?
	//         )+ 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_BasicDefinitionPrefix_CalculationBody_CalculationBodyItem_DefinitionExtensionKeyword_EmptyReturnParameterPart_Identification_OccurrenceDefinitionPrefix_ParameterList_SubclassificationPart(ISerializationContext context, ConstraintDefinition semanticObject) { }
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ActionDefinition
	 *     ActionDefinition returns ActionDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionBodyItem_BasicDefinitionPrefix_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_SubclassificationPart(ISerializationContext context, ActionDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns SendActionUsage
	 *     SendNode returns SendActionUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         ownedRelationship+=NodeParameterMember 
	 *         ownedRelationship+=NodeParameterMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionBodyItem_BasicUsagePrefix_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_SendNodeDeclaration_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(ISerializationContext context, SendActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpressionBody returns Expression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_CalculationBody_CalculationBodyItem(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateActionUsage returns SendActionUsage
	 *     EffectBehaviorUsage returns SendActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         ownedRelationship+=NodeParameterMember 
	 *         ownedRelationship+=NodeParameterMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionBodyItem_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_SendNodeDeclaration_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, SendActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionBodyParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=ActionBodyParameter
	 */
	protected void sequence_ActionBodyParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNodeMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? ownedRelatedElement+=ActionNode)
	 */
	protected void sequence_ActionNodeMember_MemberPrefix(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns ConcernUsage
	 *     OccurrenceUsageElement returns ConcernUsage
	 *     BehaviorUsageElement returns ConcernUsage
	 *     VariantUsageElement returns ConcernUsage
	 *     InterfaceOccurrenceUsageElement returns ConcernUsage
	 *     ConcernUsage returns ConcernUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=RequirementConstraintMember | 
	 *                 ownedRelationship+=FramedConcernMember | 
	 *                 ownedRelationship+=RequirementVerificationMember | 
	 *                 ownedRelationship+=ActorMember | 
	 *                 ownedRelationship+=StakeholderMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_BasicUsagePrefix_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, ConcernUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns RequirementUsage
	 *     OccurrenceUsageElement returns RequirementUsage
	 *     BehaviorUsageElement returns RequirementUsage
	 *     VariantUsageElement returns RequirementUsage
	 *     InterfaceOccurrenceUsageElement returns RequirementUsage
	 *     RequirementUsage returns RequirementUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=RequirementConstraintMember | 
	 *                 ownedRelationship+=FramedConcernMember | 
	 *                 ownedRelationship+=RequirementVerificationMember | 
	 *                 ownedRelationship+=ActorMember | 
	 *                 ownedRelationship+=StakeholderMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_BasicUsagePrefix_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, RequirementUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns ViewpointUsage
	 *     OccurrenceUsageElement returns ViewpointUsage
	 *     BehaviorUsageElement returns ViewpointUsage
	 *     VariantUsageElement returns ViewpointUsage
	 *     InterfaceOccurrenceUsageElement returns ViewpointUsage
	 *     ViewpointUsage returns ViewpointUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=RequirementConstraintMember | 
	 *                 ownedRelationship+=FramedConcernMember | 
	 *                 ownedRelationship+=RequirementVerificationMember | 
	 *                 ownedRelationship+=ActorMember | 
	 *                 ownedRelationship+=StakeholderMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_BasicUsagePrefix_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, ViewpointUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns SatisfyRequirementUsage
	 *     OccurrenceUsageElement returns SatisfyRequirementUsage
	 *     BehaviorUsageElement returns SatisfyRequirementUsage
	 *     VariantUsageElement returns SatisfyRequirementUsage
	 *     InterfaceOccurrenceUsageElement returns SatisfyRequirementUsage
	 *     SatisfyRequirementUsage returns SatisfyRequirementUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         isNegated?='not'? 
	 *         ((shortName=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *             (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)
	 *         )? 
	 *         ownedRelationship+=SatisfactionSubjectMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=RequirementConstraintMember | 
	 *                 ownedRelationship+=FramedConcernMember | 
	 *                 ownedRelationship+=RequirementVerificationMember | 
	 *                 ownedRelationship+=ActorMember | 
	 *                 ownedRelationship+=StakeholderMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_RequirementBodyItem_SatisfyRequirementUsage_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, SatisfyRequirementUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns ExhibitStateUsage
	 *     OccurrenceUsageElement returns ExhibitStateUsage
	 *     BehaviorUsageElement returns ExhibitStateUsage
	 *     VariantUsageElement returns ExhibitStateUsage
	 *     InterfaceOccurrenceUsageElement returns ExhibitStateUsage
	 *     ExhibitStateUsage returns ExhibitStateUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *             (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)
	 *         )? 
	 *         isParallel?='parallel'? 
	 *         ownedRelationship+=DoActionMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=BehaviorUsageMember ownedRelationship+=TargetTransitionUsageMember*) | 
	 *                 ownedRelationship+=TransitionUsageMember | 
	 *                 (ownedRelationship+=EntryActionMember ownedRelationship+=EntryTransitionMember*) | 
	 *                 ownedRelationship+=ExitActionMember
	 *             )? 
	 *             ownedRelationship+=DoActionMember?
	 *         )*
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_BasicUsagePrefix_ExhibitStateUsage_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_StateBodyItem_StateUsageBody_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, ExhibitStateUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns StateUsage
	 *     OccurrenceUsageElement returns StateUsage
	 *     BehaviorUsageElement returns StateUsage
	 *     VariantUsageElement returns StateUsage
	 *     InterfaceOccurrenceUsageElement returns StateUsage
	 *     StateUsage returns StateUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *             (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)
	 *         )? 
	 *         isParallel?='parallel'? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=TransitionUsageMember | 
	 *                 ownedRelationship+=DoActionMember | 
	 *                 ownedRelationship+=ExitActionMember
	 *             )? 
	 *             (ownedRelationship+=EntryActionMember ownedRelationship+=EntryTransitionMember*)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=BehaviorUsageMember ownedRelationship+=TargetTransitionUsageMember*)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_BasicUsagePrefix_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_StateBodyItem_StateUsageBody_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, StateUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RequirementVerificationUsage returns RequirementUsage
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (
	 *                 (
	 *                     (shortName=Name name=Name?) | 
	 *                     name=Name | 
	 *                     (
	 *                         ownedRelationship+=OwnedSubsetting? 
	 *                         (
	 *                             (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                         )
	 *                     )
	 *                 )? 
	 *                 (
	 *                     ownedRelationship+=OwnedMultiplicity | 
	 *                     (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                 )? 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     ) 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )?
	 *                 )* 
	 *                 (
	 *                     ownedRelationship+=FeatureValue | 
	 *                     (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *                     (
	 *                         (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                         ownedRelationship+=CalculationReturnParameterMember?
	 *                     )
	 *                 )?
	 *             ) | 
	 *             (
	 *                 ownedRelationship+=OwnedSubsetting? 
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         ) 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=RequirementConstraintMember | 
	 *                 ownedRelationship+=FramedConcernMember | 
	 *                 ownedRelationship+=RequirementVerificationMember | 
	 *                 ownedRelationship+=ActorMember | 
	 *                 ownedRelationship+=StakeholderMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_RequirementVerificationUsage_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, RequirementUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjectiveRequirementUsage returns RequirementUsage
	 *
	 * Constraint:
	 *     (
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=RequirementConstraintMember | 
	 *                 ownedRelationship+=FramedConcernMember | 
	 *                 ownedRelationship+=RequirementVerificationMember | 
	 *                 ownedRelationship+=ActorMember | 
	 *                 ownedRelationship+=StakeholderMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, RequirementUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PerformedActionUsage returns PerformActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((shortName=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *             (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)
	 *         )?
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_Identification_MultiplicityPart_PerformActionUsageDeclaration_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, PerformActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=ActionUsageParameter
	 */
	protected void sequence_ActionUsageParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns ReferenceUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )?
	 *     )
	 */
	protected void sequence_ActionUsageParameter_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActorMember returns ActorMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? ownedRelatedElement+=ActorUsage)
	 */
	protected void sequence_ActorMember_MemberPrefix(ISerializationContext context, ActorMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetExpression returns OperatorExpression
	 *     TargetExpression.FeatureChainExpression_1_0_0 returns OperatorExpression
	 *     TargetExpression.OperatorExpression_1_1_0_0 returns OperatorExpression
	 *     TargetExpression.OperatorExpression_1_1_1_0 returns OperatorExpression
	 *     TargetExpression.CollectExpression_1_1_2_0 returns OperatorExpression
	 *     TargetExpression.SelectExpression_1_1_3_0 returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (operand+=TargetExpression_OperatorExpression_1_1_0_0 operator='[' operand+=SequenceExpression) | 
	 *         (
	 *             operand+=TargetExpression_OperatorExpression_1_1_1_0 
	 *             ownedRelationship+=ReferenceTyping 
	 *             (ownedRelationship+=ExpressionBodyMember | ownedRelationship+=FunctionReferenceMember)?
	 *         ) | 
	 *         (
	 *             (
	 *                 (operand+=TargetExpression_OperatorExpression_1_1_1_0 ownedRelationship+=ReferenceTyping) | 
	 *                 (operand+=PrimaryExpression_OperatorExpression_2_0_1_0 ownedRelationship+=ReferenceTyping)
	 *             ) 
	 *             (
	 *                 (ownedRelationship+=ArgumentMember ownedRelationship+=ArgumentMember*) | 
	 *                 (ownedRelationship+=NamedArgumentMember ownedRelationship+=NamedArgumentMember*)
	 *             )
	 *         ) | 
	 *         (
	 *             operand+=ConditionalExpression_OperatorExpression_0_1_0 
	 *             operator=ConditionalOperator 
	 *             operand+=OwnedExpressionReference 
	 *             operand+=OwnedExpressionReference
	 *         ) | 
	 *         (operand+=NullCoalescingExpression operator=ConditionalOperator operand+=OwnedExpressionReference operand+=OwnedExpressionReference) | 
	 *         (operand+=NullCoalescingExpression_OperatorExpression_1_0 operator=NullCoalescingOperator operand+=ImpliesExpressionReference) | 
	 *         (operand+=ImpliesExpression_OperatorExpression_1_0 operator=ImpliesOperator operand+=OrExpressionReference) | 
	 *         (
	 *             operand+=OrExpression_OperatorExpression_1_0 
	 *             ((operator=OrOperator operand+=XorExpression) | (operator=ConditionalOrOperator operand+=XorExpressionReference))
	 *         ) | 
	 *         (operand+=XorExpression_OperatorExpression_1_0 operator=XorOperator operand+=AndExpression) | 
	 *         (
	 *             operand+=AndExpression_OperatorExpression_1_0 
	 *             ((operator=AndOperator operand+=EqualityExpression) | (operator=ConditionalAndOperator operand+=EqualityExpressionReference))
	 *         ) | 
	 *         (operand+=EqualityExpression_OperatorExpression_1_0 operator=EqualityOperator operand+=ClassificationExpression) | 
	 *         (operand+=ClassificationExpression_OperatorExpression_0_1_0 operator=ClassificationOperator ownedRelationship+=TypeReferenceMember) | 
	 *         (operand+=SelfReferenceExpression operator=ClassificationOperator ownedRelationship+=TypeReferenceMember) | 
	 *         (operand+=RelationalExpression_OperatorExpression_1_0 operator=RelationalOperator operand+=RangeExpression) | 
	 *         (operand+=RangeExpression_OperatorExpression_1_0 operator='..' operand+=AdditiveExpression) | 
	 *         (operand+=AdditiveExpression_OperatorExpression_1_0 operator=AdditiveOperator operand+=MultiplicativeExpression) | 
	 *         (operand+=MultiplicativeExpression_OperatorExpression_1_0 operator=MultiplicativeOperator operand+=ExponentiationExpression) | 
	 *         (operand+=ExponentiationExpression_OperatorExpression_1_0 operator=ExponentiationOperator operand+=UnaryExpression) | 
	 *         (operator=UnaryOperator operand+=ExtentExpression) | 
	 *         (operator='all' ownedRelationship+=TypeReferenceMember) | 
	 *         (operand+=PrimaryExpression_OperatorExpression_2_0_0_0 operator='[' operand+=SequenceExpression) | 
	 *         (
	 *             operand+=PrimaryExpression_OperatorExpression_2_0_1_0 
	 *             ownedRelationship+=ReferenceTyping 
	 *             (operand+=BodyExpression | operand+=FunctionReferenceExpression)?
	 *         ) | 
	 *         (operand+=SequenceExpression_OperatorExpression_1_1_0 operator=',' operand+=SequenceExpression)
	 *     )
	 */
	protected void sequence_AdditiveExpression_AndExpression_ClassificationExpression_ConditionalExpression_EqualityExpression_ExponentiationExpression_ExtentExpression_ImpliesExpression_MultiplicativeExpression_NamedArgumentList_NullCoalescingExpression_OrExpression_PositionalArgumentList_PrimaryExpression_RangeExpression_RelationalExpression_SequenceExpression_TargetExpression_UnaryExpression_XorExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AliasMember returns Membership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? memberShortName=Name? memberName=Name? memberElement=[Element|QualifiedName])
	 */
	protected void sequence_AliasMember_MemberPrefix(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AnnotatingMember returns OwningMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=AnnotatingElement
	 */
	protected void sequence_AnnotatingMember(ISerializationContext context, OwningMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Annotation returns Annotation
	 *
	 * Constraint:
	 *     annotatedElement=[Element|QualifiedName]
	 */
	protected void sequence_Annotation(ISerializationContext context, Annotation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.ANNOTATION__ANNOTATED_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.ANNOTATION__ANNOTATED_ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnnotationAccess().getAnnotatedElementElementQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.ANNOTATION__ANNOTATED_ELEMENT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PerformedActionUsage returns AssignmentActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         ownedRelationship+=AssignmentTargetMember 
	 *         ownedRelationship+=FeatureChainMember 
	 *         ownedRelationship+=NodeParameterMember
	 *     )
	 */
	protected void sequence_AssignmentNodeDeclaration_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, AssignmentActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AssignmentTargetMember returns ParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=TargetParameter
	 */
	protected void sequence_AssignmentTargetMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ConcernDefinition
	 *     ConcernDefinition returns ConcernDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         ownedRelationship+=EmptyReturnParameterMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=RequirementConstraintMember | 
	 *                 ownedRelationship+=FramedConcernMember | 
	 *                 ownedRelationship+=RequirementVerificationMember | 
	 *                 ownedRelationship+=ActorMember | 
	 *                 ownedRelationship+=StakeholderMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_EmptyReturnParameterPart_Identification_OccurrenceDefinitionPrefix_ParameterList_RequirementBodyItem_SubclassificationPart(ISerializationContext context, ConcernDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns RequirementDefinition
	 *     RequirementDefinition returns RequirementDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         ownedRelationship+=EmptyReturnParameterMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=RequirementConstraintMember | 
	 *                 ownedRelationship+=FramedConcernMember | 
	 *                 ownedRelationship+=RequirementVerificationMember | 
	 *                 ownedRelationship+=ActorMember | 
	 *                 ownedRelationship+=StakeholderMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_EmptyReturnParameterPart_Identification_OccurrenceDefinitionPrefix_ParameterList_RequirementBodyItem_SubclassificationPart(ISerializationContext context, RequirementDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ViewpointDefinition
	 *     ViewpointDefinition returns ViewpointDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         ownedRelationship+=EmptyReturnParameterMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=RequirementConstraintMember | 
	 *                 ownedRelationship+=FramedConcernMember | 
	 *                 ownedRelationship+=RequirementVerificationMember | 
	 *                 ownedRelationship+=ActorMember | 
	 *                 ownedRelationship+=StakeholderMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_EmptyReturnParameterPart_Identification_OccurrenceDefinitionPrefix_ParameterList_RequirementBodyItem_SubclassificationPart(ISerializationContext context, ViewpointDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns OccurrenceDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((isIndividual?='individual' ownedRelationship+=LifeClassMembership) | isIndividual?='individual')? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+ 
	 *         ownedRelationship+=LifeClassMembership?
	 *     )
	 */
	protected void sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_IndividualDefinition_OccurrenceDefinitionPrefix_SubclassificationPart(ISerializationContext context, OccurrenceDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IndividualDefinition returns OccurrenceDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual' 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+ 
	 *         ownedRelationship+=LifeClassMembership
	 *     )
	 */
	protected void sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_IndividualDefinition_SubclassificationPart(ISerializationContext context, OccurrenceDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns AllocationDefinition
	 *     AllocationDefinition returns AllocationDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_SubclassificationPart(ISerializationContext context, AllocationDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ConnectionDefinition
	 *     ConnectionDefinition returns ConnectionDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_SubclassificationPart(ISerializationContext context, ConnectionDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ItemDefinition
	 *     ItemDefinition returns ItemDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_SubclassificationPart(ISerializationContext context, ItemDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OccurrenceDefinition returns OccurrenceDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_SubclassificationPart(ISerializationContext context, OccurrenceDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns PartDefinition
	 *     PartDefinition returns PartDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_SubclassificationPart(ISerializationContext context, PartDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns RenderingDefinition
	 *     RenderingDefinition returns RenderingDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_SubclassificationPart(ISerializationContext context, RenderingDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ViewDefinition
	 *     ViewDefinition returns ViewDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=ElementFilterMember | 
	 *                 ownedRelationship+=ViewRenderingMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_SubclassificationPart_ViewDefinitionBodyItem(ISerializationContext context, ViewDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns PortDefinition
	 *     PortDefinition returns PortDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+ 
	 *         ownedRelationship+=ConjugatedPortDefinitionMember
	 *     )
	 */
	protected void sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_PortDefinition_SubclassificationPart(ISerializationContext context, PortDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns AttributeDefinition
	 *     AttributeDefinition returns AttributeDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_SubclassificationPart(ISerializationContext context, AttributeDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns Definition
	 *     ExtendedDefinition returns Definition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ownedRelationship+=PrefixMetadataMember 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicDefinitionPrefix_DefinitionBodyItem_DefinitionExtensionKeyword_Identification_SubclassificationPart(ISerializationContext context, Definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns InterfaceDefinition
	 *     InterfaceDefinition returns InterfaceDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=InterfaceNonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=InterfaceOccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicDefinitionPrefix_DefinitionExtensionKeyword_Identification_InterfaceBodyItem_OccurrenceDefinitionPrefix_SubclassificationPart(ISerializationContext context, InterfaceDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns StateDefinition
	 *     StateDefinition returns StateDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         isParallel?='parallel'? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=TransitionUsageMember | 
	 *                 ownedRelationship+=DoActionMember | 
	 *                 ownedRelationship+=ExitActionMember
	 *             )? 
	 *             (ownedRelationship+=EntryActionMember ownedRelationship+=EntryTransitionMember*)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=BehaviorUsageMember ownedRelationship+=TargetTransitionUsageMember*)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicDefinitionPrefix_DefinitionExtensionKeyword_Identification_OccurrenceDefinitionPrefix_ParameterList_StateBodyItem_StateDefBody_SubclassificationPart(ISerializationContext context, StateDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns FlowConnectionUsage
	 *     OccurrenceUsageElement returns FlowConnectionUsage
	 *     StructureUsageElement returns FlowConnectionUsage
	 *     VariantUsageElement returns FlowConnectionUsage
	 *     InterfaceOccurrenceUsageElement returns FlowConnectionUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         (
	 *             (
	 *                 ((shortName=Name name=Name?) | name=Name)? 
	 *                 (
	 *                     ownedRelationship+=OwnedMultiplicity | 
	 *                     (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                 )? 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     ) 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )?
	 *                 )* 
	 *                 (
	 *                     (
	 *                         ownedRelationship+=ItemFeatureMember? 
	 *                         (
	 *                             ownedRelationship+=FeatureValue | 
	 *                             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *                             (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember)
	 *                         )?
	 *                     ) | 
	 *                     (
	 *                         (ownedRelationship+=ItemFeatureMember | ownedRelationship+=EmptyItemFeatureMember) 
	 *                         ownedRelationship+=ItemFlowEndMember 
	 *                         ownedRelationship+=ItemFlowEndMember
	 *                     )
	 *                 )
	 *             ) | 
	 *             (ownedRelationship+=EmptyItemFeatureMember ownedRelationship+=ItemFlowEndMember ownedRelationship+=ItemFlowEndMember)
	 *         ) 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_BinaryConnectorPart_DefinitionBodyItem_FlowConnectionDeclaration_Identification_MessageDeclaration_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, FlowConnectionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message returns FlowConnectionUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         ownedRelationship+=ItemFeatureMember? 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *             (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember)
	 *         )? 
	 *         ownedRelationship+=DefinitionMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember) | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             ownedRelationship+=DefinitionMember?
	 *         )*
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_BinaryConnectorPart_DefinitionBodyItem_Identification_MessageDeclaration_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValuePart(ISerializationContext context, FlowConnectionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns AllocationUsage
	 *     OccurrenceUsageElement returns AllocationUsage
	 *     StructureUsageElement returns AllocationUsage
	 *     VariantUsageElement returns AllocationUsage
	 *     InterfaceOccurrenceUsageElement returns AllocationUsage
	 *     AllocationUsage returns AllocationUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember) | 
	 *             (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember*)
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_BinaryConnectorPart_DefinitionBodyItem_Identification_MultiplicityPart_NaryConnectorPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(ISerializationContext context, AllocationUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns ConnectionUsage
	 *     OccurrenceUsageElement returns ConnectionUsage
	 *     StructureUsageElement returns ConnectionUsage
	 *     VariantUsageElement returns ConnectionUsage
	 *     ConnectionUsage returns ConnectionUsage
	 *     InterfaceOccurrenceUsageElement returns ConnectionUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember) | 
	 *             (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember*)
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_BinaryConnectorPart_DefinitionBodyItem_Identification_MultiplicityPart_NaryConnectorPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(ISerializationContext context, ConnectionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns InterfaceUsage
	 *     OccurrenceUsageElement returns InterfaceUsage
	 *     StructureUsageElement returns InterfaceUsage
	 *     VariantUsageElement returns InterfaceUsage
	 *     InterfaceOccurrenceUsageElement returns InterfaceUsage
	 *     InterfaceUsage returns InterfaceUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             (ownedRelationship+=InterfaceEndMember ownedRelationship+=InterfaceEndMember) | 
	 *             (ownedRelationship+=InterfaceEndMember ownedRelationship+=InterfaceEndMember ownedRelationship+=InterfaceEndMember*)
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=InterfaceNonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=InterfaceOccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_BinaryInterfacePart_Identification_InterfaceBodyItem_MultiplicityPart_NaryInterfacePart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(ISerializationContext context, InterfaceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns BindingConnectorAsUsage
	 *     NonOccurrenceUsageElement returns BindingConnectorAsUsage
	 *     VariantUsageElement returns BindingConnectorAsUsage
	 *     BindingConnector returns BindingConnectorAsUsage
	 *     InterfaceNonOccurrenceUsageElement returns BindingConnectorAsUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         ownedRelationship+=ConnectorEndMember 
	 *         ownedRelationship+=ConnectorEndMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_BindingConnector_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(ISerializationContext context, BindingConnectorAsUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceOccurrenceUsageElement returns PortUsage
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (
	 *                 direction=FeatureDirection? 
	 *                 (isAbstract?='abstract' | isVariation?='variation')? 
	 *                 isReadOnly?='readonly'? 
	 *                 isDerived?='derived'? 
	 *                 isEnd?='end'? 
	 *                 isReference?='ref'? 
	 *                 isIndividual?='individual'? 
	 *                 (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *                 ownedRelationship+=PrefixMetadataMember?
	 *             ) | 
	 *             (direction=FeatureDirection? (isAbstract?='abstract' | isVariation?='variation')? isEnd?='end')
	 *         ) 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_DefaultInterfaceEnd_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(ISerializationContext context, PortUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns EventOccurrenceUsage
	 *     OccurrenceUsageElement returns EventOccurrenceUsage
	 *     StructureUsageElement returns EventOccurrenceUsage
	 *     VariantUsageElement returns EventOccurrenceUsage
	 *     EventOccurrenceUsage returns EventOccurrenceUsage
	 *     InterfaceOccurrenceUsageElement returns EventOccurrenceUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )? 
	 *         ownedRelationship+=AliasMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember) | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             ownedRelationship+=AliasMember?
	 *         )*
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_DefinitionBodyItem_EventOccurrenceUsage_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(ISerializationContext context, EventOccurrenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FlowConnectionUsage returns FlowConnectionUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         (
	 *             (
	 *                 ((shortName=Name name=Name?) | name=Name)? 
	 *                 (
	 *                     ownedRelationship+=OwnedMultiplicity | 
	 *                     (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                 )? 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     ) 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )?
	 *                 )* 
	 *                 (ownedRelationship+=ItemFeatureMember | ownedRelationship+=EmptyItemFeatureMember)
	 *             ) | 
	 *             ownedRelationship+=EmptyItemFeatureMember
	 *         ) 
	 *         ownedRelationship+=ItemFlowEndMember 
	 *         ownedRelationship+=ItemFlowEndMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_DefinitionBodyItem_FlowConnectionDeclaration_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(ISerializationContext context, FlowConnectionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns SuccessionFlowConnectionUsage
	 *     OccurrenceUsageElement returns SuccessionFlowConnectionUsage
	 *     StructureUsageElement returns SuccessionFlowConnectionUsage
	 *     VariantUsageElement returns SuccessionFlowConnectionUsage
	 *     SuccessionFlowConnectionUsage returns SuccessionFlowConnectionUsage
	 *     InterfaceOccurrenceUsageElement returns SuccessionFlowConnectionUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         (
	 *             (
	 *                 ((shortName=Name name=Name?) | name=Name)? 
	 *                 (
	 *                     ownedRelationship+=OwnedMultiplicity | 
	 *                     (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                 )? 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     ) 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )?
	 *                 )* 
	 *                 (ownedRelationship+=ItemFeatureMember | ownedRelationship+=EmptyItemFeatureMember)
	 *             ) | 
	 *             ownedRelationship+=EmptyItemFeatureMember
	 *         ) 
	 *         ownedRelationship+=ItemFlowEndMember 
	 *         ownedRelationship+=ItemFlowEndMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_DefinitionBodyItem_FlowConnectionDeclaration_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(ISerializationContext context, SuccessionFlowConnectionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns OccurrenceUsage
	 *     OccurrenceUsageElement returns OccurrenceUsage
	 *     StructureUsageElement returns OccurrenceUsage
	 *     VariantUsageElement returns OccurrenceUsage
	 *     InterfaceOccurrenceUsageElement returns OccurrenceUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         (
	 *             (isIndividual?='individual'? (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)?) | 
	 *             isIndividual?='individual' | 
	 *             (isIndividual?='individual'? portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)
	 *         )? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_IndividualUsage_MultiplicityPart_OccurrenceUsagePrefix_PortionUsage_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(ISerializationContext context, OccurrenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IndividualUsage returns OccurrenceUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual' 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )? 
	 *         ownedRelationship+=DefinitionMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember) | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             ownedRelationship+=DefinitionMember?
	 *         )*
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_IndividualUsage_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(ISerializationContext context, OccurrenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns ItemUsage
	 *     OccurrenceUsageElement returns ItemUsage
	 *     StructureUsageElement returns ItemUsage
	 *     VariantUsageElement returns ItemUsage
	 *     ItemUsage returns ItemUsage
	 *     InterfaceOccurrenceUsageElement returns ItemUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(ISerializationContext context, ItemUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OccurrenceUsage returns OccurrenceUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(ISerializationContext context, OccurrenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns PartUsage
	 *     OccurrenceUsageElement returns PartUsage
	 *     StructureUsageElement returns PartUsage
	 *     VariantUsageElement returns PartUsage
	 *     PartUsage returns PartUsage
	 *     InterfaceOccurrenceUsageElement returns PartUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(ISerializationContext context, PartUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns PortUsage
	 *     OccurrenceUsageElement returns PortUsage
	 *     StructureUsageElement returns PortUsage
	 *     VariantUsageElement returns PortUsage
	 *     PortUsage returns PortUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(ISerializationContext context, PortUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns RenderingUsage
	 *     OccurrenceUsageElement returns RenderingUsage
	 *     StructureUsageElement returns RenderingUsage
	 *     VariantUsageElement returns RenderingUsage
	 *     InterfaceOccurrenceUsageElement returns RenderingUsage
	 *     RenderingUsage returns RenderingUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(ISerializationContext context, RenderingUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns ViewUsage
	 *     OccurrenceUsageElement returns ViewUsage
	 *     StructureUsageElement returns ViewUsage
	 *     VariantUsageElement returns ViewUsage
	 *     InterfaceOccurrenceUsageElement returns ViewUsage
	 *     ViewUsage returns ViewUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=ElementFilterMember | 
	 *                 ownedRelationship+=Expose | 
	 *                 ownedRelationship+=ViewRenderingMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart_ViewBodyItem(ISerializationContext context, ViewUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PortionUsage returns OccurrenceUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         portionKind=PortionKind 
	 *         ownedRelationship+=PortioningFeatureMember 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )? 
	 *         ownedRelationship+=DefinitionMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember) | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             ownedRelationship+=DefinitionMember?
	 *         )*
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_PortionUsage_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(ISerializationContext context, OccurrenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns SuccessionAsUsage
	 *     NonOccurrenceUsageElement returns SuccessionAsUsage
	 *     VariantUsageElement returns SuccessionAsUsage
	 *     Succession returns SuccessionAsUsage
	 *     InterfaceNonOccurrenceUsageElement returns SuccessionAsUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         ownedRelationship+=ConnectorEndMember 
	 *         ownedRelationship+=ConnectorEndMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_Succession_TypedBy_Typings_UsageExtensionKeyword(ISerializationContext context, SuccessionAsUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns AttributeUsage
	 *     NonOccurrenceUsageElement returns AttributeUsage
	 *     VariantUsageElement returns AttributeUsage
	 *     AttributeUsage returns AttributeUsage
	 *     InterfaceNonOccurrenceUsageElement returns AttributeUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(ISerializationContext context, AttributeUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns EnumerationUsage
	 *     NonOccurrenceUsageElement returns EnumerationUsage
	 *     EnumerationUsage returns EnumerationUsage
	 *     InterfaceNonOccurrenceUsageElement returns EnumerationUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(ISerializationContext context, EnumerationUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns Usage
	 *     NonOccurrenceUsageElement returns Usage
	 *     ExtendedUsage returns Usage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         ownedRelationship+=PrefixMetadataMember 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_ValueOrFlowPart_ValuePart(ISerializationContext context, Usage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns ForLoopActionUsage
	 *     ForLoopNode returns ForLoopActionUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         ownedRelationship+=ForVariableDeclarationMember 
	 *         ownedRelationship+=NodeParameterMember 
	 *         ownedRelationship+=ActionBodyParameterMember
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_ForLoopNode_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(ISerializationContext context, ForLoopActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns IfActionUsage
	 *     IfNode returns IfActionUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         ownedRelationship+=ExpressionParameterMember 
	 *         ownedRelationship+=ActionBodyParameterMember 
	 *         (ownedRelationship+=ActionBodyParameterMember | ownedRelationship+=IfNodeParameterMember)?
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_Identification_IfNode_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword(ISerializationContext context, IfActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns WhileLoopActionUsage
	 *     WhileLoopNode returns WhileLoopActionUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isReference?='ref'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (ownedRelationship+=ExpressionParameterMember | ownedRelationship+=EmptyParameterMember) 
	 *         ownedRelationship+=ActionBodyParameterMember 
	 *         ownedRelationship+=ExpressionParameterMember?
	 *     )
	 */
	protected void sequence_BasicUsagePrefix_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_UsageExtensionKeyword_WhileLoopNode(ISerializationContext context, WhileLoopActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? ownedRelatedElement+=BehaviorUsageElement)
	 */
	protected void sequence_BehaviorUsageMember_MemberPrefix(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CalculationReturnParameterMember returns ReturnParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=ActionUsageParameter
	 */
	protected void sequence_CalculationReturnParameterMember(ISerializationContext context, ReturnParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChangeExpressionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=ChangeExpression
	 */
	protected void sequence_ChangeExpressionMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChangeExpression returns Expression
	 *
	 * Constraint:
	 *     ownedRelationship+=ChangeResultExpressionMember
	 */
	protected void sequence_ChangeExpression(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChangeResultExpressionMember returns ResultExpressionMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=OwnedExpression
	 */
	protected void sequence_ChangeResultExpressionMember(ISerializationContext context, ResultExpressionMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comment returns Comment
	 *
	 * Constraint:
	 *     (((shortName=Name name=Name?) | name=Name)? (ownedRelationship+=Annotation ownedRelationship+=Annotation*)? body=REGULAR_COMMENT)
	 */
	protected void sequence_Comment_Identification(ISerializationContext context, Comment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AnnotatingElement returns Comment
	 *     DefinitionElement returns Comment
	 *
	 * Constraint:
	 *     (
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ((ownedRelationship+=Annotation ownedRelationship+=Annotation*)? body=REGULAR_COMMENT) | 
	 *             (ownedRelationship+=EmptyAnnotation body=PREFIX_COMMENT)
	 *         )
	 *     )
	 */
	protected void sequence_Comment_Identification_PrefixComment(ISerializationContext context, Comment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConjugatedPortDefinitionMember returns OwningMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=ConjugatedPortDefinition
	 */
	protected void sequence_ConjugatedPortDefinitionMember(ISerializationContext context, OwningMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConjugatedPortDefinition returns ConjugatedPortDefinition
	 *
	 * Constraint:
	 *     ownedRelationship+=PortConjugation
	 */
	protected void sequence_ConjugatedPortDefinition(ISerializationContext context, ConjugatedPortDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureTyping returns ConjugatedPortTyping
	 *     ConjugatedPortTyping returns ConjugatedPortTyping
	 *
	 * Constraint:
	 *     portDefinition=[PortDefinition|QualifiedName]
	 */
	protected void sequence_ConjugatedPortTyping(ISerializationContext context, ConjugatedPortTyping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.CONJUGATED_PORT_TYPING__PORT_DEFINITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.CONJUGATED_PORT_TYPING__PORT_DEFINITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConjugatedPortTypingAccess().getPortDefinitionPortDefinitionQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(SysMLPackage.Literals.CONJUGATED_PORT_TYPING__PORT_DEFINITION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConnectorEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=ConnectorEnd
	 */
	protected void sequence_ConnectorEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConnectorEnd returns Feature
	 *
	 * Constraint:
	 *     (name=Name? ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedMultiplicity?)
	 */
	protected void sequence_ConnectorEnd(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns DecisionNode
	 *     ControlNode returns DecisionNode
	 *     DecisionNode returns DecisionNode
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )*
	 *     )
	 */
	protected void sequence_ControlNodePrefix_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, DecisionNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns ForkNode
	 *     ControlNode returns ForkNode
	 *     ForkNode returns ForkNode
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )*
	 *     )
	 */
	protected void sequence_ControlNodePrefix_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, ForkNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns JoinNode
	 *     ControlNode returns JoinNode
	 *     JoinNode returns JoinNode
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )*
	 *     )
	 */
	protected void sequence_ControlNodePrefix_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, JoinNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns MergeNode
	 *     ControlNode returns MergeNode
	 *     MergeNode returns MergeNode
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )*
	 *     )
	 */
	protected void sequence_ControlNodePrefix_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, MergeNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefaultInterfaceEnd returns PortUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isEnd?='end' 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )? 
	 *         ownedRelationship+=DefinitionMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember) | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             ownedRelationship+=DefinitionMember?
	 *         )*
	 *     )
	 */
	protected void sequence_DefaultInterfaceEnd_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValueOrFlowPart_ValuePart(ISerializationContext context, PortUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionTargetSuccession returns TransitionUsage
	 *
	 * Constraint:
	 *     (
	 *         (ownedRelationship+=EmptyParameterMember ownedRelationship+=GuardExpressionMember ownedRelationship+=TransitionSuccessionMember) | 
	 *         (ownedRelationship+=EmptyParameterMember ownedRelationship+=TransitionSuccessionMember)
	 *     )
	 */
	protected void sequence_DefaultTargetSuccession_GuardedTargetSuccession(ISerializationContext context, TransitionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefaultTargetSuccession returns TransitionUsage
	 *
	 * Constraint:
	 *     (ownedRelationship+=EmptyParameterMember ownedRelationship+=TransitionSuccessionMember)
	 */
	protected void sequence_DefaultTargetSuccession(ISerializationContext context, TransitionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MetadataDefinition returns MetadataDefinition
	 *     DefinitionElement returns MetadataDefinition
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MetadataDefinition_SubclassificationPart(ISerializationContext context, MetadataDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns ReferenceUsage
	 *     ReferenceUsage returns ReferenceUsage
	 *     NonOccurrenceUsageElement returns ReferenceUsage
	 *     InterfaceNonOccurrenceUsageElement returns ReferenceUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isReadOnly?='readonly'? 
	 *         isDerived?='derived'? 
	 *         isEnd?='end'? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_ValueOrFlowPart_ValuePart(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     DefaultReferenceUsage returns ReferenceUsage
	//
	// Constraint:
	//     (
	//         direction=FeatureDirection? 
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         isReadOnly?='readonly'? 
	//         isDerived?='derived'? 
	//         isEnd?='end'? 
	//         (
	//             (shortName=Name name=Name?) | 
	//             (
	//                 ((shortName=Name name=Name?) | name=Name)? 
	//                 (
	//                     (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	//                     (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                     (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//                 )*
	//             ) | 
	//             (
	//                 (
	//                     (
	//                         ((shortName=Name name=Name?) | name=Name)? 
	//                         (
	//                             ownedRelationship+=OwnedMultiplicity | 
	//                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	//                         )
	//                     ) | 
	//                     (
	//                         ((shortName=Name name=Name?) | name=Name)? 
	//                         (
	//                             (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	//                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//                         )* 
	//                         (
	//                             ownedRelationship+=OwnedMultiplicity | 
	//                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	//                         )
	//                     )
	//                 ) 
	//                 (
	//                     (
	//                         (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	//                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//                     )* 
	//                     (
	//                         ownedRelationship+=OwnedMultiplicity | 
	//                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	//                     )
	//                 )* 
	//                 (
	//                     (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	//                     (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                     (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//                 )*
	//             ) | 
	//             name=Name
	//         )? 
	//         (
	//             ownedRelationship+=SourceItemFlowMember | 
	//             ownedRelationship+=FeatureValue | 
	//             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	//         )? 
	//         ownedRelationship+=DefinitionMember? 
	//         (
	//             (
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember) | 
	//                 ownedRelationship+=AliasMember | 
	//                 ownedRelationship+=Import
	//             )? 
	//             ownedRelationship+=DefinitionMember?
	//         )*
	//     )
	//
	// protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_ValueOrFlowPart_ValuePart(ISerializationContext context, ReferenceUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     VariantUsageElement returns ReferenceUsage
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         direction=FeatureDirection? 
	 *                         (isAbstract?='abstract' | isVariation?='variation')? 
	 *                         isReadOnly?='readonly'? 
	 *                         isDerived?='derived'? 
	 *                         isEnd?='end'? 
	 *                         ((shortName=Name name=Name?) | name=Name)?
	 *                     ) | 
	 *                     (
	 *                         ownedRelationship+=OwnedSubsetting 
	 *                         (
	 *                             (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                         )
	 *                     )
	 *                 ) 
	 *                 (
	 *                     ownedRelationship+=OwnedMultiplicity | 
	 *                     (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                 )? 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     ) 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )?
	 *                 )* 
	 *                 (
	 *                     ownedRelationship+=SourceItemFlowMember | 
	 *                     ownedRelationship+=FeatureValue | 
	 *                     (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *                 )?
	 *             ) | 
	 *             ownedRelationship+=OwnedSubsetting
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RefPrefix_Subsets_Subsettings_TypedBy_Typings_ValueOrFlowPart_ValuePart_VariantReference(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnumeratedValue returns EnumerationUsage
	 *
	 * Constraint:
	 *     (
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )? 
	 *         ownedRelationship+=DefinitionMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember) | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             ownedRelationship+=DefinitionMember?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValueOrFlowPart_ValuePart(ISerializationContext context, EnumerationUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActorUsage returns PartUsage
	 *     StakeholderUsage returns PartUsage
	 *
	 * Constraint:
	 *     (
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )? 
	 *         ownedRelationship+=DefinitionMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember) | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             ownedRelationship+=DefinitionMember?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValueOrFlowPart_ValuePart(ISerializationContext context, PartUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubjectUsage returns ReferenceUsage
	 *
	 * Constraint:
	 *     (
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )? 
	 *         ownedRelationship+=DefinitionMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember) | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             ownedRelationship+=DefinitionMember?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValueOrFlowPart_ValuePart(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariantReference returns ReferenceUsage
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=OwnedSubsetting 
	 *         (
	 *             (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *         )* 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_VariantReference(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ViewRenderingUsage returns RenderingUsage
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=OwnedSubsetting 
	 *         (
	 *             (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *         )* 
	 *         (
	 *             (
	 *                 ownedRelationship+=DefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=AliasMember | 
	 *                 ownedRelationship+=Import
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ViewRenderingUsage(ISerializationContext context, RenderingUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionMember returns OwningMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? ownedRelatedElement+=DefinitionElement)
	 */
	protected void sequence_DefinitionMember_MemberPrefix(ISerializationContext context, OwningMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns Dependency
	 *     Dependency returns Dependency
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=PrefixMetadataAnnotation? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         client+=[Element|QualifiedName] 
	 *         client+=[Element|QualifiedName]* 
	 *         supplier+=[Element|QualifiedName] 
	 *         supplier+=[Element|QualifiedName]*
	 *     )
	 */
	protected void sequence_Dependency_Identification(ISerializationContext context, Dependency semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DoActionMember returns StateSubactionMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? kind=DoActionKind ownedRelatedElement+=StateActionUsage)
	 */
	protected void sequence_DoActionMember_MemberPrefix(ISerializationContext context, StateSubactionMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AnnotatingElement returns Documentation
	 *     Documentation returns Documentation
	 *     DefinitionElement returns Documentation
	 *
	 * Constraint:
	 *     (((shortName=Name name=Name?) | name=Name)? body=REGULAR_COMMENT)
	 */
	protected void sequence_Documentation_Identification(ISerializationContext context, Documentation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EffectBehaviorMember returns TransitionFeatureMembership
	 *
	 * Constraint:
	 *     (kind=EffectFeatureKind ownedRelatedElement+=EffectBehaviorUsage)
	 */
	protected void sequence_EffectBehaviorMember(ISerializationContext context, TransitionFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementFilterMember returns ElementFilterMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? ownedRelatedElement+=OwnedExpression)
	 */
	protected void sequence_ElementFilterMember_MemberPrefix(ISerializationContext context, ElementFilterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateActionUsage returns ActionUsage
	 *     EmptyActionUsage returns ActionUsage
	 *     EffectBehaviorUsage returns ActionUsage
	 *
	 * Constraint:
	 *     {ActionUsage}
	 */
	protected void sequence_EmptyActionUsage(ISerializationContext context, ActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyAnnotation returns Annotation
	 *
	 * Constraint:
	 *     {Annotation}
	 */
	protected void sequence_EmptyAnnotation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyAssignmentActionMember returns OwningMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptyAssignmentAction
	 */
	protected void sequence_EmptyAssignmentActionMember(ISerializationContext context, OwningMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyAssignmentAction returns AssignmentActionUsage
	 *
	 * Constraint:
	 *     (ownedRelationship+=EmptyTargetMember ownedRelationship+=EmptyParameterMember)
	 */
	protected void sequence_EmptyAssignmentAction(ISerializationContext context, AssignmentActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptyItemFeature
	 */
	protected void sequence_EmptyItemFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFeature returns ItemFeature
	 *
	 * Constraint:
	 *     {ItemFeature}
	 */
	protected void sequence_EmptyItemFeature(ISerializationContext context, ItemFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFlowEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptyItemFlowEnd
	 */
	protected void sequence_EmptyItemFlowEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFlowEnd returns ItemFlowEnd
	 *
	 * Constraint:
	 *     ownedRelationship+=EmptyItemFlowFeatureMember
	 */
	protected void sequence_EmptyItemFlowEnd(ISerializationContext context, ItemFlowEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFlowFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptyItemFlowFeature
	 */
	protected void sequence_EmptyItemFlowFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFlowFeature returns ItemFlowFeature
	 *
	 * Constraint:
	 *     {ItemFlowFeature}
	 */
	protected void sequence_EmptyItemFlowFeature(ISerializationContext context, ItemFlowFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptyUsage
	 */
	protected void sequence_EmptyParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyReturnParameterMember returns ReturnParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptyUsage
	 */
	protected void sequence_EmptyReturnParameterMember(ISerializationContext context, ReturnParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptySourceEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptySourceEnd
	 */
	protected void sequence_EmptySourceEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptySourceEnd returns SourceEnd
	 *
	 * Constraint:
	 *     {SourceEnd}
	 */
	protected void sequence_EmptySourceEnd(ISerializationContext context, SourceEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptySuccessionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptySuccession
	 */
	protected void sequence_EmptySuccessionMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptySuccession returns SuccessionAsUsage
	 *
	 * Constraint:
	 *     (ownedRelationship+=MultiplicitySourceEndMember ownedRelationship+=EmptyTargetEndMember)
	 */
	protected void sequence_EmptySuccession(ISerializationContext context, SuccessionAsUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyTargetEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptyTargetEnd
	 */
	protected void sequence_EmptyTargetEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyTargetEnd returns TargetEnd
	 *
	 * Constraint:
	 *     {TargetEnd}
	 */
	protected void sequence_EmptyTargetEnd(ISerializationContext context, TargetEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyTargetMember returns ParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptyTargetParameter
	 */
	protected void sequence_EmptyTargetMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyTargetParameter returns ReferenceUsage
	 *
	 * Constraint:
	 *     ownedRelationship+=TargetFeatureMember
	 */
	protected void sequence_EmptyTargetParameter(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyUsage returns ReferenceUsage
	 *
	 * Constraint:
	 *     {ReferenceUsage}
	 */
	protected void sequence_EmptyUsage(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntryActionMember returns StateSubactionMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? kind=EntryActionKind ownedRelatedElement+=StateActionUsage)
	 */
	protected void sequence_EntryActionMember_MemberPrefix(ISerializationContext context, StateSubactionMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntryTransitionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? (ownedRelatedElement+=GuardedTargetSuccession | ownedRelatedElement+=TransitionSuccession))
	 */
	protected void sequence_EntryTransitionMember_MemberPrefix(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns EnumerationDefinition
	 *     EnumerationDefinition returns EnumerationDefinition
	 *
	 * Constraint:
	 *     (
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSubclassification ownedRelationship+=OwnedSubclassification*)? 
	 *         (ownedRelationship+=AnnotatingMember | ownedRelationship+=EnumerationUsageMember)*
	 *     )
	 */
	protected void sequence_EnumerationBody_Identification_SubclassificationPart(ISerializationContext context, EnumerationDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnumerationUsageMember returns VariantMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? ownedRelatedElement+=EnumeratedValue)
	 */
	protected void sequence_EnumerationUsageMember_MemberPrefix(ISerializationContext context, VariantMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExitActionMember returns StateSubactionMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? kind=ExitActionKind ownedRelatedElement+=StateActionUsage)
	 */
	protected void sequence_ExitActionMember_MemberPrefix(ISerializationContext context, StateSubactionMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expose returns Expose
	 *
	 * Constraint:
	 *     (
	 *         visibility=VisibilityIndicator? 
	 *         ((importedNamespace=[Namespace|Qualification]? importedMemberName=Name? isRecursive?='**'?) | ownedRelatedElement+=FilterPackage)?
	 *     )
	 */
	protected void sequence_Expose_ImportedFilterPackage_ImportedNamespace(ISerializationContext context, Expose semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpressionParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=OwnedExpression
	 */
	protected void sequence_ExpressionParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureBinding returns FeatureValue
	 *
	 * Constraint:
	 *     ownedRelatedElement+=OwnedExpression
	 */
	protected void sequence_FeatureBinding(ISerializationContext context, FeatureValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureChainPrefix returns Feature
	 *
	 * Constraint:
	 *     (ownedRelationship+=OwnedFeatureChaining+ ownedRelationship+=OwnedFeatureChaining)
	 */
	protected void sequence_FeatureChainPrefix(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureValueExpression returns FeatureValue
	 *
	 * Constraint:
	 *     (isInitial?=':=' ownedRelatedElement+=OwnedExpression)
	 */
	protected void sequence_FeatureValueExpression(ISerializationContext context, FeatureValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureValue returns FeatureValue
	 *
	 * Constraint:
	 *     ((isDefault?='default' isInitial?=':='?)? ownedRelatedElement+=OwnedExpression)
	 */
	protected void sequence_FeatureValue(ISerializationContext context, FeatureValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FilterPackageMember returns ElementFilterMembership
	 *
	 * Constraint:
	 *     (visibility=FilterPackageMemberVisibility ownedRelatedElement+=OwnedExpression)
	 */
	protected void sequence_FilterPackageMember(ISerializationContext context, ElementFilterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FilterPackage returns Package
	 *
	 * Constraint:
	 *     (ownedRelationship+=FilterPackageImport ownedRelationship+=FilterPackageMember+)
	 */
	protected void sequence_FilterPackage(ISerializationContext context, org.omg.sysml.lang.sysml.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ForVariableDeclarationMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=ForVariableDeclaration
	 */
	protected void sequence_ForVariableDeclarationMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FramedConcernMember returns FramedConcernMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? kind=FramedConcernKind ownedRelatedElement+=FramedConcernUsage)
	 */
	protected void sequence_FramedConcernMember_MemberPrefix(ISerializationContext context, FramedConcernMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GuardExpressionMember returns TransitionFeatureMembership
	 *
	 * Constraint:
	 *     (kind=GuardFeatureKind ownedRelatedElement+=OwnedExpression)
	 */
	protected void sequence_GuardExpressionMember(ISerializationContext context, TransitionFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GuardedSuccessionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=GuardedSuccession
	 */
	protected void sequence_GuardedSuccessionMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GuardedSuccession returns TransitionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         ownedRelationship+=TransitionSourceMember 
	 *         ownedRelationship+=EmptyParameterMember 
	 *         ownedRelationship+=GuardExpressionMember 
	 *         ownedRelationship+=TransitionSuccessionMember
	 *     )
	 */
	protected void sequence_GuardedSuccession_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, TransitionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GuardedTargetSuccession returns TransitionUsage
	 *
	 * Constraint:
	 *     (ownedRelationship+=EmptyParameterMember ownedRelationship+=GuardExpressionMember ownedRelationship+=TransitionSuccessionMember)
	 */
	protected void sequence_GuardedTargetSuccession(ISerializationContext context, TransitionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AnnotatingElement returns MetadataUsage
	 *     MetadataUsage returns MetadataUsage
	 *     DefinitionElement returns MetadataUsage
	 *
	 * Constraint:
	 *     (
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         ownedRelationship+=MetadataTyping 
	 *         (ownedRelationship+=Annotation ownedRelationship+=Annotation*)? 
	 *         (ownedRelationship+=DefinitionMember | ownedRelationship+=MetadataBodyUsageMember | ownedRelationship+=AliasMember | ownedRelationship+=Import)*
	 *     )
	 */
	protected void sequence_Identification_MetadataBody_MetadataFeatureDeclaration_MetadataUsage(ISerializationContext context, MetadataUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns ActionUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             ownedRelationship+=OwnedMultiplicity? 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, ActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns AnalysisCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             ownedRelationship+=OwnedMultiplicity? 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, AnalysisCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns AttributeUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             ownedRelationship+=OwnedMultiplicity? 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, AttributeUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns CalculationUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             ownedRelationship+=OwnedMultiplicity? 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, CalculationUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns ConcernUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             ownedRelationship+=OwnedMultiplicity? 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, ConcernUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns ConstraintUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             ownedRelationship+=OwnedMultiplicity? 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, ConstraintUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns ItemUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             ownedRelationship+=OwnedMultiplicity? 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, ItemUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns OccurrenceUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             ownedRelationship+=OwnedMultiplicity? 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, OccurrenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns PartUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             ownedRelationship+=OwnedMultiplicity? 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, PartUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns ReferenceUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             ownedRelationship+=OwnedMultiplicity? 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns RenderingUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             ownedRelationship+=OwnedMultiplicity? 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, RenderingUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns RequirementUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             ownedRelationship+=OwnedMultiplicity? 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, RequirementUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns StateUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             ownedRelationship+=OwnedMultiplicity? 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, StateUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns UseCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             ownedRelationship+=OwnedMultiplicity? 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, UseCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns ActionUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, ActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns AnalysisCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, AnalysisCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns AttributeUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, AttributeUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns CalculationUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, CalculationUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns ConcernUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, ConcernUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns ConstraintUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, ConstraintUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns ItemUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, ItemUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns OccurrenceUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, OccurrenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns PartUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, PartUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns RenderingUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, RenderingUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns RequirementUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, RequirementUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns StateUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, StateUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns UseCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, UseCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns VerificationCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, VerificationCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns ViewUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, ViewUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns ViewpointUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (
	 *             ownedRelationship+=SourceItemFlowMember | 
	 *             ownedRelationship+=FeatureValue | 
	 *             (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember)
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, ViewpointUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns VerificationCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             ownedRelationship+=OwnedMultiplicity? 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, VerificationCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns ViewUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             ownedRelationship+=OwnedMultiplicity? 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, ViewUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns ViewpointUsage
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=FeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             ownedRelationship+=OwnedMultiplicity? 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, ViewpointUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PayloadParameter returns ReferenceUsage
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (
	 *                 (
	 *                     ((shortName=Name name=Name?) | name=Name)? 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 ) | 
	 *                 (
	 *                     ((shortName=Name name=Name?) | name=Name)? 
	 *                     (
	 *                         (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     )+ 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 )
	 *             ) 
	 *             (
	 *                 (
	 *                     (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                     (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                     (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                 )+ 
	 *                 (
	 *                     ownedRelationship+=OwnedMultiplicity | 
	 *                     (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                 )
	 *             )* 
	 *             (
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     )+ 
	 *                     (
	 *                         ownedRelationship+=SourceItemFlowMember | 
	 *                         ownedRelationship+=FeatureValue | 
	 *                         (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *                         ownedRelationship+=TriggerFeatureValue
	 *                     )?
	 *                 ) | 
	 *                 ownedRelationship+=SourceItemFlowMember | 
	 *                 ownedRelationship+=FeatureValue | 
	 *                 (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *                 ownedRelationship+=TriggerFeatureValue
	 *             )?
	 *         ) | 
	 *         (((shortName=Name name=Name?) | name=Name)? ownedRelationship+=TriggerFeatureValue) | 
	 *         (
	 *             ((shortName=Name name=Name?) | name=Name)? 
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             )+ 
	 *             (
	 *                 ownedRelationship+=SourceItemFlowMember | 
	 *                 ownedRelationship+=FeatureValue | 
	 *                 (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember) | 
	 *                 ownedRelationship+=TriggerFeatureValue
	 *             )?
	 *         ) | 
	 *         (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedMultiplicity?) | 
	 *         (ownedRelationship+=OwnedMultiplicity ownedRelationship+=OwnedFeatureTyping)
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_PayloadParameter_Redefines_Redefinitions_Subsets_Subsettings_TriggerValuePart_TypedBy_Typings_ValueOrFlowPart_ValuePart(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PerformedActionUsage returns SendActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         ownedRelationship+=NodeParameterMember 
	 *         ownedRelationship+=NodeParameterMember
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_SendNodeDeclaration_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, SendActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TransitionUsage returns TransitionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         ownedRelationship+=TransitionSourceMember 
	 *         ownedRelationship+=EmptyParameterMember 
	 *         (ownedRelationship+=EmptyParameterMember ownedRelationship+=TriggerActionMember)? 
	 *         ownedRelationship+=GuardExpressionMember? 
	 *         ownedRelationship+=EffectBehaviorMember? 
	 *         ownedRelationship+=TransitionSuccessionMember
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TransitionUsage_TypedBy_Typings(ISerializationContext context, TransitionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ForVariableDeclaration returns ReferenceUsage
	 *
	 * Constraint:
	 *     (
	 *         (shortName=Name name=Name?) | 
	 *         (
	 *             ((shortName=Name name=Name?) | name=Name)? 
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             )*
	 *         ) | 
	 *         (
	 *             (
	 *                 (
	 *                     ((shortName=Name name=Name?) | name=Name)? 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 ) | 
	 *                 (
	 *                     ((shortName=Name name=Name?) | name=Name)? 
	 *                     (
	 *                         (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     )* 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 )
	 *             ) 
	 *             (
	 *                 (
	 *                     (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                     (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                     (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                 )* 
	 *                 (
	 *                     ownedRelationship+=OwnedMultiplicity | 
	 *                     (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                 )
	 *             )* 
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             )*
	 *         ) | 
	 *         name=Name
	 *     )?
	 */
	protected void sequence_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Package returns Package
	 *     DefinitionElement returns Package
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=PrefixMetadataMember? 
	 *         ((shortName=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=PackageMember | ownedRelationship+=ElementFilterMember | ownedRelationship+=AliasMember | ownedRelationship+=Import)*
	 *     )
	 */
	protected void sequence_Identification_Package_PackageBody(ISerializationContext context, org.omg.sysml.lang.sysml.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrefixComment returns Comment
	 *
	 * Constraint:
	 *     (((shortName=Name name=Name?) | name=Name)? ownedRelationship+=EmptyAnnotation body=PREFIX_COMMENT)
	 */
	protected void sequence_Identification_PrefixComment(ISerializationContext context, Comment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AnnotatingElement returns TextualRepresentation
	 *     TextualRepresentation returns TextualRepresentation
	 *     DefinitionElement returns TextualRepresentation
	 *
	 * Constraint:
	 *     (((shortName=Name name=Name?) | name=Name)? ownedRelationship+=Annotation? language=STRING_VALUE body=REGULAR_COMMENT)
	 */
	protected void sequence_Identification_TextualRepresentation(ISerializationContext context, TextualRepresentation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IfNodeParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=IfNode
	 */
	protected void sequence_IfNodeParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     (
	 *         visibility=VisibilityIndicator? 
	 *         isImportAll?='all'? 
	 *         ((importedNamespace=[Namespace|Qualification]? importedMemberName=Name? isRecursive?='**'?) | ownedRelatedElement+=FilterPackage)?
	 *     )
	 */
	protected void sequence_Import_ImportedFilterPackage_ImportedNamespace(ISerializationContext context, Import semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FilterPackageImport returns Import
	 *
	 * Constraint:
	 *     (importedNamespace=[Namespace|Qualification]? importedMemberName=Name? isRecursive?='**'?)
	 */
	protected void sequence_ImportedNamespace(ISerializationContext context, Import semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitialNodeMember returns Membership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? memberElement=[Feature|QualifiedName])
	 */
	protected void sequence_InitialNodeMember_MemberPrefix(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=InterfaceEnd
	 */
	protected void sequence_InterfaceEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceEnd returns PortUsage
	 *
	 * Constraint:
	 *     (name=Name? ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedMultiplicity?)
	 */
	protected void sequence_InterfaceEnd(ISerializationContext context, PortUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceNonOccurrenceUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? ownedRelatedElement+=InterfaceNonOccurrenceUsageElement)
	 */
	protected void sequence_InterfaceNonOccurrenceUsageMember_MemberPrefix(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceOccurrenceUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? ownedRelatedElement+=InterfaceOccurrenceUsageElement)
	 */
	protected void sequence_InterfaceOccurrenceUsageMember_MemberPrefix(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=ItemFeature
	 */
	protected void sequence_ItemFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFeature returns ItemFeature
	 *
	 * Constraint:
	 *     (
	 *         name=Name? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedMultiplicity?) | 
	 *             (ownedRelationship+=OwnedMultiplicity ownedRelationship+=OwnedFeatureTyping?)
	 *         )
	 *     )
	 */
	protected void sequence_ItemFeature(ISerializationContext context, ItemFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=ItemFlowEnd
	 */
	protected void sequence_ItemFlowEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowEndSubsetting returns Subsetting
	 *
	 * Constraint:
	 *     (subsettedFeature=[Feature|QualifiedName] | ownedRelatedElement+=FeatureChainPrefix)
	 */
	protected void sequence_ItemFlowEndSubsetting(ISerializationContext context, Subsetting semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowEnd returns ItemFlowEnd
	 *
	 * Constraint:
	 *     (ownedRelationship+=ItemFlowEndSubsetting? ownedRelationship+=ItemFlowFeatureMember)
	 */
	protected void sequence_ItemFlowEnd(ISerializationContext context, ItemFlowEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=ItemFlowFeature
	 */
	protected void sequence_ItemFlowFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowFeature returns ItemFlowFeature
	 *
	 * Constraint:
	 *     ownedRelationship+=ItemFlowRedefinition
	 */
	protected void sequence_ItemFlowFeature(ISerializationContext context, ItemFlowFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowRedefinition returns Redefinition
	 *
	 * Constraint:
	 *     redefinedFeature=[Feature|QualifiedName]
	 */
	protected void sequence_ItemFlowRedefinition(ISerializationContext context, Redefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getItemFlowRedefinitionAccess().getRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LifeClassMembership returns OwningMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=LifeClass
	 */
	protected void sequence_LifeClassMembership(ISerializationContext context, OwningMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LifeClass returns LifeClass
	 *
	 * Constraint:
	 *     {LifeClass}
	 */
	protected void sequence_LifeClass(ISerializationContext context, LifeClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonOccurrenceUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? ownedRelatedElement+=NonOccurrenceUsageElement)
	 */
	protected void sequence_MemberPrefix_NonOccurrenceUsageMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjectiveMember returns ObjectiveMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? ownedRelatedElement+=ObjectiveRequirementUsage)
	 */
	protected void sequence_MemberPrefix_ObjectiveMember(ISerializationContext context, ObjectiveMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OccurrenceUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? ownedRelatedElement+=OccurrenceUsageElement)
	 */
	protected void sequence_MemberPrefix_OccurrenceUsageMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackageMember returns OwningMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? (ownedRelatedElement+=DefinitionElement | ownedRelatedElement+=UsageElement))
	 */
	protected void sequence_MemberPrefix_PackageMember(ISerializationContext context, OwningMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RequirementConstraintMember returns RequirementConstraintMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? kind=RequirementConstraintKind ownedRelatedElement+=RequirementConstraintUsage)
	 */
	protected void sequence_MemberPrefix_RequirementConstraintMember(ISerializationContext context, RequirementConstraintMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RequirementVerificationMember returns RequirementVerificationMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? kind=RequirementVerificationKind ownedRelatedElement+=RequirementVerificationUsage)
	 */
	protected void sequence_MemberPrefix_RequirementVerificationMember(ISerializationContext context, RequirementVerificationMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ResultExpressionMember returns ResultExpressionMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? ownedRelatedElement+=OwnedExpression)
	 */
	protected void sequence_MemberPrefix_ResultExpressionMember(ISerializationContext context, ResultExpressionMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReturnParameterFlowUsageMember returns ReturnParameterMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? ownedRelatedElement+=UsageElement)
	 */
	protected void sequence_MemberPrefix_ReturnParameterFlowUsageMember(ISerializationContext context, ReturnParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StakeholderMember returns StakeholderMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? ownedRelatedElement+=StakeholderUsage)
	 */
	protected void sequence_MemberPrefix_StakeholderMember(ISerializationContext context, StakeholderMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StructureUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? ownedRelatedElement+=StructureUsageElement)
	 */
	protected void sequence_MemberPrefix_StructureUsageMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubjectMember returns SubjectMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? ownedRelatedElement+=SubjectUsage)
	 */
	protected void sequence_MemberPrefix_SubjectMember(ISerializationContext context, SubjectMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetSuccessionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? ownedRelatedElement+=ActionTargetSuccession)
	 */
	protected void sequence_MemberPrefix_TargetSuccessionMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetTransitionUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? ownedRelatedElement+=TargetTransitionUsage)
	 */
	protected void sequence_MemberPrefix_TargetTransitionUsageMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TransitionUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? ownedRelatedElement+=TransitionUsage)
	 */
	protected void sequence_MemberPrefix_TransitionUsageMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariantUsageMember returns VariantMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? ownedRelatedElement+=VariantUsageElement)
	 */
	protected void sequence_MemberPrefix_VariantUsageMember(ISerializationContext context, VariantMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ViewRenderingMember returns ViewRenderingMembership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? ownedRelatedElement+=ViewRenderingUsage)
	 */
	protected void sequence_MemberPrefix_ViewRenderingMember(ISerializationContext context, ViewRenderingMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MetadataBodyUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=MetadataBodyUsage
	 */
	protected void sequence_MetadataBodyUsageMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MetadataBodyUsage returns ReferenceUsage
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=OwnedRedefinition 
	 *         (
	 *             ownedRelationship+=OwnedMultiplicity | 
	 *             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=FeatureTyping ownedRelationship+=FeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (
	 *                 ownedRelationship+=OwnedMultiplicity | 
	 *                 (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *             )?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | (ownedRelationship+=FeatureValueExpression ownedRelationship+=EmptyAssignmentActionMember))? 
	 *         (ownedRelationship+=DefinitionMember | ownedRelationship+=MetadataBodyUsageMember | ownedRelationship+=AliasMember | ownedRelationship+=Import)*
	 *     )
	 */
	protected void sequence_MetadataBody_MetadataBodyUsage_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MetadataTyping returns FeatureTyping
	 *
	 * Constraint:
	 *     type=[Metaclass|QualifiedName]
	 */
	protected void sequence_MetadataTyping(ISerializationContext context, FeatureTyping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMetadataTypingAccess().getTypeMetaclassQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.FEATURE_TYPING__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiplicityExpressionMember returns OwningMembership
	 *
	 * Constraint:
	 *     (ownedRelatedElement+=LiteralExpression | ownedRelatedElement+=FeatureReferenceExpression)
	 */
	protected void sequence_MultiplicityExpressionMember(ISerializationContext context, OwningMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultiplicityRange returns MultiplicityRange
	 *
	 * Constraint:
	 *     (ownedRelationship+=MultiplicityExpressionMember ownedRelationship+=MultiplicityExpressionMember?)
	 */
	protected void sequence_MultiplicityRange(ISerializationContext context, MultiplicityRange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultiplicitySourceEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=MultiplicitySourceEnd
	 */
	protected void sequence_MultiplicitySourceEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultiplicitySourceEnd returns SourceEnd
	 *
	 * Constraint:
	 *     ownedRelationship+=OwnedMultiplicity?
	 */
	protected void sequence_MultiplicitySourceEnd(ISerializationContext context, SourceEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NodeParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=NodeParameter
	 */
	protected void sequence_NodeParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NodeParameter returns ReferenceUsage
	 *
	 * Constraint:
	 *     ownedRelationship+=FeatureBinding
	 */
	protected void sequence_NodeParameter(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedMultiplicity returns OwningMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=MultiplicityRange
	 */
	protected void sequence_OwnedMultiplicity(ISerializationContext context, OwningMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedRedefinition returns Redefinition
	 *
	 * Constraint:
	 *     (redefinedFeature=[Feature|QualifiedName] | ownedRelatedElement+=OwnedFeatureChain)
	 */
	protected void sequence_OwnedRedefinition(ISerializationContext context, Redefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedSubclassification returns Subclassification
	 *
	 * Constraint:
	 *     superclassifier=[Classifier|QualifiedName]
	 */
	protected void sequence_OwnedSubclassification(ISerializationContext context, Subclassification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.SUBCLASSIFICATION__SUPERCLASSIFIER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.SUBCLASSIFICATION__SUPERCLASSIFIER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedSubclassificationAccess().getSuperclassifierClassifierQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.SUBCLASSIFICATION__SUPERCLASSIFIER, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedSubsetting returns Subsetting
	 *
	 * Constraint:
	 *     (subsettedFeature=[Feature|QualifiedName] | ownedRelatedElement+=OwnedFeatureChain)
	 */
	protected void sequence_OwnedSubsetting(ISerializationContext context, Subsetting semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RootNamespace returns Namespace
	 *
	 * Constraint:
	 *     (ownedRelationship+=PackageMember | ownedRelationship+=ElementFilterMember | ownedRelationship+=AliasMember | ownedRelationship+=Import)*
	 */
	protected void sequence_PackageBodyElement_RootNamespace(ISerializationContext context, Namespace semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=Parameter
	 */
	protected void sequence_ParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PayloadParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=PayloadParameter
	 */
	protected void sequence_PayloadParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PortConjugation returns PortConjugation
	 *
	 * Constraint:
	 *     {PortConjugation}
	 */
	protected void sequence_PortConjugation(ISerializationContext context, PortConjugation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PortioningFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=PortioningFeature
	 */
	protected void sequence_PortioningFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PortioningFeature returns PortioningFeature
	 *
	 * Constraint:
	 *     {PortioningFeature}
	 */
	protected void sequence_PortioningFeature(ISerializationContext context, PortioningFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrefixMetadataAnnotation returns Annotation
	 *
	 * Constraint:
	 *     ownedRelatedElement+=PrefixMetadataUsage
	 */
	protected void sequence_PrefixMetadataAnnotation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrefixMetadataMember returns OwningMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=PrefixMetadataUsage
	 */
	protected void sequence_PrefixMetadataMember(ISerializationContext context, OwningMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrefixMetadataUsage returns MetadataUsage
	 *
	 * Constraint:
	 *     ownedRelationship+=MetadataTyping
	 */
	protected void sequence_PrefixMetadataUsage(ISerializationContext context, MetadataUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetExpression returns CollectExpression
	 *     TargetExpression.FeatureChainExpression_1_0_0 returns CollectExpression
	 *     TargetExpression.OperatorExpression_1_1_0_0 returns CollectExpression
	 *     TargetExpression.OperatorExpression_1_1_1_0 returns CollectExpression
	 *     TargetExpression.CollectExpression_1_1_2_0 returns CollectExpression
	 *     TargetExpression.SelectExpression_1_1_3_0 returns CollectExpression
	 *
	 * Constraint:
	 *     (
	 *         (operand+=TargetExpression_CollectExpression_1_1_2_0 ownedRelationship+=ExpressionBodyMember) | 
	 *         (operand+=PrimaryExpression_CollectExpression_2_0_2_0 operand+=BodyExpression)
	 *     )
	 */
	protected void sequence_PrimaryExpression_TargetExpression(ISerializationContext context, CollectExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetExpression.OperatorExpression_1_1_0_0 returns FeatureChainExpression
	 *     TargetExpression.OperatorExpression_1_1_1_0 returns FeatureChainExpression
	 *     TargetExpression.CollectExpression_1_1_2_0 returns FeatureChainExpression
	 *     TargetExpression.SelectExpression_1_1_3_0 returns FeatureChainExpression
	 *
	 * Constraint:
	 *     (
	 *         (operand+=TargetExpression_FeatureChainExpression_1_0_0 ownedRelationship+=FeatureChainMember) | 
	 *         (operand+=PrimaryExpression_FeatureChainExpression_1_0 ownedRelationship+=FeatureChainMember) | 
	 *         (operand+=PrimaryExpression_FeatureChainExpression_2_1_0 ownedRelationship+=FeatureChainMember)
	 *     )
	 */
	protected void sequence_PrimaryExpression_TargetExpression_CollectExpression_1_1_2_0_OperatorExpression_1_1_0_0_OperatorExpression_1_1_1_0_SelectExpression_1_1_3_0(ISerializationContext context, FeatureChainExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetExpression returns SelectExpression
	 *     TargetExpression.FeatureChainExpression_1_0_0 returns SelectExpression
	 *     TargetExpression.OperatorExpression_1_1_0_0 returns SelectExpression
	 *     TargetExpression.OperatorExpression_1_1_1_0 returns SelectExpression
	 *     TargetExpression.CollectExpression_1_1_2_0 returns SelectExpression
	 *     TargetExpression.SelectExpression_1_1_3_0 returns SelectExpression
	 *
	 * Constraint:
	 *     (
	 *         (operand+=TargetExpression_SelectExpression_1_1_3_0 ownedRelationship+=ExpressionBodyMember) | 
	 *         (operand+=PrimaryExpression_SelectExpression_2_0_3_0 operand+=BodyExpression)
	 *     )
	 */
	protected void sequence_PrimaryExpression_TargetExpression(ISerializationContext context, SelectExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReturnParameterMember returns ReturnParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=Parameter
	 */
	protected void sequence_ReturnParameterMember(ISerializationContext context, ReturnParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SatisfactionFeatureValue returns FeatureValue
	 *
	 * Constraint:
	 *     ownedRelatedElement+=SatisfactionReferenceExpression
	 */
	protected void sequence_SatisfactionFeatureValue(ISerializationContext context, FeatureValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SatisfactionParameter returns ReferenceUsage
	 *
	 * Constraint:
	 *     ownedRelationship+=SatisfactionFeatureValue
	 */
	protected void sequence_SatisfactionParameter(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SatisfactionReferenceExpression returns FeatureReferenceExpression
	 *
	 * Constraint:
	 *     ownedRelationship+=FeatureChainMember
	 */
	protected void sequence_SatisfactionReferenceExpression(ISerializationContext context, FeatureReferenceExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SatisfactionSubjectMember returns SubjectMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=SatisfactionParameter
	 */
	protected void sequence_SatisfactionSubjectMember(ISerializationContext context, SubjectMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceItemFlowMember returns OwningMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=SourceItemFlow
	 */
	protected void sequence_SourceItemFlowMember(ISerializationContext context, OwningMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceItemFlow returns FlowConnectionUsage
	 *
	 * Constraint:
	 *     (ownedRelationship+=EmptyItemFeatureMember ownedRelationship+=ItemFlowEndMember ownedRelationship+=EmptyItemFlowEndMember)
	 */
	protected void sequence_SourceItemFlow(ISerializationContext context, FlowConnectionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceItemFlow returns SuccessionFlowConnectionUsage
	 *
	 * Constraint:
	 *     (ownedRelationship+=EmptyItemFeatureMember ownedRelationship+=ItemFlowEndMember ownedRelationship+=EmptyItemFlowEndMember)
	 */
	protected void sequence_SourceItemFlow(ISerializationContext context, SuccessionFlowConnectionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetAccessedFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptyUsage
	 */
	protected void sequence_TargetAccessedFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetBinding returns FeatureValue
	 *
	 * Constraint:
	 *     ownedRelatedElement+=TargetExpression
	 */
	protected void sequence_TargetBinding(ISerializationContext context, FeatureValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=TargetFeature
	 */
	protected void sequence_TargetFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetFeature returns ReferenceUsage
	 *
	 * Constraint:
	 *     ownedRelationship+=TargetAccessedFeatureMember
	 */
	protected void sequence_TargetFeature(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetParameter returns ReferenceUsage
	 *
	 * Constraint:
	 *     (ownedRelationship+=TargetBinding? ownedRelationship+=TargetFeatureMember)
	 */
	protected void sequence_TargetParameter(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionTargetSuccession returns SuccessionAsUsage
	 *     TargetSuccession returns SuccessionAsUsage
	 *
	 * Constraint:
	 *     (ownedRelationship+=MultiplicitySourceEndMember ownedRelationship+=ConnectorEndMember)
	 */
	protected void sequence_TargetSuccession(ISerializationContext context, SuccessionAsUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetTransitionUsage returns TransitionUsage
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=EmptyParameterMember 
	 *         (
	 *             (
	 *                 (ownedRelationship+=EmptyParameterMember ownedRelationship+=TriggerActionMember)? 
	 *                 ownedRelationship+=GuardExpressionMember? 
	 *                 ownedRelationship+=EffectBehaviorMember?
	 *             ) | 
	 *             (
	 *                 ownedRelationship+=EmptyParameterMember 
	 *                 ownedRelationship+=TriggerActionMember 
	 *                 ownedRelationship+=GuardExpressionMember? 
	 *                 ownedRelationship+=EffectBehaviorMember?
	 *             ) | 
	 *             (ownedRelationship+=GuardExpressionMember ownedRelationship+=EffectBehaviorMember?)
	 *         ) 
	 *         ownedRelationship+=TransitionSuccessionMember
	 *     )
	 */
	protected void sequence_TargetTransitionUsage(ISerializationContext context, TransitionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TransitionSourceMember returns Membership
	 *
	 * Constraint:
	 *     memberElement=[Feature|QualifiedName]
	 */
	protected void sequence_TransitionSourceMember(ISerializationContext context, Membership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.MEMBERSHIP__MEMBER_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.MEMBERSHIP__MEMBER_ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransitionSourceMemberAccess().getMemberElementFeatureQualifiedNameParserRuleCall_0_0_1(), semanticObject.eGet(SysMLPackage.Literals.MEMBERSHIP__MEMBER_ELEMENT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TransitionSourceMember returns OwningMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=OwnedFeatureChain
	 */
	protected void sequence_TransitionSourceMember(ISerializationContext context, OwningMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TransitionSuccessionMember returns OwningMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=TransitionSuccession
	 */
	protected void sequence_TransitionSuccessionMember(ISerializationContext context, OwningMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TransitionSuccession returns SuccessionAsUsage
	 *
	 * Constraint:
	 *     (ownedRelationship+=EmptySourceEndMember ownedRelationship+=ConnectorEndMember)
	 */
	protected void sequence_TransitionSuccession(ISerializationContext context, SuccessionAsUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TriggerActionMember returns TransitionFeatureMembership
	 *
	 * Constraint:
	 *     (kind=TriggerFeatureKind ownedRelatedElement+=TriggerAction)
	 */
	protected void sequence_TriggerActionMember(ISerializationContext context, TransitionFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TriggerExpression returns TriggerInvocationExpression
	 *
	 * Constraint:
	 *     ((kind=TimeTriggerKind ownedRelationship+=OwnedExpressionMember) | (kind=ChangeTriggerKind ownedRelationship+=ChangeExpressionMember))
	 */
	protected void sequence_TriggerExpression(ISerializationContext context, TriggerInvocationExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TriggerFeatureValue returns FeatureValue
	 *
	 * Constraint:
	 *     ownedRelatedElement+=TriggerExpression
	 */
	protected void sequence_TriggerFeatureValue(ISerializationContext context, FeatureValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
