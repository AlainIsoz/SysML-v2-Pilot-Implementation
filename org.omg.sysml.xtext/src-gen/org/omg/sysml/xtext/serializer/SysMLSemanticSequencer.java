/*
 * generated by Xtext 2.25.0
 */
package org.omg.sysml.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.omg.kerml.expressions.xtext.serializer.KerMLExpressionsSemanticSequencer;
import org.omg.sysml.lang.sysml.AcceptActionUsage;
import org.omg.sysml.lang.sysml.ActionDefinition;
import org.omg.sysml.lang.sysml.ActionUsage;
import org.omg.sysml.lang.sysml.AddressedConcernMembership;
import org.omg.sysml.lang.sysml.AllocationDefinition;
import org.omg.sysml.lang.sysml.AllocationUsage;
import org.omg.sysml.lang.sysml.AnalysisCaseDefinition;
import org.omg.sysml.lang.sysml.AnalysisCaseUsage;
import org.omg.sysml.lang.sysml.AnnotatingFeature;
import org.omg.sysml.lang.sysml.Annotation;
import org.omg.sysml.lang.sysml.AssertConstraintUsage;
import org.omg.sysml.lang.sysml.AttributeDefinition;
import org.omg.sysml.lang.sysml.AttributeUsage;
import org.omg.sysml.lang.sysml.BindingConnector;
import org.omg.sysml.lang.sysml.CalculationDefinition;
import org.omg.sysml.lang.sysml.CalculationUsage;
import org.omg.sysml.lang.sysml.CaseDefinition;
import org.omg.sysml.lang.sysml.CaseUsage;
import org.omg.sysml.lang.sysml.Comment;
import org.omg.sysml.lang.sysml.ConcernDefinition;
import org.omg.sysml.lang.sysml.ConcernUsage;
import org.omg.sysml.lang.sysml.ConjugatedPortDefinition;
import org.omg.sysml.lang.sysml.ConjugatedPortTyping;
import org.omg.sysml.lang.sysml.ConnectionDefinition;
import org.omg.sysml.lang.sysml.ConnectionUsage;
import org.omg.sysml.lang.sysml.ConstraintDefinition;
import org.omg.sysml.lang.sysml.ConstraintUsage;
import org.omg.sysml.lang.sysml.DecisionNode;
import org.omg.sysml.lang.sysml.Dependency;
import org.omg.sysml.lang.sysml.Documentation;
import org.omg.sysml.lang.sysml.ElementFilterMembership;
import org.omg.sysml.lang.sysml.EndFeatureMembership;
import org.omg.sysml.lang.sysml.EnumerationDefinition;
import org.omg.sysml.lang.sysml.EnumerationUsage;
import org.omg.sysml.lang.sysml.EventOccurrenceUsage;
import org.omg.sysml.lang.sysml.ExhibitStateUsage;
import org.omg.sysml.lang.sysml.Expose;
import org.omg.sysml.lang.sysml.Expression;
import org.omg.sysml.lang.sysml.Feature;
import org.omg.sysml.lang.sysml.FeatureMembership;
import org.omg.sysml.lang.sysml.FeatureReferenceExpression;
import org.omg.sysml.lang.sysml.FeatureTyping;
import org.omg.sysml.lang.sysml.FeatureValue;
import org.omg.sysml.lang.sysml.ForkNode;
import org.omg.sysml.lang.sysml.Import;
import org.omg.sysml.lang.sysml.InterfaceDefinition;
import org.omg.sysml.lang.sysml.InterfaceUsage;
import org.omg.sysml.lang.sysml.InvocationExpression;
import org.omg.sysml.lang.sysml.ItemDefinition;
import org.omg.sysml.lang.sysml.ItemFeature;
import org.omg.sysml.lang.sysml.ItemFlow;
import org.omg.sysml.lang.sysml.ItemFlowEnd;
import org.omg.sysml.lang.sysml.ItemFlowFeature;
import org.omg.sysml.lang.sysml.ItemUsage;
import org.omg.sysml.lang.sysml.JoinNode;
import org.omg.sysml.lang.sysml.LifeClass;
import org.omg.sysml.lang.sysml.LiteralBoolean;
import org.omg.sysml.lang.sysml.LiteralInteger;
import org.omg.sysml.lang.sysml.LiteralReal;
import org.omg.sysml.lang.sysml.LiteralString;
import org.omg.sysml.lang.sysml.LiteralUnbounded;
import org.omg.sysml.lang.sysml.Membership;
import org.omg.sysml.lang.sysml.MergeNode;
import org.omg.sysml.lang.sysml.MetadataFeature;
import org.omg.sysml.lang.sysml.MetadataFeatureValue;
import org.omg.sysml.lang.sysml.MultiplicityRange;
import org.omg.sysml.lang.sysml.Namespace;
import org.omg.sysml.lang.sysml.NullExpression;
import org.omg.sysml.lang.sysml.ObjectiveMembership;
import org.omg.sysml.lang.sysml.OccurrenceDefinition;
import org.omg.sysml.lang.sysml.OccurrenceUsage;
import org.omg.sysml.lang.sysml.OperatorExpression;
import org.omg.sysml.lang.sysml.ParameterMembership;
import org.omg.sysml.lang.sysml.PartDefinition;
import org.omg.sysml.lang.sysml.PartUsage;
import org.omg.sysml.lang.sysml.PathSelectExpression;
import org.omg.sysml.lang.sysml.PathStepExpression;
import org.omg.sysml.lang.sysml.PerformActionUsage;
import org.omg.sysml.lang.sysml.PortConjugation;
import org.omg.sysml.lang.sysml.PortDefinition;
import org.omg.sysml.lang.sysml.PortUsage;
import org.omg.sysml.lang.sysml.PortioningFeature;
import org.omg.sysml.lang.sysml.Redefinition;
import org.omg.sysml.lang.sysml.ReferenceUsage;
import org.omg.sysml.lang.sysml.RenderingDefinition;
import org.omg.sysml.lang.sysml.RenderingUsage;
import org.omg.sysml.lang.sysml.RequirementConstraintMembership;
import org.omg.sysml.lang.sysml.RequirementDefinition;
import org.omg.sysml.lang.sysml.RequirementUsage;
import org.omg.sysml.lang.sysml.RequirementVerificationMembership;
import org.omg.sysml.lang.sysml.ResultExpressionMembership;
import org.omg.sysml.lang.sysml.ReturnParameterMembership;
import org.omg.sysml.lang.sysml.SatisfyRequirementUsage;
import org.omg.sysml.lang.sysml.SendActionUsage;
import org.omg.sysml.lang.sysml.SourceEnd;
import org.omg.sysml.lang.sysml.StakeholderDefinition;
import org.omg.sysml.lang.sysml.StakeholderUsage;
import org.omg.sysml.lang.sysml.StateDefinition;
import org.omg.sysml.lang.sysml.StateSubactionMembership;
import org.omg.sysml.lang.sysml.StateUsage;
import org.omg.sysml.lang.sysml.SubjectMembership;
import org.omg.sysml.lang.sysml.Subsetting;
import org.omg.sysml.lang.sysml.Succession;
import org.omg.sysml.lang.sysml.SuccessionItemFlow;
import org.omg.sysml.lang.sysml.Superclassing;
import org.omg.sysml.lang.sysml.SysMLPackage;
import org.omg.sysml.lang.sysml.TargetEnd;
import org.omg.sysml.lang.sysml.TextualRepresentation;
import org.omg.sysml.lang.sysml.TransitionFeatureMembership;
import org.omg.sysml.lang.sysml.TransitionUsage;
import org.omg.sysml.lang.sysml.VariantMembership;
import org.omg.sysml.lang.sysml.VerificationCaseDefinition;
import org.omg.sysml.lang.sysml.VerificationCaseUsage;
import org.omg.sysml.lang.sysml.ViewDefinition;
import org.omg.sysml.lang.sysml.ViewRenderingMembership;
import org.omg.sysml.lang.sysml.ViewUsage;
import org.omg.sysml.lang.sysml.ViewpointDefinition;
import org.omg.sysml.lang.sysml.ViewpointUsage;
import org.omg.sysml.xtext.services.SysMLGrammarAccess;

@SuppressWarnings("all")
public class SysMLSemanticSequencer extends KerMLExpressionsSemanticSequencer {

	@Inject
	private SysMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SysMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SysMLPackage.ACCEPT_ACTION_USAGE:
				if (rule == grammarAccess.getTriggerActionRule()) {
					sequence_AcceptParameterPart(context, (AcceptActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionNodeRule()
						|| rule == grammarAccess.getAcceptNodeRule()) {
					sequence_AcceptParameterPart_ActionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(context, (AcceptActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStateActionUsageRule()
						|| rule == grammarAccess.getEffectBehaviorUsageRule()) {
					sequence_AcceptParameterPart_ActionBodyItem_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(context, (AcceptActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPerformedActionUsageRule()) {
					sequence_AcceptParameterPart_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(context, (AcceptActionUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ACTION_DEFINITION:
				sequence_ActionBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_ParameterList_SuperclassingPart(context, (ActionDefinition) semanticObject); 
				return; 
			case SysMLPackage.ACTION_USAGE:
				if (rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getConnectionEndElementRule()
						|| rule == grammarAccess.getActionRefUsageRule()) {
					sequence_ActionBodyItem_ActionRefUsage_ActionUsageParameterList_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (ActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getActionUsageRule()
						|| rule == grammarAccess.getActionFlowUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (ActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStateActionUsageRule()
						|| rule == grammarAccess.getEmptyActionUsageRule()
						|| rule == grammarAccess.getEffectBehaviorUsageRule()) {
					sequence_EmptyActionUsage(context, (ActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (ActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (ActionUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ADDRESSED_CONCERN_MEMBERSHIP:
				sequence_AddressedConcernMember_DefinitionMemberPrefix(context, (AddressedConcernMembership) semanticObject); 
				return; 
			case SysMLPackage.ALLOCATION_DEFINITION:
				sequence_ConnectionBody_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_SuperclassingPart(context, (AllocationDefinition) semanticObject); 
				return; 
			case SysMLPackage.ALLOCATION_USAGE:
				sequence_BinaryConnectorPart_ConnectionBody_Identification_MultiplicityPart_NaryConnectorPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(context, (AllocationUsage) semanticObject); 
				return; 
			case SysMLPackage.ANALYSIS_CASE_DEFINITION:
				if (rule == grammarAccess.getDefinitionElementRule()) {
					sequence_ActionBodyItem_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SuperclassingPart(context, (AnalysisCaseDefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnalysisCaseDefinitionRule()) {
					sequence_ActionBodyItem_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SuperclassingPart(context, (AnalysisCaseDefinition) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ANALYSIS_CASE_USAGE:
				if (rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_AnalysisCaseRefUsage_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (AnalysisCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnalysisCaseRefUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_AnalysisCaseRefUsage_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (AnalysisCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (AnalysisCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnalysisCaseUsageRule()
						|| rule == grammarAccess.getAnalysisCaseFlowUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (AnalysisCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (AnalysisCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (AnalysisCaseUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ANNOTATING_FEATURE:
				sequence_AnnotatingFeature_AnnotatingFeatureBody_AnnotatingFeatureDeclaration_Identification(context, (AnnotatingFeature) semanticObject); 
				return; 
			case SysMLPackage.ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()) {
					sequence_Annotation(context, (Annotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyAnnotationRule()) {
					sequence_EmptyAnnotation(context, (Annotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPrefixDocumentationRule()) {
					sequence_PrefixDocumentation(context, (Annotation) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ASSERT_CONSTRAINT_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_AssertConstraintUsage_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_InvariantPart_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(context, (AssertConstraintUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAssertConstraintUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_AssertConstraintUsage_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_InvariantPart_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(context, (AssertConstraintUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ATTRIBUTE_DEFINITION:
				sequence_DefinitionBodyItem_DefinitionPrefix_Identification_SuperclassingPart(context, (AttributeDefinition) semanticObject); 
				return; 
			case SysMLPackage.ATTRIBUTE_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getNonOccurrenceUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getAttributeUsageRule()
						|| rule == grammarAccess.getAttributeVariantUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(context, (AttributeUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (AttributeUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (AttributeUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.BINDING_CONNECTOR:
				if (rule == grammarAccess.getBindingConnectorRule()
						|| rule == grammarAccess.getNonOccurrenceUsageElementRule()) {
					sequence_BindingConnector_BindingConnectorDeclaration_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(context, (BindingConnector) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSatisfactionConnectorRule()) {
					sequence_SatisfactionConnector(context, (BindingConnector) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CALCULATION_DEFINITION:
				if (rule == grammarAccess.getDefinitionElementRule()) {
					sequence_ActionBodyItem_CalculationBody_CalculationBodyItem_CalculationDefinition_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SuperclassingPart(context, (CalculationDefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCalculationDefinitionRule()) {
					sequence_ActionBodyItem_CalculationBody_CalculationBodyItem_CalculationDefinition_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SuperclassingPart(context, (CalculationDefinition) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CALCULATION_USAGE:
				if (rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getConnectionEndElementRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationRefUsage_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (CalculationUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCalculationRefUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationRefUsage_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (CalculationUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (CalculationUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCalculationUsageRule()
						|| rule == grammarAccess.getCalculationFlowUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (CalculationUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (CalculationUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (CalculationUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CASE_DEFINITION:
				if (rule == grammarAccess.getDefinitionElementRule()) {
					sequence_ActionBodyItem_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SuperclassingPart(context, (CaseDefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCaseDefinitionRule()) {
					sequence_ActionBodyItem_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SuperclassingPart(context, (CaseDefinition) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CASE_USAGE:
				if (rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_CaseRefUsage_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (CaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCaseRefUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_CaseRefUsage_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (CaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (CaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCaseUsageRule()
						|| rule == grammarAccess.getCaseFlowUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (CaseUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.COMMENT:
				if (rule == grammarAccess.getCommentRule()
						|| rule == grammarAccess.getDefinitionElementRule()) {
					sequence_Comment_Identification(context, (Comment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDocumentationCommentRule()) {
					sequence_DocumentationComment(context, (Comment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPrefixDocumentationCommentRule()) {
					sequence_PrefixDocumentationComment(context, (Comment) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CONCERN_DEFINITION:
				sequence_ConcernBodyItem_DefinitionBodyItem_DefinitionPrefix_EmptyReturnParameterPart_Identification_OccurrenceDefinitionPrefix_ParameterList_RequirementBodyItem_SuperclassingPart(context, (ConcernDefinition) semanticObject); 
				return; 
			case SysMLPackage.CONCERN_USAGE:
				if (rule == grammarAccess.getAddressedConcernUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_AddressedConcernUsage_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (ConcernUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getConcernRefUsageRule()) {
					sequence_ActionUsageParameterList_CalculationReturnParameterPart_ConcernBodyItem_ConcernRefUsage_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (ConcernUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getConcernUsageRule()
						|| rule == grammarAccess.getConcernFlowUsageRule()) {
					sequence_ActionUsageParameterList_CalculationReturnParameterPart_ConcernBodyItem_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (ConcernUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CONJUGATED_PORT_DEFINITION:
				sequence_ConjugatedPortDefinition(context, (ConjugatedPortDefinition) semanticObject); 
				return; 
			case SysMLPackage.CONJUGATED_PORT_TYPING:
				sequence_ConjugatedPortTyping(context, (ConjugatedPortTyping) semanticObject); 
				return; 
			case SysMLPackage.CONNECTION_DEFINITION:
				sequence_ConnectionBody_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_SuperclassingPart(context, (ConnectionDefinition) semanticObject); 
				return; 
			case SysMLPackage.CONNECTION_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getConnectionUsageRule()) {
					sequence_BinaryConnectorPart_ConnectionBody_Identification_MultiplicityPart_NaryConnectorPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(context, (ConnectionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getConnectorRule()) {
					sequence_BinaryConnectorPart_ConnectionBody_NaryConnectorPart_OccurrenceUsagePrefix_UsagePrefix(context, (ConnectionUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CONSTRAINT_DEFINITION:
				if (rule == grammarAccess.getDefinitionElementRule()) {
					sequence_ActionBodyItem_CalculationBody_CalculationBodyItem_DefinitionPrefix_EmptyReturnParameterPart_Identification_OccurrenceDefinitionPrefix_ParameterList_SuperclassingPart(context, (ConstraintDefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getConstraintDefinitionRule()) {
					sequence_ActionBodyItem_CalculationBody_CalculationBodyItem_DefinitionPrefix_EmptyReturnParameterPart_Identification_OccurrenceDefinitionPrefix_ParameterList_SuperclassingPart(context, (ConstraintDefinition) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CONSTRAINT_USAGE:
				if (rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_ConstraintRefUsage_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (ConstraintUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getConstraintRefUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_ConstraintRefUsage_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (ConstraintUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRequirementConstraintUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_RequirementConstraintUsage_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (ConstraintUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (ConstraintUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getConstraintUsageRule()
						|| rule == grammarAccess.getConstraintFlowUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (ConstraintUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (ConstraintUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (ConstraintUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.DECISION_NODE:
				sequence_DecisionNode_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(context, (DecisionNode) semanticObject); 
				return; 
			case SysMLPackage.DEPENDENCY:
				sequence_Dependency_Identification(context, (Dependency) semanticObject); 
				return; 
			case SysMLPackage.DOCUMENTATION:
				sequence_OwnedDocumentation(context, (Documentation) semanticObject); 
				return; 
			case SysMLPackage.ELEMENT_FILTER_MEMBERSHIP:
				if (rule == grammarAccess.getElementFilterMemberRule()) {
					sequence_ElementFilterMember(context, (ElementFilterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFilterPackageMemberRule()) {
					sequence_FilterPackageMember(context, (ElementFilterMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.END_FEATURE_MEMBERSHIP:
				if (rule == grammarAccess.getConnectionUsageMemberRule()
						|| rule == grammarAccess.getConnectionEndMemberRule()) {
					sequence_ConnectionEndMember_DefinitionMemberPrefix(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getConnectorEndMemberRule()) {
					sequence_ConnectorEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceUsageMemberRule()
						|| rule == grammarAccess.getInterfaceEndMemberRule()) {
					sequence_DefinitionMemberPrefix_InterfaceEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyItemFlowEndMemberRule()) {
					sequence_EmptyItemFlowEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptySourceEndMemberRule()) {
					sequence_EmptySourceEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyTargetEndMemberRule()) {
					sequence_EmptyTargetEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFlowEndMemberRule()) {
					sequence_ItemFlowEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMultiplicitySourceEndMemberRule()) {
					sequence_MultiplicitySourceEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ENUMERATION_DEFINITION:
				sequence_EnumerationBody_Identification_SuperclassingPart(context, (EnumerationDefinition) semanticObject); 
				return; 
			case SysMLPackage.ENUMERATION_USAGE:
				sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValueOrFlowPart_ValuePart(context, (EnumerationUsage) semanticObject); 
				return; 
			case SysMLPackage.EVENT_OCCURRENCE_USAGE:
				sequence_DefinitionBodyItem_EventOccurrenceUsage_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(context, (EventOccurrenceUsage) semanticObject); 
				return; 
			case SysMLPackage.EXHIBIT_STATE_USAGE:
				sequence_ActionUsageParameterList_ExhibitStateUsage_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_StateBodyPart_StateDefBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (ExhibitStateUsage) semanticObject); 
				return; 
			case SysMLPackage.EXPOSE:
				sequence_Expose_ImportedFilterPackage_ImportedNamespace(context, (Expose) semanticObject); 
				return; 
			case SysMLPackage.EXPRESSION:
				if (rule == grammarAccess.getExpressionBodyRule()
						|| rule == grammarAccess.getOwnedExpressionRule()
						|| rule == grammarAccess.getConditionalExpressionRule()
						|| action == grammarAccess.getConditionalExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getNullCoalescingExpressionRule()
						|| action == grammarAccess.getNullCoalescingExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getXorExpressionRule()
						|| action == grammarAccess.getXorExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getEqualityExpressionRule()
						|| action == grammarAccess.getEqualityExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getClassificationExpressionRule()
						|| action == grammarAccess.getClassificationExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getRelationalExpressionRule()
						|| action == grammarAccess.getRelationalExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getRangeExpressionRule()
						|| action == grammarAccess.getRangeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAdditiveExpressionRule()
						|| action == grammarAccess.getAdditiveExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getMultiplicativeExpressionRule()
						|| action == grammarAccess.getMultiplicativeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getExponentiationExpressionRule()
						|| action == grammarAccess.getExponentiationExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getUnitsExpressionRule()
						|| action == grammarAccess.getUnitsExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getUnaryExpressionRule()
						|| rule == grammarAccess.getExtentExpressionRule()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_1_0_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_1_1_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getPathStepExpressionOperandAction_1_2_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getPathSelectExpressionOperandAction_1_3_0()
						|| rule == grammarAccess.getBaseExpressionRule()
						|| rule == grammarAccess.getSequenceExpressionRule()
						|| action == grammarAccess.getSequenceExpressionAccess().getOperatorExpressionOperandAction_1_1_0()) {
					sequence_ActionBodyItem_CalculationBody_CalculationBodyItem(context, (Expression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFunctionReferenceRule()) {
					sequence_FunctionReference(context, (Expression) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE:
				if (rule == grammarAccess.getEmptyFeatureRule()
						|| rule == grammarAccess.getBodyParameterRule()) {
					sequence_BodyParameter_EmptyFeature(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getConnectorEndRule()) {
					sequence_ConnectorEnd(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeReferenceRule()) {
					sequence_TypeReference(context, (Feature) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_MEMBERSHIP:
				if (rule == grammarAccess.getActionNodeMemberRule()) {
					sequence_ActionNodeMember_DefinitionMemberPrefix(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAffectedStakeholderMemberRule()) {
					sequence_AffectedStakeholderMember_DefinitionMemberPrefix(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBehaviorUsageMemberRule()) {
					sequence_BehaviorUsageMember_DefinitionMemberPrefix(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEntryTransitionMemberRule()) {
					sequence_DefinitionMemberPrefix_EntryTransitionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFlowUsageMemberRule()) {
					sequence_DefinitionMemberPrefix_FlowUsageMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInitialNodeMemberRule()) {
					sequence_DefinitionMemberPrefix_InitialNodeMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNonOccurrenceUsageMemberRule()) {
					sequence_DefinitionMemberPrefix_NonOccurrenceUsageMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getConnectionUsageMemberRule()
						|| rule == grammarAccess.getInterfaceUsageMemberRule()) {
					sequence_DefinitionMemberPrefix_NonOccurrenceUsageMember_OccurrenceUsageMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOccurrenceUsageMemberRule()) {
					sequence_DefinitionMemberPrefix_OccurrenceUsageMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStructureUsageMemberRule()) {
					sequence_DefinitionMemberPrefix_StructureUsageMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTargetSuccessionMemberRule()) {
					sequence_DefinitionMemberPrefix_TargetSuccessionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTargetTransitionUsageMemberRule()) {
					sequence_DefinitionMemberPrefix_TargetTransitionUsageMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTransitionUsageMemberRule()) {
					sequence_DefinitionMemberPrefix_TransitionUsageMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyItemFeatureMemberRule()) {
					sequence_EmptyItemFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyItemFlowFeatureMemberRule()) {
					sequence_EmptyItemFlowFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptySuccessionMemberRule()) {
					sequence_EmptySuccessionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionBodyMemberRule()) {
					sequence_ExpressionBodyMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeaturePathExpressionMemberRule()) {
					sequence_FeaturePathExpressionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFunctionReferenceMemberRule()) {
					sequence_FunctionReferenceMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGuardedSuccessionMemberRule()) {
					sequence_GuardedSuccessionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFeatureMemberRule()) {
					sequence_ItemFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFlowFeatureMemberRule()) {
					sequence_ItemFlowFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMetadataFeatureMemberRule()) {
					sequence_MetadataFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNamedExpressionMemberRule()) {
					sequence_NamedExpressionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedExpressionMemberRule()) {
					sequence_OwnedExpressionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPortioningFeatureMemberRule()) {
					sequence_PortioningFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTrueLiteralMemberRule()) {
					sequence_TrueLiteralMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeReferenceMemberRule()) {
					sequence_TypeReferenceMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_REFERENCE_EXPRESSION:
				if (action == grammarAccess.getFeaturePathExpressionAccess().getPathStepExpressionOperandAction_1_0()
						|| rule == grammarAccess.getOwnedExpressionRule()
						|| rule == grammarAccess.getConditionalExpressionRule()
						|| action == grammarAccess.getConditionalExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getNullCoalescingExpressionRule()
						|| action == grammarAccess.getNullCoalescingExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getXorExpressionRule()
						|| action == grammarAccess.getXorExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getEqualityExpressionRule()
						|| action == grammarAccess.getEqualityExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getClassificationExpressionRule()
						|| action == grammarAccess.getClassificationExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getRelationalExpressionRule()
						|| action == grammarAccess.getRelationalExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getRangeExpressionRule()
						|| action == grammarAccess.getRangeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAdditiveExpressionRule()
						|| action == grammarAccess.getAdditiveExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getMultiplicativeExpressionRule()
						|| action == grammarAccess.getMultiplicativeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getExponentiationExpressionRule()
						|| action == grammarAccess.getExponentiationExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getUnitsExpressionRule()
						|| action == grammarAccess.getUnitsExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getUnaryExpressionRule()
						|| rule == grammarAccess.getExtentExpressionRule()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_1_0_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_1_1_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getPathStepExpressionOperandAction_1_2_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getPathSelectExpressionOperandAction_1_3_0()
						|| rule == grammarAccess.getBaseExpressionRule()
						|| rule == grammarAccess.getSequenceExpressionRule()
						|| action == grammarAccess.getSequenceExpressionAccess().getOperatorExpressionOperandAction_1_1_0()
						|| rule == grammarAccess.getFeatureReferenceExpressionRule()) {
					sequence_FeatureReferenceExpression(context, (FeatureReferenceExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSelfReferenceExpressionRule()) {
					sequence_SelfReferenceExpression(context, (FeatureReferenceExpression) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_TYPING:
				if (rule == grammarAccess.getMetadataTypingRule()) {
					sequence_MetadataTyping(context, (FeatureTyping) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedFeatureTypingRule()
						|| rule == grammarAccess.getPortTypingRule()) {
					sequence_OwnedFeatureTyping(context, (FeatureTyping) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_VALUE:
				sequence_FeatureValue(context, (FeatureValue) semanticObject); 
				return; 
			case SysMLPackage.FORK_NODE:
				sequence_ForkNode_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(context, (ForkNode) semanticObject); 
				return; 
			case SysMLPackage.IMPORT:
				if (rule == grammarAccess.getEmptyImportRule()) {
					sequence_EmptyImport(context, (Import) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getImportRule()) {
					sequence_Import_ImportedFilterPackage_ImportedNamespace(context, (Import) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFilterPackageImportRule()) {
					sequence_ImportedNamespace(context, (Import) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.INTERFACE_DEFINITION:
				sequence_DefinitionPrefix_Identification_InterfaceDefBody_OccurrenceDefinitionPrefix_SuperclassingPart(context, (InterfaceDefinition) semanticObject); 
				return; 
			case SysMLPackage.INTERFACE_USAGE:
				sequence_BinaryConnectorPart_Identification_InterfaceDefBody_MultiplicityPart_NaryConnectorPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(context, (InterfaceUsage) semanticObject); 
				return; 
			case SysMLPackage.INVOCATION_EXPRESSION:
				sequence_InvocationExpression_NamedArgumentList_PositionalArgumentList(context, (InvocationExpression) semanticObject); 
				return; 
			case SysMLPackage.ITEM_DEFINITION:
				sequence_DefinitionBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_SuperclassingPart(context, (ItemDefinition) semanticObject); 
				return; 
			case SysMLPackage.ITEM_FEATURE:
				if (rule == grammarAccess.getEmptyItemFeatureRule()) {
					sequence_EmptyItemFeature(context, (ItemFeature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFeatureRule()) {
					sequence_ItemFeature(context, (ItemFeature) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ITEM_FLOW:
				if (rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()) {
					sequence_BinaryConnectorPart_DefinitionBodyItem_Identification_ItemFlow_ItemFlowDeclaration_Message_MessageDeclaration_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (ItemFlow) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMessageRule()) {
					sequence_BinaryConnectorPart_DefinitionBodyItem_Identification_Message_MessageDeclaration_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (ItemFlow) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFlowRule()) {
					sequence_DefinitionBodyItem_Identification_ItemFlow_ItemFlowDeclaration_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(context, (ItemFlow) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSourceItemFlowRule()) {
					sequence_SourceItemFlow(context, (ItemFlow) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ITEM_FLOW_END:
				if (rule == grammarAccess.getEmptyItemFlowEndRule()) {
					sequence_EmptyItemFlowEnd(context, (ItemFlowEnd) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFlowEndRule()) {
					sequence_ItemFlowEnd(context, (ItemFlowEnd) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ITEM_FLOW_FEATURE:
				if (rule == grammarAccess.getEmptyItemFlowFeatureRule()) {
					sequence_EmptyItemFlowFeature(context, (ItemFlowFeature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFlowFeatureRule()) {
					sequence_ItemFlowFeature(context, (ItemFlowFeature) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ITEM_USAGE:
				if (rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getItemRefUsageRule()
						|| rule == grammarAccess.getConnectionEndElementRule()) {
					sequence_DefinitionBodyItem_Identification_ItemRefUsage_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(context, (ItemUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getItemUsageRule()
						|| rule == grammarAccess.getItemFlowUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(context, (ItemUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (ItemUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (ItemUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.JOIN_NODE:
				sequence_Identification_JoinNode_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(context, (JoinNode) semanticObject); 
				return; 
			case SysMLPackage.LIFE_CLASS:
				sequence_LifeClass(context, (LifeClass) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_BOOLEAN:
				if (rule == grammarAccess.getOwnedExpressionRule()
						|| rule == grammarAccess.getConditionalExpressionRule()
						|| action == grammarAccess.getConditionalExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getNullCoalescingExpressionRule()
						|| action == grammarAccess.getNullCoalescingExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getXorExpressionRule()
						|| action == grammarAccess.getXorExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getEqualityExpressionRule()
						|| action == grammarAccess.getEqualityExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getClassificationExpressionRule()
						|| action == grammarAccess.getClassificationExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getRelationalExpressionRule()
						|| action == grammarAccess.getRelationalExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getRangeExpressionRule()
						|| action == grammarAccess.getRangeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAdditiveExpressionRule()
						|| action == grammarAccess.getAdditiveExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getMultiplicativeExpressionRule()
						|| action == grammarAccess.getMultiplicativeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getExponentiationExpressionRule()
						|| action == grammarAccess.getExponentiationExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getUnitsExpressionRule()
						|| action == grammarAccess.getUnitsExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getUnaryExpressionRule()
						|| rule == grammarAccess.getExtentExpressionRule()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_1_0_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_1_1_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getPathStepExpressionOperandAction_1_2_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getPathSelectExpressionOperandAction_1_3_0()
						|| rule == grammarAccess.getBaseExpressionRule()
						|| rule == grammarAccess.getSequenceExpressionRule()
						|| action == grammarAccess.getSequenceExpressionAccess().getOperatorExpressionOperandAction_1_1_0()
						|| rule == grammarAccess.getLiteralExpressionRule()
						|| rule == grammarAccess.getLiteralBooleanRule()) {
					sequence_LiteralBoolean(context, (LiteralBoolean) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTrueLiteralExpressionRule()) {
					sequence_TrueLiteralExpression(context, (LiteralBoolean) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.LITERAL_INTEGER:
				sequence_LiteralInteger(context, (LiteralInteger) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_REAL:
				sequence_LiteralReal(context, (LiteralReal) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_STRING:
				sequence_LiteralString(context, (LiteralString) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_UNBOUNDED:
				sequence_LiteralUnbounded(context, (LiteralUnbounded) semanticObject); 
				return; 
			case SysMLPackage.MEMBERSHIP:
				if (rule == grammarAccess.getConjugatedPortDefinitionMemberRule()) {
					sequence_ConjugatedPortDefinitionMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNestedDefinitionMemberRule()) {
					sequence_DefinitionMemberPrefix_NonUsagePackageMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureReferenceMemberRule()) {
					sequence_FeatureReferenceMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLifeClassMembershipRule()) {
					sequence_LifeClassMembership(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMultiplicityExpressionMemberRule()) {
					sequence_MultiplicityExpressionMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMultiplicityMemberRule()) {
					sequence_MultiplicityMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPackageMemberRule()) {
					sequence_NonUsagePackageMember_PackageMember_UsagePackageMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSatisfactionConnectorMemberRule()) {
					sequence_SatisfactionConnectorMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSourceItemFlowMemberRule()) {
					sequence_SourceItemFlowMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTransitionSourceMemberRule()) {
					sequence_TransitionSourceMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTransitionSuccessionMemberRule()) {
					sequence_TransitionSuccessionMember(context, (Membership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.MERGE_NODE:
				sequence_Identification_MergeNode_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(context, (MergeNode) semanticObject); 
				return; 
			case SysMLPackage.METADATA_FEATURE:
				sequence_MetadataFeature(context, (MetadataFeature) semanticObject); 
				return; 
			case SysMLPackage.METADATA_FEATURE_VALUE:
				sequence_MetadataFeatureValue(context, (MetadataFeatureValue) semanticObject); 
				return; 
			case SysMLPackage.MULTIPLICITY_RANGE:
				sequence_Multiplicity(context, (MultiplicityRange) semanticObject); 
				return; 
			case SysMLPackage.NAMESPACE:
				sequence_PackageBodyElement_RootNamespace(context, (Namespace) semanticObject); 
				return; 
			case SysMLPackage.NULL_EXPRESSION:
				sequence_NullExpression(context, (NullExpression) semanticObject); 
				return; 
			case SysMLPackage.OBJECTIVE_MEMBERSHIP:
				sequence_DefinitionMemberPrefix_ObjectiveMember(context, (ObjectiveMembership) semanticObject); 
				return; 
			case SysMLPackage.OCCURRENCE_DEFINITION:
				if (rule == grammarAccess.getDefinitionElementRule()) {
					sequence_DefinitionBodyItem_DefinitionPrefix_Identification_IndividualDefinition_OccurrenceDefinitionPrefix_SuperclassingPart(context, (OccurrenceDefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getIndividualDefinitionRule()) {
					sequence_DefinitionBodyItem_DefinitionPrefix_Identification_IndividualDefinition_SuperclassingPart(context, (OccurrenceDefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOccurrenceDefinitionRule()) {
					sequence_DefinitionBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_SuperclassingPart(context, (OccurrenceDefinition) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.OCCURRENCE_USAGE:
				if (rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()) {
					sequence_DefinitionBodyItem_Identification_IndividualRefUsage_MultiplicityPart_OccurrenceRefUsage_OccurrenceUsagePrefix_PortionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(context, (OccurrenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getIndividualRefUsageRule()) {
					sequence_DefinitionBodyItem_Identification_IndividualRefUsage_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(context, (OccurrenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()) {
					sequence_DefinitionBodyItem_Identification_IndividualUsage_MultiplicityPart_OccurrenceUsagePrefix_PortionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(context, (OccurrenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getIndividualUsageRule()) {
					sequence_DefinitionBodyItem_Identification_IndividualUsage_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(context, (OccurrenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOccurrenceRefUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceRefUsage_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(context, (OccurrenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageRule()
						|| rule == grammarAccess.getOccurrenceFlowUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(context, (OccurrenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPortionUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_PortionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(context, (OccurrenceUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.OPERATOR_EXPRESSION:
				sequence_AdditiveExpression_AndExpression_ClassificationExpression_ConditionalExpression_EqualityExpression_ExponentiationExpression_ExtentExpression_ImpliesExpression_MultiplicativeExpression_NamedArgumentList_NullCoalescingExpression_OrExpression_PositionalArgumentList_PrimaryExpression_RangeExpression_RelationalExpression_SequenceExpression_UnaryExpression_UnitsExpression_XorExpression(context, (OperatorExpression) semanticObject); 
				return; 
			case SysMLPackage.PACKAGE:
				if (rule == grammarAccess.getFilterPackageRule()) {
					sequence_FilterPackage(context, (org.omg.sysml.lang.sysml.Package) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPackageRule()
						|| rule == grammarAccess.getDefinitionElementRule()) {
					sequence_Identification_PackageBody(context, (org.omg.sysml.lang.sysml.Package) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PARAMETER_MEMBERSHIP:
				if (rule == grammarAccess.getActionUsageParameterMemberRule()) {
					sequence_ActionUsageParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBodyParameterMemberRule()) {
					sequence_BodyParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterFlowUsageMemberRule()) {
					sequence_DefinitionMemberPrefix_ParameterFlowUsageMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyParameterMemberRule()) {
					sequence_EmptyParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemParameterMemberRule()) {
					sequence_ItemParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNodeParameterMemberRule()) {
					sequence_NodeParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterMemberRule()) {
					sequence_ParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PART_DEFINITION:
				sequence_DefinitionBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_SuperclassingPart(context, (PartDefinition) semanticObject); 
				return; 
			case SysMLPackage.PART_USAGE:
				if (rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getPartRefUsageRule()
						|| rule == grammarAccess.getConnectionEndElementRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_PartRefUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(context, (PartUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getPartUsageRule()
						|| rule == grammarAccess.getPartFlowUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(context, (PartUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (PartUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (PartUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PATH_SELECT_EXPRESSION:
				sequence_PrimaryExpression(context, (PathSelectExpression) semanticObject); 
				return; 
			case SysMLPackage.PATH_STEP_EXPRESSION:
				if (rule == grammarAccess.getFeaturePathExpressionRule()
						|| action == grammarAccess.getFeaturePathExpressionAccess().getPathStepExpressionOperandAction_1_0()) {
					sequence_FeaturePathExpression(context, (PathStepExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedExpressionRule()
						|| rule == grammarAccess.getConditionalExpressionRule()
						|| action == grammarAccess.getConditionalExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getNullCoalescingExpressionRule()
						|| action == grammarAccess.getNullCoalescingExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getXorExpressionRule()
						|| action == grammarAccess.getXorExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getEqualityExpressionRule()
						|| action == grammarAccess.getEqualityExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getClassificationExpressionRule()
						|| action == grammarAccess.getClassificationExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getRelationalExpressionRule()
						|| action == grammarAccess.getRelationalExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getRangeExpressionRule()
						|| action == grammarAccess.getRangeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAdditiveExpressionRule()
						|| action == grammarAccess.getAdditiveExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getMultiplicativeExpressionRule()
						|| action == grammarAccess.getMultiplicativeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getExponentiationExpressionRule()
						|| action == grammarAccess.getExponentiationExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getUnitsExpressionRule()
						|| action == grammarAccess.getUnitsExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getUnaryExpressionRule()
						|| rule == grammarAccess.getExtentExpressionRule()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_1_0_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_1_1_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getPathStepExpressionOperandAction_1_2_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getPathSelectExpressionOperandAction_1_3_0()
						|| rule == grammarAccess.getBaseExpressionRule()
						|| rule == grammarAccess.getSequenceExpressionRule()
						|| action == grammarAccess.getSequenceExpressionAccess().getOperatorExpressionOperandAction_1_1_0()) {
					sequence_PrimaryExpression(context, (PathStepExpression) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PERFORM_ACTION_USAGE:
				if (rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getPerformActionUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_Identification_MultiplicityPart_OccurrenceUsagePrefix_PerformActionUsageDeclaration_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (PerformActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStateActionUsageRule()
						|| rule == grammarAccess.getEffectBehaviorUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_Identification_MultiplicityPart_PerformActionUsageDeclaration_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (PerformActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPerformedActionUsageRule()) {
					sequence_ActionUsageParameterList_Identification_MultiplicityPart_PerformActionUsageDeclaration_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (PerformActionUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PORT_CONJUGATION:
				sequence_PortConjugation(context, (PortConjugation) semanticObject); 
				return; 
			case SysMLPackage.PORT_DEFINITION:
				sequence_DefinitionBodyItem_DefinitionPrefix_Identification_PortDefinition_SuperclassingPart(context, (PortDefinition) semanticObject); 
				return; 
			case SysMLPackage.PORT_USAGE:
				if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getConnectionEndElementRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_PortTypings_Redefines_Redefinitions_Subsets_Subsettings_UsagePrefix_ValueOrFlowPart_ValuePart(context, (PortUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPortUsageRule()
						|| rule == grammarAccess.getPortEndUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_PortTypings_Redefines_Redefinitions_Subsets_Subsettings_UsagePrefix_ValueOrFlowPart_ValuePart(context, (PortUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PORTIONING_FEATURE:
				sequence_PortioningFeature(context, (PortioningFeature) semanticObject); 
				return; 
			case SysMLPackage.REDEFINITION:
				if (rule == grammarAccess.getEmptyRedefinitionRule()) {
					sequence_EmptyRedefinition(context, (Redefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedRedefinitionRule()) {
					sequence_OwnedRedefinition(context, (Redefinition) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.REFERENCE_USAGE:
				if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_ActionUsageParameter_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getReferenceVariantUsageRule()
						|| rule == grammarAccess.getVariantUsageElementRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_ReferenceVariantUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getReferenceUsageRule()
						|| rule == grammarAccess.getReferenceEndUsageRule()
						|| rule == grammarAccess.getNonOccurrenceUsageElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getConnectionEndElementRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSubjectUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValueOrFlowPart_ValuePart(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyParameterRule()) {
					sequence_EmptyParameter(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemParameterRule()) {
					sequence_Identification_ItemParameter_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNodeParameterRule()) {
					sequence_NodeParameter(context, (ReferenceUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.RENDERING_DEFINITION:
				sequence_DefinitionBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_SuperclassingPart(context, (RenderingDefinition) semanticObject); 
				return; 
			case SysMLPackage.RENDERING_USAGE:
				if (rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getRenderingRefUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RenderingRefUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(context, (RenderingUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getRenderingUsageRule()
						|| rule == grammarAccess.getRenderingFlowUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(context, (RenderingUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getViewRenderingUsageRule()) {
					sequence_DefinitionBodyItem_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ViewRenderingUsage(context, (RenderingUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (RenderingUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (RenderingUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.REQUIREMENT_CONSTRAINT_MEMBERSHIP:
				sequence_DefinitionMemberPrefix_RequirementConstraintMember(context, (RequirementConstraintMembership) semanticObject); 
				return; 
			case SysMLPackage.REQUIREMENT_DEFINITION:
				sequence_DefinitionBodyItem_DefinitionPrefix_EmptyReturnParameterPart_Identification_OccurrenceDefinitionPrefix_ParameterList_RequirementBodyItem_SuperclassingPart(context, (RequirementDefinition) semanticObject); 
				return; 
			case SysMLPackage.REQUIREMENT_USAGE:
				if (rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getRequirementRefUsageRule()) {
					sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RequirementBodyItem_RequirementRefUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (RequirementUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getRequirementUsageRule()
						|| rule == grammarAccess.getRequirementFlowUsageRule()) {
					sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (RequirementUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRequirementVerificationUsageRule()) {
					sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_RequirementVerificationUsage_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (RequirementUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getObjectiveRequirementUsageRule()) {
					sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (RequirementUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (RequirementUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (RequirementUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.REQUIREMENT_VERIFICATION_MEMBERSHIP:
				sequence_DefinitionMemberPrefix_RequirementVerificationMember(context, (RequirementVerificationMembership) semanticObject); 
				return; 
			case SysMLPackage.RESULT_EXPRESSION_MEMBERSHIP:
				sequence_DefinitionMemberPrefix_ResultExpressionMember(context, (ResultExpressionMembership) semanticObject); 
				return; 
			case SysMLPackage.RETURN_PARAMETER_MEMBERSHIP:
				if (rule == grammarAccess.getCalculationReturnParameterMemberRule()) {
					sequence_CalculationReturnParameterMember(context, (ReturnParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getReturnParameterFlowUsageMemberRule()) {
					sequence_DefinitionMemberPrefix_ReturnParameterFlowUsageMember(context, (ReturnParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyReturnParameterMemberRule()) {
					sequence_EmptyReturnParameterMember(context, (ReturnParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getReturnParameterMemberRule()) {
					sequence_ReturnParameterMember(context, (ReturnParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSelfReferenceMemberRule()) {
					sequence_SelfReferenceMember(context, (ReturnParameterMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SATISFY_REQUIREMENT_USAGE:
				sequence_ActionUsageParameterList_DefinitionBodyItem_Identification_InvariantPart_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RequirementBodyItem_SatisfyRequirementUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (SatisfyRequirementUsage) semanticObject); 
				return; 
			case SysMLPackage.SEND_ACTION_USAGE:
				if (rule == grammarAccess.getActionNodeRule()
						|| rule == grammarAccess.getSendNodeRule()) {
					sequence_ActionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_SendNodeDeclaration_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(context, (SendActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStateActionUsageRule()
						|| rule == grammarAccess.getEffectBehaviorUsageRule()) {
					sequence_ActionBodyItem_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_SendNodeDeclaration_Subsets_Subsettings_TypedBy_Typings(context, (SendActionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPerformedActionUsageRule()) {
					sequence_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_SendNodeDeclaration_Subsets_Subsettings_TypedBy_Typings(context, (SendActionUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SOURCE_END:
				if (rule == grammarAccess.getEmptySourceEndRule()) {
					sequence_EmptySourceEnd(context, (SourceEnd) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMultiplicitySourceEndRule()) {
					sequence_MultiplicitySourceEnd(context, (SourceEnd) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.STAKEHOLDER_DEFINITION:
				sequence_DefinitionBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_SuperclassingPart(context, (StakeholderDefinition) semanticObject); 
				return; 
			case SysMLPackage.STAKEHOLDER_USAGE:
				if (rule == grammarAccess.getAffectedStakeholderUsageRule()) {
					sequence_AffectedStakeholderUsage_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(context, (StakeholderUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getStakeholderRefUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_StakeholderRefUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(context, (StakeholderUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getStakeholderUsageRule()
						|| rule == grammarAccess.getStakeholderFlowUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(context, (StakeholderUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.STATE_DEFINITION:
				sequence_Identification_ParameterList_StateBodyPart_StateDefBodyItem_StateDefinition_SuperclassingPart(context, (StateDefinition) semanticObject); 
				return; 
			case SysMLPackage.STATE_SUBACTION_MEMBERSHIP:
				if (rule == grammarAccess.getDoActionMemberRule()) {
					sequence_DefinitionMemberPrefix_DoActionMember(context, (StateSubactionMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEntryActionMemberRule()) {
					sequence_DefinitionMemberPrefix_EntryActionMember(context, (StateSubactionMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExitActionMemberRule()) {
					sequence_DefinitionMemberPrefix_ExitActionMember(context, (StateSubactionMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.STATE_USAGE:
				if (rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getConnectionEndElementRule()
						|| rule == grammarAccess.getStateRefUsageRule()) {
					sequence_ActionUsageParameterList_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_StateBodyPart_StateDefBodyItem_StateRefUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (StateUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getStateUsageRule()
						|| rule == grammarAccess.getStateFlowUsageRule()) {
					sequence_ActionUsageParameterList_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_StateBodyPart_StateDefBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (StateUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (StateUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (StateUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SUBJECT_MEMBERSHIP:
				sequence_DefinitionMemberPrefix_SubjectMember(context, (SubjectMembership) semanticObject); 
				return; 
			case SysMLPackage.SUBSETTING:
				sequence_OwnedSubsetting(context, (Subsetting) semanticObject); 
				return; 
			case SysMLPackage.SUCCESSION:
				if (rule == grammarAccess.getSuccessionRule()
						|| rule == grammarAccess.getNonOccurrenceUsageElementRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_Succession_SuccessionDeclaration_TypedBy_Typings(context, (Succession) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptySuccessionRule()) {
					sequence_EmptySuccession(context, (Succession) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionTargetSuccessionRule()
						|| rule == grammarAccess.getTargetSuccessionRule()) {
					sequence_TargetSuccession(context, (Succession) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTransitionSuccessionRule()) {
					sequence_TransitionSuccession(context, (Succession) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SUCCESSION_ITEM_FLOW:
				if (rule == grammarAccess.getSuccessionItemFlowRule()
						|| rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()) {
					sequence_DefinitionBodyItem_Identification_ItemFlowDeclaration_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_SuccessionItemFlow_TypedBy_Typings(context, (SuccessionItemFlow) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSourceItemFlowRule()) {
					sequence_SourceItemFlow(context, (SuccessionItemFlow) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SUPERCLASSING:
				sequence_OwnedSuperclassing(context, (Superclassing) semanticObject); 
				return; 
			case SysMLPackage.TARGET_END:
				sequence_EmptyTargetEnd(context, (TargetEnd) semanticObject); 
				return; 
			case SysMLPackage.TEXTUAL_REPRESENTATION:
				sequence_Identification_TextualRepresentation(context, (TextualRepresentation) semanticObject); 
				return; 
			case SysMLPackage.TRANSITION_FEATURE_MEMBERSHIP:
				if (rule == grammarAccess.getEffectBehaviorMemberRule()) {
					sequence_EffectBehaviorMember(context, (TransitionFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGuardExpressionMemberRule()) {
					sequence_GuardExpressionMember(context, (TransitionFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTriggerActionMemberRule()) {
					sequence_TriggerActionMember(context, (TransitionFeatureMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.TRANSITION_USAGE:
				if (rule == grammarAccess.getActionTargetSuccessionRule()) {
					sequence_DefaultTargetSuccession_GuardedTargetSuccession(context, (TransitionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDefaultTargetSuccessionRule()) {
					sequence_DefaultTargetSuccession(context, (TransitionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGuardedSuccessionRule()) {
					sequence_GuardedSuccession_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(context, (TransitionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGuardedTargetSuccessionRule()) {
					sequence_GuardedTargetSuccession(context, (TransitionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTransitionUsageRule()) {
					sequence_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TransitionUsage_TypedBy_Typings(context, (TransitionUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTargetTransitionUsageRule()) {
					sequence_TargetTransitionUsage(context, (TransitionUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.VARIANT_MEMBERSHIP:
				if (rule == grammarAccess.getEnumerationUsageMemberRule()) {
					sequence_DefinitionMemberPrefix_EnumerationUsageMember(context, (VariantMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVariantUsageMemberRule()) {
					sequence_DefinitionMemberPrefix_VariantUsageMember(context, (VariantMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.VERIFICATION_CASE_DEFINITION:
				if (rule == grammarAccess.getDefinitionElementRule()) {
					sequence_ActionBodyItem_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SuperclassingPart(context, (VerificationCaseDefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVerificationCaseDefinitionRule()) {
					sequence_ActionBodyItem_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SuperclassingPart(context, (VerificationCaseDefinition) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.VERIFICATION_CASE_USAGE:
				if (rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart_VerificationCaseRefUsage(context, (VerificationCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVerificationCaseRefUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart_VerificationCaseRefUsage(context, (VerificationCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (VerificationCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVerificationCaseUsageRule()
						|| rule == grammarAccess.getVerificationCaseFlowUsageRule()) {
					sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (VerificationCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (VerificationCaseUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (VerificationCaseUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.VIEW_DEFINITION:
				sequence_DefinitionBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_SuperclassingPart_ViewDefinitionBodyItem(context, (ViewDefinition) semanticObject); 
				return; 
			case SysMLPackage.VIEW_RENDERING_MEMBERSHIP:
				sequence_DefinitionMemberPrefix_ViewRenderingMember(context, (ViewRenderingMembership) semanticObject); 
				return; 
			case SysMLPackage.VIEW_USAGE:
				if (rule == grammarAccess.getStructureUsageElementRule()
						|| rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getViewRefUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart_ViewBodyItem_ViewRefUsage(context, (ViewUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getViewUsageRule()
						|| rule == grammarAccess.getViewFlowUsageRule()) {
					sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart_ViewBodyItem(context, (ViewUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (ViewUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (ViewUsage) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.VIEWPOINT_DEFINITION:
				sequence_DefinitionBodyItem_DefinitionPrefix_EmptyReturnParameterPart_Identification_OccurrenceDefinitionPrefix_ParameterList_RequirementBodyItem_SuperclassingPart(context, (ViewpointDefinition) semanticObject); 
				return; 
			case SysMLPackage.VIEWPOINT_USAGE:
				if (rule == grammarAccess.getOccurrenceUsageElementRule()
						|| rule == grammarAccess.getBehaviorUsageElementRule()
						|| rule == grammarAccess.getVariantUsageElementRule()
						|| rule == grammarAccess.getViewpointRefUsageRule()) {
					sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart_ViewpointRefUsage(context, (ViewpointUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUsageElementRule()
						|| rule == grammarAccess.getFlowUsageElementRule()
						|| rule == grammarAccess.getViewpointUsageRule()
						|| rule == grammarAccess.getViewpointFlowUsageRule()) {
					sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(context, (ViewpointUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionUsageParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(context, (ViewpointUsage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(context, (ViewpointUsage) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     TriggerAction returns AcceptActionUsage
	 *
	 * Constraint:
	 *     (ownedRelationship+=ItemParameterMember (ownedRelationship+=NodeParameterMember | ownedRelationship+=EmptyParameterMember))
	 */
	protected void sequence_AcceptParameterPart(ISerializationContext context, AcceptActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns AcceptActionUsage
	 *     AcceptNode returns AcceptActionUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         ownedRelationship+=ItemParameterMember 
	 *         (ownedRelationship+=NodeParameterMember | ownedRelationship+=EmptyParameterMember) 
	 *         ownedRelationship+=OwnedDocumentation? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	 *                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	 *                 (
	 *                     ownedRelationship+=EmptySuccessionMember? 
	 *                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                     ownedRelationship+=TargetSuccessionMember*
	 *                 ) | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             ownedRelationship+=OwnedDocumentation?
	 *         )*
	 *     )
	 */
	protected void sequence_AcceptParameterPart_ActionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(ISerializationContext context, AcceptActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateActionUsage returns AcceptActionUsage
	 *     EffectBehaviorUsage returns AcceptActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         ownedRelationship+=ItemParameterMember 
	 *         (ownedRelationship+=NodeParameterMember | ownedRelationship+=EmptyParameterMember) 
	 *         ownedRelationship+=OwnedDocumentation? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	 *                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	 *                 (
	 *                     ownedRelationship+=EmptySuccessionMember? 
	 *                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                     ownedRelationship+=TargetSuccessionMember*
	 *                 ) | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             ownedRelationship+=OwnedDocumentation?
	 *         )*
	 *     )
	 */
	protected void sequence_AcceptParameterPart_ActionBodyItem_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, AcceptActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PerformedActionUsage returns AcceptActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         ownedRelationship+=ItemParameterMember 
	 *         (ownedRelationship+=NodeParameterMember | ownedRelationship+=EmptyParameterMember)
	 *     )
	 */
	protected void sequence_AcceptParameterPart_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, AcceptActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OccurrenceUsageElement returns ActionUsage
	 *     BehaviorUsageElement returns ActionUsage
	 *     VariantUsageElement returns ActionUsage
	 *     ConnectionEndElement returns ActionUsage
	 *     ActionRefUsage returns ActionUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         isComposite?=ActionUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*))? 
	 *         ownedRelationship+=OwnedDocumentation? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	 *                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	 *                 (
	 *                     ownedRelationship+=EmptySuccessionMember? 
	 *                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                     ownedRelationship+=TargetSuccessionMember*
	 *                 ) | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             ownedRelationship+=OwnedDocumentation?
	 *         )*
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionRefUsage_ActionUsageParameterList_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, ActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AddressedConcernUsage returns ConcernUsage
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             ((humanId=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	 *             (
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                     (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                     (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                 ) 
	 *                 (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *             )+ 
	 *             (
	 *                 (
	 *                     (
	 *                         ownedRelationship+=FeatureValue | 
	 *                         (
	 *                             (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                             ownedRelationship+=CalculationReturnParameterMember?
	 *                         )
	 *                     )? 
	 *                     (
	 *                         (
	 *                             ownedRelationship+=OwnedDocumentation | 
	 *                             ownedRelationship+=Import | 
	 *                             ownedRelationship+=NestedDefinitionMember | 
	 *                             ownedRelationship+=VariantUsageMember | 
	 *                             ownedRelationship+=ParameterFlowUsageMember | 
	 *                             ownedRelationship+=NonOccurrenceUsageMember | 
	 *                             ownedRelationship+=GuardedSuccessionMember | 
	 *                             ownedRelationship+=ReturnParameterFlowUsageMember
	 *                         )? 
	 *                         (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	 *                         (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *                         (
	 *                             ownedRelationship+=EmptySuccessionMember? 
	 *                             (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                             ownedRelationship+=TargetSuccessionMember*
	 *                         )?
	 *                     )+ 
	 *                     ownedRelationship+=ResultExpressionMember?
	 *                 ) | 
	 *                 (
	 *                     (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                     ownedRelationship+=CalculationReturnParameterMember? 
	 *                     (
	 *                         (
	 *                             ownedRelationship+=OwnedDocumentation | 
	 *                             ownedRelationship+=Import | 
	 *                             ownedRelationship+=NestedDefinitionMember | 
	 *                             ownedRelationship+=VariantUsageMember | 
	 *                             ownedRelationship+=FlowUsageMember | 
	 *                             ownedRelationship+=NonOccurrenceUsageMember | 
	 *                             ownedRelationship+=SubjectMember | 
	 *                             ownedRelationship+=RequirementConstraintMember | 
	 *                             ownedRelationship+=AddressedConcernMember | 
	 *                             ownedRelationship+=RequirementVerificationMember
	 *                         )? 
	 *                         (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *                     )+
	 *                 )
	 *             )
	 *         ) | 
	 *         (
	 *             ((humanId=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting) 
	 *             (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *             ownedRelationship+=CalculationReturnParameterMember? 
	 *             (
	 *                 (
	 *                     ownedRelationship+=OwnedDocumentation | 
	 *                     ownedRelationship+=Import | 
	 *                     ownedRelationship+=NestedDefinitionMember | 
	 *                     ownedRelationship+=VariantUsageMember | 
	 *                     ownedRelationship+=FlowUsageMember | 
	 *                     ownedRelationship+=NonOccurrenceUsageMember | 
	 *                     ownedRelationship+=SubjectMember | 
	 *                     ownedRelationship+=RequirementConstraintMember | 
	 *                     ownedRelationship+=AddressedConcernMember | 
	 *                     ownedRelationship+=RequirementVerificationMember
	 *                 )? 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *             )+
	 *         ) | 
	 *         (
	 *             (
	 *                 (((humanId=Name name=Name?) | name=Name) ownedRelationship+=FeatureValue) | 
	 *                 (
	 *                     ((humanId=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting) 
	 *                     (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                     ownedRelationship+=CalculationReturnParameterMember?
	 *                 )
	 *             ) 
	 *             (
	 *                 (
	 *                     ownedRelationship+=OwnedDocumentation | 
	 *                     ownedRelationship+=Import | 
	 *                     ownedRelationship+=NestedDefinitionMember | 
	 *                     ownedRelationship+=VariantUsageMember | 
	 *                     ownedRelationship+=ParameterFlowUsageMember | 
	 *                     ownedRelationship+=NonOccurrenceUsageMember | 
	 *                     ownedRelationship+=GuardedSuccessionMember | 
	 *                     ownedRelationship+=ReturnParameterFlowUsageMember
	 *                 )? 
	 *                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *                 (
	 *                     ownedRelationship+=EmptySuccessionMember? 
	 *                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                     ownedRelationship+=TargetSuccessionMember*
	 *                 )?
	 *             )+ 
	 *             ownedRelationship+=ResultExpressionMember?
	 *         )
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_AddressedConcernUsage_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, ConcernUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OccurrenceUsageElement returns AnalysisCaseUsage
	 *     BehaviorUsageElement returns AnalysisCaseUsage
	 *     VariantUsageElement returns AnalysisCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         isComposite?=AnalysisCaseUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         ownedRelationship+=SubjectMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	 *                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?) | 
	 *                 (
	 *                     ownedRelationship+=EmptySuccessionMember? 
	 *                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                     ownedRelationship+=TargetSuccessionMember*
	 *                 ) | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	 *                 ownedRelationship+=ObjectiveMember
	 *             )? 
	 *             ownedRelationship+=SubjectMember?
	 *         )* 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_AnalysisCaseRefUsage_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, AnalysisCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     AnalysisCaseRefUsage returns AnalysisCaseUsage
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         isIndividual?='individual'? 
	//         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	//         isComposite?=AnalysisCaseUsageKeyword? 
	//         ((humanId=Name name=Name?) | name=Name)? 
	//         (
	//             (
	//                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	//                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//             ) 
	//             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	//         )* 
	//         (
	//             ownedRelationship+=FeatureValue | 
	//             (
	//                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	//                 ownedRelationship+=CalculationReturnParameterMember?
	//             )
	//         )? 
	//         ownedRelationship+=OwnedDocumentation? 
	//         (
	//             (
	//                 ownedRelationship+=Import | 
	//                 ownedRelationship+=NestedDefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=ParameterFlowUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	//                 ownedRelationship+=SubjectMember | 
	//                 ownedRelationship+=ObjectiveMember
	//             )? 
	//             ownedRelationship+=OwnedDocumentation?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_ActionUsageParameterList_AnalysisCaseRefUsage_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, AnalysisCaseUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     UsageElement returns AssertConstraintUsage
	 *     OccurrenceUsageElement returns AssertConstraintUsage
	 *     BehaviorUsageElement returns AssertConstraintUsage
	 *     VariantUsageElement returns AssertConstraintUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *         ownedRelationship+=CalculationReturnParameterMember? 
	 *         ownedRelationship+=TrueLiteralMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_AssertConstraintUsage_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_InvariantPart_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(ISerializationContext context, AssertConstraintUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     AssertConstraintUsage returns AssertConstraintUsage
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         isIndividual?='individual'? 
	//         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	//         ((humanId=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	//         (
	//             (
	//                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	//                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//             ) 
	//             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	//         )* 
	//         (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	//         ownedRelationship+=CalculationReturnParameterMember? 
	//         ownedRelationship+=TrueLiteralMember 
	//         (
	//             (
	//                 ownedRelationship+=OwnedDocumentation | 
	//                 ownedRelationship+=Import | 
	//                 ownedRelationship+=NestedDefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=ParameterFlowUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember
	//             )? 
	//             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	//             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	//             (
	//                 ownedRelationship+=EmptySuccessionMember? 
	//                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                 ownedRelationship+=TargetSuccessionMember*
	//             )?
	//         )+ 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_ActionUsageParameterList_AssertConstraintUsage_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_InvariantPart_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(ISerializationContext context, AssertConstraintUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     OccurrenceUsageElement returns CaseUsage
	 *     BehaviorUsageElement returns CaseUsage
	 *     VariantUsageElement returns CaseUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         isComposite?=CaseUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         ownedRelationship+=SubjectMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	 *                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?) | 
	 *                 (
	 *                     ownedRelationship+=EmptySuccessionMember? 
	 *                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                     ownedRelationship+=TargetSuccessionMember*
	 *                 ) | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	 *                 ownedRelationship+=ObjectiveMember
	 *             )? 
	 *             ownedRelationship+=SubjectMember?
	 *         )* 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_CaseRefUsage_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, CaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     CaseRefUsage returns CaseUsage
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         isIndividual?='individual'? 
	//         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	//         isComposite?=CaseUsageKeyword? 
	//         ((humanId=Name name=Name?) | name=Name)? 
	//         (
	//             (
	//                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	//                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//             ) 
	//             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	//         )* 
	//         (
	//             ownedRelationship+=FeatureValue | 
	//             (
	//                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	//                 ownedRelationship+=CalculationReturnParameterMember?
	//             )
	//         )? 
	//         ownedRelationship+=OwnedDocumentation? 
	//         (
	//             (
	//                 ownedRelationship+=Import | 
	//                 ownedRelationship+=NestedDefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=ParameterFlowUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	//                 ownedRelationship+=SubjectMember | 
	//                 ownedRelationship+=ObjectiveMember
	//             )? 
	//             ownedRelationship+=OwnedDocumentation?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_CaseRefUsage_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, CaseUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     UsageElement returns AnalysisCaseUsage
	 *     FlowUsageElement returns AnalysisCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=ObjectiveMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, AnalysisCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     AnalysisCaseUsage returns AnalysisCaseUsage
	//     AnalysisCaseFlowUsage returns AnalysisCaseUsage
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         isIndividual?='individual'? 
	//         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	//         ((humanId=Name name=Name?) | name=Name)? 
	//         (
	//             (
	//                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	//                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//             ) 
	//             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	//         )* 
	//         (
	//             ownedRelationship+=FeatureValue | 
	//             (
	//                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	//                 ownedRelationship+=CalculationReturnParameterMember?
	//             )
	//         )? 
	//         ownedRelationship+=OwnedDocumentation? 
	//         (
	//             (
	//                 ownedRelationship+=Import | 
	//                 ownedRelationship+=NestedDefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=ParameterFlowUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	//                 ownedRelationship+=SubjectMember | 
	//                 ownedRelationship+=ObjectiveMember
	//             )? 
	//             ownedRelationship+=OwnedDocumentation?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, AnalysisCaseUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     UsageElement returns CaseUsage
	 *     FlowUsageElement returns CaseUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=ObjectiveMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, CaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     CaseUsage returns CaseUsage
	//     CaseFlowUsage returns CaseUsage
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         isIndividual?='individual'? 
	//         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	//         ((humanId=Name name=Name?) | name=Name)? 
	//         (
	//             (
	//                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	//                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//             ) 
	//             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	//         )* 
	//         (
	//             ownedRelationship+=FeatureValue | 
	//             (
	//                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	//                 ownedRelationship+=CalculationReturnParameterMember?
	//             )
	//         )? 
	//         ownedRelationship+=OwnedDocumentation? 
	//         (
	//             (
	//                 ownedRelationship+=Import | 
	//                 ownedRelationship+=NestedDefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=ParameterFlowUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	//                 ownedRelationship+=SubjectMember | 
	//                 ownedRelationship+=ObjectiveMember
	//             )? 
	//             ownedRelationship+=OwnedDocumentation?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, CaseUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     OccurrenceUsageElement returns VerificationCaseUsage
	 *     BehaviorUsageElement returns VerificationCaseUsage
	 *     VariantUsageElement returns VerificationCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         isComposite?=VerificationCaseUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         ownedRelationship+=SubjectMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	 *                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?) | 
	 *                 (
	 *                     ownedRelationship+=EmptySuccessionMember? 
	 *                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                     ownedRelationship+=TargetSuccessionMember*
	 *                 ) | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	 *                 ownedRelationship+=ObjectiveMember
	 *             )? 
	 *             ownedRelationship+=SubjectMember?
	 *         )* 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart_VerificationCaseRefUsage(ISerializationContext context, VerificationCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     VerificationCaseRefUsage returns VerificationCaseUsage
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         isIndividual?='individual'? 
	//         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	//         isComposite?=VerificationCaseUsageKeyword? 
	//         ((humanId=Name name=Name?) | name=Name)? 
	//         (
	//             (
	//                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	//                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//             ) 
	//             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	//         )* 
	//         (
	//             ownedRelationship+=FeatureValue | 
	//             (
	//                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	//                 ownedRelationship+=CalculationReturnParameterMember?
	//             )
	//         )? 
	//         ownedRelationship+=OwnedDocumentation? 
	//         (
	//             (
	//                 ownedRelationship+=Import | 
	//                 ownedRelationship+=NestedDefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=ParameterFlowUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	//                 ownedRelationship+=SubjectMember | 
	//                 ownedRelationship+=ObjectiveMember
	//             )? 
	//             ownedRelationship+=OwnedDocumentation?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart_VerificationCaseRefUsage(ISerializationContext context, VerificationCaseUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     UsageElement returns VerificationCaseUsage
	 *     FlowUsageElement returns VerificationCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=ObjectiveMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, VerificationCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     VerificationCaseUsage returns VerificationCaseUsage
	//     VerificationCaseFlowUsage returns VerificationCaseUsage
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         isIndividual?='individual'? 
	//         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	//         ((humanId=Name name=Name?) | name=Name)? 
	//         (
	//             (
	//                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	//                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//             ) 
	//             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	//         )* 
	//         (
	//             ownedRelationship+=FeatureValue | 
	//             (
	//                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	//                 ownedRelationship+=CalculationReturnParameterMember?
	//             )
	//         )? 
	//         ownedRelationship+=OwnedDocumentation? 
	//         (
	//             (
	//                 ownedRelationship+=Import | 
	//                 ownedRelationship+=NestedDefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=ParameterFlowUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	//                 ownedRelationship+=SubjectMember | 
	//                 ownedRelationship+=ObjectiveMember
	//             )? 
	//             ownedRelationship+=OwnedDocumentation?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBodyItem_CalculationReturnParameterPart_CaseBody_CaseBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, VerificationCaseUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     OccurrenceUsageElement returns CalculationUsage
	 *     BehaviorUsageElement returns CalculationUsage
	 *     VariantUsageElement returns CalculationUsage
	 *     ConnectionEndElement returns CalculationUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         isComposite?=CalculationUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         ownedRelationship+=ReturnParameterFlowUsageMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	 *                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?) | 
	 *                 (
	 *                     ownedRelationship+=EmptySuccessionMember? 
	 *                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                     ownedRelationship+=TargetSuccessionMember*
	 *                 ) | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             ownedRelationship+=ReturnParameterFlowUsageMember?
	 *         )* 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationRefUsage_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, CalculationUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     CalculationRefUsage returns CalculationUsage
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         isIndividual?='individual'? 
	//         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	//         isComposite?=CalculationUsageKeyword? 
	//         ((humanId=Name name=Name?) | name=Name)? 
	//         (
	//             (
	//                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	//                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//             ) 
	//             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	//         )* 
	//         (
	//             ownedRelationship+=FeatureValue | 
	//             (
	//                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	//                 ownedRelationship+=CalculationReturnParameterMember?
	//             )
	//         )? 
	//         ownedRelationship+=OwnedDocumentation? 
	//         (
	//             (
	//                 ownedRelationship+=Import | 
	//                 ownedRelationship+=NestedDefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=ParameterFlowUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember
	//             )? 
	//             ownedRelationship+=OwnedDocumentation?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationRefUsage_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, CalculationUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     OccurrenceUsageElement returns ConstraintUsage
	 *     BehaviorUsageElement returns ConstraintUsage
	 *     VariantUsageElement returns ConstraintUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         isComposite?=ConstraintUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         ownedRelationship+=ReturnParameterFlowUsageMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	 *                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?) | 
	 *                 (
	 *                     ownedRelationship+=EmptySuccessionMember? 
	 *                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                     ownedRelationship+=TargetSuccessionMember*
	 *                 ) | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             ownedRelationship+=ReturnParameterFlowUsageMember?
	 *         )* 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_ConstraintRefUsage_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, ConstraintUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     ConstraintRefUsage returns ConstraintUsage
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         isIndividual?='individual'? 
	//         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	//         isComposite?=ConstraintUsageKeyword? 
	//         ((humanId=Name name=Name?) | name=Name)? 
	//         (
	//             (
	//                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	//                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//             ) 
	//             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	//         )* 
	//         (
	//             ownedRelationship+=FeatureValue | 
	//             (
	//                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	//                 ownedRelationship+=CalculationReturnParameterMember?
	//             )
	//         )? 
	//         ownedRelationship+=OwnedDocumentation? 
	//         (
	//             (
	//                 ownedRelationship+=Import | 
	//                 ownedRelationship+=NestedDefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=ParameterFlowUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember
	//             )? 
	//             ownedRelationship+=OwnedDocumentation?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_ConstraintRefUsage_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, ConstraintUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     RequirementConstraintUsage returns ConstraintUsage
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             ((humanId=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	 *             (
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                     (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                     (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                 ) 
	 *                 (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *             )+ 
	 *             (
	 *                 (
	 *                     (
	 *                         ownedRelationship+=FeatureValue | 
	 *                         (
	 *                             (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                             ownedRelationship+=CalculationReturnParameterMember?
	 *                         )
	 *                     )? 
	 *                     (
	 *                         (
	 *                             ownedRelationship+=OwnedDocumentation | 
	 *                             ownedRelationship+=Import | 
	 *                             ownedRelationship+=NestedDefinitionMember | 
	 *                             ownedRelationship+=VariantUsageMember | 
	 *                             ownedRelationship+=ParameterFlowUsageMember | 
	 *                             ownedRelationship+=NonOccurrenceUsageMember | 
	 *                             ownedRelationship+=GuardedSuccessionMember | 
	 *                             ownedRelationship+=ReturnParameterFlowUsageMember
	 *                         )? 
	 *                         (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	 *                         (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *                         (
	 *                             ownedRelationship+=EmptySuccessionMember? 
	 *                             (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                             ownedRelationship+=TargetSuccessionMember*
	 *                         )?
	 *                     )+ 
	 *                     ownedRelationship+=ResultExpressionMember?
	 *                 ) | 
	 *                 (
	 *                     (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                     ownedRelationship+=CalculationReturnParameterMember? 
	 *                     (
	 *                         (
	 *                             ownedRelationship+=OwnedDocumentation | 
	 *                             ownedRelationship+=Import | 
	 *                             ownedRelationship+=NestedDefinitionMember | 
	 *                             ownedRelationship+=VariantUsageMember | 
	 *                             ownedRelationship+=FlowUsageMember | 
	 *                             ownedRelationship+=NonOccurrenceUsageMember | 
	 *                             ownedRelationship+=SubjectMember | 
	 *                             ownedRelationship+=RequirementConstraintMember | 
	 *                             ownedRelationship+=AddressedConcernMember | 
	 *                             ownedRelationship+=RequirementVerificationMember
	 *                         )? 
	 *                         (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *                     )+
	 *                 )
	 *             )
	 *         ) | 
	 *         (
	 *             ((humanId=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting) 
	 *             (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *             ownedRelationship+=CalculationReturnParameterMember? 
	 *             (
	 *                 (
	 *                     ownedRelationship+=OwnedDocumentation | 
	 *                     ownedRelationship+=Import | 
	 *                     ownedRelationship+=NestedDefinitionMember | 
	 *                     ownedRelationship+=VariantUsageMember | 
	 *                     ownedRelationship+=FlowUsageMember | 
	 *                     ownedRelationship+=NonOccurrenceUsageMember | 
	 *                     ownedRelationship+=SubjectMember | 
	 *                     ownedRelationship+=RequirementConstraintMember | 
	 *                     ownedRelationship+=AddressedConcernMember | 
	 *                     ownedRelationship+=RequirementVerificationMember
	 *                 )? 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *             )+
	 *         ) | 
	 *         (
	 *             (
	 *                 (((humanId=Name name=Name?) | name=Name) ownedRelationship+=FeatureValue) | 
	 *                 (
	 *                     ((humanId=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting) 
	 *                     (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                     ownedRelationship+=CalculationReturnParameterMember?
	 *                 )
	 *             ) 
	 *             (
	 *                 (
	 *                     ownedRelationship+=OwnedDocumentation | 
	 *                     ownedRelationship+=Import | 
	 *                     ownedRelationship+=NestedDefinitionMember | 
	 *                     ownedRelationship+=VariantUsageMember | 
	 *                     ownedRelationship+=ParameterFlowUsageMember | 
	 *                     ownedRelationship+=NonOccurrenceUsageMember | 
	 *                     ownedRelationship+=GuardedSuccessionMember | 
	 *                     ownedRelationship+=ReturnParameterFlowUsageMember
	 *                 )? 
	 *                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *                 (
	 *                     ownedRelationship+=EmptySuccessionMember? 
	 *                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                     ownedRelationship+=TargetSuccessionMember*
	 *                 )?
	 *             )+ 
	 *             ownedRelationship+=ResultExpressionMember?
	 *         )
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_RequirementConstraintUsage_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, ConstraintUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns CalculationUsage
	 *     FlowUsageElement returns CalculationUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, CalculationUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     CalculationUsage returns CalculationUsage
	//     CalculationFlowUsage returns CalculationUsage
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         isIndividual?='individual'? 
	//         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	//         ((humanId=Name name=Name?) | name=Name)? 
	//         (
	//             (
	//                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	//                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//             ) 
	//             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	//         )* 
	//         (
	//             ownedRelationship+=FeatureValue | 
	//             (
	//                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	//                 ownedRelationship+=CalculationReturnParameterMember?
	//             )
	//         )? 
	//         ownedRelationship+=OwnedDocumentation? 
	//         (
	//             (
	//                 ownedRelationship+=Import | 
	//                 ownedRelationship+=NestedDefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=ParameterFlowUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember
	//             )? 
	//             ownedRelationship+=OwnedDocumentation?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, CalculationUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     UsageElement returns ConstraintUsage
	 *     FlowUsageElement returns ConstraintUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, ConstraintUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     ConstraintUsage returns ConstraintUsage
	//     ConstraintFlowUsage returns ConstraintUsage
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         isIndividual?='individual'? 
	//         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	//         ((humanId=Name name=Name?) | name=Name)? 
	//         (
	//             (
	//                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	//                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	//             ) 
	//             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	//         )* 
	//         (
	//             ownedRelationship+=FeatureValue | 
	//             (
	//                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	//                 ownedRelationship+=CalculationReturnParameterMember?
	//             )
	//         )? 
	//         ownedRelationship+=OwnedDocumentation? 
	//         (
	//             (
	//                 ownedRelationship+=Import | 
	//                 ownedRelationship+=NestedDefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=ParameterFlowUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember
	//             )? 
	//             ownedRelationship+=OwnedDocumentation?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_ActionUsageParameterList_CalculationBody_CalculationBodyItem_CalculationReturnParameterPart_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, ConstraintUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     OccurrenceUsageElement returns PerformActionUsage
	 *     BehaviorUsageElement returns PerformActionUsage
	 *     VariantUsageElement returns PerformActionUsage
	 *     PerformActionUsage returns PerformActionUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*))? 
	 *         ownedRelationship+=OwnedDocumentation? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	 *                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	 *                 (
	 *                     ownedRelationship+=EmptySuccessionMember? 
	 *                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                     ownedRelationship+=TargetSuccessionMember*
	 *                 ) | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             ownedRelationship+=OwnedDocumentation?
	 *         )*
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_Identification_MultiplicityPart_OccurrenceUsagePrefix_PerformActionUsageDeclaration_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, PerformActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns ActionUsage
	 *     FlowUsageElement returns ActionUsage
	 *     ActionUsage returns ActionUsage
	 *     ActionFlowUsage returns ActionUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*))? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, ActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateActionUsage returns PerformActionUsage
	 *     EffectBehaviorUsage returns PerformActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*))? 
	 *         ownedRelationship+=OwnedDocumentation? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	 *                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	 *                 (
	 *                     ownedRelationship+=EmptySuccessionMember? 
	 *                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                     ownedRelationship+=TargetSuccessionMember*
	 *                 ) | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             ownedRelationship+=OwnedDocumentation?
	 *         )*
	 *     )
	 */
	protected void sequence_ActionBodyItem_ActionUsageParameterList_Identification_MultiplicityPart_PerformActionUsageDeclaration_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, PerformActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns AnalysisCaseDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         ownedRelationship+=ReturnParameterMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=ObjectiveMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SuperclassingPart(ISerializationContext context, AnalysisCaseDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     AnalysisCaseDefinition returns AnalysisCaseDefinition
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	//         ((humanId=Name name=Name?) | name=Name)? 
	//         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	//         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	//         ownedRelationship+=ReturnParameterMember? 
	//         ownedRelationship+=OwnedDocumentation? 
	//         (
	//             (
	//                 ownedRelationship+=Import | 
	//                 ownedRelationship+=NestedDefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=ParameterFlowUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	//                 ownedRelationship+=SubjectMember | 
	//                 ownedRelationship+=ObjectiveMember
	//             )? 
	//             ownedRelationship+=OwnedDocumentation?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SuperclassingPart(ISerializationContext context, AnalysisCaseDefinition semanticObject) { }
	
	/**
	 * Contexts:
	 *     DefinitionElement returns CaseDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         ownedRelationship+=ReturnParameterMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=ObjectiveMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SuperclassingPart(ISerializationContext context, CaseDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     CaseDefinition returns CaseDefinition
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	//         ((humanId=Name name=Name?) | name=Name)? 
	//         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	//         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	//         ownedRelationship+=ReturnParameterMember? 
	//         ownedRelationship+=OwnedDocumentation? 
	//         (
	//             (
	//                 ownedRelationship+=Import | 
	//                 ownedRelationship+=NestedDefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=ParameterFlowUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	//                 ownedRelationship+=SubjectMember | 
	//                 ownedRelationship+=ObjectiveMember
	//             )? 
	//             ownedRelationship+=OwnedDocumentation?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SuperclassingPart(ISerializationContext context, CaseDefinition semanticObject) { }
	
	/**
	 * Contexts:
	 *     DefinitionElement returns VerificationCaseDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         ownedRelationship+=ReturnParameterMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=ObjectiveMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SuperclassingPart(ISerializationContext context, VerificationCaseDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     VerificationCaseDefinition returns VerificationCaseDefinition
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	//         ((humanId=Name name=Name?) | name=Name)? 
	//         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	//         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	//         ownedRelationship+=ReturnParameterMember? 
	//         ownedRelationship+=OwnedDocumentation? 
	//         (
	//             (
	//                 ownedRelationship+=Import | 
	//                 ownedRelationship+=NestedDefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=ParameterFlowUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                 (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                 (
	//                     ownedRelationship+=EmptySuccessionMember? 
	//                     (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                     ownedRelationship+=TargetSuccessionMember*
	//                 ) | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember | 
	//                 ownedRelationship+=SubjectMember | 
	//                 ownedRelationship+=ObjectiveMember
	//             )? 
	//             ownedRelationship+=OwnedDocumentation?
	//         )* 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_CalculationBodyItem_CaseBody_CaseBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SuperclassingPart(ISerializationContext context, VerificationCaseDefinition semanticObject) { }
	
	/**
	 * Contexts:
	 *     DefinitionElement returns CalculationDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         ownedRelationship+=ReturnParameterMember? 
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         ownedRelationship+=OwnedDocumentation | 
	 *                         ownedRelationship+=Import | 
	 *                         ownedRelationship+=NestedDefinitionMember | 
	 *                         ownedRelationship+=VariantUsageMember | 
	 *                         ownedRelationship+=ParameterFlowUsageMember | 
	 *                         ownedRelationship+=NonOccurrenceUsageMember | 
	 *                         ownedRelationship+=GuardedSuccessionMember | 
	 *                         ownedRelationship+=ReturnParameterFlowUsageMember
	 *                     )? 
	 *                     (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *                     (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *                     (
	 *                         ownedRelationship+=EmptySuccessionMember? 
	 *                         (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                         ownedRelationship+=TargetSuccessionMember*
	 *                     )?
	 *                 )+ 
	 *                 ownedRelationship+=ResultExpressionMember?
	 *             ) | 
	 *             ownedRelationship+=ResultExpressionMember
	 *         )?
	 *     )
	 */
	protected void sequence_ActionBodyItem_CalculationBody_CalculationBodyItem_CalculationDefinition_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SuperclassingPart(ISerializationContext context, CalculationDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     CalculationDefinition returns CalculationDefinition
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	//         ((humanId=Name name=Name?) | name=Name)? 
	//         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	//         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	//         ownedRelationship+=ReturnParameterMember? 
	//         (
	//             (
	//                 ownedRelationship+=OwnedDocumentation? 
	//                 (
	//                     (
	//                         ownedRelationship+=Import | 
	//                         ownedRelationship+=NestedDefinitionMember | 
	//                         ownedRelationship+=VariantUsageMember | 
	//                         ownedRelationship+=ParameterFlowUsageMember | 
	//                         ownedRelationship+=NonOccurrenceUsageMember | 
	//                         (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	//                         (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*) | 
	//                         (
	//                             ownedRelationship+=EmptySuccessionMember? 
	//                             (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                             ownedRelationship+=TargetSuccessionMember*
	//                         ) | 
	//                         ownedRelationship+=GuardedSuccessionMember | 
	//                         ownedRelationship+=ReturnParameterFlowUsageMember
	//                     )? 
	//                     ownedRelationship+=OwnedDocumentation?
	//                 )* 
	//                 ownedRelationship+=ResultExpressionMember?
	//             ) | 
	//             ownedRelationship+=ResultExpressionMember
	//         )?
	//     )
	//
	// protected void sequence_ActionBodyItem_CalculationBody_CalculationBodyItem_CalculationDefinition_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_ParameterList_ReturnParameterPart_SuperclassingPart(ISerializationContext context, CalculationDefinition semanticObject) { }
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ConstraintDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         ownedRelationship+=EmptyReturnParameterMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember?)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_CalculationBody_CalculationBodyItem_DefinitionPrefix_EmptyReturnParameterPart_Identification_OccurrenceDefinitionPrefix_ParameterList_SuperclassingPart(ISerializationContext context, ConstraintDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     ConstraintDefinition returns ConstraintDefinition
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	//         ((humanId=Name name=Name?) | name=Name)? 
	//         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	//         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	//         ownedRelationship+=EmptyReturnParameterMember 
	//         (
	//             (
	//                 ownedRelationship+=OwnedDocumentation | 
	//                 ownedRelationship+=Import | 
	//                 ownedRelationship+=NestedDefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=ParameterFlowUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 ownedRelationship+=GuardedSuccessionMember | 
	//                 ownedRelationship+=ReturnParameterFlowUsageMember
	//             )? 
	//             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	//             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	//             (
	//                 ownedRelationship+=EmptySuccessionMember? 
	//                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	//                 ownedRelationship+=TargetSuccessionMember*
	//             )?
	//         )+ 
	//         ownedRelationship+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_ActionBodyItem_CalculationBody_CalculationBodyItem_DefinitionPrefix_EmptyReturnParameterPart_Identification_OccurrenceDefinitionPrefix_ParameterList_SuperclassingPart(ISerializationContext context, ConstraintDefinition semanticObject) { }
	
	/**
	 * Contexts:
	 *     ExpressionBody returns Expression
	 *     OwnedExpression returns Expression
	 *     ConditionalExpression returns Expression
	 *     ConditionalExpression.OperatorExpression_0_1_0 returns Expression
	 *     NullCoalescingExpression returns Expression
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns Expression
	 *     ImpliesExpression returns Expression
	 *     ImpliesExpression.OperatorExpression_1_0 returns Expression
	 *     OrExpression returns Expression
	 *     OrExpression.OperatorExpression_1_0 returns Expression
	 *     XorExpression returns Expression
	 *     XorExpression.OperatorExpression_1_0 returns Expression
	 *     AndExpression returns Expression
	 *     AndExpression.OperatorExpression_1_0 returns Expression
	 *     EqualityExpression returns Expression
	 *     EqualityExpression.OperatorExpression_1_0 returns Expression
	 *     ClassificationExpression returns Expression
	 *     ClassificationExpression.OperatorExpression_0_1_0 returns Expression
	 *     RelationalExpression returns Expression
	 *     RelationalExpression.OperatorExpression_1_0 returns Expression
	 *     RangeExpression returns Expression
	 *     RangeExpression.OperatorExpression_1_0 returns Expression
	 *     AdditiveExpression returns Expression
	 *     AdditiveExpression.OperatorExpression_1_0 returns Expression
	 *     MultiplicativeExpression returns Expression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns Expression
	 *     ExponentiationExpression returns Expression
	 *     ExponentiationExpression.OperatorExpression_1_0 returns Expression
	 *     UnitsExpression returns Expression
	 *     UnitsExpression.OperatorExpression_1_0 returns Expression
	 *     UnaryExpression returns Expression
	 *     ExtentExpression returns Expression
	 *     PrimaryExpression returns Expression
	 *     PrimaryExpression.OperatorExpression_1_0_0 returns Expression
	 *     PrimaryExpression.OperatorExpression_1_1_0 returns Expression
	 *     PrimaryExpression.PathStepExpression_1_2_0 returns Expression
	 *     PrimaryExpression.PathSelectExpression_1_3_0 returns Expression
	 *     BaseExpression returns Expression
	 *     SequenceExpression returns Expression
	 *     SequenceExpression.OperatorExpression_1_1_0 returns Expression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember | 
	 *                 ownedRelationship+=ReturnParameterFlowUsageMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+ 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ActionBodyItem_CalculationBody_CalculationBodyItem(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ActionDefinition
	 *     ActionDefinition returns ActionDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_ParameterList_SuperclassingPart(ISerializationContext context, ActionDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns SendActionUsage
	 *     SendNode returns SendActionUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         ownedRelationship+=NodeParameterMember 
	 *         ownedRelationship+=NodeParameterMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_SendNodeDeclaration_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(ISerializationContext context, SendActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateActionUsage returns SendActionUsage
	 *     EffectBehaviorUsage returns SendActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         ownedRelationship+=NodeParameterMember 
	 *         ownedRelationship+=NodeParameterMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=GuardedSuccessionMember
	 *             )? 
	 *             (ownedRelationship+=InitialNodeMember ownedRelationship+=TargetSuccessionMember*)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (
	 *                 ownedRelationship+=EmptySuccessionMember? 
	 *                 (ownedRelationship+=BehaviorUsageMember | ownedRelationship+=ActionNodeMember) 
	 *                 ownedRelationship+=TargetSuccessionMember*
	 *             )?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionBodyItem_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_SendNodeDeclaration_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, SendActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNodeMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=ActionNode)
	 */
	protected void sequence_ActionNodeMember_DefinitionMemberPrefix(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OccurrenceUsageElement returns ConcernUsage
	 *     BehaviorUsageElement returns ConcernUsage
	 *     VariantUsageElement returns ConcernUsage
	 *     ConcernRefUsage returns ConcernUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         isComposite?=ConcernUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         ownedRelationship+=AffectedStakeholderMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember) | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=RequirementConstraintMember | 
	 *                 ownedRelationship+=AddressedConcernMember | 
	 *                 ownedRelationship+=RequirementVerificationMember
	 *             )? 
	 *             ownedRelationship+=AffectedStakeholderMember?
	 *         )*
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_CalculationReturnParameterPart_ConcernBodyItem_ConcernRefUsage_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, ConcernUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns ConcernUsage
	 *     FlowUsageElement returns ConcernUsage
	 *     ConcernUsage returns ConcernUsage
	 *     ConcernFlowUsage returns ConcernUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=RequirementConstraintMember | 
	 *                 ownedRelationship+=AddressedConcernMember | 
	 *                 ownedRelationship+=RequirementVerificationMember | 
	 *                 ownedRelationship+=AffectedStakeholderMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_CalculationReturnParameterPart_ConcernBodyItem_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, ConcernUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OccurrenceUsageElement returns RequirementUsage
	 *     BehaviorUsageElement returns RequirementUsage
	 *     VariantUsageElement returns RequirementUsage
	 *     RequirementRefUsage returns RequirementUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         isComposite?=RequirementUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         ownedRelationship+=NonOccurrenceUsageMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember) | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=RequirementConstraintMember | 
	 *                 ownedRelationship+=AddressedConcernMember | 
	 *                 ownedRelationship+=RequirementVerificationMember
	 *             )? 
	 *             ownedRelationship+=NonOccurrenceUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RequirementBodyItem_RequirementRefUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, RequirementUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns RequirementUsage
	 *     FlowUsageElement returns RequirementUsage
	 *     RequirementUsage returns RequirementUsage
	 *     RequirementFlowUsage returns RequirementUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=RequirementConstraintMember | 
	 *                 ownedRelationship+=AddressedConcernMember | 
	 *                 ownedRelationship+=RequirementVerificationMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, RequirementUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OccurrenceUsageElement returns ViewpointUsage
	 *     BehaviorUsageElement returns ViewpointUsage
	 *     VariantUsageElement returns ViewpointUsage
	 *     ViewpointRefUsage returns ViewpointUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         isComposite?=ViewpointUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         ownedRelationship+=NonOccurrenceUsageMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember) | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=RequirementConstraintMember | 
	 *                 ownedRelationship+=AddressedConcernMember | 
	 *                 ownedRelationship+=RequirementVerificationMember
	 *             )? 
	 *             ownedRelationship+=NonOccurrenceUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart_ViewpointRefUsage(ISerializationContext context, ViewpointUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns ViewpointUsage
	 *     FlowUsageElement returns ViewpointUsage
	 *     ViewpointUsage returns ViewpointUsage
	 *     ViewpointFlowUsage returns ViewpointUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=RequirementConstraintMember | 
	 *                 ownedRelationship+=AddressedConcernMember | 
	 *                 ownedRelationship+=RequirementVerificationMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, ViewpointUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RequirementVerificationUsage returns RequirementUsage
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (
	 *                 ((humanId=Name name=Name?) | name=Name)? 
	 *                 (
	 *                     ownedRelationship+=FeatureValue | 
	 *                     (
	 *                         (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                         ownedRelationship+=CalculationReturnParameterMember?
	 *                     )
	 *                 )?
	 *             ) | 
	 *             (
	 *                 ((humanId=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     ) 
	 *                     (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *                 )+ 
	 *                 (
	 *                     ownedRelationship+=FeatureValue | 
	 *                     (
	 *                         (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                         ownedRelationship+=CalculationReturnParameterMember?
	 *                     )
	 *                 )
	 *             ) | 
	 *             (
	 *                 ownedRelationship+=OwnedSubsetting 
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         ) 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=RequirementConstraintMember | 
	 *                 ownedRelationship+=AddressedConcernMember | 
	 *                 ownedRelationship+=RequirementVerificationMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_RequirementVerificationUsage_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, RequirementUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjectiveRequirementUsage returns RequirementUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (
	 *                 (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*)? 
	 *                 ownedRelationship+=CalculationReturnParameterMember?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=RequirementConstraintMember | 
	 *                 ownedRelationship+=AddressedConcernMember | 
	 *                 ownedRelationship+=RequirementVerificationMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_CalculationReturnParameterPart_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_RequirementBodyItem_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, RequirementUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns SatisfyRequirementUsage
	 *     OccurrenceUsageElement returns SatisfyRequirementUsage
	 *     BehaviorUsageElement returns SatisfyRequirementUsage
	 *     VariantUsageElement returns SatisfyRequirementUsage
	 *     SatisfyRequirementUsage returns SatisfyRequirementUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*))? 
	 *         ownedRelationship+=SatisfactionConnectorMember? 
	 *         ownedRelationship+=TrueLiteralMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=RequirementConstraintMember | 
	 *                 ownedRelationship+=AddressedConcernMember | 
	 *                 ownedRelationship+=RequirementVerificationMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_DefinitionBodyItem_Identification_InvariantPart_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RequirementBodyItem_SatisfyRequirementUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, SatisfyRequirementUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OccurrenceUsageElement returns ExhibitStateUsage
	 *     BehaviorUsageElement returns ExhibitStateUsage
	 *     VariantUsageElement returns ExhibitStateUsage
	 *     ExhibitStateUsage returns ExhibitStateUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*))? 
	 *         (ownedRelationship+=EntryActionMember ownedRelationship+=EntryTransitionMember*)? 
	 *         ownedRelationship+=DoActionMember? 
	 *         ownedRelationship+=ExitActionMember? 
	 *         ownedRelationship+=TransitionUsageMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=BehaviorUsageMember ownedRelationship+=TargetTransitionUsageMember*)
	 *             )? 
	 *             ownedRelationship+=TransitionUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_ExhibitStateUsage_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_StateBodyPart_StateDefBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, ExhibitStateUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OccurrenceUsageElement returns StateUsage
	 *     BehaviorUsageElement returns StateUsage
	 *     VariantUsageElement returns StateUsage
	 *     ConnectionEndElement returns StateUsage
	 *     StateRefUsage returns StateUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         isComposite?=StateUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*))? 
	 *         (ownedRelationship+=EntryActionMember ownedRelationship+=EntryTransitionMember*)? 
	 *         ownedRelationship+=DoActionMember? 
	 *         ownedRelationship+=ExitActionMember? 
	 *         ownedRelationship+=TransitionUsageMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember) | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=BehaviorUsageMember ownedRelationship+=TargetTransitionUsageMember*)
	 *             )? 
	 *             ownedRelationship+=TransitionUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_StateBodyPart_StateDefBodyItem_StateRefUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, StateUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns StateUsage
	 *     FlowUsageElement returns StateUsage
	 *     StateUsage returns StateUsage
	 *     StateFlowUsage returns StateUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*))? 
	 *         (ownedRelationship+=EntryActionMember ownedRelationship+=EntryTransitionMember*)? 
	 *         ownedRelationship+=DoActionMember? 
	 *         ownedRelationship+=ExitActionMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=TransitionUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=BehaviorUsageMember ownedRelationship+=TargetTransitionUsageMember*)?
	 *         )+
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_StateBodyPart_StateDefBodyItem_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValuePart(ISerializationContext context, StateUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PerformedActionUsage returns PerformActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | (ownedRelationship+=ActionUsageParameterMember ownedRelationship+=ActionUsageParameterMember*))?
	 *     )
	 */
	protected void sequence_ActionUsageParameterList_Identification_MultiplicityPart_PerformActionUsageDeclaration_PerformedActionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, PerformActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     (direction=FeatureDirection? ownedRelatedElement+=ActionUsageParameter)
	 */
	protected void sequence_ActionUsageParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns ReferenceUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_ActionUsageParameter_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AddressedConcernMember returns AddressedConcernMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? kind=AddressConcernKind ownedRelatedElement+=AddressedConcernUsage)
	 */
	protected void sequence_AddressedConcernMember_DefinitionMemberPrefix(ISerializationContext context, AddressedConcernMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AffectedStakeholderMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=AffectedStakeholderUsage)
	 */
	protected void sequence_AffectedStakeholderMember_DefinitionMemberPrefix(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AffectedStakeholderUsage returns StakeholderUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_AffectedStakeholderUsage_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, StakeholderUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AnnotatingFeature returns AnnotatingFeature
	 *     DefinitionElement returns AnnotatingFeature
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ownedRelationship+=MetadataTyping 
	 *         ((ownedRelationship+=Annotation ownedRelationship+=Annotation*) | ownedRelationship+=EmptyAnnotation) 
	 *         ownedRelationship+=MetadataFeatureMember*
	 *     )
	 */
	protected void sequence_AnnotatingFeature_AnnotatingFeatureBody_AnnotatingFeatureDeclaration_Identification(ISerializationContext context, AnnotatingFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Annotation returns Annotation
	 *
	 * Constraint:
	 *     annotatedElement=[Element|QualifiedName]
	 */
	protected void sequence_Annotation(ISerializationContext context, Annotation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.ANNOTATION__ANNOTATED_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.ANNOTATION__ANNOTATED_ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnnotationAccess().getAnnotatedElementElementQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.ANNOTATION__ANNOTATED_ELEMENT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=BehaviorUsageElement)
	 */
	protected void sequence_BehaviorUsageMember_DefinitionMemberPrefix(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns AllocationUsage
	 *     StructureUsageElement returns AllocationUsage
	 *     OccurrenceUsageElement returns AllocationUsage
	 *     VariantUsageElement returns AllocationUsage
	 *     AllocationUsage returns AllocationUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (
	 *             (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember) | 
	 *             (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember*)
	 *         )? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=Import | 
	 *             ownedRelationship+=NestedDefinitionMember | 
	 *             ownedRelationship+=VariantUsageMember | 
	 *             ownedRelationship+=ConnectionUsageMember
	 *         )*
	 *     )
	 */
	protected void sequence_BinaryConnectorPart_ConnectionBody_Identification_MultiplicityPart_NaryConnectorPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(ISerializationContext context, AllocationUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns ConnectionUsage
	 *     StructureUsageElement returns ConnectionUsage
	 *     OccurrenceUsageElement returns ConnectionUsage
	 *     VariantUsageElement returns ConnectionUsage
	 *     ConnectionUsage returns ConnectionUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (
	 *             (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember) | 
	 *             (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember*)
	 *         )? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=Import | 
	 *             ownedRelationship+=NestedDefinitionMember | 
	 *             ownedRelationship+=VariantUsageMember | 
	 *             ownedRelationship+=ConnectionUsageMember
	 *         )*
	 *     )
	 */
	protected void sequence_BinaryConnectorPart_ConnectionBody_Identification_MultiplicityPart_NaryConnectorPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(ISerializationContext context, ConnectionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Connector returns ConnectionUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         (
	 *             (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember) | 
	 *             (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember*)
	 *         ) 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=Import | 
	 *             ownedRelationship+=NestedDefinitionMember | 
	 *             ownedRelationship+=VariantUsageMember | 
	 *             ownedRelationship+=ConnectionUsageMember
	 *         )*
	 *     )
	 */
	protected void sequence_BinaryConnectorPart_ConnectionBody_NaryConnectorPart_OccurrenceUsagePrefix_UsagePrefix(ISerializationContext context, ConnectionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StructureUsageElement returns ItemFlow
	 *     OccurrenceUsageElement returns ItemFlow
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (
	 *                 isAbstract?=MessageKeyword 
	 *                 ownedRelationship+=ItemFeatureMember? 
	 *                 (ownedRelationship+=FeatureValue | (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember))?
	 *             ) | 
	 *             (
	 *                 (isAbstract?=MessageKeyword | isAbstract?='abstract')? 
	 *                 ((humanId=Name name=Name?) | name=Name) 
	 *                 (
	 *                     (
	 *                         ownedRelationship+=ItemFeatureMember? 
	 *                         (ownedRelationship+=FeatureValue | (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember))?
	 *                     ) | 
	 *                     (
	 *                         (ownedRelationship+=ItemFeatureMember | ownedRelationship+=EmptyItemFeatureMember) 
	 *                         ownedRelationship+=ItemFlowEndMember 
	 *                         ownedRelationship+=ItemFlowEndMember
	 *                     )
	 *                 )
	 *             ) | 
	 *             (
	 *                 (
	 *                     isAbstract?=MessageKeyword | 
	 *                     ((isAbstract?=MessageKeyword | isAbstract?='abstract')? ((humanId=Name name=Name?) | name=Name)) | 
	 *                     isAbstract?='abstract'
	 *                 ) 
	 *                 ownedRelationship+=MultiplicityMember 
	 *                 ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))? 
	 *                 (
	 *                     (
	 *                         ownedRelationship+=ItemFeatureMember? 
	 *                         (ownedRelationship+=FeatureValue | (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember))?
	 *                     ) | 
	 *                     (
	 *                         (ownedRelationship+=ItemFeatureMember | ownedRelationship+=EmptyItemFeatureMember) 
	 *                         ownedRelationship+=ItemFlowEndMember 
	 *                         ownedRelationship+=ItemFlowEndMember
	 *                     )
	 *                 )
	 *             ) | 
	 *             (
	 *                 (
	 *                     isAbstract?=MessageKeyword | 
	 *                     ((isAbstract?=MessageKeyword | isAbstract?='abstract')? ((humanId=Name name=Name?) | name=Name)) | 
	 *                     (
	 *                         (
	 *                             isAbstract?=MessageKeyword | 
	 *                             ((isAbstract?=MessageKeyword | isAbstract?='abstract')? ((humanId=Name name=Name?) | name=Name)) | 
	 *                             isAbstract?='abstract'
	 *                         ) 
	 *                         ownedRelationship+=MultiplicityMember 
	 *                         ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?
	 *                     ) | 
	 *                     isAbstract?='abstract'
	 *                 ) 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     ) 
	 *                     (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *                 )+ 
	 *                 (
	 *                     (
	 *                         ownedRelationship+=ItemFeatureMember? 
	 *                         (ownedRelationship+=FeatureValue | (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember))?
	 *                     ) | 
	 *                     (
	 *                         (ownedRelationship+=ItemFeatureMember | ownedRelationship+=EmptyItemFeatureMember) 
	 *                         ownedRelationship+=ItemFlowEndMember 
	 *                         ownedRelationship+=ItemFlowEndMember
	 *                     )
	 *                 )
	 *             ) | 
	 *             (isAbstract?='abstract' ownedRelationship+=EmptyItemFeatureMember ownedRelationship+=ItemFlowEndMember ownedRelationship+=ItemFlowEndMember) | 
	 *             (
	 *                 isAbstract?='abstract' 
	 *                 (ownedRelationship+=ItemFeatureMember | ownedRelationship+=EmptyItemFeatureMember) 
	 *                 ownedRelationship+=ItemFlowEndMember 
	 *                 ownedRelationship+=ItemFlowEndMember
	 *             )
	 *         ) 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BinaryConnectorPart_DefinitionBodyItem_Identification_ItemFlow_ItemFlowDeclaration_Message_MessageDeclaration_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, ItemFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message returns ItemFlow
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?=MessageKeyword 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         ownedRelationship+=ItemFeatureMember? 
	 *         (ownedRelationship+=FeatureValue | (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember))? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BinaryConnectorPart_DefinitionBodyItem_Identification_Message_MessageDeclaration_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, ItemFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns InterfaceUsage
	 *     StructureUsageElement returns InterfaceUsage
	 *     OccurrenceUsageElement returns InterfaceUsage
	 *     VariantUsageElement returns InterfaceUsage
	 *     InterfaceUsage returns InterfaceUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (
	 *             (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember) | 
	 *             (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember*)
	 *         )? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=Import | 
	 *             ownedRelationship+=NestedDefinitionMember | 
	 *             ownedRelationship+=VariantUsageMember | 
	 *             ownedRelationship+=InterfaceUsageMember
	 *         )*
	 *     )
	 */
	protected void sequence_BinaryConnectorPart_Identification_InterfaceDefBody_MultiplicityPart_NaryConnectorPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(ISerializationContext context, InterfaceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BindingConnector returns BindingConnector
	 *     NonOccurrenceUsageElement returns BindingConnector
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         ownedRelationship+=ConnectorEndMember 
	 *         ownedRelationship+=ConnectorEndMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_BindingConnector_BindingConnectorDeclaration_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, BindingConnector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CalculationReturnParameterMember returns ReturnParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=ActionUsageParameter
	 */
	protected void sequence_CalculationReturnParameterMember(ISerializationContext context, ReturnParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comment returns Comment
	 *     DefinitionElement returns Comment
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ((ownedRelationship+=Annotation ownedRelationship+=Annotation*) | ownedRelationship+=EmptyAnnotation) 
	 *         body=REGULAR_COMMENT
	 *     )
	 */
	protected void sequence_Comment_Identification(ISerializationContext context, Comment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ConcernDefinition
	 *     ConcernDefinition returns ConcernDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         ownedRelationship+=EmptyReturnParameterMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=RequirementConstraintMember | 
	 *                 ownedRelationship+=AddressedConcernMember | 
	 *                 ownedRelationship+=RequirementVerificationMember | 
	 *                 ownedRelationship+=AffectedStakeholderMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_ConcernBodyItem_DefinitionBodyItem_DefinitionPrefix_EmptyReturnParameterPart_Identification_OccurrenceDefinitionPrefix_ParameterList_RequirementBodyItem_SuperclassingPart(ISerializationContext context, ConcernDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConjugatedPortDefinitionMember returns Membership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=ConjugatedPortDefinition
	 */
	protected void sequence_ConjugatedPortDefinitionMember(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConjugatedPortDefinition returns ConjugatedPortDefinition
	 *
	 * Constraint:
	 *     ownedRelationship+=PortConjugation
	 */
	protected void sequence_ConjugatedPortDefinition(ISerializationContext context, ConjugatedPortDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PortTyping returns ConjugatedPortTyping
	 *     ConjugatedPortTyping returns ConjugatedPortTyping
	 *
	 * Constraint:
	 *     portDefinition=[PortDefinition|QualifiedName]
	 */
	protected void sequence_ConjugatedPortTyping(ISerializationContext context, ConjugatedPortTyping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.CONJUGATED_PORT_TYPING__PORT_DEFINITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.CONJUGATED_PORT_TYPING__PORT_DEFINITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConjugatedPortTypingAccess().getPortDefinitionPortDefinitionQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(SysMLPackage.Literals.CONJUGATED_PORT_TYPING__PORT_DEFINITION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns AllocationDefinition
	 *     AllocationDefinition returns AllocationDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=Import | 
	 *             ownedRelationship+=NestedDefinitionMember | 
	 *             ownedRelationship+=VariantUsageMember | 
	 *             ownedRelationship+=ConnectionUsageMember
	 *         )*
	 *     )
	 */
	protected void sequence_ConnectionBody_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_SuperclassingPart(ISerializationContext context, AllocationDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ConnectionDefinition
	 *     ConnectionDefinition returns ConnectionDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=Import | 
	 *             ownedRelationship+=NestedDefinitionMember | 
	 *             ownedRelationship+=VariantUsageMember | 
	 *             ownedRelationship+=ConnectionUsageMember
	 *         )*
	 *     )
	 */
	protected void sequence_ConnectionBody_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_SuperclassingPart(ISerializationContext context, ConnectionDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConnectionUsageMember returns EndFeatureMembership
	 *     ConnectionEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=ConnectionEndElement)
	 */
	protected void sequence_ConnectionEndMember_DefinitionMemberPrefix(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConnectorEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     (memberName=Name? ownedRelatedElement+=ConnectorEnd)
	 */
	protected void sequence_ConnectorEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConnectorEnd returns Feature
	 *
	 * Constraint:
	 *     ((ownedRelationship+=OwnedSubsetting | ownedRelationship+=FeaturePathExpressionMember) ownedRelationship+=MultiplicityMember?)
	 */
	protected void sequence_ConnectorEnd(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns DecisionNode
	 *     ControlNode returns DecisionNode
	 *     DecisionNode returns DecisionNode
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         isComposite?='decide' 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )*
	 *     )
	 */
	protected void sequence_DecisionNode_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(ISerializationContext context, DecisionNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionTargetSuccession returns TransitionUsage
	 *
	 * Constraint:
	 *     ((ownedRelationship+=GuardExpressionMember ownedRelationship+=TransitionSuccessionMember) | ownedRelationship+=TransitionSuccessionMember)
	 */
	protected void sequence_DefaultTargetSuccession_GuardedTargetSuccession(ISerializationContext context, TransitionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefaultTargetSuccession returns TransitionUsage
	 *
	 * Constraint:
	 *     ownedRelationship+=TransitionSuccessionMember
	 */
	protected void sequence_DefaultTargetSuccession(ISerializationContext context, TransitionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns RequirementDefinition
	 *     RequirementDefinition returns RequirementDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         ownedRelationship+=EmptyReturnParameterMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=RequirementConstraintMember | 
	 *                 ownedRelationship+=AddressedConcernMember | 
	 *                 ownedRelationship+=RequirementVerificationMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_DefinitionPrefix_EmptyReturnParameterPart_Identification_OccurrenceDefinitionPrefix_ParameterList_RequirementBodyItem_SuperclassingPart(ISerializationContext context, RequirementDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ViewpointDefinition
	 *     ViewpointDefinition returns ViewpointDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         ownedRelationship+=EmptyReturnParameterMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=SubjectMember | 
	 *                 ownedRelationship+=RequirementConstraintMember | 
	 *                 ownedRelationship+=AddressedConcernMember | 
	 *                 ownedRelationship+=RequirementVerificationMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_DefinitionPrefix_EmptyReturnParameterPart_Identification_OccurrenceDefinitionPrefix_ParameterList_RequirementBodyItem_SuperclassingPart(ISerializationContext context, ViewpointDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns OccurrenceDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((isIndividual?='individual' ownedRelationship+=LifeClassMembership) | isIndividual?='individual')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+ 
	 *         ownedRelationship+=LifeClassMembership?
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_DefinitionPrefix_Identification_IndividualDefinition_OccurrenceDefinitionPrefix_SuperclassingPart(ISerializationContext context, OccurrenceDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IndividualDefinition returns OccurrenceDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual' 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+ 
	 *         ownedRelationship+=LifeClassMembership
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_DefinitionPrefix_Identification_IndividualDefinition_SuperclassingPart(ISerializationContext context, OccurrenceDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ItemDefinition
	 *     ItemDefinition returns ItemDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_SuperclassingPart(ISerializationContext context, ItemDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OccurrenceDefinition returns OccurrenceDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_SuperclassingPart(ISerializationContext context, OccurrenceDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns PartDefinition
	 *     PartDefinition returns PartDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_SuperclassingPart(ISerializationContext context, PartDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns RenderingDefinition
	 *     RenderingDefinition returns RenderingDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_SuperclassingPart(ISerializationContext context, RenderingDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns StakeholderDefinition
	 *     StakeholderDefinition returns StakeholderDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_SuperclassingPart(ISerializationContext context, StakeholderDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns ViewDefinition
	 *     ViewDefinition returns ViewDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=ElementFilterMember | 
	 *                 ownedRelationship+=ViewRenderingMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_DefinitionPrefix_Identification_OccurrenceDefinitionPrefix_SuperclassingPart_ViewDefinitionBodyItem(ISerializationContext context, ViewDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns PortDefinition
	 *     PortDefinition returns PortDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+ 
	 *         ownedRelationship+=ConjugatedPortDefinitionMember
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_DefinitionPrefix_Identification_PortDefinition_SuperclassingPart(ISerializationContext context, PortDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns AttributeDefinition
	 *     AttributeDefinition returns AttributeDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_DefinitionPrefix_Identification_SuperclassingPart(ISerializationContext context, AttributeDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StructureUsageElement returns EventOccurrenceUsage
	 *     OccurrenceUsageElement returns EventOccurrenceUsage
	 *     EventOccurrenceUsage returns EventOccurrenceUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name | ownedRelationship+=OwnedSubsetting)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	 *         ownedRelationship+=NonOccurrenceUsageMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)
	 *             )? 
	 *             ownedRelationship+=NonOccurrenceUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_EventOccurrenceUsage_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(ISerializationContext context, EventOccurrenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StructureUsageElement returns OccurrenceUsage
	 *     OccurrenceUsageElement returns OccurrenceUsage
	 *     VariantUsageElement returns OccurrenceUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (
	 *             (
	 *                 (
	 *                     (isIndividual?='individual'? (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? isComposite?=OccurrenceUsageKeyword?) | 
	 *                     isIndividual?='individual' | 
	 *                     (isIndividual?='individual'? portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)
	 *                 )? 
	 *                 (
	 *                     (
	 *                         ((humanId=Name name=Name?) | name=Name)? 
	 *                         (((ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) isComposite?=';') | isComposite?=';')
	 *                     ) | 
	 *                     (
	 *                         (
	 *                             ownedRelationship+=NonOccurrenceUsageMember | 
	 *                             ((ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) isComposite?='{'? ownedRelationship+=NonOccurrenceUsageMember)
	 *                         )? 
	 *                         (
	 *                             (
	 *                                 ownedRelationship+=OwnedDocumentation | 
	 *                                 ownedRelationship+=Import | 
	 *                                 ownedRelationship+=NestedDefinitionMember | 
	 *                                 ownedRelationship+=VariantUsageMember | 
	 *                                 ownedRelationship+=FlowUsageMember | 
	 *                                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)
	 *                             )? 
	 *                             ownedRelationship+=NonOccurrenceUsageMember
	 *                         )*
	 *                     ) | 
	 *                     ((ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) isComposite?=';')
	 *                 )
	 *             ) | 
	 *             (
	 *                 (
	 *                     (isIndividual?='individual'? (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? isComposite?=OccurrenceUsageKeyword?) | 
	 *                     isIndividual?='individual' | 
	 *                     isIndividual?='individual' | 
	 *                     (isIndividual?='individual'? portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)
	 *                 )? 
	 *                 ((humanId=Name name=Name?) | name=Name)? 
	 *                 (
	 *                     ((ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) isComposite?='{'? ownedRelationship+=NonOccurrenceUsageMember) | 
	 *                     (isComposite?='{'? ownedRelationship+=NonOccurrenceUsageMember)
	 *                 ) 
	 *                 (
	 *                     (
	 *                         ownedRelationship+=OwnedDocumentation | 
	 *                         ownedRelationship+=Import | 
	 *                         ownedRelationship+=NestedDefinitionMember | 
	 *                         ownedRelationship+=VariantUsageMember | 
	 *                         ownedRelationship+=FlowUsageMember | 
	 *                         (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)
	 *                     )? 
	 *                     ownedRelationship+=NonOccurrenceUsageMember
	 *                 )*
	 *             ) | 
	 *             (
	 *                 (
	 *                     (isIndividual?='individual'? (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? isComposite?=OccurrenceUsageKeyword?) | 
	 *                     isIndividual?='individual' | 
	 *                     (isIndividual?='individual'? portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)
	 *                 )? 
	 *                 ((humanId=Name name=Name?) | name=Name)? 
	 *                 ownedRelationship+=MultiplicityMember 
	 *                 ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))? 
	 *                 (
	 *                     ((ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) isComposite?=';') | 
	 *                     (
	 *                         (
	 *                             ((ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) isComposite?='{'? ownedRelationship+=NonOccurrenceUsageMember) | 
	 *                             (isComposite?='{'? ownedRelationship+=NonOccurrenceUsageMember)
	 *                         ) 
	 *                         (
	 *                             (
	 *                                 ownedRelationship+=OwnedDocumentation | 
	 *                                 ownedRelationship+=Import | 
	 *                                 ownedRelationship+=NestedDefinitionMember | 
	 *                                 ownedRelationship+=VariantUsageMember | 
	 *                                 ownedRelationship+=FlowUsageMember | 
	 *                                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)
	 *                             )? 
	 *                             ownedRelationship+=NonOccurrenceUsageMember
	 *                         )*
	 *                     ) | 
	 *                     isComposite?=';'
	 *                 )
	 *             ) | 
	 *             (
	 *                 (
	 *                     (
	 *                         (
	 *                             (isIndividual?='individual'? (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? isComposite?=OccurrenceUsageKeyword?) | 
	 *                             isIndividual?='individual' | 
	 *                             (isIndividual?='individual'? portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)
	 *                         )? 
	 *                         ((humanId=Name name=Name?) | name=Name)?
	 *                     ) | 
	 *                     (
	 *                         (
	 *                             (isIndividual?='individual'? (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? isComposite?=OccurrenceUsageKeyword?) | 
	 *                             isIndividual?='individual' | 
	 *                             (isIndividual?='individual'? portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)
	 *                         )? 
	 *                         ((humanId=Name name=Name?) | name=Name)? 
	 *                         ownedRelationship+=MultiplicityMember 
	 *                         ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?
	 *                     ) | 
	 *                     isIndividual?='individual' | 
	 *                     (isIndividual?='individual' ((humanId=Name name=Name?) | name=Name)?) | 
	 *                     (
	 *                         (isIndividual?='individual' | (isIndividual?='individual' ((humanId=Name name=Name?) | name=Name)?)) 
	 *                         ownedRelationship+=MultiplicityMember 
	 *                         ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?
	 *                     )
	 *                 ) 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     ) 
	 *                     (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *                 )+ 
	 *                 (
	 *                     ((ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) isComposite?=';') | 
	 *                     (
	 *                         (
	 *                             ((ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) isComposite?='{'? ownedRelationship+=NonOccurrenceUsageMember) | 
	 *                             (isComposite?='{'? ownedRelationship+=NonOccurrenceUsageMember)
	 *                         ) 
	 *                         (
	 *                             (
	 *                                 ownedRelationship+=OwnedDocumentation | 
	 *                                 ownedRelationship+=Import | 
	 *                                 ownedRelationship+=NestedDefinitionMember | 
	 *                                 ownedRelationship+=VariantUsageMember | 
	 *                                 ownedRelationship+=FlowUsageMember | 
	 *                                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)
	 *                             )? 
	 *                             ownedRelationship+=NonOccurrenceUsageMember
	 *                         )*
	 *                     ) | 
	 *                     isComposite?=';'
	 *                 )
	 *             ) | 
	 *             (
	 *                 isIndividual?='individual' 
	 *                 ((humanId=Name name=Name?) | name=Name)? 
	 *                 (((ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) isComposite?=';') | isComposite?=';')
	 *             ) | 
	 *             (isIndividual?='individual' isComposite?=';') | 
	 *             (isIndividual?='individual' (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) isComposite?=';') | 
	 *             (
	 *                 (
	 *                     (isIndividual?='individual' isComposite?='{'? ownedRelationship+=NonOccurrenceUsageMember) | 
	 *                     (
	 *                         isIndividual?='individual' 
	 *                         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) 
	 *                         isComposite?='{'? 
	 *                         ownedRelationship+=NonOccurrenceUsageMember
	 *                     )
	 *                 ) 
	 *                 (
	 *                     (
	 *                         ownedRelationship+=OwnedDocumentation | 
	 *                         ownedRelationship+=Import | 
	 *                         ownedRelationship+=NestedDefinitionMember | 
	 *                         ownedRelationship+=VariantUsageMember | 
	 *                         ownedRelationship+=FlowUsageMember | 
	 *                         (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)
	 *                     )? 
	 *                     ownedRelationship+=NonOccurrenceUsageMember
	 *                 )*
	 *             ) | 
	 *             (
	 *                 (isIndividual?='individual' | (isIndividual?='individual' ((humanId=Name name=Name?) | name=Name)?)) 
	 *                 ownedRelationship+=MultiplicityMember 
	 *                 ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))? 
	 *                 (
	 *                     ((ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) isComposite?=';') | 
	 *                     (
	 *                         (
	 *                             ((ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) isComposite?='{'? ownedRelationship+=NonOccurrenceUsageMember) | 
	 *                             (isComposite?='{'? ownedRelationship+=NonOccurrenceUsageMember)
	 *                         ) 
	 *                         (
	 *                             (
	 *                                 ownedRelationship+=OwnedDocumentation | 
	 *                                 ownedRelationship+=Import | 
	 *                                 ownedRelationship+=NestedDefinitionMember | 
	 *                                 ownedRelationship+=VariantUsageMember | 
	 *                                 ownedRelationship+=FlowUsageMember | 
	 *                                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)
	 *                             )? 
	 *                             ownedRelationship+=NonOccurrenceUsageMember
	 *                         )*
	 *                     ) | 
	 *                     isComposite?=';'
	 *                 )
	 *             )
	 *         )
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_IndividualRefUsage_MultiplicityPart_OccurrenceRefUsage_OccurrenceUsagePrefix_PortionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(ISerializationContext context, OccurrenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IndividualRefUsage returns OccurrenceUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (
	 *             (
	 *                 (isIndividual?='individual' | isIndividual?='individual') 
	 *                 (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) 
	 *                 isComposite?=';'
	 *             ) | 
	 *             (
	 *                 (isIndividual?='individual' | isIndividual?='individual') 
	 *                 ((humanId=Name name=Name?) | name=Name) 
	 *                 (((ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) isComposite?=';') | isComposite?=';')
	 *             ) | 
	 *             (
	 *                 (
	 *                     ((isIndividual?='individual' | (isIndividual?='individual' isComposite?='{'?)) ownedRelationship+=OwnedDocumentation?) | 
	 *                     (
	 *                         (isIndividual?='individual' | isIndividual?='individual') 
	 *                         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) 
	 *                         isComposite?='{'? 
	 *                         ownedRelationship+=OwnedDocumentation?
	 *                     ) | 
	 *                     (
	 *                         (isIndividual?='individual' | isIndividual?='individual') 
	 *                         ((humanId=Name name=Name?) | name=Name) 
	 *                         (
	 *                             ((ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) isComposite?='{'? ownedRelationship+=OwnedDocumentation?) | 
	 *                             (isComposite?='{'? ownedRelationship+=OwnedDocumentation?)
	 *                         )
	 *                     )
	 *                 ) 
	 *                 (
	 *                     (
	 *                         ownedRelationship+=Import | 
	 *                         ownedRelationship+=NestedDefinitionMember | 
	 *                         ownedRelationship+=VariantUsageMember | 
	 *                         ownedRelationship+=FlowUsageMember | 
	 *                         ownedRelationship+=NonOccurrenceUsageMember | 
	 *                         (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)
	 *                     )? 
	 *                     ownedRelationship+=OwnedDocumentation?
	 *                 )*
	 *             ) | 
	 *             (
	 *                 (
	 *                     isIndividual?='individual' | 
	 *                     ((isIndividual?='individual' | isIndividual?='individual') ((humanId=Name name=Name?) | name=Name)) | 
	 *                     isIndividual?='individual'
	 *                 ) 
	 *                 (
	 *                     (
	 *                         ownedRelationship+=MultiplicityMember 
	 *                         ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))? 
	 *                         (((ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) isComposite?=';') | isComposite?=';')
	 *                     ) | 
	 *                     (
	 *                         ownedRelationship+=MultiplicityMember 
	 *                         ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))? 
	 *                         (
	 *                             ((ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) isComposite?='{'? ownedRelationship+=OwnedDocumentation?) | 
	 *                             (isComposite?='{'? ownedRelationship+=OwnedDocumentation?)
	 *                         ) 
	 *                         (
	 *                             (
	 *                                 ownedRelationship+=Import | 
	 *                                 ownedRelationship+=NestedDefinitionMember | 
	 *                                 ownedRelationship+=VariantUsageMember | 
	 *                                 ownedRelationship+=FlowUsageMember | 
	 *                                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)
	 *                             )? 
	 *                             ownedRelationship+=OwnedDocumentation?
	 *                         )*
	 *                     )
	 *                 )
	 *             ) | 
	 *             (
	 *                 (
	 *                     isIndividual?='individual' | 
	 *                     ((isIndividual?='individual' | isIndividual?='individual') ((humanId=Name name=Name?) | name=Name)) | 
	 *                     (
	 *                         (
	 *                             isIndividual?='individual' | 
	 *                             ((isIndividual?='individual' | isIndividual?='individual') ((humanId=Name name=Name?) | name=Name)) | 
	 *                             isIndividual?='individual'
	 *                         ) 
	 *                         (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *                     ) | 
	 *                     isIndividual?='individual'
	 *                 ) 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     ) 
	 *                     (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *                 )+ 
	 *                 (
	 *                     (
	 *                         ownedRelationship+=MultiplicityMember 
	 *                         ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))? 
	 *                         (((ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) isComposite?=';') | isComposite?=';')
	 *                     ) | 
	 *                     (
	 *                         ownedRelationship+=MultiplicityMember 
	 *                         ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))? 
	 *                         (
	 *                             ((ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) isComposite?='{'? ownedRelationship+=OwnedDocumentation?) | 
	 *                             (isComposite?='{'? ownedRelationship+=OwnedDocumentation?)
	 *                         ) 
	 *                         (
	 *                             (
	 *                                 ownedRelationship+=Import | 
	 *                                 ownedRelationship+=NestedDefinitionMember | 
	 *                                 ownedRelationship+=VariantUsageMember | 
	 *                                 ownedRelationship+=FlowUsageMember | 
	 *                                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)
	 *                             )? 
	 *                             ownedRelationship+=OwnedDocumentation?
	 *                         )*
	 *                     ) | 
	 *                     ((ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) isComposite?=';') | 
	 *                     (
	 *                         (
	 *                             ((ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember) isComposite?='{'? ownedRelationship+=OwnedDocumentation?) | 
	 *                             (isComposite?='{'? ownedRelationship+=OwnedDocumentation?)
	 *                         ) 
	 *                         (
	 *                             (
	 *                                 ownedRelationship+=Import | 
	 *                                 ownedRelationship+=NestedDefinitionMember | 
	 *                                 ownedRelationship+=VariantUsageMember | 
	 *                                 ownedRelationship+=FlowUsageMember | 
	 *                                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)
	 *                             )? 
	 *                             ownedRelationship+=OwnedDocumentation?
	 *                         )*
	 *                     ) | 
	 *                     isComposite?=';'
	 *                 )
	 *             ) | 
	 *             (isIndividual?='individual' isComposite?=';')
	 *         )
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_IndividualRefUsage_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(ISerializationContext context, OccurrenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns OccurrenceUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (
	 *             (isIndividual?='individual'? (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)?) | 
	 *             isIndividual?='individual' | 
	 *             (isIndividual?='individual'? portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)
	 *         )? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_IndividualUsage_MultiplicityPart_OccurrenceUsagePrefix_PortionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(ISerializationContext context, OccurrenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IndividualUsage returns OccurrenceUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual' 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	 *         ownedRelationship+=OwnedDocumentation? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)
	 *             )? 
	 *             ownedRelationship+=OwnedDocumentation?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_IndividualUsage_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(ISerializationContext context, OccurrenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SuccessionItemFlow returns SuccessionItemFlow
	 *     StructureUsageElement returns SuccessionItemFlow
	 *     OccurrenceUsageElement returns SuccessionItemFlow
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         (
	 *             (
	 *                 ((humanId=Name name=Name?) | name=Name)? 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     ) 
	 *                     (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *                 )* 
	 *                 (ownedRelationship+=ItemFeatureMember | ownedRelationship+=EmptyItemFeatureMember)
	 *             ) | 
	 *             ownedRelationship+=EmptyItemFeatureMember
	 *         ) 
	 *         ownedRelationship+=ItemFlowEndMember 
	 *         ownedRelationship+=ItemFlowEndMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_ItemFlowDeclaration_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_SuccessionItemFlow_TypedBy_Typings(ISerializationContext context, SuccessionItemFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlow returns ItemFlow
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         (
	 *             (
	 *                 ((humanId=Name name=Name?) | name=Name)? 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     ) 
	 *                     (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *                 )* 
	 *                 (ownedRelationship+=ItemFeatureMember | ownedRelationship+=EmptyItemFeatureMember)
	 *             ) | 
	 *             ownedRelationship+=EmptyItemFeatureMember
	 *         ) 
	 *         ownedRelationship+=ItemFlowEndMember 
	 *         ownedRelationship+=ItemFlowEndMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_ItemFlow_ItemFlowDeclaration_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, ItemFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StructureUsageElement returns ItemUsage
	 *     OccurrenceUsageElement returns ItemUsage
	 *     VariantUsageElement returns ItemUsage
	 *     ItemRefUsage returns ItemUsage
	 *     ConnectionEndElement returns ItemUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         isComposite?=ItemUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	 *         ownedRelationship+=NonOccurrenceUsageMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)
	 *             )? 
	 *             ownedRelationship+=NonOccurrenceUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_ItemRefUsage_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(ISerializationContext context, ItemUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OccurrenceRefUsage returns OccurrenceUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         isComposite?=OccurrenceUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	 *         ownedRelationship+=OwnedDocumentation? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)
	 *             )? 
	 *             ownedRelationship+=OwnedDocumentation?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceRefUsage_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(ISerializationContext context, OccurrenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StructureUsageElement returns PartUsage
	 *     OccurrenceUsageElement returns PartUsage
	 *     VariantUsageElement returns PartUsage
	 *     PartRefUsage returns PartUsage
	 *     ConnectionEndElement returns PartUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         isComposite?=PartUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	 *         ownedRelationship+=NonOccurrenceUsageMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)
	 *             )? 
	 *             ownedRelationship+=NonOccurrenceUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_PartRefUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(ISerializationContext context, PartUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StructureUsageElement returns RenderingUsage
	 *     OccurrenceUsageElement returns RenderingUsage
	 *     RenderingRefUsage returns RenderingUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         isComposite?=RenderingUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	 *         ownedRelationship+=NonOccurrenceUsageMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)
	 *             )? 
	 *             ownedRelationship+=NonOccurrenceUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_RenderingRefUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(ISerializationContext context, RenderingUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StructureUsageElement returns StakeholderUsage
	 *     OccurrenceUsageElement returns StakeholderUsage
	 *     VariantUsageElement returns StakeholderUsage
	 *     StakeholderRefUsage returns StakeholderUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         isComposite?=StakeholderUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	 *         ownedRelationship+=NonOccurrenceUsageMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)
	 *             )? 
	 *             ownedRelationship+=NonOccurrenceUsageMember?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_StakeholderRefUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(ISerializationContext context, StakeholderUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns ItemUsage
	 *     FlowUsageElement returns ItemUsage
	 *     ItemUsage returns ItemUsage
	 *     ItemFlowUsage returns ItemUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(ISerializationContext context, ItemUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FlowUsageElement returns OccurrenceUsage
	 *     OccurrenceUsage returns OccurrenceUsage
	 *     OccurrenceFlowUsage returns OccurrenceUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(ISerializationContext context, OccurrenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns PartUsage
	 *     FlowUsageElement returns PartUsage
	 *     PartUsage returns PartUsage
	 *     PartFlowUsage returns PartUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(ISerializationContext context, PartUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns RenderingUsage
	 *     FlowUsageElement returns RenderingUsage
	 *     RenderingUsage returns RenderingUsage
	 *     RenderingFlowUsage returns RenderingUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(ISerializationContext context, RenderingUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns StakeholderUsage
	 *     FlowUsageElement returns StakeholderUsage
	 *     StakeholderUsage returns StakeholderUsage
	 *     StakeholderFlowUsage returns StakeholderUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(ISerializationContext context, StakeholderUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StructureUsageElement returns ViewUsage
	 *     OccurrenceUsageElement returns ViewUsage
	 *     ViewRefUsage returns ViewUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         isComposite?=ViewUsageKeyword? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	 *         ownedRelationship+=ViewRenderingMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember) | 
	 *                 ownedRelationship+=ElementFilterMember | 
	 *                 ownedRelationship+=Expose
	 *             )? 
	 *             ownedRelationship+=ViewRenderingMember?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart_ViewBodyItem_ViewRefUsage(ISerializationContext context, ViewUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns ViewUsage
	 *     FlowUsageElement returns ViewUsage
	 *     ViewUsage returns ViewUsage
	 *     ViewFlowUsage returns ViewUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=ElementFilterMember | 
	 *                 ownedRelationship+=Expose | 
	 *                 ownedRelationship+=ViewRenderingMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart_ViewBodyItem(ISerializationContext context, ViewUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns PortUsage
	 *     StructureUsageElement returns PortUsage
	 *     OccurrenceUsageElement returns PortUsage
	 *     VariantUsageElement returns PortUsage
	 *     ConnectionEndElement returns PortUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (
	 *             (
	 *                 (
	 *                     (humanId=Name name=Name?) | 
	 *                     (
	 *                         ((humanId=Name name=Name?) | name=Name)? 
	 *                         ownedRelationship+=MultiplicityMember 
	 *                         ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?
	 *                     ) | 
	 *                     name=Name
	 *                 )? 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting?) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition?) | 
	 *                         (ownedRelationship+=PortTyping ownedRelationship+=PortTyping*)
	 *                     ) 
	 *                     (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *                 )+
	 *             ) | 
	 *             (humanId=Name name=Name?) | 
	 *             (
	 *                 ((humanId=Name name=Name?) | name=Name)? 
	 *                 ownedRelationship+=MultiplicityMember 
	 *                 ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?
	 *             ) | 
	 *             name=Name
	 *         )? 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_PortTypings_Redefines_Redefinitions_Subsets_Subsettings_UsagePrefix_ValueOrFlowPart_ValuePart(ISerializationContext context, PortUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     PortUsage returns PortUsage
	//     PortEndUsage returns PortUsage
	//
	// Constraint:
	//     (
	//         (isAbstract?='abstract' | isVariation?='variation')? 
	//         (
	//             (
	//                 (
	//                     (humanId=Name name=Name?) | 
	//                     (
	//                         ((humanId=Name name=Name?) | name=Name)? 
	//                         ownedRelationship+=MultiplicityMember 
	//                         ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?
	//                     ) | 
	//                     name=Name
	//                 )? 
	//                 (
	//                     (
	//                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	//                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*) | 
	//                         (ownedRelationship+=PortTyping ownedRelationship+=PortTyping*)
	//                     ) 
	//                     (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	//                 )+
	//             ) | 
	//             (humanId=Name name=Name?) | 
	//             (
	//                 ((humanId=Name name=Name?) | name=Name)? 
	//                 ownedRelationship+=MultiplicityMember 
	//                 ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?
	//             ) | 
	//             name=Name
	//         )? 
	//         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	//         ownedRelationship+=OwnedDocumentation? 
	//         (
	//             (
	//                 ownedRelationship+=Import | 
	//                 ownedRelationship+=NestedDefinitionMember | 
	//                 ownedRelationship+=VariantUsageMember | 
	//                 ownedRelationship+=FlowUsageMember | 
	//                 ownedRelationship+=NonOccurrenceUsageMember | 
	//                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)
	//             )? 
	//             ownedRelationship+=OwnedDocumentation?
	//         )*
	//     )
	//
	// protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_PortTypings_Redefines_Redefinitions_Subsets_Subsettings_UsagePrefix_ValueOrFlowPart_ValuePart(ISerializationContext context, PortUsage semanticObject) { }
	
	/**
	 * Contexts:
	 *     PortionUsage returns OccurrenceUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         portionKind=PortionKind 
	 *         ownedRelationship+=PortioningFeatureMember 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	 *         ownedRelationship+=OwnedDocumentation? 
	 *         (
	 *             (
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)
	 *             )? 
	 *             ownedRelationship+=OwnedDocumentation?
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_PortionUsage_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(ISerializationContext context, OccurrenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReferenceVariantUsage returns ReferenceUsage
	 *     VariantUsageElement returns ReferenceUsage
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (
	 *                 (isAbstract?='abstract' | isVariation?='variation')? 
	 *                 ((humanId=Name name=Name?) | name=Name)? 
	 *                 (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)?
	 *             ) | 
	 *             (
	 *                 (((isAbstract?='abstract' | isVariation?='variation')? ((humanId=Name name=Name?) | name=Name)?) | ownedRelationship+=OwnedSubsetting) 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     ) 
	 *                     (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *                 )+ 
	 *                 (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)?
	 *             ) | 
	 *             ownedRelationship+=OwnedSubsetting
	 *         )? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_ReferenceVariantUsage_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Succession returns Succession
	 *     NonOccurrenceUsageElement returns Succession
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         ownedRelationship+=ConnectorEndMember 
	 *         ownedRelationship+=ConnectorEndMember 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_Succession_SuccessionDeclaration_TypedBy_Typings(ISerializationContext context, Succession semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns AttributeUsage
	 *     NonOccurrenceUsageElement returns AttributeUsage
	 *     VariantUsageElement returns AttributeUsage
	 *     FlowUsageElement returns AttributeUsage
	 *     AttributeUsage returns AttributeUsage
	 *     AttributeVariantUsage returns AttributeUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(ISerializationContext context, AttributeUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReferenceUsage returns ReferenceUsage
	 *     ReferenceEndUsage returns ReferenceUsage
	 *     NonOccurrenceUsageElement returns ReferenceUsage
	 *     FlowUsageElement returns ReferenceUsage
	 *     ConnectionEndElement returns ReferenceUsage
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix_ValueOrFlowPart_ValuePart(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsageElement returns EnumerationUsage
	 *     NonOccurrenceUsageElement returns EnumerationUsage
	 *     FlowUsageElement returns EnumerationUsage
	 *     EnumeratedValue returns EnumerationUsage
	 *     EnumerationUsage returns EnumerationUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValueOrFlowPart_ValuePart(ISerializationContext context, EnumerationUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubjectUsage returns ReferenceUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValueOrFlowPart_ValuePart(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ViewRenderingUsage returns RenderingUsage
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=OwnedSubsetting 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *         )* 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=FlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=OccurrenceUsageMember)?
	 *         )+
	 *     )
	 */
	protected void sequence_DefinitionBodyItem_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ViewRenderingUsage(ISerializationContext context, RenderingUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DoActionMember returns StateSubactionMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? kind=DoActionKind ownedRelatedElement+=StateActionUsage)
	 */
	protected void sequence_DefinitionMemberPrefix_DoActionMember(ISerializationContext context, StateSubactionMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntryActionMember returns StateSubactionMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? kind=EntryActionKind ownedRelatedElement+=StateActionUsage)
	 */
	protected void sequence_DefinitionMemberPrefix_EntryActionMember(ISerializationContext context, StateSubactionMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntryTransitionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=PrefixDocumentation* 
	 *         visibility=VisibilityIndicator? 
	 *         (ownedRelatedElement+=GuardedTargetSuccession | ownedRelatedElement+=TransitionSuccession)
	 *     )
	 */
	protected void sequence_DefinitionMemberPrefix_EntryTransitionMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnumerationUsageMember returns VariantMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=EnumeratedValue)
	 */
	protected void sequence_DefinitionMemberPrefix_EnumerationUsageMember(ISerializationContext context, VariantMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExitActionMember returns StateSubactionMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? kind=ExitActionKind ownedRelatedElement+=StateActionUsage)
	 */
	protected void sequence_DefinitionMemberPrefix_ExitActionMember(ISerializationContext context, StateSubactionMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FlowUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? direction=FeatureDirection ownedRelatedElement+=FlowUsageElement)
	 */
	protected void sequence_DefinitionMemberPrefix_FlowUsageMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitialNodeMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? memberFeature=[Feature|QualifiedName])
	 */
	protected void sequence_DefinitionMemberPrefix_InitialNodeMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceUsageMember returns EndFeatureMembership
	 *     InterfaceEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=PortEndUsage)
	 */
	protected void sequence_DefinitionMemberPrefix_InterfaceEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonOccurrenceUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=NonOccurrenceUsageElement)
	 */
	protected void sequence_DefinitionMemberPrefix_NonOccurrenceUsageMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConnectionUsageMember returns FeatureMembership
	 *     InterfaceUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=PrefixDocumentation* 
	 *         visibility=VisibilityIndicator? 
	 *         (ownedRelatedElement+=NonOccurrenceUsageElement | ownedRelatedElement+=OccurrenceUsageElement)
	 *     )
	 */
	protected void sequence_DefinitionMemberPrefix_NonOccurrenceUsageMember_OccurrenceUsageMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NestedDefinitionMember returns Membership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=PrefixDocumentation* 
	 *         visibility=VisibilityIndicator? 
	 *         (ownedRelatedElement+=DefinitionElement | (memberElement=[Element|QualifiedName] memberName=Name?))
	 *     )
	 */
	protected void sequence_DefinitionMemberPrefix_NonUsagePackageMember(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjectiveMember returns ObjectiveMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=ObjectiveRequirementUsage)
	 */
	protected void sequence_DefinitionMemberPrefix_ObjectiveMember(ISerializationContext context, ObjectiveMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OccurrenceUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=OccurrenceUsageElement)
	 */
	protected void sequence_DefinitionMemberPrefix_OccurrenceUsageMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterFlowUsageMember returns ParameterMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? direction=FeatureDirection ownedRelatedElement+=FlowUsageElement)
	 */
	protected void sequence_DefinitionMemberPrefix_ParameterFlowUsageMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RequirementConstraintMember returns RequirementConstraintMembership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=PrefixDocumentation* 
	 *         visibility=VisibilityIndicator? 
	 *         kind=RequirementConstraintKind 
	 *         ownedRelatedElement+=RequirementConstraintUsage
	 *     )
	 */
	protected void sequence_DefinitionMemberPrefix_RequirementConstraintMember(ISerializationContext context, RequirementConstraintMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RequirementVerificationMember returns RequirementVerificationMembership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=PrefixDocumentation* 
	 *         visibility=VisibilityIndicator? 
	 *         kind=RequirementVerificationKind 
	 *         ownedRelatedElement+=RequirementVerificationUsage
	 *     )
	 */
	protected void sequence_DefinitionMemberPrefix_RequirementVerificationMember(ISerializationContext context, RequirementVerificationMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ResultExpressionMember returns ResultExpressionMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=OwnedExpression)
	 */
	protected void sequence_DefinitionMemberPrefix_ResultExpressionMember(ISerializationContext context, ResultExpressionMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReturnParameterFlowUsageMember returns ReturnParameterMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=FlowUsageElement)
	 */
	protected void sequence_DefinitionMemberPrefix_ReturnParameterFlowUsageMember(ISerializationContext context, ReturnParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StructureUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=StructureUsageElement)
	 */
	protected void sequence_DefinitionMemberPrefix_StructureUsageMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubjectMember returns SubjectMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=SubjectUsage)
	 */
	protected void sequence_DefinitionMemberPrefix_SubjectMember(ISerializationContext context, SubjectMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetSuccessionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=ActionTargetSuccession)
	 */
	protected void sequence_DefinitionMemberPrefix_TargetSuccessionMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetTransitionUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=TargetTransitionUsage)
	 */
	protected void sequence_DefinitionMemberPrefix_TargetTransitionUsageMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TransitionUsageMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=TransitionUsage)
	 */
	protected void sequence_DefinitionMemberPrefix_TransitionUsageMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariantUsageMember returns VariantMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=VariantUsageElement)
	 */
	protected void sequence_DefinitionMemberPrefix_VariantUsageMember(ISerializationContext context, VariantMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ViewRenderingMember returns ViewRenderingMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=ViewRenderingUsage)
	 */
	protected void sequence_DefinitionMemberPrefix_ViewRenderingMember(ISerializationContext context, ViewRenderingMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns InterfaceDefinition
	 *     InterfaceDefinition returns InterfaceDefinition
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         (isIndividual?='individual' ownedRelationship+=LifeClassMembership)? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=Import | 
	 *             ownedRelationship+=NestedDefinitionMember | 
	 *             ownedRelationship+=VariantUsageMember | 
	 *             ownedRelationship+=InterfaceUsageMember
	 *         )*
	 *     )
	 */
	protected void sequence_DefinitionPrefix_Identification_InterfaceDefBody_OccurrenceDefinitionPrefix_SuperclassingPart(ISerializationContext context, InterfaceDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns Dependency
	 *     Dependency returns Dependency
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         client+=[Element|QualifiedName] 
	 *         client+=[Element|QualifiedName]* 
	 *         supplier+=[Element|QualifiedName] 
	 *         supplier+=[Element|QualifiedName]*
	 *     )
	 */
	protected void sequence_Dependency_Identification(ISerializationContext context, Dependency semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DocumentationComment returns Comment
	 *
	 * Constraint:
	 *     (humanId=Name? body=REGULAR_COMMENT)
	 */
	protected void sequence_DocumentationComment(ISerializationContext context, Comment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EffectBehaviorMember returns TransitionFeatureMembership
	 *
	 * Constraint:
	 *     (kind=EffectFeatureKind ownedRelatedElement+=EffectBehaviorUsage)
	 */
	protected void sequence_EffectBehaviorMember(ISerializationContext context, TransitionFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementFilterMember returns ElementFilterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=OwnedExpression
	 */
	protected void sequence_ElementFilterMember(ISerializationContext context, ElementFilterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateActionUsage returns ActionUsage
	 *     EmptyActionUsage returns ActionUsage
	 *     EffectBehaviorUsage returns ActionUsage
	 *
	 * Constraint:
	 *     {ActionUsage}
	 */
	protected void sequence_EmptyActionUsage(ISerializationContext context, ActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyAnnotation returns Annotation
	 *
	 * Constraint:
	 *     {Annotation}
	 */
	protected void sequence_EmptyAnnotation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyImport returns Import
	 *
	 * Constraint:
	 *     {Import}
	 */
	protected void sequence_EmptyImport(ISerializationContext context, Import semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptyItemFeature
	 */
	protected void sequence_EmptyItemFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFeature returns ItemFeature
	 *
	 * Constraint:
	 *     {ItemFeature}
	 */
	protected void sequence_EmptyItemFeature(ISerializationContext context, ItemFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFlowEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptyItemFlowEnd
	 */
	protected void sequence_EmptyItemFlowEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFlowEnd returns ItemFlowEnd
	 *
	 * Constraint:
	 *     ownedRelationship+=EmptyItemFlowFeatureMember
	 */
	protected void sequence_EmptyItemFlowEnd(ISerializationContext context, ItemFlowEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFlowFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptyItemFlowFeature
	 */
	protected void sequence_EmptyItemFlowFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFlowFeature returns ItemFlowFeature
	 *
	 * Constraint:
	 *     ownedRelationship+=EmptyRedefinition
	 */
	protected void sequence_EmptyItemFlowFeature(ISerializationContext context, ItemFlowFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptyParameter
	 */
	protected void sequence_EmptyParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyParameter returns ReferenceUsage
	 *
	 * Constraint:
	 *     {ReferenceUsage}
	 */
	protected void sequence_EmptyParameter(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyRedefinition returns Redefinition
	 *
	 * Constraint:
	 *     {Redefinition}
	 */
	protected void sequence_EmptyRedefinition(ISerializationContext context, Redefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyReturnParameterMember returns ReturnParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptyParameter
	 */
	protected void sequence_EmptyReturnParameterMember(ISerializationContext context, ReturnParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptySourceEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptySourceEnd
	 */
	protected void sequence_EmptySourceEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptySourceEnd returns SourceEnd
	 *
	 * Constraint:
	 *     {SourceEnd}
	 */
	protected void sequence_EmptySourceEnd(ISerializationContext context, SourceEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptySuccessionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptySuccession
	 */
	protected void sequence_EmptySuccessionMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptySuccession returns Succession
	 *
	 * Constraint:
	 *     (ownedRelationship+=MultiplicitySourceEndMember ownedRelationship+=EmptyTargetEndMember)
	 */
	protected void sequence_EmptySuccession(ISerializationContext context, Succession semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyTargetEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptyTargetEnd
	 */
	protected void sequence_EmptyTargetEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyTargetEnd returns TargetEnd
	 *
	 * Constraint:
	 *     {TargetEnd}
	 */
	protected void sequence_EmptyTargetEnd(ISerializationContext context, TargetEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns EnumerationDefinition
	 *     EnumerationDefinition returns EnumerationDefinition
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         ownedRelationship+=EnumerationUsageMember*
	 *     )
	 */
	protected void sequence_EnumerationBody_Identification_SuperclassingPart(ISerializationContext context, EnumerationDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expose returns Expose
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=PrefixDocumentation* 
	 *         visibility=BasicVisibilityIndicator? 
	 *         ((importedNamespace=[Namespace|QualifiedName] isRecursive?='**'?) | ownedRelatedElement+=FilterPackage)
	 *     )
	 */
	protected void sequence_Expose_ImportedFilterPackage_ImportedNamespace(ISerializationContext context, Expose semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeaturePathExpressionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=FeaturePathExpression
	 */
	protected void sequence_FeaturePathExpressionMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeaturePathExpression returns PathStepExpression
	 *     FeaturePathExpression.PathStepExpression_1_0 returns PathStepExpression
	 *
	 * Constraint:
	 *     (operand+=FeaturePathExpression_PathStepExpression_1_0 operand+=FeatureReferenceExpression)
	 */
	protected void sequence_FeaturePathExpression(ISerializationContext context, PathStepExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureValue returns FeatureValue
	 *
	 * Constraint:
	 *     ownedRelatedElement+=OwnedExpression
	 */
	protected void sequence_FeatureValue(ISerializationContext context, FeatureValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FilterPackageMember returns ElementFilterMembership
	 *
	 * Constraint:
	 *     (visibility=FilterPackageMemberVisibility ownedRelatedElement+=OwnedExpression)
	 */
	protected void sequence_FilterPackageMember(ISerializationContext context, ElementFilterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FilterPackage returns Package
	 *
	 * Constraint:
	 *     (ownedRelationship+=FilterPackageImport ownedRelationship+=FilterPackageMember+)
	 */
	protected void sequence_FilterPackage(ISerializationContext context, org.omg.sysml.lang.sysml.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns ForkNode
	 *     ControlNode returns ForkNode
	 *     ForkNode returns ForkNode
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         isComposite?='fork' 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )*
	 *     )
	 */
	protected void sequence_ForkNode_Identification_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(ISerializationContext context, ForkNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GuardExpressionMember returns TransitionFeatureMembership
	 *
	 * Constraint:
	 *     (kind=GuardFeatureKind ownedRelatedElement+=OwnedExpression)
	 */
	protected void sequence_GuardExpressionMember(ISerializationContext context, TransitionFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GuardedSuccessionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=GuardedSuccession
	 */
	protected void sequence_GuardedSuccessionMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GuardedSuccession returns TransitionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         ownedRelationship+=TransitionSourceMember 
	 *         ownedRelationship+=GuardExpressionMember 
	 *         ownedRelationship+=TransitionSuccessionMember
	 *     )
	 */
	protected void sequence_GuardedSuccession_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, TransitionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GuardedTargetSuccession returns TransitionUsage
	 *
	 * Constraint:
	 *     (ownedRelationship+=GuardExpressionMember ownedRelationship+=TransitionSuccessionMember)
	 */
	protected void sequence_GuardedTargetSuccession(ISerializationContext context, TransitionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemParameter returns ReferenceUsage
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             ((humanId=Name name=Name?) | name=Name)? 
	 *             ownedRelationship+=MultiplicityMember 
	 *             ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?
	 *         ) | 
	 *         (
	 *             (
	 *                 (humanId=Name name=Name?) | 
	 *                 (
	 *                     ((humanId=Name name=Name?) | name=Name)? 
	 *                     ownedRelationship+=MultiplicityMember 
	 *                     ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?
	 *                 ) | 
	 *                 name=Name
	 *             )? 
	 *             (
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                     (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                     (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                 ) 
	 *                 (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *             )+
	 *         ) | 
	 *         (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=MultiplicityMember?)
	 *     )
	 */
	protected void sequence_Identification_ItemParameter_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns JoinNode
	 *     ControlNode returns JoinNode
	 *     JoinNode returns JoinNode
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         isComposite?='join' 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_JoinNode_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(ISerializationContext context, JoinNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionNode returns MergeNode
	 *     ControlNode returns MergeNode
	 *     MergeNode returns MergeNode
	 *
	 * Constraint:
	 *     (
	 *         (isAbstract?='abstract' | isVariation?='variation')? 
	 *         isIndividual?='individual'? 
	 *         (portionKind=PortionKind ownedRelationship+=PortioningFeatureMember)? 
	 *         isComposite?='merge' 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MergeNode_MultiplicityPart_OccurrenceUsagePrefix_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_UsagePrefix(ISerializationContext context, MergeNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns ActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, ActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns AnalysisCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, AnalysisCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns AttributeUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, AttributeUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns CalculationUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, CalculationUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns ConstraintUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, ConstraintUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns ItemUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, ItemUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns PartUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, PartUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns ReferenceUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns RenderingUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, RenderingUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns RequirementUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, RequirementUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns StateUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, StateUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns ActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, ActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns AnalysisCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, AnalysisCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns AttributeUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, AttributeUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns CalculationUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, CalculationUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns ConstraintUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, ConstraintUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns ItemUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, ItemUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns PartUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, PartUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns RenderingUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, RenderingUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns RequirementUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, RequirementUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns StateUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, StateUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns VerificationCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, VerificationCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns ViewUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, ViewUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionUsageParameter returns ViewpointUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         (ownedRelationship+=FeatureValue | ownedRelationship+=SourceItemFlowMember)?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy_ValueOrFlowPart_ValuePart(ISerializationContext context, ViewpointUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns VerificationCaseUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, VerificationCaseUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns ViewUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, ViewUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns ViewpointUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_Redefines_Subsets_TypedBy(ISerializationContext context, ViewpointUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PerformedActionUsage returns SendActionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         ownedRelationship+=NodeParameterMember 
	 *         ownedRelationship+=NodeParameterMember
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_PerformedActionUsage_Redefines_Redefinitions_SendNodeDeclaration_Subsets_Subsettings_TypedBy_Typings(ISerializationContext context, SendActionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TransitionUsage returns TransitionUsage
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             (
	 *                 (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                 (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                 (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *             ) 
	 *             (ownedRelationship+=MultiplicityMember ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?))?)?
	 *         )* 
	 *         ownedRelationship+=TransitionSourceMember 
	 *         (ownedRelationship+=EmptyImport ownedRelationship+=TriggerActionMember)? 
	 *         ownedRelationship+=GuardExpressionMember? 
	 *         ownedRelationship+=EffectBehaviorMember? 
	 *         ownedRelationship+=TransitionSuccessionMember
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TransitionUsage_TypedBy_Typings(ISerializationContext context, TransitionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Package returns Package
	 *     DefinitionElement returns Package
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedDocumentation | ownedRelationship+=Import | ownedRelationship+=PackageMember | ownedRelationship+=ElementFilterMember)*
	 *     )
	 */
	protected void sequence_Identification_PackageBody(ISerializationContext context, org.omg.sysml.lang.sysml.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefinitionElement returns StateDefinition
	 *     StateDefinition returns StateDefinition
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedSuperclassing ownedRelationship+=OwnedSuperclassing*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         (ownedRelationship+=EntryActionMember ownedRelationship+=EntryTransitionMember*)? 
	 *         ownedRelationship+=DoActionMember? 
	 *         ownedRelationship+=ExitActionMember? 
	 *         (
	 *             (
	 *                 ownedRelationship+=OwnedDocumentation | 
	 *                 ownedRelationship+=Import | 
	 *                 ownedRelationship+=NestedDefinitionMember | 
	 *                 ownedRelationship+=VariantUsageMember | 
	 *                 ownedRelationship+=ParameterFlowUsageMember | 
	 *                 ownedRelationship+=NonOccurrenceUsageMember | 
	 *                 ownedRelationship+=TransitionUsageMember
	 *             )? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=StructureUsageMember)? 
	 *             (ownedRelationship+=EmptySuccessionMember? ownedRelationship+=BehaviorUsageMember ownedRelationship+=TargetTransitionUsageMember*)?
	 *         )+
	 *     )
	 */
	protected void sequence_Identification_ParameterList_StateBodyPart_StateDefBodyItem_StateDefinition_SuperclassingPart(ISerializationContext context, StateDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TextualRepresentation returns TextualRepresentation
	 *     DefinitionElement returns TextualRepresentation
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=Annotation | ownedRelationship+=EmptyAnnotation) 
	 *         language=STRING_VALUE 
	 *         body=REGULAR_COMMENT
	 *     )
	 */
	protected void sequence_Identification_TextualRepresentation(ISerializationContext context, TextualRepresentation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=PrefixDocumentation* 
	 *         visibility=BasicVisibilityIndicator? 
	 *         ((importedNamespace=[Namespace|QualifiedName] isRecursive?='**'?) | ownedRelatedElement+=FilterPackage)
	 *     )
	 */
	protected void sequence_Import_ImportedFilterPackage_ImportedNamespace(ISerializationContext context, Import semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FilterPackageImport returns Import
	 *
	 * Constraint:
	 *     (importedNamespace=[Namespace|QualifiedName] isRecursive?='**'?)
	 */
	protected void sequence_ImportedNamespace(ISerializationContext context, Import semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (memberName=Name? ownedRelatedElement+=ItemFeature)
	 */
	protected void sequence_ItemFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFeature returns ItemFeature
	 *
	 * Constraint:
	 *     (
	 *         (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=MultiplicityMember?) | 
	 *         (ownedRelationship+=MultiplicityMember ownedRelationship+=OwnedFeatureTyping?)
	 *     )
	 */
	protected void sequence_ItemFeature(ISerializationContext context, ItemFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=ItemFlowEnd
	 */
	protected void sequence_ItemFlowEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowEnd returns ItemFlowEnd
	 *
	 * Constraint:
	 *     ownedRelationship+=ItemFlowFeatureMember
	 */
	protected void sequence_ItemFlowEnd(ISerializationContext context, ItemFlowEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=ItemFlowFeature
	 */
	protected void sequence_ItemFlowFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowFeature returns ItemFlowFeature
	 *
	 * Constraint:
	 *     (ownedRelationship+=OwnedRedefinition | ownedRelationship+=FeaturePathExpressionMember)
	 */
	protected void sequence_ItemFlowFeature(ISerializationContext context, ItemFlowFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=ItemParameter
	 */
	protected void sequence_ItemParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LifeClassMembership returns Membership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=LifeClass
	 */
	protected void sequence_LifeClassMembership(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LifeClass returns LifeClass
	 *
	 * Constraint:
	 *     {LifeClass}
	 */
	protected void sequence_LifeClass(ISerializationContext context, LifeClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MetadataFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=MetadataFeature
	 */
	protected void sequence_MetadataFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MetadataFeatureValue returns MetadataFeatureValue
	 *
	 * Constraint:
	 *     ownedRelatedElement+=OwnedExpression
	 */
	protected void sequence_MetadataFeatureValue(ISerializationContext context, MetadataFeatureValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MetadataFeature returns MetadataFeature
	 *
	 * Constraint:
	 *     (ownedRelationship+=OwnedRedefinition ownedRelationship+=MetadataFeatureValue)
	 */
	protected void sequence_MetadataFeature(ISerializationContext context, MetadataFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MetadataTyping returns FeatureTyping
	 *
	 * Constraint:
	 *     type=[DataType|QualifiedName]
	 */
	protected void sequence_MetadataTyping(ISerializationContext context, FeatureTyping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMetadataTypingAccess().getTypeDataTypeQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.FEATURE_TYPING__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiplicityExpressionMember returns Membership
	 *
	 * Constraint:
	 *     (ownedRelatedElement+=LiteralExpression | ownedRelatedElement+=FeatureReferenceExpression)
	 */
	protected void sequence_MultiplicityExpressionMember(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultiplicityMember returns Membership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=Multiplicity
	 */
	protected void sequence_MultiplicityMember(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultiplicitySourceEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=MultiplicitySourceEnd
	 */
	protected void sequence_MultiplicitySourceEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultiplicitySourceEnd returns SourceEnd
	 *
	 * Constraint:
	 *     ownedRelationship+=MultiplicityMember?
	 */
	protected void sequence_MultiplicitySourceEnd(ISerializationContext context, SourceEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Multiplicity returns MultiplicityRange
	 *
	 * Constraint:
	 *     (ownedRelationship+=MultiplicityExpressionMember ownedRelationship+=MultiplicityExpressionMember?)
	 */
	protected void sequence_Multiplicity(ISerializationContext context, MultiplicityRange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NodeParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=NodeParameter
	 */
	protected void sequence_NodeParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NodeParameter returns ReferenceUsage
	 *
	 * Constraint:
	 *     ownedRelationship+=FeatureValue
	 */
	protected void sequence_NodeParameter(ISerializationContext context, ReferenceUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackageMember returns Membership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=PrefixDocumentation* 
	 *         visibility=BasicVisibilityIndicator? 
	 *         (ownedRelatedElement+=DefinitionElement | (memberElement=[Element|QualifiedName] memberName=Name?) | ownedRelatedElement+=UsageElement)
	 *     )
	 */
	protected void sequence_NonUsagePackageMember_PackageMember_UsagePackageMember(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedDocumentation returns Documentation
	 *
	 * Constraint:
	 *     ownedRelatedElement+=DocumentationComment
	 */
	protected void sequence_OwnedDocumentation(ISerializationContext context, Documentation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedFeatureTyping returns FeatureTyping
	 *     PortTyping returns FeatureTyping
	 *
	 * Constraint:
	 *     type=[Type|QualifiedName]
	 */
	protected void sequence_OwnedFeatureTyping(ISerializationContext context, FeatureTyping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedFeatureTypingAccess().getTypeTypeQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.FEATURE_TYPING__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedRedefinition returns Redefinition
	 *
	 * Constraint:
	 *     redefinedFeature=[Feature|QualifiedName]
	 */
	protected void sequence_OwnedRedefinition(ISerializationContext context, Redefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedRedefinitionAccess().getRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedSubsetting returns Subsetting
	 *
	 * Constraint:
	 *     subsettedFeature=[Feature|QualifiedName]
	 */
	protected void sequence_OwnedSubsetting(ISerializationContext context, Subsetting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.SUBSETTING__SUBSETTED_FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.SUBSETTING__SUBSETTED_FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedSubsettingAccess().getSubsettedFeatureFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.SUBSETTING__SUBSETTED_FEATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedSuperclassing returns Superclassing
	 *
	 * Constraint:
	 *     superclass=[Classifier|QualifiedName]
	 */
	protected void sequence_OwnedSuperclassing(ISerializationContext context, Superclassing semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.SUPERCLASSING__SUPERCLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.SUPERCLASSING__SUPERCLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedSuperclassingAccess().getSuperclassClassifierQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.SUPERCLASSING__SUPERCLASS, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RootNamespace returns Namespace
	 *
	 * Constraint:
	 *     (ownedRelationship+=OwnedDocumentation | ownedRelationship+=Import | ownedRelationship+=ElementFilterMember | ownedRelationship+=PackageMember)*
	 */
	protected void sequence_PackageBodyElement_RootNamespace(ISerializationContext context, Namespace semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     (direction=FeatureDirection? ownedRelatedElement+=Parameter)
	 */
	protected void sequence_ParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PortConjugation returns PortConjugation
	 *
	 * Constraint:
	 *     {PortConjugation}
	 */
	protected void sequence_PortConjugation(ISerializationContext context, PortConjugation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PortioningFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=PortioningFeature
	 */
	protected void sequence_PortioningFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PortioningFeature returns PortioningFeature
	 *
	 * Constraint:
	 *     {PortioningFeature}
	 */
	protected void sequence_PortioningFeature(ISerializationContext context, PortioningFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrefixDocumentationComment returns Comment
	 *
	 * Constraint:
	 *     (humanId=Name? body=DOCUMENTATION_COMMENT)
	 */
	protected void sequence_PrefixDocumentationComment(ISerializationContext context, Comment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrefixDocumentation returns Annotation
	 *
	 * Constraint:
	 *     ownedRelatedElement+=PrefixDocumentationComment
	 */
	protected void sequence_PrefixDocumentation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReturnParameterMember returns ReturnParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=Parameter
	 */
	protected void sequence_ReturnParameterMember(ISerializationContext context, ReturnParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SatisfactionConnectorMember returns Membership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=SatisfactionConnector
	 */
	protected void sequence_SatisfactionConnectorMember(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SatisfactionConnector returns BindingConnector
	 *
	 * Constraint:
	 *     (ownedRelationship+=EmptySourceEndMember ownedRelationship+=ConnectorEndMember)
	 */
	protected void sequence_SatisfactionConnector(ISerializationContext context, BindingConnector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceItemFlowMember returns Membership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=SourceItemFlow
	 */
	protected void sequence_SourceItemFlowMember(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceItemFlow returns ItemFlow
	 *
	 * Constraint:
	 *     (ownedRelationship+=EmptyItemFeatureMember ownedRelationship+=ItemFlowEndMember ownedRelationship+=EmptyItemFlowEndMember)
	 */
	protected void sequence_SourceItemFlow(ISerializationContext context, ItemFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceItemFlow returns SuccessionItemFlow
	 *
	 * Constraint:
	 *     (ownedRelationship+=EmptyItemFeatureMember ownedRelationship+=ItemFlowEndMember ownedRelationship+=EmptyItemFlowEndMember)
	 */
	protected void sequence_SourceItemFlow(ISerializationContext context, SuccessionItemFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionTargetSuccession returns Succession
	 *     TargetSuccession returns Succession
	 *
	 * Constraint:
	 *     (ownedRelationship+=MultiplicitySourceEndMember ownedRelationship+=ConnectorEndMember)
	 */
	protected void sequence_TargetSuccession(ISerializationContext context, Succession semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetTransitionUsage returns TransitionUsage
	 *
	 * Constraint:
	 *     (
	 *         (ownedRelationship+=EmptyImport ownedRelationship+=TriggerActionMember)? 
	 *         ownedRelationship+=GuardExpressionMember? 
	 *         ownedRelationship+=EffectBehaviorMember? 
	 *         ownedRelationship+=TransitionSuccessionMember
	 *     )
	 */
	protected void sequence_TargetTransitionUsage(ISerializationContext context, TransitionUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TransitionSourceMember returns Membership
	 *
	 * Constraint:
	 *     memberElement=[Feature|QualifiedName]
	 */
	protected void sequence_TransitionSourceMember(ISerializationContext context, Membership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.MEMBERSHIP__MEMBER_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.MEMBERSHIP__MEMBER_ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransitionSourceMemberAccess().getMemberElementFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.MEMBERSHIP__MEMBER_ELEMENT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TransitionSuccessionMember returns Membership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=TransitionSuccession
	 */
	protected void sequence_TransitionSuccessionMember(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TransitionSuccession returns Succession
	 *
	 * Constraint:
	 *     (ownedRelationship+=EmptySourceEndMember ownedRelationship+=ConnectorEndMember)
	 */
	protected void sequence_TransitionSuccession(ISerializationContext context, Succession semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TriggerActionMember returns TransitionFeatureMembership
	 *
	 * Constraint:
	 *     (kind=TriggerFeatureKind ownedRelatedElement+=TriggerAction)
	 */
	protected void sequence_TriggerActionMember(ISerializationContext context, TransitionFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TrueLiteralExpression returns LiteralBoolean
	 *
	 * Constraint:
	 *     {LiteralBoolean}
	 */
	protected void sequence_TrueLiteralExpression(ISerializationContext context, LiteralBoolean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TrueLiteralMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=TrueLiteralExpression
	 */
	protected void sequence_TrueLiteralMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
