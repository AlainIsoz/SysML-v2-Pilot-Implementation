/*
 * generated by Xtext 2.25.0
 */
package org.omg.sysml.xtext.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.omg.sysml.xtext.services.SysMLGrammarAccess;

@SuppressWarnings("all")
public class SysMLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SysMLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ActionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_AllocationUsageDeclaration_AllocateKeywordParserRuleCall_1_0_or___AllocationUsageKeywordParserRuleCall_0_0_AllocateKeywordParserRuleCall_0_2_0__;
	protected AbstractElementAlias match_AnnotatingFeatureBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_AnnotatingFeature_CommercialAtKeyword_0_0_or_MetadataKeyword_0_1;
	protected AbstractElementAlias match_BaseExpression_LeftParenthesisKeyword_5_0_a;
	protected AbstractElementAlias match_BaseExpression_LeftParenthesisKeyword_5_0_p;
	protected AbstractElementAlias match_CalculationBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_3__;
	protected AbstractElementAlias match_CalculationReturnParameterMember_ReturnKeyword_0_q;
	protected AbstractElementAlias match_CaseBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_3__;
	protected AbstractElementAlias match_Comment_CommentKeyword_0_0_0_or_CommentKeyword_0_1_0_0;
	protected AbstractElementAlias match_Comment_CommentKeyword_0_1_0_0_q;
	protected AbstractElementAlias match_DefinitionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_Dependency_FromKeyword_1_1_q;
	protected AbstractElementAlias match_EffectBehaviorUsage___LeftCurlyBracketKeyword_1_1_0_RightCurlyBracketKeyword_1_1_2__q;
	protected AbstractElementAlias match_EnumeratedValue_EnumerationUsageKeywordParserRuleCall_0_q;
	protected AbstractElementAlias match_EnumerationBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_FeatureValue_EqualsSignKeyword_0_1_1_q;
	protected AbstractElementAlias match_GuardedSuccession_FirstKeyword_1_1_q;
	protected AbstractElementAlias match_InterfaceBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_InterfaceUsageDeclaration_ConnectorKeywordParserRuleCall_0_1_0_q;
	protected AbstractElementAlias match_MetadataFeature_FeatureKeyword_0_q;
	protected AbstractElementAlias match_MetadataFeature___ColonGreaterThanSignGreaterThanSignKeyword_1_0_or_RedefinesKeyword_1_1__q;
	protected AbstractElementAlias match_NullExpression_NullKeyword_1_0_or___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_1__;
	protected AbstractElementAlias match_PackageBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_Parameter_ReferenceUsageKeywordParserRuleCall_0_2_1_0_q;
	protected AbstractElementAlias match_PrefixDocumentationComment_DocKeyword_0_0_q;
	protected AbstractElementAlias match_RequirementBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_ReturnParameterMember_ReturnKeyword_0_q;
	protected AbstractElementAlias match_SequenceExpression_CommaKeyword_1_0_q;
	protected AbstractElementAlias match_SuccessionDeclaration_FirstKeyword_0_1_q;
	protected AbstractElementAlias match_TargetTransitionUsage_TransitionUsageKeywordParserRuleCall_1_0_0_q;
	protected AbstractElementAlias match_TextualRepresentation_RepKeyword_0_0_0_or_RepKeyword_0_1_0_0;
	protected AbstractElementAlias match_TextualRepresentation_RepKeyword_0_1_0_0_q;
	protected AbstractElementAlias match_TransitionUsage_FirstKeyword_1_1_q;
	protected AbstractElementAlias match_UseCaseBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_ViewBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_ViewDefinitionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SysMLGrammarAccess) access;
		match_ActionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getActionBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getActionBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getActionBodyAccess().getSemicolonKeyword_0()));
		match_AllocationUsageDeclaration_AllocateKeywordParserRuleCall_1_0_or___AllocationUsageKeywordParserRuleCall_0_0_AllocateKeywordParserRuleCall_0_2_0__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getAllocationUsageDeclarationAccess().getAllocationUsageKeywordParserRuleCall_0_0()), new TokenAlias(false, false, grammarAccess.getAllocationUsageDeclarationAccess().getAllocateKeywordParserRuleCall_0_2_0())), new TokenAlias(false, false, grammarAccess.getAllocationUsageDeclarationAccess().getAllocateKeywordParserRuleCall_1_0()));
		match_AnnotatingFeatureBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getAnnotatingFeatureBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getAnnotatingFeatureBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getAnnotatingFeatureBodyAccess().getSemicolonKeyword_0()));
		match_AnnotatingFeature_CommercialAtKeyword_0_0_or_MetadataKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAnnotatingFeatureAccess().getCommercialAtKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getAnnotatingFeatureAccess().getMetadataKeyword_0_1()));
		match_BaseExpression_LeftParenthesisKeyword_5_0_a = new TokenAlias(true, true, grammarAccess.getBaseExpressionAccess().getLeftParenthesisKeyword_5_0());
		match_BaseExpression_LeftParenthesisKeyword_5_0_p = new TokenAlias(true, false, grammarAccess.getBaseExpressionAccess().getLeftParenthesisKeyword_5_0());
		match_CalculationBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_3__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getCalculationBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getCalculationBodyAccess().getRightCurlyBracketKeyword_1_3())), new TokenAlias(false, false, grammarAccess.getCalculationBodyAccess().getSemicolonKeyword_0()));
		match_CalculationReturnParameterMember_ReturnKeyword_0_q = new TokenAlias(false, true, grammarAccess.getCalculationReturnParameterMemberAccess().getReturnKeyword_0());
		match_CaseBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_3__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getCaseBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getCaseBodyAccess().getRightCurlyBracketKeyword_1_3())), new TokenAlias(false, false, grammarAccess.getCaseBodyAccess().getSemicolonKeyword_0()));
		match_Comment_CommentKeyword_0_0_0_or_CommentKeyword_0_1_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCommentAccess().getCommentKeyword_0_0_0()), new TokenAlias(false, false, grammarAccess.getCommentAccess().getCommentKeyword_0_1_0_0()));
		match_Comment_CommentKeyword_0_1_0_0_q = new TokenAlias(false, true, grammarAccess.getCommentAccess().getCommentKeyword_0_1_0_0());
		match_DefinitionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getDefinitionBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getDefinitionBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getDefinitionBodyAccess().getSemicolonKeyword_0()));
		match_Dependency_FromKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getDependencyAccess().getFromKeyword_1_1());
		match_EffectBehaviorUsage___LeftCurlyBracketKeyword_1_1_0_RightCurlyBracketKeyword_1_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getEffectBehaviorUsageAccess().getLeftCurlyBracketKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getEffectBehaviorUsageAccess().getRightCurlyBracketKeyword_1_1_2()));
		match_EnumeratedValue_EnumerationUsageKeywordParserRuleCall_0_q = new TokenAlias(false, true, grammarAccess.getEnumeratedValueAccess().getEnumerationUsageKeywordParserRuleCall_0());
		match_EnumerationBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getEnumerationBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getEnumerationBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getEnumerationBodyAccess().getSemicolonKeyword_0()));
		match_FeatureValue_EqualsSignKeyword_0_1_1_q = new TokenAlias(false, true, grammarAccess.getFeatureValueAccess().getEqualsSignKeyword_0_1_1());
		match_GuardedSuccession_FirstKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getGuardedSuccessionAccess().getFirstKeyword_1_1());
		match_InterfaceBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getInterfaceBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getInterfaceBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getInterfaceBodyAccess().getSemicolonKeyword_0()));
		match_InterfaceUsageDeclaration_ConnectorKeywordParserRuleCall_0_1_0_q = new TokenAlias(false, true, grammarAccess.getInterfaceUsageDeclarationAccess().getConnectorKeywordParserRuleCall_0_1_0());
		match_MetadataFeature_FeatureKeyword_0_q = new TokenAlias(false, true, grammarAccess.getMetadataFeatureAccess().getFeatureKeyword_0());
		match_MetadataFeature___ColonGreaterThanSignGreaterThanSignKeyword_1_0_or_RedefinesKeyword_1_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getMetadataFeatureAccess().getColonGreaterThanSignGreaterThanSignKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getMetadataFeatureAccess().getRedefinesKeyword_1_1()));
		match_NullExpression_NullKeyword_1_0_or___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getNullExpressionAccess().getLeftParenthesisKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getNullExpressionAccess().getRightParenthesisKeyword_1_1_1())), new TokenAlias(false, false, grammarAccess.getNullExpressionAccess().getNullKeyword_1_0()));
		match_PackageBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getPackageBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getPackageBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getPackageBodyAccess().getSemicolonKeyword_0()));
		match_Parameter_ReferenceUsageKeywordParserRuleCall_0_2_1_0_q = new TokenAlias(false, true, grammarAccess.getParameterAccess().getReferenceUsageKeywordParserRuleCall_0_2_1_0());
		match_PrefixDocumentationComment_DocKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getPrefixDocumentationCommentAccess().getDocKeyword_0_0());
		match_RequirementBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getRequirementBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getRequirementBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getRequirementBodyAccess().getSemicolonKeyword_0()));
		match_ReturnParameterMember_ReturnKeyword_0_q = new TokenAlias(false, true, grammarAccess.getReturnParameterMemberAccess().getReturnKeyword_0());
		match_SequenceExpression_CommaKeyword_1_0_q = new TokenAlias(false, true, grammarAccess.getSequenceExpressionAccess().getCommaKeyword_1_0());
		match_SuccessionDeclaration_FirstKeyword_0_1_q = new TokenAlias(false, true, grammarAccess.getSuccessionDeclarationAccess().getFirstKeyword_0_1());
		match_TargetTransitionUsage_TransitionUsageKeywordParserRuleCall_1_0_0_q = new TokenAlias(false, true, grammarAccess.getTargetTransitionUsageAccess().getTransitionUsageKeywordParserRuleCall_1_0_0());
		match_TextualRepresentation_RepKeyword_0_0_0_or_RepKeyword_0_1_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTextualRepresentationAccess().getRepKeyword_0_0_0()), new TokenAlias(false, false, grammarAccess.getTextualRepresentationAccess().getRepKeyword_0_1_0_0()));
		match_TextualRepresentation_RepKeyword_0_1_0_0_q = new TokenAlias(false, true, grammarAccess.getTextualRepresentationAccess().getRepKeyword_0_1_0_0());
		match_TransitionUsage_FirstKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getTransitionUsageAccess().getFirstKeyword_1_1());
		match_UseCaseBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getUseCaseBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getUseCaseBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getUseCaseBodyAccess().getSemicolonKeyword_0()));
		match_ViewBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getViewBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getViewBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getViewBodyAccess().getSemicolonKeyword_0()));
		match_ViewDefinitionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getViewDefinitionBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getViewDefinitionBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getViewDefinitionBodyAccess().getSemicolonKeyword_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getActionDefKeywordRule())
			return getActionDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getActionUsageKeywordRule())
			return getActionUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getAllocateKeywordRule())
			return getAllocateKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getAllocationDefKeywordRule())
			return getAllocationDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getAllocationUsageKeywordRule())
			return getAllocationUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getAnalysisCaseDefKeywordRule())
			return getAnalysisCaseDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getAnalysisCaseUsageKeywordRule())
			return getAnalysisCaseUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getAttributeDefKeywordRule())
			return getAttributeDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getAttributeUsageKeywordRule())
			return getAttributeUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBindingKeywordRule())
			return getBindingKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCalculationDefKeywordRule())
			return getCalculationDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCalculationUsageKeywordRule())
			return getCalculationUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCaseDefKeywordRule())
			return getCaseDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCaseUsageKeywordRule())
			return getCaseUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getConcernDefKeywordRule())
			return getConcernDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getConcernUsageKeywordRule())
			return getConcernUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getConnectionDefKeywordRule())
			return getConnectionDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getConnectionUsageKeywordRule())
			return getConnectionUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getConnectorKeywordRule())
			return getConnectorKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getConstraintDefKeywordRule())
			return getConstraintDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getConstraintUsageKeywordRule())
			return getConstraintUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDefinedByKeywordRule())
			return getDefinedByKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEnumerationDefKeywordRule())
			return getEnumerationDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEnumerationUsageKeywordRule())
			return getEnumerationUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getInterfaceDefKeywordRule())
			return getInterfaceDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getInterfaceUsageKeywordRule())
			return getInterfaceUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getItemDefKeywordRule())
			return getItemDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getItemFlowKeywordRule())
			return getItemFlowKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getItemUsageKeywordRule())
			return getItemUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMessageKeywordRule())
			return getMessageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOccurrenceDefKeywordRule())
			return getOccurrenceDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOccurrenceUsageKeywordRule())
			return getOccurrenceUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPartDefKeywordRule())
			return getPartDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPartUsageKeywordRule())
			return getPartUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPortDefKeywordRule())
			return getPortDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPortUsageKeywordRule())
			return getPortUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRedefinesKeywordRule())
			return getRedefinesKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getReferenceUsageKeywordRule())
			return getReferenceUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRenderingDefKeywordRule())
			return getRenderingDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRenderingUsageKeywordRule())
			return getRenderingUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRequirementDefKeywordRule())
			return getRequirementDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRequirementUsageKeywordRule())
			return getRequirementUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSpecializesKeywordRule())
			return getSpecializesKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getStateDefKeywordRule())
			return getStateDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getStateUsageKeywordRule())
			return getStateUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSubsetsKeywordRule())
			return getSubsetsKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSuccessionItemFlowKeywordRule())
			return getSuccessionItemFlowKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSuccessionKeywordRule())
			return getSuccessionKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTransitionUsageKeywordRule())
			return getTransitionUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getUseCaseDefKeywordRule())
			return getUseCaseDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getUseCaseUsageKeywordRule())
			return getUseCaseUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getVerificationCaseDefKeywordRule())
			return getVerificationCaseDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getVerificationCaseUsageKeywordRule())
			return getVerificationCaseUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getViewDefKeywordRule())
			return getViewDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getViewUsageKeywordRule())
			return getViewUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getViewpointDefKeywordRule())
			return getViewpointDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getViewpointUsageKeywordRule())
			return getViewpointUsageKeywordToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * ActionDefKeyword :
	 * 	ActionKeyword 'def'
	 * ;
	 */
	protected String getActionDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "action def";
	}
	
	/**
	 * ActionUsageKeyword :
	 * 	ActionKeyword
	 * ;
	 */
	protected String getActionUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "action";
	}
	
	/**
	 * AllocateKeyword :
	 * 	'allocate'
	 * ;
	 */
	protected String getAllocateKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "allocate";
	}
	
	/**
	 * AllocationDefKeyword :
	 * 	AllocationKeyword 'def'
	 * ;
	 */
	protected String getAllocationDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "allocation def";
	}
	
	/**
	 * AllocationUsageKeyword :
	 * 	AllocationKeyword
	 * ;
	 */
	protected String getAllocationUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "allocation";
	}
	
	/**
	 * AnalysisCaseDefKeyword :
	 * 	AnalysisCaseKeyword 'def'
	 * ;
	 */
	protected String getAnalysisCaseDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "analysis def";
	}
	
	/**
	 * AnalysisCaseUsageKeyword :
	 * 	AnalysisCaseKeyword
	 * ;
	 */
	protected String getAnalysisCaseUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "analysis";
	}
	
	/**
	 * AttributeDefKeyword :
	 * 	AttributeKeyword 'def'
	 * ;
	 */
	protected String getAttributeDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "attribute def";
	}
	
	/**
	 * AttributeUsageKeyword :
	 * 	AttributeKeyword
	 * ;
	 */
	protected String getAttributeUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "attribute";
	}
	
	/**
	 * BindingKeyword :
	 * 	'bind'
	 * ;
	 */
	protected String getBindingKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "bind";
	}
	
	/**
	 * CalculationDefKeyword :
	 * 	CalculationKeyword 'def'
	 * ;
	 */
	protected String getCalculationDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "calc def";
	}
	
	/**
	 * CalculationUsageKeyword :
	 * 	CalculationKeyword
	 * ;
	 */
	protected String getCalculationUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "calc";
	}
	
	/**
	 * CaseDefKeyword :
	 * 	CaseKeyword 'def'
	 * ;
	 */
	protected String getCaseDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "case def";
	}
	
	/**
	 * CaseUsageKeyword :
	 * 	CaseKeyword
	 * ;
	 */
	protected String getCaseUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "case";
	}
	
	/**
	 * ConcernDefKeyword :
	 * 	ConcernKeyword 'def'
	 * ;
	 */
	protected String getConcernDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "concern def";
	}
	
	/**
	 * ConcernUsageKeyword :
	 * 	ConcernKeyword
	 * ;
	 */
	protected String getConcernUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "concern";
	}
	
	/**
	 * ConnectionDefKeyword :
	 * 	ConnectionKeyword 'def' | 'assoc' 'block' 
	 * ;
	 */
	protected String getConnectionDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "connection def";
	}
	
	/**
	 * ConnectionUsageKeyword :
	 * 	ConnectionKeyword
	 * ;
	 */
	protected String getConnectionUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "connection";
	}
	
	/**
	 * ConnectorKeyword :
	 * 	'connect'
	 * ;
	 */
	protected String getConnectorKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "connect";
	}
	
	/**
	 * ConstraintDefKeyword :
	 * 	ConstraintKeyword 'def'
	 * ;
	 */
	protected String getConstraintDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "constraint def";
	}
	
	/**
	 * ConstraintUsageKeyword :
	 * 	ConstraintKeyword
	 * ;
	 */
	protected String getConstraintUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "constraint";
	}
	
	/**
	 * DefinedByKeyword :
	 * 	':' | 'defined' 'by'
	 * ;
	 */
	protected String getDefinedByKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":";
	}
	
	/**
	 * EnumerationDefKeyword :
	 * 	EnumerationKeyword 'def'
	 * ;
	 */
	protected String getEnumerationDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "enum def";
	}
	
	/**
	 * EnumerationUsageKeyword :
	 * 	EnumerationKeyword
	 * ;
	 */
	protected String getEnumerationUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "enum";
	}
	
	/**
	 * InterfaceDefKeyword :
	 * 	InterfaceKeyword 'def'
	 * ;
	 */
	protected String getInterfaceDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "interface def";
	}
	
	/**
	 * InterfaceUsageKeyword :
	 * 	InterfaceKeyword
	 * ;
	 */
	protected String getInterfaceUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "interface";
	}
	
	/**
	 * ItemDefKeyword :
	 * 	ItemKeyword 'def'
	 * ;
	 */
	protected String getItemDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "item def";
	}
	
	/**
	 * ItemFlowKeyword :
	 * 	'stream'
	 * ;
	 */
	protected String getItemFlowKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "stream";
	}
	
	/**
	 * ItemUsageKeyword :
	 * 	ItemKeyword
	 * ;
	 */
	protected String getItemUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "item";
	}
	
	/**
	 * MessageKeyword :
	 * 	'message'
	 * ;
	 */
	protected String getMessageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "message";
	}
	
	/**
	 * OccurrenceDefKeyword :
	 * 	OccurrenceKeyword 'def'
	 * ;
	 */
	protected String getOccurrenceDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "occurrence def";
	}
	
	/**
	 * OccurrenceUsageKeyword :
	 * 	OccurrenceKeyword
	 * ;
	 */
	protected String getOccurrenceUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "occurrence";
	}
	
	/**
	 * PartDefKeyword :
	 * 	PartKeyword 'def' | 'block'
	 * ;
	 */
	protected String getPartDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "part def";
	}
	
	/**
	 * PartUsageKeyword :
	 * 	PartKeyword
	 * ;
	 */
	protected String getPartUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "part";
	}
	
	/**
	 * PortDefKeyword :
	 * 	PortKeyword 'def'
	 * ;
	 */
	protected String getPortDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "port def";
	}
	
	/**
	 * PortUsageKeyword :
	 * 	PortKeyword
	 * ;
	 */
	protected String getPortUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "port";
	}
	
	/**
	 * RedefinesKeyword :
	 * 	':>>' | 'redefines'
	 * ;
	 */
	protected String getRedefinesKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":>>";
	}
	
	/**
	 * ReferenceUsageKeyword :
	 * 	ReferenceKeyword
	 * ;
	 */
	protected String getReferenceUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "ref";
	}
	
	/**
	 * RenderingDefKeyword :
	 * 	RenderingKeyword 'def'
	 * ;
	 */
	protected String getRenderingDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "rendering def";
	}
	
	/**
	 * RenderingUsageKeyword :
	 * 	RenderingKeyword
	 * ;
	 */
	protected String getRenderingUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "rendering";
	}
	
	/**
	 * RequirementDefKeyword :
	 * 	RequirementKeyword 'def'
	 * ;
	 */
	protected String getRequirementDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "requirement def";
	}
	
	/**
	 * RequirementUsageKeyword :
	 * 	RequirementKeyword
	 * ;
	 */
	protected String getRequirementUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "requirement";
	}
	
	/**
	 * SpecializesKeyword :
	 * 	':>' | 'specializes'
	 * ;
	 */
	protected String getSpecializesKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":>";
	}
	
	/**
	 * StateDefKeyword :
	 * 	StateKeyword 'def'
	 * ;
	 */
	protected String getStateDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "state def";
	}
	
	/**
	 * StateUsageKeyword :
	 * 	StateKeyword
	 * ;
	 */
	protected String getStateUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "state";
	}
	
	/**
	 * SubsetsKeyword :
	 * 	':>' | 'subsets'
	 * ;
	 */
	protected String getSubsetsKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":>";
	}
	
	/**
	 * SuccessionItemFlowKeyword :
	 * 	'flow'
	 * ;
	 */
	protected String getSuccessionItemFlowKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "flow";
	}
	
	/**
	 * SuccessionKeyword :
	 * 	'succession'
	 * ;
	 */
	protected String getSuccessionKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "succession";
	}
	
	/**
	 * TransitionUsageKeyword :
	 * 	'transition'
	 * ;
	 */
	protected String getTransitionUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "transition";
	}
	
	/**
	 * UseCaseDefKeyword :
	 * 	UseCaseKeyword 'def'
	 * ;
	 */
	protected String getUseCaseDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "use case def";
	}
	
	/**
	 * UseCaseUsageKeyword :
	 * 	UseCaseKeyword
	 * ;
	 */
	protected String getUseCaseUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "use case";
	}
	
	/**
	 * VerificationCaseDefKeyword :
	 * 	VerificationCaseKeyword 'def'
	 * ;
	 */
	protected String getVerificationCaseDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "verification def";
	}
	
	/**
	 * VerificationCaseUsageKeyword :
	 * 	VerificationCaseKeyword
	 * ;
	 */
	protected String getVerificationCaseUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "verification";
	}
	
	/**
	 * ViewDefKeyword :
	 * 	ViewKeyword 'def'
	 * ;
	 */
	protected String getViewDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "view def";
	}
	
	/**
	 * ViewUsageKeyword :
	 * 	ViewKeyword
	 * ;
	 */
	protected String getViewUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "view";
	}
	
	/**
	 * ViewpointDefKeyword :
	 * 	ViewpointKeyword 'def'
	 * ;
	 */
	protected String getViewpointDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "viewpoint def";
	}
	
	/**
	 * ViewpointUsageKeyword :
	 * 	ViewpointKeyword
	 * ;
	 */
	protected String getViewpointUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "viewpoint";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ActionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_ActionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AllocationUsageDeclaration_AllocateKeywordParserRuleCall_1_0_or___AllocationUsageKeywordParserRuleCall_0_0_AllocateKeywordParserRuleCall_0_2_0__.equals(syntax))
				emit_AllocationUsageDeclaration_AllocateKeywordParserRuleCall_1_0_or___AllocationUsageKeywordParserRuleCall_0_0_AllocateKeywordParserRuleCall_0_2_0__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AnnotatingFeatureBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_AnnotatingFeatureBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AnnotatingFeature_CommercialAtKeyword_0_0_or_MetadataKeyword_0_1.equals(syntax))
				emit_AnnotatingFeature_CommercialAtKeyword_0_0_or_MetadataKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BaseExpression_LeftParenthesisKeyword_5_0_a.equals(syntax))
				emit_BaseExpression_LeftParenthesisKeyword_5_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BaseExpression_LeftParenthesisKeyword_5_0_p.equals(syntax))
				emit_BaseExpression_LeftParenthesisKeyword_5_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CalculationBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_3__.equals(syntax))
				emit_CalculationBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_3__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CalculationReturnParameterMember_ReturnKeyword_0_q.equals(syntax))
				emit_CalculationReturnParameterMember_ReturnKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CaseBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_3__.equals(syntax))
				emit_CaseBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_3__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Comment_CommentKeyword_0_0_0_or_CommentKeyword_0_1_0_0.equals(syntax))
				emit_Comment_CommentKeyword_0_0_0_or_CommentKeyword_0_1_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Comment_CommentKeyword_0_1_0_0_q.equals(syntax))
				emit_Comment_CommentKeyword_0_1_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DefinitionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_DefinitionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Dependency_FromKeyword_1_1_q.equals(syntax))
				emit_Dependency_FromKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EffectBehaviorUsage___LeftCurlyBracketKeyword_1_1_0_RightCurlyBracketKeyword_1_1_2__q.equals(syntax))
				emit_EffectBehaviorUsage___LeftCurlyBracketKeyword_1_1_0_RightCurlyBracketKeyword_1_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EnumeratedValue_EnumerationUsageKeywordParserRuleCall_0_q.equals(syntax))
				emit_EnumeratedValue_EnumerationUsageKeywordParserRuleCall_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EnumerationBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_EnumerationBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FeatureValue_EqualsSignKeyword_0_1_1_q.equals(syntax))
				emit_FeatureValue_EqualsSignKeyword_0_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_GuardedSuccession_FirstKeyword_1_1_q.equals(syntax))
				emit_GuardedSuccession_FirstKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_InterfaceBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_InterfaceBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_InterfaceUsageDeclaration_ConnectorKeywordParserRuleCall_0_1_0_q.equals(syntax))
				emit_InterfaceUsageDeclaration_ConnectorKeywordParserRuleCall_0_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MetadataFeature_FeatureKeyword_0_q.equals(syntax))
				emit_MetadataFeature_FeatureKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MetadataFeature___ColonGreaterThanSignGreaterThanSignKeyword_1_0_or_RedefinesKeyword_1_1__q.equals(syntax))
				emit_MetadataFeature___ColonGreaterThanSignGreaterThanSignKeyword_1_0_or_RedefinesKeyword_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NullExpression_NullKeyword_1_0_or___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_1__.equals(syntax))
				emit_NullExpression_NullKeyword_1_0_or___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PackageBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_PackageBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Parameter_ReferenceUsageKeywordParserRuleCall_0_2_1_0_q.equals(syntax))
				emit_Parameter_ReferenceUsageKeywordParserRuleCall_0_2_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrefixDocumentationComment_DocKeyword_0_0_q.equals(syntax))
				emit_PrefixDocumentationComment_DocKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RequirementBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_RequirementBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReturnParameterMember_ReturnKeyword_0_q.equals(syntax))
				emit_ReturnParameterMember_ReturnKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SequenceExpression_CommaKeyword_1_0_q.equals(syntax))
				emit_SequenceExpression_CommaKeyword_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SuccessionDeclaration_FirstKeyword_0_1_q.equals(syntax))
				emit_SuccessionDeclaration_FirstKeyword_0_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TargetTransitionUsage_TransitionUsageKeywordParserRuleCall_1_0_0_q.equals(syntax))
				emit_TargetTransitionUsage_TransitionUsageKeywordParserRuleCall_1_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TextualRepresentation_RepKeyword_0_0_0_or_RepKeyword_0_1_0_0.equals(syntax))
				emit_TextualRepresentation_RepKeyword_0_0_0_or_RepKeyword_0_1_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TextualRepresentation_RepKeyword_0_1_0_0_q.equals(syntax))
				emit_TextualRepresentation_RepKeyword_0_1_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TransitionUsage_FirstKeyword_1_1_q.equals(syntax))
				emit_TransitionUsage_FirstKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_UseCaseBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_UseCaseBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ViewBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_ViewBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ViewDefinitionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_ViewDefinitionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'perform' ActionUsageKeyword (ambiguity) (rule start)
	 *     (rule start) ActionDefKeyword (ambiguity) (rule start)
	 *     (rule start) ActionUsageKeyword (ambiguity) (rule start)
	 *     direction=FeatureDirection 'perform' ActionUsageKeyword (ambiguity) (rule end)
	 *     direction=FeatureDirection ActionUsageKeyword (ambiguity) (rule end)
	 *     humanId=Name (ambiguity) (rule end)
	 *     isAbstract?='abstract' 'perform' ActionUsageKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' ActionDefKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' ActionUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' 'perform' ActionUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' ActionUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' 'perform' ActionUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' ActionUsageKeyword (ambiguity) (rule end)
	 *     isNonunique?='nonunique' (ambiguity) (rule end)
	 *     isOrdered?='ordered' (ambiguity) (rule end)
	 *     isReference?='ref' 'perform' ActionUsageKeyword (ambiguity) (rule end)
	 *     isReference?='ref' ActionUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' 'perform' ActionUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' ActionDefKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' ActionUsageKeyword (ambiguity) (rule end)
	 *     name=Name (ambiguity) (rule end)
	 *     ownedRelationship+=ActionUsageParameterMember ')' (ambiguity) (rule end)
	 *     ownedRelationship+=EmptyParameterMember (ambiguity) (rule end)
	 *     ownedRelationship+=FeatureTyping (ambiguity) (rule end)
	 *     ownedRelationship+=FeatureValue (ambiguity) (rule end)
	 *     ownedRelationship+=LifeClassMembership ActionDefKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=NodeParameterMember (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedMultiplicity (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedRedefinition (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedSubclassification (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedSubsetting (ambiguity) (rule end)
	 *     ownedRelationship+=ParameterMember ')' (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember 'perform' ActionUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember ActionUsageKeyword (ambiguity) (rule end)
	 */
	protected void emit_ActionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (AllocationUsageKeyword AllocateKeyword) | AllocateKeyword
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' ownedRelationship+=ConnectorEndMember
	 *     (rule start) (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     direction=FeatureDirection (ambiguity) '(' ownedRelationship+=ConnectorEndMember
	 *     direction=FeatureDirection (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isAbstract?='abstract' (ambiguity) '(' ownedRelationship+=ConnectorEndMember
	 *     isAbstract?='abstract' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isEnd?='end' (ambiguity) '(' ownedRelationship+=ConnectorEndMember
	 *     isEnd?='end' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isIndividual?='individual' (ambiguity) '(' ownedRelationship+=ConnectorEndMember
	 *     isIndividual?='individual' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isReference?='ref' (ambiguity) '(' ownedRelationship+=ConnectorEndMember
	 *     isReference?='ref' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isVariation?='variation' (ambiguity) '(' ownedRelationship+=ConnectorEndMember
	 *     isVariation?='variation' (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     ownedRelationship+=PortioningFeatureMember (ambiguity) '(' ownedRelationship+=ConnectorEndMember
	 *     ownedRelationship+=PortioningFeatureMember (ambiguity) ownedRelationship+=ConnectorEndMember
	 */
	protected void emit_AllocationUsageDeclaration_AllocateKeywordParserRuleCall_1_0_or___AllocationUsageKeywordParserRuleCall_0_0_AllocateKeywordParserRuleCall_0_2_0__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedRelationship+=Annotation (ambiguity) (rule end)
	 *     ownedRelationship+=EmptyAnnotation (ambiguity) (rule end)
	 */
	protected void emit_AnnotatingFeatureBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '@' | 'metadata'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'id' humanId=Name
	 *     (rule start) (ambiguity) name=Name
	 *     (rule start) (ambiguity) ownedRelationship+=MetadataTyping
	 */
	protected void emit_AnnotatingFeature_CommercialAtKeyword_0_0_or_MetadataKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '*' (rule start)
	 *     (rule start) (ambiguity) 'if' operand+=NullCoalescingExpression
	 *     (rule start) (ambiguity) '{' ownedRelationship+=ActionNodeMember
	 *     (rule start) (ambiguity) '{' ownedRelationship+=BehaviorUsageMember
	 *     (rule start) (ambiguity) '{' ownedRelationship+=DefinitionMember
	 *     (rule start) (ambiguity) '{' ownedRelationship+=EmptySuccessionMember
	 *     (rule start) (ambiguity) '{' ownedRelationship+=GuardedSuccessionMember
	 *     (rule start) (ambiguity) '{' ownedRelationship+=Import
	 *     (rule start) (ambiguity) '{' ownedRelationship+=InitialNodeMember
	 *     (rule start) (ambiguity) '{' ownedRelationship+=NonOccurrenceUsageMember
	 *     (rule start) (ambiguity) '{' ownedRelationship+=OwnedDocumentation
	 *     (rule start) (ambiguity) '{' ownedRelationship+=ResultExpressionMember
	 *     (rule start) (ambiguity) '{' ownedRelationship+=ReturnParameterFlowUsageMember
	 *     (rule start) (ambiguity) '{' ownedRelationship+=StructureUsageMember
	 *     (rule start) (ambiguity) '{' ownedRelationship+=VariantUsageMember
	 *     (rule start) (ambiguity) (';' | ('{' '}')) (rule start)
	 *     (rule start) (ambiguity) ('null' | ('(' ')')) (rule start)
	 *     (rule start) (ambiguity) operand+=SelfReferenceExpression
	 *     (rule start) (ambiguity) operator='all'
	 *     (rule start) (ambiguity) operator=UnaryOperator
	 *     (rule start) (ambiguity) ownedRelationship+=FeatureReferenceMember
	 *     (rule start) (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     (rule start) (ambiguity) value=BooleanValue
	 *     (rule start) (ambiguity) value=DECIMAL_VALUE
	 *     (rule start) (ambiguity) value=RealValue
	 *     (rule start) (ambiguity) value=STRING_VALUE
	 *     (rule start) (ambiguity) {OperatorExpression.operand+=}
	 *     (rule start) (ambiguity) {PathSelectExpression.operand+=}
	 *     (rule start) (ambiguity) {PathStepExpression.operand+=}
	 */
	protected void emit_BaseExpression_LeftParenthesisKeyword_5_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'if' operand+=NullCoalescingExpression
	 *     (rule start) (ambiguity) operand+=SelfReferenceExpression
	 *     (rule start) (ambiguity) operator='all'
	 *     (rule start) (ambiguity) operator=UnaryOperator
	 *     (rule start) (ambiguity) {OperatorExpression.operand+=}
	 *     (rule start) (ambiguity) {PathSelectExpression.operand+=}
	 *     (rule start) (ambiguity) {PathStepExpression.operand+=}
	 */
	protected void emit_BaseExpression_LeftParenthesisKeyword_5_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('* (ambiguity) (rule start)
	 *     (rule start) 'assert' ConstraintUsageKeyword (ambiguity) (rule start)
	 *     (rule start) 'constraint' (ambiguity) (rule start)
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) CalculationDefKeyword (ambiguity) (rule start)
	 *     (rule start) CalculationUsageKeyword (ambiguity) (rule start)
	 *     (rule start) ConcernUsageKeyword (ambiguity) (rule start)
	 *     (rule start) ConstraintUsageKeyword (ambiguity) (rule start)
	 *     direction=FeatureDirection 'assert' ConstraintUsageKeyword (ambiguity) (rule end)
	 *     direction=FeatureDirection CalculationUsageKeyword (ambiguity) (rule end)
	 *     direction=FeatureDirection ConstraintUsageKeyword (ambiguity) (rule end)
	 *     humanId=Name (ambiguity) (rule end)
	 *     isAbstract?='abstract' 'assert' ConstraintUsageKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' CalculationDefKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' CalculationUsageKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' ConstraintUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' 'assert' ConstraintUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' CalculationUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' ConstraintUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' 'assert' ConstraintUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' CalculationUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' ConstraintUsageKeyword (ambiguity) (rule end)
	 *     isNegated?='not' ConstraintUsageKeyword (ambiguity) (rule end)
	 *     isNonunique?='nonunique' (ambiguity) (rule end)
	 *     isOrdered?='ordered' (ambiguity) (rule end)
	 *     isReference?='ref' 'assert' ConstraintUsageKeyword (ambiguity) (rule end)
	 *     isReference?='ref' CalculationUsageKeyword (ambiguity) (rule end)
	 *     isReference?='ref' ConstraintUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' 'assert' ConstraintUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' CalculationDefKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' CalculationUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' ConstraintUsageKeyword (ambiguity) (rule end)
	 *     name=Name (ambiguity) (rule end)
	 *     ownedRelationship+=ActionUsageParameterMember ')' (ambiguity) (rule end)
	 *     ownedRelationship+=CalculationReturnParameterMember (ambiguity) (rule end)
	 *     ownedRelationship+=EmptyReturnParameterMember (ambiguity) (rule end)
	 *     ownedRelationship+=FeatureTyping (ambiguity) (rule end)
	 *     ownedRelationship+=FeatureValue (ambiguity) (rule end)
	 *     ownedRelationship+=LifeClassMembership CalculationDefKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedMultiplicity (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedRedefinition (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedSubclassification (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedSubsetting (ambiguity) (rule end)
	 *     ownedRelationship+=ParameterMember ')' (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember 'assert' ConstraintUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember CalculationUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember ConstraintUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=ReturnParameterMember (ambiguity) (rule end)
	 */
	protected void emit_CalculationBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_3__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'return'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ownedRelatedElement+=ActionUsageParameter
	 */
	protected void emit_CalculationReturnParameterMember_ReturnKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) AnalysisCaseDefKeyword (ambiguity) (rule start)
	 *     (rule start) AnalysisCaseUsageKeyword (ambiguity) (rule start)
	 *     (rule start) CaseDefKeyword (ambiguity) (rule start)
	 *     (rule start) CaseUsageKeyword (ambiguity) (rule start)
	 *     (rule start) VerificationCaseDefKeyword (ambiguity) (rule start)
	 *     (rule start) VerificationCaseUsageKeyword (ambiguity) (rule start)
	 *     direction=FeatureDirection AnalysisCaseUsageKeyword (ambiguity) (rule end)
	 *     direction=FeatureDirection CaseUsageKeyword (ambiguity) (rule end)
	 *     direction=FeatureDirection VerificationCaseUsageKeyword (ambiguity) (rule end)
	 *     humanId=Name (ambiguity) (rule end)
	 *     isAbstract?='abstract' AnalysisCaseDefKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' AnalysisCaseUsageKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' CaseDefKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' CaseUsageKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' VerificationCaseDefKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' VerificationCaseUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' AnalysisCaseUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' CaseUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' VerificationCaseUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' AnalysisCaseUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' CaseUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' VerificationCaseUsageKeyword (ambiguity) (rule end)
	 *     isNonunique?='nonunique' (ambiguity) (rule end)
	 *     isOrdered?='ordered' (ambiguity) (rule end)
	 *     isReference?='ref' AnalysisCaseUsageKeyword (ambiguity) (rule end)
	 *     isReference?='ref' CaseUsageKeyword (ambiguity) (rule end)
	 *     isReference?='ref' VerificationCaseUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' AnalysisCaseDefKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' AnalysisCaseUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' CaseDefKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' CaseUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' VerificationCaseDefKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' VerificationCaseUsageKeyword (ambiguity) (rule end)
	 *     name=Name (ambiguity) (rule end)
	 *     ownedRelationship+=ActionUsageParameterMember ')' (ambiguity) (rule end)
	 *     ownedRelationship+=CalculationReturnParameterMember (ambiguity) (rule end)
	 *     ownedRelationship+=FeatureTyping (ambiguity) (rule end)
	 *     ownedRelationship+=FeatureValue (ambiguity) (rule end)
	 *     ownedRelationship+=LifeClassMembership AnalysisCaseDefKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=LifeClassMembership CaseDefKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=LifeClassMembership VerificationCaseDefKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedMultiplicity (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedRedefinition (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedSubclassification (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedSubsetting (ambiguity) (rule end)
	 *     ownedRelationship+=ParameterMember ')' (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember AnalysisCaseUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember CaseUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember VerificationCaseUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=ReturnParameterMember (ambiguity) (rule end)
	 */
	protected void emit_CaseBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_3__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'comment' | 'comment'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'id' humanId=Name
	 *     (rule start) (ambiguity) name=Name
	 */
	protected void emit_Comment_CommentKeyword_0_0_0_or_CommentKeyword_0_1_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'comment'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ownedRelationship+=EmptyAnnotation
	 */
	protected void emit_Comment_CommentKeyword_0_1_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'actor' (ambiguity) (rule start)
	 *     (rule start) 'event' OccurrenceUsageKeyword (ambiguity) (rule start)
	 *     (rule start) 'stakeholder' (ambiguity) (rule start)
	 *     (rule start) 'subject' (ambiguity) (rule start)
	 *     (rule start) AllocationDefKeyword (ambiguity) (rule start)
	 *     (rule start) AllocationUsageKeyword (ambiguity) (rule start)
	 *     (rule start) AttributeDefKeyword (ambiguity) (rule start)
	 *     (rule start) AttributeUsageKeyword (ambiguity) (rule start)
	 *     (rule start) ConnectionDefKeyword (ambiguity) (rule start)
	 *     (rule start) ConnectionUsageKeyword (ambiguity) (rule start)
	 *     (rule start) EnumerationUsageKeyword (ambiguity) (rule start)
	 *     (rule start) EnumerationUsageKeyword? (ambiguity) (rule start)
	 *     (rule start) ItemDefKeyword (ambiguity) (rule start)
	 *     (rule start) ItemUsageKeyword (ambiguity) (rule start)
	 *     (rule start) OccurrenceDefKeyword (ambiguity) (rule start)
	 *     (rule start) OccurrenceDefKeyword (ambiguity) ownedRelationship+=LifeClassMembership
	 *     (rule start) OccurrenceUsageKeyword (ambiguity) (rule start)
	 *     (rule start) PartDefKeyword (ambiguity) (rule start)
	 *     (rule start) PartUsageKeyword (ambiguity) (rule start)
	 *     (rule start) PortDefKeyword (ambiguity) ownedRelationship+=ConjugatedPortDefinitionMember
	 *     (rule start) PortUsageKeyword (ambiguity) (rule start)
	 *     (rule start) ReferenceUsageKeyword (ambiguity) (rule start)
	 *     (rule start) RenderingDefKeyword (ambiguity) (rule start)
	 *     (rule start) RenderingUsageKeyword (ambiguity) (rule start)
	 *     direction=FeatureDirection 'event' OccurrenceUsageKeyword (ambiguity) (rule end)
	 *     direction=FeatureDirection AllocationUsageKeyword (ambiguity) (rule end)
	 *     direction=FeatureDirection AttributeUsageKeyword (ambiguity) (rule end)
	 *     direction=FeatureDirection ConnectionUsageKeyword (ambiguity) (rule end)
	 *     direction=FeatureDirection EnumerationUsageKeyword (ambiguity) (rule end)
	 *     direction=FeatureDirection ItemUsageKeyword (ambiguity) (rule end)
	 *     direction=FeatureDirection OccurrenceUsageKeyword (ambiguity) (rule end)
	 *     direction=FeatureDirection PartUsageKeyword (ambiguity) (rule end)
	 *     direction=FeatureDirection PortUsageKeyword (ambiguity) (rule end)
	 *     direction=FeatureDirection ReferenceUsageKeyword (ambiguity) (rule end)
	 *     direction=FeatureDirection RenderingUsageKeyword (ambiguity) (rule end)
	 *     humanId=Name (ambiguity) (rule end)
	 *     humanId=Name (ambiguity) ownedRelationship+=ConjugatedPortDefinitionMember
	 *     humanId=Name (ambiguity) ownedRelationship+=LifeClassMembership
	 *     isAbstract?='abstract' 'event' OccurrenceUsageKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' AllocationDefKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' AllocationUsageKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' AttributeDefKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' AttributeUsageKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' ConnectionDefKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' ConnectionUsageKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' EnumerationUsageKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' ItemDefKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' ItemUsageKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' OccurrenceDefKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' OccurrenceDefKeyword (ambiguity) ownedRelationship+=LifeClassMembership
	 *     isAbstract?='abstract' OccurrenceUsageKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' PartDefKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' PartUsageKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' PortDefKeyword (ambiguity) ownedRelationship+=ConjugatedPortDefinitionMember
	 *     isAbstract?='abstract' PortUsageKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' ReferenceUsageKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' RenderingDefKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' RenderingUsageKeyword (ambiguity) (rule end)
	 *     isAbstract?=MessageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' 'event' OccurrenceUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' (ambiguity) (rule end)
	 *     isEnd?='end' AllocationUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' AttributeUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' ConnectionUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' EnumerationUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' ItemUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' OccurrenceUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' PartUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' PortUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' ReferenceUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' RenderingUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' 'def' (ambiguity) (rule end)
	 *     isIndividual?='individual' 'def' (ambiguity) ownedRelationship+=LifeClassMembership
	 *     isIndividual?='individual' 'event' OccurrenceUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' (ambiguity) (rule end)
	 *     isIndividual?='individual' AllocationUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' ConnectionUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' ItemUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' OccurrenceUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' PartUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' PortUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' RenderingUsageKeyword (ambiguity) (rule end)
	 *     isNonunique?='nonunique' (ambiguity) (rule end)
	 *     isOrdered?='ordered' (ambiguity) (rule end)
	 *     isReference?='ref' 'event' OccurrenceUsageKeyword (ambiguity) (rule end)
	 *     isReference?='ref' AllocationUsageKeyword (ambiguity) (rule end)
	 *     isReference?='ref' AttributeUsageKeyword (ambiguity) (rule end)
	 *     isReference?='ref' ConnectionUsageKeyword (ambiguity) (rule end)
	 *     isReference?='ref' EnumerationUsageKeyword (ambiguity) (rule end)
	 *     isReference?='ref' ItemUsageKeyword (ambiguity) (rule end)
	 *     isReference?='ref' OccurrenceUsageKeyword (ambiguity) (rule end)
	 *     isReference?='ref' PartUsageKeyword (ambiguity) (rule end)
	 *     isReference?='ref' PortUsageKeyword (ambiguity) (rule end)
	 *     isReference?='ref' RenderingUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' 'event' OccurrenceUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' AllocationDefKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' AllocationUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' AttributeDefKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' AttributeUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' ConnectionDefKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' ConnectionUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' EnumerationUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' ItemDefKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' ItemUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' OccurrenceDefKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' OccurrenceDefKeyword (ambiguity) ownedRelationship+=LifeClassMembership
	 *     isVariation?='variation' OccurrenceUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' PartDefKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' PartUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' PortDefKeyword (ambiguity) ownedRelationship+=ConjugatedPortDefinitionMember
	 *     isVariation?='variation' PortUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' ReferenceUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' RenderingDefKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' RenderingUsageKeyword (ambiguity) (rule end)
	 *     name=Name (ambiguity) (rule end)
	 *     name=Name (ambiguity) ownedRelationship+=ConjugatedPortDefinitionMember
	 *     name=Name (ambiguity) ownedRelationship+=LifeClassMembership
	 *     ownedRelationship+=ConnectorEndMember ')' (ambiguity) (rule end)
	 *     ownedRelationship+=ConnectorEndMember (ambiguity) (rule end)
	 *     ownedRelationship+=FeatureTyping (ambiguity) (rule end)
	 *     ownedRelationship+=FeatureValue (ambiguity) (rule end)
	 *     ownedRelationship+=ItemFeatureMember (ambiguity) (rule end)
	 *     ownedRelationship+=ItemFlowEndMember (ambiguity) (rule end)
	 *     ownedRelationship+=LifeClassMembership AllocationDefKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=LifeClassMembership ConnectionDefKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=LifeClassMembership ItemDefKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=LifeClassMembership OccurrenceDefKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=LifeClassMembership OccurrenceDefKeyword (ambiguity) ownedRelationship+=LifeClassMembership
	 *     ownedRelationship+=LifeClassMembership PartDefKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=LifeClassMembership RenderingDefKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedMultiplicity (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedRedefinition (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedSubclassification (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedSubclassification (ambiguity) ownedRelationship+=ConjugatedPortDefinitionMember
	 *     ownedRelationship+=OwnedSubclassification (ambiguity) ownedRelationship+=LifeClassMembership
	 *     ownedRelationship+=OwnedSubsetting (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember 'event' OccurrenceUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember AllocationUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember ConnectionUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember ItemUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember OccurrenceUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember PartUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember PortUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember RenderingUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=SourceItemFlowMember (ambiguity) (rule end)
	 */
	protected void emit_DefinitionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'from'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'dependency' (ambiguity) client+=[Element|QualifiedName]
	 */
	protected void emit_Dependency_FromKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ActionUsageKeyword (ambiguity) (rule start)
	 *     humanId=Name (ambiguity) (rule end)
	 *     isNonunique?='nonunique' (ambiguity) (rule end)
	 *     isOrdered?='ordered' (ambiguity) (rule end)
	 *     name=Name (ambiguity) (rule end)
	 *     ownedRelationship+=ActionUsageParameterMember ')' (ambiguity) (rule end)
	 *     ownedRelationship+=EmptyParameterMember (ambiguity) (rule end)
	 *     ownedRelationship+=FeatureTyping (ambiguity) (rule end)
	 *     ownedRelationship+=FeatureValue (ambiguity) (rule end)
	 *     ownedRelationship+=NodeParameterMember (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedMultiplicity (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedRedefinition (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedSubsetting (ambiguity) (rule end)
	 */
	protected void emit_EffectBehaviorUsage___LeftCurlyBracketKeyword_1_1_0_RightCurlyBracketKeyword_1_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     EnumerationUsageKeyword?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'id' humanId=Name
	 *     (rule start) (ambiguity) '{' ownedRelationship+=AliasMember
	 *     (rule start) (ambiguity) '{' ownedRelationship+=DefinitionMember
	 *     (rule start) (ambiguity) '{' ownedRelationship+=EmptySuccessionMember
	 *     (rule start) (ambiguity) '{' ownedRelationship+=Import
	 *     (rule start) (ambiguity) '{' ownedRelationship+=NonOccurrenceUsageMember
	 *     (rule start) (ambiguity) '{' ownedRelationship+=OccurrenceUsageMember
	 *     (rule start) (ambiguity) '{' ownedRelationship+=OwnedDocumentation
	 *     (rule start) (ambiguity) '{' ownedRelationship+=VariantUsageMember
	 *     (rule start) (ambiguity) (';' | ('{' '}')) (rule start)
	 *     (rule start) (ambiguity) DefinedByKeyword ownedRelationship+=FeatureTyping
	 *     (rule start) (ambiguity) RedefinesKeyword ownedRelationship+=OwnedRedefinition
	 *     (rule start) (ambiguity) SubsetsKeyword ownedRelationship+=OwnedSubsetting
	 *     (rule start) (ambiguity) isNonunique?='nonunique'
	 *     (rule start) (ambiguity) isOrdered?='ordered'
	 *     (rule start) (ambiguity) name=Name
	 *     (rule start) (ambiguity) ownedRelationship+=FeatureValue
	 *     (rule start) (ambiguity) ownedRelationship+=OwnedMultiplicity
	 *     (rule start) (ambiguity) ownedRelationship+=SourceItemFlowMember
	 */
	protected void emit_EnumeratedValue_EnumerationUsageKeywordParserRuleCall_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) EnumerationDefKeyword (ambiguity) (rule start)
	 *     humanId=Name (ambiguity) (rule end)
	 *     name=Name (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedSubclassification (ambiguity) (rule end)
	 */
	protected void emit_EnumerationBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '='?
	 *
	 * This ambiguous syntax occurs at:
	 *     isDefault?='default' (ambiguity) ownedRelatedElement+=OwnedExpression
	 */
	protected void emit_FeatureValue_EqualsSignKeyword_0_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'first'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) SuccessionKeyword (ambiguity) ownedRelationship+=TransitionSourceMember
	 */
	protected void emit_GuardedSuccession_FirstKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) InterfaceDefKeyword (ambiguity) (rule start)
	 *     (rule start) InterfaceUsageKeyword (ambiguity) (rule start)
	 *     direction=FeatureDirection InterfaceUsageKeyword (ambiguity) (rule end)
	 *     humanId=Name (ambiguity) (rule end)
	 *     isAbstract?='abstract' InterfaceDefKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' InterfaceUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' InterfaceUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' InterfaceUsageKeyword (ambiguity) (rule end)
	 *     isNonunique?='nonunique' (ambiguity) (rule end)
	 *     isOrdered?='ordered' (ambiguity) (rule end)
	 *     isReference?='ref' InterfaceUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' InterfaceDefKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' InterfaceUsageKeyword (ambiguity) (rule end)
	 *     name=Name (ambiguity) (rule end)
	 *     ownedRelationship+=FeatureTyping (ambiguity) (rule end)
	 *     ownedRelationship+=InterfaceEndMember ')' (ambiguity) (rule end)
	 *     ownedRelationship+=InterfaceEndMember (ambiguity) (rule end)
	 *     ownedRelationship+=LifeClassMembership InterfaceDefKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedMultiplicity (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedRedefinition (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedSubclassification (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedSubsetting (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember InterfaceUsageKeyword (ambiguity) (rule end)
	 */
	protected void emit_InterfaceBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ConnectorKeyword?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) InterfaceUsageKeyword (ambiguity) '(' ownedRelationship+=InterfaceEndMember
	 *     (rule start) InterfaceUsageKeyword (ambiguity) ownedRelationship+=InterfaceEndMember
	 *     direction=FeatureDirection InterfaceUsageKeyword (ambiguity) '(' ownedRelationship+=InterfaceEndMember
	 *     direction=FeatureDirection InterfaceUsageKeyword (ambiguity) ownedRelationship+=InterfaceEndMember
	 *     isAbstract?='abstract' InterfaceUsageKeyword (ambiguity) '(' ownedRelationship+=InterfaceEndMember
	 *     isAbstract?='abstract' InterfaceUsageKeyword (ambiguity) ownedRelationship+=InterfaceEndMember
	 *     isEnd?='end' InterfaceUsageKeyword (ambiguity) '(' ownedRelationship+=InterfaceEndMember
	 *     isEnd?='end' InterfaceUsageKeyword (ambiguity) ownedRelationship+=InterfaceEndMember
	 *     isIndividual?='individual' InterfaceUsageKeyword (ambiguity) '(' ownedRelationship+=InterfaceEndMember
	 *     isIndividual?='individual' InterfaceUsageKeyword (ambiguity) ownedRelationship+=InterfaceEndMember
	 *     isReference?='ref' InterfaceUsageKeyword (ambiguity) '(' ownedRelationship+=InterfaceEndMember
	 *     isReference?='ref' InterfaceUsageKeyword (ambiguity) ownedRelationship+=InterfaceEndMember
	 *     isVariation?='variation' InterfaceUsageKeyword (ambiguity) '(' ownedRelationship+=InterfaceEndMember
	 *     isVariation?='variation' InterfaceUsageKeyword (ambiguity) ownedRelationship+=InterfaceEndMember
	 *     ownedRelationship+=PortioningFeatureMember InterfaceUsageKeyword (ambiguity) '(' ownedRelationship+=InterfaceEndMember
	 *     ownedRelationship+=PortioningFeatureMember InterfaceUsageKeyword (ambiguity) ownedRelationship+=InterfaceEndMember
	 */
	protected void emit_InterfaceUsageDeclaration_ConnectorKeywordParserRuleCall_0_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'feature'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (':>>' | 'redefines')? ownedRelationship+=OwnedRedefinition
	 */
	protected void emit_MetadataFeature_FeatureKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (':>>' | 'redefines')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'feature'? (ambiguity) ownedRelationship+=OwnedRedefinition
	 */
	protected void emit_MetadataFeature___ColonGreaterThanSignGreaterThanSignKeyword_1_0_or_RedefinesKeyword_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'null' | ('(' ')')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('* (ambiguity) (rule start)
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_NullExpression_NullKeyword_1_0_or___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'package' (ambiguity) (rule start)
	 *     humanId=Name (ambiguity) (rule end)
	 *     name=Name (ambiguity) (rule end)
	 */
	protected void emit_PackageBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ReferenceUsageKeyword?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'id' humanId=Name
	 *     (rule start) (ambiguity) DefinedByKeyword ownedRelationship+=FeatureTyping
	 *     (rule start) (ambiguity) RedefinesKeyword ownedRelationship+=OwnedRedefinition
	 *     (rule start) (ambiguity) SubsetsKeyword ownedRelationship+=OwnedSubsetting
	 *     (rule start) (ambiguity) isNonunique?='nonunique'
	 *     (rule start) (ambiguity) isOrdered?='ordered'
	 *     (rule start) (ambiguity) name=Name
	 *     (rule start) (ambiguity) ownedRelationship+=FeatureValue
	 *     (rule start) (ambiguity) ownedRelationship+=OwnedMultiplicity
	 *     (rule start) (ambiguity) ownedRelationship+=SourceItemFlowMember
	 *     direction=FeatureDirection (ambiguity) 'id' humanId=Name
	 *     direction=FeatureDirection (ambiguity) DefinedByKeyword ownedRelationship+=FeatureTyping
	 *     direction=FeatureDirection (ambiguity) RedefinesKeyword ownedRelationship+=OwnedRedefinition
	 *     direction=FeatureDirection (ambiguity) SubsetsKeyword ownedRelationship+=OwnedSubsetting
	 *     direction=FeatureDirection (ambiguity) isNonunique?='nonunique'
	 *     direction=FeatureDirection (ambiguity) isOrdered?='ordered'
	 *     direction=FeatureDirection (ambiguity) name=Name
	 *     direction=FeatureDirection (ambiguity) ownedRelationship+=OwnedMultiplicity
	 */
	protected void emit_Parameter_ReferenceUsageKeywordParserRuleCall_0_2_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'doc'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) body=DOCUMENTATION_COMMENT
	 */
	protected void emit_PrefixDocumentationComment_DocKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'requirement' (ambiguity) (rule start)
	 *     (rule start) 'satisfy' RequirementUsageKeyword (ambiguity) (rule start)
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) ConcernUsageKeyword (ambiguity) (rule start)
	 *     (rule start) RequirementUsageKeyword (ambiguity) (rule start)
	 *     (rule start) ViewpointUsageKeyword (ambiguity) (rule start)
	 *     direction=FeatureDirection 'satisfy' RequirementUsageKeyword (ambiguity) (rule end)
	 *     direction=FeatureDirection ConcernUsageKeyword (ambiguity) (rule end)
	 *     direction=FeatureDirection RequirementUsageKeyword (ambiguity) (rule end)
	 *     direction=FeatureDirection ViewpointUsageKeyword (ambiguity) (rule end)
	 *     humanId=Name (ambiguity) (rule end)
	 *     isAbstract?='abstract' 'satisfy' RequirementUsageKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' ConcernUsageKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' RequirementUsageKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' ViewpointUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' 'satisfy' RequirementUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' ConcernUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' RequirementUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' ViewpointUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' 'satisfy' RequirementUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' ConcernUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' RequirementUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' ViewpointUsageKeyword (ambiguity) (rule end)
	 *     isNegated?='not' 'satisfy' RequirementUsageKeyword (ambiguity) (rule end)
	 *     isNonunique?='nonunique' (ambiguity) (rule end)
	 *     isOrdered?='ordered' (ambiguity) (rule end)
	 *     isReference?='ref' 'satisfy' RequirementUsageKeyword (ambiguity) (rule end)
	 *     isReference?='ref' ConcernUsageKeyword (ambiguity) (rule end)
	 *     isReference?='ref' RequirementUsageKeyword (ambiguity) (rule end)
	 *     isReference?='ref' ViewpointUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' 'satisfy' RequirementUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' ConcernUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' RequirementUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' ViewpointUsageKeyword (ambiguity) (rule end)
	 *     name=Name (ambiguity) (rule end)
	 *     ownedRelationship+=ActionUsageParameterMember ')' (ambiguity) (rule end)
	 *     ownedRelationship+=CalculationReturnParameterMember (ambiguity) (rule end)
	 *     ownedRelationship+=EmptyReturnParameterMember (ambiguity) (rule end)
	 *     ownedRelationship+=FeatureTyping (ambiguity) (rule end)
	 *     ownedRelationship+=FeatureValue (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedMultiplicity (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedRedefinition (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedSubsetting (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember 'satisfy' RequirementUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember ConcernUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember RequirementUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember ViewpointUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=SatisfactionSubjectMember (ambiguity) (rule end)
	 */
	protected void emit_RequirementBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'return'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ownedRelatedElement+=Parameter
	 */
	protected void emit_ReturnParameterMember_ReturnKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     operand+=AdditiveExpression (ambiguity) ')' (rule end)
	 *     operand+=AndExpression (ambiguity) ')' (rule end)
	 *     operand+=ClassificationExpression (ambiguity) ')' (rule end)
	 *     operand+=ConditionalExpression (ambiguity) ')' (rule end)
	 *     operand+=EqualityExpression (ambiguity) ')' (rule end)
	 *     operand+=ExponentiationExpression (ambiguity) ')' (rule end)
	 *     operand+=ExtentExpression (ambiguity) ')' (rule end)
	 *     operand+=FeatureReferenceExpression (ambiguity) ')' (rule end)
	 *     operand+=ImpliesExpression (ambiguity) ')' (rule end)
	 *     operand+=MultiplicativeExpression (ambiguity) ')' (rule end)
	 *     operand+=OrExpression (ambiguity) ')' (rule end)
	 *     operand+=OwnedExpression ']' (ambiguity) ')' (rule end)
	 *     operand+=RangeExpression (ambiguity) ')' (rule end)
	 *     operand+=SequenceExpression ']' (ambiguity) ')' (rule end)
	 *     operand+=UnitsExpression (ambiguity) ')' (rule end)
	 *     operand+=XorExpression (ambiguity) ')' (rule end)
	 *     ownedRelationship+=ExpressionBodyMember (ambiguity) ')' (rule end)
	 *     ownedRelationship+=FunctionReferenceMember (ambiguity) ')' (rule end)
	 *     ownedRelationship+=NamedExpressionMember ')' (ambiguity) ')' (rule end)
	 *     ownedRelationship+=OwnedExpressionMember ')' (ambiguity) ')' (rule end)
	 *     ownedRelationship+=OwnedFeatureTyping '(' ')' (ambiguity) ')' (rule end)
	 *     ownedRelationship+=TypeReferenceMember (ambiguity) ')' (rule end)
	 */
	protected void emit_SequenceExpression_CommaKeyword_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'first'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) SuccessionKeyword (ambiguity) ownedRelationship+=ConnectorEndMember
	 *     isAbstract?='abstract' SuccessionKeyword (ambiguity) ownedRelationship+=ConnectorEndMember
	 */
	protected void emit_SuccessionDeclaration_FirstKeyword_0_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     TransitionUsageKeyword?
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedRelationship+=EmptyParameterMember (ambiguity) 'then' ownedRelationship+=TransitionSuccessionMember
	 */
	protected void emit_TargetTransitionUsage_TransitionUsageKeywordParserRuleCall_1_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'rep' | 'rep'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'id' humanId=Name
	 *     (rule start) (ambiguity) name=Name
	 */
	protected void emit_TextualRepresentation_RepKeyword_0_0_0_or_RepKeyword_0_1_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'rep'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ownedRelationship+=EmptyAnnotation
	 */
	protected void emit_TextualRepresentation_RepKeyword_0_1_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'first'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) TransitionUsageKeyword (ambiguity) ownedRelationship+=TransitionSourceMember
	 */
	protected void emit_TransitionUsage_FirstKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'include' UseCaseUsageKeyword (ambiguity) (rule start)
	 *     (rule start) UseCaseDefKeyword (ambiguity) (rule start)
	 *     (rule start) UseCaseUsageKeyword (ambiguity) (rule start)
	 *     direction=FeatureDirection 'include' UseCaseUsageKeyword (ambiguity) (rule end)
	 *     direction=FeatureDirection UseCaseUsageKeyword (ambiguity) (rule end)
	 *     humanId=Name (ambiguity) (rule end)
	 *     isAbstract?='abstract' 'include' UseCaseUsageKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' UseCaseDefKeyword (ambiguity) (rule end)
	 *     isAbstract?='abstract' UseCaseUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' 'include' UseCaseUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' UseCaseUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' 'include' UseCaseUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' UseCaseUsageKeyword (ambiguity) (rule end)
	 *     isNonunique?='nonunique' (ambiguity) (rule end)
	 *     isOrdered?='ordered' (ambiguity) (rule end)
	 *     isReference?='ref' 'include' UseCaseUsageKeyword (ambiguity) (rule end)
	 *     isReference?='ref' UseCaseUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' 'include' UseCaseUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' UseCaseDefKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' UseCaseUsageKeyword (ambiguity) (rule end)
	 *     name=Name (ambiguity) (rule end)
	 *     ownedRelationship+=ActionUsageParameterMember ')' (ambiguity) (rule end)
	 *     ownedRelationship+=CalculationReturnParameterMember (ambiguity) (rule end)
	 *     ownedRelationship+=FeatureTyping (ambiguity) (rule end)
	 *     ownedRelationship+=FeatureValue (ambiguity) (rule end)
	 *     ownedRelationship+=LifeClassMembership UseCaseDefKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedMultiplicity (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedRedefinition (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedSubclassification (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedSubsetting (ambiguity) (rule end)
	 *     ownedRelationship+=ParameterMember ')' (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember 'include' UseCaseUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember UseCaseUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=ReturnParameterMember (ambiguity) (rule end)
	 */
	protected void emit_UseCaseBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ViewUsageKeyword (ambiguity) (rule start)
	 *     direction=FeatureDirection ViewUsageKeyword (ambiguity) (rule end)
	 *     humanId=Name (ambiguity) (rule end)
	 *     isAbstract?='abstract' ViewUsageKeyword (ambiguity) (rule end)
	 *     isEnd?='end' ViewUsageKeyword (ambiguity) (rule end)
	 *     isIndividual?='individual' ViewUsageKeyword (ambiguity) (rule end)
	 *     isNonunique?='nonunique' (ambiguity) (rule end)
	 *     isOrdered?='ordered' (ambiguity) (rule end)
	 *     isReference?='ref' ViewUsageKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' ViewUsageKeyword (ambiguity) (rule end)
	 *     name=Name (ambiguity) (rule end)
	 *     ownedRelationship+=FeatureTyping (ambiguity) (rule end)
	 *     ownedRelationship+=FeatureValue (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedMultiplicity (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedRedefinition (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedSubsetting (ambiguity) (rule end)
	 *     ownedRelationship+=PortioningFeatureMember ViewUsageKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=SourceItemFlowMember (ambiguity) (rule end)
	 */
	protected void emit_ViewBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ViewDefKeyword (ambiguity) (rule start)
	 *     humanId=Name (ambiguity) (rule end)
	 *     isAbstract?='abstract' ViewDefKeyword (ambiguity) (rule end)
	 *     isVariation?='variation' ViewDefKeyword (ambiguity) (rule end)
	 *     name=Name (ambiguity) (rule end)
	 *     ownedRelationship+=LifeClassMembership ViewDefKeyword (ambiguity) (rule end)
	 *     ownedRelationship+=OwnedSubclassification (ambiguity) (rule end)
	 */
	protected void emit_ViewDefinitionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
