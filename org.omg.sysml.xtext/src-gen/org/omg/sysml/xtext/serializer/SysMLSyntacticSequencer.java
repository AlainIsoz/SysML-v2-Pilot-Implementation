/*
 * generated by Xtext 2.20.0
 */
package org.omg.sysml.xtext.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.omg.sysml.xtext.services.SysMLGrammarAccess;

@SuppressWarnings("all")
public class SysMLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SysMLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ActionDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_AssertConstraintUsage_AsKeyword_0_0_0_2_q;
	protected AbstractElementAlias match_AssertConstraintUsage_ConstraintUsageKeywordParserRuleCall_0_1_0_q;
	protected AbstractElementAlias match_AssertConstraintUsage_TypePart_ConstraintUsageKeywordParserRuleCall_0_1_0_or___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__;
	protected AbstractElementAlias match_BaseExpression_NullExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_0_1_RightCurlyBracketKeyword_0_2___or_____LeftCurlyBracketKeyword_1_0_LeftParenthesisKeyword_6_0_a__p_____LeftCurlyBracketKeyword_0_1_RightCurlyBracketKeyword_0_2___or___NullKeyword_1_RightCurlyBracketKeyword_1_3______;
	protected AbstractElementAlias match_BaseExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_1_0_LeftParenthesisKeyword_6_0_a__a;
	protected AbstractElementAlias match_BaseExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_1_0_LeftParenthesisKeyword_6_0_a__p;
	protected AbstractElementAlias match_BaseExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_1_0_or_LeftParenthesisKeyword_6_0__a;
	protected AbstractElementAlias match_BaseExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_1_0_or_LeftParenthesisKeyword_6_0__p;
	protected AbstractElementAlias match_BindingConnector_AsKeyword_0_2_q;
	protected AbstractElementAlias match_CalculationDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_3__;
	protected AbstractElementAlias match_CalculationReturnParameterMember_ReturnKeyword_0_q;
	protected AbstractElementAlias match_ConnectionDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_ConnectionEndMember_ReferenceUsageKeywordParserRuleCall_1_0_1_q;
	protected AbstractElementAlias match_ConnectionEndMember_ReferenceUsageKeywordParserRuleCall_1_1_2_q;
	protected AbstractElementAlias match_DefinitionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_Documentation_CommentKeyword_0_0_q;
	protected AbstractElementAlias match_EffectBehaviorUsage___LeftCurlyBracketKeyword_1_1_0_RightCurlyBracketKeyword_1_1_2__q;
	protected AbstractElementAlias match_GuardedSuccession_FirstKeyword_1_2_q;
	protected AbstractElementAlias match_Import_ColonColonKeyword_3_0_1_0_or_FullStopKeyword_3_0_1_1;
	protected AbstractElementAlias match_InterfaceDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_InterfaceEndMember_PortUsageKeywordParserRuleCall_1_0_1_q;
	protected AbstractElementAlias match_InterfaceEndMember_PortUsageKeywordParserRuleCall_1_1_2_q;
	protected AbstractElementAlias match_NullExpression_SequenceConstructionExpression_NullKeyword_1_or___LeftCurlyBracketKeyword_0_1_RightCurlyBracketKeyword_0_2__;
	protected AbstractElementAlias match_PackagedDefinitionMember_AliasKeyword_14_0_1_or_ImportKeyword_14_0_0;
	protected AbstractElementAlias match_PackagedUsageMember_AttributeUsageKeywordParserRuleCall_0_0_q;
	protected AbstractElementAlias match_PackagedUsageMember_AttributeUsageKeywordParserRuleCall_1_1_q;
	protected AbstractElementAlias match_ParameterTypePart___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__q;
	protected AbstractElementAlias match_PortTypePart___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__q;
	protected AbstractElementAlias match_RequirementConstraintUsage_AsKeyword_0_0_0_2_q;
	protected AbstractElementAlias match_RequirementConstraintUsage_ConstraintKeyword_0_1_0_q;
	protected AbstractElementAlias match_RequirementConstraintUsage_TypePart_ConstraintKeyword_0_1_0_or___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__;
	protected AbstractElementAlias match_RequirementDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__;
	protected AbstractElementAlias match_ReturnParameterMember_ReturnKeyword_0_q;
	protected AbstractElementAlias match_SatisfyRequirementUsage_AsKeyword_0_0_0_2_q;
	protected AbstractElementAlias match_SatisfyRequirementUsage_RequirementKeywordParserRuleCall_0_1_0_q;
	protected AbstractElementAlias match_SatisfyRequirementUsage_TypePart_RequirementKeywordParserRuleCall_0_1_0_or___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__;
	protected AbstractElementAlias match_SendNodeDeclaration_OfKeyword_3_1_q;
	protected AbstractElementAlias match_StructureUsageMember_AttributeUsageKeywordParserRuleCall_1_2_0_q;
	protected AbstractElementAlias match_StructureUsageMember_AttributeUsageKeywordParserRuleCall_1_3_1_q;
	protected AbstractElementAlias match_SuccessionDeclaration_FirstKeyword_0_2_q;
	protected AbstractElementAlias match_TransitionStep_FirstKeyword_1_2_q;
	protected AbstractElementAlias match_TypePart___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SysMLGrammarAccess) access;
		match_ActionDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getActionDefBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getActionDefBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getActionDefBodyAccess().getSemicolonKeyword_0()));
		match_AssertConstraintUsage_AsKeyword_0_0_0_2_q = new TokenAlias(false, true, grammarAccess.getAssertConstraintUsageAccess().getAsKeyword_0_0_0_2());
		match_AssertConstraintUsage_ConstraintUsageKeywordParserRuleCall_0_1_0_q = new TokenAlias(false, true, grammarAccess.getAssertConstraintUsageAccess().getConstraintUsageKeywordParserRuleCall_0_1_0());
		match_AssertConstraintUsage_TypePart_ConstraintUsageKeywordParserRuleCall_0_1_0_or___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getTypePartAccess().getDefinedByKeywordParserRuleCall_0_0()), new TokenAlias(false, false, grammarAccess.getTypePartAccess().getAnyKeyword_0_1_1())), new TokenAlias(false, false, grammarAccess.getAssertConstraintUsageAccess().getConstraintUsageKeywordParserRuleCall_0_1_0()));
		match_BaseExpression_NullExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_0_1_RightCurlyBracketKeyword_0_2___or_____LeftCurlyBracketKeyword_1_0_LeftParenthesisKeyword_6_0_a__p_____LeftCurlyBracketKeyword_0_1_RightCurlyBracketKeyword_0_2___or___NullKeyword_1_RightCurlyBracketKeyword_1_3______ = new AlternativeAlias(false, false, new GroupAlias(false, false, new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getSequenceConstructionExpressionAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(true, true, grammarAccess.getBaseExpressionAccess().getLeftParenthesisKeyword_6_0())), new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getNullExpressionAccess().getNullKeyword_1()), new TokenAlias(false, false, grammarAccess.getSequenceConstructionExpressionAccess().getRightCurlyBracketKeyword_1_3())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getSequenceConstructionExpressionAccess().getLeftCurlyBracketKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getSequenceConstructionExpressionAccess().getRightCurlyBracketKeyword_0_2())))), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getSequenceConstructionExpressionAccess().getLeftCurlyBracketKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getSequenceConstructionExpressionAccess().getRightCurlyBracketKeyword_0_2())));
		match_BaseExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_1_0_LeftParenthesisKeyword_6_0_a__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getSequenceConstructionExpressionAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(true, true, grammarAccess.getBaseExpressionAccess().getLeftParenthesisKeyword_6_0()));
		match_BaseExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_1_0_LeftParenthesisKeyword_6_0_a__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getSequenceConstructionExpressionAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(true, true, grammarAccess.getBaseExpressionAccess().getLeftParenthesisKeyword_6_0()));
		match_BaseExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_1_0_or_LeftParenthesisKeyword_6_0__a = new AlternativeAlias(true, true, new TokenAlias(false, false, grammarAccess.getBaseExpressionAccess().getLeftParenthesisKeyword_6_0()), new TokenAlias(false, false, grammarAccess.getSequenceConstructionExpressionAccess().getLeftCurlyBracketKeyword_1_0()));
		match_BaseExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_1_0_or_LeftParenthesisKeyword_6_0__p = new AlternativeAlias(true, false, new TokenAlias(false, false, grammarAccess.getBaseExpressionAccess().getLeftParenthesisKeyword_6_0()), new TokenAlias(false, false, grammarAccess.getSequenceConstructionExpressionAccess().getLeftCurlyBracketKeyword_1_0()));
		match_BindingConnector_AsKeyword_0_2_q = new TokenAlias(false, true, grammarAccess.getBindingConnectorAccess().getAsKeyword_0_2());
		match_CalculationDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_3__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getCalculationDefBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getCalculationDefBodyAccess().getRightCurlyBracketKeyword_1_3())), new TokenAlias(false, false, grammarAccess.getCalculationDefBodyAccess().getSemicolonKeyword_0()));
		match_CalculationReturnParameterMember_ReturnKeyword_0_q = new TokenAlias(false, true, grammarAccess.getCalculationReturnParameterMemberAccess().getReturnKeyword_0());
		match_ConnectionDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getConnectionDefBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getConnectionDefBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getConnectionDefBodyAccess().getSemicolonKeyword_0()));
		match_ConnectionEndMember_ReferenceUsageKeywordParserRuleCall_1_0_1_q = new TokenAlias(false, true, grammarAccess.getConnectionEndMemberAccess().getReferenceUsageKeywordParserRuleCall_1_0_1());
		match_ConnectionEndMember_ReferenceUsageKeywordParserRuleCall_1_1_2_q = new TokenAlias(false, true, grammarAccess.getConnectionEndMemberAccess().getReferenceUsageKeywordParserRuleCall_1_1_2());
		match_DefinitionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getDefinitionBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getDefinitionBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getDefinitionBodyAccess().getSemicolonKeyword_0()));
		match_Documentation_CommentKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getDocumentationAccess().getCommentKeyword_0_0());
		match_EffectBehaviorUsage___LeftCurlyBracketKeyword_1_1_0_RightCurlyBracketKeyword_1_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getEffectBehaviorUsageAccess().getLeftCurlyBracketKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getEffectBehaviorUsageAccess().getRightCurlyBracketKeyword_1_1_2()));
		match_GuardedSuccession_FirstKeyword_1_2_q = new TokenAlias(false, true, grammarAccess.getGuardedSuccessionAccess().getFirstKeyword_1_2());
		match_Import_ColonColonKeyword_3_0_1_0_or_FullStopKeyword_3_0_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getImportAccess().getColonColonKeyword_3_0_1_0()), new TokenAlias(false, false, grammarAccess.getImportAccess().getFullStopKeyword_3_0_1_1()));
		match_InterfaceDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getInterfaceDefBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getInterfaceDefBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getInterfaceDefBodyAccess().getSemicolonKeyword_0()));
		match_InterfaceEndMember_PortUsageKeywordParserRuleCall_1_0_1_q = new TokenAlias(false, true, grammarAccess.getInterfaceEndMemberAccess().getPortUsageKeywordParserRuleCall_1_0_1());
		match_InterfaceEndMember_PortUsageKeywordParserRuleCall_1_1_2_q = new TokenAlias(false, true, grammarAccess.getInterfaceEndMemberAccess().getPortUsageKeywordParserRuleCall_1_1_2());
		match_NullExpression_SequenceConstructionExpression_NullKeyword_1_or___LeftCurlyBracketKeyword_0_1_RightCurlyBracketKeyword_0_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getSequenceConstructionExpressionAccess().getLeftCurlyBracketKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getSequenceConstructionExpressionAccess().getRightCurlyBracketKeyword_0_2())), new TokenAlias(false, false, grammarAccess.getNullExpressionAccess().getNullKeyword_1()));
		match_PackagedDefinitionMember_AliasKeyword_14_0_1_or_ImportKeyword_14_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPackagedDefinitionMemberAccess().getAliasKeyword_14_0_1()), new TokenAlias(false, false, grammarAccess.getPackagedDefinitionMemberAccess().getImportKeyword_14_0_0()));
		match_PackagedUsageMember_AttributeUsageKeywordParserRuleCall_0_0_q = new TokenAlias(false, true, grammarAccess.getPackagedUsageMemberAccess().getAttributeUsageKeywordParserRuleCall_0_0());
		match_PackagedUsageMember_AttributeUsageKeywordParserRuleCall_1_1_q = new TokenAlias(false, true, grammarAccess.getPackagedUsageMemberAccess().getAttributeUsageKeywordParserRuleCall_1_1());
		match_ParameterTypePart___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getParameterTypePartAccess().getDefinedByKeywordParserRuleCall_0_0()), new TokenAlias(false, false, grammarAccess.getParameterTypePartAccess().getAnyKeyword_0_1_1()));
		match_PortTypePart___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getPortTypePartAccess().getDefinedByKeywordParserRuleCall_0_0()), new TokenAlias(false, false, grammarAccess.getPortTypePartAccess().getAnyKeyword_0_1_1()));
		match_RequirementConstraintUsage_AsKeyword_0_0_0_2_q = new TokenAlias(false, true, grammarAccess.getRequirementConstraintUsageAccess().getAsKeyword_0_0_0_2());
		match_RequirementConstraintUsage_ConstraintKeyword_0_1_0_q = new TokenAlias(false, true, grammarAccess.getRequirementConstraintUsageAccess().getConstraintKeyword_0_1_0());
		match_RequirementConstraintUsage_TypePart_ConstraintKeyword_0_1_0_or___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getTypePartAccess().getDefinedByKeywordParserRuleCall_0_0()), new TokenAlias(false, false, grammarAccess.getTypePartAccess().getAnyKeyword_0_1_1())), new TokenAlias(false, false, grammarAccess.getRequirementConstraintUsageAccess().getConstraintKeyword_0_1_0()));
		match_RequirementDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getRequirementDefBodyAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getRequirementDefBodyAccess().getRightCurlyBracketKeyword_1_2())), new TokenAlias(false, false, grammarAccess.getRequirementDefBodyAccess().getSemicolonKeyword_0()));
		match_ReturnParameterMember_ReturnKeyword_0_q = new TokenAlias(false, true, grammarAccess.getReturnParameterMemberAccess().getReturnKeyword_0());
		match_SatisfyRequirementUsage_AsKeyword_0_0_0_2_q = new TokenAlias(false, true, grammarAccess.getSatisfyRequirementUsageAccess().getAsKeyword_0_0_0_2());
		match_SatisfyRequirementUsage_RequirementKeywordParserRuleCall_0_1_0_q = new TokenAlias(false, true, grammarAccess.getSatisfyRequirementUsageAccess().getRequirementKeywordParserRuleCall_0_1_0());
		match_SatisfyRequirementUsage_TypePart_RequirementKeywordParserRuleCall_0_1_0_or___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getTypePartAccess().getDefinedByKeywordParserRuleCall_0_0()), new TokenAlias(false, false, grammarAccess.getTypePartAccess().getAnyKeyword_0_1_1())), new TokenAlias(false, false, grammarAccess.getSatisfyRequirementUsageAccess().getRequirementKeywordParserRuleCall_0_1_0()));
		match_SendNodeDeclaration_OfKeyword_3_1_q = new TokenAlias(false, true, grammarAccess.getSendNodeDeclarationAccess().getOfKeyword_3_1());
		match_StructureUsageMember_AttributeUsageKeywordParserRuleCall_1_2_0_q = new TokenAlias(false, true, grammarAccess.getStructureUsageMemberAccess().getAttributeUsageKeywordParserRuleCall_1_2_0());
		match_StructureUsageMember_AttributeUsageKeywordParserRuleCall_1_3_1_q = new TokenAlias(false, true, grammarAccess.getStructureUsageMemberAccess().getAttributeUsageKeywordParserRuleCall_1_3_1());
		match_SuccessionDeclaration_FirstKeyword_0_2_q = new TokenAlias(false, true, grammarAccess.getSuccessionDeclarationAccess().getFirstKeyword_0_2());
		match_TransitionStep_FirstKeyword_1_2_q = new TokenAlias(false, true, grammarAccess.getTransitionStepAccess().getFirstKeyword_1_2());
		match_TypePart___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTypePartAccess().getDefinedByKeywordParserRuleCall_0_0()), new TokenAlias(false, false, grammarAccess.getTypePartAccess().getAnyKeyword_0_1_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getActionDefKeywordRule())
			return getActionDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getActionKeywordRule())
			return getActionKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getActionUsageKeywordRule())
			return getActionUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getAttributeDefKeywordRule())
			return getAttributeDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getAttributeUsageKeywordRule())
			return getAttributeUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBindingKeywordRule())
			return getBindingKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCalculationDefKeywordRule())
			return getCalculationDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCalculationKeywordRule())
			return getCalculationKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCalculationUsageKeywordRule())
			return getCalculationUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getConnectionDefKeywordRule())
			return getConnectionDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getConnectionKeywordRule())
			return getConnectionKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getConnectionUsageKeywordRule())
			return getConnectionUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getConnectorKeywordRule())
			return getConnectorKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getConstraintDefKeywordRule())
			return getConstraintDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getConstraintUsageKeywordRule())
			return getConstraintUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDefinedByKeywordRule())
			return getDefinedByKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIndividualDefKeywordRule())
			return getIndividualDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIndividualUsageKeywordRule())
			return getIndividualUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getInterfaceDefKeywordRule())
			return getInterfaceDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getInterfaceKeywordRule())
			return getInterfaceKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getInterfaceUsageKeywordRule())
			return getInterfaceUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getItemDefKeywordRule())
			return getItemDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getItemFlowKeywordRule())
			return getItemFlowKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getItemUsageKeywordRule())
			return getItemUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPartDefKeywordRule())
			return getPartDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPartUsageKeywordRule())
			return getPartUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPortDefKeywordRule())
			return getPortDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPortKeywordRule())
			return getPortKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPortUsageKeywordRule())
			return getPortUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRedefinesKeywordRule())
			return getRedefinesKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getReferenceUsageKeywordRule())
			return getReferenceUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRequirementDefKeywordRule())
			return getRequirementDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRequirementKeywordRule())
			return getRequirementKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRequirementUsageKeywordRule())
			return getRequirementUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSnapshotKeywordRule())
			return getSnapshotKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSpecializesKeywordRule())
			return getSpecializesKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getStateDefKeywordRule())
			return getStateDefKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getStateUsageKeywordRule())
			return getStateUsageKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSubsetsKeywordRule())
			return getSubsetsKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSuccessionItemFlowKeywordRule())
			return getSuccessionItemFlowKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSuccessionKeywordRule())
			return getSuccessionKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTimeSliceKeywordRule())
			return getTimeSliceKeywordToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTransitionUsageKeywordRule())
			return getTransitionUsageKeywordToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * ActionDefKeyword :
	 * 	ActionKeyword 'def' | 'activity'
	 * ;
	 */
	protected String getActionDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "action def";
	}
	
	/**
	 * ActionKeyword :
	 * 	'action'
	 * ;
	 */
	protected String getActionKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "action";
	}
	
	/**
	 * ActionUsageKeyword :
	 * 	ActionKeyword
	 * ;
	 */
	protected String getActionUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "action";
	}
	
	/**
	 * AttributeDefKeyword :
	 * 	AttributeKeyword 'def' | 'value' 'type'
	 * ;
	 */
	protected String getAttributeDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "attribute def";
	}
	
	/**
	 * AttributeUsageKeyword :
	 * 	AttributeKeyword | 'value'
	 * ;
	 */
	protected String getAttributeUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "attribute";
	}
	
	/**
	 * BindingKeyword :
	 * 	'bind'
	 * ;
	 */
	protected String getBindingKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "bind";
	}
	
	/**
	 * CalculationDefKeyword :
	 * 	CalculationKeyword 'def'
	 * ;
	 */
	protected String getCalculationDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "calc def";
	}
	
	/**
	 * CalculationKeyword :
	 * 	'calc'
	 * ;
	 */
	protected String getCalculationKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "calc";
	}
	
	/**
	 * CalculationUsageKeyword :
	 * 	CalculationKeyword
	 * ;
	 */
	protected String getCalculationUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "calc";
	}
	
	/**
	 * ConnectionDefKeyword :
	 * 	ConnectionKeyword 'def' | 'assoc' 'block' 
	 * ;
	 */
	protected String getConnectionDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "connection def";
	}
	
	/**
	 * ConnectionKeyword :
	 * 	'connection'
	 * ;
	 */
	protected String getConnectionKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "connection";
	}
	
	/**
	 * ConnectionUsageKeyword :
	 * 	ConnectionKeyword | 'link'
	 * ;
	 */
	protected String getConnectionUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "connection";
	}
	
	/**
	 * ConnectorKeyword :
	 * 	'connect'
	 * ;
	 */
	protected String getConnectorKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "connect";
	}
	
	/**
	 * ConstraintDefKeyword :
	 * 	ConstraintKeyword 'def'
	 * ;
	 */
	protected String getConstraintDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "constraint def";
	}
	
	/**
	 * ConstraintUsageKeyword :
	 * 	ConstraintKeyword
	 * ;
	 */
	protected String getConstraintUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "constraint";
	}
	
	/**
	 * DefinedByKeyword :
	 * 	':' | 'defined' 'by'
	 * ;
	 */
	protected String getDefinedByKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":";
	}
	
	/**
	 * IndividualDefKeyword :
	 * 	IndividualKeyword 'def'
	 * ;
	 */
	protected String getIndividualDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "individual def";
	}
	
	/**
	 * IndividualUsageKeyword :
	 * 	IndividualKeyword
	 * ;
	 */
	protected String getIndividualUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "individual";
	}
	
	/**
	 * InterfaceDefKeyword :
	 * 	InterfaceKeyword 'def'
	 * ;
	 */
	protected String getInterfaceDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "interface def";
	}
	
	/**
	 * InterfaceKeyword :
	 * 	'interface'
	 * ;
	 */
	protected String getInterfaceKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "interface";
	}
	
	/**
	 * InterfaceUsageKeyword :
	 * 	InterfaceKeyword
	 * ;
	 */
	protected String getInterfaceUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "interface";
	}
	
	/**
	 * ItemDefKeyword :
	 * 	ItemKeyword 'def'
	 * ;
	 */
	protected String getItemDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "item def";
	}
	
	/**
	 * ItemFlowKeyword :
	 * 	'stream'
	 * ;
	 */
	protected String getItemFlowKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "stream";
	}
	
	/**
	 * ItemUsageKeyword :
	 * 	ItemKeyword
	 * ;
	 */
	protected String getItemUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "item";
	}
	
	/**
	 * PartDefKeyword :
	 * 	PartKeyword 'def' | 'block'
	 * ;
	 */
	protected String getPartDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "part def";
	}
	
	/**
	 * PartUsageKeyword :
	 * 	PartKeyword
	 * ;
	 */
	protected String getPartUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "part";
	}
	
	/**
	 * PortDefKeyword :
	 * 	PortKeyword 'def'
	 * ;
	 */
	protected String getPortDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "port def";
	}
	
	/**
	 * PortKeyword :
	 * 	'port'
	 * ;
	 */
	protected String getPortKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "port";
	}
	
	/**
	 * PortUsageKeyword :
	 * 	PortKeyword
	 * ;
	 */
	protected String getPortUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "port";
	}
	
	/**
	 * RedefinesKeyword :
	 * 	':>>' | 'redefines'
	 * ;
	 */
	protected String getRedefinesKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":>>";
	}
	
	/**
	 * ReferenceUsageKeyword :
	 * 	ReferenceKeyword
	 * ;
	 */
	protected String getReferenceUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "ref";
	}
	
	/**
	 * RequirementDefKeyword :
	 * 	RequirementKeyword 'def'
	 * ;
	 */
	protected String getRequirementDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "requirement def";
	}
	
	/**
	 * RequirementKeyword :
	 * 	'requirement'
	 * ;
	 */
	protected String getRequirementKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "requirement";
	}
	
	/**
	 * RequirementUsageKeyword :
	 * 	RequirementKeyword
	 * ;
	 */
	protected String getRequirementUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "requirement";
	}
	
	/**
	 * SnapshotKeyword :
	 * 	'snapshot'
	 * ;
	 */
	protected String getSnapshotKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "snapshot";
	}
	
	/**
	 * SpecializesKeyword :
	 * 	':>' | 'specializes'
	 * ;
	 */
	protected String getSpecializesKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":>";
	}
	
	/**
	 * StateDefKeyword :
	 * 	StateKeyword 'def'
	 * ;
	 */
	protected String getStateDefKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "state def";
	}
	
	/**
	 * StateUsageKeyword :
	 * 	StateKeyword
	 * ;
	 */
	protected String getStateUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "state";
	}
	
	/**
	 * SubsetsKeyword :
	 * 	':>' | 'subsets'
	 * ;
	 */
	protected String getSubsetsKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":>";
	}
	
	/**
	 * SuccessionItemFlowKeyword :
	 * 	'flow'
	 * ;
	 */
	protected String getSuccessionItemFlowKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "flow";
	}
	
	/**
	 * SuccessionKeyword :
	 * 	'succession'
	 * ;
	 */
	protected String getSuccessionKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "succession";
	}
	
	/**
	 * TimeSliceKeyword :
	 * 	'timeslice'
	 * ;
	 */
	protected String getTimeSliceKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "timeslice";
	}
	
	/**
	 * TransitionUsageKeyword :
	 * 	'transition'
	 * ;
	 */
	protected String getTransitionUsageKeywordToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "transition";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ActionDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_ActionDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AssertConstraintUsage_AsKeyword_0_0_0_2_q.equals(syntax))
				emit_AssertConstraintUsage_AsKeyword_0_0_0_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AssertConstraintUsage_ConstraintUsageKeywordParserRuleCall_0_1_0_q.equals(syntax))
				emit_AssertConstraintUsage_ConstraintUsageKeywordParserRuleCall_0_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AssertConstraintUsage_TypePart_ConstraintUsageKeywordParserRuleCall_0_1_0_or___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__.equals(syntax))
				emit_AssertConstraintUsage_TypePart_ConstraintUsageKeywordParserRuleCall_0_1_0_or___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BaseExpression_NullExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_0_1_RightCurlyBracketKeyword_0_2___or_____LeftCurlyBracketKeyword_1_0_LeftParenthesisKeyword_6_0_a__p_____LeftCurlyBracketKeyword_0_1_RightCurlyBracketKeyword_0_2___or___NullKeyword_1_RightCurlyBracketKeyword_1_3______.equals(syntax))
				emit_BaseExpression_NullExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_0_1_RightCurlyBracketKeyword_0_2___or_____LeftCurlyBracketKeyword_1_0_LeftParenthesisKeyword_6_0_a__p_____LeftCurlyBracketKeyword_0_1_RightCurlyBracketKeyword_0_2___or___NullKeyword_1_RightCurlyBracketKeyword_1_3______(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BaseExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_1_0_LeftParenthesisKeyword_6_0_a__a.equals(syntax))
				emit_BaseExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_1_0_LeftParenthesisKeyword_6_0_a__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BaseExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_1_0_LeftParenthesisKeyword_6_0_a__p.equals(syntax))
				emit_BaseExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_1_0_LeftParenthesisKeyword_6_0_a__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BaseExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_1_0_or_LeftParenthesisKeyword_6_0__a.equals(syntax))
				emit_BaseExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_1_0_or_LeftParenthesisKeyword_6_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BaseExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_1_0_or_LeftParenthesisKeyword_6_0__p.equals(syntax))
				emit_BaseExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_1_0_or_LeftParenthesisKeyword_6_0__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BindingConnector_AsKeyword_0_2_q.equals(syntax))
				emit_BindingConnector_AsKeyword_0_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CalculationDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_3__.equals(syntax))
				emit_CalculationDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_3__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CalculationReturnParameterMember_ReturnKeyword_0_q.equals(syntax))
				emit_CalculationReturnParameterMember_ReturnKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConnectionDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_ConnectionDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConnectionEndMember_ReferenceUsageKeywordParserRuleCall_1_0_1_q.equals(syntax))
				emit_ConnectionEndMember_ReferenceUsageKeywordParserRuleCall_1_0_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConnectionEndMember_ReferenceUsageKeywordParserRuleCall_1_1_2_q.equals(syntax))
				emit_ConnectionEndMember_ReferenceUsageKeywordParserRuleCall_1_1_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DefinitionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_DefinitionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Documentation_CommentKeyword_0_0_q.equals(syntax))
				emit_Documentation_CommentKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EffectBehaviorUsage___LeftCurlyBracketKeyword_1_1_0_RightCurlyBracketKeyword_1_1_2__q.equals(syntax))
				emit_EffectBehaviorUsage___LeftCurlyBracketKeyword_1_1_0_RightCurlyBracketKeyword_1_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_GuardedSuccession_FirstKeyword_1_2_q.equals(syntax))
				emit_GuardedSuccession_FirstKeyword_1_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Import_ColonColonKeyword_3_0_1_0_or_FullStopKeyword_3_0_1_1.equals(syntax))
				emit_Import_ColonColonKeyword_3_0_1_0_or_FullStopKeyword_3_0_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_InterfaceDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_InterfaceDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_InterfaceEndMember_PortUsageKeywordParserRuleCall_1_0_1_q.equals(syntax))
				emit_InterfaceEndMember_PortUsageKeywordParserRuleCall_1_0_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_InterfaceEndMember_PortUsageKeywordParserRuleCall_1_1_2_q.equals(syntax))
				emit_InterfaceEndMember_PortUsageKeywordParserRuleCall_1_1_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NullExpression_SequenceConstructionExpression_NullKeyword_1_or___LeftCurlyBracketKeyword_0_1_RightCurlyBracketKeyword_0_2__.equals(syntax))
				emit_NullExpression_SequenceConstructionExpression_NullKeyword_1_or___LeftCurlyBracketKeyword_0_1_RightCurlyBracketKeyword_0_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PackagedDefinitionMember_AliasKeyword_14_0_1_or_ImportKeyword_14_0_0.equals(syntax))
				emit_PackagedDefinitionMember_AliasKeyword_14_0_1_or_ImportKeyword_14_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PackagedUsageMember_AttributeUsageKeywordParserRuleCall_0_0_q.equals(syntax))
				emit_PackagedUsageMember_AttributeUsageKeywordParserRuleCall_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PackagedUsageMember_AttributeUsageKeywordParserRuleCall_1_1_q.equals(syntax))
				emit_PackagedUsageMember_AttributeUsageKeywordParserRuleCall_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ParameterTypePart___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__q.equals(syntax))
				emit_ParameterTypePart___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PortTypePart___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__q.equals(syntax))
				emit_PortTypePart___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RequirementConstraintUsage_AsKeyword_0_0_0_2_q.equals(syntax))
				emit_RequirementConstraintUsage_AsKeyword_0_0_0_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RequirementConstraintUsage_ConstraintKeyword_0_1_0_q.equals(syntax))
				emit_RequirementConstraintUsage_ConstraintKeyword_0_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RequirementConstraintUsage_TypePart_ConstraintKeyword_0_1_0_or___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__.equals(syntax))
				emit_RequirementConstraintUsage_TypePart_ConstraintKeyword_0_1_0_or___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RequirementDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__.equals(syntax))
				emit_RequirementDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReturnParameterMember_ReturnKeyword_0_q.equals(syntax))
				emit_ReturnParameterMember_ReturnKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SatisfyRequirementUsage_AsKeyword_0_0_0_2_q.equals(syntax))
				emit_SatisfyRequirementUsage_AsKeyword_0_0_0_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SatisfyRequirementUsage_RequirementKeywordParserRuleCall_0_1_0_q.equals(syntax))
				emit_SatisfyRequirementUsage_RequirementKeywordParserRuleCall_0_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SatisfyRequirementUsage_TypePart_RequirementKeywordParserRuleCall_0_1_0_or___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__.equals(syntax))
				emit_SatisfyRequirementUsage_TypePart_RequirementKeywordParserRuleCall_0_1_0_or___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SendNodeDeclaration_OfKeyword_3_1_q.equals(syntax))
				emit_SendNodeDeclaration_OfKeyword_3_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StructureUsageMember_AttributeUsageKeywordParserRuleCall_1_2_0_q.equals(syntax))
				emit_StructureUsageMember_AttributeUsageKeywordParserRuleCall_1_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StructureUsageMember_AttributeUsageKeywordParserRuleCall_1_3_1_q.equals(syntax))
				emit_StructureUsageMember_AttributeUsageKeywordParserRuleCall_1_3_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SuccessionDeclaration_FirstKeyword_0_2_q.equals(syntax))
				emit_SuccessionDeclaration_FirstKeyword_0_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TransitionStep_FirstKeyword_1_2_q.equals(syntax))
				emit_TransitionStep_FirstKeyword_1_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TypePart___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__q.equals(syntax))
				emit_TypePart___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ActionKeyword (ambiguity) (rule start)
	 *     (rule start) DefinedByKeyword 'any' (ambiguity) (rule start)
	 *     isNonunique?='nonunique' (ambiguity) (rule end)
	 *     isOrdered?='ordered' (ambiguity) (rule end)
	 *     name=Name (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=ActionParameterFlowMember ')' (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=ActionParameterMember ')' (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=ExpressionMember (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=FeatureValue (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=ItemFeatureMember ')' (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=MultiplicityMember (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=ParameterMember ')' (ambiguity) (rule end)
	 *     ownedRelationship_comp+=FeatureTyping (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Redefinition (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Subset (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Superclassing (ambiguity) (rule end)
	 */
	protected void emit_ActionDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'as'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ownedRelationship_comp+=Subset
	 */
	protected void emit_AssertConstraintUsage_AsKeyword_0_0_0_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ConstraintUsageKeyword?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (DefinedByKeyword 'any')? ownedFeatureMembership_comp+=MultiplicityMember
	 *     (rule start) (ambiguity) DefinedByKeyword ownedRelationship_comp+=FeatureTyping
	 */
	protected void emit_AssertConstraintUsage_ConstraintUsageKeywordParserRuleCall_0_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (DefinedByKeyword 'any') | ConstraintUsageKeyword
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) RedefinesKeyword ownedRelationship_comp+=Redefinition
	 *     (rule start) (ambiguity) SubsetsKeyword ownedRelationship_comp+=Subset
	 */
	protected void emit_AssertConstraintUsage_TypePart_ConstraintUsageKeywordParserRuleCall_0_1_0_or___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' '}') | (('{' '('*)+ (('{' '}') | ('null' '}')))
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_BaseExpression_NullExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_0_1_RightCurlyBracketKeyword_0_2___or_____LeftCurlyBracketKeyword_1_0_LeftParenthesisKeyword_6_0_a__p_____LeftCurlyBracketKeyword_0_1_RightCurlyBracketKeyword_0_2___or___NullKeyword_1_RightCurlyBracketKeyword_1_3______(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' '('*)*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {OperatorExpression.operand_comp+=}
	 */
	protected void emit_BaseExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_1_0_LeftParenthesisKeyword_6_0_a__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' '('*)+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '*' '}' (rule start)
	 *     (rule start) (ambiguity) '*' (rule start)
	 *     (rule start) (ambiguity) './' ownedFeatureMembership_comp+=FeatureReferenceMember
	 *     (rule start) (ambiguity) (('{' '}') | 'null') (rule start)
	 *     (rule start) (ambiguity) operator=UnaryOperator
	 *     (rule start) (ambiguity) ownedFeatureMembership_comp+=FeatureReferenceMember
	 *     (rule start) (ambiguity) ownedFeatureMembership_comp+=TypeReferenceMember
	 *     (rule start) (ambiguity) ownedRelationship_comp+=FeatureTyping
	 *     (rule start) (ambiguity) value=BooleanValue
	 *     (rule start) (ambiguity) value=DECIMAL_VALUE
	 *     (rule start) (ambiguity) value=RealValue
	 *     (rule start) (ambiguity) value=STRING_VALUE
	 *     (rule start) (ambiguity) {OperatorExpression.operand_comp+=}
	 *     (rule start) (ambiguity) {QueryPathStepExpression.operand_comp+=}
	 *     (rule start) (ambiguity) {QueryQualifierExpression.operand_comp+=}
	 */
	protected void emit_BaseExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_1_0_LeftParenthesisKeyword_6_0_a__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' | '{')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '*' (rule start)
	 *     (rule start) (ambiguity) './' ownedFeatureMembership_comp+=FeatureReferenceMember
	 *     (rule start) (ambiguity) (('{' '}') | 'null') (rule start)
	 *     (rule start) (ambiguity) operator=UnaryOperator
	 *     (rule start) (ambiguity) ownedFeatureMembership_comp+=FeatureReferenceMember
	 *     (rule start) (ambiguity) ownedFeatureMembership_comp+=TypeReferenceMember
	 *     (rule start) (ambiguity) ownedRelationship_comp+=FeatureTyping
	 *     (rule start) (ambiguity) value=BooleanValue
	 *     (rule start) (ambiguity) value=DECIMAL_VALUE
	 *     (rule start) (ambiguity) value=RealValue
	 *     (rule start) (ambiguity) value=STRING_VALUE
	 *     (rule start) (ambiguity) {OperatorExpression.operand_comp+=}
	 *     (rule start) (ambiguity) {QueryPathStepExpression.operand_comp+=}
	 *     (rule start) (ambiguity) {QueryQualifierExpression.operand_comp+=}
	 */
	protected void emit_BaseExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_1_0_or_LeftParenthesisKeyword_6_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' | '{')+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) './' ownedFeatureMembership_comp+=FeatureReferenceMember
	 *     (rule start) (ambiguity) operator=UnaryOperator
	 *     (rule start) (ambiguity) {OperatorExpression.operand_comp+=}
	 *     (rule start) (ambiguity) {QueryPathStepExpression.operand_comp+=}
	 *     (rule start) (ambiguity) {QueryQualifierExpression.operand_comp+=}
	 */
	protected void emit_BaseExpression_SequenceConstructionExpression___LeftCurlyBracketKeyword_1_0_or_LeftParenthesisKeyword_6_0__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'as'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ownedFeatureMembership_comp+=ConnectorEndMember
	 */
	protected void emit_BindingConnector_AsKeyword_0_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) DefinedByKeyword 'any' (ambiguity) (rule start)
	 *     isNonunique?='nonunique' (ambiguity) (rule end)
	 *     isOrdered?='ordered' (ambiguity) (rule end)
	 *     name=Name (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=CalculationReturnParameterMember (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=FeatureValue (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=MultiplicityMember (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=ReturnParameterMember (ambiguity) (rule end)
	 *     ownedRelationship_comp+=FeatureTyping (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Redefinition (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Subset (ambiguity) (rule end)
	 */
	protected void emit_CalculationDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_3__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'return'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) memberName=Name
	 *     (rule start) (ambiguity) ownedMemberParameter_comp=ActionParameter
	 */
	protected void emit_CalculationReturnParameterMember_ReturnKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) DefinedByKeyword 'any' (ambiguity) (rule start)
	 *     isNonunique?='nonunique' (ambiguity) (rule end)
	 *     isOrdered?='ordered' (ambiguity) (rule end)
	 *     name=Name (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=ConnectorEndMember ')' (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=ConnectorEndMember (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=MultiplicityMember (ambiguity) (rule end)
	 *     ownedRelationship_comp+=FeatureTyping (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Redefinition (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Subset (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Superclassing (ambiguity) (rule end)
	 */
	protected void emit_ConnectionDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ReferenceUsageKeyword?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'end' (ambiguity) ownedMemberFeature_comp=ReferenceUsage
	 *     ownedRelationship_comp+=PrefixAnnotation 'end' (ambiguity) ownedMemberFeature_comp=ReferenceUsage
	 *     visibility=VisibilityIndicator 'end' (ambiguity) ownedMemberFeature_comp=ReferenceUsage
	 */
	protected void emit_ConnectionEndMember_ReferenceUsageKeywordParserRuleCall_1_0_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ReferenceUsageKeyword?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'abstract' 'end' (ambiguity) ownedMemberFeature_comp=AbstractReferenceUsage
	 *     ownedRelationship_comp+=PrefixAnnotation 'abstract' 'end' (ambiguity) ownedMemberFeature_comp=AbstractReferenceUsage
	 *     visibility=VisibilityIndicator 'abstract' 'end' (ambiguity) ownedMemberFeature_comp=AbstractReferenceUsage
	 */
	protected void emit_ConnectionEndMember_ReferenceUsageKeywordParserRuleCall_1_1_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) DefinedByKeyword 'any' (ambiguity) (rule start)
	 *     isNonunique?='nonunique' (ambiguity) (rule end)
	 *     isOrdered?='ordered' (ambiguity) (rule end)
	 *     name=Name (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=ConnectorEndMember (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=FeatureValue (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=ItemFlowEndMember (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=MultiplicityMember (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=SnapshotFeatureMember (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=TimeSliceFeatureMember (ambiguity) (rule end)
	 *     ownedMembership_comp+=ConjugatedPortDefinitionMember (ambiguity) (rule end)
	 *     ownedMembership_comp+=LifeClassMembership (ambiguity) (rule end)
	 *     ownedRelationship_comp+=ConjugatedPortTyping (ambiguity) (rule end)
	 *     ownedRelationship_comp+=FeatureTyping (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Redefinition (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Subset (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Superclassing (ambiguity) (rule end)
	 */
	protected void emit_DefinitionBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'comment'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) body=DOCUMENTATION_COMMENT
	 */
	protected void emit_Documentation_CommentKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ActionKeyword (ambiguity) (rule start)
	 *     isNonunique?='nonunique' (ambiguity) (rule end)
	 *     isOrdered?='ordered' (ambiguity) (rule end)
	 *     name=Name (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=ActionParameterFlowMember ')' (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=ActionParameterMember ')' (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=ExpressionMember (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=FeatureValue (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=ItemFeatureMember ')' (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=MultiplicityMember (ambiguity) (rule end)
	 *     ownedRelationship_comp+=FeatureTyping (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Redefinition (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Subset (ambiguity) (rule end)
	 */
	protected void emit_EffectBehaviorUsage___LeftCurlyBracketKeyword_1_1_0_RightCurlyBracketKeyword_1_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'first'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) SuccessionKeyword (ambiguity) ownedFeatureMembership_comp+=TransitionSourceMember
	 */
	protected void emit_GuardedSuccession_FirstKeyword_1_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '::' | '.'
	 *
	 * This ambiguous syntax occurs at:
	 *     importedPackage=[Package|Name] (ambiguity) '*' ';' (rule end)
	 */
	protected void emit_Import_ColonColonKeyword_3_0_1_0_or_FullStopKeyword_3_0_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) DefinedByKeyword 'any' (ambiguity) (rule start)
	 *     isNonunique?='nonunique' (ambiguity) (rule end)
	 *     isOrdered?='ordered' (ambiguity) (rule end)
	 *     name=Name (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=ConnectorEndMember ')' (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=ConnectorEndMember (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=MultiplicityMember (ambiguity) (rule end)
	 *     ownedRelationship_comp+=FeatureTyping (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Redefinition (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Subset (ambiguity) (rule end)
	 *     ownedRelationship_comp+=Superclassing (ambiguity) (rule end)
	 */
	protected void emit_InterfaceDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     PortUsageKeyword?
	 *
	 * This ambiguous syntax occurs at:
	 *     isPort?='end' (ambiguity) ownedMemberFeature_comp=PortUsage
	 */
	protected void emit_InterfaceEndMember_PortUsageKeywordParserRuleCall_1_0_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     PortUsageKeyword?
	 *
	 * This ambiguous syntax occurs at:
	 *     isPort?='end' (ambiguity) ownedMemberFeature_comp=AbstractPortUsage
	 */
	protected void emit_InterfaceEndMember_PortUsageKeywordParserRuleCall_1_1_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' '}') | 'null'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('(' | '{')* (ambiguity) (rule start)
	 *     (rule start) ('{' '('*)+ (ambiguity) (rule start)
	 */
	protected void emit_NullExpression_SequenceConstructionExpression_NullKeyword_1_or___LeftCurlyBracketKeyword_0_1_RightCurlyBracketKeyword_0_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'import' | 'alias'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) memberElement=[Element|QualifiedName]
	 *     ownedRelationship_comp+=PrefixAnnotation (ambiguity) memberElement=[Element|QualifiedName]
	 *     visibility=PackageElementVisibilityIndicator (ambiguity) memberElement=[Element|QualifiedName]
	 *     visibility=VisibilityIndicator (ambiguity) memberElement=[Element|QualifiedName]
	 */
	protected void emit_PackagedDefinitionMember_AliasKeyword_14_0_1_or_ImportKeyword_14_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     AttributeUsageKeyword?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ownedMemberElement_comp=AttributeUsage
	 *     ownedRelationship_comp+=PrefixAnnotation (ambiguity) ownedMemberElement_comp=AttributeUsage
	 *     visibility=PackageElementVisibilityIndicator (ambiguity) ownedMemberElement_comp=AttributeUsage
	 */
	protected void emit_PackagedUsageMember_AttributeUsageKeywordParserRuleCall_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     AttributeUsageKeyword?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'abstract' (ambiguity) ownedMemberElement_comp=AbstractAttributeUsage
	 *     ownedRelationship_comp+=PrefixAnnotation 'abstract' (ambiguity) ownedMemberElement_comp=AbstractAttributeUsage
	 *     visibility=PackageElementVisibilityIndicator 'abstract' (ambiguity) ownedMemberElement_comp=AbstractAttributeUsage
	 */
	protected void emit_PackagedUsageMember_AttributeUsageKeywordParserRuleCall_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (DefinedByKeyword 'any')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ownedFeatureMembership_comp+=MultiplicityMember
	 */
	protected void emit_ParameterTypePart___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (DefinedByKeyword 'any')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ownedFeatureMembership_comp+=MultiplicityMember
	 *     name=Name (ambiguity) ownedFeatureMembership_comp+=MultiplicityMember
	 *     ownedRelationship_comp+=Redefinition (ambiguity) ownedFeatureMembership_comp+=MultiplicityMember
	 */
	protected void emit_PortTypePart___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'as'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ownedRelationship_comp+=Subset
	 */
	protected void emit_RequirementConstraintUsage_AsKeyword_0_0_0_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'constraint'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (DefinedByKeyword 'any')? ownedFeatureMembership_comp+=MultiplicityMember
	 *     (rule start) (ambiguity) DefinedByKeyword ownedRelationship_comp+=FeatureTyping
	 */
	protected void emit_RequirementConstraintUsage_ConstraintKeyword_0_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'constraint' | (DefinedByKeyword 'any')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) RedefinesKeyword ownedRelationship_comp+=Redefinition
	 *     (rule start) (ambiguity) SubsetsKeyword ownedRelationship_comp+=Subset
	 */
	protected void emit_RequirementConstraintUsage_TypePart_ConstraintKeyword_0_1_0_or___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedFeatureMembership_comp+=EmptyReturnParameterMember (ambiguity) (rule end)
	 *     ownedFeatureMembership_comp+=TrueLiteralMember (ambiguity) (rule end)
	 */
	protected void emit_RequirementDefBody_SemicolonKeyword_0_or___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'return'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) memberName=Name
	 *     (rule start) (ambiguity) ownedMemberParameter_comp=Parameter
	 */
	protected void emit_ReturnParameterMember_ReturnKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'as'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ownedRelationship_comp+=Subset
	 */
	protected void emit_SatisfyRequirementUsage_AsKeyword_0_0_0_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     RequirementKeyword?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (DefinedByKeyword 'any')? ownedFeatureMembership_comp+=MultiplicityMember
	 *     (rule start) (ambiguity) DefinedByKeyword ownedRelationship_comp+=FeatureTyping
	 */
	protected void emit_SatisfyRequirementUsage_RequirementKeywordParserRuleCall_0_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (DefinedByKeyword 'any') | RequirementKeyword
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'by' ownedFeatureMembership_comp+=SatisfactionConnectorMember
	 *     (rule start) (ambiguity) RedefinesKeyword ownedRelationship_comp+=Redefinition
	 *     (rule start) (ambiguity) SubsetsKeyword ownedRelationship_comp+=Subset
	 */
	protected void emit_SatisfyRequirementUsage_TypePart_RequirementKeywordParserRuleCall_0_1_0_or___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'of'?
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedFeatureMembership_comp+=EmptyItemFeatureMember 'send' (ambiguity) ownedFeatureMembership_comp+=ExpressionMember
	 */
	protected void emit_SendNodeDeclaration_OfKeyword_3_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     AttributeUsageKeyword?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) direction=FeatureDirection
	 *     (rule start) (ambiguity) ownedMemberFeature_comp=AttributeUsage
	 *     ownedRelationship_comp+=PrefixAnnotation (ambiguity) direction=FeatureDirection
	 *     ownedRelationship_comp+=PrefixAnnotation (ambiguity) ownedMemberFeature_comp=AttributeUsage
	 *     visibility=VisibilityIndicator (ambiguity) direction=FeatureDirection
	 *     visibility=VisibilityIndicator (ambiguity) ownedMemberFeature_comp=AttributeUsage
	 */
	protected void emit_StructureUsageMember_AttributeUsageKeywordParserRuleCall_1_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     AttributeUsageKeyword?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'abstract' (ambiguity) direction=FeatureDirection
	 *     (rule start) 'abstract' (ambiguity) ownedMemberFeature_comp=AbstractAttributeUsage
	 *     ownedRelationship_comp+=PrefixAnnotation 'abstract' (ambiguity) direction=FeatureDirection
	 *     ownedRelationship_comp+=PrefixAnnotation 'abstract' (ambiguity) ownedMemberFeature_comp=AbstractAttributeUsage
	 *     visibility=VisibilityIndicator 'abstract' (ambiguity) direction=FeatureDirection
	 *     visibility=VisibilityIndicator 'abstract' (ambiguity) ownedMemberFeature_comp=AbstractAttributeUsage
	 */
	protected void emit_StructureUsageMember_AttributeUsageKeywordParserRuleCall_1_3_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'first'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ownedFeatureMembership_comp+=ConnectorEndMember
	 */
	protected void emit_SuccessionDeclaration_FirstKeyword_0_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'first'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) TransitionUsageKeyword (ambiguity) ownedFeatureMembership_comp+=TransitionSourceMember
	 */
	protected void emit_TransitionStep_FirstKeyword_1_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (DefinedByKeyword 'any')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'constraint'? (ambiguity) ownedFeatureMembership_comp+=MultiplicityMember
	 *     (rule start) (ambiguity) ownedFeatureMembership_comp+=MultiplicityMember
	 *     (rule start) ActionKeyword (ambiguity) ownedFeatureMembership_comp+=MultiplicityMember
	 *     (rule start) ConstraintUsageKeyword? (ambiguity) ownedFeatureMembership_comp+=MultiplicityMember
	 *     (rule start) RequirementKeyword? (ambiguity) ownedFeatureMembership_comp+=MultiplicityMember
	 *     (rule start) StateUsageKeyword (ambiguity) ownedFeatureMembership_comp+=MultiplicityMember
	 *     (rule start) SuccessionKeyword (ambiguity) ownedFeatureMembership_comp+=MultiplicityMember
	 *     (rule start) TransitionUsageKeyword (ambiguity) ownedFeatureMembership_comp+=MultiplicityMember
	 *     name=Name (ambiguity) ownedFeatureMembership_comp+=MultiplicityMember
	 *     ownedRelationship_comp+=Redefinition (ambiguity) ownedFeatureMembership_comp+=MultiplicityMember
	 *     reqId=Name (ambiguity) ownedFeatureMembership_comp+=MultiplicityMember
	 */
	protected void emit_TypePart___DefinedByKeywordParserRuleCall_0_0_AnyKeyword_0_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
