/*
 * generated by Xtext 2.12.0
 */
package org.omg.sysml.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SysMLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Container");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Containers
		//Container:
		//	Package | Definition;
		@Override public ParserRule getRule() { return rule; }
		
		//Package | Definition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Package
		public RuleCall getPackageParserRuleCall_0() { return cPackageParserRuleCall_0; }
		
		//Definition
		public RuleCall getDefinitionParserRuleCall_1() { return cDefinitionParserRuleCall_1; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cImportedNamespacePackageMemberCrossReference_1_0 = (CrossReference)cImportedNamespaceAssignment_1.eContents().get(0);
		private final RuleCall cImportedNamespacePackageMemberQualifiedNameWithWildCardParserRuleCall_1_0_1 = (RuleCall)cImportedNamespacePackageMemberCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	'import' importedNamespace=[PackageMember|QualifiedNameWithWildCard] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=[PackageMember|QualifiedNameWithWildCard] ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=[PackageMember|QualifiedNameWithWildCard]
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//[PackageMember|QualifiedNameWithWildCard]
		public CrossReference getImportedNamespacePackageMemberCrossReference_1_0() { return cImportedNamespacePackageMemberCrossReference_1_0; }
		
		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespacePackageMemberQualifiedNameWithWildCardParserRuleCall_1_0_1() { return cImportedNamespacePackageMemberQualifiedNameWithWildCardParserRuleCall_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportImportParserRuleCall_0_0 = (RuleCall)cImportAssignment_0.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMemberAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMemberPackageMemberParserRuleCall_4_0 = (RuleCall)cMemberAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Package:
		//	^import+=Import*
		//	'package' name=Name '{' member+=PackageMember* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//^import+=Import* 'package' name=Name '{' member+=PackageMember* '}'
		public Group getGroup() { return cGroup; }
		
		//^import+=Import*
		public Assignment getImportAssignment_0() { return cImportAssignment_0; }
		
		//Import
		public RuleCall getImportImportParserRuleCall_0_0() { return cImportImportParserRuleCall_0_0; }
		
		//'package'
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }
		
		//name=Name
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//member+=PackageMember*
		public Assignment getMemberAssignment_4() { return cMemberAssignment_4; }
		
		//PackageMember
		public RuleCall getMemberPackageMemberParserRuleCall_4_0() { return cMemberPackageMemberParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PackageMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PackageMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContainerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPartParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PackageMember:
		//	Container | Feature | Part;
		@Override public ParserRule getRule() { return rule; }
		
		//Container | Feature | Part
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Container
		public RuleCall getContainerParserRuleCall_0() { return cContainerParserRuleCall_0; }
		
		//Feature
		public RuleCall getFeatureParserRuleCall_1() { return cFeatureParserRuleCall_1; }
		
		//Part
		public RuleCall getPartParserRuleCall_2() { return cPartParserRuleCall_2; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueTypeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBlockDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Definitions
		//Definition:
		//	ValueTypeDefinition | BlockDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//ValueTypeDefinition | BlockDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValueTypeDefinition
		public RuleCall getValueTypeDefinitionParserRuleCall_0() { return cValueTypeDefinitionParserRuleCall_0; }
		
		//BlockDefinition
		public RuleCall getBlockDefinitionParserRuleCall_1() { return cBlockDefinitionParserRuleCall_1; }
	}
	public class ValueTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ValueTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValuetypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cGroup_2_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_0_0 = (Keyword)cGroup_2_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_2_0_0_1 = (Assignment)cGroup_2_0_0.eContents().get(1);
		private final CrossReference cTypeValueTypeDefinitionCrossReference_2_0_0_1_0 = (CrossReference)cTypeAssignment_2_0_0_1.eContents().get(0);
		private final RuleCall cTypeValueTypeDefinitionQualifiedNameParserRuleCall_2_0_0_1_0_1 = (RuleCall)cTypeValueTypeDefinitionCrossReference_2_0_0_1_0.eContents().get(1);
		private final Assignment cUnitsAssignment_2_0_0_2 = (Assignment)cGroup_2_0_0.eContents().get(2);
		private final RuleCall cUnitsUnitsParserRuleCall_2_0_0_2_0 = (RuleCall)cUnitsAssignment_2_0_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cFeatureAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cFeatureBasicFeatureParserRuleCall_2_1_1_0 = (RuleCall)cFeatureAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//ValueTypeDefinition:
		//	'valuetype' name=Name (('=' type=[ValueTypeDefinition|QualifiedName] units=Units?)? ';'
		//	| '{' feature+=BasicFeature* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'valuetype' name=Name (('=' type=[ValueTypeDefinition|QualifiedName] units=Units?)? ';' | '{' feature+=BasicFeature*
		//'}')
		public Group getGroup() { return cGroup; }
		
		//'valuetype'
		public Keyword getValuetypeKeyword_0() { return cValuetypeKeyword_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
		
		//('=' type=[ValueTypeDefinition|QualifiedName] units=Units?)? ';' | '{' feature+=BasicFeature* '}'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//('=' type=[ValueTypeDefinition|QualifiedName] units=Units?)? ';'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//('=' type=[ValueTypeDefinition|QualifiedName] units=Units?)?
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0_0_0() { return cEqualsSignKeyword_2_0_0_0; }
		
		//type=[ValueTypeDefinition|QualifiedName]
		public Assignment getTypeAssignment_2_0_0_1() { return cTypeAssignment_2_0_0_1; }
		
		//[ValueTypeDefinition|QualifiedName]
		public CrossReference getTypeValueTypeDefinitionCrossReference_2_0_0_1_0() { return cTypeValueTypeDefinitionCrossReference_2_0_0_1_0; }
		
		//QualifiedName
		public RuleCall getTypeValueTypeDefinitionQualifiedNameParserRuleCall_2_0_0_1_0_1() { return cTypeValueTypeDefinitionQualifiedNameParserRuleCall_2_0_0_1_0_1; }
		
		//units=Units?
		public Assignment getUnitsAssignment_2_0_0_2() { return cUnitsAssignment_2_0_0_2; }
		
		//Units
		public RuleCall getUnitsUnitsParserRuleCall_2_0_0_2_0() { return cUnitsUnitsParserRuleCall_2_0_0_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0_1() { return cSemicolonKeyword_2_0_1; }
		
		//'{' feature+=BasicFeature* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//feature+=BasicFeature*
		public Assignment getFeatureAssignment_2_1_1() { return cFeatureAssignment_2_1_1; }
		
		//BasicFeature
		public RuleCall getFeatureBasicFeatureParserRuleCall_2_1_1_0() { return cFeatureBasicFeatureParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class BlockDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.BlockDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBlockKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cFeatureAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cFeatureFeatureParserRuleCall_2_1_1_0 = (RuleCall)cFeatureAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//BlockDefinition:
		//	'block' name=Name (';' | '{' feature+=Feature* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'block' name=Name (';' | '{' feature+=Feature* '}')
		public Group getGroup() { return cGroup; }
		
		//'block'
		public Keyword getBlockKeyword_0() { return cBlockKeyword_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
		
		//';' | '{' feature+=Feature* '}'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' feature+=Feature* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//feature+=Feature*
		public Assignment getFeatureAssignment_2_1_1() { return cFeatureAssignment_2_1_1; }
		
		//Feature
		public RuleCall getFeatureFeatureParserRuleCall_2_1_1_0() { return cFeatureFeatureParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class PartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cNameAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_1_0_0_0 = (RuleCall)cNameAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Assignment cIndexAssignment_1_0_1_0 = (Assignment)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cIndexUsageIndexParserRuleCall_1_0_1_0_0 = (RuleCall)cIndexAssignment_1_0_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1_1 = (Alternatives)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_1_1_0 = (Group)cAlternatives_1_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_0_1_1_0_0 = (Keyword)cGroup_1_0_1_1_0.eContents().get(0);
		private final Assignment cDefinitionAssignment_1_0_1_1_0_1 = (Assignment)cGroup_1_0_1_1_0.eContents().get(1);
		private final CrossReference cDefinitionDefinitionCrossReference_1_0_1_1_0_1_0 = (CrossReference)cDefinitionAssignment_1_0_1_1_0_1.eContents().get(0);
		private final RuleCall cDefinitionDefinitionQualifiedNameParserRuleCall_1_0_1_1_0_1_0_1 = (RuleCall)cDefinitionDefinitionCrossReference_1_0_1_1_0_1_0.eContents().get(1);
		private final Group cGroup_1_0_1_1_0_2 = (Group)cGroup_1_0_1_1_0.eContents().get(2);
		private final Keyword cIsKeyword_1_0_1_1_0_2_0 = (Keyword)cGroup_1_0_1_1_0_2.eContents().get(0);
		private final Assignment cBaseAssignment_1_0_1_1_0_2_1 = (Assignment)cGroup_1_0_1_1_0_2.eContents().get(1);
		private final CrossReference cBasePartCrossReference_1_0_1_1_0_2_1_0 = (CrossReference)cBaseAssignment_1_0_1_1_0_2_1.eContents().get(0);
		private final RuleCall cBasePartQualifiedNameParserRuleCall_1_0_1_1_0_2_1_0_1 = (RuleCall)cBasePartCrossReference_1_0_1_1_0_2_1_0.eContents().get(1);
		private final Group cGroup_1_0_1_1_1 = (Group)cAlternatives_1_0_1_1.eContents().get(1);
		private final Keyword cIsKeyword_1_0_1_1_1_0 = (Keyword)cGroup_1_0_1_1_1.eContents().get(0);
		private final Assignment cBaseAssignment_1_0_1_1_1_1 = (Assignment)cGroup_1_0_1_1_1.eContents().get(1);
		private final CrossReference cBasePartCrossReference_1_0_1_1_1_1_0 = (CrossReference)cBaseAssignment_1_0_1_1_1_1.eContents().get(0);
		private final RuleCall cBasePartQualifiedNameParserRuleCall_1_0_1_1_1_1_0_1 = (RuleCall)cBasePartCrossReference_1_0_1_1_1_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cIsKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cBaseAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cBasePartCrossReference_1_1_1_0 = (CrossReference)cBaseAssignment_1_1_1.eContents().get(0);
		private final RuleCall cBasePartQualifiedNameParserRuleCall_1_1_1_0_1 = (RuleCall)cBasePartCrossReference_1_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMultiplicityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMultiplicityMultiplicityParserRuleCall_2_1_0 = (RuleCall)cMultiplicityAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cMemberAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cMemberMemberParserRuleCall_3_1_1_0 = (RuleCall)cMemberAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		
		//// Usages
		//Part:
		//	'part' (name=Name (index=UsageIndex? (':' definition=[Definition|QualifiedName] ('is' base=[Part|QualifiedName])? |
		//	'is' base=[Part|QualifiedName]))? |
		//	'is' base=[Part|QualifiedName]) ('[' multiplicity=Multiplicity ']')? (';' | '{' member+=Member* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'part' (name=Name (index=UsageIndex? (':' definition=[Definition|QualifiedName] ('is' base=[Part|QualifiedName])? | 'is'
		//base=[Part|QualifiedName]))? | 'is' base=[Part|QualifiedName]) ('[' multiplicity=Multiplicity ']')? (';' | '{'
		//member+=Member* '}')
		public Group getGroup() { return cGroup; }
		
		//'part'
		public Keyword getPartKeyword_0() { return cPartKeyword_0; }
		
		//name=Name (index=UsageIndex? (':' definition=[Definition|QualifiedName] ('is' base=[Part|QualifiedName])? | 'is'
		//base=[Part|QualifiedName]))? | 'is' base=[Part|QualifiedName]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//name=Name (index=UsageIndex? (':' definition=[Definition|QualifiedName] ('is' base=[Part|QualifiedName])? | 'is'
		//base=[Part|QualifiedName]))?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//name=Name
		public Assignment getNameAssignment_1_0_0() { return cNameAssignment_1_0_0; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0_0_0() { return cNameNameParserRuleCall_1_0_0_0; }
		
		//(index=UsageIndex? (':' definition=[Definition|QualifiedName] ('is' base=[Part|QualifiedName])? | 'is'
		//base=[Part|QualifiedName]))?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//index=UsageIndex?
		public Assignment getIndexAssignment_1_0_1_0() { return cIndexAssignment_1_0_1_0; }
		
		//UsageIndex
		public RuleCall getIndexUsageIndexParserRuleCall_1_0_1_0_0() { return cIndexUsageIndexParserRuleCall_1_0_1_0_0; }
		
		//':' definition=[Definition|QualifiedName] ('is' base=[Part|QualifiedName])? | 'is' base=[Part|QualifiedName]
		public Alternatives getAlternatives_1_0_1_1() { return cAlternatives_1_0_1_1; }
		
		//':' definition=[Definition|QualifiedName] ('is' base=[Part|QualifiedName])?
		public Group getGroup_1_0_1_1_0() { return cGroup_1_0_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_1_1_0_0() { return cColonKeyword_1_0_1_1_0_0; }
		
		//definition=[Definition|QualifiedName]
		public Assignment getDefinitionAssignment_1_0_1_1_0_1() { return cDefinitionAssignment_1_0_1_1_0_1; }
		
		//[Definition|QualifiedName]
		public CrossReference getDefinitionDefinitionCrossReference_1_0_1_1_0_1_0() { return cDefinitionDefinitionCrossReference_1_0_1_1_0_1_0; }
		
		//QualifiedName
		public RuleCall getDefinitionDefinitionQualifiedNameParserRuleCall_1_0_1_1_0_1_0_1() { return cDefinitionDefinitionQualifiedNameParserRuleCall_1_0_1_1_0_1_0_1; }
		
		//('is' base=[Part|QualifiedName])?
		public Group getGroup_1_0_1_1_0_2() { return cGroup_1_0_1_1_0_2; }
		
		//'is'
		public Keyword getIsKeyword_1_0_1_1_0_2_0() { return cIsKeyword_1_0_1_1_0_2_0; }
		
		//base=[Part|QualifiedName]
		public Assignment getBaseAssignment_1_0_1_1_0_2_1() { return cBaseAssignment_1_0_1_1_0_2_1; }
		
		//[Part|QualifiedName]
		public CrossReference getBasePartCrossReference_1_0_1_1_0_2_1_0() { return cBasePartCrossReference_1_0_1_1_0_2_1_0; }
		
		//QualifiedName
		public RuleCall getBasePartQualifiedNameParserRuleCall_1_0_1_1_0_2_1_0_1() { return cBasePartQualifiedNameParserRuleCall_1_0_1_1_0_2_1_0_1; }
		
		//'is' base=[Part|QualifiedName]
		public Group getGroup_1_0_1_1_1() { return cGroup_1_0_1_1_1; }
		
		//'is'
		public Keyword getIsKeyword_1_0_1_1_1_0() { return cIsKeyword_1_0_1_1_1_0; }
		
		//base=[Part|QualifiedName]
		public Assignment getBaseAssignment_1_0_1_1_1_1() { return cBaseAssignment_1_0_1_1_1_1; }
		
		//[Part|QualifiedName]
		public CrossReference getBasePartCrossReference_1_0_1_1_1_1_0() { return cBasePartCrossReference_1_0_1_1_1_1_0; }
		
		//QualifiedName
		public RuleCall getBasePartQualifiedNameParserRuleCall_1_0_1_1_1_1_0_1() { return cBasePartQualifiedNameParserRuleCall_1_0_1_1_1_1_0_1; }
		
		//'is' base=[Part|QualifiedName]
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'is'
		public Keyword getIsKeyword_1_1_0() { return cIsKeyword_1_1_0; }
		
		//base=[Part|QualifiedName]
		public Assignment getBaseAssignment_1_1_1() { return cBaseAssignment_1_1_1; }
		
		//[Part|QualifiedName]
		public CrossReference getBasePartCrossReference_1_1_1_0() { return cBasePartCrossReference_1_1_1_0; }
		
		//QualifiedName
		public RuleCall getBasePartQualifiedNameParserRuleCall_1_1_1_0_1() { return cBasePartQualifiedNameParserRuleCall_1_1_1_0_1; }
		
		//('[' multiplicity=Multiplicity ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//multiplicity=Multiplicity
		public Assignment getMultiplicityAssignment_2_1() { return cMultiplicityAssignment_2_1; }
		
		//Multiplicity
		public RuleCall getMultiplicityMultiplicityParserRuleCall_2_1_0() { return cMultiplicityMultiplicityParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//';' | '{' member+=Member* '}'
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0() { return cSemicolonKeyword_3_0; }
		
		//'{' member+=Member* '}'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1_0() { return cLeftCurlyBracketKeyword_3_1_0; }
		
		//member+=Member*
		public Assignment getMemberAssignment_3_1_1() { return cMemberAssignment_3_1_1; }
		
		//Member
		public RuleCall getMemberMemberParserRuleCall_3_1_1_0() { return cMemberMemberParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_1_2() { return cRightCurlyBracketKeyword_3_1_2; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPartParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConnectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Member:
		//	Feature | Part | Connector;
		@Override public ParserRule getRule() { return rule; }
		
		//Feature | Part | Connector
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Feature
		public RuleCall getFeatureParserRuleCall_0() { return cFeatureParserRuleCall_0; }
		
		//Part
		public RuleCall getPartParserRuleCall_1() { return cPartParserRuleCall_1; }
		
		//Connector
		public RuleCall getConnectorParserRuleCall_2() { return cConnectorParserRuleCall_2; }
	}
	public class UsageIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.UsageIndex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMultiplicityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMultiplicityMultiplicityParserRuleCall_2_1_0 = (RuleCall)cMultiplicityAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UsageIndex:
		//	'[' name=Name (':' multiplicity=Multiplicity)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' name=Name (':' multiplicity=Multiplicity)? ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
		
		//(':' multiplicity=Multiplicity)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//multiplicity=Multiplicity
		public Assignment getMultiplicityAssignment_2_1() { return cMultiplicityAssignment_2_1; }
		
		//Multiplicity
		public RuleCall getMultiplicityMultiplicityParserRuleCall_2_1_0() { return cMultiplicityMultiplicityParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class MultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Multiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLowerBoundBoundParserRuleCall_0_0_0 = (RuleCall)cLowerBoundAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cUpperBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUpperBoundUpperBoundParserRuleCall_1_0 = (RuleCall)cUpperBoundAssignment_1.eContents().get(0);
		
		//Multiplicity:
		//	(lowerBound=Bound '..')? upperBound=UpperBound;
		@Override public ParserRule getRule() { return rule; }
		
		//(lowerBound=Bound '..')? upperBound=UpperBound
		public Group getGroup() { return cGroup; }
		
		//(lowerBound=Bound '..')?
		public Group getGroup_0() { return cGroup_0; }
		
		//lowerBound=Bound
		public Assignment getLowerBoundAssignment_0_0() { return cLowerBoundAssignment_0_0; }
		
		//Bound
		public RuleCall getLowerBoundBoundParserRuleCall_0_0_0() { return cLowerBoundBoundParserRuleCall_0_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_0_1() { return cFullStopFullStopKeyword_0_1; }
		
		//upperBound=UpperBound
		public Assignment getUpperBoundAssignment_1() { return cUpperBoundAssignment_1; }
		
		//UpperBound
		public RuleCall getUpperBoundUpperBoundParserRuleCall_1_0() { return cUpperBoundUpperBoundParserRuleCall_1_0; }
	}
	public class BoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Bound");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVarNameParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		
		//Bound:
		//	value=INT | var=Name;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT | var=Name
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//var=Name
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//Name
		public RuleCall getVarNameParserRuleCall_1_0() { return cVarNameParserRuleCall_1_0; }
	}
	public class UpperBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.UpperBound");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVarNameParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Assignment cUnboundedAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cUnboundedAsteriskKeyword_2_0 = (Keyword)cUnboundedAssignment_2.eContents().get(0);
		
		//UpperBound:
		//	value=INT | var=Name | unbounded?='*';
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT | var=Name | unbounded?='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//var=Name
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//Name
		public RuleCall getVarNameParserRuleCall_1_0() { return cVarNameParserRuleCall_1_0; }
		
		//unbounded?='*'
		public Assignment getUnboundedAssignment_2() { return cUnboundedAssignment_2; }
		
		//'*'
		public Keyword getUnboundedAsteriskKeyword_2_0() { return cUnboundedAsteriskKeyword_2_0; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConnectableFeatureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Features
		//Feature:
		//	BasicFeature | ConnectableFeature;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicFeature | ConnectableFeature
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicFeature
		public RuleCall getBasicFeatureParserRuleCall_0() { return cBasicFeatureParserRuleCall_0; }
		
		//ConnectableFeature
		public RuleCall getConnectableFeatureParserRuleCall_1() { return cConnectableFeatureParserRuleCall_1; }
	}
	public class BasicFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.BasicFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIndexUsageIndexParserRuleCall_1_0_0 = (RuleCall)cIndexAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cDefinitionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cDefinitionDefinitionCrossReference_1_2_0 = (CrossReference)cDefinitionAssignment_1_2.eContents().get(0);
		private final RuleCall cDefinitionDefinitionQualifiedNameParserRuleCall_1_2_0_1 = (RuleCall)cDefinitionDefinitionCrossReference_1_2_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMultiplicityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMultiplicityMultiplicityParserRuleCall_2_1_0 = (RuleCall)cMultiplicityAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BasicFeature:
		//	name=Name (index=UsageIndex? ':' definition=[Definition|QualifiedName])? ('[' multiplicity=Multiplicity ']')? ('='
		//	expression=Expression)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=Name (index=UsageIndex? ':' definition=[Definition|QualifiedName])? ('[' multiplicity=Multiplicity ']')? ('='
		//expression=Expression)? ';'
		public Group getGroup() { return cGroup; }
		
		//name=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }
		
		//(index=UsageIndex? ':' definition=[Definition|QualifiedName])?
		public Group getGroup_1() { return cGroup_1; }
		
		//index=UsageIndex?
		public Assignment getIndexAssignment_1_0() { return cIndexAssignment_1_0; }
		
		//UsageIndex
		public RuleCall getIndexUsageIndexParserRuleCall_1_0_0() { return cIndexUsageIndexParserRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//definition=[Definition|QualifiedName]
		public Assignment getDefinitionAssignment_1_2() { return cDefinitionAssignment_1_2; }
		
		//[Definition|QualifiedName]
		public CrossReference getDefinitionDefinitionCrossReference_1_2_0() { return cDefinitionDefinitionCrossReference_1_2_0; }
		
		//QualifiedName
		public RuleCall getDefinitionDefinitionQualifiedNameParserRuleCall_1_2_0_1() { return cDefinitionDefinitionQualifiedNameParserRuleCall_1_2_0_1; }
		
		//('[' multiplicity=Multiplicity ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//multiplicity=Multiplicity
		public Assignment getMultiplicityAssignment_2_1() { return cMultiplicityAssignment_2_1; }
		
		//Multiplicity
		public RuleCall getMultiplicityMultiplicityParserRuleCall_2_1_0() { return cMultiplicityMultiplicityParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//('=' expression=Expression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ConnectableFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConnectableFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionConnectionDirectionParserRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIndexAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cIndexUsageIndexParserRuleCall_2_0_0 = (RuleCall)cIndexAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cDefinitionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cDefinitionDefinitionCrossReference_2_2_0 = (CrossReference)cDefinitionAssignment_2_2.eContents().get(0);
		private final RuleCall cDefinitionDefinitionQualifiedNameParserRuleCall_2_2_0_1 = (RuleCall)cDefinitionDefinitionCrossReference_2_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMultiplicityAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMultiplicityMultiplicityParserRuleCall_3_1_0 = (RuleCall)cMultiplicityAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ConnectableFeature:
		//	direction=ConnectionDirection name=Name (index=UsageIndex? ':' definition=[Definition|QualifiedName])? ('['
		//	multiplicity=Multiplicity ']')? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//direction=ConnectionDirection name=Name (index=UsageIndex? ':' definition=[Definition|QualifiedName])? ('['
		//multiplicity=Multiplicity ']')? ';'
		public Group getGroup() { return cGroup; }
		
		//direction=ConnectionDirection
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//ConnectionDirection
		public RuleCall getDirectionConnectionDirectionParserRuleCall_0_0() { return cDirectionConnectionDirectionParserRuleCall_0_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
		
		//(index=UsageIndex? ':' definition=[Definition|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//index=UsageIndex?
		public Assignment getIndexAssignment_2_0() { return cIndexAssignment_2_0; }
		
		//UsageIndex
		public RuleCall getIndexUsageIndexParserRuleCall_2_0_0() { return cIndexUsageIndexParserRuleCall_2_0_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//definition=[Definition|QualifiedName]
		public Assignment getDefinitionAssignment_2_2() { return cDefinitionAssignment_2_2; }
		
		//[Definition|QualifiedName]
		public CrossReference getDefinitionDefinitionCrossReference_2_2_0() { return cDefinitionDefinitionCrossReference_2_2_0; }
		
		//QualifiedName
		public RuleCall getDefinitionDefinitionQualifiedNameParserRuleCall_2_2_0_1() { return cDefinitionDefinitionQualifiedNameParserRuleCall_2_2_0_1; }
		
		//('[' multiplicity=Multiplicity ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//multiplicity=Multiplicity
		public Assignment getMultiplicityAssignment_3_1() { return cMultiplicityAssignment_3_1; }
		
		//Multiplicity
		public RuleCall getMultiplicityMultiplicityParserRuleCall_3_1_0() { return cMultiplicityMultiplicityParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ConnectionDirectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConnectionDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cINAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cINInKeyword_0_0 = (Keyword)cINAssignment_0.eContents().get(0);
		private final Assignment cOUTAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cOUTOutKeyword_1_0 = (Keyword)cOUTAssignment_1.eContents().get(0);
		private final Assignment cINOUTAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cINOUTInoutKeyword_2_0 = (Keyword)cINOUTAssignment_2.eContents().get(0);
		
		//ConnectionDirection:
		//	IN='in' | OUT='out' | INOUT='inout';
		@Override public ParserRule getRule() { return rule; }
		
		//IN='in' | OUT='out' | INOUT='inout'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IN='in'
		public Assignment getINAssignment_0() { return cINAssignment_0; }
		
		//'in'
		public Keyword getINInKeyword_0_0() { return cINInKeyword_0_0; }
		
		//OUT='out'
		public Assignment getOUTAssignment_1() { return cOUTAssignment_1; }
		
		//'out'
		public Keyword getOUTOutKeyword_1_0() { return cOUTOutKeyword_1_0; }
		
		//INOUT='inout'
		public Assignment getINOUTAssignment_2() { return cINOUTAssignment_2; }
		
		//'inout'
		public Keyword getINOUTInoutKeyword_2_0() { return cINOUTInoutKeyword_2_0; }
	}
	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Connector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConnectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceConnectableFeatureCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceConnectableFeatureQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cSourceConnectableFeatureCrossReference_2_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetConnectableFeatureCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetConnectableFeatureQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cTargetConnectableFeatureCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// RELATIONSHIPS
		//Connector:
		//	'connector' name=Name?
		//	source=[ConnectableFeature|QualifiedName] '=>'
		//	target=[ConnectableFeature|QualifiedName] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'connector' name=Name? source=[ConnectableFeature|QualifiedName] '=>' target=[ConnectableFeature|QualifiedName] ';'
		public Group getGroup() { return cGroup; }
		
		//'connector'
		public Keyword getConnectorKeyword_0() { return cConnectorKeyword_0; }
		
		//name=Name?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
		
		//source=[ConnectableFeature|QualifiedName]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }
		
		//[ConnectableFeature|QualifiedName]
		public CrossReference getSourceConnectableFeatureCrossReference_2_0() { return cSourceConnectableFeatureCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getSourceConnectableFeatureQualifiedNameParserRuleCall_2_0_1() { return cSourceConnectableFeatureQualifiedNameParserRuleCall_2_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }
		
		//target=[ConnectableFeature|QualifiedName]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }
		
		//[ConnectableFeature|QualifiedName]
		public CrossReference getTargetConnectableFeatureCrossReference_4_0() { return cTargetConnectableFeatureCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getTargetConnectableFeatureQualifiedNameParserRuleCall_4_0_1() { return cTargetConnectableFeatureQualifiedNameParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class UnitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Units");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumeratorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumeratorUnitsProductParserRuleCall_0_0 = (RuleCall)cNumeratorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDenominatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDenominatorUnitsProductParserRuleCall_1_1_0 = (RuleCall)cDenominatorAssignment_1_1.eContents().get(0);
		
		//// UNITS
		//Units:
		//	numerator=UnitsProduct ('/' denominator=UnitsProduct)?;
		@Override public ParserRule getRule() { return rule; }
		
		//numerator=UnitsProduct ('/' denominator=UnitsProduct)?
		public Group getGroup() { return cGroup; }
		
		//numerator=UnitsProduct
		public Assignment getNumeratorAssignment_0() { return cNumeratorAssignment_0; }
		
		//UnitsProduct
		public RuleCall getNumeratorUnitsProductParserRuleCall_0_0() { return cNumeratorUnitsProductParserRuleCall_0_0; }
		
		//('/' denominator=UnitsProduct)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }
		
		//denominator=UnitsProduct
		public Assignment getDenominatorAssignment_1_1() { return cDenominatorAssignment_1_1; }
		
		//UnitsProduct
		public RuleCall getDenominatorUnitsProductParserRuleCall_1_1_0() { return cDenominatorUnitsProductParserRuleCall_1_1_0; }
	}
	public class UnitsProductElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.UnitsProduct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFactorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFactorUnitsExponentParserRuleCall_0_0 = (RuleCall)cFactorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFactorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFactorUnitsExponentParserRuleCall_1_1_0 = (RuleCall)cFactorAssignment_1_1.eContents().get(0);
		
		//UnitsProduct:
		//	factor+=UnitsExponent ('-' factor+=UnitsExponent)*;
		@Override public ParserRule getRule() { return rule; }
		
		//factor+=UnitsExponent ('-' factor+=UnitsExponent)*
		public Group getGroup() { return cGroup; }
		
		//factor+=UnitsExponent
		public Assignment getFactorAssignment_0() { return cFactorAssignment_0; }
		
		//UnitsExponent
		public RuleCall getFactorUnitsExponentParserRuleCall_0_0() { return cFactorUnitsExponentParserRuleCall_0_0; }
		
		//('-' factor+=UnitsExponent)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }
		
		//factor+=UnitsExponent
		public Assignment getFactorAssignment_1_1() { return cFactorAssignment_1_1; }
		
		//UnitsExponent
		public RuleCall getFactorUnitsExponentParserRuleCall_1_1_0() { return cFactorUnitsExponentParserRuleCall_1_1_0; }
	}
	public class UnitsExponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.UnitsExponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnitAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnitIDTerminalRuleCall_0_0 = (RuleCall)cUnitAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExponentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExponentIntegerLiteralParserRuleCall_1_1_0 = (RuleCall)cExponentAssignment_1_1.eContents().get(0);
		
		//UnitsExponent:
		//	unit=ID ('^' exponent=IntegerLiteral)?;
		@Override public ParserRule getRule() { return rule; }
		
		//unit=ID ('^' exponent=IntegerLiteral)?
		public Group getGroup() { return cGroup; }
		
		//unit=ID
		public Assignment getUnitAssignment_0() { return cUnitAssignment_0; }
		
		//ID
		public RuleCall getUnitIDTerminalRuleCall_0_0() { return cUnitIDTerminalRuleCall_0_0; }
		
		//('^' exponent=IntegerLiteral)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_0() { return cCircumflexAccentKeyword_1_0; }
		
		//exponent=IntegerLiteral
		public Assignment getExponentAssignment_1_1() { return cExponentAssignment_1_1; }
		
		//IntegerLiteral
		public RuleCall getExponentIntegerLiteralParserRuleCall_1_1_0() { return cExponentIntegerLiteralParserRuleCall_1_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureReferenceExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// EXPRESSIONS
		//Expression:
		//	NumericLiteral | FeatureReferenceExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//NumericLiteral | FeatureReferenceExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumericLiteral
		public RuleCall getNumericLiteralParserRuleCall_0() { return cNumericLiteralParserRuleCall_0; }
		
		//FeatureReferenceExpression
		public RuleCall getFeatureReferenceExpressionParserRuleCall_1() { return cFeatureReferenceExpressionParserRuleCall_1; }
	}
	public class FeatureReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.FeatureReferenceExpression");
		private final Assignment cFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_0 = (CrossReference)cFeatureAssignment.eContents().get(0);
		private final RuleCall cFeatureFeatureQualifiedNameParserRuleCall_0_1 = (RuleCall)cFeatureFeatureCrossReference_0.eContents().get(1);
		
		//FeatureReferenceExpression:
		//	feature=[Feature|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//feature=[Feature|QualifiedName]
		public Assignment getFeatureAssignment() { return cFeatureAssignment; }
		
		//[Feature|QualifiedName]
		public CrossReference getFeatureFeatureCrossReference_0() { return cFeatureFeatureCrossReference_0; }
		
		//QualifiedName
		public RuleCall getFeatureFeatureQualifiedNameParserRuleCall_0_1() { return cFeatureFeatureQualifiedNameParserRuleCall_0_1; }
	}
	public class NumericLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.NumericLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIntegerLiteralParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cRealLiteralParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Assignment cUnitsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitsUnitsParserRuleCall_1_0 = (RuleCall)cUnitsAssignment_1.eContents().get(0);
		
		//NumericLiteral:
		//	(IntegerLiteral | RealLiteral) units=Units?;
		@Override public ParserRule getRule() { return rule; }
		
		//(IntegerLiteral | RealLiteral) units=Units?
		public Group getGroup() { return cGroup; }
		
		//IntegerLiteral | RealLiteral
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_0_0() { return cIntegerLiteralParserRuleCall_0_0; }
		
		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_0_1() { return cRealLiteralParserRuleCall_0_1; }
		
		//units=Units?
		public Assignment getUnitsAssignment_1() { return cUnitsAssignment_1; }
		
		//Units
		public RuleCall getUnitsUnitsParserRuleCall_1_0() { return cUnitsUnitsParserRuleCall_1_0; }
	}
	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.IntegerLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignSignParserRuleCall_0_0 = (RuleCall)cSignAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntegerLiteral:
		//	sign=Sign? value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//sign=Sign? value=INT
		public Group getGroup() { return cGroup; }
		
		//sign=Sign?
		public Assignment getSignAssignment_0() { return cSignAssignment_0; }
		
		//Sign
		public RuleCall getSignSignParserRuleCall_0_0() { return cSignSignParserRuleCall_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RealLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignSignParserRuleCall_0_0 = (RuleCall)cSignAssignment_0.eContents().get(0);
		private final Assignment cIntegerPartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIntegerPartINTTerminalRuleCall_1_0 = (RuleCall)cIntegerPartAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFractionPartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFractionPartINTTerminalRuleCall_3_0 = (RuleCall)cFractionPartAssignment_3.eContents().get(0);
		
		//RealLiteral:
		//	sign=Sign? integerPart=INT '.' fractionPart=INT?;
		@Override public ParserRule getRule() { return rule; }
		
		//sign=Sign? integerPart=INT '.' fractionPart=INT?
		public Group getGroup() { return cGroup; }
		
		//sign=Sign?
		public Assignment getSignAssignment_0() { return cSignAssignment_0; }
		
		//Sign
		public RuleCall getSignSignParserRuleCall_0_0() { return cSignSignParserRuleCall_0_0; }
		
		//integerPart=INT
		public Assignment getIntegerPartAssignment_1() { return cIntegerPartAssignment_1; }
		
		//INT
		public RuleCall getIntegerPartINTTerminalRuleCall_1_0() { return cIntegerPartINTTerminalRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//fractionPart=INT?
		public Assignment getFractionPartAssignment_3() { return cFractionPartAssignment_3; }
		
		//INT
		public RuleCall getFractionPartINTTerminalRuleCall_3_0() { return cFractionPartINTTerminalRuleCall_3_0; }
	}
	public class SignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Sign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPLUSAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cPLUSPlusSignKeyword_0_0 = (Keyword)cPLUSAssignment_0.eContents().get(0);
		private final Assignment cMINUSAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cMINUSHyphenMinusKeyword_1_0 = (Keyword)cMINUSAssignment_1.eContents().get(0);
		
		//Sign:
		//	PLUS='+' | MINUS='-';
		@Override public ParserRule getRule() { return rule; }
		
		//PLUS='+' | MINUS='-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PLUS='+'
		public Assignment getPLUSAssignment_0() { return cPLUSAssignment_0; }
		
		//'+'
		public Keyword getPLUSPlusSignKeyword_0_0() { return cPLUSPlusSignKeyword_0_0; }
		
		//MINUS='-'
		public Assignment getMINUSAssignment_1() { return cMINUSAssignment_1; }
		
		//'-'
		public Keyword getMINUSHyphenMinusKeyword_1_0() { return cMINUSHyphenMinusKeyword_1_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//// NAMES
		//QualifiedName:
		//	Name ('.' Name)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Name ('.' Name)*
		public Group getGroup() { return cGroup; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//('.' Name)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//Name
		public RuleCall getNameParserRuleCall_1_1() { return cNameParserRuleCall_1_1; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Name");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Name:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	
	private final ContainerElements pContainer;
	private final ImportElements pImport;
	private final QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private final PackageElements pPackage;
	private final PackageMemberElements pPackageMember;
	private final DefinitionElements pDefinition;
	private final ValueTypeDefinitionElements pValueTypeDefinition;
	private final BlockDefinitionElements pBlockDefinition;
	private final PartElements pPart;
	private final MemberElements pMember;
	private final UsageIndexElements pUsageIndex;
	private final MultiplicityElements pMultiplicity;
	private final BoundElements pBound;
	private final UpperBoundElements pUpperBound;
	private final FeatureElements pFeature;
	private final BasicFeatureElements pBasicFeature;
	private final ConnectableFeatureElements pConnectableFeature;
	private final ConnectionDirectionElements pConnectionDirection;
	private final ConnectorElements pConnector;
	private final UnitsElements pUnits;
	private final UnitsProductElements pUnitsProduct;
	private final UnitsExponentElements pUnitsExponent;
	private final ExpressionElements pExpression;
	private final FeatureReferenceExpressionElements pFeatureReferenceExpression;
	private final NumericLiteralElements pNumericLiteral;
	private final IntegerLiteralElements pIntegerLiteral;
	private final RealLiteralElements pRealLiteral;
	private final SignElements pSign;
	private final QualifiedNameElements pQualifiedName;
	private final NameElements pName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SysMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pContainer = new ContainerElements();
		this.pImport = new ImportElements();
		this.pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements();
		this.pPackage = new PackageElements();
		this.pPackageMember = new PackageMemberElements();
		this.pDefinition = new DefinitionElements();
		this.pValueTypeDefinition = new ValueTypeDefinitionElements();
		this.pBlockDefinition = new BlockDefinitionElements();
		this.pPart = new PartElements();
		this.pMember = new MemberElements();
		this.pUsageIndex = new UsageIndexElements();
		this.pMultiplicity = new MultiplicityElements();
		this.pBound = new BoundElements();
		this.pUpperBound = new UpperBoundElements();
		this.pFeature = new FeatureElements();
		this.pBasicFeature = new BasicFeatureElements();
		this.pConnectableFeature = new ConnectableFeatureElements();
		this.pConnectionDirection = new ConnectionDirectionElements();
		this.pConnector = new ConnectorElements();
		this.pUnits = new UnitsElements();
		this.pUnitsProduct = new UnitsProductElements();
		this.pUnitsExponent = new UnitsExponentElements();
		this.pExpression = new ExpressionElements();
		this.pFeatureReferenceExpression = new FeatureReferenceExpressionElements();
		this.pNumericLiteral = new NumericLiteralElements();
		this.pIntegerLiteral = new IntegerLiteralElements();
		this.pRealLiteral = new RealLiteralElements();
		this.pSign = new SignElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pName = new NameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.omg.sysml.xtext.SysML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Containers
	//Container:
	//	Package | Definition;
	public ContainerElements getContainerAccess() {
		return pContainer;
	}
	
	public ParserRule getContainerRule() {
		return getContainerAccess().getRule();
	}
	
	//Import:
	//	'import' importedNamespace=[PackageMember|QualifiedNameWithWildCard] ';';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//QualifiedNameWithWildCard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return pQualifiedNameWithWildCard;
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}
	
	//Package:
	//	^import+=Import*
	//	'package' name=Name '{' member+=PackageMember* '}';
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//PackageMember:
	//	Container | Feature | Part;
	public PackageMemberElements getPackageMemberAccess() {
		return pPackageMember;
	}
	
	public ParserRule getPackageMemberRule() {
		return getPackageMemberAccess().getRule();
	}
	
	//// Definitions
	//Definition:
	//	ValueTypeDefinition | BlockDefinition;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//ValueTypeDefinition:
	//	'valuetype' name=Name (('=' type=[ValueTypeDefinition|QualifiedName] units=Units?)? ';'
	//	| '{' feature+=BasicFeature* '}');
	public ValueTypeDefinitionElements getValueTypeDefinitionAccess() {
		return pValueTypeDefinition;
	}
	
	public ParserRule getValueTypeDefinitionRule() {
		return getValueTypeDefinitionAccess().getRule();
	}
	
	//BlockDefinition:
	//	'block' name=Name (';' | '{' feature+=Feature* '}');
	public BlockDefinitionElements getBlockDefinitionAccess() {
		return pBlockDefinition;
	}
	
	public ParserRule getBlockDefinitionRule() {
		return getBlockDefinitionAccess().getRule();
	}
	
	//// Usages
	//Part:
	//	'part' (name=Name (index=UsageIndex? (':' definition=[Definition|QualifiedName] ('is' base=[Part|QualifiedName])? |
	//	'is' base=[Part|QualifiedName]))? |
	//	'is' base=[Part|QualifiedName]) ('[' multiplicity=Multiplicity ']')? (';' | '{' member+=Member* '}');
	public PartElements getPartAccess() {
		return pPart;
	}
	
	public ParserRule getPartRule() {
		return getPartAccess().getRule();
	}
	
	//Member:
	//	Feature | Part | Connector;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//UsageIndex:
	//	'[' name=Name (':' multiplicity=Multiplicity)? ']';
	public UsageIndexElements getUsageIndexAccess() {
		return pUsageIndex;
	}
	
	public ParserRule getUsageIndexRule() {
		return getUsageIndexAccess().getRule();
	}
	
	//Multiplicity:
	//	(lowerBound=Bound '..')? upperBound=UpperBound;
	public MultiplicityElements getMultiplicityAccess() {
		return pMultiplicity;
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}
	
	//Bound:
	//	value=INT | var=Name;
	public BoundElements getBoundAccess() {
		return pBound;
	}
	
	public ParserRule getBoundRule() {
		return getBoundAccess().getRule();
	}
	
	//UpperBound:
	//	value=INT | var=Name | unbounded?='*';
	public UpperBoundElements getUpperBoundAccess() {
		return pUpperBound;
	}
	
	public ParserRule getUpperBoundRule() {
		return getUpperBoundAccess().getRule();
	}
	
	//// Features
	//Feature:
	//	BasicFeature | ConnectableFeature;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//BasicFeature:
	//	name=Name (index=UsageIndex? ':' definition=[Definition|QualifiedName])? ('[' multiplicity=Multiplicity ']')? ('='
	//	expression=Expression)? ';';
	public BasicFeatureElements getBasicFeatureAccess() {
		return pBasicFeature;
	}
	
	public ParserRule getBasicFeatureRule() {
		return getBasicFeatureAccess().getRule();
	}
	
	//ConnectableFeature:
	//	direction=ConnectionDirection name=Name (index=UsageIndex? ':' definition=[Definition|QualifiedName])? ('['
	//	multiplicity=Multiplicity ']')? ';';
	public ConnectableFeatureElements getConnectableFeatureAccess() {
		return pConnectableFeature;
	}
	
	public ParserRule getConnectableFeatureRule() {
		return getConnectableFeatureAccess().getRule();
	}
	
	//ConnectionDirection:
	//	IN='in' | OUT='out' | INOUT='inout';
	public ConnectionDirectionElements getConnectionDirectionAccess() {
		return pConnectionDirection;
	}
	
	public ParserRule getConnectionDirectionRule() {
		return getConnectionDirectionAccess().getRule();
	}
	
	//// RELATIONSHIPS
	//Connector:
	//	'connector' name=Name?
	//	source=[ConnectableFeature|QualifiedName] '=>'
	//	target=[ConnectableFeature|QualifiedName] ';';
	public ConnectorElements getConnectorAccess() {
		return pConnector;
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}
	
	//// UNITS
	//Units:
	//	numerator=UnitsProduct ('/' denominator=UnitsProduct)?;
	public UnitsElements getUnitsAccess() {
		return pUnits;
	}
	
	public ParserRule getUnitsRule() {
		return getUnitsAccess().getRule();
	}
	
	//UnitsProduct:
	//	factor+=UnitsExponent ('-' factor+=UnitsExponent)*;
	public UnitsProductElements getUnitsProductAccess() {
		return pUnitsProduct;
	}
	
	public ParserRule getUnitsProductRule() {
		return getUnitsProductAccess().getRule();
	}
	
	//UnitsExponent:
	//	unit=ID ('^' exponent=IntegerLiteral)?;
	public UnitsExponentElements getUnitsExponentAccess() {
		return pUnitsExponent;
	}
	
	public ParserRule getUnitsExponentRule() {
		return getUnitsExponentAccess().getRule();
	}
	
	//// EXPRESSIONS
	//Expression:
	//	NumericLiteral | FeatureReferenceExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//FeatureReferenceExpression:
	//	feature=[Feature|QualifiedName];
	public FeatureReferenceExpressionElements getFeatureReferenceExpressionAccess() {
		return pFeatureReferenceExpression;
	}
	
	public ParserRule getFeatureReferenceExpressionRule() {
		return getFeatureReferenceExpressionAccess().getRule();
	}
	
	//NumericLiteral:
	//	(IntegerLiteral | RealLiteral) units=Units?;
	public NumericLiteralElements getNumericLiteralAccess() {
		return pNumericLiteral;
	}
	
	public ParserRule getNumericLiteralRule() {
		return getNumericLiteralAccess().getRule();
	}
	
	//IntegerLiteral:
	//	sign=Sign? value=INT;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return pIntegerLiteral;
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}
	
	//RealLiteral:
	//	sign=Sign? integerPart=INT '.' fractionPart=INT?;
	public RealLiteralElements getRealLiteralAccess() {
		return pRealLiteral;
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}
	
	//Sign:
	//	PLUS='+' | MINUS='-';
	public SignElements getSignAccess() {
		return pSign;
	}
	
	public ParserRule getSignRule() {
		return getSignAccess().getRule();
	}
	
	//// NAMES
	//QualifiedName:
	//	Name ('.' Name)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Name:
	//	ID;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
