/*
 * generated by Xtext 2.20.0
 */
package org.omg.sysml.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SysMLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Unit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnonymousPackageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPackageUnitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeDefinitionUnitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cItemDefinitionUnitParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPartDefinitionUnitParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIndividualDefinitionUnitParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cConnectionDefinitionUnitParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cInterfaceDefinitionUnitParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cActionDefinitionUnitParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cCalculationDefinitionUnitParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cStateDefinitionUnitParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cConstraintDefinitionUnitParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cRequirementDefinitionUnitParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cCaseDefinitionUnitParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cAnalysisCaseDefinitionUnitParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cVerificationCaseDefinitionUnitParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cViewDefinitionUnitParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cViewpointDefinitionUnitParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cRenderingDefinitionUnitParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cAttributeUnitParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cItemUnitParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cPartUnitParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cActionUnitParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cCalculationUnitParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cStateUnitParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cConstraintUnitParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cRequirementUnitParserRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		private final RuleCall cCaseUnitParserRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		private final RuleCall cAnalysisCaseUnitParserRuleCall_28 = (RuleCall)cAlternatives.eContents().get(28);
		private final RuleCall cVerificationCaseUnitParserRuleCall_29 = (RuleCall)cAlternatives.eContents().get(29);
		private final RuleCall cViewUnitParserRuleCall_30 = (RuleCall)cAlternatives.eContents().get(30);
		private final RuleCall cViewpointUnitParserRuleCall_31 = (RuleCall)cAlternatives.eContents().get(31);
		private final RuleCall cRenderingUnitParserRuleCall_32 = (RuleCall)cAlternatives.eContents().get(32);
		
		///* UNITS */ Unit SysML::Package:
		//	AnonymousPackage
		//	| PackageUnit
		//	| AttributeDefinitionUnit
		//	| ItemDefinitionUnit
		//	| PartDefinitionUnit
		//	| IndividualDefinitionUnit
		//	| ConnectionDefinitionUnit
		//	| InterfaceDefinitionUnit
		//	| ActionDefinitionUnit
		//	| CalculationDefinitionUnit
		//	| StateDefinitionUnit
		//	| ConstraintDefinitionUnit
		//	| RequirementDefinitionUnit
		//	| CaseDefinitionUnit
		//	| AnalysisCaseDefinitionUnit
		//	| VerificationCaseDefinitionUnit
		//	| ViewDefinitionUnit
		//	| ViewpointDefinitionUnit
		//	| RenderingDefinitionUnit
		//	| AttributeUnit
		//	| ItemUnit
		//	| PartUnit
		//	| ActionUnit
		//	| CalculationUnit
		//	| StateUnit
		//	| ConstraintUnit
		//	| RequirementUnit
		//	| CaseUnit
		//	| AnalysisCaseUnit
		//	| VerificationCaseUnit
		//	| ViewUnit
		//	| ViewpointUnit
		//	| RenderingUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//AnonymousPackage | PackageUnit | AttributeDefinitionUnit | ItemDefinitionUnit | PartDefinitionUnit |
		//IndividualDefinitionUnit | ConnectionDefinitionUnit | InterfaceDefinitionUnit | ActionDefinitionUnit |
		//CalculationDefinitionUnit | StateDefinitionUnit | ConstraintDefinitionUnit | RequirementDefinitionUnit |
		//CaseDefinitionUnit | AnalysisCaseDefinitionUnit | VerificationCaseDefinitionUnit | ViewDefinitionUnit |
		//ViewpointDefinitionUnit | RenderingDefinitionUnit | AttributeUnit | ItemUnit | PartUnit | ActionUnit | CalculationUnit
		//| StateUnit | ConstraintUnit | RequirementUnit | CaseUnit | AnalysisCaseUnit | VerificationCaseUnit | ViewUnit |
		//ViewpointUnit | RenderingUnit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AnonymousPackage
		public RuleCall getAnonymousPackageParserRuleCall_0() { return cAnonymousPackageParserRuleCall_0; }
		
		//PackageUnit
		public RuleCall getPackageUnitParserRuleCall_1() { return cPackageUnitParserRuleCall_1; }
		
		//AttributeDefinitionUnit
		public RuleCall getAttributeDefinitionUnitParserRuleCall_2() { return cAttributeDefinitionUnitParserRuleCall_2; }
		
		//ItemDefinitionUnit
		public RuleCall getItemDefinitionUnitParserRuleCall_3() { return cItemDefinitionUnitParserRuleCall_3; }
		
		//PartDefinitionUnit
		public RuleCall getPartDefinitionUnitParserRuleCall_4() { return cPartDefinitionUnitParserRuleCall_4; }
		
		//IndividualDefinitionUnit
		public RuleCall getIndividualDefinitionUnitParserRuleCall_5() { return cIndividualDefinitionUnitParserRuleCall_5; }
		
		//ConnectionDefinitionUnit
		public RuleCall getConnectionDefinitionUnitParserRuleCall_6() { return cConnectionDefinitionUnitParserRuleCall_6; }
		
		//InterfaceDefinitionUnit
		public RuleCall getInterfaceDefinitionUnitParserRuleCall_7() { return cInterfaceDefinitionUnitParserRuleCall_7; }
		
		//ActionDefinitionUnit
		public RuleCall getActionDefinitionUnitParserRuleCall_8() { return cActionDefinitionUnitParserRuleCall_8; }
		
		//CalculationDefinitionUnit
		public RuleCall getCalculationDefinitionUnitParserRuleCall_9() { return cCalculationDefinitionUnitParserRuleCall_9; }
		
		//StateDefinitionUnit
		public RuleCall getStateDefinitionUnitParserRuleCall_10() { return cStateDefinitionUnitParserRuleCall_10; }
		
		//ConstraintDefinitionUnit
		public RuleCall getConstraintDefinitionUnitParserRuleCall_11() { return cConstraintDefinitionUnitParserRuleCall_11; }
		
		//RequirementDefinitionUnit
		public RuleCall getRequirementDefinitionUnitParserRuleCall_12() { return cRequirementDefinitionUnitParserRuleCall_12; }
		
		//CaseDefinitionUnit
		public RuleCall getCaseDefinitionUnitParserRuleCall_13() { return cCaseDefinitionUnitParserRuleCall_13; }
		
		//AnalysisCaseDefinitionUnit
		public RuleCall getAnalysisCaseDefinitionUnitParserRuleCall_14() { return cAnalysisCaseDefinitionUnitParserRuleCall_14; }
		
		//VerificationCaseDefinitionUnit
		public RuleCall getVerificationCaseDefinitionUnitParserRuleCall_15() { return cVerificationCaseDefinitionUnitParserRuleCall_15; }
		
		//ViewDefinitionUnit
		public RuleCall getViewDefinitionUnitParserRuleCall_16() { return cViewDefinitionUnitParserRuleCall_16; }
		
		//ViewpointDefinitionUnit
		public RuleCall getViewpointDefinitionUnitParserRuleCall_17() { return cViewpointDefinitionUnitParserRuleCall_17; }
		
		//RenderingDefinitionUnit
		public RuleCall getRenderingDefinitionUnitParserRuleCall_18() { return cRenderingDefinitionUnitParserRuleCall_18; }
		
		//AttributeUnit
		public RuleCall getAttributeUnitParserRuleCall_19() { return cAttributeUnitParserRuleCall_19; }
		
		//ItemUnit
		public RuleCall getItemUnitParserRuleCall_20() { return cItemUnitParserRuleCall_20; }
		
		//PartUnit
		public RuleCall getPartUnitParserRuleCall_21() { return cPartUnitParserRuleCall_21; }
		
		//ActionUnit
		public RuleCall getActionUnitParserRuleCall_22() { return cActionUnitParserRuleCall_22; }
		
		//CalculationUnit
		public RuleCall getCalculationUnitParserRuleCall_23() { return cCalculationUnitParserRuleCall_23; }
		
		//StateUnit
		public RuleCall getStateUnitParserRuleCall_24() { return cStateUnitParserRuleCall_24; }
		
		//ConstraintUnit
		public RuleCall getConstraintUnitParserRuleCall_25() { return cConstraintUnitParserRuleCall_25; }
		
		//RequirementUnit
		public RuleCall getRequirementUnitParserRuleCall_26() { return cRequirementUnitParserRuleCall_26; }
		
		//CaseUnit
		public RuleCall getCaseUnitParserRuleCall_27() { return cCaseUnitParserRuleCall_27; }
		
		//AnalysisCaseUnit
		public RuleCall getAnalysisCaseUnitParserRuleCall_28() { return cAnalysisCaseUnitParserRuleCall_28; }
		
		//VerificationCaseUnit
		public RuleCall getVerificationCaseUnitParserRuleCall_29() { return cVerificationCaseUnitParserRuleCall_29; }
		
		//ViewUnit
		public RuleCall getViewUnitParserRuleCall_30() { return cViewUnitParserRuleCall_30; }
		
		//ViewpointUnit
		public RuleCall getViewpointUnitParserRuleCall_31() { return cViewpointUnitParserRuleCall_31; }
		
		//RenderingUnit
		public RuleCall getRenderingUnitParserRuleCall_32() { return cRenderingUnitParserRuleCall_32; }
	}
	public class AnonymousPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AnonymousPackage");
		private final RuleCall cPackageBodyParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnonymousPackage SysML::Package:
		//	PackageBody;
		@Override public ParserRule getRule() { return rule; }
		
		//PackageBody
		public RuleCall getPackageBodyParserRuleCall() { return cPackageBodyParserRuleCall; }
	}
	public class PackageUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PackageUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPackageDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPackageBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//PackageUnit SysML::Package:
		//	UnitPrefix PackageDeclaration PackageBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix PackageDeclaration PackageBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//PackageDeclaration
		public RuleCall getPackageDeclarationParserRuleCall_1() { return cPackageDeclarationParserRuleCall_1; }
		
		//PackageBody
		public RuleCall getPackageBodyParserRuleCall_2() { return cPackageBodyParserRuleCall_2; }
	}
	public class AttributeDefinitionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AttributeDefinitionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAttributeDefDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cDefinitionBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//AttributeDefinitionUnit SysML::AttributeDefinition:
		//	UnitPrefix AttributeDefDeclaration DefinitionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix AttributeDefDeclaration DefinitionBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//AttributeDefDeclaration
		public RuleCall getAttributeDefDeclarationParserRuleCall_1() { return cAttributeDefDeclarationParserRuleCall_1; }
		
		//DefinitionBody
		public RuleCall getDefinitionBodyParserRuleCall_2() { return cDefinitionBodyParserRuleCall_2; }
	}
	public class ItemDefinitionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ItemDefinitionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cItemDefDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cDefinitionBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ItemDefinitionUnit SysML::ItemDefinition:
		//	UnitPrefix ItemDefDeclaration DefinitionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix ItemDefDeclaration DefinitionBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//ItemDefDeclaration
		public RuleCall getItemDefDeclarationParserRuleCall_1() { return cItemDefDeclarationParserRuleCall_1; }
		
		//DefinitionBody
		public RuleCall getDefinitionBodyParserRuleCall_2() { return cDefinitionBodyParserRuleCall_2; }
	}
	public class PartDefinitionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PartDefinitionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPartDefDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cDefinitionBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//PartDefinitionUnit SysML::PartDefinition:
		//	UnitPrefix PartDefDeclaration DefinitionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix PartDefDeclaration DefinitionBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//PartDefDeclaration
		public RuleCall getPartDefDeclarationParserRuleCall_1() { return cPartDefDeclarationParserRuleCall_1; }
		
		//DefinitionBody
		public RuleCall getDefinitionBodyParserRuleCall_2() { return cDefinitionBodyParserRuleCall_2; }
	}
	public class IndividualDefinitionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.IndividualDefinitionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIndividualDefDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cDefinitionBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//IndividualDefinitionUnit SysML::IndividualDefinition:
		//	UnitPrefix IndividualDefDeclaration DefinitionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix IndividualDefDeclaration DefinitionBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//IndividualDefDeclaration
		public RuleCall getIndividualDefDeclarationParserRuleCall_1() { return cIndividualDefDeclarationParserRuleCall_1; }
		
		//DefinitionBody
		public RuleCall getDefinitionBodyParserRuleCall_2() { return cDefinitionBodyParserRuleCall_2; }
	}
	public class ConnectionDefinitionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConnectionDefinitionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cConnectionDefDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cConnectionDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ConnectionDefinitionUnit SysML::ConnectionDefinition:
		//	UnitPrefix ConnectionDefDeclaration ConnectionDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix ConnectionDefDeclaration ConnectionDefBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//ConnectionDefDeclaration
		public RuleCall getConnectionDefDeclarationParserRuleCall_1() { return cConnectionDefDeclarationParserRuleCall_1; }
		
		//ConnectionDefBody
		public RuleCall getConnectionDefBodyParserRuleCall_2() { return cConnectionDefBodyParserRuleCall_2; }
	}
	public class InterfaceDefinitionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.InterfaceDefinitionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cInterfaceDefDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cInterfaceDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//InterfaceDefinitionUnit SysML::InterfaceDefinition:
		//	UnitPrefix InterfaceDefDeclaration InterfaceDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix InterfaceDefDeclaration InterfaceDefBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//InterfaceDefDeclaration
		public RuleCall getInterfaceDefDeclarationParserRuleCall_1() { return cInterfaceDefDeclarationParserRuleCall_1; }
		
		//InterfaceDefBody
		public RuleCall getInterfaceDefBodyParserRuleCall_2() { return cInterfaceDefBodyParserRuleCall_2; }
	}
	public class ActionDefinitionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ActionDefinitionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cActionDefDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cActionDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ActionDefinitionUnit SysML::ActionDefinition:
		//	UnitPrefix ActionDefDeclaration ActionDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix ActionDefDeclaration ActionDefBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//ActionDefDeclaration
		public RuleCall getActionDefDeclarationParserRuleCall_1() { return cActionDefDeclarationParserRuleCall_1; }
		
		//ActionDefBody
		public RuleCall getActionDefBodyParserRuleCall_2() { return cActionDefBodyParserRuleCall_2; }
	}
	public class CalculationDefinitionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CalculationDefinitionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCalculationDefDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cCalculationDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//CalculationDefinitionUnit SysML::CalculationDefinition:
		//	UnitPrefix CalculationDefDeclaration CalculationDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix CalculationDefDeclaration CalculationDefBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//CalculationDefDeclaration
		public RuleCall getCalculationDefDeclarationParserRuleCall_1() { return cCalculationDefDeclarationParserRuleCall_1; }
		
		//CalculationDefBody
		public RuleCall getCalculationDefBodyParserRuleCall_2() { return cCalculationDefBodyParserRuleCall_2; }
	}
	public class StateDefinitionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.StateDefinitionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cStateDefDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cStateDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//StateDefinitionUnit SysML::StateDefinition:
		//	UnitPrefix StateDefDeclaration StateDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix StateDefDeclaration StateDefBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//StateDefDeclaration
		public RuleCall getStateDefDeclarationParserRuleCall_1() { return cStateDefDeclarationParserRuleCall_1; }
		
		//StateDefBody
		public RuleCall getStateDefBodyParserRuleCall_2() { return cStateDefBodyParserRuleCall_2; }
	}
	public class ConstraintDefinitionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConstraintDefinitionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cConstraintDefDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cConstraintDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ConstraintDefinitionUnit SysML::ConstraintDefinition:
		//	UnitPrefix ConstraintDefDeclaration ConstraintDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix ConstraintDefDeclaration ConstraintDefBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//ConstraintDefDeclaration
		public RuleCall getConstraintDefDeclarationParserRuleCall_1() { return cConstraintDefDeclarationParserRuleCall_1; }
		
		//ConstraintDefBody
		public RuleCall getConstraintDefBodyParserRuleCall_2() { return cConstraintDefBodyParserRuleCall_2; }
	}
	public class RequirementDefinitionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RequirementDefinitionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRequirementDefDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cRequirementDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//RequirementDefinitionUnit SysML::RequirementDefinition:
		//	UnitPrefix RequirementDefDeclaration RequirementDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix RequirementDefDeclaration RequirementDefBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//RequirementDefDeclaration
		public RuleCall getRequirementDefDeclarationParserRuleCall_1() { return cRequirementDefDeclarationParserRuleCall_1; }
		
		//RequirementDefBody
		public RuleCall getRequirementDefBodyParserRuleCall_2() { return cRequirementDefBodyParserRuleCall_2; }
	}
	public class CaseDefinitionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CaseDefinitionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCaseDefDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cCaseDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//CaseDefinitionUnit SysML::CaseDefinition:
		//	UnitPrefix CaseDefDeclaration CaseDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix CaseDefDeclaration CaseDefBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//CaseDefDeclaration
		public RuleCall getCaseDefDeclarationParserRuleCall_1() { return cCaseDefDeclarationParserRuleCall_1; }
		
		//CaseDefBody
		public RuleCall getCaseDefBodyParserRuleCall_2() { return cCaseDefBodyParserRuleCall_2; }
	}
	public class AnalysisCaseDefinitionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AnalysisCaseDefinitionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAnalysisCaseDefDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cCaseDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//AnalysisCaseDefinitionUnit SysML::AnalysisCaseDefinition:
		//	UnitPrefix AnalysisCaseDefDeclaration CaseDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix AnalysisCaseDefDeclaration CaseDefBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//AnalysisCaseDefDeclaration
		public RuleCall getAnalysisCaseDefDeclarationParserRuleCall_1() { return cAnalysisCaseDefDeclarationParserRuleCall_1; }
		
		//CaseDefBody
		public RuleCall getCaseDefBodyParserRuleCall_2() { return cCaseDefBodyParserRuleCall_2; }
	}
	public class VerificationCaseDefinitionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.VerificationCaseDefinitionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cVerificationCaseDefDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cCaseDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//VerificationCaseDefinitionUnit SysML::VerificationCaseDefinition:
		//	UnitPrefix VerificationCaseDefDeclaration CaseDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix VerificationCaseDefDeclaration CaseDefBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//VerificationCaseDefDeclaration
		public RuleCall getVerificationCaseDefDeclarationParserRuleCall_1() { return cVerificationCaseDefDeclarationParserRuleCall_1; }
		
		//CaseDefBody
		public RuleCall getCaseDefBodyParserRuleCall_2() { return cCaseDefBodyParserRuleCall_2; }
	}
	public class ViewDefinitionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewDefinitionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cViewDefDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cDefinitionBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ViewDefinitionUnit SysML::ViewDefinition:
		//	UnitPrefix ViewDefDeclaration DefinitionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix ViewDefDeclaration DefinitionBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//ViewDefDeclaration
		public RuleCall getViewDefDeclarationParserRuleCall_1() { return cViewDefDeclarationParserRuleCall_1; }
		
		//DefinitionBody
		public RuleCall getDefinitionBodyParserRuleCall_2() { return cDefinitionBodyParserRuleCall_2; }
	}
	public class ViewpointDefinitionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewpointDefinitionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cViewpointDefDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cRequirementDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ViewpointDefinitionUnit SysML::ViewpointDefinition:
		//	UnitPrefix ViewpointDefDeclaration RequirementDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix ViewpointDefDeclaration RequirementDefBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//ViewpointDefDeclaration
		public RuleCall getViewpointDefDeclarationParserRuleCall_1() { return cViewpointDefDeclarationParserRuleCall_1; }
		
		//RequirementDefBody
		public RuleCall getRequirementDefBodyParserRuleCall_2() { return cRequirementDefBodyParserRuleCall_2; }
	}
	public class RenderingDefinitionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RenderingDefinitionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRenderingDefDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cDefinitionBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//RenderingDefinitionUnit SysML::RenderingDefinition:
		//	UnitPrefix RenderingDefDeclaration DefinitionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix RenderingDefDeclaration DefinitionBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//RenderingDefDeclaration
		public RuleCall getRenderingDefDeclarationParserRuleCall_1() { return cRenderingDefDeclarationParserRuleCall_1; }
		
		//DefinitionBody
		public RuleCall getDefinitionBodyParserRuleCall_2() { return cDefinitionBodyParserRuleCall_2; }
	}
	public class AttributeUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AttributeUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAttributeDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageCompletionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//AttributeUnit SysML::AttributeUsage:
		//	UnitPrefix AttributeDeclaration UsageCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix AttributeDeclaration UsageCompletion
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//AttributeDeclaration
		public RuleCall getAttributeDeclarationParserRuleCall_1() { return cAttributeDeclarationParserRuleCall_1; }
		
		//UsageCompletion
		public RuleCall getUsageCompletionParserRuleCall_2() { return cUsageCompletionParserRuleCall_2; }
	}
	public class ItemUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ItemUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cItemDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageCompletionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ItemUnit SysML::ItemUsage:
		//	UnitPrefix ItemDeclaration UsageCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix ItemDeclaration UsageCompletion
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//ItemDeclaration
		public RuleCall getItemDeclarationParserRuleCall_1() { return cItemDeclarationParserRuleCall_1; }
		
		//UsageCompletion
		public RuleCall getUsageCompletionParserRuleCall_2() { return cUsageCompletionParserRuleCall_2; }
	}
	public class PartUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PartUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPartDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageCompletionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//PartUnit SysML::PartUsage:
		//	UnitPrefix PartDeclaration UsageCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix PartDeclaration UsageCompletion
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//PartDeclaration
		public RuleCall getPartDeclarationParserRuleCall_1() { return cPartDeclarationParserRuleCall_1; }
		
		//UsageCompletion
		public RuleCall getUsageCompletionParserRuleCall_2() { return cUsageCompletionParserRuleCall_2; }
	}
	public class ActionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ActionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cActionDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cActionDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ActionUnit SysML::ActionUsage:
		//	UnitPrefix ActionDeclaration ActionDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix ActionDeclaration ActionDefBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//ActionDeclaration
		public RuleCall getActionDeclarationParserRuleCall_1() { return cActionDeclarationParserRuleCall_1; }
		
		//ActionDefBody
		public RuleCall getActionDefBodyParserRuleCall_2() { return cActionDefBodyParserRuleCall_2; }
	}
	public class CalculationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CalculationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCalculationDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cCalculationDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//CalculationUnit SysML::CalculationUsage:
		//	UnitPrefix CalculationDeclaration CalculationDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix CalculationDeclaration CalculationDefBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//CalculationDeclaration
		public RuleCall getCalculationDeclarationParserRuleCall_1() { return cCalculationDeclarationParserRuleCall_1; }
		
		//CalculationDefBody
		public RuleCall getCalculationDefBodyParserRuleCall_2() { return cCalculationDefBodyParserRuleCall_2; }
	}
	public class StateUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.StateUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cStateDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cStateDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//StateUnit SysML::StateUsage:
		//	UnitPrefix StateDeclaration StateDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix StateDeclaration StateDefBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//StateDeclaration
		public RuleCall getStateDeclarationParserRuleCall_1() { return cStateDeclarationParserRuleCall_1; }
		
		//StateDefBody
		public RuleCall getStateDefBodyParserRuleCall_2() { return cStateDefBodyParserRuleCall_2; }
	}
	public class ConstraintUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConstraintUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cConstraintDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cConstraintDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ConstraintUnit SysML::ConstraintUsage:
		//	UnitPrefix ConstraintDeclaration ConstraintDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix ConstraintDeclaration ConstraintDefBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//ConstraintDeclaration
		public RuleCall getConstraintDeclarationParserRuleCall_1() { return cConstraintDeclarationParserRuleCall_1; }
		
		//ConstraintDefBody
		public RuleCall getConstraintDefBodyParserRuleCall_2() { return cConstraintDefBodyParserRuleCall_2; }
	}
	public class RequirementUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RequirementUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRequirementDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cRequirementDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//RequirementUnit SysML::RequirementUsage:
		//	UnitPrefix RequirementDeclaration RequirementDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix RequirementDeclaration RequirementDefBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//RequirementDeclaration
		public RuleCall getRequirementDeclarationParserRuleCall_1() { return cRequirementDeclarationParserRuleCall_1; }
		
		//RequirementDefBody
		public RuleCall getRequirementDefBodyParserRuleCall_2() { return cRequirementDefBodyParserRuleCall_2; }
	}
	public class CaseUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CaseUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCaseDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cCaseDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//CaseUnit SysML::CaseUsage:
		//	UnitPrefix CaseDeclaration CaseDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix CaseDeclaration CaseDefBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//CaseDeclaration
		public RuleCall getCaseDeclarationParserRuleCall_1() { return cCaseDeclarationParserRuleCall_1; }
		
		//CaseDefBody
		public RuleCall getCaseDefBodyParserRuleCall_2() { return cCaseDefBodyParserRuleCall_2; }
	}
	public class AnalysisCaseUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AnalysisCaseUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAnalysisCaseDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cCaseDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//AnalysisCaseUnit SysML::AnalysisCaseUsage:
		//	UnitPrefix AnalysisCaseDeclaration CaseDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix AnalysisCaseDeclaration CaseDefBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//AnalysisCaseDeclaration
		public RuleCall getAnalysisCaseDeclarationParserRuleCall_1() { return cAnalysisCaseDeclarationParserRuleCall_1; }
		
		//CaseDefBody
		public RuleCall getCaseDefBodyParserRuleCall_2() { return cCaseDefBodyParserRuleCall_2; }
	}
	public class VerificationCaseUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.VerificationCaseUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cVerificationCaseDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cCaseDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//VerificationCaseUnit SysML::VerificationCaseUsage:
		//	UnitPrefix VerificationCaseDeclaration CaseDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix VerificationCaseDeclaration CaseDefBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//VerificationCaseDeclaration
		public RuleCall getVerificationCaseDeclarationParserRuleCall_1() { return cVerificationCaseDeclarationParserRuleCall_1; }
		
		//CaseDefBody
		public RuleCall getCaseDefBodyParserRuleCall_2() { return cCaseDefBodyParserRuleCall_2; }
	}
	public class ViewUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cViewDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cValuePartParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cViewBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ViewUnit SysML::ViewUsage:
		//	UnitPrefix ViewDeclaration ValuePart? ViewBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix ViewDeclaration ValuePart? ViewBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//ViewDeclaration
		public RuleCall getViewDeclarationParserRuleCall_1() { return cViewDeclarationParserRuleCall_1; }
		
		//ValuePart?
		public RuleCall getValuePartParserRuleCall_2() { return cValuePartParserRuleCall_2; }
		
		//ViewBody
		public RuleCall getViewBodyParserRuleCall_3() { return cViewBodyParserRuleCall_3; }
	}
	public class ViewpointUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewpointUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cViewpointDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cRequirementDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ViewpointUnit SysML::ViewpointUsage:
		//	UnitPrefix ViewpointDeclaration RequirementDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix ViewpointDeclaration RequirementDefBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//ViewpointDeclaration
		public RuleCall getViewpointDeclarationParserRuleCall_1() { return cViewpointDeclarationParserRuleCall_1; }
		
		//RequirementDefBody
		public RuleCall getRequirementDefBodyParserRuleCall_2() { return cRequirementDefBodyParserRuleCall_2; }
	}
	public class RenderingUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RenderingUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRenderingDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageCompletionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//RenderingUnit SysML::RenderingUsage:
		//	UnitPrefix RenderingDeclaration UsageCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix RenderingDeclaration UsageCompletion
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//RenderingDeclaration
		public RuleCall getRenderingDeclarationParserRuleCall_1() { return cRenderingDeclarationParserRuleCall_1; }
		
		//UsageCompletion
		public RuleCall getUsageCompletionParserRuleCall_2() { return cUsageCompletionParserRuleCall_2; }
	}
	public class UnitPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.UnitPrefix");
		private final Assignment cOwnedRelationship_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationship_compPrefixAnnotationParserRuleCall_0 = (RuleCall)cOwnedRelationship_compAssignment.eContents().get(0);
		
		//fragment UnitPrefix returns SysML::Package:
		//	ownedRelationship_comp+=PrefixAnnotation*;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=PrefixAnnotation*
		public Assignment getOwnedRelationship_compAssignment() { return cOwnedRelationship_compAssignment; }
		
		//PrefixAnnotation
		public RuleCall getOwnedRelationship_compPrefixAnnotationParserRuleCall_0() { return cOwnedRelationship_compPrefixAnnotationParserRuleCall_0; }
	}
	public class IdentificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Identification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cIdKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cHumanIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cHumanIdNameParserRuleCall_0_1_0 = (RuleCall)cHumanIdAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		///* IDENTIFICATION */ fragment Identification returns SysML::Element:
		//	('id' humanId=Name)? name=Name;
		@Override public ParserRule getRule() { return rule; }
		
		//('id' humanId=Name)? name=Name
		public Group getGroup() { return cGroup; }
		
		//('id' humanId=Name)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'id'
		public Keyword getIdKeyword_0_0() { return cIdKeyword_0_0; }
		
		//humanId=Name
		public Assignment getHumanIdAssignment_0_1() { return cHumanIdAssignment_0_1; }
		
		//Name
		public RuleCall getHumanIdNameParserRuleCall_0_1_0() { return cHumanIdNameParserRuleCall_0_1_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnnotationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAboutKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAnnotatedElementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cAnnotatedElementElementCrossReference_1_1_0 = (CrossReference)cAnnotatedElementAssignment_1_1.eContents().get(0);
		private final RuleCall cAnnotatedElementElementQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cAnnotatedElementElementCrossReference_1_1_0.eContents().get(1);
		
		///* ANNOTATIONS */ Annotation SysML::Annotation:
		//	{SysML::Annotation} ('about' annotatedElement=[SysML::Element|QualifiedName])?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::Annotation} ('about' annotatedElement=[SysML::Element|QualifiedName])?
		public Group getGroup() { return cGroup; }
		
		//{SysML::Annotation}
		public Action getAnnotationAction_0() { return cAnnotationAction_0; }
		
		//('about' annotatedElement=[SysML::Element|QualifiedName])?
		public Group getGroup_1() { return cGroup_1; }
		
		//'about'
		public Keyword getAboutKeyword_1_0() { return cAboutKeyword_1_0; }
		
		//annotatedElement=[SysML::Element|QualifiedName]
		public Assignment getAnnotatedElementAssignment_1_1() { return cAnnotatedElementAssignment_1_1; }
		
		//[SysML::Element|QualifiedName]
		public CrossReference getAnnotatedElementElementCrossReference_1_1_0() { return cAnnotatedElementElementCrossReference_1_1_0; }
		
		//QualifiedName
		public RuleCall getAnnotatedElementElementQualifiedNameParserRuleCall_1_1_0_1() { return cAnnotatedElementElementQualifiedNameParserRuleCall_1_1_0_1; }
	}
	public class EmptyAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EmptyAnnotation");
		private final Action cAnnotationAction = (Action)rule.eContents().get(1);
		
		//EmptyAnnotation SysML::Annotation:
		//	{SysML::Annotation};
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::Annotation}
		public Action getAnnotationAction() { return cAnnotationAction; }
	}
	public class PrefixAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PrefixAnnotation");
		private final Assignment cOwnedRelatedElement_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElement_compDocumentationParserRuleCall_0 = (RuleCall)cOwnedRelatedElement_compAssignment.eContents().get(0);
		
		//PrefixAnnotation SysML::Annotation:
		//	ownedRelatedElement_comp+=Documentation;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement_comp+=Documentation
		public Assignment getOwnedRelatedElement_compAssignment() { return cOwnedRelatedElement_compAssignment; }
		
		//Documentation
		public RuleCall getOwnedRelatedElement_compDocumentationParserRuleCall_0() { return cOwnedRelatedElement_compDocumentationParserRuleCall_0; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cCommentKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cOwnedRelationship_compAnnotationParserRuleCall_0_0_2_0 = (RuleCall)cOwnedRelationship_compAssignment_0_0_2.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cOwnedRelationship_compEmptyAnnotationParserRuleCall_0_1_0 = (RuleCall)cOwnedRelationship_compAssignment_0_1.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyML_COMMENTTerminalRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		///* COMMENTS */ Comment SysML::Comment:
		//	('comment' Identification? ownedRelationship_comp+=Annotation
		//	| ownedRelationship_comp+=EmptyAnnotation) body=ML_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//('comment' Identification? ownedRelationship_comp+=Annotation | ownedRelationship_comp+=EmptyAnnotation) body=ML_COMMENT
		public Group getGroup() { return cGroup; }
		
		//('comment' Identification? ownedRelationship_comp+=Annotation | ownedRelationship_comp+=EmptyAnnotation)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'comment' Identification? ownedRelationship_comp+=Annotation
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'comment'
		public Keyword getCommentKeyword_0_0_0() { return cCommentKeyword_0_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_0_1() { return cIdentificationParserRuleCall_0_0_1; }
		
		//ownedRelationship_comp+=Annotation
		public Assignment getOwnedRelationship_compAssignment_0_0_2() { return cOwnedRelationship_compAssignment_0_0_2; }
		
		//Annotation
		public RuleCall getOwnedRelationship_compAnnotationParserRuleCall_0_0_2_0() { return cOwnedRelationship_compAnnotationParserRuleCall_0_0_2_0; }
		
		//ownedRelationship_comp+=EmptyAnnotation
		public Assignment getOwnedRelationship_compAssignment_0_1() { return cOwnedRelationship_compAssignment_0_1; }
		
		//EmptyAnnotation
		public RuleCall getOwnedRelationship_compEmptyAnnotationParserRuleCall_0_1_0() { return cOwnedRelationship_compEmptyAnnotationParserRuleCall_0_1_0; }
		
		//body=ML_COMMENT
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//ML_COMMENT
		public RuleCall getBodyML_COMMENTTerminalRuleCall_1_0() { return cBodyML_COMMENTTerminalRuleCall_1_0; }
	}
	public class DocumentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Documentation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cDocKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cIdKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cHumanIdAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cHumanIdNameParserRuleCall_0_1_1_0 = (RuleCall)cHumanIdAssignment_0_1_1.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyDOCUMENTATION_COMMENTTerminalRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		///* DOCUMENTATION */ Documentation SysML::Comment:
		//	('doc' ('id' humanId=Name)?)? body=DOCUMENTATION_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//('doc' ('id' humanId=Name)?)? body=DOCUMENTATION_COMMENT
		public Group getGroup() { return cGroup; }
		
		//('doc' ('id' humanId=Name)?)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'doc'
		public Keyword getDocKeyword_0_0() { return cDocKeyword_0_0; }
		
		//('id' humanId=Name)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'id'
		public Keyword getIdKeyword_0_1_0() { return cIdKeyword_0_1_0; }
		
		//humanId=Name
		public Assignment getHumanIdAssignment_0_1_1() { return cHumanIdAssignment_0_1_1; }
		
		//Name
		public RuleCall getHumanIdNameParserRuleCall_0_1_1_0() { return cHumanIdNameParserRuleCall_0_1_1_0; }
		
		//body=DOCUMENTATION_COMMENT
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//DOCUMENTATION_COMMENT
		public RuleCall getBodyDOCUMENTATION_COMMENTTerminalRuleCall_1_0() { return cBodyDOCUMENTATION_COMMENTTerminalRuleCall_1_0; }
	}
	public class OwnedDocumentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.OwnedDocumentation");
		private final Assignment cDocumentingComment_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDocumentingComment_compDocumentationCommentParserRuleCall_0 = (RuleCall)cDocumentingComment_compAssignment.eContents().get(0);
		
		//OwnedDocumentation SysML::Documentation:
		//	documentingComment_comp=DocumentationComment;
		@Override public ParserRule getRule() { return rule; }
		
		//documentingComment_comp=DocumentationComment
		public Assignment getDocumentingComment_compAssignment() { return cDocumentingComment_compAssignment; }
		
		//DocumentationComment
		public RuleCall getDocumentingComment_compDocumentationCommentParserRuleCall_0() { return cDocumentingComment_compDocumentationCommentParserRuleCall_0; }
	}
	public class DocumentationCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.DocumentationComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDocKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIdKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cHumanIdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cHumanIdNameParserRuleCall_1_1_0 = (RuleCall)cHumanIdAssignment_1_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyML_COMMENTTerminalRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//DocumentationComment SysML::Comment:
		//	'doc' ('id' humanId=Name)? body=ML_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//'doc' ('id' humanId=Name)? body=ML_COMMENT
		public Group getGroup() { return cGroup; }
		
		//'doc'
		public Keyword getDocKeyword_0() { return cDocKeyword_0; }
		
		//('id' humanId=Name)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'id'
		public Keyword getIdKeyword_1_0() { return cIdKeyword_1_0; }
		
		//humanId=Name
		public Assignment getHumanIdAssignment_1_1() { return cHumanIdAssignment_1_1; }
		
		//Name
		public RuleCall getHumanIdNameParserRuleCall_1_1_0() { return cHumanIdNameParserRuleCall_1_1_0; }
		
		//body=ML_COMMENT
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//ML_COMMENT
		public RuleCall getBodyML_COMMENTTerminalRuleCall_2_0() { return cBodyML_COMMENTTerminalRuleCall_2_0; }
	}
	public class TextualRepresentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TextualRepresentation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cRepKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cOwnedRelationship_compAnnotationParserRuleCall_0_0_2_0 = (RuleCall)cOwnedRelationship_compAssignment_0_0_2.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cOwnedRelationship_compEmptyAnnotationParserRuleCall_0_1_0 = (RuleCall)cOwnedRelationship_compAssignment_0_1.eContents().get(0);
		private final Keyword cLanguageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLanguageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLanguageSTRING_VALUETerminalRuleCall_2_0 = (RuleCall)cLanguageAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyML_COMMENTTerminalRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		///* TEXTUAL REPRESENTATION */ TextualRepresentation SysML::TextualRepresentation:
		//	('rep' Identification? ownedRelationship_comp+=Annotation
		//	| ownedRelationship_comp+=EmptyAnnotation)
		//	'language' language=STRING_VALUE
		//	body=ML_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//('rep' Identification? ownedRelationship_comp+=Annotation | ownedRelationship_comp+=EmptyAnnotation) 'language'
		//language=STRING_VALUE body=ML_COMMENT
		public Group getGroup() { return cGroup; }
		
		//('rep' Identification? ownedRelationship_comp+=Annotation | ownedRelationship_comp+=EmptyAnnotation)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'rep' Identification? ownedRelationship_comp+=Annotation
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'rep'
		public Keyword getRepKeyword_0_0_0() { return cRepKeyword_0_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_0_1() { return cIdentificationParserRuleCall_0_0_1; }
		
		//ownedRelationship_comp+=Annotation
		public Assignment getOwnedRelationship_compAssignment_0_0_2() { return cOwnedRelationship_compAssignment_0_0_2; }
		
		//Annotation
		public RuleCall getOwnedRelationship_compAnnotationParserRuleCall_0_0_2_0() { return cOwnedRelationship_compAnnotationParserRuleCall_0_0_2_0; }
		
		//ownedRelationship_comp+=EmptyAnnotation
		public Assignment getOwnedRelationship_compAssignment_0_1() { return cOwnedRelationship_compAssignment_0_1; }
		
		//EmptyAnnotation
		public RuleCall getOwnedRelationship_compEmptyAnnotationParserRuleCall_0_1_0() { return cOwnedRelationship_compEmptyAnnotationParserRuleCall_0_1_0; }
		
		//'language'
		public Keyword getLanguageKeyword_1() { return cLanguageKeyword_1; }
		
		//language=STRING_VALUE
		public Assignment getLanguageAssignment_2() { return cLanguageAssignment_2; }
		
		//STRING_VALUE
		public RuleCall getLanguageSTRING_VALUETerminalRuleCall_2_0() { return cLanguageSTRING_VALUETerminalRuleCall_2_0; }
		
		//body=ML_COMMENT
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//ML_COMMENT
		public RuleCall getBodyML_COMMENTTerminalRuleCall_3_0() { return cBodyML_COMMENTTerminalRuleCall_3_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationship_compPrefixAnnotationParserRuleCall_0_0 = (RuleCall)cOwnedRelationship_compAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityPackageElementVisibilityIndicatorEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Keyword cImportKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cImportedPackageAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final CrossReference cImportedPackagePackageCrossReference_3_0_0_0 = (CrossReference)cImportedPackageAssignment_3_0_0.eContents().get(0);
		private final RuleCall cImportedPackagePackageNameParserRuleCall_3_0_0_0_1 = (RuleCall)cImportedPackagePackageCrossReference_3_0_0_0.eContents().get(1);
		private final Alternatives cAlternatives_3_0_1 = (Alternatives)cGroup_3_0.eContents().get(1);
		private final Keyword cColonColonKeyword_3_0_1_0 = (Keyword)cAlternatives_3_0_1.eContents().get(0);
		private final Keyword cFullStopKeyword_3_0_1_1 = (Keyword)cAlternatives_3_0_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cImportedPackageAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final CrossReference cImportedPackagePackageCrossReference_3_1_0_0 = (CrossReference)cImportedPackageAssignment_3_1_0.eContents().get(0);
		private final RuleCall cImportedPackagePackageColonQualifiedNameParserRuleCall_3_1_0_0_1 = (RuleCall)cImportedPackagePackageCrossReference_3_1_0_0.eContents().get(1);
		private final Keyword cColonColonKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Group cGroup_3_2 = (Group)cAlternatives_3.eContents().get(2);
		private final Assignment cImportedPackageAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final CrossReference cImportedPackagePackageCrossReference_3_2_0_0 = (CrossReference)cImportedPackageAssignment_3_2_0.eContents().get(0);
		private final RuleCall cImportedPackagePackageDotQualifiedNameParserRuleCall_3_2_0_0_1 = (RuleCall)cImportedPackagePackageCrossReference_3_2_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Keyword cAsteriskKeyword_3_2_2 = (Keyword)cGroup_3_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///* IMPORTS */ Import SysML::Import:
		//	ownedRelationship_comp+=PrefixAnnotation*
		//	visibility=PackageElementVisibilityIndicator?
		//	'import' (importedPackage=[SysML::Package|Name] ('::' | '.') '*'
		//	| importedPackage=[SysML::Package|ColonQualifiedName] '::' '*'
		//	| importedPackage=[SysML::Package|DotQualifiedName] '.' '*') ';';
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=PrefixAnnotation* visibility=PackageElementVisibilityIndicator? 'import'
		//(importedPackage=[SysML::Package|Name] ('::' | '.') '*' | importedPackage=[SysML::Package|ColonQualifiedName] '::' '*'
		//| importedPackage=[SysML::Package|DotQualifiedName] '.' '*') ';'
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship_comp+=PrefixAnnotation*
		public Assignment getOwnedRelationship_compAssignment_0() { return cOwnedRelationship_compAssignment_0; }
		
		//PrefixAnnotation
		public RuleCall getOwnedRelationship_compPrefixAnnotationParserRuleCall_0_0() { return cOwnedRelationship_compPrefixAnnotationParserRuleCall_0_0; }
		
		//visibility=PackageElementVisibilityIndicator?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//PackageElementVisibilityIndicator
		public RuleCall getVisibilityPackageElementVisibilityIndicatorEnumRuleCall_1_0() { return cVisibilityPackageElementVisibilityIndicatorEnumRuleCall_1_0; }
		
		//'import'
		public Keyword getImportKeyword_2() { return cImportKeyword_2; }
		
		//(importedPackage=[SysML::Package|Name] ('::' | '.') '*' | importedPackage=[SysML::Package|ColonQualifiedName] '::' '*' |
		//importedPackage=[SysML::Package|DotQualifiedName] '.' '*')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//importedPackage=[SysML::Package|Name] ('::' | '.') '*'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//importedPackage=[SysML::Package|Name]
		public Assignment getImportedPackageAssignment_3_0_0() { return cImportedPackageAssignment_3_0_0; }
		
		//[SysML::Package|Name]
		public CrossReference getImportedPackagePackageCrossReference_3_0_0_0() { return cImportedPackagePackageCrossReference_3_0_0_0; }
		
		//Name
		public RuleCall getImportedPackagePackageNameParserRuleCall_3_0_0_0_1() { return cImportedPackagePackageNameParserRuleCall_3_0_0_0_1; }
		
		//('::' | '.')
		public Alternatives getAlternatives_3_0_1() { return cAlternatives_3_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_3_0_1_0() { return cColonColonKeyword_3_0_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_3_0_1_1() { return cFullStopKeyword_3_0_1_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_3_0_2() { return cAsteriskKeyword_3_0_2; }
		
		//importedPackage=[SysML::Package|ColonQualifiedName] '::' '*'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//importedPackage=[SysML::Package|ColonQualifiedName]
		public Assignment getImportedPackageAssignment_3_1_0() { return cImportedPackageAssignment_3_1_0; }
		
		//[SysML::Package|ColonQualifiedName]
		public CrossReference getImportedPackagePackageCrossReference_3_1_0_0() { return cImportedPackagePackageCrossReference_3_1_0_0; }
		
		//ColonQualifiedName
		public RuleCall getImportedPackagePackageColonQualifiedNameParserRuleCall_3_1_0_0_1() { return cImportedPackagePackageColonQualifiedNameParserRuleCall_3_1_0_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_3_1_1() { return cColonColonKeyword_3_1_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_3_1_2() { return cAsteriskKeyword_3_1_2; }
		
		//importedPackage=[SysML::Package|DotQualifiedName] '.' '*'
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//importedPackage=[SysML::Package|DotQualifiedName]
		public Assignment getImportedPackageAssignment_3_2_0() { return cImportedPackageAssignment_3_2_0; }
		
		//[SysML::Package|DotQualifiedName]
		public CrossReference getImportedPackagePackageCrossReference_3_2_0_0() { return cImportedPackagePackageCrossReference_3_2_0_0; }
		
		//DotQualifiedName
		public RuleCall getImportedPackagePackageDotQualifiedNameParserRuleCall_3_2_0_0_1() { return cImportedPackagePackageDotQualifiedNameParserRuleCall_3_2_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_3_2_1() { return cFullStopKeyword_3_2_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_3_2_2() { return cAsteriskKeyword_3_2_2; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPackageDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPackageBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		///* PACKAGES */ Package SysML::Package:
		//	PackageDeclaration PackageBody;
		@Override public ParserRule getRule() { return rule; }
		
		//PackageDeclaration PackageBody
		public Group getGroup() { return cGroup; }
		
		//PackageDeclaration
		public RuleCall getPackageDeclarationParserRuleCall_0() { return cPackageDeclarationParserRuleCall_0; }
		
		//PackageBody
		public RuleCall getPackageBodyParserRuleCall_1() { return cPackageBodyParserRuleCall_1; }
	}
	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fragment PackageDeclaration returns SysML::Package:
		//	'package' Identification;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' Identification
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//Identification
		public RuleCall getIdentificationParserRuleCall_1() { return cIdentificationParserRuleCall_1; }
	}
	public class PackageBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PackageBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cDocumentation_compAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cDocumentation_compOwnedDocumentationParserRuleCall_1_1_0_0 = (RuleCall)cDocumentation_compAssignment_1_1_0.eContents().get(0);
		private final Assignment cOwnedMembership_compAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cOwnedMembership_compPackageMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedMembership_compAssignment_1_1_1.eContents().get(0);
		private final Assignment cOwnedImport_compAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cOwnedImport_compImportParserRuleCall_1_1_2_0 = (RuleCall)cOwnedImport_compAssignment_1_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment PackageBody returns SysML::Package:
		//	';'
		//	| '{' (documentation_comp+=OwnedDocumentation
		//	| ownedMembership_comp+=PackageMember
		//	| ownedImport_comp+=Import)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//';' | '{' (documentation_comp+=OwnedDocumentation | ownedMembership_comp+=PackageMember | ownedImport_comp+=Import)* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' (documentation_comp+=OwnedDocumentation | ownedMembership_comp+=PackageMember | ownedImport_comp+=Import)* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//(documentation_comp+=OwnedDocumentation | ownedMembership_comp+=PackageMember | ownedImport_comp+=Import)*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//documentation_comp+=OwnedDocumentation
		public Assignment getDocumentation_compAssignment_1_1_0() { return cDocumentation_compAssignment_1_1_0; }
		
		//OwnedDocumentation
		public RuleCall getDocumentation_compOwnedDocumentationParserRuleCall_1_1_0_0() { return cDocumentation_compOwnedDocumentationParserRuleCall_1_1_0_0; }
		
		//ownedMembership_comp+=PackageMember
		public Assignment getOwnedMembership_compAssignment_1_1_1() { return cOwnedMembership_compAssignment_1_1_1; }
		
		//PackageMember
		public RuleCall getOwnedMembership_compPackageMemberParserRuleCall_1_1_1_0() { return cOwnedMembership_compPackageMemberParserRuleCall_1_1_1_0; }
		
		//ownedImport_comp+=Import
		public Assignment getOwnedImport_compAssignment_1_1_2() { return cOwnedImport_compAssignment_1_1_2; }
		
		//Import
		public RuleCall getOwnedImport_compImportParserRuleCall_1_1_2_0() { return cOwnedImport_compImportParserRuleCall_1_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class PackagedDefinitionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PackagedDefinitionElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cItemDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPartDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIndividualDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConnectionDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cInterfaceDefinitionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPortDefinitionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cActionDefinitionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cCalculationDefinitionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cStateDefinitionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cConstraintDefinitionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cRequirementDefinitionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cCaseDefinitionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cAnalysisCaseDefinitionParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cVerificationCaseDefinitionParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cViewDefinitionParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cViewpointDefinitionParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cRenderingDefinitionParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cCommentParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cTextualRepresentationParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cDependencyParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		
		//PackagedDefinitionElement SysML::Element:
		//	Package
		//	| AttributeDefinition
		//	| ItemDefinition
		//	| PartDefinition
		//	| IndividualDefinition
		//	| ConnectionDefinition
		//	| InterfaceDefinition
		//	| PortDefinition
		//	| ActionDefinition
		//	| CalculationDefinition
		//	| StateDefinition
		//	| ConstraintDefinition
		//	| RequirementDefinition
		//	| CaseDefinition
		//	| AnalysisCaseDefinition
		//	| VerificationCaseDefinition
		//	| ViewDefinition
		//	| ViewpointDefinition
		//	| RenderingDefinition
		//	| Comment
		//	| TextualRepresentation
		//	| Dependency;
		@Override public ParserRule getRule() { return rule; }
		
		//Package | AttributeDefinition | ItemDefinition | PartDefinition | IndividualDefinition | ConnectionDefinition |
		//InterfaceDefinition | PortDefinition | ActionDefinition | CalculationDefinition | StateDefinition |
		//ConstraintDefinition | RequirementDefinition | CaseDefinition | AnalysisCaseDefinition | VerificationCaseDefinition |
		//ViewDefinition | ViewpointDefinition | RenderingDefinition | Comment | TextualRepresentation | Dependency
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Package
		public RuleCall getPackageParserRuleCall_0() { return cPackageParserRuleCall_0; }
		
		//AttributeDefinition
		public RuleCall getAttributeDefinitionParserRuleCall_1() { return cAttributeDefinitionParserRuleCall_1; }
		
		//ItemDefinition
		public RuleCall getItemDefinitionParserRuleCall_2() { return cItemDefinitionParserRuleCall_2; }
		
		//PartDefinition
		public RuleCall getPartDefinitionParserRuleCall_3() { return cPartDefinitionParserRuleCall_3; }
		
		//IndividualDefinition
		public RuleCall getIndividualDefinitionParserRuleCall_4() { return cIndividualDefinitionParserRuleCall_4; }
		
		//ConnectionDefinition
		public RuleCall getConnectionDefinitionParserRuleCall_5() { return cConnectionDefinitionParserRuleCall_5; }
		
		//InterfaceDefinition
		public RuleCall getInterfaceDefinitionParserRuleCall_6() { return cInterfaceDefinitionParserRuleCall_6; }
		
		//PortDefinition
		public RuleCall getPortDefinitionParserRuleCall_7() { return cPortDefinitionParserRuleCall_7; }
		
		//ActionDefinition
		public RuleCall getActionDefinitionParserRuleCall_8() { return cActionDefinitionParserRuleCall_8; }
		
		//CalculationDefinition
		public RuleCall getCalculationDefinitionParserRuleCall_9() { return cCalculationDefinitionParserRuleCall_9; }
		
		//StateDefinition
		public RuleCall getStateDefinitionParserRuleCall_10() { return cStateDefinitionParserRuleCall_10; }
		
		//ConstraintDefinition
		public RuleCall getConstraintDefinitionParserRuleCall_11() { return cConstraintDefinitionParserRuleCall_11; }
		
		//RequirementDefinition
		public RuleCall getRequirementDefinitionParserRuleCall_12() { return cRequirementDefinitionParserRuleCall_12; }
		
		//CaseDefinition
		public RuleCall getCaseDefinitionParserRuleCall_13() { return cCaseDefinitionParserRuleCall_13; }
		
		//AnalysisCaseDefinition
		public RuleCall getAnalysisCaseDefinitionParserRuleCall_14() { return cAnalysisCaseDefinitionParserRuleCall_14; }
		
		//VerificationCaseDefinition
		public RuleCall getVerificationCaseDefinitionParserRuleCall_15() { return cVerificationCaseDefinitionParserRuleCall_15; }
		
		//ViewDefinition
		public RuleCall getViewDefinitionParserRuleCall_16() { return cViewDefinitionParserRuleCall_16; }
		
		//ViewpointDefinition
		public RuleCall getViewpointDefinitionParserRuleCall_17() { return cViewpointDefinitionParserRuleCall_17; }
		
		//RenderingDefinition
		public RuleCall getRenderingDefinitionParserRuleCall_18() { return cRenderingDefinitionParserRuleCall_18; }
		
		//Comment
		public RuleCall getCommentParserRuleCall_19() { return cCommentParserRuleCall_19; }
		
		//TextualRepresentation
		public RuleCall getTextualRepresentationParserRuleCall_20() { return cTextualRepresentationParserRuleCall_20; }
		
		//Dependency
		public RuleCall getDependencyParserRuleCall_21() { return cDependencyParserRuleCall_21; }
	}
	public class PackagedUsageElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PackagedUsageElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeUsageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cItemUsageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPartUsageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIndividualUsageParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTimeSliceUsageParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSnapshotUsageParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPortUsageParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cConnectionUsageParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cConnectorParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cInterfaceUsageParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cActionUsageParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cCalculationUsageParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cStateUsageParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cConstraintUsageParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cRequirementUsageParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cCaseUsageParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cAnalysisCaseUsageParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cVerificationCaseUsageParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cViewUsageParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cViewpointUsageParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cRenderingUsageParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		
		//PackagedUsageElement SysML::Usage:
		//	AttributeUsage
		//	| ItemUsage
		//	| PartUsage
		//	| IndividualUsage
		//	| TimeSliceUsage
		//	| SnapshotUsage
		//	| PortUsage
		//	| ConnectionUsage
		//	| Connector
		//	| InterfaceUsage
		//	| ActionUsage
		//	| CalculationUsage
		//	| StateUsage
		//	| ConstraintUsage
		//	| RequirementUsage
		//	| CaseUsage
		//	| AnalysisCaseUsage
		//	| VerificationCaseUsage
		//	| ViewUsage
		//	| ViewpointUsage
		//	| RenderingUsage;
		@Override public ParserRule getRule() { return rule; }
		
		//AttributeUsage | ItemUsage | PartUsage | IndividualUsage | TimeSliceUsage | SnapshotUsage | PortUsage | ConnectionUsage
		//| Connector | InterfaceUsage | ActionUsage | CalculationUsage | StateUsage | ConstraintUsage | RequirementUsage |
		//CaseUsage | AnalysisCaseUsage | VerificationCaseUsage | ViewUsage | ViewpointUsage | RenderingUsage
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AttributeUsage
		public RuleCall getAttributeUsageParserRuleCall_0() { return cAttributeUsageParserRuleCall_0; }
		
		//ItemUsage
		public RuleCall getItemUsageParserRuleCall_1() { return cItemUsageParserRuleCall_1; }
		
		//PartUsage
		public RuleCall getPartUsageParserRuleCall_2() { return cPartUsageParserRuleCall_2; }
		
		//IndividualUsage
		public RuleCall getIndividualUsageParserRuleCall_3() { return cIndividualUsageParserRuleCall_3; }
		
		//TimeSliceUsage
		public RuleCall getTimeSliceUsageParserRuleCall_4() { return cTimeSliceUsageParserRuleCall_4; }
		
		//SnapshotUsage
		public RuleCall getSnapshotUsageParserRuleCall_5() { return cSnapshotUsageParserRuleCall_5; }
		
		//PortUsage
		public RuleCall getPortUsageParserRuleCall_6() { return cPortUsageParserRuleCall_6; }
		
		//ConnectionUsage
		public RuleCall getConnectionUsageParserRuleCall_7() { return cConnectionUsageParserRuleCall_7; }
		
		//Connector
		public RuleCall getConnectorParserRuleCall_8() { return cConnectorParserRuleCall_8; }
		
		//InterfaceUsage
		public RuleCall getInterfaceUsageParserRuleCall_9() { return cInterfaceUsageParserRuleCall_9; }
		
		//ActionUsage
		public RuleCall getActionUsageParserRuleCall_10() { return cActionUsageParserRuleCall_10; }
		
		//CalculationUsage
		public RuleCall getCalculationUsageParserRuleCall_11() { return cCalculationUsageParserRuleCall_11; }
		
		//StateUsage
		public RuleCall getStateUsageParserRuleCall_12() { return cStateUsageParserRuleCall_12; }
		
		//ConstraintUsage
		public RuleCall getConstraintUsageParserRuleCall_13() { return cConstraintUsageParserRuleCall_13; }
		
		//RequirementUsage
		public RuleCall getRequirementUsageParserRuleCall_14() { return cRequirementUsageParserRuleCall_14; }
		
		//CaseUsage
		public RuleCall getCaseUsageParserRuleCall_15() { return cCaseUsageParserRuleCall_15; }
		
		//AnalysisCaseUsage
		public RuleCall getAnalysisCaseUsageParserRuleCall_16() { return cAnalysisCaseUsageParserRuleCall_16; }
		
		//VerificationCaseUsage
		public RuleCall getVerificationCaseUsageParserRuleCall_17() { return cVerificationCaseUsageParserRuleCall_17; }
		
		//ViewUsage
		public RuleCall getViewUsageParserRuleCall_18() { return cViewUsageParserRuleCall_18; }
		
		//ViewpointUsage
		public RuleCall getViewpointUsageParserRuleCall_19() { return cViewpointUsageParserRuleCall_19; }
		
		//RenderingUsage
		public RuleCall getRenderingUsageParserRuleCall_20() { return cRenderingUsageParserRuleCall_20; }
	}
	public class PackageMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PackageMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPackageMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cPackagedDefinitionMemberParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cPackagedUsageMemberParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		///* PACKAGE MEMBERSHIPS */ PackageMember SysML::Membership:
		//	PackageMemberPrefix (PackagedDefinitionMember | PackagedUsageMember);
		@Override public ParserRule getRule() { return rule; }
		
		//PackageMemberPrefix (PackagedDefinitionMember | PackagedUsageMember)
		public Group getGroup() { return cGroup; }
		
		//PackageMemberPrefix
		public RuleCall getPackageMemberPrefixParserRuleCall_0() { return cPackageMemberPrefixParserRuleCall_0; }
		
		//(PackagedDefinitionMember | PackagedUsageMember)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//PackagedDefinitionMember
		public RuleCall getPackagedDefinitionMemberParserRuleCall_1_0() { return cPackagedDefinitionMemberParserRuleCall_1_0; }
		
		//PackagedUsageMember
		public RuleCall getPackagedUsageMemberParserRuleCall_1_1() { return cPackagedUsageMemberParserRuleCall_1_1; }
	}
	public class PackagedDefinitionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PackagedDefinitionMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOwnedMemberElement_compAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOwnedMemberElement_compPackagedDefinitionElementParserRuleCall_0_0 = (RuleCall)cOwnedMemberElement_compAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cImportKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cAliasKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cMemberElementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cMemberElementElementCrossReference_1_1_0 = (CrossReference)cMemberElementAssignment_1_1.eContents().get(0);
		private final RuleCall cMemberElementElementQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cMemberElementElementCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cAsKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cMemberNameAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cMemberNameNameParserRuleCall_1_2_1_0 = (RuleCall)cMemberNameAssignment_1_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//fragment PackagedDefinitionMember returns SysML::Membership:
		//	ownedMemberElement_comp=PackagedDefinitionElement
		//	| ('import' | 'alias') memberElement=[SysML::Element|QualifiedName] ('as' memberName=Name)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberElement_comp=PackagedDefinitionElement | ('import' | 'alias') memberElement=[SysML::Element|QualifiedName]
		//('as' memberName=Name)? ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ownedMemberElement_comp=PackagedDefinitionElement
		public Assignment getOwnedMemberElement_compAssignment_0() { return cOwnedMemberElement_compAssignment_0; }
		
		//PackagedDefinitionElement
		public RuleCall getOwnedMemberElement_compPackagedDefinitionElementParserRuleCall_0_0() { return cOwnedMemberElement_compPackagedDefinitionElementParserRuleCall_0_0; }
		
		//('import' | 'alias') memberElement=[SysML::Element|QualifiedName] ('as' memberName=Name)? ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//('import' | 'alias')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'import'
		public Keyword getImportKeyword_1_0_0() { return cImportKeyword_1_0_0; }
		
		//'alias'
		public Keyword getAliasKeyword_1_0_1() { return cAliasKeyword_1_0_1; }
		
		//memberElement=[SysML::Element|QualifiedName]
		public Assignment getMemberElementAssignment_1_1() { return cMemberElementAssignment_1_1; }
		
		//[SysML::Element|QualifiedName]
		public CrossReference getMemberElementElementCrossReference_1_1_0() { return cMemberElementElementCrossReference_1_1_0; }
		
		//QualifiedName
		public RuleCall getMemberElementElementQualifiedNameParserRuleCall_1_1_0_1() { return cMemberElementElementQualifiedNameParserRuleCall_1_1_0_1; }
		
		//('as' memberName=Name)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'as'
		public Keyword getAsKeyword_1_2_0() { return cAsKeyword_1_2_0; }
		
		//memberName=Name
		public Assignment getMemberNameAssignment_1_2_1() { return cMemberNameAssignment_1_2_1; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_1_2_1_0() { return cMemberNameNameParserRuleCall_1_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }
	}
	public class PackagedUsageMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PackagedUsageMember");
		private final Assignment cOwnedMemberElement_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberElement_compPackagedUsageElementParserRuleCall_0 = (RuleCall)cOwnedMemberElement_compAssignment.eContents().get(0);
		
		//fragment PackagedUsageMember returns SysML::Membership:
		//	ownedMemberElement_comp=PackagedUsageElement;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberElement_comp=PackagedUsageElement
		public Assignment getOwnedMemberElement_compAssignment() { return cOwnedMemberElement_compAssignment; }
		
		//PackagedUsageElement
		public RuleCall getOwnedMemberElement_compPackagedUsageElementParserRuleCall_0() { return cOwnedMemberElement_compPackagedUsageElementParserRuleCall_0; }
	}
	public class PackageMemberPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PackageMemberPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationship_compPrefixAnnotationParserRuleCall_0_0 = (RuleCall)cOwnedRelationship_compAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityPackageElementVisibilityIndicatorEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		
		//fragment PackageMemberPrefix returns SysML::Membership:
		//	ownedRelationship_comp+=PrefixAnnotation*
		//	visibility=PackageElementVisibilityIndicator?;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=PrefixAnnotation* visibility=PackageElementVisibilityIndicator?
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship_comp+=PrefixAnnotation*
		public Assignment getOwnedRelationship_compAssignment_0() { return cOwnedRelationship_compAssignment_0; }
		
		//PrefixAnnotation
		public RuleCall getOwnedRelationship_compPrefixAnnotationParserRuleCall_0_0() { return cOwnedRelationship_compPrefixAnnotationParserRuleCall_0_0; }
		
		//visibility=PackageElementVisibilityIndicator?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//PackageElementVisibilityIndicator
		public RuleCall getVisibilityPackageElementVisibilityIndicatorEnumRuleCall_1_0() { return cVisibilityPackageElementVisibilityIndicatorEnumRuleCall_1_0; }
	}
	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Dependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cIdentificationParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFromKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cClientAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cClientElementCrossReference_2_0 = (CrossReference)cClientAssignment_2.eContents().get(0);
		private final RuleCall cClientElementQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cClientElementCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cClientAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cClientElementCrossReference_3_1_0 = (CrossReference)cClientAssignment_3_1.eContents().get(0);
		private final RuleCall cClientElementQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cClientElementCrossReference_3_1_0.eContents().get(1);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSupplierAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSupplierElementCrossReference_5_0 = (CrossReference)cSupplierAssignment_5.eContents().get(0);
		private final RuleCall cSupplierElementQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cSupplierElementCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSupplierAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cSupplierElementCrossReference_6_1_0 = (CrossReference)cSupplierAssignment_6_1.eContents().get(0);
		private final RuleCall cSupplierElementQualifiedNameParserRuleCall_6_1_0_1 = (RuleCall)cSupplierElementCrossReference_6_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		///* DEPENDENCIES */ Dependency SysML::Dependency:
		//	'dependency' (Identification? 'from')?
		//	client+=[SysML::Element|QualifiedName] (',' client+=[SysML::Element|QualifiedName])* 'to'
		//	supplier+=[SysML::Element|QualifiedName] (',' supplier+=[SysML::Element|QualifiedName])* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'dependency' (Identification? 'from')? client+=[SysML::Element|QualifiedName] (','
		//client+=[SysML::Element|QualifiedName])* 'to' supplier+=[SysML::Element|QualifiedName] (','
		//supplier+=[SysML::Element|QualifiedName])* ';'
		public Group getGroup() { return cGroup; }
		
		//'dependency'
		public Keyword getDependencyKeyword_0() { return cDependencyKeyword_0; }
		
		//(Identification? 'from')?
		public Group getGroup_1() { return cGroup_1; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1_0() { return cIdentificationParserRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_1_1() { return cFromKeyword_1_1; }
		
		//client+=[SysML::Element|QualifiedName]
		public Assignment getClientAssignment_2() { return cClientAssignment_2; }
		
		//[SysML::Element|QualifiedName]
		public CrossReference getClientElementCrossReference_2_0() { return cClientElementCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getClientElementQualifiedNameParserRuleCall_2_0_1() { return cClientElementQualifiedNameParserRuleCall_2_0_1; }
		
		//(',' client+=[SysML::Element|QualifiedName])*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//client+=[SysML::Element|QualifiedName]
		public Assignment getClientAssignment_3_1() { return cClientAssignment_3_1; }
		
		//[SysML::Element|QualifiedName]
		public CrossReference getClientElementCrossReference_3_1_0() { return cClientElementCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getClientElementQualifiedNameParserRuleCall_3_1_0_1() { return cClientElementQualifiedNameParserRuleCall_3_1_0_1; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//supplier+=[SysML::Element|QualifiedName]
		public Assignment getSupplierAssignment_5() { return cSupplierAssignment_5; }
		
		//[SysML::Element|QualifiedName]
		public CrossReference getSupplierElementCrossReference_5_0() { return cSupplierElementCrossReference_5_0; }
		
		//QualifiedName
		public RuleCall getSupplierElementQualifiedNameParserRuleCall_5_0_1() { return cSupplierElementQualifiedNameParserRuleCall_5_0_1; }
		
		//(',' supplier+=[SysML::Element|QualifiedName])*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//supplier+=[SysML::Element|QualifiedName]
		public Assignment getSupplierAssignment_6_1() { return cSupplierAssignment_6_1; }
		
		//[SysML::Element|QualifiedName]
		public CrossReference getSupplierElementCrossReference_6_1_0() { return cSupplierElementCrossReference_6_1_0; }
		
		//QualifiedName
		public RuleCall getSupplierElementQualifiedNameParserRuleCall_6_1_0_1() { return cSupplierElementQualifiedNameParserRuleCall_6_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class DefinitionPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.DefinitionPrefix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Assignment cIsVariationAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cIsVariationVariationKeyword_1_0 = (Keyword)cIsVariationAssignment_1.eContents().get(0);
		
		///* DEFINITIONS */ fragment DefinitionPrefix returns SysML::Definition:
		//	isAbstract?='abstract' | isVariation?='variation';
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract' | isVariation?='variation'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//isAbstract?='abstract'
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//isVariation?='variation'
		public Assignment getIsVariationAssignment_1() { return cIsVariationAssignment_1; }
		
		//'variation'
		public Keyword getIsVariationVariationKeyword_1_0() { return cIsVariationVariationKeyword_1_0; }
	}
	public class DefinitionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.DefinitionBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cDefinitionBodyItemParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment DefinitionBody returns SysML::Type:
		//	';'
		//	| '{' DefinitionBodyItem* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//';' | '{' DefinitionBodyItem* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' DefinitionBodyItem* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//DefinitionBodyItem*
		public RuleCall getDefinitionBodyItemParserRuleCall_1_1() { return cDefinitionBodyItemParserRuleCall_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class DefinitionBodyItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.DefinitionBodyItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDocumentation_compAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDocumentation_compOwnedDocumentationParserRuleCall_0_0 = (RuleCall)cDocumentation_compAssignment_0.eContents().get(0);
		private final Assignment cOwnedMembership_compAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedMembership_compNestedDefinitionMemberParserRuleCall_1_0 = (RuleCall)cOwnedMembership_compAssignment_1.eContents().get(0);
		private final Assignment cOwnedMembership_compAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOwnedMembership_compVariantUsageMemberParserRuleCall_2_0 = (RuleCall)cOwnedMembership_compAssignment_2.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compNestedUsageMemberParserRuleCall_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cOwnedFeatureMembership_compAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compEmptySuccessionMemberParserRuleCall_4_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_4_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compIndividualUsageMemberParserRuleCall_4_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_4_1.eContents().get(0);
		private final Assignment cOwnedImport_compAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cOwnedImport_compImportParserRuleCall_5_0 = (RuleCall)cOwnedImport_compAssignment_5.eContents().get(0);
		
		//fragment DefinitionBodyItem returns SysML::Type:
		//	documentation_comp+=OwnedDocumentation
		//	| ownedMembership_comp+=NestedDefinitionMember
		//	| ownedMembership_comp+=VariantUsageMember
		//	| ownedFeatureMembership_comp+=NestedUsageMember
		//	| ownedFeatureMembership_comp+=EmptySuccessionMember?
		//	ownedFeatureMembership_comp+=IndividualUsageMember
		//	| => ownedImport_comp+=Import;
		@Override public ParserRule getRule() { return rule; }
		
		//documentation_comp+=OwnedDocumentation | ownedMembership_comp+=NestedDefinitionMember |
		//ownedMembership_comp+=VariantUsageMember | ownedFeatureMembership_comp+=NestedUsageMember |
		//ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember | =>
		//ownedImport_comp+=Import
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//documentation_comp+=OwnedDocumentation
		public Assignment getDocumentation_compAssignment_0() { return cDocumentation_compAssignment_0; }
		
		//OwnedDocumentation
		public RuleCall getDocumentation_compOwnedDocumentationParserRuleCall_0_0() { return cDocumentation_compOwnedDocumentationParserRuleCall_0_0; }
		
		//ownedMembership_comp+=NestedDefinitionMember
		public Assignment getOwnedMembership_compAssignment_1() { return cOwnedMembership_compAssignment_1; }
		
		//NestedDefinitionMember
		public RuleCall getOwnedMembership_compNestedDefinitionMemberParserRuleCall_1_0() { return cOwnedMembership_compNestedDefinitionMemberParserRuleCall_1_0; }
		
		//ownedMembership_comp+=VariantUsageMember
		public Assignment getOwnedMembership_compAssignment_2() { return cOwnedMembership_compAssignment_2; }
		
		//VariantUsageMember
		public RuleCall getOwnedMembership_compVariantUsageMemberParserRuleCall_2_0() { return cOwnedMembership_compVariantUsageMemberParserRuleCall_2_0; }
		
		//ownedFeatureMembership_comp+=NestedUsageMember
		public Assignment getOwnedFeatureMembership_compAssignment_3() { return cOwnedFeatureMembership_compAssignment_3; }
		
		//NestedUsageMember
		public RuleCall getOwnedFeatureMembership_compNestedUsageMemberParserRuleCall_3_0() { return cOwnedFeatureMembership_compNestedUsageMemberParserRuleCall_3_0; }
		
		//ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember
		public Group getGroup_4() { return cGroup_4; }
		
		//ownedFeatureMembership_comp+=EmptySuccessionMember?
		public Assignment getOwnedFeatureMembership_compAssignment_4_0() { return cOwnedFeatureMembership_compAssignment_4_0; }
		
		//EmptySuccessionMember
		public RuleCall getOwnedFeatureMembership_compEmptySuccessionMemberParserRuleCall_4_0_0() { return cOwnedFeatureMembership_compEmptySuccessionMemberParserRuleCall_4_0_0; }
		
		//ownedFeatureMembership_comp+=IndividualUsageMember
		public Assignment getOwnedFeatureMembership_compAssignment_4_1() { return cOwnedFeatureMembership_compAssignment_4_1; }
		
		//IndividualUsageMember
		public RuleCall getOwnedFeatureMembership_compIndividualUsageMemberParserRuleCall_4_1_0() { return cOwnedFeatureMembership_compIndividualUsageMemberParserRuleCall_4_1_0; }
		
		//=> ownedImport_comp+=Import
		public Assignment getOwnedImport_compAssignment_5() { return cOwnedImport_compAssignment_5; }
		
		//Import
		public RuleCall getOwnedImport_compImportParserRuleCall_5_0() { return cOwnedImport_compImportParserRuleCall_5_0; }
	}
	public class DirectionalStructureUsageElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.DirectionalStructureUsageElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReferenceUsageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeUsageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cItemRefUsageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPartRefUsageParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cViewRefUsageParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRenderingRefUsageParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//DirectionalStructureUsageElement SysML::Usage:
		//	ReferenceUsage
		//	| AttributeUsage
		//	| ItemRefUsage
		//	| PartRefUsage
		//	| ViewRefUsage
		//	| RenderingRefUsage;
		@Override public ParserRule getRule() { return rule; }
		
		//ReferenceUsage | AttributeUsage | ItemRefUsage | PartRefUsage | ViewRefUsage | RenderingRefUsage
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ReferenceUsage
		public RuleCall getReferenceUsageParserRuleCall_0() { return cReferenceUsageParserRuleCall_0; }
		
		//AttributeUsage
		public RuleCall getAttributeUsageParserRuleCall_1() { return cAttributeUsageParserRuleCall_1; }
		
		//ItemRefUsage
		public RuleCall getItemRefUsageParserRuleCall_2() { return cItemRefUsageParserRuleCall_2; }
		
		//PartRefUsage
		public RuleCall getPartRefUsageParserRuleCall_3() { return cPartRefUsageParserRuleCall_3; }
		
		//ViewRefUsage
		public RuleCall getViewRefUsageParserRuleCall_4() { return cViewRefUsageParserRuleCall_4; }
		
		//RenderingRefUsage
		public RuleCall getRenderingRefUsageParserRuleCall_5() { return cRenderingRefUsageParserRuleCall_5; }
	}
	public class NondirectionalStructureUsageElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.NondirectionalStructureUsageElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPortUsageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConnectionUsageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConnectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInterfaceUsageParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBindingConnectorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSuccessionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cItemFlowParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSuccessionItemFlowParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//NondirectionalStructureUsageElement SysML::Feature:
		//	PortUsage
		//	| ConnectionUsage
		//	| Connector
		//	| InterfaceUsage
		//	| BindingConnector
		//	| Succession
		//	| ItemFlow
		//	| SuccessionItemFlow;
		@Override public ParserRule getRule() { return rule; }
		
		//PortUsage | ConnectionUsage | Connector | InterfaceUsage | BindingConnector | Succession | ItemFlow | SuccessionItemFlow
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PortUsage
		public RuleCall getPortUsageParserRuleCall_0() { return cPortUsageParserRuleCall_0; }
		
		//ConnectionUsage
		public RuleCall getConnectionUsageParserRuleCall_1() { return cConnectionUsageParserRuleCall_1; }
		
		//Connector
		public RuleCall getConnectorParserRuleCall_2() { return cConnectorParserRuleCall_2; }
		
		//InterfaceUsage
		public RuleCall getInterfaceUsageParserRuleCall_3() { return cInterfaceUsageParserRuleCall_3; }
		
		//BindingConnector
		public RuleCall getBindingConnectorParserRuleCall_4() { return cBindingConnectorParserRuleCall_4; }
		
		//Succession
		public RuleCall getSuccessionParserRuleCall_5() { return cSuccessionParserRuleCall_5; }
		
		//ItemFlow
		public RuleCall getItemFlowParserRuleCall_6() { return cItemFlowParserRuleCall_6; }
		
		//SuccessionItemFlow
		public RuleCall getSuccessionItemFlowParserRuleCall_7() { return cSuccessionItemFlowParserRuleCall_7; }
	}
	public class IndividualUsageElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.IndividualUsageElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIndividualRefUsageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimeSliceRefUsageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSnapshotRefUsageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//IndividualUsageElement SysML::Usage:
		//	IndividualRefUsage
		//	| TimeSliceRefUsage
		//	| SnapshotRefUsage;
		@Override public ParserRule getRule() { return rule; }
		
		//IndividualRefUsage | TimeSliceRefUsage | SnapshotRefUsage
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IndividualRefUsage
		public RuleCall getIndividualRefUsageParserRuleCall_0() { return cIndividualRefUsageParserRuleCall_0; }
		
		//TimeSliceRefUsage
		public RuleCall getTimeSliceRefUsageParserRuleCall_1() { return cTimeSliceRefUsageParserRuleCall_1; }
		
		//SnapshotRefUsage
		public RuleCall getSnapshotRefUsageParserRuleCall_2() { return cSnapshotRefUsageParserRuleCall_2; }
	}
	public class DirectionalBehaviorUsageElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.DirectionalBehaviorUsageElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActionRefUsageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCalculationRefUsageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStateRefUsageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConstraintRefUsageParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRequirementRefUsageParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCaseRefUsageParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAnalysisCaseRefUsageParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cVerificationCaseRefUsageParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cViewpointRefUsageParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//DirectionalBehaviorUsageElement SysML::Usage:
		//	ActionRefUsage
		//	| CalculationRefUsage
		//	| StateRefUsage
		//	| ConstraintRefUsage
		//	| RequirementRefUsage
		//	| CaseRefUsage
		//	| AnalysisCaseRefUsage
		//	| VerificationCaseRefUsage
		//	| ViewpointRefUsage;
		@Override public ParserRule getRule() { return rule; }
		
		//ActionRefUsage | CalculationRefUsage | StateRefUsage | ConstraintRefUsage | RequirementRefUsage | CaseRefUsage |
		//AnalysisCaseRefUsage | VerificationCaseRefUsage | ViewpointRefUsage
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ActionRefUsage
		public RuleCall getActionRefUsageParserRuleCall_0() { return cActionRefUsageParserRuleCall_0; }
		
		//CalculationRefUsage
		public RuleCall getCalculationRefUsageParserRuleCall_1() { return cCalculationRefUsageParserRuleCall_1; }
		
		//StateRefUsage
		public RuleCall getStateRefUsageParserRuleCall_2() { return cStateRefUsageParserRuleCall_2; }
		
		//ConstraintRefUsage
		public RuleCall getConstraintRefUsageParserRuleCall_3() { return cConstraintRefUsageParserRuleCall_3; }
		
		//RequirementRefUsage
		public RuleCall getRequirementRefUsageParserRuleCall_4() { return cRequirementRefUsageParserRuleCall_4; }
		
		//CaseRefUsage
		public RuleCall getCaseRefUsageParserRuleCall_5() { return cCaseRefUsageParserRuleCall_5; }
		
		//AnalysisCaseRefUsage
		public RuleCall getAnalysisCaseRefUsageParserRuleCall_6() { return cAnalysisCaseRefUsageParserRuleCall_6; }
		
		//VerificationCaseRefUsage
		public RuleCall getVerificationCaseRefUsageParserRuleCall_7() { return cVerificationCaseRefUsageParserRuleCall_7; }
		
		//ViewpointRefUsage
		public RuleCall getViewpointRefUsageParserRuleCall_8() { return cViewpointRefUsageParserRuleCall_8; }
	}
	public class NondirectionalBehaviorUsageElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.NondirectionalBehaviorUsageElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPerformActionUsageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExhibitStateUsageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssertConstraintUsageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSatisfyRequirementUsageParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NondirectionalBehaviorUsageElement SysML::Usage:
		//	PerformActionUsage
		//	| ExhibitStateUsage
		//	| AssertConstraintUsage
		//	| SatisfyRequirementUsage;
		@Override public ParserRule getRule() { return rule; }
		
		//PerformActionUsage | ExhibitStateUsage | AssertConstraintUsage | SatisfyRequirementUsage
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PerformActionUsage
		public RuleCall getPerformActionUsageParserRuleCall_0() { return cPerformActionUsageParserRuleCall_0; }
		
		//ExhibitStateUsage
		public RuleCall getExhibitStateUsageParserRuleCall_1() { return cExhibitStateUsageParserRuleCall_1; }
		
		//AssertConstraintUsage
		public RuleCall getAssertConstraintUsageParserRuleCall_2() { return cAssertConstraintUsageParserRuleCall_2; }
		
		//SatisfyRequirementUsage
		public RuleCall getSatisfyRequirementUsageParserRuleCall_3() { return cSatisfyRequirementUsageParserRuleCall_3; }
	}
	public class VariantUsageElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.VariantUsageElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReferenceVariantUsageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeVariantUsageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cItemRefUsageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPartRefUsageParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPortUsageParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConnectionUsageParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cConnectorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cInterfaceUsageParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cIndividualUsageElementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDirectionalBehaviorUsageElementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cNondirectionalBehaviorUsageElementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//VariantUsageElement SysML::Usage:
		//	ReferenceVariantUsage
		//	| AttributeVariantUsage
		//	| ItemRefUsage
		//	| PartRefUsage
		//	| PortUsage
		//	| ConnectionUsage
		//	| Connector
		//	| InterfaceUsage
		//	| IndividualUsageElement
		//	| DirectionalBehaviorUsageElement
		//	| NondirectionalBehaviorUsageElement;
		@Override public ParserRule getRule() { return rule; }
		
		//ReferenceVariantUsage | AttributeVariantUsage | ItemRefUsage | PartRefUsage | PortUsage | ConnectionUsage | Connector |
		//InterfaceUsage | IndividualUsageElement | DirectionalBehaviorUsageElement | NondirectionalBehaviorUsageElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ReferenceVariantUsage
		public RuleCall getReferenceVariantUsageParserRuleCall_0() { return cReferenceVariantUsageParserRuleCall_0; }
		
		//AttributeVariantUsage
		public RuleCall getAttributeVariantUsageParserRuleCall_1() { return cAttributeVariantUsageParserRuleCall_1; }
		
		//ItemRefUsage
		public RuleCall getItemRefUsageParserRuleCall_2() { return cItemRefUsageParserRuleCall_2; }
		
		//PartRefUsage
		public RuleCall getPartRefUsageParserRuleCall_3() { return cPartRefUsageParserRuleCall_3; }
		
		//PortUsage
		public RuleCall getPortUsageParserRuleCall_4() { return cPortUsageParserRuleCall_4; }
		
		//ConnectionUsage
		public RuleCall getConnectionUsageParserRuleCall_5() { return cConnectionUsageParserRuleCall_5; }
		
		//Connector
		public RuleCall getConnectorParserRuleCall_6() { return cConnectorParserRuleCall_6; }
		
		//InterfaceUsage
		public RuleCall getInterfaceUsageParserRuleCall_7() { return cInterfaceUsageParserRuleCall_7; }
		
		//IndividualUsageElement
		public RuleCall getIndividualUsageElementParserRuleCall_8() { return cIndividualUsageElementParserRuleCall_8; }
		
		//DirectionalBehaviorUsageElement
		public RuleCall getDirectionalBehaviorUsageElementParserRuleCall_9() { return cDirectionalBehaviorUsageElementParserRuleCall_9; }
		
		//NondirectionalBehaviorUsageElement
		public RuleCall getNondirectionalBehaviorUsageElementParserRuleCall_10() { return cNondirectionalBehaviorUsageElementParserRuleCall_10; }
	}
	public class NestedDefinitionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.NestedDefinitionMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPackagedDefinitionMemberParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		///* DEFINITION MEMBERSHIPS */ NestedDefinitionMember SysML::Membership:
		//	DefinitionMemberPrefix PackagedDefinitionMember;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionMemberPrefix PackagedDefinitionMember
		public Group getGroup() { return cGroup; }
		
		//DefinitionMemberPrefix
		public RuleCall getDefinitionMemberPrefixParserRuleCall_0() { return cDefinitionMemberPrefixParserRuleCall_0; }
		
		//PackagedDefinitionMember
		public RuleCall getPackagedDefinitionMemberParserRuleCall_1() { return cPackagedDefinitionMemberParserRuleCall_1; }
	}
	public class VariantUsageMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.VariantUsageMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cVariantKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedVariantUsage_compAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedVariantUsage_compVariantUsageElementParserRuleCall_2_0 = (RuleCall)cOwnedVariantUsage_compAssignment_2.eContents().get(0);
		
		//VariantUsageMember SysML::VariantMembership:
		//	DefinitionMemberPrefix 'variant' ownedVariantUsage_comp=VariantUsageElement;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionMemberPrefix 'variant' ownedVariantUsage_comp=VariantUsageElement
		public Group getGroup() { return cGroup; }
		
		//DefinitionMemberPrefix
		public RuleCall getDefinitionMemberPrefixParserRuleCall_0() { return cDefinitionMemberPrefixParserRuleCall_0; }
		
		//'variant'
		public Keyword getVariantKeyword_1() { return cVariantKeyword_1; }
		
		//ownedVariantUsage_comp=VariantUsageElement
		public Assignment getOwnedVariantUsage_compAssignment_2() { return cOwnedVariantUsage_compAssignment_2; }
		
		//VariantUsageElement
		public RuleCall getOwnedVariantUsage_compVariantUsageElementParserRuleCall_2_0() { return cOwnedVariantUsage_compVariantUsageElementParserRuleCall_2_0; }
	}
	public class NestedUsageMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.NestedUsageMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStructureUsageMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBehaviorUsageMemberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NestedUsageMember SysML::FeatureMembership:
		//	StructureUsageMember | BehaviorUsageMember;
		@Override public ParserRule getRule() { return rule; }
		
		//StructureUsageMember | BehaviorUsageMember
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StructureUsageMember
		public RuleCall getStructureUsageMemberParserRuleCall_0() { return cStructureUsageMemberParserRuleCall_0; }
		
		//BehaviorUsageMember
		public RuleCall getBehaviorUsageMemberParserRuleCall_1() { return cBehaviorUsageMemberParserRuleCall_1; }
	}
	public class StructureUsageMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.StructureUsageMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cDirectionAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cDirectionFeatureDirectionEnumRuleCall_1_0_0_0 = (RuleCall)cDirectionAssignment_1_0_0.eContents().get(0);
		private final Assignment cOwnedMemberFeature_compAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compDirectionalStructureUsageElementParserRuleCall_1_0_1_0 = (RuleCall)cOwnedMemberFeature_compAssignment_1_0_1.eContents().get(0);
		private final Assignment cOwnedMemberFeature_compAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compNondirectionalStructureUsageElementParserRuleCall_1_1_0 = (RuleCall)cOwnedMemberFeature_compAssignment_1_1.eContents().get(0);
		
		//StructureUsageMember SysML::FeatureMembership:
		//	DefinitionMemberPrefix (direction=FeatureDirection? ownedMemberFeature_comp=DirectionalStructureUsageElement
		//	| ownedMemberFeature_comp=NondirectionalStructureUsageElement);
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionMemberPrefix (direction=FeatureDirection? ownedMemberFeature_comp=DirectionalStructureUsageElement |
		//ownedMemberFeature_comp=NondirectionalStructureUsageElement)
		public Group getGroup() { return cGroup; }
		
		//DefinitionMemberPrefix
		public RuleCall getDefinitionMemberPrefixParserRuleCall_0() { return cDefinitionMemberPrefixParserRuleCall_0; }
		
		//(direction=FeatureDirection? ownedMemberFeature_comp=DirectionalStructureUsageElement |
		//ownedMemberFeature_comp=NondirectionalStructureUsageElement)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//direction=FeatureDirection? ownedMemberFeature_comp=DirectionalStructureUsageElement
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//direction=FeatureDirection?
		public Assignment getDirectionAssignment_1_0_0() { return cDirectionAssignment_1_0_0; }
		
		//FeatureDirection
		public RuleCall getDirectionFeatureDirectionEnumRuleCall_1_0_0_0() { return cDirectionFeatureDirectionEnumRuleCall_1_0_0_0; }
		
		//ownedMemberFeature_comp=DirectionalStructureUsageElement
		public Assignment getOwnedMemberFeature_compAssignment_1_0_1() { return cOwnedMemberFeature_compAssignment_1_0_1; }
		
		//DirectionalStructureUsageElement
		public RuleCall getOwnedMemberFeature_compDirectionalStructureUsageElementParserRuleCall_1_0_1_0() { return cOwnedMemberFeature_compDirectionalStructureUsageElementParserRuleCall_1_0_1_0; }
		
		//ownedMemberFeature_comp=NondirectionalStructureUsageElement
		public Assignment getOwnedMemberFeature_compAssignment_1_1() { return cOwnedMemberFeature_compAssignment_1_1; }
		
		//NondirectionalStructureUsageElement
		public RuleCall getOwnedMemberFeature_compNondirectionalStructureUsageElementParserRuleCall_1_1_0() { return cOwnedMemberFeature_compNondirectionalStructureUsageElementParserRuleCall_1_1_0; }
	}
	public class IndividualUsageMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.IndividualUsageMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedMemberFeature_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compIndividualUsageElementParserRuleCall_1_0 = (RuleCall)cOwnedMemberFeature_compAssignment_1.eContents().get(0);
		
		//IndividualUsageMember SysML::FeatureMembership:
		//	DefinitionMemberPrefix ownedMemberFeature_comp=IndividualUsageElement;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionMemberPrefix ownedMemberFeature_comp=IndividualUsageElement
		public Group getGroup() { return cGroup; }
		
		//DefinitionMemberPrefix
		public RuleCall getDefinitionMemberPrefixParserRuleCall_0() { return cDefinitionMemberPrefixParserRuleCall_0; }
		
		//ownedMemberFeature_comp=IndividualUsageElement
		public Assignment getOwnedMemberFeature_compAssignment_1() { return cOwnedMemberFeature_compAssignment_1; }
		
		//IndividualUsageElement
		public RuleCall getOwnedMemberFeature_compIndividualUsageElementParserRuleCall_1_0() { return cOwnedMemberFeature_compIndividualUsageElementParserRuleCall_1_0; }
	}
	public class BehaviorUsageMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.BehaviorUsageMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cDirectionAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cDirectionFeatureDirectionEnumRuleCall_1_0_0_0 = (RuleCall)cDirectionAssignment_1_0_0.eContents().get(0);
		private final Assignment cOwnedMemberFeature_compAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compDirectionalBehaviorUsageElementParserRuleCall_1_0_1_0 = (RuleCall)cOwnedMemberFeature_compAssignment_1_0_1.eContents().get(0);
		private final Assignment cOwnedMemberFeature_compAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compNondirectionalBehaviorUsageElementParserRuleCall_1_1_0 = (RuleCall)cOwnedMemberFeature_compAssignment_1_1.eContents().get(0);
		
		//BehaviorUsageMember SysML::FeatureMembership:
		//	DefinitionMemberPrefix (direction=FeatureDirection? ownedMemberFeature_comp=DirectionalBehaviorUsageElement
		//	| ownedMemberFeature_comp=NondirectionalBehaviorUsageElement);
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionMemberPrefix (direction=FeatureDirection? ownedMemberFeature_comp=DirectionalBehaviorUsageElement |
		//ownedMemberFeature_comp=NondirectionalBehaviorUsageElement)
		public Group getGroup() { return cGroup; }
		
		//DefinitionMemberPrefix
		public RuleCall getDefinitionMemberPrefixParserRuleCall_0() { return cDefinitionMemberPrefixParserRuleCall_0; }
		
		//(direction=FeatureDirection? ownedMemberFeature_comp=DirectionalBehaviorUsageElement |
		//ownedMemberFeature_comp=NondirectionalBehaviorUsageElement)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//direction=FeatureDirection? ownedMemberFeature_comp=DirectionalBehaviorUsageElement
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//direction=FeatureDirection?
		public Assignment getDirectionAssignment_1_0_0() { return cDirectionAssignment_1_0_0; }
		
		//FeatureDirection
		public RuleCall getDirectionFeatureDirectionEnumRuleCall_1_0_0_0() { return cDirectionFeatureDirectionEnumRuleCall_1_0_0_0; }
		
		//ownedMemberFeature_comp=DirectionalBehaviorUsageElement
		public Assignment getOwnedMemberFeature_compAssignment_1_0_1() { return cOwnedMemberFeature_compAssignment_1_0_1; }
		
		//DirectionalBehaviorUsageElement
		public RuleCall getOwnedMemberFeature_compDirectionalBehaviorUsageElementParserRuleCall_1_0_1_0() { return cOwnedMemberFeature_compDirectionalBehaviorUsageElementParserRuleCall_1_0_1_0; }
		
		//ownedMemberFeature_comp=NondirectionalBehaviorUsageElement
		public Assignment getOwnedMemberFeature_compAssignment_1_1() { return cOwnedMemberFeature_compAssignment_1_1; }
		
		//NondirectionalBehaviorUsageElement
		public RuleCall getOwnedMemberFeature_compNondirectionalBehaviorUsageElementParserRuleCall_1_1_0() { return cOwnedMemberFeature_compNondirectionalBehaviorUsageElementParserRuleCall_1_1_0; }
	}
	public class DefinitionMemberPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.DefinitionMemberPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationship_compPrefixAnnotationParserRuleCall_0_0 = (RuleCall)cOwnedRelationship_compAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityIndicatorEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		
		//fragment DefinitionMemberPrefix returns SysML::Membership:
		//	ownedRelationship_comp+=PrefixAnnotation*
		//	visibility=VisibilityIndicator?;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=PrefixAnnotation* visibility=VisibilityIndicator?
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship_comp+=PrefixAnnotation*
		public Assignment getOwnedRelationship_compAssignment_0() { return cOwnedRelationship_compAssignment_0; }
		
		//PrefixAnnotation
		public RuleCall getOwnedRelationship_compPrefixAnnotationParserRuleCall_0_0() { return cOwnedRelationship_compPrefixAnnotationParserRuleCall_0_0; }
		
		//visibility=VisibilityIndicator?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//VisibilityIndicator
		public RuleCall getVisibilityVisibilityIndicatorEnumRuleCall_1_0() { return cVisibilityVisibilityIndicatorEnumRuleCall_1_0; }
	}
	public class ClassifierDeclarationCompletionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ClassifierDeclarationCompletion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentificationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSuperclassingListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		///* CLASSIFIERS */ fragment ClassifierDeclarationCompletion returns SysML::Classifier:
		//	Identification
		//	//  ( '<' ownedMember += ClassifierTemplateParameter ( ',' ownedMember += ClassifierTemplateParameter )* '>' )? 
		//	SuperclassingList?;
		@Override public ParserRule getRule() { return rule; }
		
		//Identification //  ( '<' ownedMember += ClassifierTemplateParameter ( ',' ownedMember += ClassifierTemplateParameter )* '>' )? 
		//SuperclassingList?
		public Group getGroup() { return cGroup; }
		
		//Identification
		public RuleCall getIdentificationParserRuleCall_0() { return cIdentificationParserRuleCall_0; }
		
		////  ( '<' ownedMember += ClassifierTemplateParameter ( ',' ownedMember += ClassifierTemplateParameter )* '>' )? 
		//SuperclassingList?
		public RuleCall getSuperclassingListParserRuleCall_1() { return cSuperclassingListParserRuleCall_1; }
	}
	public class SuperclassingListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SuperclassingList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSpecializesKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationship_compSuperclassingParserRuleCall_1_0 = (RuleCall)cOwnedRelationship_compAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedRelationship_compSuperclassingParserRuleCall_2_1_0 = (RuleCall)cOwnedRelationship_compAssignment_2_1.eContents().get(0);
		
		//fragment SuperclassingList returns SysML::Classifier:
		//	SpecializesKeyword ownedRelationship_comp+=Superclassing (',' ownedRelationship_comp+=Superclassing)*;
		@Override public ParserRule getRule() { return rule; }
		
		//SpecializesKeyword ownedRelationship_comp+=Superclassing (',' ownedRelationship_comp+=Superclassing)*
		public Group getGroup() { return cGroup; }
		
		//SpecializesKeyword
		public RuleCall getSpecializesKeywordParserRuleCall_0() { return cSpecializesKeywordParserRuleCall_0; }
		
		//ownedRelationship_comp+=Superclassing
		public Assignment getOwnedRelationship_compAssignment_1() { return cOwnedRelationship_compAssignment_1; }
		
		//Superclassing
		public RuleCall getOwnedRelationship_compSuperclassingParserRuleCall_1_0() { return cOwnedRelationship_compSuperclassingParserRuleCall_1_0; }
		
		//(',' ownedRelationship_comp+=Superclassing)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//ownedRelationship_comp+=Superclassing
		public Assignment getOwnedRelationship_compAssignment_2_1() { return cOwnedRelationship_compAssignment_2_1; }
		
		//Superclassing
		public RuleCall getOwnedRelationship_compSuperclassingParserRuleCall_2_1_0() { return cOwnedRelationship_compSuperclassingParserRuleCall_2_1_0; }
	}
	public class SpecializesKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SpecializesKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cColonGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSpecializesKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//SpecializesKeyword:
		//	':>' | 'specializes';
		@Override public ParserRule getRule() { return rule; }
		
		//':>' | 'specializes'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//':>'
		public Keyword getColonGreaterThanSignKeyword_0() { return cColonGreaterThanSignKeyword_0; }
		
		//'specializes'
		public Keyword getSpecializesKeyword_1() { return cSpecializesKeyword_1; }
	}
	public class SuperclassingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Superclassing");
		private final Assignment cSuperclassAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSuperclassClassifierCrossReference_0 = (CrossReference)cSuperclassAssignment.eContents().get(0);
		private final RuleCall cSuperclassClassifierQualifiedNameParserRuleCall_0_1 = (RuleCall)cSuperclassClassifierCrossReference_0.eContents().get(1);
		
		//Superclassing SysML::Superclassing:
		//	superclass=[SysML::Classifier|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//superclass=[SysML::Classifier|QualifiedName]
		public Assignment getSuperclassAssignment() { return cSuperclassAssignment; }
		
		//[SysML::Classifier|QualifiedName]
		public CrossReference getSuperclassClassifierCrossReference_0() { return cSuperclassClassifierCrossReference_0; }
		
		//QualifiedName
		public RuleCall getSuperclassClassifierQualifiedNameParserRuleCall_0_1() { return cSuperclassClassifierQualifiedNameParserRuleCall_0_1; }
	}
	public class AttributeKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AttributeKeyword");
		private final Keyword cAttributeKeyword = (Keyword)rule.eContents().get(1);
		
		///* ATTRIBUTE DEFINITIONS */ AttributeKeyword:
		//	'attribute';
		@Override public ParserRule getRule() { return rule; }
		
		//'attribute'
		public Keyword getAttributeKeyword() { return cAttributeKeyword; }
	}
	public class AttributeDefKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AttributeDefKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeKeywordParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cDefKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cValueKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cTypeKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//AttributeDefKeyword:
		//	AttributeKeyword 'def' | 'value' 'type';
		@Override public ParserRule getRule() { return rule; }
		
		//AttributeKeyword 'def' | 'value' 'type'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AttributeKeyword 'def'
		public Group getGroup_0() { return cGroup_0; }
		
		//AttributeKeyword
		public RuleCall getAttributeKeywordParserRuleCall_0_0() { return cAttributeKeywordParserRuleCall_0_0; }
		
		//'def'
		public Keyword getDefKeyword_0_1() { return cDefKeyword_0_1; }
		
		//'value' 'type'
		public Group getGroup_1() { return cGroup_1; }
		
		//'value'
		public Keyword getValueKeyword_1_0() { return cValueKeyword_1_0; }
		
		//'type'
		public Keyword getTypeKeyword_1_1() { return cTypeKeyword_1_1; }
	}
	public class AttributeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AttributeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAttributeDefDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDefinitionBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//AttributeDefinition SysML::AttributeDefinition:
		//	AttributeDefDeclaration DefinitionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//AttributeDefDeclaration DefinitionBody
		public Group getGroup() { return cGroup; }
		
		//AttributeDefDeclaration
		public RuleCall getAttributeDefDeclarationParserRuleCall_0() { return cAttributeDefDeclarationParserRuleCall_0; }
		
		//DefinitionBody
		public RuleCall getDefinitionBodyParserRuleCall_1() { return cDefinitionBodyParserRuleCall_1; }
	}
	public class AttributeDefDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AttributeDefDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAttributeDefKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationCompletionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment AttributeDefDeclaration returns SysML::AttributeDefinition:
		//	DefinitionPrefix? AttributeDefKeyword ClassifierDeclarationCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionPrefix? AttributeDefKeyword ClassifierDeclarationCompletion
		public Group getGroup() { return cGroup; }
		
		//DefinitionPrefix?
		public RuleCall getDefinitionPrefixParserRuleCall_0() { return cDefinitionPrefixParserRuleCall_0; }
		
		//AttributeDefKeyword
		public RuleCall getAttributeDefKeywordParserRuleCall_1() { return cAttributeDefKeywordParserRuleCall_1; }
		
		//ClassifierDeclarationCompletion
		public RuleCall getClassifierDeclarationCompletionParserRuleCall_2() { return cClassifierDeclarationCompletionParserRuleCall_2; }
	}
	public class ItemKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ItemKeyword");
		private final Keyword cItemKeyword = (Keyword)rule.eContents().get(1);
		
		///* ITEM DEFINITIONS */ ItemKeyword:
		//	'item';
		@Override public ParserRule getRule() { return rule; }
		
		//'item'
		public Keyword getItemKeyword() { return cItemKeyword; }
	}
	public class ItemDefKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ItemDefKeyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cItemKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ItemDefKeyword:
		//	ItemKeyword 'def';
		@Override public ParserRule getRule() { return rule; }
		
		//ItemKeyword 'def'
		public Group getGroup() { return cGroup; }
		
		//ItemKeyword
		public RuleCall getItemKeywordParserRuleCall_0() { return cItemKeywordParserRuleCall_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
	}
	public class ItemDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ItemDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cItemDefDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDefinitionBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ItemDefinition SysML::ItemDefinition:
		//	ItemDefDeclaration DefinitionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//ItemDefDeclaration DefinitionBody
		public Group getGroup() { return cGroup; }
		
		//ItemDefDeclaration
		public RuleCall getItemDefDeclarationParserRuleCall_0() { return cItemDefDeclarationParserRuleCall_0; }
		
		//DefinitionBody
		public RuleCall getDefinitionBodyParserRuleCall_1() { return cDefinitionBodyParserRuleCall_1; }
	}
	public class ItemDefDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ItemDefDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cItemDefKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationCompletionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment ItemDefDeclaration returns SysML::ItemDefinition:
		//	DefinitionPrefix? ItemDefKeyword ClassifierDeclarationCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionPrefix? ItemDefKeyword ClassifierDeclarationCompletion
		public Group getGroup() { return cGroup; }
		
		//DefinitionPrefix?
		public RuleCall getDefinitionPrefixParserRuleCall_0() { return cDefinitionPrefixParserRuleCall_0; }
		
		//ItemDefKeyword
		public RuleCall getItemDefKeywordParserRuleCall_1() { return cItemDefKeywordParserRuleCall_1; }
		
		//ClassifierDeclarationCompletion
		public RuleCall getClassifierDeclarationCompletionParserRuleCall_2() { return cClassifierDeclarationCompletionParserRuleCall_2; }
	}
	public class PartKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PartKeyword");
		private final Keyword cPartKeyword = (Keyword)rule.eContents().get(1);
		
		///* PART DEFINITIONS */ PartKeyword:
		//	'part';
		@Override public ParserRule getRule() { return rule; }
		
		//'part'
		public Keyword getPartKeyword() { return cPartKeyword; }
	}
	public class PartDefKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PartDefKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cPartKeywordParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cDefKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cBlockKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//PartDefKeyword:
		//	PartKeyword 'def' | 'block';
		@Override public ParserRule getRule() { return rule; }
		
		//PartKeyword 'def' | 'block'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PartKeyword 'def'
		public Group getGroup_0() { return cGroup_0; }
		
		//PartKeyword
		public RuleCall getPartKeywordParserRuleCall_0_0() { return cPartKeywordParserRuleCall_0_0; }
		
		//'def'
		public Keyword getDefKeyword_0_1() { return cDefKeyword_0_1; }
		
		//'block'
		public Keyword getBlockKeyword_1() { return cBlockKeyword_1; }
	}
	public class PartDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PartDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPartDefDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDefinitionBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PartDefinition SysML::PartDefinition:
		//	PartDefDeclaration DefinitionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//PartDefDeclaration DefinitionBody
		public Group getGroup() { return cGroup; }
		
		//PartDefDeclaration
		public RuleCall getPartDefDeclarationParserRuleCall_0() { return cPartDefDeclarationParserRuleCall_0; }
		
		//DefinitionBody
		public RuleCall getDefinitionBodyParserRuleCall_1() { return cDefinitionBodyParserRuleCall_1; }
	}
	public class PartDefDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PartDefDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPartDefKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationCompletionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment PartDefDeclaration returns SysML::PartDefinition:
		//	DefinitionPrefix? PartDefKeyword ClassifierDeclarationCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionPrefix? PartDefKeyword ClassifierDeclarationCompletion
		public Group getGroup() { return cGroup; }
		
		//DefinitionPrefix?
		public RuleCall getDefinitionPrefixParserRuleCall_0() { return cDefinitionPrefixParserRuleCall_0; }
		
		//PartDefKeyword
		public RuleCall getPartDefKeywordParserRuleCall_1() { return cPartDefKeywordParserRuleCall_1; }
		
		//ClassifierDeclarationCompletion
		public RuleCall getClassifierDeclarationCompletionParserRuleCall_2() { return cClassifierDeclarationCompletionParserRuleCall_2; }
	}
	public class IndividualKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.IndividualKeyword");
		private final Keyword cIndividualKeyword = (Keyword)rule.eContents().get(1);
		
		///* INDIVIDUAL DEFINITIONS */ IndividualKeyword:
		//	'individual';
		@Override public ParserRule getRule() { return rule; }
		
		//'individual'
		public Keyword getIndividualKeyword() { return cIndividualKeyword; }
	}
	public class IndividualDefKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.IndividualDefKeyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIndividualKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IndividualDefKeyword:
		//	IndividualKeyword 'def';
		@Override public ParserRule getRule() { return rule; }
		
		//IndividualKeyword 'def'
		public Group getGroup() { return cGroup; }
		
		//IndividualKeyword
		public RuleCall getIndividualKeywordParserRuleCall_0() { return cIndividualKeywordParserRuleCall_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
	}
	public class IndividualDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.IndividualDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIndividualDefDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDefinitionBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//IndividualDefinition SysML::IndividualDefinition:
		//	IndividualDefDeclaration DefinitionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//IndividualDefDeclaration DefinitionBody
		public Group getGroup() { return cGroup; }
		
		//IndividualDefDeclaration
		public RuleCall getIndividualDefDeclarationParserRuleCall_0() { return cIndividualDefDeclarationParserRuleCall_0; }
		
		//DefinitionBody
		public RuleCall getDefinitionBodyParserRuleCall_1() { return cDefinitionBodyParserRuleCall_1; }
	}
	public class IndividualDefDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.IndividualDefDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIndividualDefKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationCompletionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cOwnedMembership_compAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedMembership_compLifeClassMembershipParserRuleCall_3_0 = (RuleCall)cOwnedMembership_compAssignment_3.eContents().get(0);
		
		//fragment IndividualDefDeclaration returns SysML::IndividualDefinition:
		//	DefinitionPrefix? IndividualDefKeyword ClassifierDeclarationCompletion
		//	ownedMembership_comp+=LifeClassMembership;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionPrefix? IndividualDefKeyword ClassifierDeclarationCompletion ownedMembership_comp+=LifeClassMembership
		public Group getGroup() { return cGroup; }
		
		//DefinitionPrefix?
		public RuleCall getDefinitionPrefixParserRuleCall_0() { return cDefinitionPrefixParserRuleCall_0; }
		
		//IndividualDefKeyword
		public RuleCall getIndividualDefKeywordParserRuleCall_1() { return cIndividualDefKeywordParserRuleCall_1; }
		
		//ClassifierDeclarationCompletion
		public RuleCall getClassifierDeclarationCompletionParserRuleCall_2() { return cClassifierDeclarationCompletionParserRuleCall_2; }
		
		//ownedMembership_comp+=LifeClassMembership
		public Assignment getOwnedMembership_compAssignment_3() { return cOwnedMembership_compAssignment_3; }
		
		//LifeClassMembership
		public RuleCall getOwnedMembership_compLifeClassMembershipParserRuleCall_3_0() { return cOwnedMembership_compLifeClassMembershipParserRuleCall_3_0; }
	}
	public class LifeClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.LifeClass");
		private final Action cLifeClassAction = (Action)rule.eContents().get(1);
		
		//LifeClass SysML::LifeClass:
		//	{SysML::LifeClass};
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::LifeClass}
		public Action getLifeClassAction() { return cLifeClassAction; }
	}
	public class LifeClassMembershipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.LifeClassMembership");
		private final Assignment cOwnedMemberElement_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberElement_compLifeClassParserRuleCall_0 = (RuleCall)cOwnedMemberElement_compAssignment.eContents().get(0);
		
		///* INDIVIDUAL DEFINITION MEMBERSHIPS */ LifeClassMembership SysML::Membership:
		//	ownedMemberElement_comp=LifeClass;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberElement_comp=LifeClass
		public Assignment getOwnedMemberElement_compAssignment() { return cOwnedMemberElement_compAssignment; }
		
		//LifeClass
		public RuleCall getOwnedMemberElement_compLifeClassParserRuleCall_0() { return cOwnedMemberElement_compLifeClassParserRuleCall_0; }
	}
	public class PortKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PortKeyword");
		private final Keyword cPortKeyword = (Keyword)rule.eContents().get(1);
		
		///* PORT DEFINITIONS */ PortKeyword:
		//	'port';
		@Override public ParserRule getRule() { return rule; }
		
		//'port'
		public Keyword getPortKeyword() { return cPortKeyword; }
	}
	public class PortDefKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PortDefKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cPortKeywordParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cDefKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cInterfaceKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cBlockKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//PortDefKeyword:
		//	PortKeyword 'def' | 'interface' 'block';
		@Override public ParserRule getRule() { return rule; }
		
		//PortKeyword 'def' | 'interface' 'block'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PortKeyword 'def'
		public Group getGroup_0() { return cGroup_0; }
		
		//PortKeyword
		public RuleCall getPortKeywordParserRuleCall_0_0() { return cPortKeywordParserRuleCall_0_0; }
		
		//'def'
		public Keyword getDefKeyword_0_1() { return cDefKeyword_0_1; }
		
		//'interface' 'block'
		public Group getGroup_1() { return cGroup_1; }
		
		//'interface'
		public Keyword getInterfaceKeyword_1_0() { return cInterfaceKeyword_1_0; }
		
		//'block'
		public Keyword getBlockKeyword_1_1() { return cBlockKeyword_1_1; }
	}
	public class PortDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PortDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPortDefDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDefinitionBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PortDefinition SysML::PortDefinition:
		//	PortDefDeclaration DefinitionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//PortDefDeclaration DefinitionBody
		public Group getGroup() { return cGroup; }
		
		//PortDefDeclaration
		public RuleCall getPortDefDeclarationParserRuleCall_0() { return cPortDefDeclarationParserRuleCall_0; }
		
		//DefinitionBody
		public RuleCall getDefinitionBodyParserRuleCall_1() { return cDefinitionBodyParserRuleCall_1; }
	}
	public class PortDefDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PortDefDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPortDefKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationCompletionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cOwnedMembership_compAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedMembership_compConjugatedPortDefinitionMemberParserRuleCall_3_0 = (RuleCall)cOwnedMembership_compAssignment_3.eContents().get(0);
		
		//fragment PortDefDeclaration returns SysML::PortDefinition:
		//	DefinitionPrefix? PortDefKeyword ClassifierDeclarationCompletion
		//	ownedMembership_comp+=ConjugatedPortDefinitionMember;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionPrefix? PortDefKeyword ClassifierDeclarationCompletion ownedMembership_comp+=ConjugatedPortDefinitionMember
		public Group getGroup() { return cGroup; }
		
		//DefinitionPrefix?
		public RuleCall getDefinitionPrefixParserRuleCall_0() { return cDefinitionPrefixParserRuleCall_0; }
		
		//PortDefKeyword
		public RuleCall getPortDefKeywordParserRuleCall_1() { return cPortDefKeywordParserRuleCall_1; }
		
		//ClassifierDeclarationCompletion
		public RuleCall getClassifierDeclarationCompletionParserRuleCall_2() { return cClassifierDeclarationCompletionParserRuleCall_2; }
		
		//ownedMembership_comp+=ConjugatedPortDefinitionMember
		public Assignment getOwnedMembership_compAssignment_3() { return cOwnedMembership_compAssignment_3; }
		
		//ConjugatedPortDefinitionMember
		public RuleCall getOwnedMembership_compConjugatedPortDefinitionMemberParserRuleCall_3_0() { return cOwnedMembership_compConjugatedPortDefinitionMemberParserRuleCall_3_0; }
	}
	public class ConjugatedPortDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConjugatedPortDefinition");
		private final Assignment cOwnedRelationship_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationship_compPortConjugationParserRuleCall_0 = (RuleCall)cOwnedRelationship_compAssignment.eContents().get(0);
		
		//ConjugatedPortDefinition SysML::ConjugatedPortDefinition:
		//	ownedRelationship_comp+=PortConjugation;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=PortConjugation
		public Assignment getOwnedRelationship_compAssignment() { return cOwnedRelationship_compAssignment; }
		
		//PortConjugation
		public RuleCall getOwnedRelationship_compPortConjugationParserRuleCall_0() { return cOwnedRelationship_compPortConjugationParserRuleCall_0; }
	}
	public class PortConjugationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PortConjugation");
		private final Action cPortConjugationAction = (Action)rule.eContents().get(1);
		
		//PortConjugation SysML::PortConjugation:
		//	{SysML::PortConjugation};
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::PortConjugation}
		public Action getPortConjugationAction() { return cPortConjugationAction; }
	}
	public class ConjugatedPortDefinitionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConjugatedPortDefinitionMember");
		private final Assignment cOwnedMemberElement_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberElement_compConjugatedPortDefinitionParserRuleCall_0 = (RuleCall)cOwnedMemberElement_compAssignment.eContents().get(0);
		
		///* PORT DEFINITION MEMBERSHIPS */ ConjugatedPortDefinitionMember SysML::Membership:
		//	ownedMemberElement_comp=ConjugatedPortDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberElement_comp=ConjugatedPortDefinition
		public Assignment getOwnedMemberElement_compAssignment() { return cOwnedMemberElement_compAssignment; }
		
		//ConjugatedPortDefinition
		public RuleCall getOwnedMemberElement_compConjugatedPortDefinitionParserRuleCall_0() { return cOwnedMemberElement_compConjugatedPortDefinitionParserRuleCall_0; }
	}
	public class ConnectionKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConnectionKeyword");
		private final Keyword cConnectionKeyword = (Keyword)rule.eContents().get(1);
		
		///* CONNECTION DEFINITIONS */ ConnectionKeyword:
		//	'connection';
		@Override public ParserRule getRule() { return rule; }
		
		//'connection'
		public Keyword getConnectionKeyword() { return cConnectionKeyword; }
	}
	public class ConnectionDefKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConnectionDefKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cConnectionKeywordParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cDefKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAssocKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cBlockKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ConnectionDefKeyword:
		//	ConnectionKeyword 'def' | 'assoc' 'block';
		@Override public ParserRule getRule() { return rule; }
		
		//ConnectionKeyword 'def' | 'assoc' 'block'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConnectionKeyword 'def'
		public Group getGroup_0() { return cGroup_0; }
		
		//ConnectionKeyword
		public RuleCall getConnectionKeywordParserRuleCall_0_0() { return cConnectionKeywordParserRuleCall_0_0; }
		
		//'def'
		public Keyword getDefKeyword_0_1() { return cDefKeyword_0_1; }
		
		//'assoc' 'block'
		public Group getGroup_1() { return cGroup_1; }
		
		//'assoc'
		public Keyword getAssocKeyword_1_0() { return cAssocKeyword_1_0; }
		
		//'block'
		public Keyword getBlockKeyword_1_1() { return cBlockKeyword_1_1; }
	}
	public class ConnectionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConnectionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConnectionDefDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cConnectionDefBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ConnectionDefinition SysML::ConnectionDefinition:
		//	ConnectionDefDeclaration ConnectionDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//ConnectionDefDeclaration ConnectionDefBody
		public Group getGroup() { return cGroup; }
		
		//ConnectionDefDeclaration
		public RuleCall getConnectionDefDeclarationParserRuleCall_0() { return cConnectionDefDeclarationParserRuleCall_0; }
		
		//ConnectionDefBody
		public RuleCall getConnectionDefBodyParserRuleCall_1() { return cConnectionDefBodyParserRuleCall_1; }
	}
	public class ConnectionDefDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConnectionDefDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cConnectionDefKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationCompletionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment ConnectionDefDeclaration returns SysML::ConnectionDefinition:
		//	DefinitionPrefix? ConnectionDefKeyword ClassifierDeclarationCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionPrefix? ConnectionDefKeyword ClassifierDeclarationCompletion
		public Group getGroup() { return cGroup; }
		
		//DefinitionPrefix?
		public RuleCall getDefinitionPrefixParserRuleCall_0() { return cDefinitionPrefixParserRuleCall_0; }
		
		//ConnectionDefKeyword
		public RuleCall getConnectionDefKeywordParserRuleCall_1() { return cConnectionDefKeywordParserRuleCall_1; }
		
		//ClassifierDeclarationCompletion
		public RuleCall getClassifierDeclarationCompletionParserRuleCall_2() { return cClassifierDeclarationCompletionParserRuleCall_2; }
	}
	public class ConnectionDefBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConnectionDefBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cDocumentation_compAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cDocumentation_compOwnedDocumentationParserRuleCall_1_1_0_0 = (RuleCall)cDocumentation_compAssignment_1_1_0.eContents().get(0);
		private final Assignment cOwnedMembership_compAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cOwnedMembership_compNestedDefinitionMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedMembership_compAssignment_1_1_1.eContents().get(0);
		private final Assignment cOwnedMembership_compAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cOwnedMembership_compVariantUsageMemberParserRuleCall_1_1_2_0 = (RuleCall)cOwnedMembership_compAssignment_1_1_2.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compConnectionUsageMemberParserRuleCall_1_1_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_1_3.eContents().get(0);
		private final Group cGroup_1_1_4 = (Group)cAlternatives_1_1.eContents().get(4);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_1_4_0 = (Assignment)cGroup_1_1_4.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compEmptySuccessionMemberParserRuleCall_1_1_4_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_1_4_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_1_4_1 = (Assignment)cGroup_1_1_4.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compIndividualUsageMemberParserRuleCall_1_1_4_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_1_4_1.eContents().get(0);
		private final Assignment cOwnedImport_compAssignment_1_1_5 = (Assignment)cAlternatives_1_1.eContents().get(5);
		private final RuleCall cOwnedImport_compImportParserRuleCall_1_1_5_0 = (RuleCall)cOwnedImport_compAssignment_1_1_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment ConnectionDefBody returns SysML::Type:
		//	';'
		//	| '{' (documentation_comp+=OwnedDocumentation
		//	| ownedMembership_comp+=NestedDefinitionMember
		//	| ownedMembership_comp+=VariantUsageMember
		//	| ownedFeatureMembership_comp+=ConnectionUsageMember
		//	| ownedFeatureMembership_comp+=EmptySuccessionMember?
		//	ownedFeatureMembership_comp+=IndividualUsageMember
		//	| ownedImport_comp+=Import)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//';' | '{' (documentation_comp+=OwnedDocumentation | ownedMembership_comp+=NestedDefinitionMember |
		//ownedMembership_comp+=VariantUsageMember | ownedFeatureMembership_comp+=ConnectionUsageMember |
		//ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember |
		//ownedImport_comp+=Import)* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' (documentation_comp+=OwnedDocumentation | ownedMembership_comp+=NestedDefinitionMember |
		//ownedMembership_comp+=VariantUsageMember | ownedFeatureMembership_comp+=ConnectionUsageMember |
		//ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember |
		//ownedImport_comp+=Import)* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//(documentation_comp+=OwnedDocumentation | ownedMembership_comp+=NestedDefinitionMember |
		//ownedMembership_comp+=VariantUsageMember | ownedFeatureMembership_comp+=ConnectionUsageMember |
		//ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember |
		//ownedImport_comp+=Import)*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//documentation_comp+=OwnedDocumentation
		public Assignment getDocumentation_compAssignment_1_1_0() { return cDocumentation_compAssignment_1_1_0; }
		
		//OwnedDocumentation
		public RuleCall getDocumentation_compOwnedDocumentationParserRuleCall_1_1_0_0() { return cDocumentation_compOwnedDocumentationParserRuleCall_1_1_0_0; }
		
		//ownedMembership_comp+=NestedDefinitionMember
		public Assignment getOwnedMembership_compAssignment_1_1_1() { return cOwnedMembership_compAssignment_1_1_1; }
		
		//NestedDefinitionMember
		public RuleCall getOwnedMembership_compNestedDefinitionMemberParserRuleCall_1_1_1_0() { return cOwnedMembership_compNestedDefinitionMemberParserRuleCall_1_1_1_0; }
		
		//ownedMembership_comp+=VariantUsageMember
		public Assignment getOwnedMembership_compAssignment_1_1_2() { return cOwnedMembership_compAssignment_1_1_2; }
		
		//VariantUsageMember
		public RuleCall getOwnedMembership_compVariantUsageMemberParserRuleCall_1_1_2_0() { return cOwnedMembership_compVariantUsageMemberParserRuleCall_1_1_2_0; }
		
		//ownedFeatureMembership_comp+=ConnectionUsageMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_1_3() { return cOwnedFeatureMembership_compAssignment_1_1_3; }
		
		//ConnectionUsageMember
		public RuleCall getOwnedFeatureMembership_compConnectionUsageMemberParserRuleCall_1_1_3_0() { return cOwnedFeatureMembership_compConnectionUsageMemberParserRuleCall_1_1_3_0; }
		
		//ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember
		public Group getGroup_1_1_4() { return cGroup_1_1_4; }
		
		//ownedFeatureMembership_comp+=EmptySuccessionMember?
		public Assignment getOwnedFeatureMembership_compAssignment_1_1_4_0() { return cOwnedFeatureMembership_compAssignment_1_1_4_0; }
		
		//EmptySuccessionMember
		public RuleCall getOwnedFeatureMembership_compEmptySuccessionMemberParserRuleCall_1_1_4_0_0() { return cOwnedFeatureMembership_compEmptySuccessionMemberParserRuleCall_1_1_4_0_0; }
		
		//ownedFeatureMembership_comp+=IndividualUsageMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_1_4_1() { return cOwnedFeatureMembership_compAssignment_1_1_4_1; }
		
		//IndividualUsageMember
		public RuleCall getOwnedFeatureMembership_compIndividualUsageMemberParserRuleCall_1_1_4_1_0() { return cOwnedFeatureMembership_compIndividualUsageMemberParserRuleCall_1_1_4_1_0; }
		
		//ownedImport_comp+=Import
		public Assignment getOwnedImport_compAssignment_1_1_5() { return cOwnedImport_compAssignment_1_1_5; }
		
		//Import
		public RuleCall getOwnedImport_compImportParserRuleCall_1_1_5_0() { return cOwnedImport_compImportParserRuleCall_1_1_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class ConnectionEndElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConnectionEndElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReferenceEndUsageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cItemRefUsageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPartRefUsageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPortUsageParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cActionRefUsageParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCalculationRefUsageParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cStateRefUsageParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//ConnectionEndElement SysML::Feature:
		//	ReferenceEndUsage
		//	| ItemRefUsage
		//	| PartRefUsage
		//	| PortUsage
		//	| ActionRefUsage
		//	| CalculationRefUsage
		//	| StateRefUsage;
		@Override public ParserRule getRule() { return rule; }
		
		//ReferenceEndUsage | ItemRefUsage | PartRefUsage | PortUsage | ActionRefUsage | CalculationRefUsage | StateRefUsage
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ReferenceEndUsage
		public RuleCall getReferenceEndUsageParserRuleCall_0() { return cReferenceEndUsageParserRuleCall_0; }
		
		//ItemRefUsage
		public RuleCall getItemRefUsageParserRuleCall_1() { return cItemRefUsageParserRuleCall_1; }
		
		//PartRefUsage
		public RuleCall getPartRefUsageParserRuleCall_2() { return cPartRefUsageParserRuleCall_2; }
		
		//PortUsage
		public RuleCall getPortUsageParserRuleCall_3() { return cPortUsageParserRuleCall_3; }
		
		//ActionRefUsage
		public RuleCall getActionRefUsageParserRuleCall_4() { return cActionRefUsageParserRuleCall_4; }
		
		//CalculationRefUsage
		public RuleCall getCalculationRefUsageParserRuleCall_5() { return cCalculationRefUsageParserRuleCall_5; }
		
		//StateRefUsage
		public RuleCall getStateRefUsageParserRuleCall_6() { return cStateRefUsageParserRuleCall_6; }
	}
	public class ConnectionUsageMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConnectionUsageMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNestedUsageMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConnectionEndMemberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* CONNECTION DEFINITION MEMBERSHIPS */ ConnectionUsageMember SysML::FeatureMembership:
		//	NestedUsageMember | ConnectionEndMember;
		@Override public ParserRule getRule() { return rule; }
		
		//NestedUsageMember | ConnectionEndMember
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NestedUsageMember
		public RuleCall getNestedUsageMemberParserRuleCall_0() { return cNestedUsageMemberParserRuleCall_0; }
		
		//ConnectionEndMember
		public RuleCall getConnectionEndMemberParserRuleCall_1() { return cConnectionEndMemberParserRuleCall_1; }
	}
	public class ConnectionEndMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConnectionEndMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedMemberFeature_compAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedMemberFeature_compConnectionEndElementParserRuleCall_2_0 = (RuleCall)cOwnedMemberFeature_compAssignment_2.eContents().get(0);
		
		//ConnectionEndMember SysML::EndFeatureMembership:
		//	DefinitionMemberPrefix 'end' ownedMemberFeature_comp=ConnectionEndElement;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionMemberPrefix 'end' ownedMemberFeature_comp=ConnectionEndElement
		public Group getGroup() { return cGroup; }
		
		//DefinitionMemberPrefix
		public RuleCall getDefinitionMemberPrefixParserRuleCall_0() { return cDefinitionMemberPrefixParserRuleCall_0; }
		
		//'end'
		public Keyword getEndKeyword_1() { return cEndKeyword_1; }
		
		//ownedMemberFeature_comp=ConnectionEndElement
		public Assignment getOwnedMemberFeature_compAssignment_2() { return cOwnedMemberFeature_compAssignment_2; }
		
		//ConnectionEndElement
		public RuleCall getOwnedMemberFeature_compConnectionEndElementParserRuleCall_2_0() { return cOwnedMemberFeature_compConnectionEndElementParserRuleCall_2_0; }
	}
	public class InterfaceKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.InterfaceKeyword");
		private final Keyword cInterfaceKeyword = (Keyword)rule.eContents().get(1);
		
		///* INTERFACE DEFINITIONS */ InterfaceKeyword:
		//	'interface';
		@Override public ParserRule getRule() { return rule; }
		
		//'interface'
		public Keyword getInterfaceKeyword() { return cInterfaceKeyword; }
	}
	public class InterfaceDefKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.InterfaceDefKeyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInterfaceKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InterfaceDefKeyword:
		//	InterfaceKeyword 'def';
		@Override public ParserRule getRule() { return rule; }
		
		//InterfaceKeyword 'def'
		public Group getGroup() { return cGroup; }
		
		//InterfaceKeyword
		public RuleCall getInterfaceKeywordParserRuleCall_0() { return cInterfaceKeywordParserRuleCall_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
	}
	public class InterfaceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.InterfaceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInterfaceDefDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cInterfaceDefBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//InterfaceDefinition SysML::InterfaceDefinition:
		//	InterfaceDefDeclaration InterfaceDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//InterfaceDefDeclaration InterfaceDefBody
		public Group getGroup() { return cGroup; }
		
		//InterfaceDefDeclaration
		public RuleCall getInterfaceDefDeclarationParserRuleCall_0() { return cInterfaceDefDeclarationParserRuleCall_0; }
		
		//InterfaceDefBody
		public RuleCall getInterfaceDefBodyParserRuleCall_1() { return cInterfaceDefBodyParserRuleCall_1; }
	}
	public class InterfaceDefDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.InterfaceDefDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cInterfaceDefKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationCompletionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment InterfaceDefDeclaration returns SysML::InterfaceDefinition:
		//	DefinitionPrefix? InterfaceDefKeyword ClassifierDeclarationCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionPrefix? InterfaceDefKeyword ClassifierDeclarationCompletion
		public Group getGroup() { return cGroup; }
		
		//DefinitionPrefix?
		public RuleCall getDefinitionPrefixParserRuleCall_0() { return cDefinitionPrefixParserRuleCall_0; }
		
		//InterfaceDefKeyword
		public RuleCall getInterfaceDefKeywordParserRuleCall_1() { return cInterfaceDefKeywordParserRuleCall_1; }
		
		//ClassifierDeclarationCompletion
		public RuleCall getClassifierDeclarationCompletionParserRuleCall_2() { return cClassifierDeclarationCompletionParserRuleCall_2; }
	}
	public class InterfaceDefBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.InterfaceDefBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cDocumentation_compAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cDocumentation_compOwnedDocumentationParserRuleCall_1_1_0_0 = (RuleCall)cDocumentation_compAssignment_1_1_0.eContents().get(0);
		private final Assignment cOwnedMembership_compAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cOwnedMembership_compNestedDefinitionMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedMembership_compAssignment_1_1_1.eContents().get(0);
		private final Assignment cOwnedMembership_compAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cOwnedMembership_compVariantUsageMemberParserRuleCall_1_1_2_0 = (RuleCall)cOwnedMembership_compAssignment_1_1_2.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compInterfaceUsageMemberParserRuleCall_1_1_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_1_3.eContents().get(0);
		private final Assignment cOwnedImport_compAssignment_1_1_4 = (Assignment)cAlternatives_1_1.eContents().get(4);
		private final RuleCall cOwnedImport_compImportParserRuleCall_1_1_4_0 = (RuleCall)cOwnedImport_compAssignment_1_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment InterfaceDefBody returns SysML::Type:
		//	';'
		//	| '{' (documentation_comp+=OwnedDocumentation
		//	| ownedMembership_comp+=NestedDefinitionMember
		//	| ownedMembership_comp+=VariantUsageMember
		//	| ownedFeatureMembership_comp+=InterfaceUsageMember
		//	| ownedImport_comp+=Import)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//';' | '{' (documentation_comp+=OwnedDocumentation | ownedMembership_comp+=NestedDefinitionMember |
		//ownedMembership_comp+=VariantUsageMember | ownedFeatureMembership_comp+=InterfaceUsageMember |
		//ownedImport_comp+=Import)* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' (documentation_comp+=OwnedDocumentation | ownedMembership_comp+=NestedDefinitionMember |
		//ownedMembership_comp+=VariantUsageMember | ownedFeatureMembership_comp+=InterfaceUsageMember |
		//ownedImport_comp+=Import)* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//(documentation_comp+=OwnedDocumentation | ownedMembership_comp+=NestedDefinitionMember |
		//ownedMembership_comp+=VariantUsageMember | ownedFeatureMembership_comp+=InterfaceUsageMember |
		//ownedImport_comp+=Import)*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//documentation_comp+=OwnedDocumentation
		public Assignment getDocumentation_compAssignment_1_1_0() { return cDocumentation_compAssignment_1_1_0; }
		
		//OwnedDocumentation
		public RuleCall getDocumentation_compOwnedDocumentationParserRuleCall_1_1_0_0() { return cDocumentation_compOwnedDocumentationParserRuleCall_1_1_0_0; }
		
		//ownedMembership_comp+=NestedDefinitionMember
		public Assignment getOwnedMembership_compAssignment_1_1_1() { return cOwnedMembership_compAssignment_1_1_1; }
		
		//NestedDefinitionMember
		public RuleCall getOwnedMembership_compNestedDefinitionMemberParserRuleCall_1_1_1_0() { return cOwnedMembership_compNestedDefinitionMemberParserRuleCall_1_1_1_0; }
		
		//ownedMembership_comp+=VariantUsageMember
		public Assignment getOwnedMembership_compAssignment_1_1_2() { return cOwnedMembership_compAssignment_1_1_2; }
		
		//VariantUsageMember
		public RuleCall getOwnedMembership_compVariantUsageMemberParserRuleCall_1_1_2_0() { return cOwnedMembership_compVariantUsageMemberParserRuleCall_1_1_2_0; }
		
		//ownedFeatureMembership_comp+=InterfaceUsageMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_1_3() { return cOwnedFeatureMembership_compAssignment_1_1_3; }
		
		//InterfaceUsageMember
		public RuleCall getOwnedFeatureMembership_compInterfaceUsageMemberParserRuleCall_1_1_3_0() { return cOwnedFeatureMembership_compInterfaceUsageMemberParserRuleCall_1_1_3_0; }
		
		//ownedImport_comp+=Import
		public Assignment getOwnedImport_compAssignment_1_1_4() { return cOwnedImport_compAssignment_1_1_4; }
		
		//Import
		public RuleCall getOwnedImport_compImportParserRuleCall_1_1_4_0() { return cOwnedImport_compImportParserRuleCall_1_1_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class InterfaceUsageMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.InterfaceUsageMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNestedUsageMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterfaceEndMemberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* INTERFACE DEFINITION MEMBERSHIPS */ InterfaceUsageMember SysML::FeatureMembership:
		//	NestedUsageMember | InterfaceEndMember;
		@Override public ParserRule getRule() { return rule; }
		
		//NestedUsageMember | InterfaceEndMember
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NestedUsageMember
		public RuleCall getNestedUsageMemberParserRuleCall_0() { return cNestedUsageMemberParserRuleCall_0; }
		
		//InterfaceEndMember
		public RuleCall getInterfaceEndMemberParserRuleCall_1() { return cInterfaceEndMemberParserRuleCall_1; }
	}
	public class InterfaceEndMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.InterfaceEndMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedMemberFeature_compAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedMemberFeature_compPortEndUsageParserRuleCall_2_0 = (RuleCall)cOwnedMemberFeature_compAssignment_2.eContents().get(0);
		
		//InterfaceEndMember SysML::EndFeatureMembership:
		//	DefinitionMemberPrefix 'end' ownedMemberFeature_comp=PortEndUsage;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionMemberPrefix 'end' ownedMemberFeature_comp=PortEndUsage
		public Group getGroup() { return cGroup; }
		
		//DefinitionMemberPrefix
		public RuleCall getDefinitionMemberPrefixParserRuleCall_0() { return cDefinitionMemberPrefixParserRuleCall_0; }
		
		//'end'
		public Keyword getEndKeyword_1() { return cEndKeyword_1; }
		
		//ownedMemberFeature_comp=PortEndUsage
		public Assignment getOwnedMemberFeature_compAssignment_2() { return cOwnedMemberFeature_compAssignment_2; }
		
		//PortEndUsage
		public RuleCall getOwnedMemberFeature_compPortEndUsageParserRuleCall_2_0() { return cOwnedMemberFeature_compPortEndUsageParserRuleCall_2_0; }
	}
	public class ActionKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ActionKeyword");
		private final Keyword cActionKeyword = (Keyword)rule.eContents().get(1);
		
		///* ACTION DEFINITIONS */ ActionKeyword:
		//	'action';
		@Override public ParserRule getRule() { return rule; }
		
		//'action'
		public Keyword getActionKeyword() { return cActionKeyword; }
	}
	public class ActionDefKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ActionDefKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cActionKeywordParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cDefKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cActivityKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ActionDefKeyword:
		//	ActionKeyword 'def' | 'activity';
		@Override public ParserRule getRule() { return rule; }
		
		//ActionKeyword 'def' | 'activity'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ActionKeyword 'def'
		public Group getGroup_0() { return cGroup_0; }
		
		//ActionKeyword
		public RuleCall getActionKeywordParserRuleCall_0_0() { return cActionKeywordParserRuleCall_0_0; }
		
		//'def'
		public Keyword getDefKeyword_0_1() { return cDefKeyword_0_1; }
		
		//'activity'
		public Keyword getActivityKeyword_1() { return cActivityKeyword_1; }
	}
	public class ActionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ActionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cActionDefDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cActionDefBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ActionDefinition SysML::ActionDefinition:
		//	ActionDefDeclaration ActionDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//ActionDefDeclaration ActionDefBody
		public Group getGroup() { return cGroup; }
		
		//ActionDefDeclaration
		public RuleCall getActionDefDeclarationParserRuleCall_0() { return cActionDefDeclarationParserRuleCall_0; }
		
		//ActionDefBody
		public RuleCall getActionDefBodyParserRuleCall_1() { return cActionDefBodyParserRuleCall_1; }
	}
	public class ActionDefDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ActionDefDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cActionDefKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cIdentificationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSuperclassingListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cParameterListParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//fragment ActionDefDeclaration returns SysML::ActionDefinition:
		//	DefinitionPrefix? ActionDefKeyword Identification SuperclassingList? ParameterList?;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionPrefix? ActionDefKeyword Identification SuperclassingList? ParameterList?
		public Group getGroup() { return cGroup; }
		
		//DefinitionPrefix?
		public RuleCall getDefinitionPrefixParserRuleCall_0() { return cDefinitionPrefixParserRuleCall_0; }
		
		//ActionDefKeyword
		public RuleCall getActionDefKeywordParserRuleCall_1() { return cActionDefKeywordParserRuleCall_1; }
		
		//Identification
		public RuleCall getIdentificationParserRuleCall_2() { return cIdentificationParserRuleCall_2; }
		
		//SuperclassingList?
		public RuleCall getSuperclassingListParserRuleCall_3() { return cSuperclassingListParserRuleCall_3; }
		
		//ParameterList?
		public RuleCall getParameterListParserRuleCall_4() { return cParameterListParserRuleCall_4; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compParameterMemberParserRuleCall_1_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compParameterMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//fragment ParameterList returns SysML::Type:
		//	'(' (ownedFeatureMembership_comp+=ParameterMember (',' ownedFeatureMembership_comp+=ParameterMember)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (ownedFeatureMembership_comp+=ParameterMember (',' ownedFeatureMembership_comp+=ParameterMember)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(ownedFeatureMembership_comp+=ParameterMember (',' ownedFeatureMembership_comp+=ParameterMember)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//ownedFeatureMembership_comp+=ParameterMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_0() { return cOwnedFeatureMembership_compAssignment_1_0; }
		
		//ParameterMember
		public RuleCall getOwnedFeatureMembership_compParameterMemberParserRuleCall_1_0_0() { return cOwnedFeatureMembership_compParameterMemberParserRuleCall_1_0_0; }
		
		//(',' ownedFeatureMembership_comp+=ParameterMember)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//ownedFeatureMembership_comp+=ParameterMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_1_1() { return cOwnedFeatureMembership_compAssignment_1_1_1; }
		
		//ParameterMember
		public RuleCall getOwnedFeatureMembership_compParameterMemberParserRuleCall_1_1_1_0() { return cOwnedFeatureMembership_compParameterMemberParserRuleCall_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ActionDefBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ActionDefBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cActionDefBodyItemParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment ActionDefBody returns SysML::Type:
		//	';'
		//	// Note: Using a syntactic predicate here seems to avoid a possible infinite loop
		//	// while incrementally parsing.
		//	| '{' => ActionDefBodyItem* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//';' // Note: Using a syntactic predicate here seems to avoid a possible infinite loop
		//// while incrementally parsing.
		//| '{' => ActionDefBodyItem* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' => ActionDefBodyItem* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//=> ActionDefBodyItem*
		public RuleCall getActionDefBodyItemParserRuleCall_1_1() { return cActionDefBodyItemParserRuleCall_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class ActionDefBodyItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ActionDefBodyItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDocumentation_compAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDocumentation_compOwnedDocumentationParserRuleCall_0_0 = (RuleCall)cDocumentation_compAssignment_0.eContents().get(0);
		private final Assignment cOwnedMembership_compAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedMembership_compNestedDefinitionMemberParserRuleCall_1_0 = (RuleCall)cOwnedMembership_compAssignment_1.eContents().get(0);
		private final Assignment cOwnedMembership_compAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOwnedMembership_compVariantUsageMemberParserRuleCall_2_0 = (RuleCall)cOwnedMembership_compAssignment_2.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compStructureUsageMemberParserRuleCall_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cOwnedFeatureMembership_compAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compEmptySuccessionMemberParserRuleCall_4_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_4_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compIndividualUsageMemberParserRuleCall_4_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cOwnedFeatureMembership_compAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compInitialNodeMemberParserRuleCall_5_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_5_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compTargetSuccessionMemberParserRuleCall_5_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cOwnedFeatureMembership_compAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compEmptySuccessionMemberParserRuleCall_6_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_6_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Alternatives cOwnedFeatureMembership_compAlternatives_6_1_0 = (Alternatives)cOwnedFeatureMembership_compAssignment_6_1.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compBehaviorUsageMemberParserRuleCall_6_1_0_0 = (RuleCall)cOwnedFeatureMembership_compAlternatives_6_1_0.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compActionNodeMemberParserRuleCall_6_1_0_1 = (RuleCall)cOwnedFeatureMembership_compAlternatives_6_1_0.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compTargetSuccessionMemberParserRuleCall_6_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_6_2.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cOwnedFeatureMembership_compGuardedSuccessionMemberParserRuleCall_7_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_7.eContents().get(0);
		private final Assignment cOwnedImport_compAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cOwnedImport_compImportParserRuleCall_8_0 = (RuleCall)cOwnedImport_compAssignment_8.eContents().get(0);
		
		//fragment ActionDefBodyItem returns SysML::Type:
		//	documentation_comp+=OwnedDocumentation
		//	| ownedMembership_comp+=NestedDefinitionMember
		//	| ownedMembership_comp+=VariantUsageMember
		//	| ownedFeatureMembership_comp+=StructureUsageMember
		//	| ownedFeatureMembership_comp+=EmptySuccessionMember?
		//	ownedFeatureMembership_comp+=IndividualUsageMember
		//	| ownedFeatureMembership_comp+=InitialNodeMember
		//	ownedFeatureMembership_comp+=TargetSuccessionMember*
		//	| ownedFeatureMembership_comp+=EmptySuccessionMember?
		//	ownedFeatureMembership_comp+=(BehaviorUsageMember | ActionNodeMember)
		//	ownedFeatureMembership_comp+=TargetSuccessionMember*
		//	| ownedFeatureMembership_comp+=GuardedSuccessionMember
		//	| ownedImport_comp+=Import;
		@Override public ParserRule getRule() { return rule; }
		
		//documentation_comp+=OwnedDocumentation | ownedMembership_comp+=NestedDefinitionMember |
		//ownedMembership_comp+=VariantUsageMember | ownedFeatureMembership_comp+=StructureUsageMember |
		//ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember |
		//ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember* |
		//ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=(BehaviorUsageMember |
		//ActionNodeMember) ownedFeatureMembership_comp+=TargetSuccessionMember* |
		//ownedFeatureMembership_comp+=GuardedSuccessionMember | ownedImport_comp+=Import
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//documentation_comp+=OwnedDocumentation
		public Assignment getDocumentation_compAssignment_0() { return cDocumentation_compAssignment_0; }
		
		//OwnedDocumentation
		public RuleCall getDocumentation_compOwnedDocumentationParserRuleCall_0_0() { return cDocumentation_compOwnedDocumentationParserRuleCall_0_0; }
		
		//ownedMembership_comp+=NestedDefinitionMember
		public Assignment getOwnedMembership_compAssignment_1() { return cOwnedMembership_compAssignment_1; }
		
		//NestedDefinitionMember
		public RuleCall getOwnedMembership_compNestedDefinitionMemberParserRuleCall_1_0() { return cOwnedMembership_compNestedDefinitionMemberParserRuleCall_1_0; }
		
		//ownedMembership_comp+=VariantUsageMember
		public Assignment getOwnedMembership_compAssignment_2() { return cOwnedMembership_compAssignment_2; }
		
		//VariantUsageMember
		public RuleCall getOwnedMembership_compVariantUsageMemberParserRuleCall_2_0() { return cOwnedMembership_compVariantUsageMemberParserRuleCall_2_0; }
		
		//ownedFeatureMembership_comp+=StructureUsageMember
		public Assignment getOwnedFeatureMembership_compAssignment_3() { return cOwnedFeatureMembership_compAssignment_3; }
		
		//StructureUsageMember
		public RuleCall getOwnedFeatureMembership_compStructureUsageMemberParserRuleCall_3_0() { return cOwnedFeatureMembership_compStructureUsageMemberParserRuleCall_3_0; }
		
		//ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember
		public Group getGroup_4() { return cGroup_4; }
		
		//ownedFeatureMembership_comp+=EmptySuccessionMember?
		public Assignment getOwnedFeatureMembership_compAssignment_4_0() { return cOwnedFeatureMembership_compAssignment_4_0; }
		
		//EmptySuccessionMember
		public RuleCall getOwnedFeatureMembership_compEmptySuccessionMemberParserRuleCall_4_0_0() { return cOwnedFeatureMembership_compEmptySuccessionMemberParserRuleCall_4_0_0; }
		
		//ownedFeatureMembership_comp+=IndividualUsageMember
		public Assignment getOwnedFeatureMembership_compAssignment_4_1() { return cOwnedFeatureMembership_compAssignment_4_1; }
		
		//IndividualUsageMember
		public RuleCall getOwnedFeatureMembership_compIndividualUsageMemberParserRuleCall_4_1_0() { return cOwnedFeatureMembership_compIndividualUsageMemberParserRuleCall_4_1_0; }
		
		//ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*
		public Group getGroup_5() { return cGroup_5; }
		
		//ownedFeatureMembership_comp+=InitialNodeMember
		public Assignment getOwnedFeatureMembership_compAssignment_5_0() { return cOwnedFeatureMembership_compAssignment_5_0; }
		
		//InitialNodeMember
		public RuleCall getOwnedFeatureMembership_compInitialNodeMemberParserRuleCall_5_0_0() { return cOwnedFeatureMembership_compInitialNodeMemberParserRuleCall_5_0_0; }
		
		//ownedFeatureMembership_comp+=TargetSuccessionMember*
		public Assignment getOwnedFeatureMembership_compAssignment_5_1() { return cOwnedFeatureMembership_compAssignment_5_1; }
		
		//TargetSuccessionMember
		public RuleCall getOwnedFeatureMembership_compTargetSuccessionMemberParserRuleCall_5_1_0() { return cOwnedFeatureMembership_compTargetSuccessionMemberParserRuleCall_5_1_0; }
		
		//ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=(BehaviorUsageMember |
		//ActionNodeMember) ownedFeatureMembership_comp+=TargetSuccessionMember*
		public Group getGroup_6() { return cGroup_6; }
		
		//ownedFeatureMembership_comp+=EmptySuccessionMember?
		public Assignment getOwnedFeatureMembership_compAssignment_6_0() { return cOwnedFeatureMembership_compAssignment_6_0; }
		
		//EmptySuccessionMember
		public RuleCall getOwnedFeatureMembership_compEmptySuccessionMemberParserRuleCall_6_0_0() { return cOwnedFeatureMembership_compEmptySuccessionMemberParserRuleCall_6_0_0; }
		
		//ownedFeatureMembership_comp+=(BehaviorUsageMember | ActionNodeMember)
		public Assignment getOwnedFeatureMembership_compAssignment_6_1() { return cOwnedFeatureMembership_compAssignment_6_1; }
		
		//(BehaviorUsageMember | ActionNodeMember)
		public Alternatives getOwnedFeatureMembership_compAlternatives_6_1_0() { return cOwnedFeatureMembership_compAlternatives_6_1_0; }
		
		//BehaviorUsageMember
		public RuleCall getOwnedFeatureMembership_compBehaviorUsageMemberParserRuleCall_6_1_0_0() { return cOwnedFeatureMembership_compBehaviorUsageMemberParserRuleCall_6_1_0_0; }
		
		//ActionNodeMember
		public RuleCall getOwnedFeatureMembership_compActionNodeMemberParserRuleCall_6_1_0_1() { return cOwnedFeatureMembership_compActionNodeMemberParserRuleCall_6_1_0_1; }
		
		//ownedFeatureMembership_comp+=TargetSuccessionMember*
		public Assignment getOwnedFeatureMembership_compAssignment_6_2() { return cOwnedFeatureMembership_compAssignment_6_2; }
		
		//TargetSuccessionMember
		public RuleCall getOwnedFeatureMembership_compTargetSuccessionMemberParserRuleCall_6_2_0() { return cOwnedFeatureMembership_compTargetSuccessionMemberParserRuleCall_6_2_0; }
		
		//ownedFeatureMembership_comp+=GuardedSuccessionMember
		public Assignment getOwnedFeatureMembership_compAssignment_7() { return cOwnedFeatureMembership_compAssignment_7; }
		
		//GuardedSuccessionMember
		public RuleCall getOwnedFeatureMembership_compGuardedSuccessionMemberParserRuleCall_7_0() { return cOwnedFeatureMembership_compGuardedSuccessionMemberParserRuleCall_7_0; }
		
		//ownedImport_comp+=Import
		public Assignment getOwnedImport_compAssignment_8() { return cOwnedImport_compAssignment_8; }
		
		//Import
		public RuleCall getOwnedImport_compImportParserRuleCall_8_0() { return cOwnedImport_compImportParserRuleCall_8_0; }
	}
	public class ParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ParameterMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionFeatureDirectionEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cOwnedMemberFeature_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compParameterParserRuleCall_1_0 = (RuleCall)cOwnedMemberFeature_compAssignment_1.eContents().get(0);
		
		///* ACTION DEFINITION MEMBERSHIPS */ ParameterMember SysML::ParameterMembership:
		//	direction=FeatureDirection? ownedMemberFeature_comp=Parameter;
		@Override public ParserRule getRule() { return rule; }
		
		//direction=FeatureDirection? ownedMemberFeature_comp=Parameter
		public Group getGroup() { return cGroup; }
		
		//direction=FeatureDirection?
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//FeatureDirection
		public RuleCall getDirectionFeatureDirectionEnumRuleCall_0_0() { return cDirectionFeatureDirectionEnumRuleCall_0_0; }
		
		//ownedMemberFeature_comp=Parameter
		public Assignment getOwnedMemberFeature_compAssignment_1() { return cOwnedMemberFeature_compAssignment_1; }
		
		//Parameter
		public RuleCall getOwnedMemberFeature_compParameterParserRuleCall_1_0() { return cOwnedMemberFeature_compParameterParserRuleCall_1_0; }
	}
	public class InitialNodeMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.InitialNodeMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFirstKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMemberFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMemberFeatureFeatureCrossReference_2_0 = (CrossReference)cMemberFeatureAssignment_2.eContents().get(0);
		private final RuleCall cMemberFeatureFeatureQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cMemberFeatureFeatureCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InitialNodeMember SysML::FeatureMembership:
		//	DefinitionMemberPrefix 'first' memberFeature=[SysML::Feature|QualifiedName] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionMemberPrefix 'first' memberFeature=[SysML::Feature|QualifiedName] ';'
		public Group getGroup() { return cGroup; }
		
		//DefinitionMemberPrefix
		public RuleCall getDefinitionMemberPrefixParserRuleCall_0() { return cDefinitionMemberPrefixParserRuleCall_0; }
		
		//'first'
		public Keyword getFirstKeyword_1() { return cFirstKeyword_1; }
		
		//memberFeature=[SysML::Feature|QualifiedName]
		public Assignment getMemberFeatureAssignment_2() { return cMemberFeatureAssignment_2; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getMemberFeatureFeatureCrossReference_2_0() { return cMemberFeatureFeatureCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getMemberFeatureFeatureQualifiedNameParserRuleCall_2_0_1() { return cMemberFeatureFeatureQualifiedNameParserRuleCall_2_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ActionNodeMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ActionNodeMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedMemberFeature_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compActionNodeParserRuleCall_1_0 = (RuleCall)cOwnedMemberFeature_compAssignment_1.eContents().get(0);
		
		//ActionNodeMember SysML::FeatureMembership:
		//	DefinitionMemberPrefix ownedMemberFeature_comp=ActionNode;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionMemberPrefix ownedMemberFeature_comp=ActionNode
		public Group getGroup() { return cGroup; }
		
		//DefinitionMemberPrefix
		public RuleCall getDefinitionMemberPrefixParserRuleCall_0() { return cDefinitionMemberPrefixParserRuleCall_0; }
		
		//ownedMemberFeature_comp=ActionNode
		public Assignment getOwnedMemberFeature_compAssignment_1() { return cOwnedMemberFeature_compAssignment_1; }
		
		//ActionNode
		public RuleCall getOwnedMemberFeature_compActionNodeParserRuleCall_1_0() { return cOwnedMemberFeature_compActionNodeParserRuleCall_1_0; }
	}
	public class TargetSuccessionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TargetSuccessionMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedMemberFeature_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOwnedMemberFeature_compAlternatives_1_0 = (Alternatives)cOwnedMemberFeature_compAssignment_1.eContents().get(0);
		private final RuleCall cOwnedMemberFeature_compTargetSuccessionParserRuleCall_1_0_0 = (RuleCall)cOwnedMemberFeature_compAlternatives_1_0.eContents().get(0);
		private final RuleCall cOwnedMemberFeature_compGuardedTargetSuccessionParserRuleCall_1_0_1 = (RuleCall)cOwnedMemberFeature_compAlternatives_1_0.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compDefaultTargetSuccessionParserRuleCall_1_0_2 = (RuleCall)cOwnedMemberFeature_compAlternatives_1_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TargetSuccessionMember SysML::FeatureMembership:
		//	DefinitionMemberPrefix ownedMemberFeature_comp=(TargetSuccession | GuardedTargetSuccession | DefaultTargetSuccession)
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionMemberPrefix ownedMemberFeature_comp=(TargetSuccession | GuardedTargetSuccession | DefaultTargetSuccession)
		//';'
		public Group getGroup() { return cGroup; }
		
		//DefinitionMemberPrefix
		public RuleCall getDefinitionMemberPrefixParserRuleCall_0() { return cDefinitionMemberPrefixParserRuleCall_0; }
		
		//ownedMemberFeature_comp=(TargetSuccession | GuardedTargetSuccession | DefaultTargetSuccession)
		public Assignment getOwnedMemberFeature_compAssignment_1() { return cOwnedMemberFeature_compAssignment_1; }
		
		//(TargetSuccession | GuardedTargetSuccession | DefaultTargetSuccession)
		public Alternatives getOwnedMemberFeature_compAlternatives_1_0() { return cOwnedMemberFeature_compAlternatives_1_0; }
		
		//TargetSuccession
		public RuleCall getOwnedMemberFeature_compTargetSuccessionParserRuleCall_1_0_0() { return cOwnedMemberFeature_compTargetSuccessionParserRuleCall_1_0_0; }
		
		//GuardedTargetSuccession
		public RuleCall getOwnedMemberFeature_compGuardedTargetSuccessionParserRuleCall_1_0_1() { return cOwnedMemberFeature_compGuardedTargetSuccessionParserRuleCall_1_0_1; }
		
		//DefaultTargetSuccession
		public RuleCall getOwnedMemberFeature_compDefaultTargetSuccessionParserRuleCall_1_0_2() { return cOwnedMemberFeature_compDefaultTargetSuccessionParserRuleCall_1_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class GuardedSuccessionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.GuardedSuccessionMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedMemberFeature_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedMemberFeature_compGuardedSuccessionParserRuleCall_0_0 = (RuleCall)cOwnedMemberFeature_compAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//GuardedSuccessionMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=GuardedSuccession ';';
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=GuardedSuccession ';'
		public Group getGroup() { return cGroup; }
		
		//ownedMemberFeature_comp=GuardedSuccession
		public Assignment getOwnedMemberFeature_compAssignment_0() { return cOwnedMemberFeature_compAssignment_0; }
		
		//GuardedSuccession
		public RuleCall getOwnedMemberFeature_compGuardedSuccessionParserRuleCall_0_0() { return cOwnedMemberFeature_compGuardedSuccessionParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class CalculationKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CalculationKeyword");
		private final Keyword cCalcKeyword = (Keyword)rule.eContents().get(1);
		
		///* CALCULATION DEFINITIONS */ CalculationKeyword:
		//	'calc';
		@Override public ParserRule getRule() { return rule; }
		
		//'calc'
		public Keyword getCalcKeyword() { return cCalcKeyword; }
	}
	public class CalculationDefKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CalculationDefKeyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCalculationKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CalculationDefKeyword:
		//	CalculationKeyword 'def';
		@Override public ParserRule getRule() { return rule; }
		
		//CalculationKeyword 'def'
		public Group getGroup() { return cGroup; }
		
		//CalculationKeyword
		public RuleCall getCalculationKeywordParserRuleCall_0() { return cCalculationKeywordParserRuleCall_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
	}
	public class CalculationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CalculationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCalculationDefDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cCalculationDefBodyParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compExpressionMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//CalculationDefinition SysML::CalculationDefinition:
		//	CalculationDefDeclaration (CalculationDefBody
		//	| '=' ownedFeatureMembership_comp+=ExpressionMember ';');
		@Override public ParserRule getRule() { return rule; }
		
		//CalculationDefDeclaration (CalculationDefBody | '=' ownedFeatureMembership_comp+=ExpressionMember ';')
		public Group getGroup() { return cGroup; }
		
		//CalculationDefDeclaration
		public RuleCall getCalculationDefDeclarationParserRuleCall_0() { return cCalculationDefDeclarationParserRuleCall_0; }
		
		//(CalculationDefBody | '=' ownedFeatureMembership_comp+=ExpressionMember ';')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//CalculationDefBody
		public RuleCall getCalculationDefBodyParserRuleCall_1_0() { return cCalculationDefBodyParserRuleCall_1_0; }
		
		//'=' ownedFeatureMembership_comp+=ExpressionMember ';'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1_0() { return cEqualsSignKeyword_1_1_0; }
		
		//ownedFeatureMembership_comp+=ExpressionMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_1_1() { return cOwnedFeatureMembership_compAssignment_1_1_1; }
		
		//ExpressionMember
		public RuleCall getOwnedFeatureMembership_compExpressionMemberParserRuleCall_1_1_1_0() { return cOwnedFeatureMembership_compExpressionMemberParserRuleCall_1_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1_2() { return cSemicolonKeyword_1_1_2; }
	}
	public class CalculationDefDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CalculationDefDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCalculationDefKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cIdentificationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSuperclassingListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cParameterPartParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//fragment CalculationDefDeclaration returns SysML::CalculationDefinition:
		//	DefinitionPrefix? CalculationDefKeyword Identification
		//	SuperclassingList? ParameterPart;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionPrefix? CalculationDefKeyword Identification SuperclassingList? ParameterPart
		public Group getGroup() { return cGroup; }
		
		//DefinitionPrefix?
		public RuleCall getDefinitionPrefixParserRuleCall_0() { return cDefinitionPrefixParserRuleCall_0; }
		
		//CalculationDefKeyword
		public RuleCall getCalculationDefKeywordParserRuleCall_1() { return cCalculationDefKeywordParserRuleCall_1; }
		
		//Identification
		public RuleCall getIdentificationParserRuleCall_2() { return cIdentificationParserRuleCall_2; }
		
		//SuperclassingList?
		public RuleCall getSuperclassingListParserRuleCall_3() { return cSuperclassingListParserRuleCall_3; }
		
		//ParameterPart
		public RuleCall getParameterPartParserRuleCall_4() { return cParameterPartParserRuleCall_4; }
	}
	public class ParameterPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ParameterPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cParameterListParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cReturnParameterPartParserRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cEmptyReturnParameterPartParserRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cEmptyReturnParameterPartParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//fragment ParameterPart returns SysML::Type:
		//	ParameterList (ReturnParameterPart | EmptyReturnParameterPart) | EmptyReturnParameterPart;
		@Override public ParserRule getRule() { return rule; }
		
		//ParameterList (ReturnParameterPart | EmptyReturnParameterPart) | EmptyReturnParameterPart
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ParameterList (ReturnParameterPart | EmptyReturnParameterPart)
		public Group getGroup_0() { return cGroup_0; }
		
		//ParameterList
		public RuleCall getParameterListParserRuleCall_0_0() { return cParameterListParserRuleCall_0_0; }
		
		//(ReturnParameterPart | EmptyReturnParameterPart)
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//ReturnParameterPart
		public RuleCall getReturnParameterPartParserRuleCall_0_1_0() { return cReturnParameterPartParserRuleCall_0_1_0; }
		
		//EmptyReturnParameterPart
		public RuleCall getEmptyReturnParameterPartParserRuleCall_0_1_1() { return cEmptyReturnParameterPartParserRuleCall_0_1_1; }
		
		//EmptyReturnParameterPart
		public RuleCall getEmptyReturnParameterPartParserRuleCall_1() { return cEmptyReturnParameterPartParserRuleCall_1; }
	}
	public class ReturnParameterPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ReturnParameterPart");
		private final Assignment cOwnedFeatureMembership_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compReturnParameterMemberParserRuleCall_0 = (RuleCall)cOwnedFeatureMembership_compAssignment.eContents().get(0);
		
		//fragment ReturnParameterPart returns SysML::Type:
		//	ownedFeatureMembership_comp+=ReturnParameterMember;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=ReturnParameterMember
		public Assignment getOwnedFeatureMembership_compAssignment() { return cOwnedFeatureMembership_compAssignment; }
		
		//ReturnParameterMember
		public RuleCall getOwnedFeatureMembership_compReturnParameterMemberParserRuleCall_0() { return cOwnedFeatureMembership_compReturnParameterMemberParserRuleCall_0; }
	}
	public class EmptyReturnParameterPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EmptyReturnParameterPart");
		private final Assignment cOwnedFeatureMembership_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compEmptyReturnParameterMemberParserRuleCall_0 = (RuleCall)cOwnedFeatureMembership_compAssignment.eContents().get(0);
		
		//fragment EmptyReturnParameterPart returns SysML::Type:
		//	ownedFeatureMembership_comp+=EmptyReturnParameterMember;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=EmptyReturnParameterMember
		public Assignment getOwnedFeatureMembership_compAssignment() { return cOwnedFeatureMembership_compAssignment; }
		
		//EmptyReturnParameterMember
		public RuleCall getOwnedFeatureMembership_compEmptyReturnParameterMemberParserRuleCall_0() { return cOwnedFeatureMembership_compEmptyReturnParameterMemberParserRuleCall_0; }
	}
	public class EmptyParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EmptyParameter");
		private final Action cReferenceUsageAction = (Action)rule.eContents().get(1);
		
		//EmptyParameter SysML::Usage:
		//	{SysML::ReferenceUsage};
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::ReferenceUsage}
		public Action getReferenceUsageAction() { return cReferenceUsageAction; }
	}
	public class CalculationDefBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CalculationDefBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cCalculationDefBodyItemParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compExpressionMemberParserRuleCall_1_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//fragment CalculationDefBody returns SysML::Type:
		//	';'
		//	| '{' => CalculationDefBodyItem*
		//	ownedFeatureMembership_comp+=ExpressionMember?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//';' | '{' => CalculationDefBodyItem* ownedFeatureMembership_comp+=ExpressionMember? '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' => CalculationDefBodyItem* ownedFeatureMembership_comp+=ExpressionMember? '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//=> CalculationDefBodyItem*
		public RuleCall getCalculationDefBodyItemParserRuleCall_1_1() { return cCalculationDefBodyItemParserRuleCall_1_1; }
		
		//ownedFeatureMembership_comp+=ExpressionMember?
		public Assignment getOwnedFeatureMembership_compAssignment_1_2() { return cOwnedFeatureMembership_compAssignment_1_2; }
		
		//ExpressionMember
		public RuleCall getOwnedFeatureMembership_compExpressionMemberParserRuleCall_1_2_0() { return cOwnedFeatureMembership_compExpressionMemberParserRuleCall_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class CalculationDefBodyItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CalculationDefBodyItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDocumentation_compAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDocumentation_compOwnedDocumentationParserRuleCall_0_0 = (RuleCall)cDocumentation_compAssignment_0.eContents().get(0);
		private final Assignment cOwnedMembership_compAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedMembership_compNestedDefinitionMemberParserRuleCall_1_0 = (RuleCall)cOwnedMembership_compAssignment_1.eContents().get(0);
		private final Assignment cOwnedMembership_compAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOwnedMembership_compVariantUsageMemberParserRuleCall_2_0 = (RuleCall)cOwnedMembership_compAssignment_2.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compStructureUsageMemberParserRuleCall_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cOwnedFeatureMembership_compAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compInitialNodeMemberParserRuleCall_4_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_4_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compTargetSuccessionMemberParserRuleCall_4_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cOwnedFeatureMembership_compAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compEmptySuccessionMemberParserRuleCall_5_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_5_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Alternatives cOwnedFeatureMembership_compAlternatives_5_1_0 = (Alternatives)cOwnedFeatureMembership_compAssignment_5_1.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compBehaviorUsageMemberParserRuleCall_5_1_0_0 = (RuleCall)cOwnedFeatureMembership_compAlternatives_5_1_0.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compActionNodeMemberParserRuleCall_5_1_0_1 = (RuleCall)cOwnedFeatureMembership_compAlternatives_5_1_0.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compTargetSuccessionMemberParserRuleCall_5_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_5_2.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cOwnedFeatureMembership_compGuardedSuccessionMemberParserRuleCall_6_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_6.eContents().get(0);
		private final Assignment cOwnedImport_compAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cOwnedImport_compImportParserRuleCall_7_0 = (RuleCall)cOwnedImport_compAssignment_7.eContents().get(0);
		
		//fragment CalculationDefBodyItem returns SysML::Type:
		//	documentation_comp+=OwnedDocumentation
		//	| ownedMembership_comp+=NestedDefinitionMember
		//	| ownedMembership_comp+=VariantUsageMember
		//	| ownedFeatureMembership_comp+=StructureUsageMember
		//	| ownedFeatureMembership_comp+=InitialNodeMember
		//	ownedFeatureMembership_comp+=TargetSuccessionMember*
		//	| ownedFeatureMembership_comp+=EmptySuccessionMember?
		//	ownedFeatureMembership_comp+=(BehaviorUsageMember | ActionNodeMember)
		//	ownedFeatureMembership_comp+=TargetSuccessionMember*
		//	| ownedFeatureMembership_comp+=GuardedSuccessionMember
		//	| ownedImport_comp+=Import;
		@Override public ParserRule getRule() { return rule; }
		
		//documentation_comp+=OwnedDocumentation | ownedMembership_comp+=NestedDefinitionMember |
		//ownedMembership_comp+=VariantUsageMember | ownedFeatureMembership_comp+=StructureUsageMember |
		//ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember* |
		//ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=(BehaviorUsageMember |
		//ActionNodeMember) ownedFeatureMembership_comp+=TargetSuccessionMember* |
		//ownedFeatureMembership_comp+=GuardedSuccessionMember | ownedImport_comp+=Import
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//documentation_comp+=OwnedDocumentation
		public Assignment getDocumentation_compAssignment_0() { return cDocumentation_compAssignment_0; }
		
		//OwnedDocumentation
		public RuleCall getDocumentation_compOwnedDocumentationParserRuleCall_0_0() { return cDocumentation_compOwnedDocumentationParserRuleCall_0_0; }
		
		//ownedMembership_comp+=NestedDefinitionMember
		public Assignment getOwnedMembership_compAssignment_1() { return cOwnedMembership_compAssignment_1; }
		
		//NestedDefinitionMember
		public RuleCall getOwnedMembership_compNestedDefinitionMemberParserRuleCall_1_0() { return cOwnedMembership_compNestedDefinitionMemberParserRuleCall_1_0; }
		
		//ownedMembership_comp+=VariantUsageMember
		public Assignment getOwnedMembership_compAssignment_2() { return cOwnedMembership_compAssignment_2; }
		
		//VariantUsageMember
		public RuleCall getOwnedMembership_compVariantUsageMemberParserRuleCall_2_0() { return cOwnedMembership_compVariantUsageMemberParserRuleCall_2_0; }
		
		//ownedFeatureMembership_comp+=StructureUsageMember
		public Assignment getOwnedFeatureMembership_compAssignment_3() { return cOwnedFeatureMembership_compAssignment_3; }
		
		//StructureUsageMember
		public RuleCall getOwnedFeatureMembership_compStructureUsageMemberParserRuleCall_3_0() { return cOwnedFeatureMembership_compStructureUsageMemberParserRuleCall_3_0; }
		
		//ownedFeatureMembership_comp+=InitialNodeMember ownedFeatureMembership_comp+=TargetSuccessionMember*
		public Group getGroup_4() { return cGroup_4; }
		
		//ownedFeatureMembership_comp+=InitialNodeMember
		public Assignment getOwnedFeatureMembership_compAssignment_4_0() { return cOwnedFeatureMembership_compAssignment_4_0; }
		
		//InitialNodeMember
		public RuleCall getOwnedFeatureMembership_compInitialNodeMemberParserRuleCall_4_0_0() { return cOwnedFeatureMembership_compInitialNodeMemberParserRuleCall_4_0_0; }
		
		//ownedFeatureMembership_comp+=TargetSuccessionMember*
		public Assignment getOwnedFeatureMembership_compAssignment_4_1() { return cOwnedFeatureMembership_compAssignment_4_1; }
		
		//TargetSuccessionMember
		public RuleCall getOwnedFeatureMembership_compTargetSuccessionMemberParserRuleCall_4_1_0() { return cOwnedFeatureMembership_compTargetSuccessionMemberParserRuleCall_4_1_0; }
		
		//ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=(BehaviorUsageMember |
		//ActionNodeMember) ownedFeatureMembership_comp+=TargetSuccessionMember*
		public Group getGroup_5() { return cGroup_5; }
		
		//ownedFeatureMembership_comp+=EmptySuccessionMember?
		public Assignment getOwnedFeatureMembership_compAssignment_5_0() { return cOwnedFeatureMembership_compAssignment_5_0; }
		
		//EmptySuccessionMember
		public RuleCall getOwnedFeatureMembership_compEmptySuccessionMemberParserRuleCall_5_0_0() { return cOwnedFeatureMembership_compEmptySuccessionMemberParserRuleCall_5_0_0; }
		
		//ownedFeatureMembership_comp+=(BehaviorUsageMember | ActionNodeMember)
		public Assignment getOwnedFeatureMembership_compAssignment_5_1() { return cOwnedFeatureMembership_compAssignment_5_1; }
		
		//(BehaviorUsageMember | ActionNodeMember)
		public Alternatives getOwnedFeatureMembership_compAlternatives_5_1_0() { return cOwnedFeatureMembership_compAlternatives_5_1_0; }
		
		//BehaviorUsageMember
		public RuleCall getOwnedFeatureMembership_compBehaviorUsageMemberParserRuleCall_5_1_0_0() { return cOwnedFeatureMembership_compBehaviorUsageMemberParserRuleCall_5_1_0_0; }
		
		//ActionNodeMember
		public RuleCall getOwnedFeatureMembership_compActionNodeMemberParserRuleCall_5_1_0_1() { return cOwnedFeatureMembership_compActionNodeMemberParserRuleCall_5_1_0_1; }
		
		//ownedFeatureMembership_comp+=TargetSuccessionMember*
		public Assignment getOwnedFeatureMembership_compAssignment_5_2() { return cOwnedFeatureMembership_compAssignment_5_2; }
		
		//TargetSuccessionMember
		public RuleCall getOwnedFeatureMembership_compTargetSuccessionMemberParserRuleCall_5_2_0() { return cOwnedFeatureMembership_compTargetSuccessionMemberParserRuleCall_5_2_0; }
		
		//ownedFeatureMembership_comp+=GuardedSuccessionMember
		public Assignment getOwnedFeatureMembership_compAssignment_6() { return cOwnedFeatureMembership_compAssignment_6; }
		
		//GuardedSuccessionMember
		public RuleCall getOwnedFeatureMembership_compGuardedSuccessionMemberParserRuleCall_6_0() { return cOwnedFeatureMembership_compGuardedSuccessionMemberParserRuleCall_6_0; }
		
		//ownedImport_comp+=Import
		public Assignment getOwnedImport_compAssignment_7() { return cOwnedImport_compAssignment_7; }
		
		//Import
		public RuleCall getOwnedImport_compImportParserRuleCall_7_0() { return cOwnedImport_compImportParserRuleCall_7_0; }
	}
	public class ReturnParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ReturnParameterMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedMemberParameter_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMemberParameter_compParameterParserRuleCall_1_0 = (RuleCall)cOwnedMemberParameter_compAssignment_1.eContents().get(0);
		
		///* CALCULATION DEFINITION MEMBERSHIPS */ ReturnParameterMember SysML::ReturnParameterMembership:
		//	'return'? ownedMemberParameter_comp=Parameter;
		@Override public ParserRule getRule() { return rule; }
		
		//'return'? ownedMemberParameter_comp=Parameter
		public Group getGroup() { return cGroup; }
		
		//'return'?
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//ownedMemberParameter_comp=Parameter
		public Assignment getOwnedMemberParameter_compAssignment_1() { return cOwnedMemberParameter_compAssignment_1; }
		
		//Parameter
		public RuleCall getOwnedMemberParameter_compParameterParserRuleCall_1_0() { return cOwnedMemberParameter_compParameterParserRuleCall_1_0; }
	}
	public class EmptyReturnParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EmptyReturnParameterMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compEmptyParameterParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//EmptyReturnParameterMember SysML::ReturnParameterMembership:
		//	ownedMemberFeature_comp=EmptyParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=EmptyParameter
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//EmptyParameter
		public RuleCall getOwnedMemberFeature_compEmptyParameterParserRuleCall_0() { return cOwnedMemberFeature_compEmptyParameterParserRuleCall_0; }
	}
	public class StateKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.StateKeyword");
		private final Keyword cStateKeyword = (Keyword)rule.eContents().get(1);
		
		///* STATE DEFINITIONS */ StateKeyword:
		//	'state';
		@Override public ParserRule getRule() { return rule; }
		
		//'state'
		public Keyword getStateKeyword() { return cStateKeyword; }
	}
	public class StateDefKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.StateDefKeyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStateKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StateDefKeyword:
		//	StateKeyword 'def';
		@Override public ParserRule getRule() { return rule; }
		
		//StateKeyword 'def'
		public Group getGroup() { return cGroup; }
		
		//StateKeyword
		public RuleCall getStateKeywordParserRuleCall_0() { return cStateKeywordParserRuleCall_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
	}
	public class StateDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.StateDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStateDefDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cStateDefBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//StateDefinition SysML::StateDefinition:
		//	StateDefDeclaration StateDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//StateDefDeclaration StateDefBody
		public Group getGroup() { return cGroup; }
		
		//StateDefDeclaration
		public RuleCall getStateDefDeclarationParserRuleCall_0() { return cStateDefDeclarationParserRuleCall_0; }
		
		//StateDefBody
		public RuleCall getStateDefBodyParserRuleCall_1() { return cStateDefBodyParserRuleCall_1; }
	}
	public class StateDefDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.StateDefDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final RuleCall cStateDefKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cIdentificationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSuperclassingListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cParameterListParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//fragment StateDefDeclaration returns SysML::StateDefinition:
		//	isAbstract?='abstract'? StateDefKeyword Identification SuperclassingList? ParameterList?;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? StateDefKeyword Identification SuperclassingList? ParameterList?
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//StateDefKeyword
		public RuleCall getStateDefKeywordParserRuleCall_1() { return cStateDefKeywordParserRuleCall_1; }
		
		//Identification
		public RuleCall getIdentificationParserRuleCall_2() { return cIdentificationParserRuleCall_2; }
		
		//SuperclassingList?
		public RuleCall getSuperclassingListParserRuleCall_3() { return cSuperclassingListParserRuleCall_3; }
		
		//ParameterList?
		public RuleCall getParameterListParserRuleCall_4() { return cParameterListParserRuleCall_4; }
	}
	public class StateDefBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.StateDefBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cStateDefBodyPartParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment StateDefBody returns SysML::Type:
		//	';' | '{' StateDefBodyPart '}';
		@Override public ParserRule getRule() { return rule; }
		
		//';' | '{' StateDefBodyPart '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' StateDefBodyPart '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//StateDefBodyPart
		public RuleCall getStateDefBodyPartParserRuleCall_1_1() { return cStateDefBodyPartParserRuleCall_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class StateDefBodyPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.StateDefBodyPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compEntryActionMemberParserRuleCall_0_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compEntryTransitionMemberParserRuleCall_0_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compDoActionMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compExitActionMemberParserRuleCall_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_2.eContents().get(0);
		private final RuleCall cStateDefBodyItemParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//fragment StateDefBodyPart returns SysML::Type:
		//	(ownedFeatureMembership_comp+=EntryActionMember
		//	ownedFeatureMembership_comp+=EntryTransitionMember*)?
		//	ownedFeatureMembership_comp+=DoActionMember?
		//	ownedFeatureMembership_comp+=ExitActionMember?
		//	// Note: Using a syntactic predicate here seems to avoid a possible infinite loop
		//	// while incrementally parsing.
		//	=> StateDefBodyItem*;
		@Override public ParserRule getRule() { return rule; }
		
		//(ownedFeatureMembership_comp+=EntryActionMember ownedFeatureMembership_comp+=EntryTransitionMember*)?
		//ownedFeatureMembership_comp+=DoActionMember? ownedFeatureMembership_comp+=ExitActionMember? // Note: Using a syntactic predicate here seems to avoid a possible infinite loop
		//// while incrementally parsing.
		//=> StateDefBodyItem*
		public Group getGroup() { return cGroup; }
		
		//(ownedFeatureMembership_comp+=EntryActionMember ownedFeatureMembership_comp+=EntryTransitionMember*)?
		public Group getGroup_0() { return cGroup_0; }
		
		//ownedFeatureMembership_comp+=EntryActionMember
		public Assignment getOwnedFeatureMembership_compAssignment_0_0() { return cOwnedFeatureMembership_compAssignment_0_0; }
		
		//EntryActionMember
		public RuleCall getOwnedFeatureMembership_compEntryActionMemberParserRuleCall_0_0_0() { return cOwnedFeatureMembership_compEntryActionMemberParserRuleCall_0_0_0; }
		
		//ownedFeatureMembership_comp+=EntryTransitionMember*
		public Assignment getOwnedFeatureMembership_compAssignment_0_1() { return cOwnedFeatureMembership_compAssignment_0_1; }
		
		//EntryTransitionMember
		public RuleCall getOwnedFeatureMembership_compEntryTransitionMemberParserRuleCall_0_1_0() { return cOwnedFeatureMembership_compEntryTransitionMemberParserRuleCall_0_1_0; }
		
		//ownedFeatureMembership_comp+=DoActionMember?
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//DoActionMember
		public RuleCall getOwnedFeatureMembership_compDoActionMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compDoActionMemberParserRuleCall_1_0; }
		
		//ownedFeatureMembership_comp+=ExitActionMember?
		public Assignment getOwnedFeatureMembership_compAssignment_2() { return cOwnedFeatureMembership_compAssignment_2; }
		
		//ExitActionMember
		public RuleCall getOwnedFeatureMembership_compExitActionMemberParserRuleCall_2_0() { return cOwnedFeatureMembership_compExitActionMemberParserRuleCall_2_0; }
		
		//// Note: Using a syntactic predicate here seems to avoid a possible infinite loop
		//// while incrementally parsing.
		//=> StateDefBodyItem*
		public RuleCall getStateDefBodyItemParserRuleCall_3() { return cStateDefBodyItemParserRuleCall_3; }
	}
	public class StateDefBodyItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.StateDefBodyItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDocumentation_compAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDocumentation_compOwnedDocumentationParserRuleCall_0_0 = (RuleCall)cDocumentation_compAssignment_0.eContents().get(0);
		private final Assignment cOwnedMembership_compAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedMembership_compNestedDefinitionMemberParserRuleCall_1_0 = (RuleCall)cOwnedMembership_compAssignment_1.eContents().get(0);
		private final Assignment cOwnedMembership_compAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOwnedMembership_compVariantUsageMemberParserRuleCall_2_0 = (RuleCall)cOwnedMembership_compAssignment_2.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compStructureUsageMemberParserRuleCall_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cOwnedFeatureMembership_compAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compEmptySuccessionMemberParserRuleCall_4_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_4_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compIndividualUsageMemberParserRuleCall_4_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cOwnedFeatureMembership_compAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compBehaviorUsageMemberParserRuleCall_5_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_5_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compTargetTransitionSuccessionMemberParserRuleCall_5_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_5_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cOwnedFeatureMembership_compTransitionStepMemberParserRuleCall_6_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_6.eContents().get(0);
		private final Assignment cOwnedImport_compAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cOwnedImport_compImportParserRuleCall_7_0 = (RuleCall)cOwnedImport_compAssignment_7.eContents().get(0);
		
		//fragment StateDefBodyItem returns SysML::Type:
		//	documentation_comp+=OwnedDocumentation
		//	| ownedMembership_comp+=NestedDefinitionMember
		//	| ownedMembership_comp+=VariantUsageMember
		//	| ownedFeatureMembership_comp+=StructureUsageMember
		//	| ownedFeatureMembership_comp+=EmptySuccessionMember?
		//	ownedFeatureMembership_comp+=IndividualUsageMember
		//	| ownedFeatureMembership_comp+=BehaviorUsageMember
		//	ownedFeatureMembership_comp+=TargetTransitionSuccessionMember*
		//	| ownedFeatureMembership_comp+=TransitionStepMember
		//	| ownedImport_comp+=Import;
		@Override public ParserRule getRule() { return rule; }
		
		//documentation_comp+=OwnedDocumentation | ownedMembership_comp+=NestedDefinitionMember |
		//ownedMembership_comp+=VariantUsageMember | ownedFeatureMembership_comp+=StructureUsageMember |
		//ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember |
		//ownedFeatureMembership_comp+=BehaviorUsageMember ownedFeatureMembership_comp+=TargetTransitionSuccessionMember* |
		//ownedFeatureMembership_comp+=TransitionStepMember | ownedImport_comp+=Import
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//documentation_comp+=OwnedDocumentation
		public Assignment getDocumentation_compAssignment_0() { return cDocumentation_compAssignment_0; }
		
		//OwnedDocumentation
		public RuleCall getDocumentation_compOwnedDocumentationParserRuleCall_0_0() { return cDocumentation_compOwnedDocumentationParserRuleCall_0_0; }
		
		//ownedMembership_comp+=NestedDefinitionMember
		public Assignment getOwnedMembership_compAssignment_1() { return cOwnedMembership_compAssignment_1; }
		
		//NestedDefinitionMember
		public RuleCall getOwnedMembership_compNestedDefinitionMemberParserRuleCall_1_0() { return cOwnedMembership_compNestedDefinitionMemberParserRuleCall_1_0; }
		
		//ownedMembership_comp+=VariantUsageMember
		public Assignment getOwnedMembership_compAssignment_2() { return cOwnedMembership_compAssignment_2; }
		
		//VariantUsageMember
		public RuleCall getOwnedMembership_compVariantUsageMemberParserRuleCall_2_0() { return cOwnedMembership_compVariantUsageMemberParserRuleCall_2_0; }
		
		//ownedFeatureMembership_comp+=StructureUsageMember
		public Assignment getOwnedFeatureMembership_compAssignment_3() { return cOwnedFeatureMembership_compAssignment_3; }
		
		//StructureUsageMember
		public RuleCall getOwnedFeatureMembership_compStructureUsageMemberParserRuleCall_3_0() { return cOwnedFeatureMembership_compStructureUsageMemberParserRuleCall_3_0; }
		
		//ownedFeatureMembership_comp+=EmptySuccessionMember? ownedFeatureMembership_comp+=IndividualUsageMember
		public Group getGroup_4() { return cGroup_4; }
		
		//ownedFeatureMembership_comp+=EmptySuccessionMember?
		public Assignment getOwnedFeatureMembership_compAssignment_4_0() { return cOwnedFeatureMembership_compAssignment_4_0; }
		
		//EmptySuccessionMember
		public RuleCall getOwnedFeatureMembership_compEmptySuccessionMemberParserRuleCall_4_0_0() { return cOwnedFeatureMembership_compEmptySuccessionMemberParserRuleCall_4_0_0; }
		
		//ownedFeatureMembership_comp+=IndividualUsageMember
		public Assignment getOwnedFeatureMembership_compAssignment_4_1() { return cOwnedFeatureMembership_compAssignment_4_1; }
		
		//IndividualUsageMember
		public RuleCall getOwnedFeatureMembership_compIndividualUsageMemberParserRuleCall_4_1_0() { return cOwnedFeatureMembership_compIndividualUsageMemberParserRuleCall_4_1_0; }
		
		//ownedFeatureMembership_comp+=BehaviorUsageMember ownedFeatureMembership_comp+=TargetTransitionSuccessionMember*
		public Group getGroup_5() { return cGroup_5; }
		
		//ownedFeatureMembership_comp+=BehaviorUsageMember
		public Assignment getOwnedFeatureMembership_compAssignment_5_0() { return cOwnedFeatureMembership_compAssignment_5_0; }
		
		//BehaviorUsageMember
		public RuleCall getOwnedFeatureMembership_compBehaviorUsageMemberParserRuleCall_5_0_0() { return cOwnedFeatureMembership_compBehaviorUsageMemberParserRuleCall_5_0_0; }
		
		//ownedFeatureMembership_comp+=TargetTransitionSuccessionMember*
		public Assignment getOwnedFeatureMembership_compAssignment_5_1() { return cOwnedFeatureMembership_compAssignment_5_1; }
		
		//TargetTransitionSuccessionMember
		public RuleCall getOwnedFeatureMembership_compTargetTransitionSuccessionMemberParserRuleCall_5_1_0() { return cOwnedFeatureMembership_compTargetTransitionSuccessionMemberParserRuleCall_5_1_0; }
		
		//ownedFeatureMembership_comp+=TransitionStepMember
		public Assignment getOwnedFeatureMembership_compAssignment_6() { return cOwnedFeatureMembership_compAssignment_6; }
		
		//TransitionStepMember
		public RuleCall getOwnedFeatureMembership_compTransitionStepMemberParserRuleCall_6_0() { return cOwnedFeatureMembership_compTransitionStepMemberParserRuleCall_6_0; }
		
		//ownedImport_comp+=Import
		public Assignment getOwnedImport_compAssignment_7() { return cOwnedImport_compAssignment_7; }
		
		//Import
		public RuleCall getOwnedImport_compImportParserRuleCall_7_0() { return cOwnedImport_compImportParserRuleCall_7_0; }
	}
	public class StateActionUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.StateActionUsage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cEmptyActionUsageParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cPerformedActionUsageParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cActionDefBodyParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//StateActionUsage SysML::ActionUsage:
		//	EmptyActionUsage ';' | PerformedActionUsage ActionDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//EmptyActionUsage ';' | PerformedActionUsage ActionDefBody
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EmptyActionUsage ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//EmptyActionUsage
		public RuleCall getEmptyActionUsageParserRuleCall_0_0() { return cEmptyActionUsageParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//PerformedActionUsage ActionDefBody
		public Group getGroup_1() { return cGroup_1; }
		
		//PerformedActionUsage
		public RuleCall getPerformedActionUsageParserRuleCall_1_0() { return cPerformedActionUsageParserRuleCall_1_0; }
		
		//ActionDefBody
		public RuleCall getActionDefBodyParserRuleCall_1_1() { return cActionDefBodyParserRuleCall_1_1; }
	}
	public class PerformedActionUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PerformedActionUsage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPerformActionUsageAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cPerformActionUsageDeclarationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAcceptActionUsageAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cAcceptNodeDeclarationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSendActionUsageAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cSendNodeDeclarationParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//PerformedActionUsage SysML::ActionUsage:
		//	{SysML::PerformActionUsage} PerformActionUsageDeclaration
		//	| {SysML::AcceptActionUsage} AcceptNodeDeclaration
		//	| {SysML::SendActionUsage} SendNodeDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::PerformActionUsage} PerformActionUsageDeclaration | {SysML::AcceptActionUsage} AcceptNodeDeclaration |
		//{SysML::SendActionUsage} SendNodeDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SysML::PerformActionUsage} PerformActionUsageDeclaration
		public Group getGroup_0() { return cGroup_0; }
		
		//{SysML::PerformActionUsage}
		public Action getPerformActionUsageAction_0_0() { return cPerformActionUsageAction_0_0; }
		
		//PerformActionUsageDeclaration
		public RuleCall getPerformActionUsageDeclarationParserRuleCall_0_1() { return cPerformActionUsageDeclarationParserRuleCall_0_1; }
		
		//{SysML::AcceptActionUsage} AcceptNodeDeclaration
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::AcceptActionUsage}
		public Action getAcceptActionUsageAction_1_0() { return cAcceptActionUsageAction_1_0; }
		
		//AcceptNodeDeclaration
		public RuleCall getAcceptNodeDeclarationParserRuleCall_1_1() { return cAcceptNodeDeclarationParserRuleCall_1_1; }
		
		//{SysML::SendActionUsage} SendNodeDeclaration
		public Group getGroup_2() { return cGroup_2; }
		
		//{SysML::SendActionUsage}
		public Action getSendActionUsageAction_2_0() { return cSendActionUsageAction_2_0; }
		
		//SendNodeDeclaration
		public RuleCall getSendNodeDeclarationParserRuleCall_2_1() { return cSendNodeDeclarationParserRuleCall_2_1; }
	}
	public class EmptyActionUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EmptyActionUsage");
		private final Action cActionUsageAction = (Action)rule.eContents().get(1);
		
		//EmptyActionUsage SysML::ActionUsage:
		//	{SysML::ActionUsage};
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::ActionUsage}
		public Action getActionUsageAction() { return cActionUsageAction; }
	}
	public class EntryActionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EntryActionMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindEntryActionKindParserRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Assignment cOwnedMemberFeature_compAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedMemberFeature_compStateActionUsageParserRuleCall_2_0 = (RuleCall)cOwnedMemberFeature_compAssignment_2.eContents().get(0);
		
		///* STATE DEFINITION MEMBERSHIPS */ EntryActionMember SysML::StateSubactionMembership:
		//	DefinitionMemberPrefix kind=EntryActionKind ownedMemberFeature_comp=StateActionUsage;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionMemberPrefix kind=EntryActionKind ownedMemberFeature_comp=StateActionUsage
		public Group getGroup() { return cGroup; }
		
		//DefinitionMemberPrefix
		public RuleCall getDefinitionMemberPrefixParserRuleCall_0() { return cDefinitionMemberPrefixParserRuleCall_0; }
		
		//kind=EntryActionKind
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//EntryActionKind
		public RuleCall getKindEntryActionKindParserRuleCall_1_0() { return cKindEntryActionKindParserRuleCall_1_0; }
		
		//ownedMemberFeature_comp=StateActionUsage
		public Assignment getOwnedMemberFeature_compAssignment_2() { return cOwnedMemberFeature_compAssignment_2; }
		
		//StateActionUsage
		public RuleCall getOwnedMemberFeature_compStateActionUsageParserRuleCall_2_0() { return cOwnedMemberFeature_compStateActionUsageParserRuleCall_2_0; }
	}
	public class EntryActionKindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EntryActionKind");
		private final Keyword cEntryKeyword = (Keyword)rule.eContents().get(1);
		
		//EntryActionKind SysML::StateSubactionKind:
		//	'entry';
		@Override public ParserRule getRule() { return rule; }
		
		//'entry'
		public Keyword getEntryKeyword() { return cEntryKeyword; }
	}
	public class DoActionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.DoActionMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindDoActionKindParserRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Assignment cOwnedMemberFeature_compAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedMemberFeature_compStateActionUsageParserRuleCall_2_0 = (RuleCall)cOwnedMemberFeature_compAssignment_2.eContents().get(0);
		
		//DoActionMember SysML::StateSubactionMembership:
		//	DefinitionMemberPrefix kind=DoActionKind ownedMemberFeature_comp=StateActionUsage;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionMemberPrefix kind=DoActionKind ownedMemberFeature_comp=StateActionUsage
		public Group getGroup() { return cGroup; }
		
		//DefinitionMemberPrefix
		public RuleCall getDefinitionMemberPrefixParserRuleCall_0() { return cDefinitionMemberPrefixParserRuleCall_0; }
		
		//kind=DoActionKind
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//DoActionKind
		public RuleCall getKindDoActionKindParserRuleCall_1_0() { return cKindDoActionKindParserRuleCall_1_0; }
		
		//ownedMemberFeature_comp=StateActionUsage
		public Assignment getOwnedMemberFeature_compAssignment_2() { return cOwnedMemberFeature_compAssignment_2; }
		
		//StateActionUsage
		public RuleCall getOwnedMemberFeature_compStateActionUsageParserRuleCall_2_0() { return cOwnedMemberFeature_compStateActionUsageParserRuleCall_2_0; }
	}
	public class DoActionKindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.DoActionKind");
		private final Keyword cDoKeyword = (Keyword)rule.eContents().get(1);
		
		//DoActionKind SysML::StateSubactionKind:
		//	'do';
		@Override public ParserRule getRule() { return rule; }
		
		//'do'
		public Keyword getDoKeyword() { return cDoKeyword; }
	}
	public class ExitActionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ExitActionMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindExitActionKindParserRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Assignment cOwnedMemberFeature_compAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedMemberFeature_compStateActionUsageParserRuleCall_2_0 = (RuleCall)cOwnedMemberFeature_compAssignment_2.eContents().get(0);
		
		//ExitActionMember SysML::StateSubactionMembership:
		//	DefinitionMemberPrefix kind=ExitActionKind ownedMemberFeature_comp=StateActionUsage;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionMemberPrefix kind=ExitActionKind ownedMemberFeature_comp=StateActionUsage
		public Group getGroup() { return cGroup; }
		
		//DefinitionMemberPrefix
		public RuleCall getDefinitionMemberPrefixParserRuleCall_0() { return cDefinitionMemberPrefixParserRuleCall_0; }
		
		//kind=ExitActionKind
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//ExitActionKind
		public RuleCall getKindExitActionKindParserRuleCall_1_0() { return cKindExitActionKindParserRuleCall_1_0; }
		
		//ownedMemberFeature_comp=StateActionUsage
		public Assignment getOwnedMemberFeature_compAssignment_2() { return cOwnedMemberFeature_compAssignment_2; }
		
		//StateActionUsage
		public RuleCall getOwnedMemberFeature_compStateActionUsageParserRuleCall_2_0() { return cOwnedMemberFeature_compStateActionUsageParserRuleCall_2_0; }
	}
	public class ExitActionKindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ExitActionKind");
		private final Keyword cExitKeyword = (Keyword)rule.eContents().get(1);
		
		//ExitActionKind SysML::StateSubactionKind:
		//	'exit';
		@Override public ParserRule getRule() { return rule; }
		
		//'exit'
		public Keyword getExitKeyword() { return cExitKeyword; }
	}
	public class EntryTransitionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EntryTransitionMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOwnedMemberFeature_compAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cOwnedMemberFeature_compGuardedTargetSuccessionParserRuleCall_1_0_0 = (RuleCall)cOwnedMemberFeature_compAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cThenKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOwnedMemberFeature_compAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compTransitionSuccessionParserRuleCall_1_1_1_0 = (RuleCall)cOwnedMemberFeature_compAssignment_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//EntryTransitionMember SysML::FeatureMembership:
		//	DefinitionMemberPrefix (ownedMemberFeature_comp=GuardedTargetSuccession
		//	| 'then' ownedMemberFeature_comp=TransitionSuccession) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionMemberPrefix (ownedMemberFeature_comp=GuardedTargetSuccession | 'then'
		//ownedMemberFeature_comp=TransitionSuccession) ';'
		public Group getGroup() { return cGroup; }
		
		//DefinitionMemberPrefix
		public RuleCall getDefinitionMemberPrefixParserRuleCall_0() { return cDefinitionMemberPrefixParserRuleCall_0; }
		
		//(ownedMemberFeature_comp=GuardedTargetSuccession | 'then' ownedMemberFeature_comp=TransitionSuccession)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ownedMemberFeature_comp=GuardedTargetSuccession
		public Assignment getOwnedMemberFeature_compAssignment_1_0() { return cOwnedMemberFeature_compAssignment_1_0; }
		
		//GuardedTargetSuccession
		public RuleCall getOwnedMemberFeature_compGuardedTargetSuccessionParserRuleCall_1_0_0() { return cOwnedMemberFeature_compGuardedTargetSuccessionParserRuleCall_1_0_0; }
		
		//'then' ownedMemberFeature_comp=TransitionSuccession
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'then'
		public Keyword getThenKeyword_1_1_0() { return cThenKeyword_1_1_0; }
		
		//ownedMemberFeature_comp=TransitionSuccession
		public Assignment getOwnedMemberFeature_compAssignment_1_1_1() { return cOwnedMemberFeature_compAssignment_1_1_1; }
		
		//TransitionSuccession
		public RuleCall getOwnedMemberFeature_compTransitionSuccessionParserRuleCall_1_1_1_0() { return cOwnedMemberFeature_compTransitionSuccessionParserRuleCall_1_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class TargetTransitionSuccessionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TargetTransitionSuccessionMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedMemberFeature_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compTargetTransitionStepParserRuleCall_1_0 = (RuleCall)cOwnedMemberFeature_compAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TargetTransitionSuccessionMember SysML::FeatureMembership:
		//	DefinitionMemberPrefix ownedMemberFeature_comp=TargetTransitionStep ';';
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionMemberPrefix ownedMemberFeature_comp=TargetTransitionStep ';'
		public Group getGroup() { return cGroup; }
		
		//DefinitionMemberPrefix
		public RuleCall getDefinitionMemberPrefixParserRuleCall_0() { return cDefinitionMemberPrefixParserRuleCall_0; }
		
		//ownedMemberFeature_comp=TargetTransitionStep
		public Assignment getOwnedMemberFeature_compAssignment_1() { return cOwnedMemberFeature_compAssignment_1; }
		
		//TargetTransitionStep
		public RuleCall getOwnedMemberFeature_compTargetTransitionStepParserRuleCall_1_0() { return cOwnedMemberFeature_compTargetTransitionStepParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class TransitionStepMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TransitionStepMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedMemberFeature_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compTransitionStepParserRuleCall_1_0 = (RuleCall)cOwnedMemberFeature_compAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TransitionStepMember SysML::FeatureMembership:
		//	DefinitionMemberPrefix ownedMemberFeature_comp=TransitionStep ';';
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionMemberPrefix ownedMemberFeature_comp=TransitionStep ';'
		public Group getGroup() { return cGroup; }
		
		//DefinitionMemberPrefix
		public RuleCall getDefinitionMemberPrefixParserRuleCall_0() { return cDefinitionMemberPrefixParserRuleCall_0; }
		
		//ownedMemberFeature_comp=TransitionStep
		public Assignment getOwnedMemberFeature_compAssignment_1() { return cOwnedMemberFeature_compAssignment_1; }
		
		//TransitionStep
		public RuleCall getOwnedMemberFeature_compTransitionStepParserRuleCall_1_0() { return cOwnedMemberFeature_compTransitionStepParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ConstraintKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConstraintKeyword");
		private final Keyword cConstraintKeyword = (Keyword)rule.eContents().get(1);
		
		///* CONSTRAINT DEFINITIONS */ ConstraintKeyword:
		//	'constraint';
		@Override public ParserRule getRule() { return rule; }
		
		//'constraint'
		public Keyword getConstraintKeyword() { return cConstraintKeyword; }
	}
	public class ConstraintDefKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConstraintDefKeyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConstraintKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ConstraintDefKeyword:
		//	ConstraintKeyword 'def';
		@Override public ParserRule getRule() { return rule; }
		
		//ConstraintKeyword 'def'
		public Group getGroup() { return cGroup; }
		
		//ConstraintKeyword
		public RuleCall getConstraintKeywordParserRuleCall_0() { return cConstraintKeywordParserRuleCall_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
	}
	public class ConstraintDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConstraintDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConstraintDefDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cConstraintDefBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ConstraintDefinition SysML::ConstraintDefinition:
		//	ConstraintDefDeclaration ConstraintDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//ConstraintDefDeclaration ConstraintDefBody
		public Group getGroup() { return cGroup; }
		
		//ConstraintDefDeclaration
		public RuleCall getConstraintDefDeclarationParserRuleCall_0() { return cConstraintDefDeclarationParserRuleCall_0; }
		
		//ConstraintDefBody
		public RuleCall getConstraintDefBodyParserRuleCall_1() { return cConstraintDefBodyParserRuleCall_1; }
	}
	public class ConstraintDefDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConstraintDefDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cConstraintDefKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cIdentificationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSuperclassingListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cParameterListParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cEmptyReturnParameterPartParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//fragment ConstraintDefDeclaration returns SysML::ConstraintDefinition:
		//	DefinitionPrefix? ConstraintDefKeyword Identification
		//	SuperclassingList? ParameterList? EmptyReturnParameterPart;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionPrefix? ConstraintDefKeyword Identification SuperclassingList? ParameterList? EmptyReturnParameterPart
		public Group getGroup() { return cGroup; }
		
		//DefinitionPrefix?
		public RuleCall getDefinitionPrefixParserRuleCall_0() { return cDefinitionPrefixParserRuleCall_0; }
		
		//ConstraintDefKeyword
		public RuleCall getConstraintDefKeywordParserRuleCall_1() { return cConstraintDefKeywordParserRuleCall_1; }
		
		//Identification
		public RuleCall getIdentificationParserRuleCall_2() { return cIdentificationParserRuleCall_2; }
		
		//SuperclassingList?
		public RuleCall getSuperclassingListParserRuleCall_3() { return cSuperclassingListParserRuleCall_3; }
		
		//ParameterList?
		public RuleCall getParameterListParserRuleCall_4() { return cParameterListParserRuleCall_4; }
		
		//EmptyReturnParameterPart
		public RuleCall getEmptyReturnParameterPartParserRuleCall_5() { return cEmptyReturnParameterPartParserRuleCall_5; }
	}
	public class ConstraintDefBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConstraintDefBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cConstraintDefMembersParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment ConstraintDefBody returns SysML::Type:
		//	';' | '{' ConstraintDefMembers '}';
		@Override public ParserRule getRule() { return rule; }
		
		//';' | '{' ConstraintDefMembers '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' ConstraintDefMembers '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//ConstraintDefMembers
		public RuleCall getConstraintDefMembersParserRuleCall_1_1() { return cConstraintDefMembersParserRuleCall_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class ConstraintDefMembersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConstraintDefMembers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionBodyItemParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compConstraintExpressionMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		
		//fragment ConstraintDefMembers returns SysML::Type:
		//	DefinitionBodyItem*
		//	ownedFeatureMembership_comp+=ConstraintExpressionMember?;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionBodyItem* ownedFeatureMembership_comp+=ConstraintExpressionMember?
		public Group getGroup() { return cGroup; }
		
		//DefinitionBodyItem*
		public RuleCall getDefinitionBodyItemParserRuleCall_0() { return cDefinitionBodyItemParserRuleCall_0; }
		
		//ownedFeatureMembership_comp+=ConstraintExpressionMember?
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//ConstraintExpressionMember
		public RuleCall getOwnedFeatureMembership_compConstraintExpressionMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compConstraintExpressionMemberParserRuleCall_1_0; }
	}
	public class ConstraintExpressionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConstraintExpressionMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedMemberFeature_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compExpressionParserRuleCall_1_0 = (RuleCall)cOwnedMemberFeature_compAssignment_1.eContents().get(0);
		
		///* CONSTRAINT DEFINITION MEMBERSHIPS */ ConstraintExpressionMember SysML::FeatureMembership:
		//	DefinitionMemberPrefix ownedMemberFeature_comp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionMemberPrefix ownedMemberFeature_comp=Expression
		public Group getGroup() { return cGroup; }
		
		//DefinitionMemberPrefix
		public RuleCall getDefinitionMemberPrefixParserRuleCall_0() { return cDefinitionMemberPrefixParserRuleCall_0; }
		
		//ownedMemberFeature_comp=Expression
		public Assignment getOwnedMemberFeature_compAssignment_1() { return cOwnedMemberFeature_compAssignment_1; }
		
		//Expression
		public RuleCall getOwnedMemberFeature_compExpressionParserRuleCall_1_0() { return cOwnedMemberFeature_compExpressionParserRuleCall_1_0; }
	}
	public class RequirementKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RequirementKeyword");
		private final Keyword cRequirementKeyword = (Keyword)rule.eContents().get(1);
		
		///* REQUIREMENT DEFINITIONS */ RequirementKeyword:
		//	'requirement';
		@Override public ParserRule getRule() { return rule; }
		
		//'requirement'
		public Keyword getRequirementKeyword() { return cRequirementKeyword; }
	}
	public class RequirementDefKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RequirementDefKeyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRequirementKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RequirementDefKeyword:
		//	RequirementKeyword 'def';
		@Override public ParserRule getRule() { return rule; }
		
		//RequirementKeyword 'def'
		public Group getGroup() { return cGroup; }
		
		//RequirementKeyword
		public RuleCall getRequirementKeywordParserRuleCall_0() { return cRequirementKeywordParserRuleCall_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
	}
	public class RequirementDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RequirementDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRequirementDefDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRequirementDefBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//RequirementDefinition SysML::RequirementDefinition:
		//	RequirementDefDeclaration RequirementDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//RequirementDefDeclaration RequirementDefBody
		public Group getGroup() { return cGroup; }
		
		//RequirementDefDeclaration
		public RuleCall getRequirementDefDeclarationParserRuleCall_0() { return cRequirementDefDeclarationParserRuleCall_0; }
		
		//RequirementDefBody
		public RuleCall getRequirementDefBodyParserRuleCall_1() { return cRequirementDefBodyParserRuleCall_1; }
	}
	public class RequirementDefDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RequirementDefDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRequirementDefKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cIdentificationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSuperclassingListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cParameterListParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cEmptyReturnParameterPartParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//fragment RequirementDefDeclaration returns SysML::RequirementDefinition:
		//	DefinitionPrefix? RequirementDefKeyword Identification
		//	SuperclassingList? ParameterList? EmptyReturnParameterPart;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionPrefix? RequirementDefKeyword Identification SuperclassingList? ParameterList? EmptyReturnParameterPart
		public Group getGroup() { return cGroup; }
		
		//DefinitionPrefix?
		public RuleCall getDefinitionPrefixParserRuleCall_0() { return cDefinitionPrefixParserRuleCall_0; }
		
		//RequirementDefKeyword
		public RuleCall getRequirementDefKeywordParserRuleCall_1() { return cRequirementDefKeywordParserRuleCall_1; }
		
		//Identification
		public RuleCall getIdentificationParserRuleCall_2() { return cIdentificationParserRuleCall_2; }
		
		//SuperclassingList?
		public RuleCall getSuperclassingListParserRuleCall_3() { return cSuperclassingListParserRuleCall_3; }
		
		//ParameterList?
		public RuleCall getParameterListParserRuleCall_4() { return cParameterListParserRuleCall_4; }
		
		//EmptyReturnParameterPart
		public RuleCall getEmptyReturnParameterPartParserRuleCall_5() { return cEmptyReturnParameterPartParserRuleCall_5; }
	}
	public class RequirementDefBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RequirementDefBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cRequirementDefBodyItemParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment RequirementDefBody returns SysML::Type:
		//	';' | '{' => RequirementDefBodyItem* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//';' | '{' => RequirementDefBodyItem* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' => RequirementDefBodyItem* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//=> RequirementDefBodyItem*
		public RuleCall getRequirementDefBodyItemParserRuleCall_1_1() { return cRequirementDefBodyItemParserRuleCall_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class RequirementDefBodyItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RequirementDefBodyItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefinitionBodyItemParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compSubjectMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compRequirementConstraintMemberParserRuleCall_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_2.eContents().get(0);
		
		//fragment RequirementDefBodyItem returns SysML::Type:
		//	DefinitionBodyItem
		//	| ownedFeatureMembership_comp+=SubjectMember
		//	| ownedFeatureMembership_comp+=RequirementConstraintMember;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionBodyItem | ownedFeatureMembership_comp+=SubjectMember |
		//ownedFeatureMembership_comp+=RequirementConstraintMember
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DefinitionBodyItem
		public RuleCall getDefinitionBodyItemParserRuleCall_0() { return cDefinitionBodyItemParserRuleCall_0; }
		
		//ownedFeatureMembership_comp+=SubjectMember
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//SubjectMember
		public RuleCall getOwnedFeatureMembership_compSubjectMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compSubjectMemberParserRuleCall_1_0; }
		
		//ownedFeatureMembership_comp+=RequirementConstraintMember
		public Assignment getOwnedFeatureMembership_compAssignment_2() { return cOwnedFeatureMembership_compAssignment_2; }
		
		//RequirementConstraintMember
		public RuleCall getOwnedFeatureMembership_compRequirementConstraintMemberParserRuleCall_2_0() { return cOwnedFeatureMembership_compRequirementConstraintMemberParserRuleCall_2_0; }
	}
	public class SubjectUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SubjectUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cUsageParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SubjectUsage SysML::ReferenceUsage:
		//	'subject' Usage;
		@Override public ParserRule getRule() { return rule; }
		
		//'subject' Usage
		public Group getGroup() { return cGroup; }
		
		//'subject'
		public Keyword getSubjectKeyword_0() { return cSubjectKeyword_0; }
		
		//Usage
		public RuleCall getUsageParserRuleCall_1() { return cUsageParserRuleCall_1; }
	}
	public class RequirementConstraintUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RequirementConstraintUsage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOwnedRelationship_compSubsetParserRuleCall_0_0_0 = (RuleCall)cOwnedRelationship_compAssignment_0_0.eContents().get(0);
		private final RuleCall cUsageSpecializationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cConstraintParameterPartParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cRequirementDefBodyParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cConstraintKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cUsageDeclarationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cConstraintParameterPartParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cConstraintDefBodyParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//RequirementConstraintUsage SysML::ConstraintUsage:
		//	ownedRelationship_comp+=Subset UsageSpecialization*
		//	ConstraintParameterPart RequirementDefBody
		//	| 'constraint' UsageDeclaration?
		//	ConstraintParameterPart ConstraintDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=Subset UsageSpecialization* ConstraintParameterPart RequirementDefBody | 'constraint'
		//UsageDeclaration? ConstraintParameterPart ConstraintDefBody
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ownedRelationship_comp+=Subset UsageSpecialization* ConstraintParameterPart RequirementDefBody
		public Group getGroup_0() { return cGroup_0; }
		
		//ownedRelationship_comp+=Subset
		public Assignment getOwnedRelationship_compAssignment_0_0() { return cOwnedRelationship_compAssignment_0_0; }
		
		//Subset
		public RuleCall getOwnedRelationship_compSubsetParserRuleCall_0_0_0() { return cOwnedRelationship_compSubsetParserRuleCall_0_0_0; }
		
		//UsageSpecialization*
		public RuleCall getUsageSpecializationParserRuleCall_0_1() { return cUsageSpecializationParserRuleCall_0_1; }
		
		//ConstraintParameterPart
		public RuleCall getConstraintParameterPartParserRuleCall_0_2() { return cConstraintParameterPartParserRuleCall_0_2; }
		
		//RequirementDefBody
		public RuleCall getRequirementDefBodyParserRuleCall_0_3() { return cRequirementDefBodyParserRuleCall_0_3; }
		
		//'constraint' UsageDeclaration? ConstraintParameterPart ConstraintDefBody
		public Group getGroup_1() { return cGroup_1; }
		
		//'constraint'
		public Keyword getConstraintKeyword_1_0() { return cConstraintKeyword_1_0; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_1_1() { return cUsageDeclarationParserRuleCall_1_1; }
		
		//ConstraintParameterPart
		public RuleCall getConstraintParameterPartParserRuleCall_1_2() { return cConstraintParameterPartParserRuleCall_1_2; }
		
		//ConstraintDefBody
		public RuleCall getConstraintDefBodyParserRuleCall_1_3() { return cConstraintDefBodyParserRuleCall_1_3; }
	}
	public class SubjectMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SubjectMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedSubjectParameter_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedSubjectParameter_compSubjectUsageParserRuleCall_1_0 = (RuleCall)cOwnedSubjectParameter_compAssignment_1.eContents().get(0);
		
		///* REQUIREMENT DEFINITION MEMBERSHIPS */ SubjectMember SysML::SubjectMembership:
		//	DefinitionMemberPrefix ownedSubjectParameter_comp=SubjectUsage;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionMemberPrefix ownedSubjectParameter_comp=SubjectUsage
		public Group getGroup() { return cGroup; }
		
		//DefinitionMemberPrefix
		public RuleCall getDefinitionMemberPrefixParserRuleCall_0() { return cDefinitionMemberPrefixParserRuleCall_0; }
		
		//ownedSubjectParameter_comp=SubjectUsage
		public Assignment getOwnedSubjectParameter_compAssignment_1() { return cOwnedSubjectParameter_compAssignment_1; }
		
		//SubjectUsage
		public RuleCall getOwnedSubjectParameter_compSubjectUsageParserRuleCall_1_0() { return cOwnedSubjectParameter_compSubjectUsageParserRuleCall_1_0; }
	}
	public class RequirementConstraintMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RequirementConstraintMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindRequirementConstraintKindEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Assignment cOwnedMemberFeature_compAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedMemberFeature_compRequirementConstraintUsageParserRuleCall_2_0 = (RuleCall)cOwnedMemberFeature_compAssignment_2.eContents().get(0);
		
		//RequirementConstraintMember SysML::RequirementConstraintMembership:
		//	DefinitionMemberPrefix kind=RequirementConstraintKind
		//	ownedMemberFeature_comp=RequirementConstraintUsage;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionMemberPrefix kind=RequirementConstraintKind ownedMemberFeature_comp=RequirementConstraintUsage
		public Group getGroup() { return cGroup; }
		
		//DefinitionMemberPrefix
		public RuleCall getDefinitionMemberPrefixParserRuleCall_0() { return cDefinitionMemberPrefixParserRuleCall_0; }
		
		//kind=RequirementConstraintKind
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//RequirementConstraintKind
		public RuleCall getKindRequirementConstraintKindEnumRuleCall_1_0() { return cKindRequirementConstraintKindEnumRuleCall_1_0; }
		
		//ownedMemberFeature_comp=RequirementConstraintUsage
		public Assignment getOwnedMemberFeature_compAssignment_2() { return cOwnedMemberFeature_compAssignment_2; }
		
		//RequirementConstraintUsage
		public RuleCall getOwnedMemberFeature_compRequirementConstraintUsageParserRuleCall_2_0() { return cOwnedMemberFeature_compRequirementConstraintUsageParserRuleCall_2_0; }
	}
	public class CaseKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CaseKeyword");
		private final Keyword cCaseKeyword = (Keyword)rule.eContents().get(1);
		
		///* CASE DEFINITIONS */ CaseKeyword:
		//	'case';
		@Override public ParserRule getRule() { return rule; }
		
		//'case'
		public Keyword getCaseKeyword() { return cCaseKeyword; }
	}
	public class CaseDefKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CaseDefKeyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCaseKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CaseDefKeyword:
		//	CaseKeyword 'def';
		@Override public ParserRule getRule() { return rule; }
		
		//CaseKeyword 'def'
		public Group getGroup() { return cGroup; }
		
		//CaseKeyword
		public RuleCall getCaseKeywordParserRuleCall_0() { return cCaseKeywordParserRuleCall_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
	}
	public class CaseDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CaseDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCaseDefDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCaseDefBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//CaseDefinition SysML::CaseDefinition:
		//	CaseDefDeclaration CaseDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//CaseDefDeclaration CaseDefBody
		public Group getGroup() { return cGroup; }
		
		//CaseDefDeclaration
		public RuleCall getCaseDefDeclarationParserRuleCall_0() { return cCaseDefDeclarationParserRuleCall_0; }
		
		//CaseDefBody
		public RuleCall getCaseDefBodyParserRuleCall_1() { return cCaseDefBodyParserRuleCall_1; }
	}
	public class CaseDefDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CaseDefDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCaseDefKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cIdentificationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSuperclassingListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cParameterPartParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//fragment CaseDefDeclaration returns SysML::CaseDefinition:
		//	DefinitionPrefix? CaseDefKeyword Identification
		//	SuperclassingList? ParameterPart;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionPrefix? CaseDefKeyword Identification SuperclassingList? ParameterPart
		public Group getGroup() { return cGroup; }
		
		//DefinitionPrefix?
		public RuleCall getDefinitionPrefixParserRuleCall_0() { return cDefinitionPrefixParserRuleCall_0; }
		
		//CaseDefKeyword
		public RuleCall getCaseDefKeywordParserRuleCall_1() { return cCaseDefKeywordParserRuleCall_1; }
		
		//Identification
		public RuleCall getIdentificationParserRuleCall_2() { return cIdentificationParserRuleCall_2; }
		
		//SuperclassingList?
		public RuleCall getSuperclassingListParserRuleCall_3() { return cSuperclassingListParserRuleCall_3; }
		
		//ParameterPart
		public RuleCall getParameterPartParserRuleCall_4() { return cParameterPartParserRuleCall_4; }
	}
	public class CaseDefBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CaseDefBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cCaseDefBodyItemParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compExpressionMemberParserRuleCall_1_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//fragment CaseDefBody returns SysML::Type:
		//	';'
		//	| '{' => CaseDefBodyItem*
		//	ownedFeatureMembership_comp+=ExpressionMember?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//';' | '{' => CaseDefBodyItem* ownedFeatureMembership_comp+=ExpressionMember? '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' => CaseDefBodyItem* ownedFeatureMembership_comp+=ExpressionMember? '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//=> CaseDefBodyItem*
		public RuleCall getCaseDefBodyItemParserRuleCall_1_1() { return cCaseDefBodyItemParserRuleCall_1_1; }
		
		//ownedFeatureMembership_comp+=ExpressionMember?
		public Assignment getOwnedFeatureMembership_compAssignment_1_2() { return cOwnedFeatureMembership_compAssignment_1_2; }
		
		//ExpressionMember
		public RuleCall getOwnedFeatureMembership_compExpressionMemberParserRuleCall_1_2_0() { return cOwnedFeatureMembership_compExpressionMemberParserRuleCall_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class CaseDefBodyItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CaseDefBodyItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCalculationDefBodyItemParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compSubjectMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compObjectiveMemberParserRuleCall_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_2.eContents().get(0);
		
		//fragment CaseDefBodyItem returns SysML::Type:
		//	CalculationDefBodyItem
		//	| ownedFeatureMembership_comp+=SubjectMember
		//	| ownedFeatureMembership_comp+=ObjectiveMember;
		@Override public ParserRule getRule() { return rule; }
		
		//CalculationDefBodyItem | ownedFeatureMembership_comp+=SubjectMember | ownedFeatureMembership_comp+=ObjectiveMember
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CalculationDefBodyItem
		public RuleCall getCalculationDefBodyItemParserRuleCall_0() { return cCalculationDefBodyItemParserRuleCall_0; }
		
		//ownedFeatureMembership_comp+=SubjectMember
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//SubjectMember
		public RuleCall getOwnedFeatureMembership_compSubjectMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compSubjectMemberParserRuleCall_1_0; }
		
		//ownedFeatureMembership_comp+=ObjectiveMember
		public Assignment getOwnedFeatureMembership_compAssignment_2() { return cOwnedFeatureMembership_compAssignment_2; }
		
		//ObjectiveMember
		public RuleCall getOwnedFeatureMembership_compObjectiveMemberParserRuleCall_2_0() { return cOwnedFeatureMembership_compObjectiveMemberParserRuleCall_2_0; }
	}
	public class ObjectiveRequirementUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ObjectiveRequirementUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRequirementUsageDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRequirementDefBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ObjectiveRequirementUsage SysML::RequirementUsage:
		//	RequirementUsageDeclaration RequirementDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//RequirementUsageDeclaration RequirementDefBody
		public Group getGroup() { return cGroup; }
		
		//RequirementUsageDeclaration
		public RuleCall getRequirementUsageDeclarationParserRuleCall_0() { return cRequirementUsageDeclarationParserRuleCall_0; }
		
		//RequirementDefBody
		public RuleCall getRequirementDefBodyParserRuleCall_1() { return cRequirementDefBodyParserRuleCall_1; }
	}
	public class ObjectiveMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ObjectiveMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cObjectiveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedObjectiveRequirement_compAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedObjectiveRequirement_compObjectiveRequirementUsageParserRuleCall_2_0 = (RuleCall)cOwnedObjectiveRequirement_compAssignment_2.eContents().get(0);
		
		///* CASE DEFINITION MEMBERSHIPS */ ObjectiveMember SysML::ObjectiveMembership:
		//	DefinitionMemberPrefix 'objective' ownedObjectiveRequirement_comp=ObjectiveRequirementUsage;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionMemberPrefix 'objective' ownedObjectiveRequirement_comp=ObjectiveRequirementUsage
		public Group getGroup() { return cGroup; }
		
		//DefinitionMemberPrefix
		public RuleCall getDefinitionMemberPrefixParserRuleCall_0() { return cDefinitionMemberPrefixParserRuleCall_0; }
		
		//'objective'
		public Keyword getObjectiveKeyword_1() { return cObjectiveKeyword_1; }
		
		//ownedObjectiveRequirement_comp=ObjectiveRequirementUsage
		public Assignment getOwnedObjectiveRequirement_compAssignment_2() { return cOwnedObjectiveRequirement_compAssignment_2; }
		
		//ObjectiveRequirementUsage
		public RuleCall getOwnedObjectiveRequirement_compObjectiveRequirementUsageParserRuleCall_2_0() { return cOwnedObjectiveRequirement_compObjectiveRequirementUsageParserRuleCall_2_0; }
	}
	public class AnalysisCaseKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AnalysisCaseKeyword");
		private final Keyword cAnalysisKeyword = (Keyword)rule.eContents().get(1);
		
		///* ANALYSIS CASE DEFINITIONS */ AnalysisCaseKeyword:
		//	'analysis';
		@Override public ParserRule getRule() { return rule; }
		
		//'analysis'
		public Keyword getAnalysisKeyword() { return cAnalysisKeyword; }
	}
	public class AnalysisCaseDefKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AnalysisCaseDefKeyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAnalysisCaseKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AnalysisCaseDefKeyword:
		//	AnalysisCaseKeyword 'def';
		@Override public ParserRule getRule() { return rule; }
		
		//AnalysisCaseKeyword 'def'
		public Group getGroup() { return cGroup; }
		
		//AnalysisCaseKeyword
		public RuleCall getAnalysisCaseKeywordParserRuleCall_0() { return cAnalysisCaseKeywordParserRuleCall_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
	}
	public class AnalysisCaseDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AnalysisCaseDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAnalysisCaseDefDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCaseDefBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//AnalysisCaseDefinition SysML::AnalysisCaseDefinition:
		//	AnalysisCaseDefDeclaration CaseDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//AnalysisCaseDefDeclaration CaseDefBody
		public Group getGroup() { return cGroup; }
		
		//AnalysisCaseDefDeclaration
		public RuleCall getAnalysisCaseDefDeclarationParserRuleCall_0() { return cAnalysisCaseDefDeclarationParserRuleCall_0; }
		
		//CaseDefBody
		public RuleCall getCaseDefBodyParserRuleCall_1() { return cCaseDefBodyParserRuleCall_1; }
	}
	public class AnalysisCaseDefDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AnalysisCaseDefDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAnalysisCaseDefKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cIdentificationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSuperclassingListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cParameterPartParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//fragment AnalysisCaseDefDeclaration returns SysML::AnalysisCaseDefinition:
		//	DefinitionPrefix? AnalysisCaseDefKeyword Identification
		//	SuperclassingList? ParameterPart;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionPrefix? AnalysisCaseDefKeyword Identification SuperclassingList? ParameterPart
		public Group getGroup() { return cGroup; }
		
		//DefinitionPrefix?
		public RuleCall getDefinitionPrefixParserRuleCall_0() { return cDefinitionPrefixParserRuleCall_0; }
		
		//AnalysisCaseDefKeyword
		public RuleCall getAnalysisCaseDefKeywordParserRuleCall_1() { return cAnalysisCaseDefKeywordParserRuleCall_1; }
		
		//Identification
		public RuleCall getIdentificationParserRuleCall_2() { return cIdentificationParserRuleCall_2; }
		
		//SuperclassingList?
		public RuleCall getSuperclassingListParserRuleCall_3() { return cSuperclassingListParserRuleCall_3; }
		
		//ParameterPart
		public RuleCall getParameterPartParserRuleCall_4() { return cParameterPartParserRuleCall_4; }
	}
	public class VerificationCaseKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.VerificationCaseKeyword");
		private final Keyword cVerificationKeyword = (Keyword)rule.eContents().get(1);
		
		///* VERIFICATION CASE DEFINITIONS */ VerificationCaseKeyword:
		//	'verification';
		@Override public ParserRule getRule() { return rule; }
		
		//'verification'
		public Keyword getVerificationKeyword() { return cVerificationKeyword; }
	}
	public class VerificationCaseDefKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.VerificationCaseDefKeyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVerificationCaseKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VerificationCaseDefKeyword:
		//	VerificationCaseKeyword 'def';
		@Override public ParserRule getRule() { return rule; }
		
		//VerificationCaseKeyword 'def'
		public Group getGroup() { return cGroup; }
		
		//VerificationCaseKeyword
		public RuleCall getVerificationCaseKeywordParserRuleCall_0() { return cVerificationCaseKeywordParserRuleCall_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
	}
	public class VerificationCaseDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.VerificationCaseDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVerificationCaseDefDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCaseDefBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//VerificationCaseDefinition SysML::VerificationCaseDefinition:
		//	VerificationCaseDefDeclaration CaseDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//VerificationCaseDefDeclaration CaseDefBody
		public Group getGroup() { return cGroup; }
		
		//VerificationCaseDefDeclaration
		public RuleCall getVerificationCaseDefDeclarationParserRuleCall_0() { return cVerificationCaseDefDeclarationParserRuleCall_0; }
		
		//CaseDefBody
		public RuleCall getCaseDefBodyParserRuleCall_1() { return cCaseDefBodyParserRuleCall_1; }
	}
	public class VerificationCaseDefDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.VerificationCaseDefDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cVerificationCaseDefKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cIdentificationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSuperclassingListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cParameterPartParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//fragment VerificationCaseDefDeclaration returns SysML::VerificationCaseDefinition:
		//	DefinitionPrefix? VerificationCaseDefKeyword Identification
		//	SuperclassingList? ParameterPart;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionPrefix? VerificationCaseDefKeyword Identification SuperclassingList? ParameterPart
		public Group getGroup() { return cGroup; }
		
		//DefinitionPrefix?
		public RuleCall getDefinitionPrefixParserRuleCall_0() { return cDefinitionPrefixParserRuleCall_0; }
		
		//VerificationCaseDefKeyword
		public RuleCall getVerificationCaseDefKeywordParserRuleCall_1() { return cVerificationCaseDefKeywordParserRuleCall_1; }
		
		//Identification
		public RuleCall getIdentificationParserRuleCall_2() { return cIdentificationParserRuleCall_2; }
		
		//SuperclassingList?
		public RuleCall getSuperclassingListParserRuleCall_3() { return cSuperclassingListParserRuleCall_3; }
		
		//ParameterPart
		public RuleCall getParameterPartParserRuleCall_4() { return cParameterPartParserRuleCall_4; }
	}
	public class ViewKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewKeyword");
		private final Keyword cViewKeyword = (Keyword)rule.eContents().get(1);
		
		///* VIEW DEFINITION */ ViewKeyword:
		//	'view';
		@Override public ParserRule getRule() { return rule; }
		
		//'view'
		public Keyword getViewKeyword() { return cViewKeyword; }
	}
	public class ViewDefKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewDefKeyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cViewKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ViewDefKeyword:
		//	ViewKeyword 'def';
		@Override public ParserRule getRule() { return rule; }
		
		//ViewKeyword 'def'
		public Group getGroup() { return cGroup; }
		
		//ViewKeyword
		public RuleCall getViewKeywordParserRuleCall_0() { return cViewKeywordParserRuleCall_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
	}
	public class ViewDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cViewDefDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDefinitionBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ViewDefinition SysML::ViewDefinition:
		//	ViewDefDeclaration DefinitionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//ViewDefDeclaration DefinitionBody
		public Group getGroup() { return cGroup; }
		
		//ViewDefDeclaration
		public RuleCall getViewDefDeclarationParserRuleCall_0() { return cViewDefDeclarationParserRuleCall_0; }
		
		//DefinitionBody
		public RuleCall getDefinitionBodyParserRuleCall_1() { return cDefinitionBodyParserRuleCall_1; }
	}
	public class ViewDefDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewDefDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cViewDefKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationCompletionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment ViewDefDeclaration returns SysML::ViewDefinition:
		//	DefinitionPrefix? ViewDefKeyword ClassifierDeclarationCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionPrefix? ViewDefKeyword ClassifierDeclarationCompletion
		public Group getGroup() { return cGroup; }
		
		//DefinitionPrefix?
		public RuleCall getDefinitionPrefixParserRuleCall_0() { return cDefinitionPrefixParserRuleCall_0; }
		
		//ViewDefKeyword
		public RuleCall getViewDefKeywordParserRuleCall_1() { return cViewDefKeywordParserRuleCall_1; }
		
		//ClassifierDeclarationCompletion
		public RuleCall getClassifierDeclarationCompletionParserRuleCall_2() { return cClassifierDeclarationCompletionParserRuleCall_2; }
	}
	public class ViewpointKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewpointKeyword");
		private final Keyword cViewpointKeyword = (Keyword)rule.eContents().get(1);
		
		///* VIEWPOINT DEFINITION */ ViewpointKeyword:
		//	'viewpoint';
		@Override public ParserRule getRule() { return rule; }
		
		//'viewpoint'
		public Keyword getViewpointKeyword() { return cViewpointKeyword; }
	}
	public class ViewpointDefKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewpointDefKeyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cViewpointKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ViewpointDefKeyword:
		//	ViewpointKeyword 'def';
		@Override public ParserRule getRule() { return rule; }
		
		//ViewpointKeyword 'def'
		public Group getGroup() { return cGroup; }
		
		//ViewpointKeyword
		public RuleCall getViewpointKeywordParserRuleCall_0() { return cViewpointKeywordParserRuleCall_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
	}
	public class ViewpointDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewpointDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cViewpointDefDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRequirementDefBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ViewpointDefinition SysML::ViewpointDefinition:
		//	ViewpointDefDeclaration RequirementDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//ViewpointDefDeclaration RequirementDefBody
		public Group getGroup() { return cGroup; }
		
		//ViewpointDefDeclaration
		public RuleCall getViewpointDefDeclarationParserRuleCall_0() { return cViewpointDefDeclarationParserRuleCall_0; }
		
		//RequirementDefBody
		public RuleCall getRequirementDefBodyParserRuleCall_1() { return cRequirementDefBodyParserRuleCall_1; }
	}
	public class ViewpointDefDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewpointDefDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cViewpointDefKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cIdentificationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSuperclassingListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cParameterListParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cEmptyReturnParameterPartParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//fragment ViewpointDefDeclaration returns SysML::ViewpointDefinition:
		//	DefinitionPrefix? ViewpointDefKeyword Identification
		//	SuperclassingList? ParameterList? EmptyReturnParameterPart;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionPrefix? ViewpointDefKeyword Identification SuperclassingList? ParameterList? EmptyReturnParameterPart
		public Group getGroup() { return cGroup; }
		
		//DefinitionPrefix?
		public RuleCall getDefinitionPrefixParserRuleCall_0() { return cDefinitionPrefixParserRuleCall_0; }
		
		//ViewpointDefKeyword
		public RuleCall getViewpointDefKeywordParserRuleCall_1() { return cViewpointDefKeywordParserRuleCall_1; }
		
		//Identification
		public RuleCall getIdentificationParserRuleCall_2() { return cIdentificationParserRuleCall_2; }
		
		//SuperclassingList?
		public RuleCall getSuperclassingListParserRuleCall_3() { return cSuperclassingListParserRuleCall_3; }
		
		//ParameterList?
		public RuleCall getParameterListParserRuleCall_4() { return cParameterListParserRuleCall_4; }
		
		//EmptyReturnParameterPart
		public RuleCall getEmptyReturnParameterPartParserRuleCall_5() { return cEmptyReturnParameterPartParserRuleCall_5; }
	}
	public class RenderingKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RenderingKeyword");
		private final Keyword cRenderingKeyword = (Keyword)rule.eContents().get(1);
		
		///* RENDERING DEFINITION */ RenderingKeyword:
		//	'rendering';
		@Override public ParserRule getRule() { return rule; }
		
		//'rendering'
		public Keyword getRenderingKeyword() { return cRenderingKeyword; }
	}
	public class RenderingDefKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RenderingDefKeyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRenderingKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RenderingDefKeyword:
		//	RenderingKeyword 'def';
		@Override public ParserRule getRule() { return rule; }
		
		//RenderingKeyword 'def'
		public Group getGroup() { return cGroup; }
		
		//RenderingKeyword
		public RuleCall getRenderingKeywordParserRuleCall_0() { return cRenderingKeywordParserRuleCall_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
	}
	public class RenderingDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RenderingDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRenderingDefDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDefinitionBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//RenderingDefinition SysML::RenderingDefinition:
		//	RenderingDefDeclaration DefinitionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//RenderingDefDeclaration DefinitionBody
		public Group getGroup() { return cGroup; }
		
		//RenderingDefDeclaration
		public RuleCall getRenderingDefDeclarationParserRuleCall_0() { return cRenderingDefDeclarationParserRuleCall_0; }
		
		//DefinitionBody
		public RuleCall getDefinitionBodyParserRuleCall_1() { return cDefinitionBodyParserRuleCall_1; }
	}
	public class RenderingDefDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RenderingDefDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinitionPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRenderingDefKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationCompletionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment RenderingDefDeclaration returns SysML::RenderingDefinition:
		//	DefinitionPrefix? RenderingDefKeyword ClassifierDeclarationCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionPrefix? RenderingDefKeyword ClassifierDeclarationCompletion
		public Group getGroup() { return cGroup; }
		
		//DefinitionPrefix?
		public RuleCall getDefinitionPrefixParserRuleCall_0() { return cDefinitionPrefixParserRuleCall_0; }
		
		//RenderingDefKeyword
		public RuleCall getRenderingDefKeywordParserRuleCall_1() { return cRenderingDefKeywordParserRuleCall_1; }
		
		//ClassifierDeclarationCompletion
		public RuleCall getClassifierDeclarationCompletionParserRuleCall_2() { return cClassifierDeclarationCompletionParserRuleCall_2; }
	}
	public class UsagePrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.UsagePrefix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Assignment cIsVariationAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cIsVariationVariationKeyword_1_0 = (Keyword)cIsVariationAssignment_1.eContents().get(0);
		
		///* USAGES */ fragment UsagePrefix returns SysML::Usage:
		//	isAbstract?='abstract' | isVariation?='variation';
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract' | isVariation?='variation'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//isAbstract?='abstract'
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//isVariation?='variation'
		public Assignment getIsVariationAssignment_1() { return cIsVariationAssignment_1; }
		
		//'variation'
		public Keyword getIsVariationVariationKeyword_1_0() { return cIsVariationVariationKeyword_1_0; }
	}
	public class UsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Usage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cUsageCompletionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fragment Usage returns SysML::Usage:
		//	UsageDeclaration? UsageCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//UsageDeclaration? UsageCompletion
		public Group getGroup() { return cGroup; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_0() { return cUsageDeclarationParserRuleCall_0; }
		
		//UsageCompletion
		public RuleCall getUsageCompletionParserRuleCall_1() { return cUsageCompletionParserRuleCall_1; }
	}
	public class UsageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.UsageDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cUsageSpecializationPartParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cSubsettingsParserRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cRedefinitionsParserRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cUsageSpecializationPartParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cTypingsParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cMultiplicityPartParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cUsageSpecializationParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cMultiplicityPartParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cUsageSpecializationParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//fragment UsageDeclaration returns SysML::Feature:
		//	Identification UsageSpecializationPart?
		//	| (Subsettings | Redefinitions) UsageSpecializationPart?
		//	| Typings MultiplicityPart? UsageSpecialization*
		//	| MultiplicityPart UsageSpecialization*;
		@Override public ParserRule getRule() { return rule; }
		
		//Identification UsageSpecializationPart? | (Subsettings | Redefinitions) UsageSpecializationPart? | Typings
		//MultiplicityPart? UsageSpecialization* | MultiplicityPart UsageSpecialization*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Identification UsageSpecializationPart?
		public Group getGroup_0() { return cGroup_0; }
		
		//Identification
		public RuleCall getIdentificationParserRuleCall_0_0() { return cIdentificationParserRuleCall_0_0; }
		
		//UsageSpecializationPart?
		public RuleCall getUsageSpecializationPartParserRuleCall_0_1() { return cUsageSpecializationPartParserRuleCall_0_1; }
		
		//(Subsettings | Redefinitions) UsageSpecializationPart?
		public Group getGroup_1() { return cGroup_1; }
		
		//(Subsettings | Redefinitions)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//Subsettings
		public RuleCall getSubsettingsParserRuleCall_1_0_0() { return cSubsettingsParserRuleCall_1_0_0; }
		
		//Redefinitions
		public RuleCall getRedefinitionsParserRuleCall_1_0_1() { return cRedefinitionsParserRuleCall_1_0_1; }
		
		//UsageSpecializationPart?
		public RuleCall getUsageSpecializationPartParserRuleCall_1_1() { return cUsageSpecializationPartParserRuleCall_1_1; }
		
		//Typings MultiplicityPart? UsageSpecialization*
		public Group getGroup_2() { return cGroup_2; }
		
		//Typings
		public RuleCall getTypingsParserRuleCall_2_0() { return cTypingsParserRuleCall_2_0; }
		
		//MultiplicityPart?
		public RuleCall getMultiplicityPartParserRuleCall_2_1() { return cMultiplicityPartParserRuleCall_2_1; }
		
		//UsageSpecialization*
		public RuleCall getUsageSpecializationParserRuleCall_2_2() { return cUsageSpecializationParserRuleCall_2_2; }
		
		//MultiplicityPart UsageSpecialization*
		public Group getGroup_3() { return cGroup_3; }
		
		//MultiplicityPart
		public RuleCall getMultiplicityPartParserRuleCall_3_0() { return cMultiplicityPartParserRuleCall_3_0; }
		
		//UsageSpecialization*
		public RuleCall getUsageSpecializationParserRuleCall_3_1() { return cUsageSpecializationParserRuleCall_3_1; }
	}
	public class UsageSpecializationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.UsageSpecializationPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cSubsettingsParserRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cRedefinitionsParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final Group cGroup_0_0_2 = (Group)cAlternatives_0_0.eContents().get(2);
		private final RuleCall cTypingsParserRuleCall_0_0_2_0 = (RuleCall)cGroup_0_0_2.eContents().get(0);
		private final RuleCall cMultiplicityPartParserRuleCall_0_0_2_1 = (RuleCall)cGroup_0_0_2.eContents().get(1);
		private final RuleCall cUsageSpecializationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cMultiplicityPartParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cUsageSpecializationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//fragment UsageSpecializationPart returns SysML::Feature:
		//	(Subsettings | Redefinitions | Typings MultiplicityPart?) UsageSpecialization*
		//	| MultiplicityPart UsageSpecialization*;
		@Override public ParserRule getRule() { return rule; }
		
		//(Subsettings | Redefinitions | Typings MultiplicityPart?) UsageSpecialization* | MultiplicityPart UsageSpecialization*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(Subsettings | Redefinitions | Typings MultiplicityPart?) UsageSpecialization*
		public Group getGroup_0() { return cGroup_0; }
		
		//(Subsettings | Redefinitions | Typings MultiplicityPart?)
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//Subsettings
		public RuleCall getSubsettingsParserRuleCall_0_0_0() { return cSubsettingsParserRuleCall_0_0_0; }
		
		//Redefinitions
		public RuleCall getRedefinitionsParserRuleCall_0_0_1() { return cRedefinitionsParserRuleCall_0_0_1; }
		
		//Typings MultiplicityPart?
		public Group getGroup_0_0_2() { return cGroup_0_0_2; }
		
		//Typings
		public RuleCall getTypingsParserRuleCall_0_0_2_0() { return cTypingsParserRuleCall_0_0_2_0; }
		
		//MultiplicityPart?
		public RuleCall getMultiplicityPartParserRuleCall_0_0_2_1() { return cMultiplicityPartParserRuleCall_0_0_2_1; }
		
		//UsageSpecialization*
		public RuleCall getUsageSpecializationParserRuleCall_0_1() { return cUsageSpecializationParserRuleCall_0_1; }
		
		//MultiplicityPart UsageSpecialization*
		public Group getGroup_1() { return cGroup_1; }
		
		//MultiplicityPart
		public RuleCall getMultiplicityPartParserRuleCall_1_0() { return cMultiplicityPartParserRuleCall_1_0; }
		
		//UsageSpecialization*
		public RuleCall getUsageSpecializationParserRuleCall_1_1() { return cUsageSpecializationParserRuleCall_1_1; }
	}
	public class MultiplicityPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.MultiplicityPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cIsOrderedAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cIsOrderedOrderedKeyword_1_0_0_0 = (Keyword)cIsOrderedAssignment_1_0_0.eContents().get(0);
		private final Assignment cIsNonuniqueAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cIsNonuniqueNonuniqueKeyword_1_0_1_0 = (Keyword)cIsNonuniqueAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cIsNonuniqueAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cIsNonuniqueNonuniqueKeyword_1_1_0_0 = (Keyword)cIsNonuniqueAssignment_1_1_0.eContents().get(0);
		private final Assignment cIsOrderedAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cIsOrderedOrderedKeyword_1_1_1_0 = (Keyword)cIsOrderedAssignment_1_1_1.eContents().get(0);
		
		//fragment MultiplicityPart returns SysML::Feature:
		//	ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered' isNonunique?='nonunique'?
		//	| isNonunique?='nonunique' isOrdered?='ordered'?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered' isNonunique?='nonunique'? |
		//isNonunique?='nonunique' isOrdered?='ordered'?)?
		public Group getGroup() { return cGroup; }
		
		//ownedFeatureMembership_comp+=MultiplicityMember
		public Assignment getOwnedFeatureMembership_compAssignment_0() { return cOwnedFeatureMembership_compAssignment_0; }
		
		//MultiplicityMember
		public RuleCall getOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_0_0() { return cOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_0_0; }
		
		//(isOrdered?='ordered' isNonunique?='nonunique'? | isNonunique?='nonunique' isOrdered?='ordered'?)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//isOrdered?='ordered' isNonunique?='nonunique'?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//isOrdered?='ordered'
		public Assignment getIsOrderedAssignment_1_0_0() { return cIsOrderedAssignment_1_0_0; }
		
		//'ordered'
		public Keyword getIsOrderedOrderedKeyword_1_0_0_0() { return cIsOrderedOrderedKeyword_1_0_0_0; }
		
		//isNonunique?='nonunique'?
		public Assignment getIsNonuniqueAssignment_1_0_1() { return cIsNonuniqueAssignment_1_0_1; }
		
		//'nonunique'
		public Keyword getIsNonuniqueNonuniqueKeyword_1_0_1_0() { return cIsNonuniqueNonuniqueKeyword_1_0_1_0; }
		
		//isNonunique?='nonunique' isOrdered?='ordered'?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//isNonunique?='nonunique'
		public Assignment getIsNonuniqueAssignment_1_1_0() { return cIsNonuniqueAssignment_1_1_0; }
		
		//'nonunique'
		public Keyword getIsNonuniqueNonuniqueKeyword_1_1_0_0() { return cIsNonuniqueNonuniqueKeyword_1_1_0_0; }
		
		//isOrdered?='ordered'?
		public Assignment getIsOrderedAssignment_1_1_1() { return cIsOrderedAssignment_1_1_1; }
		
		//'ordered'
		public Keyword getIsOrderedOrderedKeyword_1_1_1_0() { return cIsOrderedOrderedKeyword_1_1_1_0; }
	}
	public class MultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Multiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compNaturalLiteralMemberParserRuleCall_1_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compUnlimitedNaturalLiteralMemberParserRuleCall_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Multiplicity SysML::MultiplicityRange:
		//	'[' (ownedFeatureMembership_comp+=NaturalLiteralMember '..')?
		//	ownedFeatureMembership_comp+=UnlimitedNaturalLiteralMember ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' (ownedFeatureMembership_comp+=NaturalLiteralMember '..')? ownedFeatureMembership_comp+=UnlimitedNaturalLiteralMember
		//']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//(ownedFeatureMembership_comp+=NaturalLiteralMember '..')?
		public Group getGroup_1() { return cGroup_1; }
		
		//ownedFeatureMembership_comp+=NaturalLiteralMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_0() { return cOwnedFeatureMembership_compAssignment_1_0; }
		
		//NaturalLiteralMember
		public RuleCall getOwnedFeatureMembership_compNaturalLiteralMemberParserRuleCall_1_0_0() { return cOwnedFeatureMembership_compNaturalLiteralMemberParserRuleCall_1_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_1() { return cFullStopFullStopKeyword_1_1; }
		
		//ownedFeatureMembership_comp+=UnlimitedNaturalLiteralMember
		public Assignment getOwnedFeatureMembership_compAssignment_2() { return cOwnedFeatureMembership_compAssignment_2; }
		
		//UnlimitedNaturalLiteralMember
		public RuleCall getOwnedFeatureMembership_compUnlimitedNaturalLiteralMemberParserRuleCall_2_0() { return cOwnedFeatureMembership_compUnlimitedNaturalLiteralMemberParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class UsageSpecializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.UsageSpecialization");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypingsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubsettingsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRedefinitionsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//fragment UsageSpecialization returns SysML::Feature:
		//	Typings | Subsettings | Redefinitions;
		@Override public ParserRule getRule() { return rule; }
		
		//Typings | Subsettings | Redefinitions
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Typings
		public RuleCall getTypingsParserRuleCall_0() { return cTypingsParserRuleCall_0; }
		
		//Subsettings
		public RuleCall getSubsettingsParserRuleCall_1() { return cSubsettingsParserRuleCall_1; }
		
		//Redefinitions
		public RuleCall getRedefinitionsParserRuleCall_2() { return cRedefinitionsParserRuleCall_2; }
	}
	public class TypingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Typings");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinedByParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelationship_compFeatureTypingParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationship_compAssignment_1_1.eContents().get(0);
		
		//fragment Typings returns SysML::Feature:
		//	DefinedBy (',' ownedRelationship_comp+=FeatureTyping)*;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinedBy (',' ownedRelationship_comp+=FeatureTyping)*
		public Group getGroup() { return cGroup; }
		
		//DefinedBy
		public RuleCall getDefinedByParserRuleCall_0() { return cDefinedByParserRuleCall_0; }
		
		//(',' ownedRelationship_comp+=FeatureTyping)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ownedRelationship_comp+=FeatureTyping
		public Assignment getOwnedRelationship_compAssignment_1_1() { return cOwnedRelationship_compAssignment_1_1; }
		
		//FeatureTyping
		public RuleCall getOwnedRelationship_compFeatureTypingParserRuleCall_1_1_0() { return cOwnedRelationship_compFeatureTypingParserRuleCall_1_1_0; }
	}
	public class DefinedByElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.DefinedBy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDefinedByKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationship_compFeatureTypingParserRuleCall_1_0 = (RuleCall)cOwnedRelationship_compAssignment_1.eContents().get(0);
		
		//fragment DefinedBy returns SysML::Feature:
		//	DefinedByKeyword ownedRelationship_comp+=FeatureTyping;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinedByKeyword ownedRelationship_comp+=FeatureTyping
		public Group getGroup() { return cGroup; }
		
		//DefinedByKeyword
		public RuleCall getDefinedByKeywordParserRuleCall_0() { return cDefinedByKeywordParserRuleCall_0; }
		
		//ownedRelationship_comp+=FeatureTyping
		public Assignment getOwnedRelationship_compAssignment_1() { return cOwnedRelationship_compAssignment_1; }
		
		//FeatureTyping
		public RuleCall getOwnedRelationship_compFeatureTypingParserRuleCall_1_0() { return cOwnedRelationship_compFeatureTypingParserRuleCall_1_0; }
	}
	public class DefinedByKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.DefinedByKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDefinedKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cByKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//DefinedByKeyword:
		//	':' | 'defined' 'by';
		@Override public ParserRule getRule() { return rule; }
		
		//':' | 'defined' 'by'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//'defined' 'by'
		public Group getGroup_1() { return cGroup_1; }
		
		//'defined'
		public Keyword getDefinedKeyword_1_0() { return cDefinedKeyword_1_0; }
		
		//'by'
		public Keyword getByKeyword_1_1() { return cByKeyword_1_1; }
	}
	public class FeatureTypingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.FeatureTyping");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_0_1 = (RuleCall)cTypeTypeCrossReference_0.eContents().get(1);
		
		//FeatureTyping SysML::FeatureTyping:
		//	type=[SysML::Type|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//type=[SysML::Type|QualifiedName]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[SysML::Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_0() { return cTypeTypeCrossReference_0; }
		
		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_0_1() { return cTypeTypeQualifiedNameParserRuleCall_0_1; }
	}
	public class SubsettingPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SubsettingPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cSubsetsParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cOwnedRelationship_compSubsetParserRuleCall_0_1_1_0 = (RuleCall)cOwnedRelationship_compAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cRedefinesParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOwnedRelationship_compRedefinitionParserRuleCall_1_1_1_0 = (RuleCall)cOwnedRelationship_compAssignment_1_1_1.eContents().get(0);
		
		//fragment SubsettingPart returns SysML::Feature:
		//	(Subsets (',' ownedRelationship_comp+=Subset)*
		//	| Redefines (',' ownedRelationship_comp+=Redefinition)*)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(Subsets (',' ownedRelationship_comp+=Subset)* | Redefines (',' ownedRelationship_comp+=Redefinition)*)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Subsets (',' ownedRelationship_comp+=Subset)*
		public Group getGroup_0() { return cGroup_0; }
		
		//Subsets
		public RuleCall getSubsetsParserRuleCall_0_0() { return cSubsetsParserRuleCall_0_0; }
		
		//(',' ownedRelationship_comp+=Subset)*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//','
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }
		
		//ownedRelationship_comp+=Subset
		public Assignment getOwnedRelationship_compAssignment_0_1_1() { return cOwnedRelationship_compAssignment_0_1_1; }
		
		//Subset
		public RuleCall getOwnedRelationship_compSubsetParserRuleCall_0_1_1_0() { return cOwnedRelationship_compSubsetParserRuleCall_0_1_1_0; }
		
		//Redefines (',' ownedRelationship_comp+=Redefinition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//Redefines
		public RuleCall getRedefinesParserRuleCall_1_0() { return cRedefinesParserRuleCall_1_0; }
		
		//(',' ownedRelationship_comp+=Redefinition)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//ownedRelationship_comp+=Redefinition
		public Assignment getOwnedRelationship_compAssignment_1_1_1() { return cOwnedRelationship_compAssignment_1_1_1; }
		
		//Redefinition
		public RuleCall getOwnedRelationship_compRedefinitionParserRuleCall_1_1_1_0() { return cOwnedRelationship_compRedefinitionParserRuleCall_1_1_1_0; }
	}
	public class SubsettingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Subsettings");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubsetsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelationship_compSubsetParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationship_compAssignment_1_1.eContents().get(0);
		
		//fragment Subsettings returns SysML::Feature:
		//	Subsets (',' ownedRelationship_comp+=Subset)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Subsets (',' ownedRelationship_comp+=Subset)*
		public Group getGroup() { return cGroup; }
		
		//Subsets
		public RuleCall getSubsetsParserRuleCall_0() { return cSubsetsParserRuleCall_0; }
		
		//(',' ownedRelationship_comp+=Subset)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ownedRelationship_comp+=Subset
		public Assignment getOwnedRelationship_compAssignment_1_1() { return cOwnedRelationship_compAssignment_1_1; }
		
		//Subset
		public RuleCall getOwnedRelationship_compSubsetParserRuleCall_1_1_0() { return cOwnedRelationship_compSubsetParserRuleCall_1_1_0; }
	}
	public class SubsetsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Subsets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubsetsKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationship_compSubsetParserRuleCall_1_0 = (RuleCall)cOwnedRelationship_compAssignment_1.eContents().get(0);
		
		//fragment Subsets returns SysML::Feature:
		//	SubsetsKeyword ownedRelationship_comp+=Subset;
		@Override public ParserRule getRule() { return rule; }
		
		//SubsetsKeyword ownedRelationship_comp+=Subset
		public Group getGroup() { return cGroup; }
		
		//SubsetsKeyword
		public RuleCall getSubsetsKeywordParserRuleCall_0() { return cSubsetsKeywordParserRuleCall_0; }
		
		//ownedRelationship_comp+=Subset
		public Assignment getOwnedRelationship_compAssignment_1() { return cOwnedRelationship_compAssignment_1; }
		
		//Subset
		public RuleCall getOwnedRelationship_compSubsetParserRuleCall_1_0() { return cOwnedRelationship_compSubsetParserRuleCall_1_0; }
	}
	public class SubsetsKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SubsetsKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cColonGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSubsetsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//SubsetsKeyword:
		//	':>' | 'subsets';
		@Override public ParserRule getRule() { return rule; }
		
		//':>' | 'subsets'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//':>'
		public Keyword getColonGreaterThanSignKeyword_0() { return cColonGreaterThanSignKeyword_0; }
		
		//'subsets'
		public Keyword getSubsetsKeyword_1() { return cSubsetsKeyword_1; }
	}
	public class SubsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Subset");
		private final Assignment cSubsettedFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSubsettedFeatureFeatureCrossReference_0 = (CrossReference)cSubsettedFeatureAssignment.eContents().get(0);
		private final RuleCall cSubsettedFeatureFeatureQualifiedNameParserRuleCall_0_1 = (RuleCall)cSubsettedFeatureFeatureCrossReference_0.eContents().get(1);
		
		//Subset SysML::Subsetting:
		//	subsettedFeature=[SysML::Feature|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//subsettedFeature=[SysML::Feature|QualifiedName]
		public Assignment getSubsettedFeatureAssignment() { return cSubsettedFeatureAssignment; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getSubsettedFeatureFeatureCrossReference_0() { return cSubsettedFeatureFeatureCrossReference_0; }
		
		//QualifiedName
		public RuleCall getSubsettedFeatureFeatureQualifiedNameParserRuleCall_0_1() { return cSubsettedFeatureFeatureQualifiedNameParserRuleCall_0_1; }
	}
	public class RedefinitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Redefinitions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRedefinesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelationship_compRedefinitionParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationship_compAssignment_1_1.eContents().get(0);
		
		//fragment Redefinitions returns SysML::Feature:
		//	Redefines (',' ownedRelationship_comp+=Redefinition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Redefines (',' ownedRelationship_comp+=Redefinition)*
		public Group getGroup() { return cGroup; }
		
		//Redefines
		public RuleCall getRedefinesParserRuleCall_0() { return cRedefinesParserRuleCall_0; }
		
		//(',' ownedRelationship_comp+=Redefinition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ownedRelationship_comp+=Redefinition
		public Assignment getOwnedRelationship_compAssignment_1_1() { return cOwnedRelationship_compAssignment_1_1; }
		
		//Redefinition
		public RuleCall getOwnedRelationship_compRedefinitionParserRuleCall_1_1_0() { return cOwnedRelationship_compRedefinitionParserRuleCall_1_1_0; }
	}
	public class RedefinesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Redefines");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRedefinesKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationship_compRedefinitionParserRuleCall_1_0 = (RuleCall)cOwnedRelationship_compAssignment_1.eContents().get(0);
		
		//fragment Redefines returns SysML::Feature:
		//	RedefinesKeyword ownedRelationship_comp+=Redefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//RedefinesKeyword ownedRelationship_comp+=Redefinition
		public Group getGroup() { return cGroup; }
		
		//RedefinesKeyword
		public RuleCall getRedefinesKeywordParserRuleCall_0() { return cRedefinesKeywordParserRuleCall_0; }
		
		//ownedRelationship_comp+=Redefinition
		public Assignment getOwnedRelationship_compAssignment_1() { return cOwnedRelationship_compAssignment_1; }
		
		//Redefinition
		public RuleCall getOwnedRelationship_compRedefinitionParserRuleCall_1_0() { return cOwnedRelationship_compRedefinitionParserRuleCall_1_0; }
	}
	public class RedefinesKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RedefinesKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cColonGreaterThanSignGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRedefinesKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//RedefinesKeyword:
		//	':>>' | 'redefines';
		@Override public ParserRule getRule() { return rule; }
		
		//':>>' | 'redefines'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//':>>'
		public Keyword getColonGreaterThanSignGreaterThanSignKeyword_0() { return cColonGreaterThanSignGreaterThanSignKeyword_0; }
		
		//'redefines'
		public Keyword getRedefinesKeyword_1() { return cRedefinesKeyword_1; }
	}
	public class RedefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Redefinition");
		private final Assignment cRedefinedFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRedefinedFeatureFeatureCrossReference_0 = (CrossReference)cRedefinedFeatureAssignment.eContents().get(0);
		private final RuleCall cRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1 = (RuleCall)cRedefinedFeatureFeatureCrossReference_0.eContents().get(1);
		
		//Redefinition SysML::Redefinition:
		//	redefinedFeature=[SysML::Feature|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//redefinedFeature=[SysML::Feature|QualifiedName]
		public Assignment getRedefinedFeatureAssignment() { return cRedefinedFeatureAssignment; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getRedefinedFeatureFeatureCrossReference_0() { return cRedefinedFeatureFeatureCrossReference_0; }
		
		//QualifiedName
		public RuleCall getRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1() { return cRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1; }
	}
	public class UsageCompletionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.UsageCompletion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValuePartParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDefinitionBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fragment UsageCompletion returns SysML::Usage:
		//	ValuePart? DefinitionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//ValuePart? DefinitionBody
		public Group getGroup() { return cGroup; }
		
		//ValuePart?
		public RuleCall getValuePartParserRuleCall_0() { return cValuePartParserRuleCall_0; }
		
		//DefinitionBody
		public RuleCall getDefinitionBodyParserRuleCall_1() { return cDefinitionBodyParserRuleCall_1; }
	}
	public class ValuePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ValuePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compFeatureValueParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		
		//fragment ValuePart returns SysML::Feature:
		//	'=' ownedFeatureMembership_comp+=FeatureValue;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' ownedFeatureMembership_comp+=FeatureValue
		public Group getGroup() { return cGroup; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//ownedFeatureMembership_comp+=FeatureValue
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//FeatureValue
		public RuleCall getOwnedFeatureMembership_compFeatureValueParserRuleCall_1_0() { return cOwnedFeatureMembership_compFeatureValueParserRuleCall_1_0; }
	}
	public class FeatureValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.FeatureValue");
		private final Assignment cValue_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValue_compExpressionParserRuleCall_0 = (RuleCall)cValue_compAssignment.eContents().get(0);
		
		//FeatureValue SysML::FeatureValue:
		//	value_comp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//value_comp=Expression
		public Assignment getValue_compAssignment() { return cValue_compAssignment; }
		
		//Expression
		public RuleCall getValue_compExpressionParserRuleCall_0() { return cValue_compExpressionParserRuleCall_0; }
	}
	public class MultiplicityMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.MultiplicityMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compMultiplicityParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		///* USAGE MEMBERSHIPS */ MultiplicityMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=Multiplicity;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=Multiplicity
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//Multiplicity
		public RuleCall getOwnedMemberFeature_compMultiplicityParserRuleCall_0() { return cOwnedMemberFeature_compMultiplicityParserRuleCall_0; }
	}
	public class NaturalLiteralMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.NaturalLiteralMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compNaturalLiteralExpressionParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//NaturalLiteralMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=NaturalLiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=NaturalLiteralExpression
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//NaturalLiteralExpression
		public RuleCall getOwnedMemberFeature_compNaturalLiteralExpressionParserRuleCall_0() { return cOwnedMemberFeature_compNaturalLiteralExpressionParserRuleCall_0; }
	}
	public class UnlimitedNaturalLiteralMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.UnlimitedNaturalLiteralMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compUnlimitedNaturalLiteralExpressionParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//UnlimitedNaturalLiteralMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=UnlimitedNaturalLiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=UnlimitedNaturalLiteralExpression
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//UnlimitedNaturalLiteralExpression
		public RuleCall getOwnedMemberFeature_compUnlimitedNaturalLiteralExpressionParserRuleCall_0() { return cOwnedMemberFeature_compUnlimitedNaturalLiteralExpressionParserRuleCall_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cReferenceUsageAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cParameterDeclarationParserRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cReferenceUsageKeywordParserRuleCall_0_1_1_0 = (RuleCall)cGroup_0_1_1.eContents().get(0);
		private final RuleCall cParameterDeclarationParserRuleCall_0_1_1_1 = (RuleCall)cGroup_0_1_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cItemUsageAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cItemUsageKeywordParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cParameterDeclarationParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPartUsageAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cPartUsageKeywordParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cParameterDeclarationParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cActionUsageAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cActionUsageKeywordParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cParameterDeclarationParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cCalculationUsageAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final RuleCall cCalculationUsageKeywordParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cParameterDeclarationParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cConstraintUsageAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final RuleCall cConstraintUsageKeywordParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final RuleCall cParameterDeclarationParserRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		
		///* PARAMETERS */ Parameter SysML::Usage:
		//	{SysML::ReferenceUsage} (ParameterDeclaration | ReferenceUsageKeyword ParameterDeclaration?) | {SysML::ItemUsage}
		//	ItemUsageKeyword ParameterDeclaration?
		//	| {SysML::PartUsage} PartUsageKeyword ParameterDeclaration?
		//	| {SysML::ActionUsage} ActionUsageKeyword ParameterDeclaration?
		//	| {SysML::CalculationUsage} CalculationUsageKeyword ParameterDeclaration?
		//	| {SysML::ConstraintUsage} ConstraintUsageKeyword ParameterDeclaration?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::ReferenceUsage} (ParameterDeclaration | ReferenceUsageKeyword ParameterDeclaration?) | {SysML::ItemUsage}
		//ItemUsageKeyword ParameterDeclaration? | {SysML::PartUsage} PartUsageKeyword ParameterDeclaration? |
		//{SysML::ActionUsage} ActionUsageKeyword ParameterDeclaration? | {SysML::CalculationUsage} CalculationUsageKeyword
		//ParameterDeclaration? | {SysML::ConstraintUsage} ConstraintUsageKeyword ParameterDeclaration?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SysML::ReferenceUsage} (ParameterDeclaration | ReferenceUsageKeyword ParameterDeclaration?)
		public Group getGroup_0() { return cGroup_0; }
		
		//{SysML::ReferenceUsage}
		public Action getReferenceUsageAction_0_0() { return cReferenceUsageAction_0_0; }
		
		//(ParameterDeclaration | ReferenceUsageKeyword ParameterDeclaration?)
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//ParameterDeclaration
		public RuleCall getParameterDeclarationParserRuleCall_0_1_0() { return cParameterDeclarationParserRuleCall_0_1_0; }
		
		//ReferenceUsageKeyword ParameterDeclaration?
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//ReferenceUsageKeyword
		public RuleCall getReferenceUsageKeywordParserRuleCall_0_1_1_0() { return cReferenceUsageKeywordParserRuleCall_0_1_1_0; }
		
		//ParameterDeclaration?
		public RuleCall getParameterDeclarationParserRuleCall_0_1_1_1() { return cParameterDeclarationParserRuleCall_0_1_1_1; }
		
		//{SysML::ItemUsage} ItemUsageKeyword ParameterDeclaration?
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::ItemUsage}
		public Action getItemUsageAction_1_0() { return cItemUsageAction_1_0; }
		
		//ItemUsageKeyword
		public RuleCall getItemUsageKeywordParserRuleCall_1_1() { return cItemUsageKeywordParserRuleCall_1_1; }
		
		//ParameterDeclaration?
		public RuleCall getParameterDeclarationParserRuleCall_1_2() { return cParameterDeclarationParserRuleCall_1_2; }
		
		//{SysML::PartUsage} PartUsageKeyword ParameterDeclaration?
		public Group getGroup_2() { return cGroup_2; }
		
		//{SysML::PartUsage}
		public Action getPartUsageAction_2_0() { return cPartUsageAction_2_0; }
		
		//PartUsageKeyword
		public RuleCall getPartUsageKeywordParserRuleCall_2_1() { return cPartUsageKeywordParserRuleCall_2_1; }
		
		//ParameterDeclaration?
		public RuleCall getParameterDeclarationParserRuleCall_2_2() { return cParameterDeclarationParserRuleCall_2_2; }
		
		//{SysML::ActionUsage} ActionUsageKeyword ParameterDeclaration?
		public Group getGroup_3() { return cGroup_3; }
		
		//{SysML::ActionUsage}
		public Action getActionUsageAction_3_0() { return cActionUsageAction_3_0; }
		
		//ActionUsageKeyword
		public RuleCall getActionUsageKeywordParserRuleCall_3_1() { return cActionUsageKeywordParserRuleCall_3_1; }
		
		//ParameterDeclaration?
		public RuleCall getParameterDeclarationParserRuleCall_3_2() { return cParameterDeclarationParserRuleCall_3_2; }
		
		//{SysML::CalculationUsage} CalculationUsageKeyword ParameterDeclaration?
		public Group getGroup_4() { return cGroup_4; }
		
		//{SysML::CalculationUsage}
		public Action getCalculationUsageAction_4_0() { return cCalculationUsageAction_4_0; }
		
		//CalculationUsageKeyword
		public RuleCall getCalculationUsageKeywordParserRuleCall_4_1() { return cCalculationUsageKeywordParserRuleCall_4_1; }
		
		//ParameterDeclaration?
		public RuleCall getParameterDeclarationParserRuleCall_4_2() { return cParameterDeclarationParserRuleCall_4_2; }
		
		//{SysML::ConstraintUsage} ConstraintUsageKeyword ParameterDeclaration?
		public Group getGroup_5() { return cGroup_5; }
		
		//{SysML::ConstraintUsage}
		public Action getConstraintUsageAction_5_0() { return cConstraintUsageAction_5_0; }
		
		//ConstraintUsageKeyword
		public RuleCall getConstraintUsageKeywordParserRuleCall_5_1() { return cConstraintUsageKeywordParserRuleCall_5_1; }
		
		//ParameterDeclaration?
		public RuleCall getParameterDeclarationParserRuleCall_5_2() { return cParameterDeclarationParserRuleCall_5_2; }
	}
	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ParameterDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cParameterSpecializationPartParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cParameterSpecializationPartParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//fragment ParameterDeclaration returns SysML::Usage:
		//	Identification ParameterSpecializationPart?
		//	| ParameterSpecializationPart;
		@Override public ParserRule getRule() { return rule; }
		
		//Identification ParameterSpecializationPart? | ParameterSpecializationPart
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Identification ParameterSpecializationPart?
		public Group getGroup_0() { return cGroup_0; }
		
		//Identification
		public RuleCall getIdentificationParserRuleCall_0_0() { return cIdentificationParserRuleCall_0_0; }
		
		//ParameterSpecializationPart?
		public RuleCall getParameterSpecializationPartParserRuleCall_0_1() { return cParameterSpecializationPartParserRuleCall_0_1; }
		
		//ParameterSpecializationPart
		public RuleCall getParameterSpecializationPartParserRuleCall_1() { return cParameterSpecializationPartParserRuleCall_1; }
	}
	public class ParameterSpecializationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ParameterSpecializationPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cSubsetsParserRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cRedefinesParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final Group cGroup_0_0_2 = (Group)cAlternatives_0_0.eContents().get(2);
		private final RuleCall cDefinedByParserRuleCall_0_0_2_0 = (RuleCall)cGroup_0_0_2.eContents().get(0);
		private final RuleCall cMultiplicityPartParserRuleCall_0_0_2_1 = (RuleCall)cGroup_0_0_2.eContents().get(1);
		private final RuleCall cParameterSpecializationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cMultiplicityPartParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cParameterSpecializationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//fragment ParameterSpecializationPart returns SysML::Feature:
		//	(Subsets | Redefines | DefinedBy MultiplicityPart?) ParameterSpecialization*
		//	| MultiplicityPart ParameterSpecialization*;
		@Override public ParserRule getRule() { return rule; }
		
		//(Subsets | Redefines | DefinedBy MultiplicityPart?) ParameterSpecialization* | MultiplicityPart ParameterSpecialization*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(Subsets | Redefines | DefinedBy MultiplicityPart?) ParameterSpecialization*
		public Group getGroup_0() { return cGroup_0; }
		
		//(Subsets | Redefines | DefinedBy MultiplicityPart?)
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//Subsets
		public RuleCall getSubsetsParserRuleCall_0_0_0() { return cSubsetsParserRuleCall_0_0_0; }
		
		//Redefines
		public RuleCall getRedefinesParserRuleCall_0_0_1() { return cRedefinesParserRuleCall_0_0_1; }
		
		//DefinedBy MultiplicityPart?
		public Group getGroup_0_0_2() { return cGroup_0_0_2; }
		
		//DefinedBy
		public RuleCall getDefinedByParserRuleCall_0_0_2_0() { return cDefinedByParserRuleCall_0_0_2_0; }
		
		//MultiplicityPart?
		public RuleCall getMultiplicityPartParserRuleCall_0_0_2_1() { return cMultiplicityPartParserRuleCall_0_0_2_1; }
		
		//ParameterSpecialization*
		public RuleCall getParameterSpecializationParserRuleCall_0_1() { return cParameterSpecializationParserRuleCall_0_1; }
		
		//MultiplicityPart ParameterSpecialization*
		public Group getGroup_1() { return cGroup_1; }
		
		//MultiplicityPart
		public RuleCall getMultiplicityPartParserRuleCall_1_0() { return cMultiplicityPartParserRuleCall_1_0; }
		
		//ParameterSpecialization*
		public RuleCall getParameterSpecializationParserRuleCall_1_1() { return cParameterSpecializationParserRuleCall_1_1; }
	}
	public class ParameterSpecializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ParameterSpecialization");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefinedByParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubsetsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRedefinesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//fragment ParameterSpecialization returns SysML::Feature:
		//	DefinedBy | Subsets | Redefines;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinedBy | Subsets | Redefines
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DefinedBy
		public RuleCall getDefinedByParserRuleCall_0() { return cDefinedByParserRuleCall_0; }
		
		//Subsets
		public RuleCall getSubsetsParserRuleCall_1() { return cSubsetsParserRuleCall_1; }
		
		//Redefines
		public RuleCall getRedefinesParserRuleCall_2() { return cRedefinesParserRuleCall_2; }
	}
	public class ReferenceKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ReferenceKeyword");
		private final Keyword cRefKeyword = (Keyword)rule.eContents().get(1);
		
		///* REFERENCE USAGES */ ReferenceKeyword:
		//	'ref';
		@Override public ParserRule getRule() { return rule; }
		
		//'ref'
		public Keyword getRefKeyword() { return cRefKeyword; }
	}
	public class ReferenceUsageKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ReferenceUsageKeyword");
		private final RuleCall cReferenceKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ReferenceUsageKeyword:
		//	ReferenceKeyword;
		@Override public ParserRule getRule() { return rule; }
		
		//ReferenceKeyword
		public RuleCall getReferenceKeywordParserRuleCall() { return cReferenceKeywordParserRuleCall; }
	}
	public class ReferenceUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ReferenceUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cReferenceUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ReferenceUsage SysML::ReferenceUsage:
		//	UsagePrefix? ReferenceUsageKeyword Usage;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ReferenceUsageKeyword Usage
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//ReferenceUsageKeyword
		public RuleCall getReferenceUsageKeywordParserRuleCall_1() { return cReferenceUsageKeywordParserRuleCall_1; }
		
		//Usage
		public RuleCall getUsageParserRuleCall_2() { return cUsageParserRuleCall_2; }
	}
	public class ReferenceEndUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ReferenceEndUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cReferenceUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ReferenceEndUsage SysML::ReferenceUsage:
		//	UsagePrefix? ReferenceUsageKeyword? Usage;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ReferenceUsageKeyword? Usage
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//ReferenceUsageKeyword?
		public RuleCall getReferenceUsageKeywordParserRuleCall_1() { return cReferenceUsageKeywordParserRuleCall_1; }
		
		//Usage
		public RuleCall getUsageParserRuleCall_2() { return cUsageParserRuleCall_2; }
	}
	public class ReferenceVariantUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ReferenceVariantUsage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReferenceUsageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOwnedRelationship_compSubsetParserRuleCall_1_0_0 = (RuleCall)cOwnedRelationship_compAssignment_1_0.eContents().get(0);
		private final RuleCall cUsageSpecializationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cDefinitionBodyParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//// TODO: Find a better way to handle variant references that using ReferenceUsage.
		//ReferenceVariantUsage SysML::ReferenceUsage:
		//	ReferenceUsage
		//	| ownedRelationship_comp+=Subset
		//	UsageSpecialization* DefinitionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//ReferenceUsage | ownedRelationship_comp+=Subset UsageSpecialization* DefinitionBody
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ReferenceUsage
		public RuleCall getReferenceUsageParserRuleCall_0() { return cReferenceUsageParserRuleCall_0; }
		
		//ownedRelationship_comp+=Subset UsageSpecialization* DefinitionBody
		public Group getGroup_1() { return cGroup_1; }
		
		//ownedRelationship_comp+=Subset
		public Assignment getOwnedRelationship_compAssignment_1_0() { return cOwnedRelationship_compAssignment_1_0; }
		
		//Subset
		public RuleCall getOwnedRelationship_compSubsetParserRuleCall_1_0_0() { return cOwnedRelationship_compSubsetParserRuleCall_1_0_0; }
		
		//UsageSpecialization*
		public RuleCall getUsageSpecializationParserRuleCall_1_1() { return cUsageSpecializationParserRuleCall_1_1; }
		
		//DefinitionBody
		public RuleCall getDefinitionBodyParserRuleCall_1_2() { return cDefinitionBodyParserRuleCall_1_2; }
	}
	public class AttributeUsageKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AttributeUsageKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeKeywordParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cValueKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		///* ATTRIBUTE USAGES */ AttributeUsageKeyword:
		//	AttributeKeyword | 'value';
		@Override public ParserRule getRule() { return rule; }
		
		//AttributeKeyword | 'value'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AttributeKeyword
		public RuleCall getAttributeKeywordParserRuleCall_0() { return cAttributeKeywordParserRuleCall_0; }
		
		//'value'
		public Keyword getValueKeyword_1() { return cValueKeyword_1; }
	}
	public class AttributeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AttributeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAttributeUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment AttributeDeclaration returns SysML::AttributeUsage:
		//	UsagePrefix? AttributeUsageKeyword UsageDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? AttributeUsageKeyword UsageDeclaration
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//AttributeUsageKeyword
		public RuleCall getAttributeUsageKeywordParserRuleCall_1() { return cAttributeUsageKeywordParserRuleCall_1; }
		
		//UsageDeclaration
		public RuleCall getUsageDeclarationParserRuleCall_2() { return cUsageDeclarationParserRuleCall_2; }
	}
	public class AttributeUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AttributeUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cAttributeUsageKeywordParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cUsageParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final RuleCall cUsageCompletionParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//AttributeUsage SysML::AttributeUsage:
		//	UsagePrefix? (AttributeUsageKeyword Usage | UsageDeclaration UsageCompletion);
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? (AttributeUsageKeyword Usage | UsageDeclaration UsageCompletion)
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//(AttributeUsageKeyword Usage | UsageDeclaration UsageCompletion)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//AttributeUsageKeyword Usage
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//AttributeUsageKeyword
		public RuleCall getAttributeUsageKeywordParserRuleCall_1_0_0() { return cAttributeUsageKeywordParserRuleCall_1_0_0; }
		
		//Usage
		public RuleCall getUsageParserRuleCall_1_0_1() { return cUsageParserRuleCall_1_0_1; }
		
		//UsageDeclaration UsageCompletion
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//UsageDeclaration
		public RuleCall getUsageDeclarationParserRuleCall_1_1_0() { return cUsageDeclarationParserRuleCall_1_1_0; }
		
		//UsageCompletion
		public RuleCall getUsageCompletionParserRuleCall_1_1_1() { return cUsageCompletionParserRuleCall_1_1_1; }
	}
	public class AttributeVariantUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AttributeVariantUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAttributeUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//AttributeVariantUsage SysML::AttributeUsage:
		//	UsagePrefix? AttributeUsageKeyword Usage;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? AttributeUsageKeyword Usage
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//AttributeUsageKeyword
		public RuleCall getAttributeUsageKeywordParserRuleCall_1() { return cAttributeUsageKeywordParserRuleCall_1; }
		
		//Usage
		public RuleCall getUsageParserRuleCall_2() { return cUsageParserRuleCall_2; }
	}
	public class ItemUsageKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ItemUsageKeyword");
		private final RuleCall cItemKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* ITEM USAGES */ ItemUsageKeyword:
		//	ItemKeyword;
		@Override public ParserRule getRule() { return rule; }
		
		//ItemKeyword
		public RuleCall getItemKeywordParserRuleCall() { return cItemKeywordParserRuleCall; }
	}
	public class ItemDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ItemDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cItemUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment ItemDeclaration returns SysML::ItemUsage:
		//	UsagePrefix? ItemUsageKeyword UsageDeclaration?;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ItemUsageKeyword UsageDeclaration?
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//ItemUsageKeyword
		public RuleCall getItemUsageKeywordParserRuleCall_1() { return cItemUsageKeywordParserRuleCall_1; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2() { return cUsageDeclarationParserRuleCall_2; }
	}
	public class ItemUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ItemUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cItemUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ItemUsage SysML::ItemUsage:
		//	UsagePrefix? ItemUsageKeyword Usage;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ItemUsageKeyword Usage
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//ItemUsageKeyword
		public RuleCall getItemUsageKeywordParserRuleCall_1() { return cItemUsageKeywordParserRuleCall_1; }
		
		//Usage
		public RuleCall getUsageParserRuleCall_2() { return cUsageParserRuleCall_2; }
	}
	public class ItemRefUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ItemRefUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRefKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cItemUsageKeywordParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cIsCompositeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIsCompositeItemUsageKeywordParserRuleCall_1_1_0 = (RuleCall)cIsCompositeAssignment_1_1.eContents().get(0);
		private final RuleCall cUsageParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ItemRefUsage SysML::ItemUsage:
		//	UsagePrefix? ('ref' ItemUsageKeyword | isComposite?=ItemUsageKeyword) Usage;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ('ref' ItemUsageKeyword | isComposite?=ItemUsageKeyword) Usage
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//('ref' ItemUsageKeyword | isComposite?=ItemUsageKeyword)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'ref' ItemUsageKeyword
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'ref'
		public Keyword getRefKeyword_1_0_0() { return cRefKeyword_1_0_0; }
		
		//ItemUsageKeyword
		public RuleCall getItemUsageKeywordParserRuleCall_1_0_1() { return cItemUsageKeywordParserRuleCall_1_0_1; }
		
		//isComposite?=ItemUsageKeyword
		public Assignment getIsCompositeAssignment_1_1() { return cIsCompositeAssignment_1_1; }
		
		//ItemUsageKeyword
		public RuleCall getIsCompositeItemUsageKeywordParserRuleCall_1_1_0() { return cIsCompositeItemUsageKeywordParserRuleCall_1_1_0; }
		
		//Usage
		public RuleCall getUsageParserRuleCall_2() { return cUsageParserRuleCall_2; }
	}
	public class PartUsageKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PartUsageKeyword");
		private final RuleCall cPartKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* PART USAGES */ PartUsageKeyword:
		//	PartKeyword;
		@Override public ParserRule getRule() { return rule; }
		
		//PartKeyword
		public RuleCall getPartKeywordParserRuleCall() { return cPartKeywordParserRuleCall; }
	}
	public class PartDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PartDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPartUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment PartDeclaration returns SysML::PartUsage:
		//	UsagePrefix? PartUsageKeyword UsageDeclaration?;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? PartUsageKeyword UsageDeclaration?
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//PartUsageKeyword
		public RuleCall getPartUsageKeywordParserRuleCall_1() { return cPartUsageKeywordParserRuleCall_1; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2() { return cUsageDeclarationParserRuleCall_2; }
	}
	public class PartUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PartUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPartUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//PartUsage SysML::PartUsage:
		//	UsagePrefix? PartUsageKeyword Usage;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? PartUsageKeyword Usage
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//PartUsageKeyword
		public RuleCall getPartUsageKeywordParserRuleCall_1() { return cPartUsageKeywordParserRuleCall_1; }
		
		//Usage
		public RuleCall getUsageParserRuleCall_2() { return cUsageParserRuleCall_2; }
	}
	public class PartRefUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PartRefUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRefKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cPartUsageKeywordParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cIsCompositeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIsCompositePartUsageKeywordParserRuleCall_1_1_0 = (RuleCall)cIsCompositeAssignment_1_1.eContents().get(0);
		private final RuleCall cUsageParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//PartRefUsage SysML::PartUsage:
		//	UsagePrefix? ('ref' PartUsageKeyword | isComposite?=PartUsageKeyword) Usage;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ('ref' PartUsageKeyword | isComposite?=PartUsageKeyword) Usage
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//('ref' PartUsageKeyword | isComposite?=PartUsageKeyword)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'ref' PartUsageKeyword
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'ref'
		public Keyword getRefKeyword_1_0_0() { return cRefKeyword_1_0_0; }
		
		//PartUsageKeyword
		public RuleCall getPartUsageKeywordParserRuleCall_1_0_1() { return cPartUsageKeywordParserRuleCall_1_0_1; }
		
		//isComposite?=PartUsageKeyword
		public Assignment getIsCompositeAssignment_1_1() { return cIsCompositeAssignment_1_1; }
		
		//PartUsageKeyword
		public RuleCall getIsCompositePartUsageKeywordParserRuleCall_1_1_0() { return cIsCompositePartUsageKeywordParserRuleCall_1_1_0; }
		
		//Usage
		public RuleCall getUsageParserRuleCall_2() { return cUsageParserRuleCall_2; }
	}
	public class IndividualUsageKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.IndividualUsageKeyword");
		private final RuleCall cIndividualKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* INDIVIDUAL USAGES */ IndividualUsageKeyword:
		//	IndividualKeyword;
		@Override public ParserRule getRule() { return rule; }
		
		//IndividualKeyword
		public RuleCall getIndividualKeywordParserRuleCall() { return cIndividualKeywordParserRuleCall; }
	}
	public class TimeSliceKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TimeSliceKeyword");
		private final Keyword cTimesliceKeyword = (Keyword)rule.eContents().get(1);
		
		//TimeSliceKeyword:
		//	'timeslice';
		@Override public ParserRule getRule() { return rule; }
		
		//'timeslice'
		public Keyword getTimesliceKeyword() { return cTimesliceKeyword; }
	}
	public class SnapshotKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SnapshotKeyword");
		private final Keyword cSnapshotKeyword = (Keyword)rule.eContents().get(1);
		
		//SnapshotKeyword:
		//	'snapshot';
		@Override public ParserRule getRule() { return rule; }
		
		//'snapshot'
		public Keyword getSnapshotKeyword() { return cSnapshotKeyword; }
	}
	public class IndividualUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.IndividualUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIndividualUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//IndividualUsage SysML::IndividualUsage:
		//	UsagePrefix? IndividualUsageKeyword Usage;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? IndividualUsageKeyword Usage
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//IndividualUsageKeyword
		public RuleCall getIndividualUsageKeywordParserRuleCall_1() { return cIndividualUsageKeywordParserRuleCall_1; }
		
		//Usage
		public RuleCall getUsageParserRuleCall_2() { return cUsageParserRuleCall_2; }
	}
	public class IndividualRefUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.IndividualRefUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRefKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cIndividualUsageKeywordParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cIsCompositeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIsCompositeIndividualUsageKeywordParserRuleCall_1_1_0 = (RuleCall)cIsCompositeAssignment_1_1.eContents().get(0);
		private final RuleCall cUsageParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//IndividualRefUsage SysML::IndividualUsage:
		//	UsagePrefix? ('ref' IndividualUsageKeyword | isComposite?=IndividualUsageKeyword) Usage;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ('ref' IndividualUsageKeyword | isComposite?=IndividualUsageKeyword) Usage
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//('ref' IndividualUsageKeyword | isComposite?=IndividualUsageKeyword)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'ref' IndividualUsageKeyword
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'ref'
		public Keyword getRefKeyword_1_0_0() { return cRefKeyword_1_0_0; }
		
		//IndividualUsageKeyword
		public RuleCall getIndividualUsageKeywordParserRuleCall_1_0_1() { return cIndividualUsageKeywordParserRuleCall_1_0_1; }
		
		//isComposite?=IndividualUsageKeyword
		public Assignment getIsCompositeAssignment_1_1() { return cIsCompositeAssignment_1_1; }
		
		//IndividualUsageKeyword
		public RuleCall getIsCompositeIndividualUsageKeywordParserRuleCall_1_1_0() { return cIsCompositeIndividualUsageKeywordParserRuleCall_1_1_0; }
		
		//Usage
		public RuleCall getUsageParserRuleCall_2() { return cUsageParserRuleCall_2; }
	}
	public class TimeSliceUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TimeSliceUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTimeSliceKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cOwnedFeatureMembership_compAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compTimeSliceFeatureMemberParserRuleCall_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_3.eContents().get(0);
		private final RuleCall cUsageCompletionParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//TimeSliceUsage SysML::IndividualUsage:
		//	UsagePrefix? TimeSliceKeyword
		//	UsageDeclaration? ownedFeatureMembership_comp+=TimeSliceFeatureMember
		//	UsageCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? TimeSliceKeyword UsageDeclaration? ownedFeatureMembership_comp+=TimeSliceFeatureMember UsageCompletion
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//TimeSliceKeyword
		public RuleCall getTimeSliceKeywordParserRuleCall_1() { return cTimeSliceKeywordParserRuleCall_1; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2() { return cUsageDeclarationParserRuleCall_2; }
		
		//ownedFeatureMembership_comp+=TimeSliceFeatureMember
		public Assignment getOwnedFeatureMembership_compAssignment_3() { return cOwnedFeatureMembership_compAssignment_3; }
		
		//TimeSliceFeatureMember
		public RuleCall getOwnedFeatureMembership_compTimeSliceFeatureMemberParserRuleCall_3_0() { return cOwnedFeatureMembership_compTimeSliceFeatureMemberParserRuleCall_3_0; }
		
		//UsageCompletion
		public RuleCall getUsageCompletionParserRuleCall_4() { return cUsageCompletionParserRuleCall_4; }
	}
	public class TimeSliceRefUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TimeSliceRefUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRefKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cTimeSliceKeywordParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cIsCompositeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIsCompositeTimeSliceKeywordParserRuleCall_1_1_0 = (RuleCall)cIsCompositeAssignment_1_1.eContents().get(0);
		private final RuleCall cUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cOwnedFeatureMembership_compAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compTimeSliceFeatureMemberParserRuleCall_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_3.eContents().get(0);
		private final RuleCall cUsageCompletionParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//TimeSliceRefUsage SysML::IndividualUsage:
		//	UsagePrefix? ('ref' TimeSliceKeyword | isComposite?=TimeSliceKeyword) UsageDeclaration?
		//	ownedFeatureMembership_comp+=TimeSliceFeatureMember
		//	UsageCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ('ref' TimeSliceKeyword | isComposite?=TimeSliceKeyword) UsageDeclaration?
		//ownedFeatureMembership_comp+=TimeSliceFeatureMember UsageCompletion
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//('ref' TimeSliceKeyword | isComposite?=TimeSliceKeyword)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'ref' TimeSliceKeyword
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'ref'
		public Keyword getRefKeyword_1_0_0() { return cRefKeyword_1_0_0; }
		
		//TimeSliceKeyword
		public RuleCall getTimeSliceKeywordParserRuleCall_1_0_1() { return cTimeSliceKeywordParserRuleCall_1_0_1; }
		
		//isComposite?=TimeSliceKeyword
		public Assignment getIsCompositeAssignment_1_1() { return cIsCompositeAssignment_1_1; }
		
		//TimeSliceKeyword
		public RuleCall getIsCompositeTimeSliceKeywordParserRuleCall_1_1_0() { return cIsCompositeTimeSliceKeywordParserRuleCall_1_1_0; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2() { return cUsageDeclarationParserRuleCall_2; }
		
		//ownedFeatureMembership_comp+=TimeSliceFeatureMember
		public Assignment getOwnedFeatureMembership_compAssignment_3() { return cOwnedFeatureMembership_compAssignment_3; }
		
		//TimeSliceFeatureMember
		public RuleCall getOwnedFeatureMembership_compTimeSliceFeatureMemberParserRuleCall_3_0() { return cOwnedFeatureMembership_compTimeSliceFeatureMemberParserRuleCall_3_0; }
		
		//UsageCompletion
		public RuleCall getUsageCompletionParserRuleCall_4() { return cUsageCompletionParserRuleCall_4; }
	}
	public class TimeSliceFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TimeSliceFeature");
		private final Action cTimeSliceFeatureAction = (Action)rule.eContents().get(1);
		
		//TimeSliceFeature SysML::TimeSliceFeature:
		//	{SysML::TimeSliceFeature};
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::TimeSliceFeature}
		public Action getTimeSliceFeatureAction() { return cTimeSliceFeatureAction; }
	}
	public class SnapshotUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SnapshotUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSnapshotKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cOwnedFeatureMembership_compAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compSnapshotFeatureMemberParserRuleCall_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_3.eContents().get(0);
		private final RuleCall cUsageCompletionParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//SnapshotUsage SysML::IndividualUsage:
		//	UsagePrefix? SnapshotKeyword
		//	UsageDeclaration? ownedFeatureMembership_comp+=SnapshotFeatureMember
		//	UsageCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? SnapshotKeyword UsageDeclaration? ownedFeatureMembership_comp+=SnapshotFeatureMember UsageCompletion
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//SnapshotKeyword
		public RuleCall getSnapshotKeywordParserRuleCall_1() { return cSnapshotKeywordParserRuleCall_1; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2() { return cUsageDeclarationParserRuleCall_2; }
		
		//ownedFeatureMembership_comp+=SnapshotFeatureMember
		public Assignment getOwnedFeatureMembership_compAssignment_3() { return cOwnedFeatureMembership_compAssignment_3; }
		
		//SnapshotFeatureMember
		public RuleCall getOwnedFeatureMembership_compSnapshotFeatureMemberParserRuleCall_3_0() { return cOwnedFeatureMembership_compSnapshotFeatureMemberParserRuleCall_3_0; }
		
		//UsageCompletion
		public RuleCall getUsageCompletionParserRuleCall_4() { return cUsageCompletionParserRuleCall_4; }
	}
	public class SnapshotRefUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SnapshotRefUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRefKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cSnapshotKeywordParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cIsCompositeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIsCompositeSnapshotKeywordParserRuleCall_1_1_0 = (RuleCall)cIsCompositeAssignment_1_1.eContents().get(0);
		private final RuleCall cUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cOwnedFeatureMembership_compAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compTimeSliceFeatureMemberParserRuleCall_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_3.eContents().get(0);
		private final RuleCall cUsageCompletionParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//SnapshotRefUsage SysML::IndividualUsage:
		//	UsagePrefix? ('ref' SnapshotKeyword | isComposite?=SnapshotKeyword) UsageDeclaration?
		//	ownedFeatureMembership_comp+=TimeSliceFeatureMember
		//	UsageCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ('ref' SnapshotKeyword | isComposite?=SnapshotKeyword) UsageDeclaration?
		//ownedFeatureMembership_comp+=TimeSliceFeatureMember UsageCompletion
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//('ref' SnapshotKeyword | isComposite?=SnapshotKeyword)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'ref' SnapshotKeyword
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'ref'
		public Keyword getRefKeyword_1_0_0() { return cRefKeyword_1_0_0; }
		
		//SnapshotKeyword
		public RuleCall getSnapshotKeywordParserRuleCall_1_0_1() { return cSnapshotKeywordParserRuleCall_1_0_1; }
		
		//isComposite?=SnapshotKeyword
		public Assignment getIsCompositeAssignment_1_1() { return cIsCompositeAssignment_1_1; }
		
		//SnapshotKeyword
		public RuleCall getIsCompositeSnapshotKeywordParserRuleCall_1_1_0() { return cIsCompositeSnapshotKeywordParserRuleCall_1_1_0; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2() { return cUsageDeclarationParserRuleCall_2; }
		
		//ownedFeatureMembership_comp+=TimeSliceFeatureMember
		public Assignment getOwnedFeatureMembership_compAssignment_3() { return cOwnedFeatureMembership_compAssignment_3; }
		
		//TimeSliceFeatureMember
		public RuleCall getOwnedFeatureMembership_compTimeSliceFeatureMemberParserRuleCall_3_0() { return cOwnedFeatureMembership_compTimeSliceFeatureMemberParserRuleCall_3_0; }
		
		//UsageCompletion
		public RuleCall getUsageCompletionParserRuleCall_4() { return cUsageCompletionParserRuleCall_4; }
	}
	public class SnapshotFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SnapshotFeature");
		private final Action cSnapshotFeatureAction = (Action)rule.eContents().get(1);
		
		//SnapshotFeature SysML::SnapshotFeature:
		//	{SysML::SnapshotFeature};
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::SnapshotFeature}
		public Action getSnapshotFeatureAction() { return cSnapshotFeatureAction; }
	}
	public class TimeSliceFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TimeSliceFeatureMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compTimeSliceFeatureParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		///* INDIVIDUAL MEMBERSHIPS */ TimeSliceFeatureMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=TimeSliceFeature;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=TimeSliceFeature
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//TimeSliceFeature
		public RuleCall getOwnedMemberFeature_compTimeSliceFeatureParserRuleCall_0() { return cOwnedMemberFeature_compTimeSliceFeatureParserRuleCall_0; }
	}
	public class SnapshotFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SnapshotFeatureMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compSnapshotFeatureParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//SnapshotFeatureMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=SnapshotFeature;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=SnapshotFeature
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//SnapshotFeature
		public RuleCall getOwnedMemberFeature_compSnapshotFeatureParserRuleCall_0() { return cOwnedMemberFeature_compSnapshotFeatureParserRuleCall_0; }
	}
	public class PortUsageKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PortUsageKeyword");
		private final RuleCall cPortKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* PORT USAGES */ PortUsageKeyword:
		//	PortKeyword;
		@Override public ParserRule getRule() { return rule; }
		
		//PortKeyword
		public RuleCall getPortKeywordParserRuleCall() { return cPortKeywordParserRuleCall; }
	}
	public class PortUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PortUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPortUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPortUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cUsageCompletionParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//PortUsage SysML::PortUsage:
		//	UsagePrefix? PortUsageKeyword PortUsageDeclaration UsageCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? PortUsageKeyword PortUsageDeclaration UsageCompletion
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//PortUsageKeyword
		public RuleCall getPortUsageKeywordParserRuleCall_1() { return cPortUsageKeywordParserRuleCall_1; }
		
		//PortUsageDeclaration
		public RuleCall getPortUsageDeclarationParserRuleCall_2() { return cPortUsageDeclarationParserRuleCall_2; }
		
		//UsageCompletion
		public RuleCall getUsageCompletionParserRuleCall_3() { return cUsageCompletionParserRuleCall_3; }
	}
	public class PortEndUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PortEndUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPortUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPortUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cUsageCompletionParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//PortEndUsage SysML::PortUsage:
		//	UsagePrefix? PortUsageKeyword? PortUsageDeclaration UsageCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? PortUsageKeyword? PortUsageDeclaration UsageCompletion
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//PortUsageKeyword?
		public RuleCall getPortUsageKeywordParserRuleCall_1() { return cPortUsageKeywordParserRuleCall_1; }
		
		//PortUsageDeclaration
		public RuleCall getPortUsageDeclarationParserRuleCall_2() { return cPortUsageDeclarationParserRuleCall_2; }
		
		//UsageCompletion
		public RuleCall getUsageCompletionParserRuleCall_3() { return cUsageCompletionParserRuleCall_3; }
	}
	public class PortUsageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PortUsageDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cPortTypePartParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cSubsettingPartParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cPortTypePartParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cSubsettingPartParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cRedefinesKeywordParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedRelationship_compRedefinitionParserRuleCall_2_1_0 = (RuleCall)cOwnedRelationship_compAssignment_2_1.eContents().get(0);
		private final RuleCall cPortTypePartParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final RuleCall cSubsettingPartParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		
		//fragment PortUsageDeclaration returns SysML::Usage:
		//	Identification PortTypePart? SubsettingPart
		//	| PortTypePart SubsettingPart
		//	| RedefinesKeyword ownedRelationship_comp+=Redefinition PortTypePart? SubsettingPart;
		@Override public ParserRule getRule() { return rule; }
		
		//Identification PortTypePart? SubsettingPart | PortTypePart SubsettingPart | RedefinesKeyword
		//ownedRelationship_comp+=Redefinition PortTypePart? SubsettingPart
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Identification PortTypePart? SubsettingPart
		public Group getGroup_0() { return cGroup_0; }
		
		//Identification
		public RuleCall getIdentificationParserRuleCall_0_0() { return cIdentificationParserRuleCall_0_0; }
		
		//PortTypePart?
		public RuleCall getPortTypePartParserRuleCall_0_1() { return cPortTypePartParserRuleCall_0_1; }
		
		//SubsettingPart
		public RuleCall getSubsettingPartParserRuleCall_0_2() { return cSubsettingPartParserRuleCall_0_2; }
		
		//PortTypePart SubsettingPart
		public Group getGroup_1() { return cGroup_1; }
		
		//PortTypePart
		public RuleCall getPortTypePartParserRuleCall_1_0() { return cPortTypePartParserRuleCall_1_0; }
		
		//SubsettingPart
		public RuleCall getSubsettingPartParserRuleCall_1_1() { return cSubsettingPartParserRuleCall_1_1; }
		
		//RedefinesKeyword ownedRelationship_comp+=Redefinition PortTypePart? SubsettingPart
		public Group getGroup_2() { return cGroup_2; }
		
		//RedefinesKeyword
		public RuleCall getRedefinesKeywordParserRuleCall_2_0() { return cRedefinesKeywordParserRuleCall_2_0; }
		
		//ownedRelationship_comp+=Redefinition
		public Assignment getOwnedRelationship_compAssignment_2_1() { return cOwnedRelationship_compAssignment_2_1; }
		
		//Redefinition
		public RuleCall getOwnedRelationship_compRedefinitionParserRuleCall_2_1_0() { return cOwnedRelationship_compRedefinitionParserRuleCall_2_1_0; }
		
		//PortTypePart?
		public RuleCall getPortTypePartParserRuleCall_2_2() { return cPortTypePartParserRuleCall_2_2; }
		
		//SubsettingPart
		public RuleCall getSubsettingPartParserRuleCall_2_3() { return cSubsettingPartParserRuleCall_2_3; }
	}
	public class PortTypePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PortTypePart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDefinedByKeywordParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cAlternatives_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_1_0_0 = (Alternatives)cGroup_0_1_0.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_0_1_0_0_0 = (Assignment)cAlternatives_0_1_0_0.eContents().get(0);
		private final RuleCall cOwnedRelationship_compFeatureTypingParserRuleCall_0_1_0_0_0_0 = (RuleCall)cOwnedRelationship_compAssignment_0_1_0_0_0.eContents().get(0);
		private final Group cGroup_0_1_0_0_1 = (Group)cAlternatives_0_1_0_0.eContents().get(1);
		private final Keyword cTildeKeyword_0_1_0_0_1_0 = (Keyword)cGroup_0_1_0_0_1.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_0_1_0_0_1_1 = (Assignment)cGroup_0_1_0_0_1.eContents().get(1);
		private final RuleCall cOwnedRelationship_compConjugatedPortTypingParserRuleCall_0_1_0_0_1_1_0 = (RuleCall)cOwnedRelationship_compAssignment_0_1_0_0_1_1.eContents().get(0);
		private final Group cGroup_0_1_0_1 = (Group)cGroup_0_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0_1_0 = (Keyword)cGroup_0_1_0_1.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_0_1_0_1_1 = (Assignment)cGroup_0_1_0_1.eContents().get(1);
		private final RuleCall cOwnedRelationship_compFeatureTypingParserRuleCall_0_1_0_1_1_0 = (RuleCall)cOwnedRelationship_compAssignment_0_1_0_1_1.eContents().get(0);
		private final Keyword cAnyKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cMultiplicityPartParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cMultiplicityPartParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//fragment PortTypePart returns SysML::Feature:
		//	DefinedByKeyword ((ownedRelationship_comp+=FeatureTyping | '~' ownedRelationship_comp+=ConjugatedPortTyping) (','
		//	ownedRelationship_comp+=FeatureTyping)* | 'any') MultiplicityPart?
		//	| MultiplicityPart;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinedByKeyword ((ownedRelationship_comp+=FeatureTyping | '~' ownedRelationship_comp+=ConjugatedPortTyping) (','
		//ownedRelationship_comp+=FeatureTyping)* | 'any') MultiplicityPart? | MultiplicityPart
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DefinedByKeyword ((ownedRelationship_comp+=FeatureTyping | '~' ownedRelationship_comp+=ConjugatedPortTyping) (','
		//ownedRelationship_comp+=FeatureTyping)* | 'any') MultiplicityPart?
		public Group getGroup_0() { return cGroup_0; }
		
		//DefinedByKeyword
		public RuleCall getDefinedByKeywordParserRuleCall_0_0() { return cDefinedByKeywordParserRuleCall_0_0; }
		
		//((ownedRelationship_comp+=FeatureTyping | '~' ownedRelationship_comp+=ConjugatedPortTyping) (','
		//ownedRelationship_comp+=FeatureTyping)* | 'any')
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//(ownedRelationship_comp+=FeatureTyping | '~' ownedRelationship_comp+=ConjugatedPortTyping) (','
		//ownedRelationship_comp+=FeatureTyping)*
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }
		
		//(ownedRelationship_comp+=FeatureTyping | '~' ownedRelationship_comp+=ConjugatedPortTyping)
		public Alternatives getAlternatives_0_1_0_0() { return cAlternatives_0_1_0_0; }
		
		//ownedRelationship_comp+=FeatureTyping
		public Assignment getOwnedRelationship_compAssignment_0_1_0_0_0() { return cOwnedRelationship_compAssignment_0_1_0_0_0; }
		
		//FeatureTyping
		public RuleCall getOwnedRelationship_compFeatureTypingParserRuleCall_0_1_0_0_0_0() { return cOwnedRelationship_compFeatureTypingParserRuleCall_0_1_0_0_0_0; }
		
		//'~' ownedRelationship_comp+=ConjugatedPortTyping
		public Group getGroup_0_1_0_0_1() { return cGroup_0_1_0_0_1; }
		
		//'~'
		public Keyword getTildeKeyword_0_1_0_0_1_0() { return cTildeKeyword_0_1_0_0_1_0; }
		
		//ownedRelationship_comp+=ConjugatedPortTyping
		public Assignment getOwnedRelationship_compAssignment_0_1_0_0_1_1() { return cOwnedRelationship_compAssignment_0_1_0_0_1_1; }
		
		//ConjugatedPortTyping
		public RuleCall getOwnedRelationship_compConjugatedPortTypingParserRuleCall_0_1_0_0_1_1_0() { return cOwnedRelationship_compConjugatedPortTypingParserRuleCall_0_1_0_0_1_1_0; }
		
		//(',' ownedRelationship_comp+=FeatureTyping)*
		public Group getGroup_0_1_0_1() { return cGroup_0_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_0_1_0_1_0() { return cCommaKeyword_0_1_0_1_0; }
		
		//ownedRelationship_comp+=FeatureTyping
		public Assignment getOwnedRelationship_compAssignment_0_1_0_1_1() { return cOwnedRelationship_compAssignment_0_1_0_1_1; }
		
		//FeatureTyping
		public RuleCall getOwnedRelationship_compFeatureTypingParserRuleCall_0_1_0_1_1_0() { return cOwnedRelationship_compFeatureTypingParserRuleCall_0_1_0_1_1_0; }
		
		//'any'
		public Keyword getAnyKeyword_0_1_1() { return cAnyKeyword_0_1_1; }
		
		//MultiplicityPart?
		public RuleCall getMultiplicityPartParserRuleCall_0_2() { return cMultiplicityPartParserRuleCall_0_2; }
		
		//MultiplicityPart
		public RuleCall getMultiplicityPartParserRuleCall_1() { return cMultiplicityPartParserRuleCall_1; }
	}
	public class ConjugatedPortTypingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConjugatedPortTyping");
		private final Assignment cPortDefinitionAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cPortDefinitionPortDefinitionCrossReference_0 = (CrossReference)cPortDefinitionAssignment.eContents().get(0);
		private final RuleCall cPortDefinitionPortDefinitionQualifiedNameParserRuleCall_0_1 = (RuleCall)cPortDefinitionPortDefinitionCrossReference_0.eContents().get(1);
		
		//ConjugatedPortTyping SysML::ConjugatedPortTyping:
		//	portDefinition=[SysML::PortDefinition|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//portDefinition=[SysML::PortDefinition|QualifiedName]
		public Assignment getPortDefinitionAssignment() { return cPortDefinitionAssignment; }
		
		//[SysML::PortDefinition|QualifiedName]
		public CrossReference getPortDefinitionPortDefinitionCrossReference_0() { return cPortDefinitionPortDefinitionCrossReference_0; }
		
		//QualifiedName
		public RuleCall getPortDefinitionPortDefinitionQualifiedNameParserRuleCall_0_1() { return cPortDefinitionPortDefinitionQualifiedNameParserRuleCall_0_1; }
	}
	public class ConnectorKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConnectorKeyword");
		private final Keyword cConnectKeyword = (Keyword)rule.eContents().get(1);
		
		///* CONNECTION USAGES */ ConnectorKeyword:
		//	'connect';
		@Override public ParserRule getRule() { return rule; }
		
		//'connect'
		public Keyword getConnectKeyword() { return cConnectKeyword; }
	}
	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Connector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cConnectorKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cConnectorPartParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cConnectionDefBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Connector SysML::ConnectionUsage:
		//	UsagePrefix? ConnectorKeyword ConnectorPart ConnectionDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ConnectorKeyword ConnectorPart ConnectionDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//ConnectorKeyword
		public RuleCall getConnectorKeywordParserRuleCall_1() { return cConnectorKeywordParserRuleCall_1; }
		
		//ConnectorPart
		public RuleCall getConnectorPartParserRuleCall_2() { return cConnectorPartParserRuleCall_2; }
		
		//ConnectionDefBody
		public RuleCall getConnectionDefBodyParserRuleCall_3() { return cConnectionDefBodyParserRuleCall_3; }
	}
	public class ConnectionUsageKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConnectionUsageKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConnectionKeywordParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cLinkKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ConnectionUsageKeyword:
		//	ConnectionKeyword | 'link';
		@Override public ParserRule getRule() { return rule; }
		
		//ConnectionKeyword | 'link'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConnectionKeyword
		public RuleCall getConnectionKeywordParserRuleCall_0() { return cConnectionKeywordParserRuleCall_0; }
		
		//'link'
		public Keyword getLinkKeyword_1() { return cLinkKeyword_1; }
	}
	public class ConnectionUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConnectionUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cConnectionUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cConnectorKeywordParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cConnectorPartParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cConnectionDefBodyParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//ConnectionUsage SysML::ConnectionUsage:
		//	UsagePrefix? ConnectionUsageKeyword UsageDeclaration? (ConnectorKeyword ConnectorPart)? ConnectionDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ConnectionUsageKeyword UsageDeclaration? (ConnectorKeyword ConnectorPart)? ConnectionDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//ConnectionUsageKeyword
		public RuleCall getConnectionUsageKeywordParserRuleCall_1() { return cConnectionUsageKeywordParserRuleCall_1; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2() { return cUsageDeclarationParserRuleCall_2; }
		
		//(ConnectorKeyword ConnectorPart)?
		public Group getGroup_3() { return cGroup_3; }
		
		//ConnectorKeyword
		public RuleCall getConnectorKeywordParserRuleCall_3_0() { return cConnectorKeywordParserRuleCall_3_0; }
		
		//ConnectorPart
		public RuleCall getConnectorPartParserRuleCall_3_1() { return cConnectorPartParserRuleCall_3_1; }
		
		//ConnectionDefBody
		public RuleCall getConnectionDefBodyParserRuleCall_4() { return cConnectionDefBodyParserRuleCall_4; }
	}
	public class ConnectorPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConnectorPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_0_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0_0.eContents().get(0);
		private final Keyword cToKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_0_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_4_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//fragment ConnectorPart returns SysML::ConnectionUsage:
		//	ownedFeatureMembership_comp+=ConnectorEndMember 'to' ownedFeatureMembership_comp+=ConnectorEndMember
		//	| '(' ownedFeatureMembership_comp+=ConnectorEndMember ',' ownedFeatureMembership_comp+=ConnectorEndMember (','
		//	ownedFeatureMembership_comp+=ConnectorEndMember)*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember 'to' ownedFeatureMembership_comp+=ConnectorEndMember | '('
		//ownedFeatureMembership_comp+=ConnectorEndMember ',' ownedFeatureMembership_comp+=ConnectorEndMember (','
		//ownedFeatureMembership_comp+=ConnectorEndMember)* ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember 'to' ownedFeatureMembership_comp+=ConnectorEndMember
		public Group getGroup_0() { return cGroup_0; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_0_0() { return cOwnedFeatureMembership_compAssignment_0_0; }
		
		//ConnectorEndMember
		public RuleCall getOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_0_0_0() { return cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_0_0_0; }
		
		//'to'
		public Keyword getToKeyword_0_1() { return cToKeyword_0_1; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_0_2() { return cOwnedFeatureMembership_compAssignment_0_2; }
		
		//ConnectorEndMember
		public RuleCall getOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_0_2_0() { return cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_0_2_0; }
		
		//'(' ownedFeatureMembership_comp+=ConnectorEndMember ',' ownedFeatureMembership_comp+=ConnectorEndMember (','
		//ownedFeatureMembership_comp+=ConnectorEndMember)* ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_1() { return cOwnedFeatureMembership_compAssignment_1_1; }
		
		//ConnectorEndMember
		public RuleCall getOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_1_0() { return cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_3() { return cOwnedFeatureMembership_compAssignment_1_3; }
		
		//ConnectorEndMember
		public RuleCall getOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_3_0() { return cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_3_0; }
		
		//(',' ownedFeatureMembership_comp+=ConnectorEndMember)*
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//','
		public Keyword getCommaKeyword_1_4_0() { return cCommaKeyword_1_4_0; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_4_1() { return cOwnedFeatureMembership_compAssignment_1_4_1; }
		
		//ConnectorEndMember
		public RuleCall getOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_4_1_0() { return cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}
	public class ConnectorEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConnectorEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationship_compSubsetParserRuleCall_0_0 = (RuleCall)cOwnedRelationship_compAssignment_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		
		//ConnectorEnd SysML::Feature:
		//	ownedRelationship_comp+=Subset ownedFeatureMembership_comp+=MultiplicityMember?;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=Subset ownedFeatureMembership_comp+=MultiplicityMember?
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship_comp+=Subset
		public Assignment getOwnedRelationship_compAssignment_0() { return cOwnedRelationship_compAssignment_0; }
		
		//Subset
		public RuleCall getOwnedRelationship_compSubsetParserRuleCall_0_0() { return cOwnedRelationship_compSubsetParserRuleCall_0_0; }
		
		//ownedFeatureMembership_comp+=MultiplicityMember?
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//MultiplicityMember
		public RuleCall getOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_1_0; }
	}
	public class MultiplicitySourceEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.MultiplicitySourceEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSourceEndAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		
		//MultiplicitySourceEnd SysML::Feature:
		//	{SysML::SourceEnd} ownedFeatureMembership_comp+=MultiplicityMember?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::SourceEnd} ownedFeatureMembership_comp+=MultiplicityMember?
		public Group getGroup() { return cGroup; }
		
		//{SysML::SourceEnd}
		public Action getSourceEndAction_0() { return cSourceEndAction_0; }
		
		//ownedFeatureMembership_comp+=MultiplicityMember?
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//MultiplicityMember
		public RuleCall getOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_1_0; }
	}
	public class EmptySourceEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EmptySourceEnd");
		private final Action cSourceEndAction = (Action)rule.eContents().get(1);
		
		//EmptySourceEnd SysML::Feature:
		//	{SysML::SourceEnd};
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::SourceEnd}
		public Action getSourceEndAction() { return cSourceEndAction; }
	}
	public class EmptyTargetEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EmptyTargetEnd");
		private final Action cTargetEndAction = (Action)rule.eContents().get(1);
		
		//EmptyTargetEnd SysML::Feature:
		//	{SysML::TargetEnd};
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::TargetEnd}
		public Action getTargetEndAction() { return cTargetEndAction; }
	}
	public class ConnectorEndMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConnectorEndMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cMemberNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cMemberNameNameParserRuleCall_0_0_0 = (RuleCall)cMemberNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOwnedMemberFeature_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compConnectorEndParserRuleCall_1_0 = (RuleCall)cOwnedMemberFeature_compAssignment_1.eContents().get(0);
		
		///* CONNECTION MEMBERSHIPS */ ConnectorEndMember SysML::EndFeatureMembership:
		//	(memberName=Name '=>')? ownedMemberFeature_comp=ConnectorEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//(memberName=Name '=>')? ownedMemberFeature_comp=ConnectorEnd
		public Group getGroup() { return cGroup; }
		
		//(memberName=Name '=>')?
		public Group getGroup_0() { return cGroup_0; }
		
		//memberName=Name
		public Assignment getMemberNameAssignment_0_0() { return cMemberNameAssignment_0_0; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_0_0_0() { return cMemberNameNameParserRuleCall_0_0_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_0_1() { return cEqualsSignGreaterThanSignKeyword_0_1; }
		
		//ownedMemberFeature_comp=ConnectorEnd
		public Assignment getOwnedMemberFeature_compAssignment_1() { return cOwnedMemberFeature_compAssignment_1; }
		
		//ConnectorEnd
		public RuleCall getOwnedMemberFeature_compConnectorEndParserRuleCall_1_0() { return cOwnedMemberFeature_compConnectorEndParserRuleCall_1_0; }
	}
	public class MultiplicitySourceEndMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.MultiplicitySourceEndMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compMultiplicitySourceEndParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//MultiplicitySourceEndMember SysML::EndFeatureMembership:
		//	ownedMemberFeature_comp=MultiplicitySourceEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=MultiplicitySourceEnd
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//MultiplicitySourceEnd
		public RuleCall getOwnedMemberFeature_compMultiplicitySourceEndParserRuleCall_0() { return cOwnedMemberFeature_compMultiplicitySourceEndParserRuleCall_0; }
	}
	public class EmptySourceEndMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EmptySourceEndMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compEmptySourceEndParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//EmptySourceEndMember SysML::EndFeatureMembership:
		//	ownedMemberFeature_comp=EmptySourceEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=EmptySourceEnd
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//EmptySourceEnd
		public RuleCall getOwnedMemberFeature_compEmptySourceEndParserRuleCall_0() { return cOwnedMemberFeature_compEmptySourceEndParserRuleCall_0; }
	}
	public class EmptyTargetEndMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EmptyTargetEndMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compEmptyTargetEndParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//EmptyTargetEndMember SysML::EndFeatureMembership:
		//	ownedMemberFeature_comp=EmptyTargetEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=EmptyTargetEnd
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//EmptyTargetEnd
		public RuleCall getOwnedMemberFeature_compEmptyTargetEndParserRuleCall_0() { return cOwnedMemberFeature_compEmptyTargetEndParserRuleCall_0; }
	}
	public class InterfaceUsageKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.InterfaceUsageKeyword");
		private final RuleCall cInterfaceKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* INTERFACE USAGES */ InterfaceUsageKeyword:
		//	InterfaceKeyword;
		@Override public ParserRule getRule() { return rule; }
		
		//InterfaceKeyword
		public RuleCall getInterfaceKeywordParserRuleCall() { return cInterfaceKeywordParserRuleCall; }
	}
	public class InterfaceUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.InterfaceUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cInterfaceUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cInterfaceUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cInterfaceDefBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//InterfaceUsage SysML::InterfaceUsage:
		//	UsagePrefix? InterfaceUsageKeyword InterfaceUsageDeclaration InterfaceDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? InterfaceUsageKeyword InterfaceUsageDeclaration InterfaceDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//InterfaceUsageKeyword
		public RuleCall getInterfaceUsageKeywordParserRuleCall_1() { return cInterfaceUsageKeywordParserRuleCall_1; }
		
		//InterfaceUsageDeclaration
		public RuleCall getInterfaceUsageDeclarationParserRuleCall_2() { return cInterfaceUsageDeclarationParserRuleCall_2; }
		
		//InterfaceDefBody
		public RuleCall getInterfaceDefBodyParserRuleCall_3() { return cInterfaceDefBodyParserRuleCall_3; }
	}
	public class InterfaceUsageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.InterfaceUsageDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cUsageDeclarationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final RuleCall cConnectorKeywordParserRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final RuleCall cConnectorPartParserRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final RuleCall cConnectorPartParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//fragment InterfaceUsageDeclaration returns SysML::InterfaceUsage:
		//	UsageDeclaration? (ConnectorKeyword ConnectorPart)? | ConnectorPart;
		@Override public ParserRule getRule() { return rule; }
		
		//UsageDeclaration? (ConnectorKeyword ConnectorPart)? | ConnectorPart
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UsageDeclaration? (ConnectorKeyword ConnectorPart)?
		public Group getGroup_0() { return cGroup_0; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_0_0() { return cUsageDeclarationParserRuleCall_0_0; }
		
		//(ConnectorKeyword ConnectorPart)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//ConnectorKeyword
		public RuleCall getConnectorKeywordParserRuleCall_0_1_0() { return cConnectorKeywordParserRuleCall_0_1_0; }
		
		//ConnectorPart
		public RuleCall getConnectorPartParserRuleCall_0_1_1() { return cConnectorPartParserRuleCall_0_1_1; }
		
		//ConnectorPart
		public RuleCall getConnectorPartParserRuleCall_1() { return cConnectorPartParserRuleCall_1; }
	}
	public class BindingKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.BindingKeyword");
		private final Keyword cBindKeyword = (Keyword)rule.eContents().get(1);
		
		///* BINDING CONNECTORS */ BindingKeyword:
		//	'bind';
		@Override public ParserRule getRule() { return rule; }
		
		//'bind'
		public Keyword getBindKeyword() { return cBindKeyword; }
	}
	public class BindingConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.BindingConnector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final RuleCall cBindingKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cUsageDeclarationParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cAsKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOwnedFeatureMembership_compAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_5_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_5.eContents().get(0);
		private final RuleCall cDefinitionBodyParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//BindingConnector SysML::BindingConnector:
		//	isAbstract?='abstract'? BindingKeyword (UsageDeclaration 'as')?
		//	ownedFeatureMembership_comp+=ConnectorEndMember '=' ownedFeatureMembership_comp+=ConnectorEndMember
		//	DefinitionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? BindingKeyword (UsageDeclaration 'as')? ownedFeatureMembership_comp+=ConnectorEndMember '='
		//ownedFeatureMembership_comp+=ConnectorEndMember DefinitionBody
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//BindingKeyword
		public RuleCall getBindingKeywordParserRuleCall_1() { return cBindingKeywordParserRuleCall_1; }
		
		//(UsageDeclaration 'as')?
		public Group getGroup_2() { return cGroup_2; }
		
		//UsageDeclaration
		public RuleCall getUsageDeclarationParserRuleCall_2_0() { return cUsageDeclarationParserRuleCall_2_0; }
		
		//'as'
		public Keyword getAsKeyword_2_1() { return cAsKeyword_2_1; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_3() { return cOwnedFeatureMembership_compAssignment_3; }
		
		//ConnectorEndMember
		public RuleCall getOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_3_0() { return cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_5() { return cOwnedFeatureMembership_compAssignment_5; }
		
		//ConnectorEndMember
		public RuleCall getOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_5_0() { return cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_5_0; }
		
		//DefinitionBody
		public RuleCall getDefinitionBodyParserRuleCall_6() { return cDefinitionBodyParserRuleCall_6; }
	}
	public class SuccessionKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SuccessionKeyword");
		private final Keyword cSuccessionKeyword = (Keyword)rule.eContents().get(1);
		
		///* SUCCESSIONS */ SuccessionKeyword:
		//	'succession';
		@Override public ParserRule getRule() { return rule; }
		
		//'succession'
		public Keyword getSuccessionKeyword() { return cSuccessionKeyword; }
	}
	public class SuccessionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Succession");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final RuleCall cSuccessionKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSuccessionDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cConnectionDefBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Succession SysML::Succession:
		//	isAbstract?='abstract'? SuccessionKeyword SuccessionDeclaration ConnectionDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? SuccessionKeyword SuccessionDeclaration ConnectionDefBody
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//SuccessionKeyword
		public RuleCall getSuccessionKeywordParserRuleCall_1() { return cSuccessionKeywordParserRuleCall_1; }
		
		//SuccessionDeclaration
		public RuleCall getSuccessionDeclarationParserRuleCall_2() { return cSuccessionDeclarationParserRuleCall_2; }
		
		//ConnectionDefBody
		public RuleCall getConnectionDefBodyParserRuleCall_3() { return cConnectionDefBodyParserRuleCall_3; }
	}
	public class SuccessionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SuccessionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cUsageDeclarationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFirstKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnedFeatureMembership_compAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_3.eContents().get(0);
		
		//fragment SuccessionDeclaration returns SysML::Succession:
		//	(UsageDeclaration? 'first')?
		//	ownedFeatureMembership_comp+=ConnectorEndMember 'then' ownedFeatureMembership_comp+=ConnectorEndMember;
		@Override public ParserRule getRule() { return rule; }
		
		//(UsageDeclaration? 'first')? ownedFeatureMembership_comp+=ConnectorEndMember 'then'
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Group getGroup() { return cGroup; }
		
		//(UsageDeclaration? 'first')?
		public Group getGroup_0() { return cGroup_0; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_0_0() { return cUsageDeclarationParserRuleCall_0_0; }
		
		//'first'
		public Keyword getFirstKeyword_0_1() { return cFirstKeyword_0_1; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//ConnectorEndMember
		public RuleCall getOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_3() { return cOwnedFeatureMembership_compAssignment_3; }
		
		//ConnectorEndMember
		public RuleCall getOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_3_0() { return cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_3_0; }
	}
	public class TargetSuccessionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TargetSuccession");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compMultiplicitySourceEndMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_2.eContents().get(0);
		
		//TargetSuccession SysML::Succession:
		//	'then' ownedFeatureMembership_comp+=MultiplicitySourceEndMember ownedFeatureMembership_comp+=ConnectorEndMember;
		@Override public ParserRule getRule() { return rule; }
		
		//'then' ownedFeatureMembership_comp+=MultiplicitySourceEndMember ownedFeatureMembership_comp+=ConnectorEndMember
		public Group getGroup() { return cGroup; }
		
		//'then'
		public Keyword getThenKeyword_0() { return cThenKeyword_0; }
		
		//ownedFeatureMembership_comp+=MultiplicitySourceEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//MultiplicitySourceEndMember
		public RuleCall getOwnedFeatureMembership_compMultiplicitySourceEndMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compMultiplicitySourceEndMemberParserRuleCall_1_0; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_2() { return cOwnedFeatureMembership_compAssignment_2; }
		
		//ConnectorEndMember
		public RuleCall getOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_2_0() { return cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_2_0; }
	}
	public class EmptySuccessionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EmptySuccession");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compMultiplicitySourceEndMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compEmptyTargetEndMemberParserRuleCall_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_2.eContents().get(0);
		
		//EmptySuccession SysML::Succession:
		//	'then' ownedFeatureMembership_comp+=MultiplicitySourceEndMember ownedFeatureMembership_comp+=EmptyTargetEndMember;
		@Override public ParserRule getRule() { return rule; }
		
		//'then' ownedFeatureMembership_comp+=MultiplicitySourceEndMember ownedFeatureMembership_comp+=EmptyTargetEndMember
		public Group getGroup() { return cGroup; }
		
		//'then'
		public Keyword getThenKeyword_0() { return cThenKeyword_0; }
		
		//ownedFeatureMembership_comp+=MultiplicitySourceEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//MultiplicitySourceEndMember
		public RuleCall getOwnedFeatureMembership_compMultiplicitySourceEndMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compMultiplicitySourceEndMemberParserRuleCall_1_0; }
		
		//ownedFeatureMembership_comp+=EmptyTargetEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_2() { return cOwnedFeatureMembership_compAssignment_2; }
		
		//EmptyTargetEndMember
		public RuleCall getOwnedFeatureMembership_compEmptyTargetEndMemberParserRuleCall_2_0() { return cOwnedFeatureMembership_compEmptyTargetEndMemberParserRuleCall_2_0; }
	}
	public class GuardedSuccessionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.GuardedSuccession");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSuccessionKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFirstKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compTransitionSourceMemberParserRuleCall_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_2.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compGuardExpressionMemberParserRuleCall_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_3.eContents().get(0);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOwnedFeatureMembership_compAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOwnedFeatureMembership_compTransitionSuccessionMemberParserRuleCall_5_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_5.eContents().get(0);
		
		//GuardedSuccession SysML::TransitionUsage:
		//	SuccessionKeyword (UsageDeclaration? 'first')?
		//	ownedFeatureMembership_comp+=TransitionSourceMember
		//	ownedFeatureMembership_comp+=GuardExpressionMember
		//	'then' ownedFeatureMembership_comp+=TransitionSuccessionMember;
		@Override public ParserRule getRule() { return rule; }
		
		//SuccessionKeyword (UsageDeclaration? 'first')? ownedFeatureMembership_comp+=TransitionSourceMember
		//ownedFeatureMembership_comp+=GuardExpressionMember 'then' ownedFeatureMembership_comp+=TransitionSuccessionMember
		public Group getGroup() { return cGroup; }
		
		//SuccessionKeyword
		public RuleCall getSuccessionKeywordParserRuleCall_0() { return cSuccessionKeywordParserRuleCall_0; }
		
		//(UsageDeclaration? 'first')?
		public Group getGroup_1() { return cGroup_1; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_1_0() { return cUsageDeclarationParserRuleCall_1_0; }
		
		//'first'
		public Keyword getFirstKeyword_1_1() { return cFirstKeyword_1_1; }
		
		//ownedFeatureMembership_comp+=TransitionSourceMember
		public Assignment getOwnedFeatureMembership_compAssignment_2() { return cOwnedFeatureMembership_compAssignment_2; }
		
		//TransitionSourceMember
		public RuleCall getOwnedFeatureMembership_compTransitionSourceMemberParserRuleCall_2_0() { return cOwnedFeatureMembership_compTransitionSourceMemberParserRuleCall_2_0; }
		
		//ownedFeatureMembership_comp+=GuardExpressionMember
		public Assignment getOwnedFeatureMembership_compAssignment_3() { return cOwnedFeatureMembership_compAssignment_3; }
		
		//GuardExpressionMember
		public RuleCall getOwnedFeatureMembership_compGuardExpressionMemberParserRuleCall_3_0() { return cOwnedFeatureMembership_compGuardExpressionMemberParserRuleCall_3_0; }
		
		//'then'
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }
		
		//ownedFeatureMembership_comp+=TransitionSuccessionMember
		public Assignment getOwnedFeatureMembership_compAssignment_5() { return cOwnedFeatureMembership_compAssignment_5; }
		
		//TransitionSuccessionMember
		public RuleCall getOwnedFeatureMembership_compTransitionSuccessionMemberParserRuleCall_5_0() { return cOwnedFeatureMembership_compTransitionSuccessionMemberParserRuleCall_5_0; }
	}
	public class GuardedTargetSuccessionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.GuardedTargetSuccession");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compGuardExpressionMemberParserRuleCall_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0.eContents().get(0);
		private final Keyword cThenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compTransitionSuccessionMemberParserRuleCall_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_2.eContents().get(0);
		
		//GuardedTargetSuccession SysML::TransitionUsage:
		//	ownedFeatureMembership_comp+=GuardExpressionMember
		//	'then' ownedFeatureMembership_comp+=TransitionSuccessionMember;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=GuardExpressionMember 'then' ownedFeatureMembership_comp+=TransitionSuccessionMember
		public Group getGroup() { return cGroup; }
		
		//ownedFeatureMembership_comp+=GuardExpressionMember
		public Assignment getOwnedFeatureMembership_compAssignment_0() { return cOwnedFeatureMembership_compAssignment_0; }
		
		//GuardExpressionMember
		public RuleCall getOwnedFeatureMembership_compGuardExpressionMemberParserRuleCall_0_0() { return cOwnedFeatureMembership_compGuardExpressionMemberParserRuleCall_0_0; }
		
		//'then'
		public Keyword getThenKeyword_1() { return cThenKeyword_1; }
		
		//ownedFeatureMembership_comp+=TransitionSuccessionMember
		public Assignment getOwnedFeatureMembership_compAssignment_2() { return cOwnedFeatureMembership_compAssignment_2; }
		
		//TransitionSuccessionMember
		public RuleCall getOwnedFeatureMembership_compTransitionSuccessionMemberParserRuleCall_2_0() { return cOwnedFeatureMembership_compTransitionSuccessionMemberParserRuleCall_2_0; }
	}
	public class DefaultTargetSuccessionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.DefaultTargetSuccession");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compTransitionSuccessionMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		
		//DefaultTargetSuccession SysML::TransitionUsage:
		//	'else' ownedFeatureMembership_comp+=TransitionSuccessionMember;
		@Override public ParserRule getRule() { return rule; }
		
		//'else' ownedFeatureMembership_comp+=TransitionSuccessionMember
		public Group getGroup() { return cGroup; }
		
		//'else'
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }
		
		//ownedFeatureMembership_comp+=TransitionSuccessionMember
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//TransitionSuccessionMember
		public RuleCall getOwnedFeatureMembership_compTransitionSuccessionMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compTransitionSuccessionMemberParserRuleCall_1_0; }
	}
	public class ItemFlowKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ItemFlowKeyword");
		private final Keyword cStreamKeyword = (Keyword)rule.eContents().get(1);
		
		///* ITEM FLOWS */ ItemFlowKeyword:
		//	'stream';
		@Override public ParserRule getRule() { return rule; }
		
		//'stream'
		public Keyword getStreamKeyword() { return cStreamKeyword; }
	}
	public class ItemFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ItemFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final RuleCall cItemFlowKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cItemFlowDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cDefinitionBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ItemFlow SysML::ItemFlow:
		//	isAbstract?='abstract'? ItemFlowKeyword ItemFlowDeclaration DefinitionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? ItemFlowKeyword ItemFlowDeclaration DefinitionBody
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//ItemFlowKeyword
		public RuleCall getItemFlowKeywordParserRuleCall_1() { return cItemFlowKeywordParserRuleCall_1; }
		
		//ItemFlowDeclaration
		public RuleCall getItemFlowDeclarationParserRuleCall_2() { return cItemFlowDeclarationParserRuleCall_2; }
		
		//DefinitionBody
		public RuleCall getDefinitionBodyParserRuleCall_3() { return cDefinitionBodyParserRuleCall_3; }
	}
	public class SuccessionItemFlowKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SuccessionItemFlowKeyword");
		private final Keyword cFlowKeyword = (Keyword)rule.eContents().get(1);
		
		//SuccessionItemFlowKeyword:
		//	'flow';
		@Override public ParserRule getRule() { return rule; }
		
		//'flow'
		public Keyword getFlowKeyword() { return cFlowKeyword; }
	}
	public class SuccessionItemFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SuccessionItemFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final RuleCall cSuccessionItemFlowKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cItemFlowDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cDefinitionBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//SuccessionItemFlow SysML::SuccessionItemFlow:
		//	isAbstract?='abstract'? SuccessionItemFlowKeyword ItemFlowDeclaration DefinitionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? SuccessionItemFlowKeyword ItemFlowDeclaration DefinitionBody
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//SuccessionItemFlowKeyword
		public RuleCall getSuccessionItemFlowKeywordParserRuleCall_1() { return cSuccessionItemFlowKeywordParserRuleCall_1; }
		
		//ItemFlowDeclaration
		public RuleCall getItemFlowDeclarationParserRuleCall_2() { return cItemFlowDeclarationParserRuleCall_2; }
		
		//DefinitionBody
		public RuleCall getDefinitionBodyParserRuleCall_3() { return cDefinitionBodyParserRuleCall_3; }
	}
	public class ItemFlowDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ItemFlowDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cUsageDeclarationParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_0_1 = (Alternatives)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_0_1_0 = (Group)cAlternatives_0_0_1.eContents().get(0);
		private final Keyword cOfKeyword_0_0_1_0_0 = (Keyword)cGroup_0_0_1_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_0_0_1_0_1 = (Assignment)cGroup_0_0_1_0.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compItemFeatureMemberParserRuleCall_0_0_1_0_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0_0_1_0_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_0_0_1_1 = (Assignment)cAlternatives_0_0_1.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compEmptyItemFeatureMemberParserRuleCall_0_0_1_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0_0_1_1.eContents().get(0);
		private final Keyword cFromKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cOwnedFeatureMembership_compAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compEmptyItemFeatureMemberParserRuleCall_0_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compItemFlowEndMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnedFeatureMembership_compAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compItemFlowEndMemberParserRuleCall_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_3.eContents().get(0);
		
		//fragment ItemFlowDeclaration returns SysML::ItemFlow:
		//	(UsageDeclaration? ('of' ownedFeatureMembership_comp+=ItemFeatureMember
		//	| ownedFeatureMembership_comp+=EmptyItemFeatureMember) 'from'
		//	| ownedFeatureMembership_comp+=EmptyItemFeatureMember) ownedFeatureMembership_comp+=ItemFlowEndMember 'to'
		//	ownedFeatureMembership_comp+=ItemFlowEndMember;
		@Override public ParserRule getRule() { return rule; }
		
		//(UsageDeclaration? ('of' ownedFeatureMembership_comp+=ItemFeatureMember |
		//ownedFeatureMembership_comp+=EmptyItemFeatureMember) 'from' | ownedFeatureMembership_comp+=EmptyItemFeatureMember)
		//ownedFeatureMembership_comp+=ItemFlowEndMember 'to' ownedFeatureMembership_comp+=ItemFlowEndMember
		public Group getGroup() { return cGroup; }
		
		//(UsageDeclaration? ('of' ownedFeatureMembership_comp+=ItemFeatureMember |
		//ownedFeatureMembership_comp+=EmptyItemFeatureMember) 'from' | ownedFeatureMembership_comp+=EmptyItemFeatureMember)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//UsageDeclaration? ('of' ownedFeatureMembership_comp+=ItemFeatureMember |
		//ownedFeatureMembership_comp+=EmptyItemFeatureMember) 'from'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_0_0_0() { return cUsageDeclarationParserRuleCall_0_0_0; }
		
		//('of' ownedFeatureMembership_comp+=ItemFeatureMember | ownedFeatureMembership_comp+=EmptyItemFeatureMember)
		public Alternatives getAlternatives_0_0_1() { return cAlternatives_0_0_1; }
		
		//'of' ownedFeatureMembership_comp+=ItemFeatureMember
		public Group getGroup_0_0_1_0() { return cGroup_0_0_1_0; }
		
		//'of'
		public Keyword getOfKeyword_0_0_1_0_0() { return cOfKeyword_0_0_1_0_0; }
		
		//ownedFeatureMembership_comp+=ItemFeatureMember
		public Assignment getOwnedFeatureMembership_compAssignment_0_0_1_0_1() { return cOwnedFeatureMembership_compAssignment_0_0_1_0_1; }
		
		//ItemFeatureMember
		public RuleCall getOwnedFeatureMembership_compItemFeatureMemberParserRuleCall_0_0_1_0_1_0() { return cOwnedFeatureMembership_compItemFeatureMemberParserRuleCall_0_0_1_0_1_0; }
		
		//ownedFeatureMembership_comp+=EmptyItemFeatureMember
		public Assignment getOwnedFeatureMembership_compAssignment_0_0_1_1() { return cOwnedFeatureMembership_compAssignment_0_0_1_1; }
		
		//EmptyItemFeatureMember
		public RuleCall getOwnedFeatureMembership_compEmptyItemFeatureMemberParserRuleCall_0_0_1_1_0() { return cOwnedFeatureMembership_compEmptyItemFeatureMemberParserRuleCall_0_0_1_1_0; }
		
		//'from'
		public Keyword getFromKeyword_0_0_2() { return cFromKeyword_0_0_2; }
		
		//ownedFeatureMembership_comp+=EmptyItemFeatureMember
		public Assignment getOwnedFeatureMembership_compAssignment_0_1() { return cOwnedFeatureMembership_compAssignment_0_1; }
		
		//EmptyItemFeatureMember
		public RuleCall getOwnedFeatureMembership_compEmptyItemFeatureMemberParserRuleCall_0_1_0() { return cOwnedFeatureMembership_compEmptyItemFeatureMemberParserRuleCall_0_1_0; }
		
		//ownedFeatureMembership_comp+=ItemFlowEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//ItemFlowEndMember
		public RuleCall getOwnedFeatureMembership_compItemFlowEndMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compItemFlowEndMemberParserRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//ownedFeatureMembership_comp+=ItemFlowEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_3() { return cOwnedFeatureMembership_compAssignment_3; }
		
		//ItemFlowEndMember
		public RuleCall getOwnedFeatureMembership_compItemFlowEndMemberParserRuleCall_3_0() { return cOwnedFeatureMembership_compItemFlowEndMemberParserRuleCall_3_0; }
	}
	public class ItemFeatureTypingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ItemFeatureTyping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationship_compFeatureTypingParserRuleCall_0_0 = (RuleCall)cOwnedRelationship_compAssignment_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		
		//ItemFeatureTyping SysML::ItemFeature:
		//	ownedRelationship_comp+=FeatureTyping ownedFeatureMembership_comp+=MultiplicityMember?;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=FeatureTyping ownedFeatureMembership_comp+=MultiplicityMember?
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship_comp+=FeatureTyping
		public Assignment getOwnedRelationship_compAssignment_0() { return cOwnedRelationship_compAssignment_0; }
		
		//FeatureTyping
		public RuleCall getOwnedRelationship_compFeatureTypingParserRuleCall_0_0() { return cOwnedRelationship_compFeatureTypingParserRuleCall_0_0; }
		
		//ownedFeatureMembership_comp+=MultiplicityMember?
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//MultiplicityMember
		public RuleCall getOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_1_0; }
	}
	public class EmptyItemFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EmptyItemFeature");
		private final Action cItemFeatureAction = (Action)rule.eContents().get(1);
		
		//EmptyItemFeature SysML::ItemFeature:
		//	{SysML::ItemFeature};
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::ItemFeature}
		public Action getItemFeatureAction() { return cItemFeatureAction; }
	}
	public class ItemFlowEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ItemFlowEnd");
		private final Assignment cOwnedFeatureMembership_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compItemFlowFeatureMemberParserRuleCall_0 = (RuleCall)cOwnedFeatureMembership_compAssignment.eContents().get(0);
		
		//ItemFlowEnd SysML::ItemFlowEnd:
		//	ownedFeatureMembership_comp+=ItemFlowFeatureMember;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=ItemFlowFeatureMember
		public Assignment getOwnedFeatureMembership_compAssignment() { return cOwnedFeatureMembership_compAssignment; }
		
		//ItemFlowFeatureMember
		public RuleCall getOwnedFeatureMembership_compItemFlowFeatureMemberParserRuleCall_0() { return cOwnedFeatureMembership_compItemFlowFeatureMemberParserRuleCall_0; }
	}
	public class ItemFlowFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ItemFlowFeature");
		private final Assignment cOwnedRelationship_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationship_compRedefinitionParserRuleCall_0 = (RuleCall)cOwnedRelationship_compAssignment.eContents().get(0);
		
		//ItemFlowFeature SysML::ItemFlowFeature:
		//	ownedRelationship_comp+=Redefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=Redefinition
		public Assignment getOwnedRelationship_compAssignment() { return cOwnedRelationship_compAssignment; }
		
		//Redefinition
		public RuleCall getOwnedRelationship_compRedefinitionParserRuleCall_0() { return cOwnedRelationship_compRedefinitionParserRuleCall_0; }
	}
	public class ItemFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ItemFeatureMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cMemberNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cMemberNameNameParserRuleCall_0_0_0 = (RuleCall)cMemberNameAssignment_0_0.eContents().get(0);
		private final RuleCall cDefinedByKeywordParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cOwnedMemberFeature_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compItemFeatureTypingParserRuleCall_1_0 = (RuleCall)cOwnedMemberFeature_compAssignment_1.eContents().get(0);
		
		///* ITEM FLOW MEMBERSHIPS */ ItemFeatureMember SysML::FeatureMembership:
		//	(memberName=Name DefinedByKeyword)? ownedMemberFeature_comp=ItemFeatureTyping;
		@Override public ParserRule getRule() { return rule; }
		
		//(memberName=Name DefinedByKeyword)? ownedMemberFeature_comp=ItemFeatureTyping
		public Group getGroup() { return cGroup; }
		
		//(memberName=Name DefinedByKeyword)?
		public Group getGroup_0() { return cGroup_0; }
		
		//memberName=Name
		public Assignment getMemberNameAssignment_0_0() { return cMemberNameAssignment_0_0; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_0_0_0() { return cMemberNameNameParserRuleCall_0_0_0; }
		
		//DefinedByKeyword
		public RuleCall getDefinedByKeywordParserRuleCall_0_1() { return cDefinedByKeywordParserRuleCall_0_1; }
		
		//ownedMemberFeature_comp=ItemFeatureTyping
		public Assignment getOwnedMemberFeature_compAssignment_1() { return cOwnedMemberFeature_compAssignment_1; }
		
		//ItemFeatureTyping
		public RuleCall getOwnedMemberFeature_compItemFeatureTypingParserRuleCall_1_0() { return cOwnedMemberFeature_compItemFeatureTypingParserRuleCall_1_0; }
	}
	public class ItemFlowEndMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ItemFlowEndMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compItemFlowEndParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//ItemFlowEndMember SysML::EndFeatureMembership:
		//	ownedMemberFeature_comp=ItemFlowEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=ItemFlowEnd
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//ItemFlowEnd
		public RuleCall getOwnedMemberFeature_compItemFlowEndParserRuleCall_0() { return cOwnedMemberFeature_compItemFlowEndParserRuleCall_0; }
	}
	public class ItemFlowFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ItemFlowFeatureMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compItemFlowFeatureParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//ItemFlowFeatureMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=ItemFlowFeature;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=ItemFlowFeature
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//ItemFlowFeature
		public RuleCall getOwnedMemberFeature_compItemFlowFeatureParserRuleCall_0() { return cOwnedMemberFeature_compItemFlowFeatureParserRuleCall_0; }
	}
	public class EmptyItemFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EmptyItemFeatureMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compEmptyItemFeatureParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//EmptyItemFeatureMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=EmptyItemFeature;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=EmptyItemFeature
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//EmptyItemFeature
		public RuleCall getOwnedMemberFeature_compEmptyItemFeatureParserRuleCall_0() { return cOwnedMemberFeature_compEmptyItemFeatureParserRuleCall_0; }
	}
	public class ActionUsageKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ActionUsageKeyword");
		private final RuleCall cActionKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* ACTION USAGES */ ActionUsageKeyword:
		//	ActionKeyword;
		@Override public ParserRule getRule() { return rule; }
		
		//ActionKeyword
		public RuleCall getActionKeywordParserRuleCall() { return cActionKeywordParserRuleCall; }
	}
	public class ActionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ActionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cActionUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cActionUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment ActionDeclaration returns SysML::ActionUsage:
		//	UsagePrefix? ActionUsageKeyword ActionUsageDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ActionUsageKeyword ActionUsageDeclaration
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//ActionUsageKeyword
		public RuleCall getActionUsageKeywordParserRuleCall_1() { return cActionUsageKeywordParserRuleCall_1; }
		
		//ActionUsageDeclaration
		public RuleCall getActionUsageDeclarationParserRuleCall_2() { return cActionUsageDeclarationParserRuleCall_2; }
	}
	public class ActionUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ActionUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cActionDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cActionDefBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ActionUsage SysML::ActionUsage:
		//	ActionDeclaration ActionDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//ActionDeclaration ActionDefBody
		public Group getGroup() { return cGroup; }
		
		//ActionDeclaration
		public RuleCall getActionDeclarationParserRuleCall_0() { return cActionDeclarationParserRuleCall_0; }
		
		//ActionDefBody
		public RuleCall getActionDefBodyParserRuleCall_1() { return cActionDefBodyParserRuleCall_1; }
	}
	public class ActionRefUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ActionRefUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRefKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cActionUsageKeywordParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cIsCompositeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIsCompositeActionUsageKeywordParserRuleCall_1_1_0 = (RuleCall)cIsCompositeAssignment_1_1.eContents().get(0);
		private final RuleCall cActionUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cActionDefBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ActionRefUsage SysML::ActionUsage:
		//	UsagePrefix? ('ref' ActionUsageKeyword | isComposite?=ActionUsageKeyword) ActionUsageDeclaration ActionDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ('ref' ActionUsageKeyword | isComposite?=ActionUsageKeyword) ActionUsageDeclaration ActionDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//('ref' ActionUsageKeyword | isComposite?=ActionUsageKeyword)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'ref' ActionUsageKeyword
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'ref'
		public Keyword getRefKeyword_1_0_0() { return cRefKeyword_1_0_0; }
		
		//ActionUsageKeyword
		public RuleCall getActionUsageKeywordParserRuleCall_1_0_1() { return cActionUsageKeywordParserRuleCall_1_0_1; }
		
		//isComposite?=ActionUsageKeyword
		public Assignment getIsCompositeAssignment_1_1() { return cIsCompositeAssignment_1_1; }
		
		//ActionUsageKeyword
		public RuleCall getIsCompositeActionUsageKeywordParserRuleCall_1_1_0() { return cIsCompositeActionUsageKeywordParserRuleCall_1_1_0; }
		
		//ActionUsageDeclaration
		public RuleCall getActionUsageDeclarationParserRuleCall_2() { return cActionUsageDeclarationParserRuleCall_2; }
		
		//ActionDefBody
		public RuleCall getActionDefBodyParserRuleCall_3() { return cActionDefBodyParserRuleCall_3; }
	}
	public class ActionUsageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ActionUsageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cValuePartParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cActionParameterListParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//fragment ActionUsageDeclaration returns SysML::Step:
		//	UsageDeclaration? (ValuePart | ActionParameterList)?;
		@Override public ParserRule getRule() { return rule; }
		
		//UsageDeclaration? (ValuePart | ActionParameterList)?
		public Group getGroup() { return cGroup; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_0() { return cUsageDeclarationParserRuleCall_0; }
		
		//(ValuePart | ActionParameterList)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ValuePart
		public RuleCall getValuePartParserRuleCall_1_0() { return cValuePartParserRuleCall_1_0; }
		
		//ActionParameterList
		public RuleCall getActionParameterListParserRuleCall_1_1() { return cActionParameterListParserRuleCall_1_1; }
	}
	public class ActionParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ActionParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cActionArgumentParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cActionArgumentParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//fragment ActionParameterList returns SysML::Type:
		//	'(' (ActionArgument (',' ActionArgument)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (ActionArgument (',' ActionArgument)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(ActionArgument (',' ActionArgument)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//ActionArgument
		public RuleCall getActionArgumentParserRuleCall_1_0() { return cActionArgumentParserRuleCall_1_0; }
		
		//(',' ActionArgument)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//ActionArgument
		public RuleCall getActionArgumentParserRuleCall_1_1_1() { return cActionArgumentParserRuleCall_1_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ActionArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ActionArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compActionParameterMemberParserRuleCall_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOwnedFeatureMembership_compAlternatives_1_0_0 = (Alternatives)cOwnedFeatureMembership_compAssignment_1_0.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compParameterMemberParserRuleCall_1_0_0_0 = (RuleCall)cOwnedFeatureMembership_compAlternatives_1_0_0.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compDirectionParameterMemberParserRuleCall_1_0_0_1 = (RuleCall)cOwnedFeatureMembership_compAlternatives_1_0_0.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compActionParameterFlowMemberParserRuleCall_1_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_1.eContents().get(0);
		
		//fragment ActionArgument returns SysML::Type:
		//	ownedFeatureMembership_comp+=ActionParameterMember
		//	| ownedFeatureMembership_comp+=(ParameterMember | DirectionParameterMember)
		//	ownedFeatureMembership_comp+=ActionParameterFlowMember;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=ActionParameterMember | ownedFeatureMembership_comp+=(ParameterMember |
		//DirectionParameterMember) ownedFeatureMembership_comp+=ActionParameterFlowMember
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ownedFeatureMembership_comp+=ActionParameterMember
		public Assignment getOwnedFeatureMembership_compAssignment_0() { return cOwnedFeatureMembership_compAssignment_0; }
		
		//ActionParameterMember
		public RuleCall getOwnedFeatureMembership_compActionParameterMemberParserRuleCall_0_0() { return cOwnedFeatureMembership_compActionParameterMemberParserRuleCall_0_0; }
		
		//ownedFeatureMembership_comp+=(ParameterMember | DirectionParameterMember)
		//ownedFeatureMembership_comp+=ActionParameterFlowMember
		public Group getGroup_1() { return cGroup_1; }
		
		//ownedFeatureMembership_comp+=(ParameterMember | DirectionParameterMember)
		public Assignment getOwnedFeatureMembership_compAssignment_1_0() { return cOwnedFeatureMembership_compAssignment_1_0; }
		
		//(ParameterMember | DirectionParameterMember)
		public Alternatives getOwnedFeatureMembership_compAlternatives_1_0_0() { return cOwnedFeatureMembership_compAlternatives_1_0_0; }
		
		//ParameterMember
		public RuleCall getOwnedFeatureMembership_compParameterMemberParserRuleCall_1_0_0_0() { return cOwnedFeatureMembership_compParameterMemberParserRuleCall_1_0_0_0; }
		
		//DirectionParameterMember
		public RuleCall getOwnedFeatureMembership_compDirectionParameterMemberParserRuleCall_1_0_0_1() { return cOwnedFeatureMembership_compDirectionParameterMemberParserRuleCall_1_0_0_1; }
		
		//ownedFeatureMembership_comp+=ActionParameterFlowMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_1() { return cOwnedFeatureMembership_compAssignment_1_1; }
		
		//ActionParameterFlowMember
		public RuleCall getOwnedFeatureMembership_compActionParameterFlowMemberParserRuleCall_1_1_0() { return cOwnedFeatureMembership_compActionParameterFlowMemberParserRuleCall_1_1_0; }
	}
	public class ActionParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ActionParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cValuePartParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cReferenceUsageAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cValuePartParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ActionParameter SysML::Usage:
		//	Parameter ValuePart? | {SysML::ReferenceUsage} ValuePart;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameter ValuePart? | {SysML::ReferenceUsage} ValuePart
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Parameter ValuePart?
		public Group getGroup_0() { return cGroup_0; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_0_0() { return cParameterParserRuleCall_0_0; }
		
		//ValuePart?
		public RuleCall getValuePartParserRuleCall_0_1() { return cValuePartParserRuleCall_0_1; }
		
		//{SysML::ReferenceUsage} ValuePart
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::ReferenceUsage}
		public Action getReferenceUsageAction_1_0() { return cReferenceUsageAction_1_0; }
		
		//ValuePart
		public RuleCall getValuePartParserRuleCall_1_1() { return cValuePartParserRuleCall_1_1; }
	}
	public class ActionParameterFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ActionParameterFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cItemFlowKeywordParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Action cSuccessionItemFlowAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final RuleCall cSuccessionItemFlowKeywordParserRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compEmptyItemFeatureMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnedFeatureMembership_compAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compItemFlowEndMemberParserRuleCall_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_3.eContents().get(0);
		
		//ActionParameterFlow SysML::ItemFlow:
		//	(ItemFlowKeyword | {SysML::SuccessionItemFlow} SuccessionItemFlowKeyword)
		//	ownedFeatureMembership_comp+=EmptyItemFeatureMember
		//	'from' ownedFeatureMembership_comp+=ItemFlowEndMember;
		@Override public ParserRule getRule() { return rule; }
		
		//(ItemFlowKeyword | {SysML::SuccessionItemFlow} SuccessionItemFlowKeyword)
		//ownedFeatureMembership_comp+=EmptyItemFeatureMember 'from' ownedFeatureMembership_comp+=ItemFlowEndMember
		public Group getGroup() { return cGroup; }
		
		//(ItemFlowKeyword | {SysML::SuccessionItemFlow} SuccessionItemFlowKeyword)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ItemFlowKeyword
		public RuleCall getItemFlowKeywordParserRuleCall_0_0() { return cItemFlowKeywordParserRuleCall_0_0; }
		
		//{SysML::SuccessionItemFlow} SuccessionItemFlowKeyword
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{SysML::SuccessionItemFlow}
		public Action getSuccessionItemFlowAction_0_1_0() { return cSuccessionItemFlowAction_0_1_0; }
		
		//SuccessionItemFlowKeyword
		public RuleCall getSuccessionItemFlowKeywordParserRuleCall_0_1_1() { return cSuccessionItemFlowKeywordParserRuleCall_0_1_1; }
		
		//ownedFeatureMembership_comp+=EmptyItemFeatureMember
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//EmptyItemFeatureMember
		public RuleCall getOwnedFeatureMembership_compEmptyItemFeatureMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compEmptyItemFeatureMemberParserRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//ownedFeatureMembership_comp+=ItemFlowEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_3() { return cOwnedFeatureMembership_compAssignment_3; }
		
		//ItemFlowEndMember
		public RuleCall getOwnedFeatureMembership_compItemFlowEndMemberParserRuleCall_3_0() { return cOwnedFeatureMembership_compItemFlowEndMemberParserRuleCall_3_0; }
	}
	public class PerformActionUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PerformActionUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cPerformKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cPerformActionUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cActionDefBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//PerformActionUsage SysML::PerformActionUsage:
		//	UsagePrefix? 'perform' PerformActionUsageDeclaration ActionDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? 'perform' PerformActionUsageDeclaration ActionDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//'perform'
		public Keyword getPerformKeyword_1() { return cPerformKeyword_1; }
		
		//PerformActionUsageDeclaration
		public RuleCall getPerformActionUsageDeclarationParserRuleCall_2() { return cPerformActionUsageDeclarationParserRuleCall_2; }
		
		//ActionDefBody
		public RuleCall getActionDefBodyParserRuleCall_3() { return cActionDefBodyParserRuleCall_3; }
	}
	public class PerformActionUsageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PerformActionUsageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cOwnedRelationship_compSubsetParserRuleCall_0_0_0_0 = (RuleCall)cOwnedRelationship_compAssignment_0_0_0.eContents().get(0);
		private final RuleCall cUsageSpecializationParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final RuleCall cActionKeywordParserRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final RuleCall cUsageDeclarationParserRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cValuePartParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cActionParameterListParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//fragment PerformActionUsageDeclaration returns SysML::ActionUsage:
		//	(ownedRelationship_comp+=Subset UsageSpecialization*
		//	| ActionKeyword UsageDeclaration?) (ValuePart | ActionParameterList)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(ownedRelationship_comp+=Subset UsageSpecialization* | ActionKeyword UsageDeclaration?) (ValuePart |
		//ActionParameterList)?
		public Group getGroup() { return cGroup; }
		
		//(ownedRelationship_comp+=Subset UsageSpecialization* | ActionKeyword UsageDeclaration?)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ownedRelationship_comp+=Subset UsageSpecialization*
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//ownedRelationship_comp+=Subset
		public Assignment getOwnedRelationship_compAssignment_0_0_0() { return cOwnedRelationship_compAssignment_0_0_0; }
		
		//Subset
		public RuleCall getOwnedRelationship_compSubsetParserRuleCall_0_0_0_0() { return cOwnedRelationship_compSubsetParserRuleCall_0_0_0_0; }
		
		//UsageSpecialization*
		public RuleCall getUsageSpecializationParserRuleCall_0_0_1() { return cUsageSpecializationParserRuleCall_0_0_1; }
		
		//ActionKeyword UsageDeclaration?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//ActionKeyword
		public RuleCall getActionKeywordParserRuleCall_0_1_0() { return cActionKeywordParserRuleCall_0_1_0; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_0_1_1() { return cUsageDeclarationParserRuleCall_0_1_1; }
		
		//(ValuePart | ActionParameterList)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ValuePart
		public RuleCall getValuePartParserRuleCall_1_0() { return cValuePartParserRuleCall_1_0; }
		
		//ActionParameterList
		public RuleCall getActionParameterListParserRuleCall_1_1() { return cActionParameterListParserRuleCall_1_1; }
	}
	public class ActionNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ActionNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSendNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAcceptNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cControlNodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///* ACTION NODES */ ActionNode SysML::ActionUsage:
		//	SendNode | AcceptNode | ControlNode;
		@Override public ParserRule getRule() { return rule; }
		
		//SendNode | AcceptNode | ControlNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SendNode
		public RuleCall getSendNodeParserRuleCall_0() { return cSendNodeParserRuleCall_0; }
		
		//AcceptNode
		public RuleCall getAcceptNodeParserRuleCall_1() { return cAcceptNodeParserRuleCall_1; }
		
		//ControlNode
		public RuleCall getControlNodeParserRuleCall_2() { return cControlNodeParserRuleCall_2; }
	}
	public class AcceptNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AcceptNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAcceptNodeDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cActionDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//AcceptNode SysML::AcceptActionUsage:
		//	UsagePrefix? AcceptNodeDeclaration ActionDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? AcceptNodeDeclaration ActionDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//AcceptNodeDeclaration
		public RuleCall getAcceptNodeDeclarationParserRuleCall_1() { return cAcceptNodeDeclarationParserRuleCall_1; }
		
		//ActionDefBody
		public RuleCall getActionDefBodyParserRuleCall_2() { return cActionDefBodyParserRuleCall_2; }
	}
	public class AcceptNodeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AcceptNodeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compEmptyParameterMemberParserRuleCall_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0.eContents().get(0);
		private final Keyword cAcceptKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOwnedFeatureMembership_compAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOwnedFeatureMembership_compItemFeatureMemberParserRuleCall_4_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//fragment AcceptNodeDeclaration returns SysML::ActionUsage:
		//	ownedFeatureMembership_comp+=EmptyParameterMember
		//	'accept' UsageDeclaration? '(' ownedFeatureMembership_comp+=ItemFeatureMember ')';
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=EmptyParameterMember 'accept' UsageDeclaration? '('
		//ownedFeatureMembership_comp+=ItemFeatureMember ')'
		public Group getGroup() { return cGroup; }
		
		//ownedFeatureMembership_comp+=EmptyParameterMember
		public Assignment getOwnedFeatureMembership_compAssignment_0() { return cOwnedFeatureMembership_compAssignment_0; }
		
		//EmptyParameterMember
		public RuleCall getOwnedFeatureMembership_compEmptyParameterMemberParserRuleCall_0_0() { return cOwnedFeatureMembership_compEmptyParameterMemberParserRuleCall_0_0; }
		
		//'accept'
		public Keyword getAcceptKeyword_1() { return cAcceptKeyword_1; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2() { return cUsageDeclarationParserRuleCall_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//ownedFeatureMembership_comp+=ItemFeatureMember
		public Assignment getOwnedFeatureMembership_compAssignment_4() { return cOwnedFeatureMembership_compAssignment_4; }
		
		//ItemFeatureMember
		public RuleCall getOwnedFeatureMembership_compItemFeatureMemberParserRuleCall_4_0() { return cOwnedFeatureMembership_compItemFeatureMemberParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class SendNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SendNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSendNodeDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cActionDefBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//SendNode SysML::SendActionUsage:
		//	UsagePrefix? SendNodeDeclaration ActionDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? SendNodeDeclaration ActionDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//SendNodeDeclaration
		public RuleCall getSendNodeDeclarationParserRuleCall_1() { return cSendNodeDeclarationParserRuleCall_1; }
		
		//ActionDefBody
		public RuleCall getActionDefBodyParserRuleCall_2() { return cActionDefBodyParserRuleCall_2; }
	}
	public class SendNodeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SendNodeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compEmptyParameterMemberParserRuleCall_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compEmptyItemFeatureMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		private final Keyword cSendKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cUsageDeclarationParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cOfKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOwnedFeatureMembership_compExpressionMemberParserRuleCall_4_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_4.eContents().get(0);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOwnedFeatureMembership_compAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOwnedFeatureMembership_compExpressionMemberParserRuleCall_6_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_6.eContents().get(0);
		
		//fragment SendNodeDeclaration returns SysML::ActionUsage:
		//	ownedFeatureMembership_comp+=EmptyParameterMember ownedFeatureMembership_comp+=EmptyItemFeatureMember
		//	'send' (UsageDeclaration 'of')? ownedFeatureMembership_comp+=ExpressionMember
		//	'to' ownedFeatureMembership_comp+=ExpressionMember;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=EmptyParameterMember ownedFeatureMembership_comp+=EmptyItemFeatureMember 'send'
		//(UsageDeclaration 'of')? ownedFeatureMembership_comp+=ExpressionMember 'to'
		//ownedFeatureMembership_comp+=ExpressionMember
		public Group getGroup() { return cGroup; }
		
		//ownedFeatureMembership_comp+=EmptyParameterMember
		public Assignment getOwnedFeatureMembership_compAssignment_0() { return cOwnedFeatureMembership_compAssignment_0; }
		
		//EmptyParameterMember
		public RuleCall getOwnedFeatureMembership_compEmptyParameterMemberParserRuleCall_0_0() { return cOwnedFeatureMembership_compEmptyParameterMemberParserRuleCall_0_0; }
		
		//ownedFeatureMembership_comp+=EmptyItemFeatureMember
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//EmptyItemFeatureMember
		public RuleCall getOwnedFeatureMembership_compEmptyItemFeatureMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compEmptyItemFeatureMemberParserRuleCall_1_0; }
		
		//'send'
		public Keyword getSendKeyword_2() { return cSendKeyword_2; }
		
		//(UsageDeclaration 'of')?
		public Group getGroup_3() { return cGroup_3; }
		
		//UsageDeclaration
		public RuleCall getUsageDeclarationParserRuleCall_3_0() { return cUsageDeclarationParserRuleCall_3_0; }
		
		//'of'
		public Keyword getOfKeyword_3_1() { return cOfKeyword_3_1; }
		
		//ownedFeatureMembership_comp+=ExpressionMember
		public Assignment getOwnedFeatureMembership_compAssignment_4() { return cOwnedFeatureMembership_compAssignment_4; }
		
		//ExpressionMember
		public RuleCall getOwnedFeatureMembership_compExpressionMemberParserRuleCall_4_0() { return cOwnedFeatureMembership_compExpressionMemberParserRuleCall_4_0; }
		
		//'to'
		public Keyword getToKeyword_5() { return cToKeyword_5; }
		
		//ownedFeatureMembership_comp+=ExpressionMember
		public Assignment getOwnedFeatureMembership_compAssignment_6() { return cOwnedFeatureMembership_compAssignment_6; }
		
		//ExpressionMember
		public RuleCall getOwnedFeatureMembership_compExpressionMemberParserRuleCall_6_0() { return cOwnedFeatureMembership_compExpressionMemberParserRuleCall_6_0; }
	}
	public class ControlNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ControlNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMergeNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDecisionNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJoinNodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cForkNodeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ControlNode SysML::ControlNode:
		//	MergeNode
		//	| DecisionNode
		//	| JoinNode
		//	| ForkNode;
		@Override public ParserRule getRule() { return rule; }
		
		//MergeNode | DecisionNode | JoinNode | ForkNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MergeNode
		public RuleCall getMergeNodeParserRuleCall_0() { return cMergeNodeParserRuleCall_0; }
		
		//DecisionNode
		public RuleCall getDecisionNodeParserRuleCall_1() { return cDecisionNodeParserRuleCall_1; }
		
		//JoinNode
		public RuleCall getJoinNodeParserRuleCall_2() { return cJoinNodeParserRuleCall_2; }
		
		//ForkNode
		public RuleCall getForkNodeParserRuleCall_3() { return cForkNodeParserRuleCall_3; }
	}
	public class MergeNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.MergeNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cIsCompositeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsCompositeMergeKeyword_1_0 = (Keyword)cIsCompositeAssignment_1.eContents().get(0);
		private final RuleCall cUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MergeNode SysML::MergeNode:
		//	UsagePrefix? isComposite?='merge' UsageDeclaration? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? isComposite?='merge' UsageDeclaration? ';'
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//isComposite?='merge'
		public Assignment getIsCompositeAssignment_1() { return cIsCompositeAssignment_1; }
		
		//'merge'
		public Keyword getIsCompositeMergeKeyword_1_0() { return cIsCompositeMergeKeyword_1_0; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2() { return cUsageDeclarationParserRuleCall_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DecisionNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.DecisionNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cIsCompositeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsCompositeDecideKeyword_1_0 = (Keyword)cIsCompositeAssignment_1.eContents().get(0);
		private final RuleCall cUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DecisionNode SysML::DecisionNode:
		//	UsagePrefix? isComposite?='decide' UsageDeclaration? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? isComposite?='decide' UsageDeclaration? ';'
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//isComposite?='decide'
		public Assignment getIsCompositeAssignment_1() { return cIsCompositeAssignment_1; }
		
		//'decide'
		public Keyword getIsCompositeDecideKeyword_1_0() { return cIsCompositeDecideKeyword_1_0; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2() { return cUsageDeclarationParserRuleCall_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class JoinNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.JoinNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cIsCompositeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsCompositeJoinKeyword_1_0 = (Keyword)cIsCompositeAssignment_1.eContents().get(0);
		private final RuleCall cUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JoinNode SysML::JoinNode:
		//	UsagePrefix? isComposite?='join' UsageDeclaration? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? isComposite?='join' UsageDeclaration? ';'
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//isComposite?='join'
		public Assignment getIsCompositeAssignment_1() { return cIsCompositeAssignment_1; }
		
		//'join'
		public Keyword getIsCompositeJoinKeyword_1_0() { return cIsCompositeJoinKeyword_1_0; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2() { return cUsageDeclarationParserRuleCall_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ForkNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ForkNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cIsCompositeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsCompositeForkKeyword_1_0 = (Keyword)cIsCompositeAssignment_1.eContents().get(0);
		private final RuleCall cUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ForkNode SysML::ForkNode:
		//	UsagePrefix? isComposite?='fork' UsageDeclaration? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? isComposite?='fork' UsageDeclaration? ';'
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//isComposite?='fork'
		public Assignment getIsCompositeAssignment_1() { return cIsCompositeAssignment_1; }
		
		//'fork'
		public Keyword getIsCompositeForkKeyword_1_0() { return cIsCompositeForkKeyword_1_0; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2() { return cUsageDeclarationParserRuleCall_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ActionParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ActionParameterMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionFeatureDirectionEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cOwnedMemberParameter_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMemberParameter_compActionParameterParserRuleCall_1_0 = (RuleCall)cOwnedMemberParameter_compAssignment_1.eContents().get(0);
		
		///* ACTION MEMBERSHIPS */ ActionParameterMember SysML::ParameterMembership:
		//	direction=FeatureDirection? ownedMemberParameter_comp=ActionParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//direction=FeatureDirection? ownedMemberParameter_comp=ActionParameter
		public Group getGroup() { return cGroup; }
		
		//direction=FeatureDirection?
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//FeatureDirection
		public RuleCall getDirectionFeatureDirectionEnumRuleCall_0_0() { return cDirectionFeatureDirectionEnumRuleCall_0_0; }
		
		//ownedMemberParameter_comp=ActionParameter
		public Assignment getOwnedMemberParameter_compAssignment_1() { return cOwnedMemberParameter_compAssignment_1; }
		
		//ActionParameter
		public RuleCall getOwnedMemberParameter_compActionParameterParserRuleCall_1_0() { return cOwnedMemberParameter_compActionParameterParserRuleCall_1_0; }
	}
	public class ActionParameterFlowMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ActionParameterFlowMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compActionParameterFlowParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//ActionParameterFlowMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=ActionParameterFlow;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=ActionParameterFlow
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//ActionParameterFlow
		public RuleCall getOwnedMemberFeature_compActionParameterFlowParserRuleCall_0() { return cOwnedMemberFeature_compActionParameterFlowParserRuleCall_0; }
	}
	public class EmptySuccessionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EmptySuccessionMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compEmptySuccessionParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//EmptySuccessionMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=EmptySuccession;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=EmptySuccession
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//EmptySuccession
		public RuleCall getOwnedMemberFeature_compEmptySuccessionParserRuleCall_0() { return cOwnedMemberFeature_compEmptySuccessionParserRuleCall_0; }
	}
	public class DirectionParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.DirectionParameterMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionFeatureDirectionEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cOwnedMemberParameter_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMemberParameter_compEmptyParameterParserRuleCall_1_0 = (RuleCall)cOwnedMemberParameter_compAssignment_1.eContents().get(0);
		
		//DirectionParameterMember SysML::ParameterMembership:
		//	direction=FeatureDirection? ownedMemberParameter_comp=EmptyParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//direction=FeatureDirection? ownedMemberParameter_comp=EmptyParameter
		public Group getGroup() { return cGroup; }
		
		//direction=FeatureDirection?
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//FeatureDirection
		public RuleCall getDirectionFeatureDirectionEnumRuleCall_0_0() { return cDirectionFeatureDirectionEnumRuleCall_0_0; }
		
		//ownedMemberParameter_comp=EmptyParameter
		public Assignment getOwnedMemberParameter_compAssignment_1() { return cOwnedMemberParameter_compAssignment_1; }
		
		//EmptyParameter
		public RuleCall getOwnedMemberParameter_compEmptyParameterParserRuleCall_1_0() { return cOwnedMemberParameter_compEmptyParameterParserRuleCall_1_0; }
	}
	public class EmptyParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EmptyParameterMember");
		private final Assignment cOwnedMemberParameter_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberParameter_compEmptyParameterParserRuleCall_0 = (RuleCall)cOwnedMemberParameter_compAssignment.eContents().get(0);
		
		//EmptyParameterMember SysML::ParameterMembership:
		//	ownedMemberParameter_comp=EmptyParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberParameter_comp=EmptyParameter
		public Assignment getOwnedMemberParameter_compAssignment() { return cOwnedMemberParameter_compAssignment; }
		
		//EmptyParameter
		public RuleCall getOwnedMemberParameter_compEmptyParameterParserRuleCall_0() { return cOwnedMemberParameter_compEmptyParameterParserRuleCall_0; }
	}
	public class CalculationUsageKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CalculationUsageKeyword");
		private final RuleCall cCalculationKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* CALCULATION USAGES */ CalculationUsageKeyword:
		//	CalculationKeyword;
		@Override public ParserRule getRule() { return rule; }
		
		//CalculationKeyword
		public RuleCall getCalculationKeywordParserRuleCall() { return cCalculationKeywordParserRuleCall; }
	}
	public class CalculationDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CalculationDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCalculationUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cCalculationUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment CalculationDeclaration returns SysML::CalculationUsage:
		//	UsagePrefix? CalculationUsageKeyword CalculationUsageDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? CalculationUsageKeyword CalculationUsageDeclaration
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//CalculationUsageKeyword
		public RuleCall getCalculationUsageKeywordParserRuleCall_1() { return cCalculationUsageKeywordParserRuleCall_1; }
		
		//CalculationUsageDeclaration
		public RuleCall getCalculationUsageDeclarationParserRuleCall_2() { return cCalculationUsageDeclarationParserRuleCall_2; }
	}
	public class CalculationUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CalculationUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCalculationDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCalculationDefBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//CalculationUsage SysML::CalculationUsage:
		//	CalculationDeclaration CalculationDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//CalculationDeclaration CalculationDefBody
		public Group getGroup() { return cGroup; }
		
		//CalculationDeclaration
		public RuleCall getCalculationDeclarationParserRuleCall_0() { return cCalculationDeclarationParserRuleCall_0; }
		
		//CalculationDefBody
		public RuleCall getCalculationDefBodyParserRuleCall_1() { return cCalculationDefBodyParserRuleCall_1; }
	}
	public class CalculationRefUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CalculationRefUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRefKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cCalculationUsageKeywordParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cIsCompositeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIsCompositeCalculationUsageKeywordParserRuleCall_1_1_0 = (RuleCall)cIsCompositeAssignment_1_1.eContents().get(0);
		private final RuleCall cCalculationUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cCalculationDefBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//CalculationRefUsage SysML::CalculationUsage:
		//	UsagePrefix? ('ref' CalculationUsageKeyword | isComposite?=CalculationUsageKeyword) CalculationUsageDeclaration
		//	CalculationDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ('ref' CalculationUsageKeyword | isComposite?=CalculationUsageKeyword) CalculationUsageDeclaration
		//CalculationDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//('ref' CalculationUsageKeyword | isComposite?=CalculationUsageKeyword)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'ref' CalculationUsageKeyword
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'ref'
		public Keyword getRefKeyword_1_0_0() { return cRefKeyword_1_0_0; }
		
		//CalculationUsageKeyword
		public RuleCall getCalculationUsageKeywordParserRuleCall_1_0_1() { return cCalculationUsageKeywordParserRuleCall_1_0_1; }
		
		//isComposite?=CalculationUsageKeyword
		public Assignment getIsCompositeAssignment_1_1() { return cIsCompositeAssignment_1_1; }
		
		//CalculationUsageKeyword
		public RuleCall getIsCompositeCalculationUsageKeywordParserRuleCall_1_1_0() { return cIsCompositeCalculationUsageKeywordParserRuleCall_1_1_0; }
		
		//CalculationUsageDeclaration
		public RuleCall getCalculationUsageDeclarationParserRuleCall_2() { return cCalculationUsageDeclarationParserRuleCall_2; }
		
		//CalculationDefBody
		public RuleCall getCalculationDefBodyParserRuleCall_3() { return cCalculationDefBodyParserRuleCall_3; }
	}
	public class CalculationUsageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CalculationUsageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCalculationParameterPartParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fragment CalculationUsageDeclaration returns SysML::Step:
		//	UsageDeclaration? CalculationParameterPart;
		@Override public ParserRule getRule() { return rule; }
		
		//UsageDeclaration? CalculationParameterPart
		public Group getGroup() { return cGroup; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_0() { return cUsageDeclarationParserRuleCall_0; }
		
		//CalculationParameterPart
		public RuleCall getCalculationParameterPartParserRuleCall_1() { return cCalculationParameterPartParserRuleCall_1; }
	}
	public class CalculationParameterPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CalculationParameterPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cActionParameterListParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cCalculationReturnParameterPartParserRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cEmptyReturnParameterPartParserRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cValuePartParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cEmptyReturnParameterPartParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//fragment CalculationParameterPart returns SysML::Feature:
		//	ActionParameterList (CalculationReturnParameterPart | EmptyReturnParameterPart) | ValuePart? EmptyReturnParameterPart;
		@Override public ParserRule getRule() { return rule; }
		
		//ActionParameterList (CalculationReturnParameterPart | EmptyReturnParameterPart) | ValuePart? EmptyReturnParameterPart
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ActionParameterList (CalculationReturnParameterPart | EmptyReturnParameterPart)
		public Group getGroup_0() { return cGroup_0; }
		
		//ActionParameterList
		public RuleCall getActionParameterListParserRuleCall_0_0() { return cActionParameterListParserRuleCall_0_0; }
		
		//(CalculationReturnParameterPart | EmptyReturnParameterPart)
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//CalculationReturnParameterPart
		public RuleCall getCalculationReturnParameterPartParserRuleCall_0_1_0() { return cCalculationReturnParameterPartParserRuleCall_0_1_0; }
		
		//EmptyReturnParameterPart
		public RuleCall getEmptyReturnParameterPartParserRuleCall_0_1_1() { return cEmptyReturnParameterPartParserRuleCall_0_1_1; }
		
		//ValuePart? EmptyReturnParameterPart
		public Group getGroup_1() { return cGroup_1; }
		
		//ValuePart?
		public RuleCall getValuePartParserRuleCall_1_0() { return cValuePartParserRuleCall_1_0; }
		
		//EmptyReturnParameterPart
		public RuleCall getEmptyReturnParameterPartParserRuleCall_1_1() { return cEmptyReturnParameterPartParserRuleCall_1_1; }
	}
	public class CalculationReturnParameterPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CalculationReturnParameterPart");
		private final Assignment cOwnedFeatureMembership_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compCalculationReturnParameterMemberParserRuleCall_0 = (RuleCall)cOwnedFeatureMembership_compAssignment.eContents().get(0);
		
		//fragment CalculationReturnParameterPart returns SysML::Feature:
		//	ownedFeatureMembership_comp+=CalculationReturnParameterMember;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=CalculationReturnParameterMember
		public Assignment getOwnedFeatureMembership_compAssignment() { return cOwnedFeatureMembership_compAssignment; }
		
		//CalculationReturnParameterMember
		public RuleCall getOwnedFeatureMembership_compCalculationReturnParameterMemberParserRuleCall_0() { return cOwnedFeatureMembership_compCalculationReturnParameterMemberParserRuleCall_0; }
	}
	public class CalculationReturnParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CalculationReturnParameterMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedMemberParameter_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMemberParameter_compActionParameterParserRuleCall_1_0 = (RuleCall)cOwnedMemberParameter_compAssignment_1.eContents().get(0);
		
		///* CALCULATION MEMBERSHIPS */ CalculationReturnParameterMember SysML::ReturnParameterMembership:
		//	'return'? ownedMemberParameter_comp=ActionParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//'return'? ownedMemberParameter_comp=ActionParameter
		public Group getGroup() { return cGroup; }
		
		//'return'?
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//ownedMemberParameter_comp=ActionParameter
		public Assignment getOwnedMemberParameter_compAssignment_1() { return cOwnedMemberParameter_compAssignment_1; }
		
		//ActionParameter
		public RuleCall getOwnedMemberParameter_compActionParameterParserRuleCall_1_0() { return cOwnedMemberParameter_compActionParameterParserRuleCall_1_0; }
	}
	public class StateUsageKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.StateUsageKeyword");
		private final RuleCall cStateKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* STATE USAGES */ StateUsageKeyword:
		//	StateKeyword;
		@Override public ParserRule getRule() { return rule; }
		
		//StateKeyword
		public RuleCall getStateKeywordParserRuleCall() { return cStateKeywordParserRuleCall; }
	}
	public class StateDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.StateDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cStateUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cValuePartParserRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cActionParameterListParserRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//fragment StateDeclaration returns SysML::StateUsage:
		//	UsagePrefix? StateUsageKeyword UsageDeclaration? (ValuePart | ActionParameterList)?;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? StateUsageKeyword UsageDeclaration? (ValuePart | ActionParameterList)?
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//StateUsageKeyword
		public RuleCall getStateUsageKeywordParserRuleCall_1() { return cStateUsageKeywordParserRuleCall_1; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2() { return cUsageDeclarationParserRuleCall_2; }
		
		//(ValuePart | ActionParameterList)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//ValuePart
		public RuleCall getValuePartParserRuleCall_3_0() { return cValuePartParserRuleCall_3_0; }
		
		//ActionParameterList
		public RuleCall getActionParameterListParserRuleCall_3_1() { return cActionParameterListParserRuleCall_3_1; }
	}
	public class StateUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.StateUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cStateUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cActionUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cStateDefBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//StateUsage SysML::StateUsage:
		//	UsagePrefix? StateUsageKeyword ActionUsageDeclaration StateDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? StateUsageKeyword ActionUsageDeclaration StateDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//StateUsageKeyword
		public RuleCall getStateUsageKeywordParserRuleCall_1() { return cStateUsageKeywordParserRuleCall_1; }
		
		//ActionUsageDeclaration
		public RuleCall getActionUsageDeclarationParserRuleCall_2() { return cActionUsageDeclarationParserRuleCall_2; }
		
		//StateDefBody
		public RuleCall getStateDefBodyParserRuleCall_3() { return cStateDefBodyParserRuleCall_3; }
	}
	public class StateRefUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.StateRefUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRefKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cStateUsageKeywordParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cIsCompositeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIsCompositeStateUsageKeywordParserRuleCall_1_1_0 = (RuleCall)cIsCompositeAssignment_1_1.eContents().get(0);
		private final RuleCall cActionUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cStateDefBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//StateRefUsage SysML::StateUsage:
		//	UsagePrefix? ('ref' StateUsageKeyword | isComposite?=StateUsageKeyword) ActionUsageDeclaration StateDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ('ref' StateUsageKeyword | isComposite?=StateUsageKeyword) ActionUsageDeclaration StateDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//('ref' StateUsageKeyword | isComposite?=StateUsageKeyword)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'ref' StateUsageKeyword
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'ref'
		public Keyword getRefKeyword_1_0_0() { return cRefKeyword_1_0_0; }
		
		//StateUsageKeyword
		public RuleCall getStateUsageKeywordParserRuleCall_1_0_1() { return cStateUsageKeywordParserRuleCall_1_0_1; }
		
		//isComposite?=StateUsageKeyword
		public Assignment getIsCompositeAssignment_1_1() { return cIsCompositeAssignment_1_1; }
		
		//StateUsageKeyword
		public RuleCall getIsCompositeStateUsageKeywordParserRuleCall_1_1_0() { return cIsCompositeStateUsageKeywordParserRuleCall_1_1_0; }
		
		//ActionUsageDeclaration
		public RuleCall getActionUsageDeclarationParserRuleCall_2() { return cActionUsageDeclarationParserRuleCall_2; }
		
		//StateDefBody
		public RuleCall getStateDefBodyParserRuleCall_3() { return cStateDefBodyParserRuleCall_3; }
	}
	public class ExhibitStateUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ExhibitStateUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cExhibitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cOwnedRelationship_compSubsetParserRuleCall_2_0_0_0 = (RuleCall)cOwnedRelationship_compAssignment_2_0_0.eContents().get(0);
		private final RuleCall cUsageSpecializationParserRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final RuleCall cStateUsageKeywordParserRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final RuleCall cUsageDeclarationParserRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cValuePartParserRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cActionParameterListParserRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		private final RuleCall cStateDefBodyParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//ExhibitStateUsage SysML::ExhibitStateUsage:
		//	UsagePrefix? 'exhibit' (ownedRelationship_comp+=Subset UsageSpecialization*
		//	| StateUsageKeyword UsageDeclaration?) (ValuePart | ActionParameterList)? StateDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? 'exhibit' (ownedRelationship_comp+=Subset UsageSpecialization* | StateUsageKeyword UsageDeclaration?)
		//(ValuePart | ActionParameterList)? StateDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//'exhibit'
		public Keyword getExhibitKeyword_1() { return cExhibitKeyword_1; }
		
		//(ownedRelationship_comp+=Subset UsageSpecialization* | StateUsageKeyword UsageDeclaration?)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//ownedRelationship_comp+=Subset UsageSpecialization*
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//ownedRelationship_comp+=Subset
		public Assignment getOwnedRelationship_compAssignment_2_0_0() { return cOwnedRelationship_compAssignment_2_0_0; }
		
		//Subset
		public RuleCall getOwnedRelationship_compSubsetParserRuleCall_2_0_0_0() { return cOwnedRelationship_compSubsetParserRuleCall_2_0_0_0; }
		
		//UsageSpecialization*
		public RuleCall getUsageSpecializationParserRuleCall_2_0_1() { return cUsageSpecializationParserRuleCall_2_0_1; }
		
		//StateUsageKeyword UsageDeclaration?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//StateUsageKeyword
		public RuleCall getStateUsageKeywordParserRuleCall_2_1_0() { return cStateUsageKeywordParserRuleCall_2_1_0; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2_1_1() { return cUsageDeclarationParserRuleCall_2_1_1; }
		
		//(ValuePart | ActionParameterList)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//ValuePart
		public RuleCall getValuePartParserRuleCall_3_0() { return cValuePartParserRuleCall_3_0; }
		
		//ActionParameterList
		public RuleCall getActionParameterListParserRuleCall_3_1() { return cActionParameterListParserRuleCall_3_1; }
		
		//StateDefBody
		public RuleCall getStateDefBodyParserRuleCall_4() { return cStateDefBodyParserRuleCall_4; }
	}
	public class TransitionUsageKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TransitionUsageKeyword");
		private final Keyword cTransitionKeyword = (Keyword)rule.eContents().get(1);
		
		///* TRANSITION USAGES */ TransitionUsageKeyword:
		//	'transition';
		@Override public ParserRule getRule() { return rule; }
		
		//'transition'
		public Keyword getTransitionKeyword() { return cTransitionKeyword; }
	}
	public class TransitionStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TransitionStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTransitionUsageKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFirstKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compTransitionSourceMemberParserRuleCall_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_2.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compTriggerStepMemberParserRuleCall_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_3.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOwnedFeatureMembership_compGuardExpressionMemberParserRuleCall_4_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_4.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOwnedFeatureMembership_compEffectBehaviorMemberParserRuleCall_5_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_5.eContents().get(0);
		private final Keyword cThenKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOwnedFeatureMembership_compAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOwnedFeatureMembership_compTransitionSuccessionMemberParserRuleCall_7_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_7.eContents().get(0);
		
		//TransitionStep SysML::TransitionUsage:
		//	TransitionUsageKeyword (UsageDeclaration? 'first')?
		//	ownedFeatureMembership_comp+=TransitionSourceMember
		//	ownedFeatureMembership_comp+=TriggerStepMember?
		//	ownedFeatureMembership_comp+=GuardExpressionMember?
		//	ownedFeatureMembership_comp+=EffectBehaviorMember?
		//	'then' ownedFeatureMembership_comp+=TransitionSuccessionMember;
		@Override public ParserRule getRule() { return rule; }
		
		//TransitionUsageKeyword (UsageDeclaration? 'first')? ownedFeatureMembership_comp+=TransitionSourceMember
		//ownedFeatureMembership_comp+=TriggerStepMember? ownedFeatureMembership_comp+=GuardExpressionMember?
		//ownedFeatureMembership_comp+=EffectBehaviorMember? 'then' ownedFeatureMembership_comp+=TransitionSuccessionMember
		public Group getGroup() { return cGroup; }
		
		//TransitionUsageKeyword
		public RuleCall getTransitionUsageKeywordParserRuleCall_0() { return cTransitionUsageKeywordParserRuleCall_0; }
		
		//(UsageDeclaration? 'first')?
		public Group getGroup_1() { return cGroup_1; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_1_0() { return cUsageDeclarationParserRuleCall_1_0; }
		
		//'first'
		public Keyword getFirstKeyword_1_1() { return cFirstKeyword_1_1; }
		
		//ownedFeatureMembership_comp+=TransitionSourceMember
		public Assignment getOwnedFeatureMembership_compAssignment_2() { return cOwnedFeatureMembership_compAssignment_2; }
		
		//TransitionSourceMember
		public RuleCall getOwnedFeatureMembership_compTransitionSourceMemberParserRuleCall_2_0() { return cOwnedFeatureMembership_compTransitionSourceMemberParserRuleCall_2_0; }
		
		//ownedFeatureMembership_comp+=TriggerStepMember?
		public Assignment getOwnedFeatureMembership_compAssignment_3() { return cOwnedFeatureMembership_compAssignment_3; }
		
		//TriggerStepMember
		public RuleCall getOwnedFeatureMembership_compTriggerStepMemberParserRuleCall_3_0() { return cOwnedFeatureMembership_compTriggerStepMemberParserRuleCall_3_0; }
		
		//ownedFeatureMembership_comp+=GuardExpressionMember?
		public Assignment getOwnedFeatureMembership_compAssignment_4() { return cOwnedFeatureMembership_compAssignment_4; }
		
		//GuardExpressionMember
		public RuleCall getOwnedFeatureMembership_compGuardExpressionMemberParserRuleCall_4_0() { return cOwnedFeatureMembership_compGuardExpressionMemberParserRuleCall_4_0; }
		
		//ownedFeatureMembership_comp+=EffectBehaviorMember?
		public Assignment getOwnedFeatureMembership_compAssignment_5() { return cOwnedFeatureMembership_compAssignment_5; }
		
		//EffectBehaviorMember
		public RuleCall getOwnedFeatureMembership_compEffectBehaviorMemberParserRuleCall_5_0() { return cOwnedFeatureMembership_compEffectBehaviorMemberParserRuleCall_5_0; }
		
		//'then'
		public Keyword getThenKeyword_6() { return cThenKeyword_6; }
		
		//ownedFeatureMembership_comp+=TransitionSuccessionMember
		public Assignment getOwnedFeatureMembership_compAssignment_7() { return cOwnedFeatureMembership_compAssignment_7; }
		
		//TransitionSuccessionMember
		public RuleCall getOwnedFeatureMembership_compTransitionSuccessionMemberParserRuleCall_7_0() { return cOwnedFeatureMembership_compTransitionSuccessionMemberParserRuleCall_7_0; }
	}
	public class TargetTransitionStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TargetTransitionStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compTriggerStepMemberParserRuleCall_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compGuardExpressionMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compEffectBehaviorMemberParserRuleCall_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOwnedFeatureMembership_compAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOwnedFeatureMembership_compTransitionSuccessionMemberParserRuleCall_4_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_4.eContents().get(0);
		
		//TargetTransitionStep SysML::TransitionUsage:
		//	ownedFeatureMembership_comp+=TriggerStepMember?
		//	ownedFeatureMembership_comp+=GuardExpressionMember?
		//	ownedFeatureMembership_comp+=EffectBehaviorMember?
		//	'then' ownedFeatureMembership_comp+=TransitionSuccessionMember;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=TriggerStepMember? ownedFeatureMembership_comp+=GuardExpressionMember?
		//ownedFeatureMembership_comp+=EffectBehaviorMember? 'then' ownedFeatureMembership_comp+=TransitionSuccessionMember
		public Group getGroup() { return cGroup; }
		
		//ownedFeatureMembership_comp+=TriggerStepMember?
		public Assignment getOwnedFeatureMembership_compAssignment_0() { return cOwnedFeatureMembership_compAssignment_0; }
		
		//TriggerStepMember
		public RuleCall getOwnedFeatureMembership_compTriggerStepMemberParserRuleCall_0_0() { return cOwnedFeatureMembership_compTriggerStepMemberParserRuleCall_0_0; }
		
		//ownedFeatureMembership_comp+=GuardExpressionMember?
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//GuardExpressionMember
		public RuleCall getOwnedFeatureMembership_compGuardExpressionMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compGuardExpressionMemberParserRuleCall_1_0; }
		
		//ownedFeatureMembership_comp+=EffectBehaviorMember?
		public Assignment getOwnedFeatureMembership_compAssignment_2() { return cOwnedFeatureMembership_compAssignment_2; }
		
		//EffectBehaviorMember
		public RuleCall getOwnedFeatureMembership_compEffectBehaviorMemberParserRuleCall_2_0() { return cOwnedFeatureMembership_compEffectBehaviorMemberParserRuleCall_2_0; }
		
		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }
		
		//ownedFeatureMembership_comp+=TransitionSuccessionMember
		public Assignment getOwnedFeatureMembership_compAssignment_4() { return cOwnedFeatureMembership_compAssignment_4; }
		
		//TransitionSuccessionMember
		public RuleCall getOwnedFeatureMembership_compTransitionSuccessionMemberParserRuleCall_4_0() { return cOwnedFeatureMembership_compTransitionSuccessionMemberParserRuleCall_4_0; }
	}
	public class TriggerStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TriggerStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compEmptyParameterMemberParserRuleCall_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compItemFeatureMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		
		//TriggerStep SysML::AcceptActionUsage:
		//	ownedFeatureMembership_comp+=EmptyParameterMember
		//	ownedFeatureMembership_comp+=ItemFeatureMember;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=EmptyParameterMember ownedFeatureMembership_comp+=ItemFeatureMember
		public Group getGroup() { return cGroup; }
		
		//ownedFeatureMembership_comp+=EmptyParameterMember
		public Assignment getOwnedFeatureMembership_compAssignment_0() { return cOwnedFeatureMembership_compAssignment_0; }
		
		//EmptyParameterMember
		public RuleCall getOwnedFeatureMembership_compEmptyParameterMemberParserRuleCall_0_0() { return cOwnedFeatureMembership_compEmptyParameterMemberParserRuleCall_0_0; }
		
		//ownedFeatureMembership_comp+=ItemFeatureMember
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//ItemFeatureMember
		public RuleCall getOwnedFeatureMembership_compItemFeatureMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compItemFeatureMemberParserRuleCall_1_0; }
	}
	public class EffectBehaviorUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EffectBehaviorUsage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEmptyActionUsageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cPerformedActionUsageParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cActionDefBodyItemParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//EffectBehaviorUsage SysML::ActionUsage:
		//	EmptyActionUsage | PerformedActionUsage ('{' ActionDefBodyItem* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//EmptyActionUsage | PerformedActionUsage ('{' ActionDefBodyItem* '}')?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EmptyActionUsage
		public RuleCall getEmptyActionUsageParserRuleCall_0() { return cEmptyActionUsageParserRuleCall_0; }
		
		//PerformedActionUsage ('{' ActionDefBodyItem* '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//PerformedActionUsage
		public RuleCall getPerformedActionUsageParserRuleCall_1_0() { return cPerformedActionUsageParserRuleCall_1_0; }
		
		//('{' ActionDefBodyItem* '}')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }
		
		//ActionDefBodyItem*
		public RuleCall getActionDefBodyItemParserRuleCall_1_1_1() { return cActionDefBodyItemParserRuleCall_1_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }
	}
	public class TransitionSuccessionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TransitionSuccession");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compEmptySourceEndMemberParserRuleCall_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		
		//TransitionSuccession SysML::Succession:
		//	ownedFeatureMembership_comp+=EmptySourceEndMember
		//	ownedFeatureMembership_comp+=ConnectorEndMember;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=EmptySourceEndMember ownedFeatureMembership_comp+=ConnectorEndMember
		public Group getGroup() { return cGroup; }
		
		//ownedFeatureMembership_comp+=EmptySourceEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_0() { return cOwnedFeatureMembership_compAssignment_0; }
		
		//EmptySourceEndMember
		public RuleCall getOwnedFeatureMembership_compEmptySourceEndMemberParserRuleCall_0_0() { return cOwnedFeatureMembership_compEmptySourceEndMemberParserRuleCall_0_0; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//ConnectorEndMember
		public RuleCall getOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_0; }
	}
	public class TransitionSourceMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TransitionSourceMember");
		private final Assignment cMemberFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cMemberFeatureFeatureCrossReference_0 = (CrossReference)cMemberFeatureAssignment.eContents().get(0);
		private final RuleCall cMemberFeatureFeatureQualifiedNameParserRuleCall_0_1 = (RuleCall)cMemberFeatureFeatureCrossReference_0.eContents().get(1);
		
		///* TRANSITION MEMBERSHIPS */ TransitionSourceMember SysML::FeatureMembership:
		//	memberFeature=[SysML::Feature|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//memberFeature=[SysML::Feature|QualifiedName]
		public Assignment getMemberFeatureAssignment() { return cMemberFeatureAssignment; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getMemberFeatureFeatureCrossReference_0() { return cMemberFeatureFeatureCrossReference_0; }
		
		//QualifiedName
		public RuleCall getMemberFeatureFeatureQualifiedNameParserRuleCall_0_1() { return cMemberFeatureFeatureQualifiedNameParserRuleCall_0_1; }
	}
	public class TransitionSuccessionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TransitionSuccessionMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compTransitionSuccessionParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//TransitionSuccessionMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=TransitionSuccession;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=TransitionSuccession
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//TransitionSuccession
		public RuleCall getOwnedMemberFeature_compTransitionSuccessionParserRuleCall_0() { return cOwnedMemberFeature_compTransitionSuccessionParserRuleCall_0; }
	}
	public class TriggerStepMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TriggerStepMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindTriggerFeatureKindEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cOwnedMemberFeature_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compTriggerStepParserRuleCall_1_0 = (RuleCall)cOwnedMemberFeature_compAssignment_1.eContents().get(0);
		
		//TriggerStepMember SysML::TransitionFeatureMembership:
		//	kind=TriggerFeatureKind ownedMemberFeature_comp=TriggerStep;
		@Override public ParserRule getRule() { return rule; }
		
		//kind=TriggerFeatureKind ownedMemberFeature_comp=TriggerStep
		public Group getGroup() { return cGroup; }
		
		//kind=TriggerFeatureKind
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//TriggerFeatureKind
		public RuleCall getKindTriggerFeatureKindEnumRuleCall_0_0() { return cKindTriggerFeatureKindEnumRuleCall_0_0; }
		
		//ownedMemberFeature_comp=TriggerStep
		public Assignment getOwnedMemberFeature_compAssignment_1() { return cOwnedMemberFeature_compAssignment_1; }
		
		//TriggerStep
		public RuleCall getOwnedMemberFeature_compTriggerStepParserRuleCall_1_0() { return cOwnedMemberFeature_compTriggerStepParserRuleCall_1_0; }
	}
	public class GuardExpressionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.GuardExpressionMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindGuardFeatureKindEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cOwnedMemberFeature_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compExpressionParserRuleCall_1_0 = (RuleCall)cOwnedMemberFeature_compAssignment_1.eContents().get(0);
		
		//GuardExpressionMember SysML::TransitionFeatureMembership:
		//	kind=GuardFeatureKind ownedMemberFeature_comp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//kind=GuardFeatureKind ownedMemberFeature_comp=Expression
		public Group getGroup() { return cGroup; }
		
		//kind=GuardFeatureKind
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//GuardFeatureKind
		public RuleCall getKindGuardFeatureKindEnumRuleCall_0_0() { return cKindGuardFeatureKindEnumRuleCall_0_0; }
		
		//ownedMemberFeature_comp=Expression
		public Assignment getOwnedMemberFeature_compAssignment_1() { return cOwnedMemberFeature_compAssignment_1; }
		
		//Expression
		public RuleCall getOwnedMemberFeature_compExpressionParserRuleCall_1_0() { return cOwnedMemberFeature_compExpressionParserRuleCall_1_0; }
	}
	public class EffectBehaviorMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EffectBehaviorMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindEffectFeatureKindEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cOwnedMemberFeature_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compEffectBehaviorUsageParserRuleCall_1_0 = (RuleCall)cOwnedMemberFeature_compAssignment_1.eContents().get(0);
		
		//EffectBehaviorMember SysML::TransitionFeatureMembership:
		//	kind=EffectFeatureKind ownedMemberFeature_comp=EffectBehaviorUsage;
		@Override public ParserRule getRule() { return rule; }
		
		//kind=EffectFeatureKind ownedMemberFeature_comp=EffectBehaviorUsage
		public Group getGroup() { return cGroup; }
		
		//kind=EffectFeatureKind
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//EffectFeatureKind
		public RuleCall getKindEffectFeatureKindEnumRuleCall_0_0() { return cKindEffectFeatureKindEnumRuleCall_0_0; }
		
		//ownedMemberFeature_comp=EffectBehaviorUsage
		public Assignment getOwnedMemberFeature_compAssignment_1() { return cOwnedMemberFeature_compAssignment_1; }
		
		//EffectBehaviorUsage
		public RuleCall getOwnedMemberFeature_compEffectBehaviorUsageParserRuleCall_1_0() { return cOwnedMemberFeature_compEffectBehaviorUsageParserRuleCall_1_0; }
	}
	public class ConstraintUsageKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConstraintUsageKeyword");
		private final RuleCall cConstraintKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* CONSTRAINT USAGES */ ConstraintUsageKeyword:
		//	ConstraintKeyword;
		@Override public ParserRule getRule() { return rule; }
		
		//ConstraintKeyword
		public RuleCall getConstraintKeywordParserRuleCall() { return cConstraintKeywordParserRuleCall; }
	}
	public class ConstraintDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConstraintDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cConstraintUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cConstraintParameterPartParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//fragment ConstraintDeclaration returns SysML::ConstraintUsage:
		//	UsagePrefix? ConstraintUsageKeyword UsageDeclaration? ConstraintParameterPart;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ConstraintUsageKeyword UsageDeclaration? ConstraintParameterPart
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//ConstraintUsageKeyword
		public RuleCall getConstraintUsageKeywordParserRuleCall_1() { return cConstraintUsageKeywordParserRuleCall_1; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2() { return cUsageDeclarationParserRuleCall_2; }
		
		//ConstraintParameterPart
		public RuleCall getConstraintParameterPartParserRuleCall_3() { return cConstraintParameterPartParserRuleCall_3; }
	}
	public class ConstraintUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConstraintUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cConstraintUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cConstraintUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cConstraintDefBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ConstraintUsage SysML::ConstraintUsage:
		//	UsagePrefix? ConstraintUsageKeyword ConstraintUsageDeclaration ConstraintDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ConstraintUsageKeyword ConstraintUsageDeclaration ConstraintDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//ConstraintUsageKeyword
		public RuleCall getConstraintUsageKeywordParserRuleCall_1() { return cConstraintUsageKeywordParserRuleCall_1; }
		
		//ConstraintUsageDeclaration
		public RuleCall getConstraintUsageDeclarationParserRuleCall_2() { return cConstraintUsageDeclarationParserRuleCall_2; }
		
		//ConstraintDefBody
		public RuleCall getConstraintDefBodyParserRuleCall_3() { return cConstraintDefBodyParserRuleCall_3; }
	}
	public class ConstraintRefUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConstraintRefUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRefKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cConstraintUsageKeywordParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cIsCompositeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIsCompositeConstraintUsageKeywordParserRuleCall_1_1_0 = (RuleCall)cIsCompositeAssignment_1_1.eContents().get(0);
		private final RuleCall cConstraintUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cConstraintDefBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ConstraintRefUsage SysML::ConstraintUsage:
		//	UsagePrefix? ('ref' ConstraintUsageKeyword | isComposite?=ConstraintUsageKeyword) ConstraintUsageDeclaration
		//	ConstraintDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ('ref' ConstraintUsageKeyword | isComposite?=ConstraintUsageKeyword) ConstraintUsageDeclaration
		//ConstraintDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//('ref' ConstraintUsageKeyword | isComposite?=ConstraintUsageKeyword)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'ref' ConstraintUsageKeyword
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'ref'
		public Keyword getRefKeyword_1_0_0() { return cRefKeyword_1_0_0; }
		
		//ConstraintUsageKeyword
		public RuleCall getConstraintUsageKeywordParserRuleCall_1_0_1() { return cConstraintUsageKeywordParserRuleCall_1_0_1; }
		
		//isComposite?=ConstraintUsageKeyword
		public Assignment getIsCompositeAssignment_1_1() { return cIsCompositeAssignment_1_1; }
		
		//ConstraintUsageKeyword
		public RuleCall getIsCompositeConstraintUsageKeywordParserRuleCall_1_1_0() { return cIsCompositeConstraintUsageKeywordParserRuleCall_1_1_0; }
		
		//ConstraintUsageDeclaration
		public RuleCall getConstraintUsageDeclarationParserRuleCall_2() { return cConstraintUsageDeclarationParserRuleCall_2; }
		
		//ConstraintDefBody
		public RuleCall getConstraintDefBodyParserRuleCall_3() { return cConstraintDefBodyParserRuleCall_3; }
	}
	public class ConstraintUsageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConstraintUsageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cConstraintParameterPartParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fragment ConstraintUsageDeclaration returns SysML::ConstraintUsage:
		//	UsageDeclaration? ConstraintParameterPart;
		@Override public ParserRule getRule() { return rule; }
		
		//UsageDeclaration? ConstraintParameterPart
		public Group getGroup() { return cGroup; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_0() { return cUsageDeclarationParserRuleCall_0; }
		
		//ConstraintParameterPart
		public RuleCall getConstraintParameterPartParserRuleCall_1() { return cConstraintParameterPartParserRuleCall_1; }
	}
	public class ConstraintParameterPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConstraintParameterPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cValuePartParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cActionParameterListParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cEmptyReturnParameterPartParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fragment ConstraintParameterPart returns SysML::ConstraintUsage:
		//	(ValuePart | ActionParameterList)? EmptyReturnParameterPart;
		@Override public ParserRule getRule() { return rule; }
		
		//(ValuePart | ActionParameterList)? EmptyReturnParameterPart
		public Group getGroup() { return cGroup; }
		
		//(ValuePart | ActionParameterList)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ValuePart
		public RuleCall getValuePartParserRuleCall_0_0() { return cValuePartParserRuleCall_0_0; }
		
		//ActionParameterList
		public RuleCall getActionParameterListParserRuleCall_0_1() { return cActionParameterListParserRuleCall_0_1; }
		
		//EmptyReturnParameterPart
		public RuleCall getEmptyReturnParameterPartParserRuleCall_1() { return cEmptyReturnParameterPartParserRuleCall_1; }
	}
	public class AssertConstraintUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AssertConstraintUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cAssertKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cOwnedRelationship_compAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cOwnedRelationship_compSubsetParserRuleCall_2_0_0 = (RuleCall)cOwnedRelationship_compAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final RuleCall cConstraintUsageKeywordParserRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final RuleCall cUsageDeclarationParserRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final RuleCall cConstraintParameterPartParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cInvariantPartParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cConstraintDefBodyParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//AssertConstraintUsage SysML::AssertConstraintUsage:
		//	UsagePrefix? 'assert' (ownedRelationship_comp+=Subset
		//	| ConstraintUsageKeyword UsageDeclaration?) ConstraintParameterPart InvariantPart ConstraintDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? 'assert' (ownedRelationship_comp+=Subset | ConstraintUsageKeyword UsageDeclaration?)
		//ConstraintParameterPart InvariantPart ConstraintDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//'assert'
		public Keyword getAssertKeyword_1() { return cAssertKeyword_1; }
		
		//(ownedRelationship_comp+=Subset | ConstraintUsageKeyword UsageDeclaration?)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//ownedRelationship_comp+=Subset
		public Assignment getOwnedRelationship_compAssignment_2_0() { return cOwnedRelationship_compAssignment_2_0; }
		
		//Subset
		public RuleCall getOwnedRelationship_compSubsetParserRuleCall_2_0_0() { return cOwnedRelationship_compSubsetParserRuleCall_2_0_0; }
		
		//ConstraintUsageKeyword UsageDeclaration?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//ConstraintUsageKeyword
		public RuleCall getConstraintUsageKeywordParserRuleCall_2_1_0() { return cConstraintUsageKeywordParserRuleCall_2_1_0; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2_1_1() { return cUsageDeclarationParserRuleCall_2_1_1; }
		
		//ConstraintParameterPart
		public RuleCall getConstraintParameterPartParserRuleCall_3() { return cConstraintParameterPartParserRuleCall_3; }
		
		//InvariantPart
		public RuleCall getInvariantPartParserRuleCall_4() { return cInvariantPartParserRuleCall_4; }
		
		//ConstraintDefBody
		public RuleCall getConstraintDefBodyParserRuleCall_5() { return cConstraintDefBodyParserRuleCall_5; }
	}
	public class InvariantPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.InvariantPart");
		private final Assignment cOwnedFeatureMembership_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compTrueLiteralMemberParserRuleCall_0 = (RuleCall)cOwnedFeatureMembership_compAssignment.eContents().get(0);
		
		//fragment InvariantPart returns SysML::Invariant:
		//	ownedFeatureMembership_comp+=TrueLiteralMember;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=TrueLiteralMember
		public Assignment getOwnedFeatureMembership_compAssignment() { return cOwnedFeatureMembership_compAssignment; }
		
		//TrueLiteralMember
		public RuleCall getOwnedFeatureMembership_compTrueLiteralMemberParserRuleCall_0() { return cOwnedFeatureMembership_compTrueLiteralMemberParserRuleCall_0; }
	}
	public class TrueLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TrueLiteralExpression");
		private final Action cLiteralBooleanAction = (Action)rule.eContents().get(1);
		
		//TrueLiteralExpression SysML::LiteralBoolean:
		//	{SysML::LiteralBoolean};
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::LiteralBoolean}
		public Action getLiteralBooleanAction() { return cLiteralBooleanAction; }
	}
	public class TrueLiteralMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TrueLiteralMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compTrueLiteralExpressionParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		///* CONSTRAINT MEMBERSHIPS */ TrueLiteralMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=TrueLiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=TrueLiteralExpression
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//TrueLiteralExpression
		public RuleCall getOwnedMemberFeature_compTrueLiteralExpressionParserRuleCall_0() { return cOwnedMemberFeature_compTrueLiteralExpressionParserRuleCall_0; }
	}
	public class RequirementUsageKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RequirementUsageKeyword");
		private final RuleCall cRequirementKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* REQUIREMENT USAGES */ RequirementUsageKeyword:
		//	RequirementKeyword;
		@Override public ParserRule getRule() { return rule; }
		
		//RequirementKeyword
		public RuleCall getRequirementKeywordParserRuleCall() { return cRequirementKeywordParserRuleCall; }
	}
	public class RequirementDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RequirementDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRequirementUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cConstraintParameterPartParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//fragment RequirementDeclaration returns SysML::RequirementUsage:
		//	UsagePrefix? RequirementUsageKeyword UsageDeclaration? ConstraintParameterPart;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? RequirementUsageKeyword UsageDeclaration? ConstraintParameterPart
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//RequirementUsageKeyword
		public RuleCall getRequirementUsageKeywordParserRuleCall_1() { return cRequirementUsageKeywordParserRuleCall_1; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2() { return cUsageDeclarationParserRuleCall_2; }
		
		//ConstraintParameterPart
		public RuleCall getConstraintParameterPartParserRuleCall_3() { return cConstraintParameterPartParserRuleCall_3; }
	}
	public class RequirementUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RequirementUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRequirementUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cRequirementUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cRequirementDefBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//RequirementUsage SysML::RequirementUsage:
		//	UsagePrefix? RequirementUsageKeyword RequirementUsageDeclaration RequirementDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? RequirementUsageKeyword RequirementUsageDeclaration RequirementDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//RequirementUsageKeyword
		public RuleCall getRequirementUsageKeywordParserRuleCall_1() { return cRequirementUsageKeywordParserRuleCall_1; }
		
		//RequirementUsageDeclaration
		public RuleCall getRequirementUsageDeclarationParserRuleCall_2() { return cRequirementUsageDeclarationParserRuleCall_2; }
		
		//RequirementDefBody
		public RuleCall getRequirementDefBodyParserRuleCall_3() { return cRequirementDefBodyParserRuleCall_3; }
	}
	public class RequirementRefUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RequirementRefUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRefKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cRequirementUsageKeywordParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cIsCompositeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIsCompositeRequirementUsageKeywordParserRuleCall_1_1_0 = (RuleCall)cIsCompositeAssignment_1_1.eContents().get(0);
		private final RuleCall cRequirementUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cRequirementDefBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//RequirementRefUsage SysML::RequirementUsage:
		//	UsagePrefix? ('ref' RequirementUsageKeyword | isComposite?=RequirementUsageKeyword) RequirementUsageDeclaration
		//	RequirementDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ('ref' RequirementUsageKeyword | isComposite?=RequirementUsageKeyword) RequirementUsageDeclaration
		//RequirementDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//('ref' RequirementUsageKeyword | isComposite?=RequirementUsageKeyword)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'ref' RequirementUsageKeyword
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'ref'
		public Keyword getRefKeyword_1_0_0() { return cRefKeyword_1_0_0; }
		
		//RequirementUsageKeyword
		public RuleCall getRequirementUsageKeywordParserRuleCall_1_0_1() { return cRequirementUsageKeywordParserRuleCall_1_0_1; }
		
		//isComposite?=RequirementUsageKeyword
		public Assignment getIsCompositeAssignment_1_1() { return cIsCompositeAssignment_1_1; }
		
		//RequirementUsageKeyword
		public RuleCall getIsCompositeRequirementUsageKeywordParserRuleCall_1_1_0() { return cIsCompositeRequirementUsageKeywordParserRuleCall_1_1_0; }
		
		//RequirementUsageDeclaration
		public RuleCall getRequirementUsageDeclarationParserRuleCall_2() { return cRequirementUsageDeclarationParserRuleCall_2; }
		
		//RequirementDefBody
		public RuleCall getRequirementDefBodyParserRuleCall_3() { return cRequirementDefBodyParserRuleCall_3; }
	}
	public class RequirementUsageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RequirementUsageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cConstraintParameterPartParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fragment RequirementUsageDeclaration returns SysML::RequirementUsage:
		//	UsageDeclaration? ConstraintParameterPart;
		@Override public ParserRule getRule() { return rule; }
		
		//UsageDeclaration? ConstraintParameterPart
		public Group getGroup() { return cGroup; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_0() { return cUsageDeclarationParserRuleCall_0; }
		
		//ConstraintParameterPart
		public RuleCall getConstraintParameterPartParserRuleCall_1() { return cConstraintParameterPartParserRuleCall_1; }
	}
	public class SatisfyRequirementUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SatisfyRequirementUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSatisfyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cOwnedRelationship_compSubsetParserRuleCall_2_0_0_0 = (RuleCall)cOwnedRelationship_compAssignment_2_0_0.eContents().get(0);
		private final RuleCall cUsageSpecializationParserRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final RuleCall cRequirementKeywordParserRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final RuleCall cUsageDeclarationParserRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cByKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compSatisfactionConnectorMemberParserRuleCall_3_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_3_1.eContents().get(0);
		private final RuleCall cConstraintParameterPartParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cInvariantPartParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cRequirementDefBodyParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//SatisfyRequirementUsage SysML::SatisfyRequirementUsage:
		//	UsagePrefix? 'satisfy' (ownedRelationship_comp+=Subset UsageSpecialization*
		//	| RequirementKeyword UsageDeclaration?) ('by' ownedFeatureMembership_comp+=SatisfactionConnectorMember)?
		//	ConstraintParameterPart InvariantPart RequirementDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? 'satisfy' (ownedRelationship_comp+=Subset UsageSpecialization* | RequirementKeyword UsageDeclaration?)
		//('by' ownedFeatureMembership_comp+=SatisfactionConnectorMember)? ConstraintParameterPart InvariantPart
		//RequirementDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//'satisfy'
		public Keyword getSatisfyKeyword_1() { return cSatisfyKeyword_1; }
		
		//(ownedRelationship_comp+=Subset UsageSpecialization* | RequirementKeyword UsageDeclaration?)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//ownedRelationship_comp+=Subset UsageSpecialization*
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//ownedRelationship_comp+=Subset
		public Assignment getOwnedRelationship_compAssignment_2_0_0() { return cOwnedRelationship_compAssignment_2_0_0; }
		
		//Subset
		public RuleCall getOwnedRelationship_compSubsetParserRuleCall_2_0_0_0() { return cOwnedRelationship_compSubsetParserRuleCall_2_0_0_0; }
		
		//UsageSpecialization*
		public RuleCall getUsageSpecializationParserRuleCall_2_0_1() { return cUsageSpecializationParserRuleCall_2_0_1; }
		
		//RequirementKeyword UsageDeclaration?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//RequirementKeyword
		public RuleCall getRequirementKeywordParserRuleCall_2_1_0() { return cRequirementKeywordParserRuleCall_2_1_0; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2_1_1() { return cUsageDeclarationParserRuleCall_2_1_1; }
		
		//('by' ownedFeatureMembership_comp+=SatisfactionConnectorMember)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'by'
		public Keyword getByKeyword_3_0() { return cByKeyword_3_0; }
		
		//ownedFeatureMembership_comp+=SatisfactionConnectorMember
		public Assignment getOwnedFeatureMembership_compAssignment_3_1() { return cOwnedFeatureMembership_compAssignment_3_1; }
		
		//SatisfactionConnectorMember
		public RuleCall getOwnedFeatureMembership_compSatisfactionConnectorMemberParserRuleCall_3_1_0() { return cOwnedFeatureMembership_compSatisfactionConnectorMemberParserRuleCall_3_1_0; }
		
		//ConstraintParameterPart
		public RuleCall getConstraintParameterPartParserRuleCall_4() { return cConstraintParameterPartParserRuleCall_4; }
		
		//InvariantPart
		public RuleCall getInvariantPartParserRuleCall_5() { return cInvariantPartParserRuleCall_5; }
		
		//RequirementDefBody
		public RuleCall getRequirementDefBodyParserRuleCall_6() { return cRequirementDefBodyParserRuleCall_6; }
	}
	public class SatisfactionConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SatisfactionConnector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compEmptySourceEndMemberParserRuleCall_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		
		//SatisfactionConnector SysML::BindingConnector:
		//	ownedFeatureMembership_comp+=EmptySourceEndMember ownedFeatureMembership_comp+=ConnectorEndMember;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=EmptySourceEndMember ownedFeatureMembership_comp+=ConnectorEndMember
		public Group getGroup() { return cGroup; }
		
		//ownedFeatureMembership_comp+=EmptySourceEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_0() { return cOwnedFeatureMembership_compAssignment_0; }
		
		//EmptySourceEndMember
		public RuleCall getOwnedFeatureMembership_compEmptySourceEndMemberParserRuleCall_0_0() { return cOwnedFeatureMembership_compEmptySourceEndMemberParserRuleCall_0_0; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//ConnectorEndMember
		public RuleCall getOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_0; }
	}
	public class SatisfactionConnectorMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SatisfactionConnectorMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compSatisfactionConnectorParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		///* REQUIREMENT MEMBERSHIPS */ SatisfactionConnectorMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=SatisfactionConnector;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=SatisfactionConnector
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//SatisfactionConnector
		public RuleCall getOwnedMemberFeature_compSatisfactionConnectorParserRuleCall_0() { return cOwnedMemberFeature_compSatisfactionConnectorParserRuleCall_0; }
	}
	public class CaseUsageKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CaseUsageKeyword");
		private final RuleCall cCaseKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* CASE USAGES */ CaseUsageKeyword:
		//	CaseKeyword;
		@Override public ParserRule getRule() { return rule; }
		
		//CaseKeyword
		public RuleCall getCaseKeywordParserRuleCall() { return cCaseKeywordParserRuleCall; }
	}
	public class CaseDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CaseDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCaseUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cCalculationUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment CaseDeclaration returns SysML::CaseUsage:
		//	UsagePrefix? CaseUsageKeyword CalculationUsageDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? CaseUsageKeyword CalculationUsageDeclaration
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//CaseUsageKeyword
		public RuleCall getCaseUsageKeywordParserRuleCall_1() { return cCaseUsageKeywordParserRuleCall_1; }
		
		//CalculationUsageDeclaration
		public RuleCall getCalculationUsageDeclarationParserRuleCall_2() { return cCalculationUsageDeclarationParserRuleCall_2; }
	}
	public class CaseUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CaseUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCaseDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCaseDefBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//CaseUsage SysML::CaseUsage:
		//	CaseDeclaration CaseDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//CaseDeclaration CaseDefBody
		public Group getGroup() { return cGroup; }
		
		//CaseDeclaration
		public RuleCall getCaseDeclarationParserRuleCall_0() { return cCaseDeclarationParserRuleCall_0; }
		
		//CaseDefBody
		public RuleCall getCaseDefBodyParserRuleCall_1() { return cCaseDefBodyParserRuleCall_1; }
	}
	public class CaseRefUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.CaseRefUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRefKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cCaseUsageKeywordParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cIsCompositeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIsCompositeCaseUsageKeywordParserRuleCall_1_1_0 = (RuleCall)cIsCompositeAssignment_1_1.eContents().get(0);
		private final RuleCall cCalculationUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cCaseDefBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//CaseRefUsage SysML::CaseUsage:
		//	UsagePrefix? ('ref' CaseUsageKeyword | isComposite?=CaseUsageKeyword) CalculationUsageDeclaration CaseDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ('ref' CaseUsageKeyword | isComposite?=CaseUsageKeyword) CalculationUsageDeclaration CaseDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//('ref' CaseUsageKeyword | isComposite?=CaseUsageKeyword)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'ref' CaseUsageKeyword
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'ref'
		public Keyword getRefKeyword_1_0_0() { return cRefKeyword_1_0_0; }
		
		//CaseUsageKeyword
		public RuleCall getCaseUsageKeywordParserRuleCall_1_0_1() { return cCaseUsageKeywordParserRuleCall_1_0_1; }
		
		//isComposite?=CaseUsageKeyword
		public Assignment getIsCompositeAssignment_1_1() { return cIsCompositeAssignment_1_1; }
		
		//CaseUsageKeyword
		public RuleCall getIsCompositeCaseUsageKeywordParserRuleCall_1_1_0() { return cIsCompositeCaseUsageKeywordParserRuleCall_1_1_0; }
		
		//CalculationUsageDeclaration
		public RuleCall getCalculationUsageDeclarationParserRuleCall_2() { return cCalculationUsageDeclarationParserRuleCall_2; }
		
		//CaseDefBody
		public RuleCall getCaseDefBodyParserRuleCall_3() { return cCaseDefBodyParserRuleCall_3; }
	}
	public class AnalysisCaseUsageKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AnalysisCaseUsageKeyword");
		private final RuleCall cAnalysisCaseKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* ANALYSIS CASE USAGES */ AnalysisCaseUsageKeyword:
		//	AnalysisCaseKeyword;
		@Override public ParserRule getRule() { return rule; }
		
		//AnalysisCaseKeyword
		public RuleCall getAnalysisCaseKeywordParserRuleCall() { return cAnalysisCaseKeywordParserRuleCall; }
	}
	public class AnalysisCaseDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AnalysisCaseDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAnalysisCaseUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cCalculationUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment AnalysisCaseDeclaration returns SysML::AnalysisCaseUsage:
		//	UsagePrefix? AnalysisCaseUsageKeyword CalculationUsageDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? AnalysisCaseUsageKeyword CalculationUsageDeclaration
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//AnalysisCaseUsageKeyword
		public RuleCall getAnalysisCaseUsageKeywordParserRuleCall_1() { return cAnalysisCaseUsageKeywordParserRuleCall_1; }
		
		//CalculationUsageDeclaration
		public RuleCall getCalculationUsageDeclarationParserRuleCall_2() { return cCalculationUsageDeclarationParserRuleCall_2; }
	}
	public class AnalysisCaseUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AnalysisCaseUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAnalysisCaseDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCaseDefBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//AnalysisCaseUsage SysML::AnalysisCaseUsage:
		//	AnalysisCaseDeclaration CaseDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//AnalysisCaseDeclaration CaseDefBody
		public Group getGroup() { return cGroup; }
		
		//AnalysisCaseDeclaration
		public RuleCall getAnalysisCaseDeclarationParserRuleCall_0() { return cAnalysisCaseDeclarationParserRuleCall_0; }
		
		//CaseDefBody
		public RuleCall getCaseDefBodyParserRuleCall_1() { return cCaseDefBodyParserRuleCall_1; }
	}
	public class AnalysisCaseRefUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AnalysisCaseRefUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRefKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cAnalysisCaseUsageKeywordParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cIsCompositeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIsCompositeAnalysisCaseUsageKeywordParserRuleCall_1_1_0 = (RuleCall)cIsCompositeAssignment_1_1.eContents().get(0);
		private final RuleCall cCalculationUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cCaseDefBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//AnalysisCaseRefUsage SysML::AnalysisCaseUsage:
		//	UsagePrefix? ('ref' AnalysisCaseUsageKeyword | isComposite?=AnalysisCaseUsageKeyword) CalculationUsageDeclaration
		//	CaseDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ('ref' AnalysisCaseUsageKeyword | isComposite?=AnalysisCaseUsageKeyword) CalculationUsageDeclaration
		//CaseDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//('ref' AnalysisCaseUsageKeyword | isComposite?=AnalysisCaseUsageKeyword)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'ref' AnalysisCaseUsageKeyword
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'ref'
		public Keyword getRefKeyword_1_0_0() { return cRefKeyword_1_0_0; }
		
		//AnalysisCaseUsageKeyword
		public RuleCall getAnalysisCaseUsageKeywordParserRuleCall_1_0_1() { return cAnalysisCaseUsageKeywordParserRuleCall_1_0_1; }
		
		//isComposite?=AnalysisCaseUsageKeyword
		public Assignment getIsCompositeAssignment_1_1() { return cIsCompositeAssignment_1_1; }
		
		//AnalysisCaseUsageKeyword
		public RuleCall getIsCompositeAnalysisCaseUsageKeywordParserRuleCall_1_1_0() { return cIsCompositeAnalysisCaseUsageKeywordParserRuleCall_1_1_0; }
		
		//CalculationUsageDeclaration
		public RuleCall getCalculationUsageDeclarationParserRuleCall_2() { return cCalculationUsageDeclarationParserRuleCall_2; }
		
		//CaseDefBody
		public RuleCall getCaseDefBodyParserRuleCall_3() { return cCaseDefBodyParserRuleCall_3; }
	}
	public class VerificationCaseUsageKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.VerificationCaseUsageKeyword");
		private final RuleCall cVerificationCaseKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* VERIFICATION CASE USAGES */ VerificationCaseUsageKeyword:
		//	VerificationCaseKeyword;
		@Override public ParserRule getRule() { return rule; }
		
		//VerificationCaseKeyword
		public RuleCall getVerificationCaseKeywordParserRuleCall() { return cVerificationCaseKeywordParserRuleCall; }
	}
	public class VerificationCaseDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.VerificationCaseDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cVerificationCaseUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cCalculationUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment VerificationCaseDeclaration returns SysML::VerificationCaseUsage:
		//	UsagePrefix? VerificationCaseUsageKeyword CalculationUsageDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? VerificationCaseUsageKeyword CalculationUsageDeclaration
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//VerificationCaseUsageKeyword
		public RuleCall getVerificationCaseUsageKeywordParserRuleCall_1() { return cVerificationCaseUsageKeywordParserRuleCall_1; }
		
		//CalculationUsageDeclaration
		public RuleCall getCalculationUsageDeclarationParserRuleCall_2() { return cCalculationUsageDeclarationParserRuleCall_2; }
	}
	public class VerificationCaseUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.VerificationCaseUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVerificationCaseDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCaseDefBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//VerificationCaseUsage SysML::VerificationCaseUsage:
		//	VerificationCaseDeclaration CaseDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//VerificationCaseDeclaration CaseDefBody
		public Group getGroup() { return cGroup; }
		
		//VerificationCaseDeclaration
		public RuleCall getVerificationCaseDeclarationParserRuleCall_0() { return cVerificationCaseDeclarationParserRuleCall_0; }
		
		//CaseDefBody
		public RuleCall getCaseDefBodyParserRuleCall_1() { return cCaseDefBodyParserRuleCall_1; }
	}
	public class VerificationCaseRefUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.VerificationCaseRefUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRefKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cVerificationCaseUsageKeywordParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cIsCompositeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIsCompositeVerificationCaseUsageKeywordParserRuleCall_1_1_0 = (RuleCall)cIsCompositeAssignment_1_1.eContents().get(0);
		private final RuleCall cCalculationUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cCaseDefBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//VerificationCaseRefUsage SysML::VerificationCaseUsage:
		//	UsagePrefix? ('ref' VerificationCaseUsageKeyword | isComposite?=VerificationCaseUsageKeyword)
		//	CalculationUsageDeclaration CaseDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ('ref' VerificationCaseUsageKeyword | isComposite?=VerificationCaseUsageKeyword)
		//CalculationUsageDeclaration CaseDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//('ref' VerificationCaseUsageKeyword | isComposite?=VerificationCaseUsageKeyword)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'ref' VerificationCaseUsageKeyword
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'ref'
		public Keyword getRefKeyword_1_0_0() { return cRefKeyword_1_0_0; }
		
		//VerificationCaseUsageKeyword
		public RuleCall getVerificationCaseUsageKeywordParserRuleCall_1_0_1() { return cVerificationCaseUsageKeywordParserRuleCall_1_0_1; }
		
		//isComposite?=VerificationCaseUsageKeyword
		public Assignment getIsCompositeAssignment_1_1() { return cIsCompositeAssignment_1_1; }
		
		//VerificationCaseUsageKeyword
		public RuleCall getIsCompositeVerificationCaseUsageKeywordParserRuleCall_1_1_0() { return cIsCompositeVerificationCaseUsageKeywordParserRuleCall_1_1_0; }
		
		//CalculationUsageDeclaration
		public RuleCall getCalculationUsageDeclarationParserRuleCall_2() { return cCalculationUsageDeclarationParserRuleCall_2; }
		
		//CaseDefBody
		public RuleCall getCaseDefBodyParserRuleCall_3() { return cCaseDefBodyParserRuleCall_3; }
	}
	public class ViewUsageKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewUsageKeyword");
		private final RuleCall cViewKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* VIEW USAGES */ ViewUsageKeyword:
		//	ViewKeyword;
		@Override public ParserRule getRule() { return rule; }
		
		//ViewKeyword
		public RuleCall getViewKeywordParserRuleCall() { return cViewKeywordParserRuleCall; }
	}
	public class ViewDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cViewKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment ViewDeclaration returns SysML::ViewUsage:
		//	UsagePrefix? ViewKeyword UsageDeclaration?;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ViewKeyword UsageDeclaration?
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//ViewKeyword
		public RuleCall getViewKeywordParserRuleCall_1() { return cViewKeywordParserRuleCall_1; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2() { return cUsageDeclarationParserRuleCall_2; }
	}
	public class ViewUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cViewUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cValuePartParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cViewBodyParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//ViewUsage SysML::ViewUsage:
		//	UsagePrefix? ViewUsageKeyword UsageDeclaration? ValuePart? ViewBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ViewUsageKeyword UsageDeclaration? ValuePart? ViewBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//ViewUsageKeyword
		public RuleCall getViewUsageKeywordParserRuleCall_1() { return cViewUsageKeywordParserRuleCall_1; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2() { return cUsageDeclarationParserRuleCall_2; }
		
		//ValuePart?
		public RuleCall getValuePartParserRuleCall_3() { return cValuePartParserRuleCall_3; }
		
		//ViewBody
		public RuleCall getViewBodyParserRuleCall_4() { return cViewBodyParserRuleCall_4; }
	}
	public class ViewRefUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewRefUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRefKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cViewUsageKeywordParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cIsCompositeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIsCompositeViewUsageKeywordParserRuleCall_1_1_0 = (RuleCall)cIsCompositeAssignment_1_1.eContents().get(0);
		private final RuleCall cUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cValuePartParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cViewBodyParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//ViewRefUsage SysML::ViewUsage:
		//	UsagePrefix? ('ref' ViewUsageKeyword | isComposite?=ViewUsageKeyword) UsageDeclaration? ValuePart? ViewBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ('ref' ViewUsageKeyword | isComposite?=ViewUsageKeyword) UsageDeclaration? ValuePart? ViewBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//('ref' ViewUsageKeyword | isComposite?=ViewUsageKeyword)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'ref' ViewUsageKeyword
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'ref'
		public Keyword getRefKeyword_1_0_0() { return cRefKeyword_1_0_0; }
		
		//ViewUsageKeyword
		public RuleCall getViewUsageKeywordParserRuleCall_1_0_1() { return cViewUsageKeywordParserRuleCall_1_0_1; }
		
		//isComposite?=ViewUsageKeyword
		public Assignment getIsCompositeAssignment_1_1() { return cIsCompositeAssignment_1_1; }
		
		//ViewUsageKeyword
		public RuleCall getIsCompositeViewUsageKeywordParserRuleCall_1_1_0() { return cIsCompositeViewUsageKeywordParserRuleCall_1_1_0; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2() { return cUsageDeclarationParserRuleCall_2; }
		
		//ValuePart?
		public RuleCall getValuePartParserRuleCall_3() { return cValuePartParserRuleCall_3; }
		
		//ViewBody
		public RuleCall getViewBodyParserRuleCall_4() { return cViewBodyParserRuleCall_4; }
	}
	public class ViewBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cViewBodyItemParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment ViewBody returns SysML::ViewUsage:
		//	';' | '{' ViewBodyItem* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//';' | '{' ViewBodyItem* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' ViewBodyItem* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//ViewBodyItem*
		public RuleCall getViewBodyItemParserRuleCall_1_1() { return cViewBodyItemParserRuleCall_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class ViewBodyItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewBodyItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefinitionBodyItemParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cOwnedImport_compAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedImport_compExposeParserRuleCall_1_0 = (RuleCall)cOwnedImport_compAssignment_1.eContents().get(0);
		
		//fragment ViewBodyItem returns SysML::ViewUsage:
		//	DefinitionBodyItem
		//	| ownedImport_comp+=Expose;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionBodyItem | ownedImport_comp+=Expose
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DefinitionBodyItem
		public RuleCall getDefinitionBodyItemParserRuleCall_0() { return cDefinitionBodyItemParserRuleCall_0; }
		
		//ownedImport_comp+=Expose
		public Assignment getOwnedImport_compAssignment_1() { return cOwnedImport_compAssignment_1; }
		
		//Expose
		public RuleCall getOwnedImport_compExposeParserRuleCall_1_0() { return cOwnedImport_compExposeParserRuleCall_1_0; }
	}
	public class ExposeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Expose");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationship_compPrefixAnnotationParserRuleCall_0_0 = (RuleCall)cOwnedRelationship_compAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityPackageElementVisibilityIndicatorEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Keyword cExposeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cImportedPackageAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final CrossReference cImportedPackagePackageCrossReference_3_0_0_0 = (CrossReference)cImportedPackageAssignment_3_0_0.eContents().get(0);
		private final RuleCall cImportedPackagePackageNameParserRuleCall_3_0_0_0_1 = (RuleCall)cImportedPackagePackageCrossReference_3_0_0_0.eContents().get(1);
		private final Alternatives cAlternatives_3_0_1 = (Alternatives)cGroup_3_0.eContents().get(1);
		private final Keyword cColonColonKeyword_3_0_1_0 = (Keyword)cAlternatives_3_0_1.eContents().get(0);
		private final Keyword cFullStopKeyword_3_0_1_1 = (Keyword)cAlternatives_3_0_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cImportedPackageAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final CrossReference cImportedPackagePackageCrossReference_3_1_0_0 = (CrossReference)cImportedPackageAssignment_3_1_0.eContents().get(0);
		private final RuleCall cImportedPackagePackageColonQualifiedNameParserRuleCall_3_1_0_0_1 = (RuleCall)cImportedPackagePackageCrossReference_3_1_0_0.eContents().get(1);
		private final Keyword cColonColonKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Group cGroup_3_2 = (Group)cAlternatives_3.eContents().get(2);
		private final Assignment cImportedPackageAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final CrossReference cImportedPackagePackageCrossReference_3_2_0_0 = (CrossReference)cImportedPackageAssignment_3_2_0.eContents().get(0);
		private final RuleCall cImportedPackagePackageDotQualifiedNameParserRuleCall_3_2_0_0_1 = (RuleCall)cImportedPackagePackageCrossReference_3_2_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Keyword cAsteriskKeyword_3_2_2 = (Keyword)cGroup_3_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Expose SysML::Expose:
		//	ownedRelationship_comp+=PrefixAnnotation*
		//	visibility=PackageElementVisibilityIndicator?
		//	'expose' (importedPackage=[SysML::Package|Name] ('::' | '.') '*'
		//	| importedPackage=[SysML::Package|ColonQualifiedName] '::' '*'
		//	| importedPackage=[SysML::Package|DotQualifiedName] '.' '*') ';';
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=PrefixAnnotation* visibility=PackageElementVisibilityIndicator? 'expose'
		//(importedPackage=[SysML::Package|Name] ('::' | '.') '*' | importedPackage=[SysML::Package|ColonQualifiedName] '::' '*'
		//| importedPackage=[SysML::Package|DotQualifiedName] '.' '*') ';'
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship_comp+=PrefixAnnotation*
		public Assignment getOwnedRelationship_compAssignment_0() { return cOwnedRelationship_compAssignment_0; }
		
		//PrefixAnnotation
		public RuleCall getOwnedRelationship_compPrefixAnnotationParserRuleCall_0_0() { return cOwnedRelationship_compPrefixAnnotationParserRuleCall_0_0; }
		
		//visibility=PackageElementVisibilityIndicator?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//PackageElementVisibilityIndicator
		public RuleCall getVisibilityPackageElementVisibilityIndicatorEnumRuleCall_1_0() { return cVisibilityPackageElementVisibilityIndicatorEnumRuleCall_1_0; }
		
		//'expose'
		public Keyword getExposeKeyword_2() { return cExposeKeyword_2; }
		
		//(importedPackage=[SysML::Package|Name] ('::' | '.') '*' | importedPackage=[SysML::Package|ColonQualifiedName] '::' '*' |
		//importedPackage=[SysML::Package|DotQualifiedName] '.' '*')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//importedPackage=[SysML::Package|Name] ('::' | '.') '*'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//importedPackage=[SysML::Package|Name]
		public Assignment getImportedPackageAssignment_3_0_0() { return cImportedPackageAssignment_3_0_0; }
		
		//[SysML::Package|Name]
		public CrossReference getImportedPackagePackageCrossReference_3_0_0_0() { return cImportedPackagePackageCrossReference_3_0_0_0; }
		
		//Name
		public RuleCall getImportedPackagePackageNameParserRuleCall_3_0_0_0_1() { return cImportedPackagePackageNameParserRuleCall_3_0_0_0_1; }
		
		//('::' | '.')
		public Alternatives getAlternatives_3_0_1() { return cAlternatives_3_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_3_0_1_0() { return cColonColonKeyword_3_0_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_3_0_1_1() { return cFullStopKeyword_3_0_1_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_3_0_2() { return cAsteriskKeyword_3_0_2; }
		
		//importedPackage=[SysML::Package|ColonQualifiedName] '::' '*'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//importedPackage=[SysML::Package|ColonQualifiedName]
		public Assignment getImportedPackageAssignment_3_1_0() { return cImportedPackageAssignment_3_1_0; }
		
		//[SysML::Package|ColonQualifiedName]
		public CrossReference getImportedPackagePackageCrossReference_3_1_0_0() { return cImportedPackagePackageCrossReference_3_1_0_0; }
		
		//ColonQualifiedName
		public RuleCall getImportedPackagePackageColonQualifiedNameParserRuleCall_3_1_0_0_1() { return cImportedPackagePackageColonQualifiedNameParserRuleCall_3_1_0_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_3_1_1() { return cColonColonKeyword_3_1_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_3_1_2() { return cAsteriskKeyword_3_1_2; }
		
		//importedPackage=[SysML::Package|DotQualifiedName] '.' '*'
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//importedPackage=[SysML::Package|DotQualifiedName]
		public Assignment getImportedPackageAssignment_3_2_0() { return cImportedPackageAssignment_3_2_0; }
		
		//[SysML::Package|DotQualifiedName]
		public CrossReference getImportedPackagePackageCrossReference_3_2_0_0() { return cImportedPackagePackageCrossReference_3_2_0_0; }
		
		//DotQualifiedName
		public RuleCall getImportedPackagePackageDotQualifiedNameParserRuleCall_3_2_0_0_1() { return cImportedPackagePackageDotQualifiedNameParserRuleCall_3_2_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_3_2_1() { return cFullStopKeyword_3_2_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_3_2_2() { return cAsteriskKeyword_3_2_2; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ViewpointUsageKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewpointUsageKeyword");
		private final RuleCall cViewpointKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* VIEWPOINT USAGES */ ViewpointUsageKeyword:
		//	ViewpointKeyword;
		@Override public ParserRule getRule() { return rule; }
		
		//ViewpointKeyword
		public RuleCall getViewpointKeywordParserRuleCall() { return cViewpointKeywordParserRuleCall; }
	}
	public class ViewpointDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewpointDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cViewpointUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cConstraintParameterPartParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//fragment ViewpointDeclaration returns SysML::ViewpointUsage:
		//	UsagePrefix? ViewpointUsageKeyword UsageDeclaration? ConstraintParameterPart;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ViewpointUsageKeyword UsageDeclaration? ConstraintParameterPart
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//ViewpointUsageKeyword
		public RuleCall getViewpointUsageKeywordParserRuleCall_1() { return cViewpointUsageKeywordParserRuleCall_1; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2() { return cUsageDeclarationParserRuleCall_2; }
		
		//ConstraintParameterPart
		public RuleCall getConstraintParameterPartParserRuleCall_3() { return cConstraintParameterPartParserRuleCall_3; }
	}
	public class ViewpointUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewpointUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cViewpointUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cRequirementUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cRequirementDefBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ViewpointUsage SysML::ViewpointUsage:
		//	UsagePrefix? ViewpointUsageKeyword RequirementUsageDeclaration RequirementDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ViewpointUsageKeyword RequirementUsageDeclaration RequirementDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//ViewpointUsageKeyword
		public RuleCall getViewpointUsageKeywordParserRuleCall_1() { return cViewpointUsageKeywordParserRuleCall_1; }
		
		//RequirementUsageDeclaration
		public RuleCall getRequirementUsageDeclarationParserRuleCall_2() { return cRequirementUsageDeclarationParserRuleCall_2; }
		
		//RequirementDefBody
		public RuleCall getRequirementDefBodyParserRuleCall_3() { return cRequirementDefBodyParserRuleCall_3; }
	}
	public class ViewpointRefUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ViewpointRefUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRefKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cViewpointUsageKeywordParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cIsCompositeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIsCompositeViewpointUsageKeywordParserRuleCall_1_1_0 = (RuleCall)cIsCompositeAssignment_1_1.eContents().get(0);
		private final RuleCall cRequirementUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cRequirementDefBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ViewpointRefUsage SysML::ViewpointUsage:
		//	UsagePrefix? ('ref' ViewpointUsageKeyword | isComposite?=ViewpointUsageKeyword) RequirementUsageDeclaration
		//	RequirementDefBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ('ref' ViewpointUsageKeyword | isComposite?=ViewpointUsageKeyword) RequirementUsageDeclaration
		//RequirementDefBody
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//('ref' ViewpointUsageKeyword | isComposite?=ViewpointUsageKeyword)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'ref' ViewpointUsageKeyword
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'ref'
		public Keyword getRefKeyword_1_0_0() { return cRefKeyword_1_0_0; }
		
		//ViewpointUsageKeyword
		public RuleCall getViewpointUsageKeywordParserRuleCall_1_0_1() { return cViewpointUsageKeywordParserRuleCall_1_0_1; }
		
		//isComposite?=ViewpointUsageKeyword
		public Assignment getIsCompositeAssignment_1_1() { return cIsCompositeAssignment_1_1; }
		
		//ViewpointUsageKeyword
		public RuleCall getIsCompositeViewpointUsageKeywordParserRuleCall_1_1_0() { return cIsCompositeViewpointUsageKeywordParserRuleCall_1_1_0; }
		
		//RequirementUsageDeclaration
		public RuleCall getRequirementUsageDeclarationParserRuleCall_2() { return cRequirementUsageDeclarationParserRuleCall_2; }
		
		//RequirementDefBody
		public RuleCall getRequirementDefBodyParserRuleCall_3() { return cRequirementDefBodyParserRuleCall_3; }
	}
	public class RenderingUsageKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RenderingUsageKeyword");
		private final RuleCall cRenderingKeywordParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* RENDERING USAGES */ RenderingUsageKeyword:
		//	RenderingKeyword;
		@Override public ParserRule getRule() { return rule; }
		
		//RenderingKeyword
		public RuleCall getRenderingKeywordParserRuleCall() { return cRenderingKeywordParserRuleCall; }
	}
	public class RenderingDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RenderingDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRenderingKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment RenderingDeclaration returns SysML::RenderingUsage:
		//	UsagePrefix? RenderingKeyword UsageDeclaration?;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? RenderingKeyword UsageDeclaration?
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//RenderingKeyword
		public RuleCall getRenderingKeywordParserRuleCall_1() { return cRenderingKeywordParserRuleCall_1; }
		
		//UsageDeclaration?
		public RuleCall getUsageDeclarationParserRuleCall_2() { return cUsageDeclarationParserRuleCall_2; }
	}
	public class RenderingUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RenderingUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRenderingUsageKeywordParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUsageParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//RenderingUsage SysML::RenderingUsage:
		//	UsagePrefix? RenderingUsageKeyword Usage;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? RenderingUsageKeyword Usage
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//RenderingUsageKeyword
		public RuleCall getRenderingUsageKeywordParserRuleCall_1() { return cRenderingUsageKeywordParserRuleCall_1; }
		
		//Usage
		public RuleCall getUsageParserRuleCall_2() { return cUsageParserRuleCall_2; }
	}
	public class RenderingRefUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RenderingRefUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUsagePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRefKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cRenderingUsageKeywordParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cIsCompositeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIsCompositeRenderingUsageKeywordParserRuleCall_1_1_0 = (RuleCall)cIsCompositeAssignment_1_1.eContents().get(0);
		private final RuleCall cUsageParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//RenderingRefUsage SysML::RenderingUsage:
		//	UsagePrefix? ('ref' RenderingUsageKeyword | isComposite?=RenderingUsageKeyword) Usage;
		@Override public ParserRule getRule() { return rule; }
		
		//UsagePrefix? ('ref' RenderingUsageKeyword | isComposite?=RenderingUsageKeyword) Usage
		public Group getGroup() { return cGroup; }
		
		//UsagePrefix?
		public RuleCall getUsagePrefixParserRuleCall_0() { return cUsagePrefixParserRuleCall_0; }
		
		//('ref' RenderingUsageKeyword | isComposite?=RenderingUsageKeyword)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'ref' RenderingUsageKeyword
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'ref'
		public Keyword getRefKeyword_1_0_0() { return cRefKeyword_1_0_0; }
		
		//RenderingUsageKeyword
		public RuleCall getRenderingUsageKeywordParserRuleCall_1_0_1() { return cRenderingUsageKeywordParserRuleCall_1_0_1; }
		
		//isComposite?=RenderingUsageKeyword
		public Assignment getIsCompositeAssignment_1_1() { return cIsCompositeAssignment_1_1; }
		
		//RenderingUsageKeyword
		public RuleCall getIsCompositeRenderingUsageKeywordParserRuleCall_1_1_0() { return cIsCompositeRenderingUsageKeywordParserRuleCall_1_1_0; }
		
		//Usage
		public RuleCall getUsageParserRuleCall_2() { return cUsageParserRuleCall_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionalExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQueryPathExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* EXPRESSIONS */ Expression SysML::Expression:
		//	ConditionalExpression | QueryPathExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionalExpression | QueryPathExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConditionalExpression
		public RuleCall getConditionalExpressionParserRuleCall_0() { return cConditionalExpressionParserRuleCall_0; }
		
		//QueryPathExpression
		public RuleCall getQueryPathExpressionParserRuleCall_1() { return cQueryPathExpressionParserRuleCall_1; }
	}
	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNullCoalescingExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorConditionalTestOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cOperand_compAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cOperand_compConditionalExpressionParserRuleCall_1_4_0 = (RuleCall)cOperand_compAssignment_1_4.eContents().get(0);
		
		//// Conditional Test Expressions
		//ConditionalExpression SysML::Expression:
		//	NullCoalescingExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalTestOperator
		//	operand_comp+=Expression ':' operand_comp+=ConditionalExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//NullCoalescingExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalTestOperator
		//operand_comp+=Expression ':' operand_comp+=ConditionalExpression)?
		public Group getGroup() { return cGroup; }
		
		//NullCoalescingExpression
		public RuleCall getNullCoalescingExpressionParserRuleCall_0() { return cNullCoalescingExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalTestOperator operand_comp+=Expression ':'
		//operand_comp+=ConditionalExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=ConditionalTestOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ConditionalTestOperator
		public RuleCall getOperatorConditionalTestOperatorParserRuleCall_1_1_0() { return cOperatorConditionalTestOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=Expression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//Expression
		public RuleCall getOperand_compExpressionParserRuleCall_1_2_0() { return cOperand_compExpressionParserRuleCall_1_2_0; }
		
		//':'
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }
		
		//operand_comp+=ConditionalExpression
		public Assignment getOperand_compAssignment_1_4() { return cOperand_compAssignment_1_4; }
		
		//ConditionalExpression
		public RuleCall getOperand_compConditionalExpressionParserRuleCall_1_4_0() { return cOperand_compConditionalExpressionParserRuleCall_1_4_0; }
	}
	public class ConditionalTestOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConditionalTestOperator");
		private final Keyword cQuestionMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//ConditionalTestOperator:
		//	'?';
		@Override public ParserRule getRule() { return rule; }
		
		//'?'
		public Keyword getQuestionMarkKeyword() { return cQuestionMarkKeyword; }
	}
	public class NullCoalescingExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.NullCoalescingExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionalOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorNullCoalescingOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compConditionalOrExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//// Null Coalescing Expressions
		//NullCoalescingExpression SysML::Expression:
		//	ConditionalOrExpression ({SysML::OperatorExpression.operand_comp+=current} operator=NullCoalescingOperator
		//	operand_comp+=ConditionalOrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionalOrExpression ({SysML::OperatorExpression.operand_comp+=current} operator=NullCoalescingOperator
		//operand_comp+=ConditionalOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//ConditionalOrExpression
		public RuleCall getConditionalOrExpressionParserRuleCall_0() { return cConditionalOrExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=NullCoalescingOperator
		//operand_comp+=ConditionalOrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=NullCoalescingOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//NullCoalescingOperator
		public RuleCall getOperatorNullCoalescingOperatorParserRuleCall_1_1_0() { return cOperatorNullCoalescingOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=ConditionalOrExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//ConditionalOrExpression
		public RuleCall getOperand_compConditionalOrExpressionParserRuleCall_1_2_0() { return cOperand_compConditionalOrExpressionParserRuleCall_1_2_0; }
	}
	public class NullCoalescingOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.NullCoalescingOperator");
		private final Keyword cQuestionMarkQuestionMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//NullCoalescingOperator:
		//	'??';
		@Override public ParserRule getRule() { return rule; }
		
		//'??'
		public Keyword getQuestionMarkQuestionMarkKeyword() { return cQuestionMarkQuestionMarkKeyword; }
	}
	public class ConditionalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConditionalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorConditionalOrOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compConditionalAndExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//// Conditional Logical Expressions
		//ConditionalOrExpression SysML::Expression:
		//	ConditionalAndExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalOrOperator
		//	operand_comp+=ConditionalAndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionalAndExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalOrOperator
		//operand_comp+=ConditionalAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//ConditionalAndExpression
		public RuleCall getConditionalAndExpressionParserRuleCall_0() { return cConditionalAndExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalOrOperator
		//operand_comp+=ConditionalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=ConditionalOrOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ConditionalOrOperator
		public RuleCall getOperatorConditionalOrOperatorParserRuleCall_1_1_0() { return cOperatorConditionalOrOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=ConditionalAndExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//ConditionalAndExpression
		public RuleCall getOperand_compConditionalAndExpressionParserRuleCall_1_2_0() { return cOperand_compConditionalAndExpressionParserRuleCall_1_2_0; }
	}
	public class ConditionalOrOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConditionalOrOperator");
		private final Keyword cVerticalLineVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//ConditionalOrOperator:
		//	'||';
		@Override public ParserRule getRule() { return rule; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword() { return cVerticalLineVerticalLineKeyword; }
	}
	public class ConditionalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConditionalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorConditionalAndOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compOrExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//ConditionalAndExpression SysML::Expression:
		//	OrExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalAndOperator
		//	operand_comp+=OrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalAndOperator
		//operand_comp+=OrExpression)*
		public Group getGroup() { return cGroup; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_0() { return cOrExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalAndOperator operand_comp+=OrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=ConditionalAndOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ConditionalAndOperator
		public RuleCall getOperatorConditionalAndOperatorParserRuleCall_1_1_0() { return cOperatorConditionalAndOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=OrExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//OrExpression
		public RuleCall getOperand_compOrExpressionParserRuleCall_1_2_0() { return cOperand_compOrExpressionParserRuleCall_1_2_0; }
	}
	public class ConditionalAndOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ConditionalAndOperator");
		private final Keyword cAmpersandAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//ConditionalAndOperator:
		//	'&&';
		@Override public ParserRule getRule() { return rule; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword() { return cAmpersandAmpersandKeyword; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorOrOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compXorExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//// Logical Expressions
		//OrExpression SysML::Expression:
		//	XorExpression ({SysML::OperatorExpression.operand_comp+=current} operator=OrOperator operand_comp+=XorExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XorExpression ({SysML::OperatorExpression.operand_comp+=current} operator=OrOperator operand_comp+=XorExpression)*
		public Group getGroup() { return cGroup; }
		
		//XorExpression
		public RuleCall getXorExpressionParserRuleCall_0() { return cXorExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=OrOperator operand_comp+=XorExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=OrOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//OrOperator
		public RuleCall getOperatorOrOperatorParserRuleCall_1_1_0() { return cOperatorOrOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=XorExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//XorExpression
		public RuleCall getOperand_compXorExpressionParserRuleCall_1_2_0() { return cOperand_compXorExpressionParserRuleCall_1_2_0; }
	}
	public class OrOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.OrOperator");
		private final Keyword cVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//OrOperator:
		//	'|';
		@Override public ParserRule getRule() { return rule; }
		
		//'|'
		public Keyword getVerticalLineKeyword() { return cVerticalLineKeyword; }
	}
	public class XorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.XorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorXorOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compAndExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//XorExpression SysML::Expression:
		//	AndExpression ({SysML::OperatorExpression.operand_comp+=current} operator=XorOperator operand_comp+=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({SysML::OperatorExpression.operand_comp+=current} operator=XorOperator operand_comp+=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=XorOperator operand_comp+=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=XorOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//XorOperator
		public RuleCall getOperatorXorOperatorParserRuleCall_1_1_0() { return cOperatorXorOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=AndExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//AndExpression
		public RuleCall getOperand_compAndExpressionParserRuleCall_1_2_0() { return cOperand_compAndExpressionParserRuleCall_1_2_0; }
	}
	public class XorOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.XorOperator");
		private final Keyword cCircumflexAccentKeyword = (Keyword)rule.eContents().get(1);
		
		//XorOperator:
		//	'^';
		@Override public ParserRule getRule() { return rule; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword() { return cCircumflexAccentKeyword; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAndOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//AndExpression SysML::Expression:
		//	EqualityExpression ({SysML::OperatorExpression.operand_comp+=current} operator=AndOperator
		//	operand_comp+=EqualityExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityExpression ({SysML::OperatorExpression.operand_comp+=current} operator=AndOperator
		//operand_comp+=EqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=AndOperator operand_comp+=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=AndOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AndOperator
		public RuleCall getOperatorAndOperatorParserRuleCall_1_1_0() { return cOperatorAndOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=EqualityExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//EqualityExpression
		public RuleCall getOperand_compEqualityExpressionParserRuleCall_1_2_0() { return cOperand_compEqualityExpressionParserRuleCall_1_2_0; }
	}
	public class AndOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AndOperator");
		private final Keyword cAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//AndOperator:
		//	'&';
		@Override public ParserRule getRule() { return rule; }
		
		//'&'
		public Keyword getAmpersandKeyword() { return cAmpersandKeyword; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassificationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEqualityOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compClassificationExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//// Equality Expressions
		//EqualityExpression SysML::Expression:
		//	ClassificationExpression ({SysML::OperatorExpression.operand_comp+=current} operator=EqualityOperator
		//	operand_comp+=ClassificationExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ClassificationExpression ({SysML::OperatorExpression.operand_comp+=current} operator=EqualityOperator
		//operand_comp+=ClassificationExpression)*
		public Group getGroup() { return cGroup; }
		
		//ClassificationExpression
		public RuleCall getClassificationExpressionParserRuleCall_0() { return cClassificationExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=EqualityOperator operand_comp+=ClassificationExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=EqualityOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//EqualityOperator
		public RuleCall getOperatorEqualityOperatorParserRuleCall_1_1_0() { return cOperatorEqualityOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=ClassificationExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//ClassificationExpression
		public RuleCall getOperand_compClassificationExpressionParserRuleCall_1_2_0() { return cOperand_compClassificationExpressionParserRuleCall_1_2_0; }
	}
	public class EqualityOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EqualityOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EqualityOperator:
		//	'==' | '!=';
		@Override public ParserRule getRule() { return rule; }
		
		//'==' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}
	public class ClassificationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ClassificationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorClassificationOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compTypeReferenceMemberParserRuleCall_1_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_2.eContents().get(0);
		
		//// Classification Expressions
		//ClassificationExpression SysML::Expression:
		//	RelationalExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ClassificationOperator
		//	ownedFeatureMembership_comp+=TypeReferenceMember)?;
		@Override public ParserRule getRule() { return rule; }
		
		//RelationalExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ClassificationOperator
		//ownedFeatureMembership_comp+=TypeReferenceMember)?
		public Group getGroup() { return cGroup; }
		
		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=ClassificationOperator
		//ownedFeatureMembership_comp+=TypeReferenceMember)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=ClassificationOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ClassificationOperator
		public RuleCall getOperatorClassificationOperatorParserRuleCall_1_1_0() { return cOperatorClassificationOperatorParserRuleCall_1_1_0; }
		
		//ownedFeatureMembership_comp+=TypeReferenceMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_2() { return cOwnedFeatureMembership_compAssignment_1_2; }
		
		//TypeReferenceMember
		public RuleCall getOwnedFeatureMembership_compTypeReferenceMemberParserRuleCall_1_2_0() { return cOwnedFeatureMembership_compTypeReferenceMemberParserRuleCall_1_2_0; }
	}
	public class ClassificationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ClassificationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cInstanceofKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHastypeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIstypeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ClassificationOperator:
		//	'instanceof' | 'hastype' | 'istype';
		@Override public ParserRule getRule() { return rule; }
		
		//'instanceof' | 'hastype' | 'istype'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'instanceof'
		public Keyword getInstanceofKeyword_0() { return cInstanceofKeyword_0; }
		
		//'hastype'
		public Keyword getHastypeKeyword_1() { return cHastypeKeyword_1; }
		
		//'istype'
		public Keyword getIstypeKeyword_2() { return cIstypeKeyword_2; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorRelationalOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//// Relational Expressions
		//RelationalExpression SysML::Expression:
		//	AdditiveExpression ({SysML::OperatorExpression.operand_comp+=current} operator=RelationalOperator
		//	operand_comp+=AdditiveExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditiveExpression ({SysML::OperatorExpression.operand_comp+=current} operator=RelationalOperator
		//operand_comp+=AdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=RelationalOperator operand_comp+=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=RelationalOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorParserRuleCall_1_1_0() { return cOperatorRelationalOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=AdditiveExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//AdditiveExpression
		public RuleCall getOperand_compAdditiveExpressionParserRuleCall_1_2_0() { return cOperand_compAdditiveExpressionParserRuleCall_1_2_0; }
	}
	public class RelationalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//RelationalOperator:
		//	'<' | '>' | '<=' | '>=';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' | '>' | '<=' | '>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAdditiveOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//// Arithmetic Expressions
		//AdditiveExpression SysML::Expression:
		//	MultiplicativeExpression ({SysML::OperatorExpression.operand_comp+=current} operator=AdditiveOperator
		//	operand_comp+=MultiplicativeExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicativeExpression ({SysML::OperatorExpression.operand_comp+=current} operator=AdditiveOperator
		//operand_comp+=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=AdditiveOperator operand_comp+=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=AdditiveOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AdditiveOperator
		public RuleCall getOperatorAdditiveOperatorParserRuleCall_1_1_0() { return cOperatorAdditiveOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=MultiplicativeExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//MultiplicativeExpression
		public RuleCall getOperand_compMultiplicativeExpressionParserRuleCall_1_2_0() { return cOperand_compMultiplicativeExpressionParserRuleCall_1_2_0; }
	}
	public class AdditiveOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AdditiveOperator:
		//	'+' | '-';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExponentiationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorMultiplicativeOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compExponentiationExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression SysML::Expression:
		//	ExponentiationExpression ({SysML::OperatorExpression.operand_comp+=current} operator=MultiplicativeOperator
		//	operand_comp+=ExponentiationExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ExponentiationExpression ({SysML::OperatorExpression.operand_comp+=current} operator=MultiplicativeOperator
		//operand_comp+=ExponentiationExpression)*
		public Group getGroup() { return cGroup; }
		
		//ExponentiationExpression
		public RuleCall getExponentiationExpressionParserRuleCall_0() { return cExponentiationExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=MultiplicativeOperator
		//operand_comp+=ExponentiationExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=MultiplicativeOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//MultiplicativeOperator
		public RuleCall getOperatorMultiplicativeOperatorParserRuleCall_1_1_0() { return cOperatorMultiplicativeOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=ExponentiationExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//ExponentiationExpression
		public RuleCall getOperand_compExponentiationExpressionParserRuleCall_1_2_0() { return cOperand_compExponentiationExpressionParserRuleCall_1_2_0; }
	}
	public class MultiplicativeOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.MultiplicativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//MultiplicativeOperator:
		//	'*' | '/';
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
	}
	public class ExponentiationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ExponentiationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitsExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorExponentiationOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compUnitsExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//ExponentiationExpression SysML::Expression:
		//	UnitsExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ExponentiationOperator
		//	operand_comp+=UnitsExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitsExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ExponentiationOperator
		//operand_comp+=UnitsExpression)*
		public Group getGroup() { return cGroup; }
		
		//UnitsExpression
		public RuleCall getUnitsExpressionParserRuleCall_0() { return cUnitsExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=ExponentiationOperator operand_comp+=UnitsExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=ExponentiationOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ExponentiationOperator
		public RuleCall getOperatorExponentiationOperatorParserRuleCall_1_1_0() { return cOperatorExponentiationOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=UnitsExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//UnitsExpression
		public RuleCall getOperand_compUnitsExpressionParserRuleCall_1_2_0() { return cOperand_compUnitsExpressionParserRuleCall_1_2_0; }
	}
	public class ExponentiationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ExponentiationOperator");
		private final Keyword cAsteriskAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//ExponentiationOperator:
		//	'**';
		@Override public ParserRule getRule() { return rule; }
		
		//'**'
		public Keyword getAsteriskAsteriskKeyword() { return cAsteriskAsteriskKeyword; }
	}
	public class UnitsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.UnitsExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorCommercialAtKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cOperand_compAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOperand_compExpressionParserRuleCall_1_3_0 = (RuleCall)cOperand_compAssignment_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//// Units Expressions
		//UnitsExpression SysML::Expression:
		//	UnaryExpression ({SysML::OperatorExpression.operand_comp+=current} operator='@' '[' operand_comp+=Expression ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression ({SysML::OperatorExpression.operand_comp+=current} operator='@' '[' operand_comp+=Expression ']')?
		public Group getGroup() { return cGroup; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator='@' '[' operand_comp+=Expression ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator='@'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'@'
		public Keyword getOperatorCommercialAtKeyword_1_1_0() { return cOperatorCommercialAtKeyword_1_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_2() { return cLeftSquareBracketKeyword_1_2; }
		
		//operand_comp+=Expression
		public Assignment getOperand_compAssignment_1_3() { return cOperand_compAssignment_1_3; }
		
		//Expression
		public RuleCall getOperand_compExpressionParserRuleCall_1_3_0() { return cOperand_compExpressionParserRuleCall_1_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSequenceAccessExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOperatorExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorUnaryOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compSequenceAccessExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//// Unary Expressions
		//UnaryExpression SysML::Expression:
		//	SequenceAccessExpression | {SysML::OperatorExpression} operator=UnaryOperator operand_comp+=SequenceAccessExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//SequenceAccessExpression | {SysML::OperatorExpression} operator=UnaryOperator operand_comp+=SequenceAccessExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SequenceAccessExpression
		public RuleCall getSequenceAccessExpressionParserRuleCall_0() { return cSequenceAccessExpressionParserRuleCall_0; }
		
		//{SysML::OperatorExpression} operator=UnaryOperator operand_comp+=SequenceAccessExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression}
		public Action getOperatorExpressionAction_1_0() { return cOperatorExpressionAction_1_0; }
		
		//operator=UnaryOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//UnaryOperator
		public RuleCall getOperatorUnaryOperatorParserRuleCall_1_1_0() { return cOperatorUnaryOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=SequenceAccessExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//SequenceAccessExpression
		public RuleCall getOperand_compSequenceAccessExpressionParserRuleCall_1_2_0() { return cOperand_compSequenceAccessExpressionParserRuleCall_1_2_0; }
	}
	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTildeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//UnaryOperator:
		//	'+' | '-' | '!' | '~';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '!' | '~'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
		
		//'~'
		public Keyword getTildeKeyword_3() { return cTildeKeyword_3; }
	}
	public class SequenceAccessExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SequenceAccessExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorLeftSquareBracketKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//SequenceAccessExpression SysML::Expression:
		//	PrimaryExpression ({SysML::OperatorExpression.operand_comp+=current} operator='[' operand_comp+=Expression ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression ({SysML::OperatorExpression.operand_comp+=current} operator='[' operand_comp+=Expression ']')?
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator='[' operand_comp+=Expression ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator='['
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'['
		public Keyword getOperatorLeftSquareBracketKeyword_1_1_0() { return cOperatorLeftSquareBracketKeyword_1_1_0; }
		
		//operand_comp+=Expression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//Expression
		public RuleCall getOperand_compExpressionParserRuleCall_1_2_0() { return cOperand_compExpressionParserRuleCall_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PrimaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBaseExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperatorNameParserRuleCall_1_2_0 = (RuleCall)cOperatorAssignment_1_2.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compBodyMemberParserRuleCall_1_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_3.eContents().get(0);
		
		//// Primary Expressions
		//PrimaryExpression SysML::Expression:
		//	BaseExpression ({SysML::OperatorExpression.operand_comp+=current} '->'
		//	operator=Name ownedFeatureMembership_comp+=BodyMember+)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BaseExpression ({SysML::OperatorExpression.operand_comp+=current} '->' operator=Name
		//ownedFeatureMembership_comp+=BodyMember+)*
		public Group getGroup() { return cGroup; }
		
		//BaseExpression
		public RuleCall getBaseExpressionParserRuleCall_0() { return cBaseExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} '->' operator=Name ownedFeatureMembership_comp+=BodyMember+)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1() { return cHyphenMinusGreaterThanSignKeyword_1_1; }
		
		//operator=Name
		public Assignment getOperatorAssignment_1_2() { return cOperatorAssignment_1_2; }
		
		//Name
		public RuleCall getOperatorNameParserRuleCall_1_2_0() { return cOperatorNameParserRuleCall_1_2_0; }
		
		//ownedFeatureMembership_comp+=BodyMember+
		public Assignment getOwnedFeatureMembership_compAssignment_1_3() { return cOwnedFeatureMembership_compAssignment_1_3; }
		
		//BodyMember
		public RuleCall getOwnedFeatureMembership_compBodyMemberParserRuleCall_1_3_0() { return cOwnedFeatureMembership_compBodyMemberParserRuleCall_1_3_0; }
	}
	public class BodyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.BodyExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compBodyParameterMemberParserRuleCall_0_0_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0_0_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compBodyParameterMemberParserRuleCall_0_0_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cOwnedFeatureMembership_compAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compExpressionMemberParserRuleCall_0_0_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_0_4 = (Keyword)cGroup_0_0.eContents().get(4);
		private final Assignment cOwnedRelationship_compAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedRelationship_compExpressionTypingParserRuleCall_1_0 = (RuleCall)cOwnedRelationship_compAssignment_1.eContents().get(0);
		
		//// Body Expressions
		//BodyExpression SysML::BlockExpression:
		//	=> (ownedFeatureMembership_comp+=BodyParameterMember ownedFeatureMembership_comp+=BodyParameterMember*
		//	'(' ownedFeatureMembership_comp+=ExpressionMember ')') | ownedRelationship_comp+=ExpressionTyping;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (ownedFeatureMembership_comp+=BodyParameterMember ownedFeatureMembership_comp+=BodyParameterMember* '('
		//ownedFeatureMembership_comp+=ExpressionMember ')') | ownedRelationship_comp+=ExpressionTyping
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (ownedFeatureMembership_comp+=BodyParameterMember ownedFeatureMembership_comp+=BodyParameterMember* '('
		//ownedFeatureMembership_comp+=ExpressionMember ')')
		public Group getGroup_0() { return cGroup_0; }
		
		//(ownedFeatureMembership_comp+=BodyParameterMember ownedFeatureMembership_comp+=BodyParameterMember* '('
		//ownedFeatureMembership_comp+=ExpressionMember ')')
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//ownedFeatureMembership_comp+=BodyParameterMember
		public Assignment getOwnedFeatureMembership_compAssignment_0_0_0() { return cOwnedFeatureMembership_compAssignment_0_0_0; }
		
		//BodyParameterMember
		public RuleCall getOwnedFeatureMembership_compBodyParameterMemberParserRuleCall_0_0_0_0() { return cOwnedFeatureMembership_compBodyParameterMemberParserRuleCall_0_0_0_0; }
		
		//ownedFeatureMembership_comp+=BodyParameterMember*
		public Assignment getOwnedFeatureMembership_compAssignment_0_0_1() { return cOwnedFeatureMembership_compAssignment_0_0_1; }
		
		//BodyParameterMember
		public RuleCall getOwnedFeatureMembership_compBodyParameterMemberParserRuleCall_0_0_1_0() { return cOwnedFeatureMembership_compBodyParameterMemberParserRuleCall_0_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0_2() { return cLeftParenthesisKeyword_0_0_2; }
		
		//ownedFeatureMembership_comp+=ExpressionMember
		public Assignment getOwnedFeatureMembership_compAssignment_0_0_3() { return cOwnedFeatureMembership_compAssignment_0_0_3; }
		
		//ExpressionMember
		public RuleCall getOwnedFeatureMembership_compExpressionMemberParserRuleCall_0_0_3_0() { return cOwnedFeatureMembership_compExpressionMemberParserRuleCall_0_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_0_4() { return cRightParenthesisKeyword_0_0_4; }
		
		//ownedRelationship_comp+=ExpressionTyping
		public Assignment getOwnedRelationship_compAssignment_1() { return cOwnedRelationship_compAssignment_1; }
		
		//ExpressionTyping
		public RuleCall getOwnedRelationship_compExpressionTypingParserRuleCall_1_0() { return cOwnedRelationship_compExpressionTypingParserRuleCall_1_0; }
	}
	public class BodyParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.BodyParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReferenceUsageAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cDefinedByParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cMultiplicityPartParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cMultiplicityPartParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final RuleCall cDefinedByParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//BodyParameter SysML::Usage:
		//	{SysML::ReferenceUsage} (DefinedBy MultiplicityPart? | MultiplicityPart DefinedBy?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::ReferenceUsage} (DefinedBy MultiplicityPart? | MultiplicityPart DefinedBy?)?
		public Group getGroup() { return cGroup; }
		
		//{SysML::ReferenceUsage}
		public Action getReferenceUsageAction_0() { return cReferenceUsageAction_0; }
		
		//(DefinedBy MultiplicityPart? | MultiplicityPart DefinedBy?)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//DefinedBy MultiplicityPart?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//DefinedBy
		public RuleCall getDefinedByParserRuleCall_1_0_0() { return cDefinedByParserRuleCall_1_0_0; }
		
		//MultiplicityPart?
		public RuleCall getMultiplicityPartParserRuleCall_1_0_1() { return cMultiplicityPartParserRuleCall_1_0_1; }
		
		//MultiplicityPart DefinedBy?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//MultiplicityPart
		public RuleCall getMultiplicityPartParserRuleCall_1_1_0() { return cMultiplicityPartParserRuleCall_1_1_0; }
		
		//DefinedBy?
		public RuleCall getDefinedByParserRuleCall_1_1_1() { return cDefinedByParserRuleCall_1_1_1; }
	}
	public class ExpressionTypingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ExpressionTyping");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeFunctionCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeFunctionQualifiedNameParserRuleCall_0_1 = (RuleCall)cTypeFunctionCrossReference_0.eContents().get(1);
		
		//ExpressionTyping SysML::FeatureTyping:
		//	type=[SysML::Function|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//type=[SysML::Function|QualifiedName]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[SysML::Function|QualifiedName]
		public CrossReference getTypeFunctionCrossReference_0() { return cTypeFunctionCrossReference_0; }
		
		//QualifiedName
		public RuleCall getTypeFunctionQualifiedNameParserRuleCall_0_1() { return cTypeFunctionQualifiedNameParserRuleCall_0_1; }
	}
	public class BaseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.BaseExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNullExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFeatureReferenceExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInvocationExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExtentExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSequenceConstructionExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//// Base Expressions
		//BaseExpression SysML::Expression:
		//	NullExpression
		//	| LiteralExpression
		//	| FeatureReferenceExpression
		//	| InvocationExpression
		//	| ExtentExpression
		//	| SequenceConstructionExpression
		//	| '(' Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//NullExpression | LiteralExpression | FeatureReferenceExpression | InvocationExpression | ExtentExpression |
		//SequenceConstructionExpression | '(' Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NullExpression
		public RuleCall getNullExpressionParserRuleCall_0() { return cNullExpressionParserRuleCall_0; }
		
		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall_1() { return cLiteralExpressionParserRuleCall_1; }
		
		//FeatureReferenceExpression
		public RuleCall getFeatureReferenceExpressionParserRuleCall_2() { return cFeatureReferenceExpressionParserRuleCall_2; }
		
		//InvocationExpression
		public RuleCall getInvocationExpressionParserRuleCall_3() { return cInvocationExpressionParserRuleCall_3; }
		
		//ExtentExpression
		public RuleCall getExtentExpressionParserRuleCall_4() { return cExtentExpressionParserRuleCall_4; }
		
		//SequenceConstructionExpression
		public RuleCall getSequenceConstructionExpressionParserRuleCall_5() { return cSequenceConstructionExpressionParserRuleCall_5; }
		
		//'(' Expression ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_6_1() { return cExpressionParserRuleCall_6_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }
	}
	public class FeatureReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.FeatureReferenceExpression");
		private final Assignment cOwnedFeatureMembership_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compFeatureReferenceMemberParserRuleCall_0 = (RuleCall)cOwnedFeatureMembership_compAssignment.eContents().get(0);
		
		//FeatureReferenceExpression SysML::FeatureReferenceExpression:
		//	ownedFeatureMembership_comp+=FeatureReferenceMember;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=FeatureReferenceMember
		public Assignment getOwnedFeatureMembership_compAssignment() { return cOwnedFeatureMembership_compAssignment; }
		
		//FeatureReferenceMember
		public RuleCall getOwnedFeatureMembership_compFeatureReferenceMemberParserRuleCall_0() { return cOwnedFeatureMembership_compFeatureReferenceMemberParserRuleCall_0; }
	}
	public class FeatureReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.FeatureReference");
		private final Assignment cOwnedRelationship_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationship_compSubsetParserRuleCall_0 = (RuleCall)cOwnedRelationship_compAssignment.eContents().get(0);
		
		//FeatureReference SysML::ReferenceUsage:
		//	ownedRelationship_comp+=Subset;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=Subset
		public Assignment getOwnedRelationship_compAssignment() { return cOwnedRelationship_compAssignment; }
		
		//Subset
		public RuleCall getOwnedRelationship_compSubsetParserRuleCall_0() { return cOwnedRelationship_compSubsetParserRuleCall_0; }
	}
	public class InvocationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.InvocationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationship_compFeatureTypingParserRuleCall_0_0 = (RuleCall)cOwnedRelationship_compAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTupleParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InvocationExpression SysML::InvocationExpression:
		//	ownedRelationship_comp+=FeatureTyping '(' Tuple? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=FeatureTyping '(' Tuple? ')'
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship_comp+=FeatureTyping
		public Assignment getOwnedRelationship_compAssignment_0() { return cOwnedRelationship_compAssignment_0; }
		
		//FeatureTyping
		public RuleCall getOwnedRelationship_compFeatureTypingParserRuleCall_0_0() { return cOwnedRelationship_compFeatureTypingParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Tuple?
		public RuleCall getTupleParserRuleCall_2() { return cTupleParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class TupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Tuple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPositionalTupleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNamedTupleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//fragment Tuple returns SysML::Expression:
		//	PositionalTuple | NamedTuple;
		@Override public ParserRule getRule() { return rule; }
		
		//PositionalTuple | NamedTuple
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PositionalTuple
		public RuleCall getPositionalTupleParserRuleCall_0() { return cPositionalTupleParserRuleCall_0; }
		
		//NamedTuple
		public RuleCall getNamedTupleParserRuleCall_1() { return cNamedTupleParserRuleCall_1; }
	}
	public class PositionalTupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PositionalTuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compExpressionMemberParserRuleCall_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compExpressionMemberParserRuleCall_1_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_1.eContents().get(0);
		
		//fragment PositionalTuple returns SysML::Expression:
		//	ownedFeatureMembership_comp+=ExpressionMember (',' ownedFeatureMembership_comp+=ExpressionMember)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=ExpressionMember (',' ownedFeatureMembership_comp+=ExpressionMember)*
		public Group getGroup() { return cGroup; }
		
		//ownedFeatureMembership_comp+=ExpressionMember
		public Assignment getOwnedFeatureMembership_compAssignment_0() { return cOwnedFeatureMembership_compAssignment_0; }
		
		//ExpressionMember
		public RuleCall getOwnedFeatureMembership_compExpressionMemberParserRuleCall_0_0() { return cOwnedFeatureMembership_compExpressionMemberParserRuleCall_0_0; }
		
		//(',' ownedFeatureMembership_comp+=ExpressionMember)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ownedFeatureMembership_comp+=ExpressionMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_1() { return cOwnedFeatureMembership_compAssignment_1_1; }
		
		//ExpressionMember
		public RuleCall getOwnedFeatureMembership_compExpressionMemberParserRuleCall_1_1_0() { return cOwnedFeatureMembership_compExpressionMemberParserRuleCall_1_1_0; }
	}
	public class NamedTupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.NamedTuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compNamedExpressionMemberParserRuleCall_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compNamedExpressionMemberParserRuleCall_1_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_1.eContents().get(0);
		
		//fragment NamedTuple returns SysML::Expression:
		//	ownedFeatureMembership_comp+=NamedExpressionMember (',' ownedFeatureMembership_comp+=NamedExpressionMember)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=NamedExpressionMember (',' ownedFeatureMembership_comp+=NamedExpressionMember)*
		public Group getGroup() { return cGroup; }
		
		//ownedFeatureMembership_comp+=NamedExpressionMember
		public Assignment getOwnedFeatureMembership_compAssignment_0() { return cOwnedFeatureMembership_compAssignment_0; }
		
		//NamedExpressionMember
		public RuleCall getOwnedFeatureMembership_compNamedExpressionMemberParserRuleCall_0_0() { return cOwnedFeatureMembership_compNamedExpressionMemberParserRuleCall_0_0; }
		
		//(',' ownedFeatureMembership_comp+=NamedExpressionMember)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ownedFeatureMembership_comp+=NamedExpressionMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_1() { return cOwnedFeatureMembership_compAssignment_1_1; }
		
		//NamedExpressionMember
		public RuleCall getOwnedFeatureMembership_compNamedExpressionMemberParserRuleCall_1_1_0() { return cOwnedFeatureMembership_compNamedExpressionMemberParserRuleCall_1_1_0; }
	}
	public class ExtentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ExtentExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compTypeReferenceMemberParserRuleCall_0_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOperatorAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final Keyword cOperatorAllInstancesKeyword_0_2_0 = (Keyword)cOperatorAssignment_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperatorAllKeyword_1_0_0 = (Keyword)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compTypeReferenceMemberParserRuleCall_1_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_1.eContents().get(0);
		
		//ExtentExpression SysML::OperatorExpression:
		//	ownedFeatureMembership_comp+=TypeReferenceMember '.' operator='allInstances' '(' ')'
		//	| operator='all' ownedFeatureMembership_comp+=TypeReferenceMember;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=TypeReferenceMember '.' operator='allInstances' '(' ')' | operator='all'
		//ownedFeatureMembership_comp+=TypeReferenceMember
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ownedFeatureMembership_comp+=TypeReferenceMember '.' operator='allInstances' '(' ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//ownedFeatureMembership_comp+=TypeReferenceMember
		public Assignment getOwnedFeatureMembership_compAssignment_0_0() { return cOwnedFeatureMembership_compAssignment_0_0; }
		
		//TypeReferenceMember
		public RuleCall getOwnedFeatureMembership_compTypeReferenceMemberParserRuleCall_0_0_0() { return cOwnedFeatureMembership_compTypeReferenceMemberParserRuleCall_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//operator='allInstances'
		public Assignment getOperatorAssignment_0_2() { return cOperatorAssignment_0_2; }
		
		//'allInstances'
		public Keyword getOperatorAllInstancesKeyword_0_2_0() { return cOperatorAllInstancesKeyword_0_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_3() { return cLeftParenthesisKeyword_0_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//operator='all' ownedFeatureMembership_comp+=TypeReferenceMember
		public Group getGroup_1() { return cGroup_1; }
		
		//operator='all'
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }
		
		//'all'
		public Keyword getOperatorAllKeyword_1_0_0() { return cOperatorAllKeyword_1_0_0; }
		
		//ownedFeatureMembership_comp+=TypeReferenceMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_1() { return cOwnedFeatureMembership_compAssignment_1_1; }
		
		//TypeReferenceMember
		public RuleCall getOwnedFeatureMembership_compTypeReferenceMemberParserRuleCall_1_1_0() { return cOwnedFeatureMembership_compTypeReferenceMemberParserRuleCall_1_1_0; }
	}
	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TypeReference");
		private final Assignment cOwnedRelationship_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationship_compFeatureTypingParserRuleCall_0 = (RuleCall)cOwnedRelationship_compAssignment.eContents().get(0);
		
		//TypeReference SysML::Feature:
		//	ownedRelationship_comp+=FeatureTyping;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=FeatureTyping
		public Assignment getOwnedRelationship_compAssignment() { return cOwnedRelationship_compAssignment; }
		
		//FeatureTyping
		public RuleCall getOwnedRelationship_compFeatureTypingParserRuleCall_0() { return cOwnedRelationship_compFeatureTypingParserRuleCall_0; }
	}
	public class SequenceConstructionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SequenceConstructionExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNullExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cAlternatives_1_2.eContents().get(0);
		private final Action cOperatorExpressionOperand_compAction_1_2_0_0 = (Action)cGroup_1_2_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_2_0_1 = (Assignment)cGroup_1_2_0.eContents().get(1);
		private final Keyword cOperatorCommaKeyword_1_2_0_1_0 = (Keyword)cOperatorAssignment_1_2_0_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2_0_2 = (Assignment)cGroup_1_2_0.eContents().get(2);
		private final RuleCall cOperand_compSequenceElementListParserRuleCall_1_2_0_2_0 = (RuleCall)cOperand_compAssignment_1_2_0_2.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cAlternatives_1_2.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_2_1_0 = (Action)cGroup_1_2_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final Keyword cOperatorFullStopFullStopKeyword_1_2_1_1_0 = (Keyword)cOperatorAssignment_1_2_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2_1_2 = (Assignment)cGroup_1_2_1.eContents().get(2);
		private final RuleCall cOperand_compExpressionParserRuleCall_1_2_1_2_0 = (RuleCall)cOperand_compAssignment_1_2_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//SequenceConstructionExpression SysML::Expression:
		//	{SysML::NullExpression} '{' '}'
		//	| '{' Expression ({SysML::OperatorExpression.operand_comp+=current} operator=',' operand_comp+=SequenceElementList
		//	| {SysML::OperatorExpression.operand_comp+=current} operator='..' operand_comp+=Expression)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::NullExpression} '{' '}' | '{' Expression ({SysML::OperatorExpression.operand_comp+=current} operator=','
		//operand_comp+=SequenceElementList | {SysML::OperatorExpression.operand_comp+=current} operator='..'
		//operand_comp+=Expression)? '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SysML::NullExpression} '{' '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//{SysML::NullExpression}
		public Action getNullExpressionAction_0_0() { return cNullExpressionAction_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_2() { return cRightCurlyBracketKeyword_0_2; }
		
		//'{' Expression ({SysML::OperatorExpression.operand_comp+=current} operator=',' operand_comp+=SequenceElementList |
		//{SysML::OperatorExpression.operand_comp+=current} operator='..' operand_comp+=Expression)? '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=',' operand_comp+=SequenceElementList |
		//{SysML::OperatorExpression.operand_comp+=current} operator='..' operand_comp+=Expression)?
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }
		
		//{SysML::OperatorExpression.operand_comp+=current} operator=',' operand_comp+=SequenceElementList
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_2_0_0() { return cOperatorExpressionOperand_compAction_1_2_0_0; }
		
		//operator=','
		public Assignment getOperatorAssignment_1_2_0_1() { return cOperatorAssignment_1_2_0_1; }
		
		//','
		public Keyword getOperatorCommaKeyword_1_2_0_1_0() { return cOperatorCommaKeyword_1_2_0_1_0; }
		
		//operand_comp+=SequenceElementList
		public Assignment getOperand_compAssignment_1_2_0_2() { return cOperand_compAssignment_1_2_0_2; }
		
		//SequenceElementList
		public RuleCall getOperand_compSequenceElementListParserRuleCall_1_2_0_2_0() { return cOperand_compSequenceElementListParserRuleCall_1_2_0_2_0; }
		
		//{SysML::OperatorExpression.operand_comp+=current} operator='..' operand_comp+=Expression
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_2_1_0() { return cOperatorExpressionOperand_compAction_1_2_1_0; }
		
		//operator='..'
		public Assignment getOperatorAssignment_1_2_1_1() { return cOperatorAssignment_1_2_1_1; }
		
		//'..'
		public Keyword getOperatorFullStopFullStopKeyword_1_2_1_1_0() { return cOperatorFullStopFullStopKeyword_1_2_1_1_0; }
		
		//operand_comp+=Expression
		public Assignment getOperand_compAssignment_1_2_1_2() { return cOperand_compAssignment_1_2_1_2; }
		
		//Expression
		public RuleCall getOperand_compExpressionParserRuleCall_1_2_1_2_0() { return cOperand_compExpressionParserRuleCall_1_2_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class SequenceElementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SequenceElementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorCommaKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compSequenceElementListParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//SequenceElementList SysML::Expression:
		//	Expression ({SysML::OperatorExpression.operand_comp+=current} operator=',' operand_comp+=SequenceElementList)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression ({SysML::OperatorExpression.operand_comp+=current} operator=',' operand_comp+=SequenceElementList)?
		public Group getGroup() { return cGroup; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=',' operand_comp+=SequenceElementList)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=','
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//','
		public Keyword getOperatorCommaKeyword_1_1_0() { return cOperatorCommaKeyword_1_1_0; }
		
		//operand_comp+=SequenceElementList
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//SequenceElementList
		public RuleCall getOperand_compSequenceElementListParserRuleCall_1_2_0() { return cOperand_compSequenceElementListParserRuleCall_1_2_0; }
	}
	public class NullExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.NullExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullExpression SysML::NullExpression:
		//	{SysML::NullExpression} 'null';
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::NullExpression} 'null'
		public Group getGroup() { return cGroup; }
		
		//{SysML::NullExpression}
		public Action getNullExpressionAction_0() { return cNullExpressionAction_0; }
		
		//'null'
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}
	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.LiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRealLiteralExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnlimitedNaturalLiteralExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// Literal Expressions
		//LiteralExpression SysML::LiteralExpression:
		//	BooleanLiteralExpression | StringLiteralExpression | RealLiteralExpression | UnlimitedNaturalLiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanLiteralExpression | StringLiteralExpression | RealLiteralExpression | UnlimitedNaturalLiteralExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanLiteralExpression
		public RuleCall getBooleanLiteralExpressionParserRuleCall_0() { return cBooleanLiteralExpressionParserRuleCall_0; }
		
		//StringLiteralExpression
		public RuleCall getStringLiteralExpressionParserRuleCall_1() { return cStringLiteralExpressionParserRuleCall_1; }
		
		//RealLiteralExpression
		public RuleCall getRealLiteralExpressionParserRuleCall_2() { return cRealLiteralExpressionParserRuleCall_2; }
		
		//UnlimitedNaturalLiteralExpression
		public RuleCall getUnlimitedNaturalLiteralExpressionParserRuleCall_3() { return cUnlimitedNaturalLiteralExpressionParserRuleCall_3; }
	}
	public class BooleanLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.BooleanLiteralExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanLiteralExpression SysML::LiteralBoolean:
		//	value=BooleanValue;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BooleanValue
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BooleanValue
		public RuleCall getValueBooleanValueParserRuleCall_0() { return cValueBooleanValueParserRuleCall_0; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.BooleanValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BooleanValue Ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class StringLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.StringLiteralExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRING_VALUETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteralExpression SysML::LiteralString:
		//	value=STRING_VALUE;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING_VALUE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING_VALUE
		public RuleCall getValueSTRING_VALUETerminalRuleCall_0() { return cValueSTRING_VALUETerminalRuleCall_0; }
	}
	public class RealLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RealLiteralExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueRealValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//RealLiteralExpression SysML::LiteralReal:
		//	value=RealValue;
		@Override public ParserRule getRule() { return rule; }
		
		//value=RealValue
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//RealValue
		public RuleCall getValueRealValueParserRuleCall_0() { return cValueRealValueParserRuleCall_0; }
	}
	public class RealValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RealValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDECIMAL_VALUETerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final RuleCall cDECIMAL_VALUETerminalRuleCall_0_2_0 = (RuleCall)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cEXP_VALUETerminalRuleCall_0_2_1 = (RuleCall)cAlternatives_0_2.eContents().get(1);
		private final RuleCall cEXP_VALUETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RealValue Ecore::EDouble:
		//	DECIMAL_VALUE? '.' (DECIMAL_VALUE | EXP_VALUE) | EXP_VALUE;
		@Override public ParserRule getRule() { return rule; }
		
		//DECIMAL_VALUE? '.' (DECIMAL_VALUE | EXP_VALUE) | EXP_VALUE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DECIMAL_VALUE? '.' (DECIMAL_VALUE | EXP_VALUE)
		public Group getGroup_0() { return cGroup_0; }
		
		//DECIMAL_VALUE?
		public RuleCall getDECIMAL_VALUETerminalRuleCall_0_0() { return cDECIMAL_VALUETerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//(DECIMAL_VALUE | EXP_VALUE)
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//DECIMAL_VALUE
		public RuleCall getDECIMAL_VALUETerminalRuleCall_0_2_0() { return cDECIMAL_VALUETerminalRuleCall_0_2_0; }
		
		//EXP_VALUE
		public RuleCall getEXP_VALUETerminalRuleCall_0_2_1() { return cEXP_VALUETerminalRuleCall_0_2_1; }
		
		//EXP_VALUE
		public RuleCall getEXP_VALUETerminalRuleCall_1() { return cEXP_VALUETerminalRuleCall_1; }
	}
	public class NaturalLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.NaturalLiteralExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDECIMAL_VALUETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NaturalLiteralExpression SysML::LiteralInteger:
		//	value=DECIMAL_VALUE;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DECIMAL_VALUE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DECIMAL_VALUE
		public RuleCall getValueDECIMAL_VALUETerminalRuleCall_0() { return cValueDECIMAL_VALUETerminalRuleCall_0; }
	}
	public class UnlimitedNaturalLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.UnlimitedNaturalLiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNaturalLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLiteralUnboundedAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//UnlimitedNaturalLiteralExpression SysML::LiteralExpression:
		//	NaturalLiteralExpression | {SysML::LiteralUnbounded} '*';
		@Override public ParserRule getRule() { return rule; }
		
		//NaturalLiteralExpression | {SysML::LiteralUnbounded} '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NaturalLiteralExpression
		public RuleCall getNaturalLiteralExpressionParserRuleCall_0() { return cNaturalLiteralExpressionParserRuleCall_0; }
		
		//{SysML::LiteralUnbounded} '*'
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::LiteralUnbounded}
		public Action getLiteralUnboundedAction_1_0() { return cLiteralUnboundedAction_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}
	public class ExpressionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ExpressionMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compExpressionParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		///* EXPRESSION MEMBERSHIPS */ ExpressionMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=Expression
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//Expression
		public RuleCall getOwnedMemberFeature_compExpressionParserRuleCall_0() { return cOwnedMemberFeature_compExpressionParserRuleCall_0; }
	}
	public class FeatureReferenceMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.FeatureReferenceMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compFeatureReferenceParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//FeatureReferenceMember SysML::ReturnParameterMembership:
		//	ownedMemberFeature_comp=FeatureReference;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=FeatureReference
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//FeatureReference
		public RuleCall getOwnedMemberFeature_compFeatureReferenceParserRuleCall_0() { return cOwnedMemberFeature_compFeatureReferenceParserRuleCall_0; }
	}
	public class TypeReferenceMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TypeReferenceMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compTypeReferenceParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//TypeReferenceMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=TypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=TypeReference
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//TypeReference
		public RuleCall getOwnedMemberFeature_compTypeReferenceParserRuleCall_0() { return cOwnedMemberFeature_compTypeReferenceParserRuleCall_0; }
	}
	public class NamedExpressionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.NamedExpressionMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMemberNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMemberNameNameParserRuleCall_0_0 = (RuleCall)cMemberNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedMemberFeature_compAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedMemberFeature_compExpressionParserRuleCall_2_0 = (RuleCall)cOwnedMemberFeature_compAssignment_2.eContents().get(0);
		
		//NamedExpressionMember SysML::FeatureMembership:
		//	memberName=Name '=>' ownedMemberFeature_comp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//memberName=Name '=>' ownedMemberFeature_comp=Expression
		public Group getGroup() { return cGroup; }
		
		//memberName=Name
		public Assignment getMemberNameAssignment_0() { return cMemberNameAssignment_0; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_0_0() { return cMemberNameNameParserRuleCall_0_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//ownedMemberFeature_comp=Expression
		public Assignment getOwnedMemberFeature_compAssignment_2() { return cOwnedMemberFeature_compAssignment_2; }
		
		//Expression
		public RuleCall getOwnedMemberFeature_compExpressionParserRuleCall_2_0() { return cOwnedMemberFeature_compExpressionParserRuleCall_2_0; }
	}
	public class BodyMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.BodyMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compBodyExpressionParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//BodyMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=BodyExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=BodyExpression
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//BodyExpression
		public RuleCall getOwnedMemberFeature_compBodyExpressionParserRuleCall_0() { return cOwnedMemberFeature_compBodyExpressionParserRuleCall_0; }
	}
	public class BodyParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.BodyParameterMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMemberNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMemberNameNameParserRuleCall_0_0 = (RuleCall)cMemberNameAssignment_0.eContents().get(0);
		private final Assignment cOwnedMemberParameter_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMemberParameter_compBodyParameterParserRuleCall_1_0 = (RuleCall)cOwnedMemberParameter_compAssignment_1.eContents().get(0);
		
		//BodyParameterMember SysML::ParameterMembership:
		//	memberName=Name ownedMemberParameter_comp=BodyParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//memberName=Name ownedMemberParameter_comp=BodyParameter
		public Group getGroup() { return cGroup; }
		
		//memberName=Name
		public Assignment getMemberNameAssignment_0() { return cMemberNameAssignment_0; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_0_0() { return cMemberNameNameParserRuleCall_0_0; }
		
		//ownedMemberParameter_comp=BodyParameter
		public Assignment getOwnedMemberParameter_compAssignment_1() { return cOwnedMemberParameter_compAssignment_1; }
		
		//BodyParameter
		public RuleCall getOwnedMemberParameter_compBodyParameterParserRuleCall_1_0() { return cOwnedMemberParameter_compBodyParameterParserRuleCall_1_0; }
	}
	public class QueryPathExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.QueryPathExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQueryHeadExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cQueryQualifierExpressionOperand_compAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compBodyMemberParserRuleCall_1_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Action cQueryPathStepExpressionOperand_compAction_2_1 = (Action)cGroup_2.eContents().get(1);
		private final Assignment cOperand_compAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cOperand_compQueryNameExpressionParserRuleCall_2_2_0 = (RuleCall)cOperand_compAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Action cQueryQualifierExpressionOperand_compAction_2_3_1 = (Action)cGroup_2_3.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_2_3_2 = (Assignment)cGroup_2_3.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compBodyMemberParserRuleCall_2_3_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_2_3_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3_3 = (Keyword)cGroup_2_3.eContents().get(3);
		
		///* QUERY PATH EXPRESSIONS */ QueryPathExpression SysML::Expression:
		//	QueryHeadExpression ('[' {SysML::QueryQualifierExpression.operand_comp+=current}
		//	ownedFeatureMembership_comp+=BodyMember ']')? ('/' {SysML::QueryPathStepExpression.operand_comp+=current}
		//	operand_comp+=QueryNameExpression ('[' {SysML::QueryQualifierExpression.operand_comp+=current}
		//	ownedFeatureMembership_comp+=BodyMember ']')?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//QueryHeadExpression ('[' {SysML::QueryQualifierExpression.operand_comp+=current} ownedFeatureMembership_comp+=BodyMember
		//']')? ('/' {SysML::QueryPathStepExpression.operand_comp+=current} operand_comp+=QueryNameExpression ('['
		//{SysML::QueryQualifierExpression.operand_comp+=current} ownedFeatureMembership_comp+=BodyMember ']')?)*
		public Group getGroup() { return cGroup; }
		
		//QueryHeadExpression
		public RuleCall getQueryHeadExpressionParserRuleCall_0() { return cQueryHeadExpressionParserRuleCall_0; }
		
		//('[' {SysML::QueryQualifierExpression.operand_comp+=current} ownedFeatureMembership_comp+=BodyMember ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//{SysML::QueryQualifierExpression.operand_comp+=current}
		public Action getQueryQualifierExpressionOperand_compAction_1_1() { return cQueryQualifierExpressionOperand_compAction_1_1; }
		
		//ownedFeatureMembership_comp+=BodyMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_2() { return cOwnedFeatureMembership_compAssignment_1_2; }
		
		//BodyMember
		public RuleCall getOwnedFeatureMembership_compBodyMemberParserRuleCall_1_2_0() { return cOwnedFeatureMembership_compBodyMemberParserRuleCall_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
		
		//('/' {SysML::QueryPathStepExpression.operand_comp+=current} operand_comp+=QueryNameExpression ('['
		//{SysML::QueryQualifierExpression.operand_comp+=current} ownedFeatureMembership_comp+=BodyMember ']')?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'/'
		public Keyword getSolidusKeyword_2_0() { return cSolidusKeyword_2_0; }
		
		//{SysML::QueryPathStepExpression.operand_comp+=current}
		public Action getQueryPathStepExpressionOperand_compAction_2_1() { return cQueryPathStepExpressionOperand_compAction_2_1; }
		
		//operand_comp+=QueryNameExpression
		public Assignment getOperand_compAssignment_2_2() { return cOperand_compAssignment_2_2; }
		
		//QueryNameExpression
		public RuleCall getOperand_compQueryNameExpressionParserRuleCall_2_2_0() { return cOperand_compQueryNameExpressionParserRuleCall_2_2_0; }
		
		//('[' {SysML::QueryQualifierExpression.operand_comp+=current} ownedFeatureMembership_comp+=BodyMember ']')?
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_3_0() { return cLeftSquareBracketKeyword_2_3_0; }
		
		//{SysML::QueryQualifierExpression.operand_comp+=current}
		public Action getQueryQualifierExpressionOperand_compAction_2_3_1() { return cQueryQualifierExpressionOperand_compAction_2_3_1; }
		
		//ownedFeatureMembership_comp+=BodyMember
		public Assignment getOwnedFeatureMembership_compAssignment_2_3_2() { return cOwnedFeatureMembership_compAssignment_2_3_2; }
		
		//BodyMember
		public RuleCall getOwnedFeatureMembership_compBodyMemberParserRuleCall_2_3_2_0() { return cOwnedFeatureMembership_compBodyMemberParserRuleCall_2_3_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_3_3() { return cRightSquareBracketKeyword_2_3_3; }
	}
	public class QueryNameExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.QueryNameExpression");
		private final Assignment cOwnedFeatureMembership_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compFeatureReferenceMemberParserRuleCall_0 = (RuleCall)cOwnedFeatureMembership_compAssignment.eContents().get(0);
		
		//QueryNameExpression SysML::QueryPathExpression:
		//	ownedFeatureMembership_comp+=FeatureReferenceMember;
		@Override public ParserRule getRule() { return rule; }
		
		///* isParent ?= '..'
		//    | isDescendants ?= '/'
		//    | @traversal
		//    */ ownedFeatureMembership_comp+=FeatureReferenceMember
		public Assignment getOwnedFeatureMembership_compAssignment() { return cOwnedFeatureMembership_compAssignment; }
		
		//FeatureReferenceMember
		public RuleCall getOwnedFeatureMembership_compFeatureReferenceMemberParserRuleCall_0() { return cOwnedFeatureMembership_compFeatureReferenceMemberParserRuleCall_0; }
	}
	public class QueryHeadExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.QueryHeadExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compFeatureReferenceMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		
		//QueryHeadExpression SysML::QueryPathExpression:
		//	'./' ownedFeatureMembership_comp+=FeatureReferenceMember;
		@Override public ParserRule getRule() { return rule; }
		
		//'./' ownedFeatureMembership_comp+=FeatureReferenceMember
		public Group getGroup() { return cGroup; }
		
		//'./'
		public Keyword getFullStopSolidusKeyword_0() { return cFullStopSolidusKeyword_0; }
		
		//ownedFeatureMembership_comp+=FeatureReferenceMember
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//FeatureReferenceMember
		public RuleCall getOwnedFeatureMembership_compFeatureReferenceMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compFeatureReferenceMemberParserRuleCall_1_0; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUNRESTRICTED_NAMETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* NAMES */ Name:
		//	ID | UNRESTRICTED_NAME;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | UNRESTRICTED_NAME
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//UNRESTRICTED_NAME
		public RuleCall getUNRESTRICTED_NAMETerminalRuleCall_1() { return cUNRESTRICTED_NAMETerminalRuleCall_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.QualifiedName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColonQualifiedNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDotQualifiedNameParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//QualifiedName:
		//	Name | ColonQualifiedName | DotQualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//Name | ColonQualifiedName | DotQualifiedName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//ColonQualifiedName
		public RuleCall getColonQualifiedNameParserRuleCall_1() { return cColonQualifiedNameParserRuleCall_1; }
		
		//DotQualifiedName
		public RuleCall getDotQualifiedNameParserRuleCall_2() { return cDotQualifiedNameParserRuleCall_2; }
	}
	public class ColonQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ColonQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ColonQualifiedName:
		//	Name ('::' Name)+;
		@Override public ParserRule getRule() { return rule; }
		
		//Name ('::' Name)+
		public Group getGroup() { return cGroup; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//('::' Name)+
		public Group getGroup_1() { return cGroup_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }
		
		//Name
		public RuleCall getNameParserRuleCall_1_1() { return cNameParserRuleCall_1_1; }
	}
	public class DotQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.DotQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//DotQualifiedName:
		//	Name ('.' Name)+;
		@Override public ParserRule getRule() { return rule; }
		
		//Name ('.' Name)+
		public Group getGroup() { return cGroup; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//('.' Name)+
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//Name
		public RuleCall getNameParserRuleCall_1_1() { return cNameParserRuleCall_1_1; }
	}
	
	public class PackageElementVisibilityIndicatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.PackageElementVisibilityIndicator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_0 = (Keyword)cPrivateEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum PackageElementVisibilityIndicator returns SysML::VisibilityKind:
		//	public | private;
		public EnumRule getRule() { return rule; }
		
		//public | private
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }
		
		//'public'
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }
		
		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_1() { return cPrivateEnumLiteralDeclaration_1; }
		
		//'private'
		public Keyword getPrivatePrivateKeyword_1_0() { return cPrivatePrivateKeyword_1_0; }
	}
	public class VisibilityIndicatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.VisibilityIndicator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_0 = (Keyword)cPrivateEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cProtectedProtectedKeyword_2_0 = (Keyword)cProtectedEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum VisibilityIndicator returns SysML::VisibilityKind:
		//	public | private | protected;
		public EnumRule getRule() { return rule; }
		
		//public | private | protected
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }
		
		//'public'
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }
		
		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_1() { return cPrivateEnumLiteralDeclaration_1; }
		
		//'private'
		public Keyword getPrivatePrivateKeyword_1_0() { return cPrivatePrivateKeyword_1_0; }
		
		//protected
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_2() { return cProtectedEnumLiteralDeclaration_2; }
		
		//'protected'
		public Keyword getProtectedProtectedKeyword_2_0() { return cProtectedProtectedKeyword_2_0; }
	}
	public class FeatureDirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.FeatureDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInInKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOutOutKeyword_1_0 = (Keyword)cOutEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInoutEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInoutInoutKeyword_2_0 = (Keyword)cInoutEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum FeatureDirection returns SysML::FeatureDirectionKind:
		//	in | out | inout;
		public EnumRule getRule() { return rule; }
		
		//in | out | inout
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }
		
		//'in'
		public Keyword getInInKeyword_0_0() { return cInInKeyword_0_0; }
		
		//out
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration_1() { return cOutEnumLiteralDeclaration_1; }
		
		//'out'
		public Keyword getOutOutKeyword_1_0() { return cOutOutKeyword_1_0; }
		
		//inout
		public EnumLiteralDeclaration getInoutEnumLiteralDeclaration_2() { return cInoutEnumLiteralDeclaration_2; }
		
		//'inout'
		public Keyword getInoutInoutKeyword_2_0() { return cInoutInoutKeyword_2_0; }
	}
	public class RequirementConstraintKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.RequirementConstraintKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAssumptionEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAssumptionAssumeKeyword_0_0 = (Keyword)cAssumptionEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRequirementEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRequirementRequireKeyword_1_0 = (Keyword)cRequirementEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum RequirementConstraintKind returns SysML::RequirementConstraintKind:
		//	assumption='assume' | requirement='require';
		public EnumRule getRule() { return rule; }
		
		//assumption='assume' | requirement='require'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//assumption='assume'
		public EnumLiteralDeclaration getAssumptionEnumLiteralDeclaration_0() { return cAssumptionEnumLiteralDeclaration_0; }
		
		//'assume'
		public Keyword getAssumptionAssumeKeyword_0_0() { return cAssumptionAssumeKeyword_0_0; }
		
		//requirement='require'
		public EnumLiteralDeclaration getRequirementEnumLiteralDeclaration_1() { return cRequirementEnumLiteralDeclaration_1; }
		
		//'require'
		public Keyword getRequirementRequireKeyword_1_0() { return cRequirementRequireKeyword_1_0; }
	}
	public class TriggerFeatureKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.TriggerFeatureKind");
		private final EnumLiteralDeclaration cTriggerEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cTriggerAcceptKeyword_0 = (Keyword)cTriggerEnumLiteralDeclaration.eContents().get(0);
		
		//enum TriggerFeatureKind returns SysML::TransitionFeatureKind:
		//	trigger='accept';
		public EnumRule getRule() { return rule; }
		
		//trigger='accept'
		public EnumLiteralDeclaration getTriggerEnumLiteralDeclaration() { return cTriggerEnumLiteralDeclaration; }
		
		//'accept'
		public Keyword getTriggerAcceptKeyword_0() { return cTriggerAcceptKeyword_0; }
	}
	public class GuardFeatureKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.GuardFeatureKind");
		private final EnumLiteralDeclaration cGuardEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cGuardIfKeyword_0 = (Keyword)cGuardEnumLiteralDeclaration.eContents().get(0);
		
		//enum GuardFeatureKind returns SysML::TransitionFeatureKind:
		//	guard='if';
		public EnumRule getRule() { return rule; }
		
		//guard='if'
		public EnumLiteralDeclaration getGuardEnumLiteralDeclaration() { return cGuardEnumLiteralDeclaration; }
		
		//'if'
		public Keyword getGuardIfKeyword_0() { return cGuardIfKeyword_0; }
	}
	public class EffectFeatureKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EffectFeatureKind");
		private final EnumLiteralDeclaration cEffectEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cEffectDoKeyword_0 = (Keyword)cEffectEnumLiteralDeclaration.eContents().get(0);
		
		//enum EffectFeatureKind returns SysML::TransitionFeatureKind:
		//	effect='do';
		public EnumRule getRule() { return rule; }
		
		//effect='do'
		public EnumLiteralDeclaration getEffectEnumLiteralDeclaration() { return cEffectEnumLiteralDeclaration; }
		
		//'do'
		public Keyword getEffectDoKeyword_0() { return cEffectDoKeyword_0; }
	}
	
	private final UnitElements pUnit;
	private final AnonymousPackageElements pAnonymousPackage;
	private final PackageUnitElements pPackageUnit;
	private final AttributeDefinitionUnitElements pAttributeDefinitionUnit;
	private final ItemDefinitionUnitElements pItemDefinitionUnit;
	private final PartDefinitionUnitElements pPartDefinitionUnit;
	private final IndividualDefinitionUnitElements pIndividualDefinitionUnit;
	private final ConnectionDefinitionUnitElements pConnectionDefinitionUnit;
	private final InterfaceDefinitionUnitElements pInterfaceDefinitionUnit;
	private final ActionDefinitionUnitElements pActionDefinitionUnit;
	private final CalculationDefinitionUnitElements pCalculationDefinitionUnit;
	private final StateDefinitionUnitElements pStateDefinitionUnit;
	private final ConstraintDefinitionUnitElements pConstraintDefinitionUnit;
	private final RequirementDefinitionUnitElements pRequirementDefinitionUnit;
	private final CaseDefinitionUnitElements pCaseDefinitionUnit;
	private final AnalysisCaseDefinitionUnitElements pAnalysisCaseDefinitionUnit;
	private final VerificationCaseDefinitionUnitElements pVerificationCaseDefinitionUnit;
	private final ViewDefinitionUnitElements pViewDefinitionUnit;
	private final ViewpointDefinitionUnitElements pViewpointDefinitionUnit;
	private final RenderingDefinitionUnitElements pRenderingDefinitionUnit;
	private final AttributeUnitElements pAttributeUnit;
	private final ItemUnitElements pItemUnit;
	private final PartUnitElements pPartUnit;
	private final ActionUnitElements pActionUnit;
	private final CalculationUnitElements pCalculationUnit;
	private final StateUnitElements pStateUnit;
	private final ConstraintUnitElements pConstraintUnit;
	private final RequirementUnitElements pRequirementUnit;
	private final CaseUnitElements pCaseUnit;
	private final AnalysisCaseUnitElements pAnalysisCaseUnit;
	private final VerificationCaseUnitElements pVerificationCaseUnit;
	private final ViewUnitElements pViewUnit;
	private final ViewpointUnitElements pViewpointUnit;
	private final RenderingUnitElements pRenderingUnit;
	private final UnitPrefixElements pUnitPrefix;
	private final IdentificationElements pIdentification;
	private final PackageElementVisibilityIndicatorElements ePackageElementVisibilityIndicator;
	private final VisibilityIndicatorElements eVisibilityIndicator;
	private final AnnotationElements pAnnotation;
	private final EmptyAnnotationElements pEmptyAnnotation;
	private final PrefixAnnotationElements pPrefixAnnotation;
	private final CommentElements pComment;
	private final DocumentationElements pDocumentation;
	private final OwnedDocumentationElements pOwnedDocumentation;
	private final DocumentationCommentElements pDocumentationComment;
	private final TextualRepresentationElements pTextualRepresentation;
	private final ImportElements pImport;
	private final PackageElements pPackage;
	private final PackageDeclarationElements pPackageDeclaration;
	private final PackageBodyElements pPackageBody;
	private final PackagedDefinitionElementElements pPackagedDefinitionElement;
	private final PackagedUsageElementElements pPackagedUsageElement;
	private final PackageMemberElements pPackageMember;
	private final PackagedDefinitionMemberElements pPackagedDefinitionMember;
	private final PackagedUsageMemberElements pPackagedUsageMember;
	private final PackageMemberPrefixElements pPackageMemberPrefix;
	private final DependencyElements pDependency;
	private final DefinitionPrefixElements pDefinitionPrefix;
	private final DefinitionBodyElements pDefinitionBody;
	private final DefinitionBodyItemElements pDefinitionBodyItem;
	private final DirectionalStructureUsageElementElements pDirectionalStructureUsageElement;
	private final NondirectionalStructureUsageElementElements pNondirectionalStructureUsageElement;
	private final IndividualUsageElementElements pIndividualUsageElement;
	private final DirectionalBehaviorUsageElementElements pDirectionalBehaviorUsageElement;
	private final NondirectionalBehaviorUsageElementElements pNondirectionalBehaviorUsageElement;
	private final VariantUsageElementElements pVariantUsageElement;
	private final NestedDefinitionMemberElements pNestedDefinitionMember;
	private final VariantUsageMemberElements pVariantUsageMember;
	private final NestedUsageMemberElements pNestedUsageMember;
	private final StructureUsageMemberElements pStructureUsageMember;
	private final IndividualUsageMemberElements pIndividualUsageMember;
	private final BehaviorUsageMemberElements pBehaviorUsageMember;
	private final DefinitionMemberPrefixElements pDefinitionMemberPrefix;
	private final FeatureDirectionElements eFeatureDirection;
	private final ClassifierDeclarationCompletionElements pClassifierDeclarationCompletion;
	private final SuperclassingListElements pSuperclassingList;
	private final SpecializesKeywordElements pSpecializesKeyword;
	private final SuperclassingElements pSuperclassing;
	private final AttributeKeywordElements pAttributeKeyword;
	private final AttributeDefKeywordElements pAttributeDefKeyword;
	private final AttributeDefinitionElements pAttributeDefinition;
	private final AttributeDefDeclarationElements pAttributeDefDeclaration;
	private final ItemKeywordElements pItemKeyword;
	private final ItemDefKeywordElements pItemDefKeyword;
	private final ItemDefinitionElements pItemDefinition;
	private final ItemDefDeclarationElements pItemDefDeclaration;
	private final PartKeywordElements pPartKeyword;
	private final PartDefKeywordElements pPartDefKeyword;
	private final PartDefinitionElements pPartDefinition;
	private final PartDefDeclarationElements pPartDefDeclaration;
	private final IndividualKeywordElements pIndividualKeyword;
	private final IndividualDefKeywordElements pIndividualDefKeyword;
	private final IndividualDefinitionElements pIndividualDefinition;
	private final IndividualDefDeclarationElements pIndividualDefDeclaration;
	private final LifeClassElements pLifeClass;
	private final LifeClassMembershipElements pLifeClassMembership;
	private final PortKeywordElements pPortKeyword;
	private final PortDefKeywordElements pPortDefKeyword;
	private final PortDefinitionElements pPortDefinition;
	private final PortDefDeclarationElements pPortDefDeclaration;
	private final ConjugatedPortDefinitionElements pConjugatedPortDefinition;
	private final PortConjugationElements pPortConjugation;
	private final ConjugatedPortDefinitionMemberElements pConjugatedPortDefinitionMember;
	private final ConnectionKeywordElements pConnectionKeyword;
	private final ConnectionDefKeywordElements pConnectionDefKeyword;
	private final ConnectionDefinitionElements pConnectionDefinition;
	private final ConnectionDefDeclarationElements pConnectionDefDeclaration;
	private final ConnectionDefBodyElements pConnectionDefBody;
	private final ConnectionEndElementElements pConnectionEndElement;
	private final ConnectionUsageMemberElements pConnectionUsageMember;
	private final ConnectionEndMemberElements pConnectionEndMember;
	private final InterfaceKeywordElements pInterfaceKeyword;
	private final InterfaceDefKeywordElements pInterfaceDefKeyword;
	private final InterfaceDefinitionElements pInterfaceDefinition;
	private final InterfaceDefDeclarationElements pInterfaceDefDeclaration;
	private final InterfaceDefBodyElements pInterfaceDefBody;
	private final InterfaceUsageMemberElements pInterfaceUsageMember;
	private final InterfaceEndMemberElements pInterfaceEndMember;
	private final ActionKeywordElements pActionKeyword;
	private final ActionDefKeywordElements pActionDefKeyword;
	private final ActionDefinitionElements pActionDefinition;
	private final ActionDefDeclarationElements pActionDefDeclaration;
	private final ParameterListElements pParameterList;
	private final ActionDefBodyElements pActionDefBody;
	private final ActionDefBodyItemElements pActionDefBodyItem;
	private final ParameterMemberElements pParameterMember;
	private final InitialNodeMemberElements pInitialNodeMember;
	private final ActionNodeMemberElements pActionNodeMember;
	private final TargetSuccessionMemberElements pTargetSuccessionMember;
	private final GuardedSuccessionMemberElements pGuardedSuccessionMember;
	private final CalculationKeywordElements pCalculationKeyword;
	private final CalculationDefKeywordElements pCalculationDefKeyword;
	private final CalculationDefinitionElements pCalculationDefinition;
	private final CalculationDefDeclarationElements pCalculationDefDeclaration;
	private final ParameterPartElements pParameterPart;
	private final ReturnParameterPartElements pReturnParameterPart;
	private final EmptyReturnParameterPartElements pEmptyReturnParameterPart;
	private final EmptyParameterElements pEmptyParameter;
	private final CalculationDefBodyElements pCalculationDefBody;
	private final CalculationDefBodyItemElements pCalculationDefBodyItem;
	private final ReturnParameterMemberElements pReturnParameterMember;
	private final EmptyReturnParameterMemberElements pEmptyReturnParameterMember;
	private final StateKeywordElements pStateKeyword;
	private final StateDefKeywordElements pStateDefKeyword;
	private final StateDefinitionElements pStateDefinition;
	private final StateDefDeclarationElements pStateDefDeclaration;
	private final StateDefBodyElements pStateDefBody;
	private final StateDefBodyPartElements pStateDefBodyPart;
	private final StateDefBodyItemElements pStateDefBodyItem;
	private final StateActionUsageElements pStateActionUsage;
	private final PerformedActionUsageElements pPerformedActionUsage;
	private final EmptyActionUsageElements pEmptyActionUsage;
	private final EntryActionMemberElements pEntryActionMember;
	private final EntryActionKindElements pEntryActionKind;
	private final DoActionMemberElements pDoActionMember;
	private final DoActionKindElements pDoActionKind;
	private final ExitActionMemberElements pExitActionMember;
	private final ExitActionKindElements pExitActionKind;
	private final EntryTransitionMemberElements pEntryTransitionMember;
	private final TargetTransitionSuccessionMemberElements pTargetTransitionSuccessionMember;
	private final TransitionStepMemberElements pTransitionStepMember;
	private final ConstraintKeywordElements pConstraintKeyword;
	private final ConstraintDefKeywordElements pConstraintDefKeyword;
	private final ConstraintDefinitionElements pConstraintDefinition;
	private final ConstraintDefDeclarationElements pConstraintDefDeclaration;
	private final ConstraintDefBodyElements pConstraintDefBody;
	private final ConstraintDefMembersElements pConstraintDefMembers;
	private final ConstraintExpressionMemberElements pConstraintExpressionMember;
	private final RequirementKeywordElements pRequirementKeyword;
	private final RequirementDefKeywordElements pRequirementDefKeyword;
	private final RequirementDefinitionElements pRequirementDefinition;
	private final RequirementDefDeclarationElements pRequirementDefDeclaration;
	private final RequirementDefBodyElements pRequirementDefBody;
	private final RequirementDefBodyItemElements pRequirementDefBodyItem;
	private final SubjectUsageElements pSubjectUsage;
	private final RequirementConstraintUsageElements pRequirementConstraintUsage;
	private final SubjectMemberElements pSubjectMember;
	private final RequirementConstraintMemberElements pRequirementConstraintMember;
	private final RequirementConstraintKindElements eRequirementConstraintKind;
	private final CaseKeywordElements pCaseKeyword;
	private final CaseDefKeywordElements pCaseDefKeyword;
	private final CaseDefinitionElements pCaseDefinition;
	private final CaseDefDeclarationElements pCaseDefDeclaration;
	private final CaseDefBodyElements pCaseDefBody;
	private final CaseDefBodyItemElements pCaseDefBodyItem;
	private final ObjectiveRequirementUsageElements pObjectiveRequirementUsage;
	private final ObjectiveMemberElements pObjectiveMember;
	private final AnalysisCaseKeywordElements pAnalysisCaseKeyword;
	private final AnalysisCaseDefKeywordElements pAnalysisCaseDefKeyword;
	private final AnalysisCaseDefinitionElements pAnalysisCaseDefinition;
	private final AnalysisCaseDefDeclarationElements pAnalysisCaseDefDeclaration;
	private final VerificationCaseKeywordElements pVerificationCaseKeyword;
	private final VerificationCaseDefKeywordElements pVerificationCaseDefKeyword;
	private final VerificationCaseDefinitionElements pVerificationCaseDefinition;
	private final VerificationCaseDefDeclarationElements pVerificationCaseDefDeclaration;
	private final ViewKeywordElements pViewKeyword;
	private final ViewDefKeywordElements pViewDefKeyword;
	private final ViewDefinitionElements pViewDefinition;
	private final ViewDefDeclarationElements pViewDefDeclaration;
	private final ViewpointKeywordElements pViewpointKeyword;
	private final ViewpointDefKeywordElements pViewpointDefKeyword;
	private final ViewpointDefinitionElements pViewpointDefinition;
	private final ViewpointDefDeclarationElements pViewpointDefDeclaration;
	private final RenderingKeywordElements pRenderingKeyword;
	private final RenderingDefKeywordElements pRenderingDefKeyword;
	private final RenderingDefinitionElements pRenderingDefinition;
	private final RenderingDefDeclarationElements pRenderingDefDeclaration;
	private final UsagePrefixElements pUsagePrefix;
	private final UsageElements pUsage;
	private final UsageDeclarationElements pUsageDeclaration;
	private final UsageSpecializationPartElements pUsageSpecializationPart;
	private final MultiplicityPartElements pMultiplicityPart;
	private final MultiplicityElements pMultiplicity;
	private final UsageSpecializationElements pUsageSpecialization;
	private final TypingsElements pTypings;
	private final DefinedByElements pDefinedBy;
	private final DefinedByKeywordElements pDefinedByKeyword;
	private final FeatureTypingElements pFeatureTyping;
	private final SubsettingPartElements pSubsettingPart;
	private final SubsettingsElements pSubsettings;
	private final SubsetsElements pSubsets;
	private final SubsetsKeywordElements pSubsetsKeyword;
	private final SubsetElements pSubset;
	private final RedefinitionsElements pRedefinitions;
	private final RedefinesElements pRedefines;
	private final RedefinesKeywordElements pRedefinesKeyword;
	private final RedefinitionElements pRedefinition;
	private final UsageCompletionElements pUsageCompletion;
	private final ValuePartElements pValuePart;
	private final FeatureValueElements pFeatureValue;
	private final MultiplicityMemberElements pMultiplicityMember;
	private final NaturalLiteralMemberElements pNaturalLiteralMember;
	private final UnlimitedNaturalLiteralMemberElements pUnlimitedNaturalLiteralMember;
	private final ParameterElements pParameter;
	private final ParameterDeclarationElements pParameterDeclaration;
	private final ParameterSpecializationPartElements pParameterSpecializationPart;
	private final ParameterSpecializationElements pParameterSpecialization;
	private final ReferenceKeywordElements pReferenceKeyword;
	private final ReferenceUsageKeywordElements pReferenceUsageKeyword;
	private final ReferenceUsageElements pReferenceUsage;
	private final ReferenceEndUsageElements pReferenceEndUsage;
	private final ReferenceVariantUsageElements pReferenceVariantUsage;
	private final AttributeUsageKeywordElements pAttributeUsageKeyword;
	private final AttributeDeclarationElements pAttributeDeclaration;
	private final AttributeUsageElements pAttributeUsage;
	private final AttributeVariantUsageElements pAttributeVariantUsage;
	private final ItemUsageKeywordElements pItemUsageKeyword;
	private final ItemDeclarationElements pItemDeclaration;
	private final ItemUsageElements pItemUsage;
	private final ItemRefUsageElements pItemRefUsage;
	private final PartUsageKeywordElements pPartUsageKeyword;
	private final PartDeclarationElements pPartDeclaration;
	private final PartUsageElements pPartUsage;
	private final PartRefUsageElements pPartRefUsage;
	private final IndividualUsageKeywordElements pIndividualUsageKeyword;
	private final TimeSliceKeywordElements pTimeSliceKeyword;
	private final SnapshotKeywordElements pSnapshotKeyword;
	private final IndividualUsageElements pIndividualUsage;
	private final IndividualRefUsageElements pIndividualRefUsage;
	private final TimeSliceUsageElements pTimeSliceUsage;
	private final TimeSliceRefUsageElements pTimeSliceRefUsage;
	private final TimeSliceFeatureElements pTimeSliceFeature;
	private final SnapshotUsageElements pSnapshotUsage;
	private final SnapshotRefUsageElements pSnapshotRefUsage;
	private final SnapshotFeatureElements pSnapshotFeature;
	private final TimeSliceFeatureMemberElements pTimeSliceFeatureMember;
	private final SnapshotFeatureMemberElements pSnapshotFeatureMember;
	private final PortUsageKeywordElements pPortUsageKeyword;
	private final PortUsageElements pPortUsage;
	private final PortEndUsageElements pPortEndUsage;
	private final PortUsageDeclarationElements pPortUsageDeclaration;
	private final PortTypePartElements pPortTypePart;
	private final ConjugatedPortTypingElements pConjugatedPortTyping;
	private final ConnectorKeywordElements pConnectorKeyword;
	private final ConnectorElements pConnector;
	private final ConnectionUsageKeywordElements pConnectionUsageKeyword;
	private final ConnectionUsageElements pConnectionUsage;
	private final ConnectorPartElements pConnectorPart;
	private final ConnectorEndElements pConnectorEnd;
	private final MultiplicitySourceEndElements pMultiplicitySourceEnd;
	private final EmptySourceEndElements pEmptySourceEnd;
	private final EmptyTargetEndElements pEmptyTargetEnd;
	private final ConnectorEndMemberElements pConnectorEndMember;
	private final MultiplicitySourceEndMemberElements pMultiplicitySourceEndMember;
	private final EmptySourceEndMemberElements pEmptySourceEndMember;
	private final EmptyTargetEndMemberElements pEmptyTargetEndMember;
	private final InterfaceUsageKeywordElements pInterfaceUsageKeyword;
	private final InterfaceUsageElements pInterfaceUsage;
	private final InterfaceUsageDeclarationElements pInterfaceUsageDeclaration;
	private final BindingKeywordElements pBindingKeyword;
	private final BindingConnectorElements pBindingConnector;
	private final SuccessionKeywordElements pSuccessionKeyword;
	private final SuccessionElements pSuccession;
	private final SuccessionDeclarationElements pSuccessionDeclaration;
	private final TargetSuccessionElements pTargetSuccession;
	private final EmptySuccessionElements pEmptySuccession;
	private final GuardedSuccessionElements pGuardedSuccession;
	private final GuardedTargetSuccessionElements pGuardedTargetSuccession;
	private final DefaultTargetSuccessionElements pDefaultTargetSuccession;
	private final ItemFlowKeywordElements pItemFlowKeyword;
	private final ItemFlowElements pItemFlow;
	private final SuccessionItemFlowKeywordElements pSuccessionItemFlowKeyword;
	private final SuccessionItemFlowElements pSuccessionItemFlow;
	private final ItemFlowDeclarationElements pItemFlowDeclaration;
	private final ItemFeatureTypingElements pItemFeatureTyping;
	private final EmptyItemFeatureElements pEmptyItemFeature;
	private final ItemFlowEndElements pItemFlowEnd;
	private final ItemFlowFeatureElements pItemFlowFeature;
	private final ItemFeatureMemberElements pItemFeatureMember;
	private final ItemFlowEndMemberElements pItemFlowEndMember;
	private final ItemFlowFeatureMemberElements pItemFlowFeatureMember;
	private final EmptyItemFeatureMemberElements pEmptyItemFeatureMember;
	private final ActionUsageKeywordElements pActionUsageKeyword;
	private final ActionDeclarationElements pActionDeclaration;
	private final ActionUsageElements pActionUsage;
	private final ActionRefUsageElements pActionRefUsage;
	private final ActionUsageDeclarationElements pActionUsageDeclaration;
	private final ActionParameterListElements pActionParameterList;
	private final ActionArgumentElements pActionArgument;
	private final ActionParameterElements pActionParameter;
	private final ActionParameterFlowElements pActionParameterFlow;
	private final PerformActionUsageElements pPerformActionUsage;
	private final PerformActionUsageDeclarationElements pPerformActionUsageDeclaration;
	private final ActionNodeElements pActionNode;
	private final AcceptNodeElements pAcceptNode;
	private final AcceptNodeDeclarationElements pAcceptNodeDeclaration;
	private final SendNodeElements pSendNode;
	private final SendNodeDeclarationElements pSendNodeDeclaration;
	private final ControlNodeElements pControlNode;
	private final MergeNodeElements pMergeNode;
	private final DecisionNodeElements pDecisionNode;
	private final JoinNodeElements pJoinNode;
	private final ForkNodeElements pForkNode;
	private final ActionParameterMemberElements pActionParameterMember;
	private final ActionParameterFlowMemberElements pActionParameterFlowMember;
	private final EmptySuccessionMemberElements pEmptySuccessionMember;
	private final DirectionParameterMemberElements pDirectionParameterMember;
	private final EmptyParameterMemberElements pEmptyParameterMember;
	private final CalculationUsageKeywordElements pCalculationUsageKeyword;
	private final CalculationDeclarationElements pCalculationDeclaration;
	private final CalculationUsageElements pCalculationUsage;
	private final CalculationRefUsageElements pCalculationRefUsage;
	private final CalculationUsageDeclarationElements pCalculationUsageDeclaration;
	private final CalculationParameterPartElements pCalculationParameterPart;
	private final CalculationReturnParameterPartElements pCalculationReturnParameterPart;
	private final CalculationReturnParameterMemberElements pCalculationReturnParameterMember;
	private final StateUsageKeywordElements pStateUsageKeyword;
	private final StateDeclarationElements pStateDeclaration;
	private final StateUsageElements pStateUsage;
	private final StateRefUsageElements pStateRefUsage;
	private final ExhibitStateUsageElements pExhibitStateUsage;
	private final TransitionUsageKeywordElements pTransitionUsageKeyword;
	private final TransitionStepElements pTransitionStep;
	private final TargetTransitionStepElements pTargetTransitionStep;
	private final TriggerStepElements pTriggerStep;
	private final EffectBehaviorUsageElements pEffectBehaviorUsage;
	private final TransitionSuccessionElements pTransitionSuccession;
	private final TransitionSourceMemberElements pTransitionSourceMember;
	private final TransitionSuccessionMemberElements pTransitionSuccessionMember;
	private final TriggerStepMemberElements pTriggerStepMember;
	private final TriggerFeatureKindElements eTriggerFeatureKind;
	private final GuardExpressionMemberElements pGuardExpressionMember;
	private final GuardFeatureKindElements eGuardFeatureKind;
	private final EffectBehaviorMemberElements pEffectBehaviorMember;
	private final EffectFeatureKindElements eEffectFeatureKind;
	private final ConstraintUsageKeywordElements pConstraintUsageKeyword;
	private final ConstraintDeclarationElements pConstraintDeclaration;
	private final ConstraintUsageElements pConstraintUsage;
	private final ConstraintRefUsageElements pConstraintRefUsage;
	private final ConstraintUsageDeclarationElements pConstraintUsageDeclaration;
	private final ConstraintParameterPartElements pConstraintParameterPart;
	private final AssertConstraintUsageElements pAssertConstraintUsage;
	private final InvariantPartElements pInvariantPart;
	private final TrueLiteralExpressionElements pTrueLiteralExpression;
	private final TrueLiteralMemberElements pTrueLiteralMember;
	private final RequirementUsageKeywordElements pRequirementUsageKeyword;
	private final RequirementDeclarationElements pRequirementDeclaration;
	private final RequirementUsageElements pRequirementUsage;
	private final RequirementRefUsageElements pRequirementRefUsage;
	private final RequirementUsageDeclarationElements pRequirementUsageDeclaration;
	private final SatisfyRequirementUsageElements pSatisfyRequirementUsage;
	private final SatisfactionConnectorElements pSatisfactionConnector;
	private final SatisfactionConnectorMemberElements pSatisfactionConnectorMember;
	private final CaseUsageKeywordElements pCaseUsageKeyword;
	private final CaseDeclarationElements pCaseDeclaration;
	private final CaseUsageElements pCaseUsage;
	private final CaseRefUsageElements pCaseRefUsage;
	private final AnalysisCaseUsageKeywordElements pAnalysisCaseUsageKeyword;
	private final AnalysisCaseDeclarationElements pAnalysisCaseDeclaration;
	private final AnalysisCaseUsageElements pAnalysisCaseUsage;
	private final AnalysisCaseRefUsageElements pAnalysisCaseRefUsage;
	private final VerificationCaseUsageKeywordElements pVerificationCaseUsageKeyword;
	private final VerificationCaseDeclarationElements pVerificationCaseDeclaration;
	private final VerificationCaseUsageElements pVerificationCaseUsage;
	private final VerificationCaseRefUsageElements pVerificationCaseRefUsage;
	private final ViewUsageKeywordElements pViewUsageKeyword;
	private final ViewDeclarationElements pViewDeclaration;
	private final ViewUsageElements pViewUsage;
	private final ViewRefUsageElements pViewRefUsage;
	private final ViewBodyElements pViewBody;
	private final ViewBodyItemElements pViewBodyItem;
	private final ExposeElements pExpose;
	private final ViewpointUsageKeywordElements pViewpointUsageKeyword;
	private final ViewpointDeclarationElements pViewpointDeclaration;
	private final ViewpointUsageElements pViewpointUsage;
	private final ViewpointRefUsageElements pViewpointRefUsage;
	private final RenderingUsageKeywordElements pRenderingUsageKeyword;
	private final RenderingDeclarationElements pRenderingDeclaration;
	private final RenderingUsageElements pRenderingUsage;
	private final RenderingRefUsageElements pRenderingRefUsage;
	private final ExpressionElements pExpression;
	private final ConditionalExpressionElements pConditionalExpression;
	private final ConditionalTestOperatorElements pConditionalTestOperator;
	private final NullCoalescingExpressionElements pNullCoalescingExpression;
	private final NullCoalescingOperatorElements pNullCoalescingOperator;
	private final ConditionalOrExpressionElements pConditionalOrExpression;
	private final ConditionalOrOperatorElements pConditionalOrOperator;
	private final ConditionalAndExpressionElements pConditionalAndExpression;
	private final ConditionalAndOperatorElements pConditionalAndOperator;
	private final OrExpressionElements pOrExpression;
	private final OrOperatorElements pOrOperator;
	private final XorExpressionElements pXorExpression;
	private final XorOperatorElements pXorOperator;
	private final AndExpressionElements pAndExpression;
	private final AndOperatorElements pAndOperator;
	private final EqualityExpressionElements pEqualityExpression;
	private final EqualityOperatorElements pEqualityOperator;
	private final ClassificationExpressionElements pClassificationExpression;
	private final ClassificationOperatorElements pClassificationOperator;
	private final RelationalExpressionElements pRelationalExpression;
	private final RelationalOperatorElements pRelationalOperator;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final AdditiveOperatorElements pAdditiveOperator;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final MultiplicativeOperatorElements pMultiplicativeOperator;
	private final ExponentiationExpressionElements pExponentiationExpression;
	private final ExponentiationOperatorElements pExponentiationOperator;
	private final UnitsExpressionElements pUnitsExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final UnaryOperatorElements pUnaryOperator;
	private final SequenceAccessExpressionElements pSequenceAccessExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final BodyExpressionElements pBodyExpression;
	private final BodyParameterElements pBodyParameter;
	private final ExpressionTypingElements pExpressionTyping;
	private final BaseExpressionElements pBaseExpression;
	private final FeatureReferenceExpressionElements pFeatureReferenceExpression;
	private final FeatureReferenceElements pFeatureReference;
	private final InvocationExpressionElements pInvocationExpression;
	private final TupleElements pTuple;
	private final PositionalTupleElements pPositionalTuple;
	private final NamedTupleElements pNamedTuple;
	private final ExtentExpressionElements pExtentExpression;
	private final TypeReferenceElements pTypeReference;
	private final SequenceConstructionExpressionElements pSequenceConstructionExpression;
	private final SequenceElementListElements pSequenceElementList;
	private final NullExpressionElements pNullExpression;
	private final LiteralExpressionElements pLiteralExpression;
	private final BooleanLiteralExpressionElements pBooleanLiteralExpression;
	private final BooleanValueElements pBooleanValue;
	private final StringLiteralExpressionElements pStringLiteralExpression;
	private final RealLiteralExpressionElements pRealLiteralExpression;
	private final RealValueElements pRealValue;
	private final NaturalLiteralExpressionElements pNaturalLiteralExpression;
	private final UnlimitedNaturalLiteralExpressionElements pUnlimitedNaturalLiteralExpression;
	private final ExpressionMemberElements pExpressionMember;
	private final FeatureReferenceMemberElements pFeatureReferenceMember;
	private final TypeReferenceMemberElements pTypeReferenceMember;
	private final NamedExpressionMemberElements pNamedExpressionMember;
	private final BodyMemberElements pBodyMember;
	private final BodyParameterMemberElements pBodyParameterMember;
	private final QueryPathExpressionElements pQueryPathExpression;
	private final QueryNameExpressionElements pQueryNameExpression;
	private final QueryHeadExpressionElements pQueryHeadExpression;
	private final NameElements pName;
	private final QualifiedNameElements pQualifiedName;
	private final ColonQualifiedNameElements pColonQualifiedName;
	private final DotQualifiedNameElements pDotQualifiedName;
	private final TerminalRule tDECIMAL_VALUE;
	private final TerminalRule tEXP_VALUE;
	private final TerminalRule tID;
	private final TerminalRule tUNRESTRICTED_NAME;
	private final TerminalRule tSTRING_VALUE;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tDOCUMENTATION_COMMENT;
	private final TerminalRule tML_NOTE;
	private final TerminalRule tSL_NOTE;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public SysMLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pUnit = new UnitElements();
		this.pAnonymousPackage = new AnonymousPackageElements();
		this.pPackageUnit = new PackageUnitElements();
		this.pAttributeDefinitionUnit = new AttributeDefinitionUnitElements();
		this.pItemDefinitionUnit = new ItemDefinitionUnitElements();
		this.pPartDefinitionUnit = new PartDefinitionUnitElements();
		this.pIndividualDefinitionUnit = new IndividualDefinitionUnitElements();
		this.pConnectionDefinitionUnit = new ConnectionDefinitionUnitElements();
		this.pInterfaceDefinitionUnit = new InterfaceDefinitionUnitElements();
		this.pActionDefinitionUnit = new ActionDefinitionUnitElements();
		this.pCalculationDefinitionUnit = new CalculationDefinitionUnitElements();
		this.pStateDefinitionUnit = new StateDefinitionUnitElements();
		this.pConstraintDefinitionUnit = new ConstraintDefinitionUnitElements();
		this.pRequirementDefinitionUnit = new RequirementDefinitionUnitElements();
		this.pCaseDefinitionUnit = new CaseDefinitionUnitElements();
		this.pAnalysisCaseDefinitionUnit = new AnalysisCaseDefinitionUnitElements();
		this.pVerificationCaseDefinitionUnit = new VerificationCaseDefinitionUnitElements();
		this.pViewDefinitionUnit = new ViewDefinitionUnitElements();
		this.pViewpointDefinitionUnit = new ViewpointDefinitionUnitElements();
		this.pRenderingDefinitionUnit = new RenderingDefinitionUnitElements();
		this.pAttributeUnit = new AttributeUnitElements();
		this.pItemUnit = new ItemUnitElements();
		this.pPartUnit = new PartUnitElements();
		this.pActionUnit = new ActionUnitElements();
		this.pCalculationUnit = new CalculationUnitElements();
		this.pStateUnit = new StateUnitElements();
		this.pConstraintUnit = new ConstraintUnitElements();
		this.pRequirementUnit = new RequirementUnitElements();
		this.pCaseUnit = new CaseUnitElements();
		this.pAnalysisCaseUnit = new AnalysisCaseUnitElements();
		this.pVerificationCaseUnit = new VerificationCaseUnitElements();
		this.pViewUnit = new ViewUnitElements();
		this.pViewpointUnit = new ViewpointUnitElements();
		this.pRenderingUnit = new RenderingUnitElements();
		this.pUnitPrefix = new UnitPrefixElements();
		this.pIdentification = new IdentificationElements();
		this.ePackageElementVisibilityIndicator = new PackageElementVisibilityIndicatorElements();
		this.eVisibilityIndicator = new VisibilityIndicatorElements();
		this.pAnnotation = new AnnotationElements();
		this.pEmptyAnnotation = new EmptyAnnotationElements();
		this.pPrefixAnnotation = new PrefixAnnotationElements();
		this.pComment = new CommentElements();
		this.pDocumentation = new DocumentationElements();
		this.pOwnedDocumentation = new OwnedDocumentationElements();
		this.pDocumentationComment = new DocumentationCommentElements();
		this.pTextualRepresentation = new TextualRepresentationElements();
		this.pImport = new ImportElements();
		this.pPackage = new PackageElements();
		this.pPackageDeclaration = new PackageDeclarationElements();
		this.pPackageBody = new PackageBodyElements();
		this.pPackagedDefinitionElement = new PackagedDefinitionElementElements();
		this.pPackagedUsageElement = new PackagedUsageElementElements();
		this.pPackageMember = new PackageMemberElements();
		this.pPackagedDefinitionMember = new PackagedDefinitionMemberElements();
		this.pPackagedUsageMember = new PackagedUsageMemberElements();
		this.pPackageMemberPrefix = new PackageMemberPrefixElements();
		this.pDependency = new DependencyElements();
		this.pDefinitionPrefix = new DefinitionPrefixElements();
		this.pDefinitionBody = new DefinitionBodyElements();
		this.pDefinitionBodyItem = new DefinitionBodyItemElements();
		this.pDirectionalStructureUsageElement = new DirectionalStructureUsageElementElements();
		this.pNondirectionalStructureUsageElement = new NondirectionalStructureUsageElementElements();
		this.pIndividualUsageElement = new IndividualUsageElementElements();
		this.pDirectionalBehaviorUsageElement = new DirectionalBehaviorUsageElementElements();
		this.pNondirectionalBehaviorUsageElement = new NondirectionalBehaviorUsageElementElements();
		this.pVariantUsageElement = new VariantUsageElementElements();
		this.pNestedDefinitionMember = new NestedDefinitionMemberElements();
		this.pVariantUsageMember = new VariantUsageMemberElements();
		this.pNestedUsageMember = new NestedUsageMemberElements();
		this.pStructureUsageMember = new StructureUsageMemberElements();
		this.pIndividualUsageMember = new IndividualUsageMemberElements();
		this.pBehaviorUsageMember = new BehaviorUsageMemberElements();
		this.pDefinitionMemberPrefix = new DefinitionMemberPrefixElements();
		this.eFeatureDirection = new FeatureDirectionElements();
		this.pClassifierDeclarationCompletion = new ClassifierDeclarationCompletionElements();
		this.pSuperclassingList = new SuperclassingListElements();
		this.pSpecializesKeyword = new SpecializesKeywordElements();
		this.pSuperclassing = new SuperclassingElements();
		this.pAttributeKeyword = new AttributeKeywordElements();
		this.pAttributeDefKeyword = new AttributeDefKeywordElements();
		this.pAttributeDefinition = new AttributeDefinitionElements();
		this.pAttributeDefDeclaration = new AttributeDefDeclarationElements();
		this.pItemKeyword = new ItemKeywordElements();
		this.pItemDefKeyword = new ItemDefKeywordElements();
		this.pItemDefinition = new ItemDefinitionElements();
		this.pItemDefDeclaration = new ItemDefDeclarationElements();
		this.pPartKeyword = new PartKeywordElements();
		this.pPartDefKeyword = new PartDefKeywordElements();
		this.pPartDefinition = new PartDefinitionElements();
		this.pPartDefDeclaration = new PartDefDeclarationElements();
		this.pIndividualKeyword = new IndividualKeywordElements();
		this.pIndividualDefKeyword = new IndividualDefKeywordElements();
		this.pIndividualDefinition = new IndividualDefinitionElements();
		this.pIndividualDefDeclaration = new IndividualDefDeclarationElements();
		this.pLifeClass = new LifeClassElements();
		this.pLifeClassMembership = new LifeClassMembershipElements();
		this.pPortKeyword = new PortKeywordElements();
		this.pPortDefKeyword = new PortDefKeywordElements();
		this.pPortDefinition = new PortDefinitionElements();
		this.pPortDefDeclaration = new PortDefDeclarationElements();
		this.pConjugatedPortDefinition = new ConjugatedPortDefinitionElements();
		this.pPortConjugation = new PortConjugationElements();
		this.pConjugatedPortDefinitionMember = new ConjugatedPortDefinitionMemberElements();
		this.pConnectionKeyword = new ConnectionKeywordElements();
		this.pConnectionDefKeyword = new ConnectionDefKeywordElements();
		this.pConnectionDefinition = new ConnectionDefinitionElements();
		this.pConnectionDefDeclaration = new ConnectionDefDeclarationElements();
		this.pConnectionDefBody = new ConnectionDefBodyElements();
		this.pConnectionEndElement = new ConnectionEndElementElements();
		this.pConnectionUsageMember = new ConnectionUsageMemberElements();
		this.pConnectionEndMember = new ConnectionEndMemberElements();
		this.pInterfaceKeyword = new InterfaceKeywordElements();
		this.pInterfaceDefKeyword = new InterfaceDefKeywordElements();
		this.pInterfaceDefinition = new InterfaceDefinitionElements();
		this.pInterfaceDefDeclaration = new InterfaceDefDeclarationElements();
		this.pInterfaceDefBody = new InterfaceDefBodyElements();
		this.pInterfaceUsageMember = new InterfaceUsageMemberElements();
		this.pInterfaceEndMember = new InterfaceEndMemberElements();
		this.pActionKeyword = new ActionKeywordElements();
		this.pActionDefKeyword = new ActionDefKeywordElements();
		this.pActionDefinition = new ActionDefinitionElements();
		this.pActionDefDeclaration = new ActionDefDeclarationElements();
		this.pParameterList = new ParameterListElements();
		this.pActionDefBody = new ActionDefBodyElements();
		this.pActionDefBodyItem = new ActionDefBodyItemElements();
		this.pParameterMember = new ParameterMemberElements();
		this.pInitialNodeMember = new InitialNodeMemberElements();
		this.pActionNodeMember = new ActionNodeMemberElements();
		this.pTargetSuccessionMember = new TargetSuccessionMemberElements();
		this.pGuardedSuccessionMember = new GuardedSuccessionMemberElements();
		this.pCalculationKeyword = new CalculationKeywordElements();
		this.pCalculationDefKeyword = new CalculationDefKeywordElements();
		this.pCalculationDefinition = new CalculationDefinitionElements();
		this.pCalculationDefDeclaration = new CalculationDefDeclarationElements();
		this.pParameterPart = new ParameterPartElements();
		this.pReturnParameterPart = new ReturnParameterPartElements();
		this.pEmptyReturnParameterPart = new EmptyReturnParameterPartElements();
		this.pEmptyParameter = new EmptyParameterElements();
		this.pCalculationDefBody = new CalculationDefBodyElements();
		this.pCalculationDefBodyItem = new CalculationDefBodyItemElements();
		this.pReturnParameterMember = new ReturnParameterMemberElements();
		this.pEmptyReturnParameterMember = new EmptyReturnParameterMemberElements();
		this.pStateKeyword = new StateKeywordElements();
		this.pStateDefKeyword = new StateDefKeywordElements();
		this.pStateDefinition = new StateDefinitionElements();
		this.pStateDefDeclaration = new StateDefDeclarationElements();
		this.pStateDefBody = new StateDefBodyElements();
		this.pStateDefBodyPart = new StateDefBodyPartElements();
		this.pStateDefBodyItem = new StateDefBodyItemElements();
		this.pStateActionUsage = new StateActionUsageElements();
		this.pPerformedActionUsage = new PerformedActionUsageElements();
		this.pEmptyActionUsage = new EmptyActionUsageElements();
		this.pEntryActionMember = new EntryActionMemberElements();
		this.pEntryActionKind = new EntryActionKindElements();
		this.pDoActionMember = new DoActionMemberElements();
		this.pDoActionKind = new DoActionKindElements();
		this.pExitActionMember = new ExitActionMemberElements();
		this.pExitActionKind = new ExitActionKindElements();
		this.pEntryTransitionMember = new EntryTransitionMemberElements();
		this.pTargetTransitionSuccessionMember = new TargetTransitionSuccessionMemberElements();
		this.pTransitionStepMember = new TransitionStepMemberElements();
		this.pConstraintKeyword = new ConstraintKeywordElements();
		this.pConstraintDefKeyword = new ConstraintDefKeywordElements();
		this.pConstraintDefinition = new ConstraintDefinitionElements();
		this.pConstraintDefDeclaration = new ConstraintDefDeclarationElements();
		this.pConstraintDefBody = new ConstraintDefBodyElements();
		this.pConstraintDefMembers = new ConstraintDefMembersElements();
		this.pConstraintExpressionMember = new ConstraintExpressionMemberElements();
		this.pRequirementKeyword = new RequirementKeywordElements();
		this.pRequirementDefKeyword = new RequirementDefKeywordElements();
		this.pRequirementDefinition = new RequirementDefinitionElements();
		this.pRequirementDefDeclaration = new RequirementDefDeclarationElements();
		this.pRequirementDefBody = new RequirementDefBodyElements();
		this.pRequirementDefBodyItem = new RequirementDefBodyItemElements();
		this.pSubjectUsage = new SubjectUsageElements();
		this.pRequirementConstraintUsage = new RequirementConstraintUsageElements();
		this.pSubjectMember = new SubjectMemberElements();
		this.pRequirementConstraintMember = new RequirementConstraintMemberElements();
		this.eRequirementConstraintKind = new RequirementConstraintKindElements();
		this.pCaseKeyword = new CaseKeywordElements();
		this.pCaseDefKeyword = new CaseDefKeywordElements();
		this.pCaseDefinition = new CaseDefinitionElements();
		this.pCaseDefDeclaration = new CaseDefDeclarationElements();
		this.pCaseDefBody = new CaseDefBodyElements();
		this.pCaseDefBodyItem = new CaseDefBodyItemElements();
		this.pObjectiveRequirementUsage = new ObjectiveRequirementUsageElements();
		this.pObjectiveMember = new ObjectiveMemberElements();
		this.pAnalysisCaseKeyword = new AnalysisCaseKeywordElements();
		this.pAnalysisCaseDefKeyword = new AnalysisCaseDefKeywordElements();
		this.pAnalysisCaseDefinition = new AnalysisCaseDefinitionElements();
		this.pAnalysisCaseDefDeclaration = new AnalysisCaseDefDeclarationElements();
		this.pVerificationCaseKeyword = new VerificationCaseKeywordElements();
		this.pVerificationCaseDefKeyword = new VerificationCaseDefKeywordElements();
		this.pVerificationCaseDefinition = new VerificationCaseDefinitionElements();
		this.pVerificationCaseDefDeclaration = new VerificationCaseDefDeclarationElements();
		this.pViewKeyword = new ViewKeywordElements();
		this.pViewDefKeyword = new ViewDefKeywordElements();
		this.pViewDefinition = new ViewDefinitionElements();
		this.pViewDefDeclaration = new ViewDefDeclarationElements();
		this.pViewpointKeyword = new ViewpointKeywordElements();
		this.pViewpointDefKeyword = new ViewpointDefKeywordElements();
		this.pViewpointDefinition = new ViewpointDefinitionElements();
		this.pViewpointDefDeclaration = new ViewpointDefDeclarationElements();
		this.pRenderingKeyword = new RenderingKeywordElements();
		this.pRenderingDefKeyword = new RenderingDefKeywordElements();
		this.pRenderingDefinition = new RenderingDefinitionElements();
		this.pRenderingDefDeclaration = new RenderingDefDeclarationElements();
		this.pUsagePrefix = new UsagePrefixElements();
		this.pUsage = new UsageElements();
		this.pUsageDeclaration = new UsageDeclarationElements();
		this.pUsageSpecializationPart = new UsageSpecializationPartElements();
		this.pMultiplicityPart = new MultiplicityPartElements();
		this.pMultiplicity = new MultiplicityElements();
		this.pUsageSpecialization = new UsageSpecializationElements();
		this.pTypings = new TypingsElements();
		this.pDefinedBy = new DefinedByElements();
		this.pDefinedByKeyword = new DefinedByKeywordElements();
		this.pFeatureTyping = new FeatureTypingElements();
		this.pSubsettingPart = new SubsettingPartElements();
		this.pSubsettings = new SubsettingsElements();
		this.pSubsets = new SubsetsElements();
		this.pSubsetsKeyword = new SubsetsKeywordElements();
		this.pSubset = new SubsetElements();
		this.pRedefinitions = new RedefinitionsElements();
		this.pRedefines = new RedefinesElements();
		this.pRedefinesKeyword = new RedefinesKeywordElements();
		this.pRedefinition = new RedefinitionElements();
		this.pUsageCompletion = new UsageCompletionElements();
		this.pValuePart = new ValuePartElements();
		this.pFeatureValue = new FeatureValueElements();
		this.pMultiplicityMember = new MultiplicityMemberElements();
		this.pNaturalLiteralMember = new NaturalLiteralMemberElements();
		this.pUnlimitedNaturalLiteralMember = new UnlimitedNaturalLiteralMemberElements();
		this.pParameter = new ParameterElements();
		this.pParameterDeclaration = new ParameterDeclarationElements();
		this.pParameterSpecializationPart = new ParameterSpecializationPartElements();
		this.pParameterSpecialization = new ParameterSpecializationElements();
		this.pReferenceKeyword = new ReferenceKeywordElements();
		this.pReferenceUsageKeyword = new ReferenceUsageKeywordElements();
		this.pReferenceUsage = new ReferenceUsageElements();
		this.pReferenceEndUsage = new ReferenceEndUsageElements();
		this.pReferenceVariantUsage = new ReferenceVariantUsageElements();
		this.pAttributeUsageKeyword = new AttributeUsageKeywordElements();
		this.pAttributeDeclaration = new AttributeDeclarationElements();
		this.pAttributeUsage = new AttributeUsageElements();
		this.pAttributeVariantUsage = new AttributeVariantUsageElements();
		this.pItemUsageKeyword = new ItemUsageKeywordElements();
		this.pItemDeclaration = new ItemDeclarationElements();
		this.pItemUsage = new ItemUsageElements();
		this.pItemRefUsage = new ItemRefUsageElements();
		this.pPartUsageKeyword = new PartUsageKeywordElements();
		this.pPartDeclaration = new PartDeclarationElements();
		this.pPartUsage = new PartUsageElements();
		this.pPartRefUsage = new PartRefUsageElements();
		this.pIndividualUsageKeyword = new IndividualUsageKeywordElements();
		this.pTimeSliceKeyword = new TimeSliceKeywordElements();
		this.pSnapshotKeyword = new SnapshotKeywordElements();
		this.pIndividualUsage = new IndividualUsageElements();
		this.pIndividualRefUsage = new IndividualRefUsageElements();
		this.pTimeSliceUsage = new TimeSliceUsageElements();
		this.pTimeSliceRefUsage = new TimeSliceRefUsageElements();
		this.pTimeSliceFeature = new TimeSliceFeatureElements();
		this.pSnapshotUsage = new SnapshotUsageElements();
		this.pSnapshotRefUsage = new SnapshotRefUsageElements();
		this.pSnapshotFeature = new SnapshotFeatureElements();
		this.pTimeSliceFeatureMember = new TimeSliceFeatureMemberElements();
		this.pSnapshotFeatureMember = new SnapshotFeatureMemberElements();
		this.pPortUsageKeyword = new PortUsageKeywordElements();
		this.pPortUsage = new PortUsageElements();
		this.pPortEndUsage = new PortEndUsageElements();
		this.pPortUsageDeclaration = new PortUsageDeclarationElements();
		this.pPortTypePart = new PortTypePartElements();
		this.pConjugatedPortTyping = new ConjugatedPortTypingElements();
		this.pConnectorKeyword = new ConnectorKeywordElements();
		this.pConnector = new ConnectorElements();
		this.pConnectionUsageKeyword = new ConnectionUsageKeywordElements();
		this.pConnectionUsage = new ConnectionUsageElements();
		this.pConnectorPart = new ConnectorPartElements();
		this.pConnectorEnd = new ConnectorEndElements();
		this.pMultiplicitySourceEnd = new MultiplicitySourceEndElements();
		this.pEmptySourceEnd = new EmptySourceEndElements();
		this.pEmptyTargetEnd = new EmptyTargetEndElements();
		this.pConnectorEndMember = new ConnectorEndMemberElements();
		this.pMultiplicitySourceEndMember = new MultiplicitySourceEndMemberElements();
		this.pEmptySourceEndMember = new EmptySourceEndMemberElements();
		this.pEmptyTargetEndMember = new EmptyTargetEndMemberElements();
		this.pInterfaceUsageKeyword = new InterfaceUsageKeywordElements();
		this.pInterfaceUsage = new InterfaceUsageElements();
		this.pInterfaceUsageDeclaration = new InterfaceUsageDeclarationElements();
		this.pBindingKeyword = new BindingKeywordElements();
		this.pBindingConnector = new BindingConnectorElements();
		this.pSuccessionKeyword = new SuccessionKeywordElements();
		this.pSuccession = new SuccessionElements();
		this.pSuccessionDeclaration = new SuccessionDeclarationElements();
		this.pTargetSuccession = new TargetSuccessionElements();
		this.pEmptySuccession = new EmptySuccessionElements();
		this.pGuardedSuccession = new GuardedSuccessionElements();
		this.pGuardedTargetSuccession = new GuardedTargetSuccessionElements();
		this.pDefaultTargetSuccession = new DefaultTargetSuccessionElements();
		this.pItemFlowKeyword = new ItemFlowKeywordElements();
		this.pItemFlow = new ItemFlowElements();
		this.pSuccessionItemFlowKeyword = new SuccessionItemFlowKeywordElements();
		this.pSuccessionItemFlow = new SuccessionItemFlowElements();
		this.pItemFlowDeclaration = new ItemFlowDeclarationElements();
		this.pItemFeatureTyping = new ItemFeatureTypingElements();
		this.pEmptyItemFeature = new EmptyItemFeatureElements();
		this.pItemFlowEnd = new ItemFlowEndElements();
		this.pItemFlowFeature = new ItemFlowFeatureElements();
		this.pItemFeatureMember = new ItemFeatureMemberElements();
		this.pItemFlowEndMember = new ItemFlowEndMemberElements();
		this.pItemFlowFeatureMember = new ItemFlowFeatureMemberElements();
		this.pEmptyItemFeatureMember = new EmptyItemFeatureMemberElements();
		this.pActionUsageKeyword = new ActionUsageKeywordElements();
		this.pActionDeclaration = new ActionDeclarationElements();
		this.pActionUsage = new ActionUsageElements();
		this.pActionRefUsage = new ActionRefUsageElements();
		this.pActionUsageDeclaration = new ActionUsageDeclarationElements();
		this.pActionParameterList = new ActionParameterListElements();
		this.pActionArgument = new ActionArgumentElements();
		this.pActionParameter = new ActionParameterElements();
		this.pActionParameterFlow = new ActionParameterFlowElements();
		this.pPerformActionUsage = new PerformActionUsageElements();
		this.pPerformActionUsageDeclaration = new PerformActionUsageDeclarationElements();
		this.pActionNode = new ActionNodeElements();
		this.pAcceptNode = new AcceptNodeElements();
		this.pAcceptNodeDeclaration = new AcceptNodeDeclarationElements();
		this.pSendNode = new SendNodeElements();
		this.pSendNodeDeclaration = new SendNodeDeclarationElements();
		this.pControlNode = new ControlNodeElements();
		this.pMergeNode = new MergeNodeElements();
		this.pDecisionNode = new DecisionNodeElements();
		this.pJoinNode = new JoinNodeElements();
		this.pForkNode = new ForkNodeElements();
		this.pActionParameterMember = new ActionParameterMemberElements();
		this.pActionParameterFlowMember = new ActionParameterFlowMemberElements();
		this.pEmptySuccessionMember = new EmptySuccessionMemberElements();
		this.pDirectionParameterMember = new DirectionParameterMemberElements();
		this.pEmptyParameterMember = new EmptyParameterMemberElements();
		this.pCalculationUsageKeyword = new CalculationUsageKeywordElements();
		this.pCalculationDeclaration = new CalculationDeclarationElements();
		this.pCalculationUsage = new CalculationUsageElements();
		this.pCalculationRefUsage = new CalculationRefUsageElements();
		this.pCalculationUsageDeclaration = new CalculationUsageDeclarationElements();
		this.pCalculationParameterPart = new CalculationParameterPartElements();
		this.pCalculationReturnParameterPart = new CalculationReturnParameterPartElements();
		this.pCalculationReturnParameterMember = new CalculationReturnParameterMemberElements();
		this.pStateUsageKeyword = new StateUsageKeywordElements();
		this.pStateDeclaration = new StateDeclarationElements();
		this.pStateUsage = new StateUsageElements();
		this.pStateRefUsage = new StateRefUsageElements();
		this.pExhibitStateUsage = new ExhibitStateUsageElements();
		this.pTransitionUsageKeyword = new TransitionUsageKeywordElements();
		this.pTransitionStep = new TransitionStepElements();
		this.pTargetTransitionStep = new TargetTransitionStepElements();
		this.pTriggerStep = new TriggerStepElements();
		this.pEffectBehaviorUsage = new EffectBehaviorUsageElements();
		this.pTransitionSuccession = new TransitionSuccessionElements();
		this.pTransitionSourceMember = new TransitionSourceMemberElements();
		this.pTransitionSuccessionMember = new TransitionSuccessionMemberElements();
		this.pTriggerStepMember = new TriggerStepMemberElements();
		this.eTriggerFeatureKind = new TriggerFeatureKindElements();
		this.pGuardExpressionMember = new GuardExpressionMemberElements();
		this.eGuardFeatureKind = new GuardFeatureKindElements();
		this.pEffectBehaviorMember = new EffectBehaviorMemberElements();
		this.eEffectFeatureKind = new EffectFeatureKindElements();
		this.pConstraintUsageKeyword = new ConstraintUsageKeywordElements();
		this.pConstraintDeclaration = new ConstraintDeclarationElements();
		this.pConstraintUsage = new ConstraintUsageElements();
		this.pConstraintRefUsage = new ConstraintRefUsageElements();
		this.pConstraintUsageDeclaration = new ConstraintUsageDeclarationElements();
		this.pConstraintParameterPart = new ConstraintParameterPartElements();
		this.pAssertConstraintUsage = new AssertConstraintUsageElements();
		this.pInvariantPart = new InvariantPartElements();
		this.pTrueLiteralExpression = new TrueLiteralExpressionElements();
		this.pTrueLiteralMember = new TrueLiteralMemberElements();
		this.pRequirementUsageKeyword = new RequirementUsageKeywordElements();
		this.pRequirementDeclaration = new RequirementDeclarationElements();
		this.pRequirementUsage = new RequirementUsageElements();
		this.pRequirementRefUsage = new RequirementRefUsageElements();
		this.pRequirementUsageDeclaration = new RequirementUsageDeclarationElements();
		this.pSatisfyRequirementUsage = new SatisfyRequirementUsageElements();
		this.pSatisfactionConnector = new SatisfactionConnectorElements();
		this.pSatisfactionConnectorMember = new SatisfactionConnectorMemberElements();
		this.pCaseUsageKeyword = new CaseUsageKeywordElements();
		this.pCaseDeclaration = new CaseDeclarationElements();
		this.pCaseUsage = new CaseUsageElements();
		this.pCaseRefUsage = new CaseRefUsageElements();
		this.pAnalysisCaseUsageKeyword = new AnalysisCaseUsageKeywordElements();
		this.pAnalysisCaseDeclaration = new AnalysisCaseDeclarationElements();
		this.pAnalysisCaseUsage = new AnalysisCaseUsageElements();
		this.pAnalysisCaseRefUsage = new AnalysisCaseRefUsageElements();
		this.pVerificationCaseUsageKeyword = new VerificationCaseUsageKeywordElements();
		this.pVerificationCaseDeclaration = new VerificationCaseDeclarationElements();
		this.pVerificationCaseUsage = new VerificationCaseUsageElements();
		this.pVerificationCaseRefUsage = new VerificationCaseRefUsageElements();
		this.pViewUsageKeyword = new ViewUsageKeywordElements();
		this.pViewDeclaration = new ViewDeclarationElements();
		this.pViewUsage = new ViewUsageElements();
		this.pViewRefUsage = new ViewRefUsageElements();
		this.pViewBody = new ViewBodyElements();
		this.pViewBodyItem = new ViewBodyItemElements();
		this.pExpose = new ExposeElements();
		this.pViewpointUsageKeyword = new ViewpointUsageKeywordElements();
		this.pViewpointDeclaration = new ViewpointDeclarationElements();
		this.pViewpointUsage = new ViewpointUsageElements();
		this.pViewpointRefUsage = new ViewpointRefUsageElements();
		this.pRenderingUsageKeyword = new RenderingUsageKeywordElements();
		this.pRenderingDeclaration = new RenderingDeclarationElements();
		this.pRenderingUsage = new RenderingUsageElements();
		this.pRenderingRefUsage = new RenderingRefUsageElements();
		this.pExpression = new ExpressionElements();
		this.pConditionalExpression = new ConditionalExpressionElements();
		this.pConditionalTestOperator = new ConditionalTestOperatorElements();
		this.pNullCoalescingExpression = new NullCoalescingExpressionElements();
		this.pNullCoalescingOperator = new NullCoalescingOperatorElements();
		this.pConditionalOrExpression = new ConditionalOrExpressionElements();
		this.pConditionalOrOperator = new ConditionalOrOperatorElements();
		this.pConditionalAndExpression = new ConditionalAndExpressionElements();
		this.pConditionalAndOperator = new ConditionalAndOperatorElements();
		this.pOrExpression = new OrExpressionElements();
		this.pOrOperator = new OrOperatorElements();
		this.pXorExpression = new XorExpressionElements();
		this.pXorOperator = new XorOperatorElements();
		this.pAndExpression = new AndExpressionElements();
		this.pAndOperator = new AndOperatorElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pEqualityOperator = new EqualityOperatorElements();
		this.pClassificationExpression = new ClassificationExpressionElements();
		this.pClassificationOperator = new ClassificationOperatorElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pRelationalOperator = new RelationalOperatorElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pAdditiveOperator = new AdditiveOperatorElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pMultiplicativeOperator = new MultiplicativeOperatorElements();
		this.pExponentiationExpression = new ExponentiationExpressionElements();
		this.pExponentiationOperator = new ExponentiationOperatorElements();
		this.pUnitsExpression = new UnitsExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pUnaryOperator = new UnaryOperatorElements();
		this.pSequenceAccessExpression = new SequenceAccessExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pBodyExpression = new BodyExpressionElements();
		this.pBodyParameter = new BodyParameterElements();
		this.pExpressionTyping = new ExpressionTypingElements();
		this.pBaseExpression = new BaseExpressionElements();
		this.pFeatureReferenceExpression = new FeatureReferenceExpressionElements();
		this.pFeatureReference = new FeatureReferenceElements();
		this.pInvocationExpression = new InvocationExpressionElements();
		this.pTuple = new TupleElements();
		this.pPositionalTuple = new PositionalTupleElements();
		this.pNamedTuple = new NamedTupleElements();
		this.pExtentExpression = new ExtentExpressionElements();
		this.pTypeReference = new TypeReferenceElements();
		this.pSequenceConstructionExpression = new SequenceConstructionExpressionElements();
		this.pSequenceElementList = new SequenceElementListElements();
		this.pNullExpression = new NullExpressionElements();
		this.pLiteralExpression = new LiteralExpressionElements();
		this.pBooleanLiteralExpression = new BooleanLiteralExpressionElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pStringLiteralExpression = new StringLiteralExpressionElements();
		this.pRealLiteralExpression = new RealLiteralExpressionElements();
		this.pRealValue = new RealValueElements();
		this.pNaturalLiteralExpression = new NaturalLiteralExpressionElements();
		this.pUnlimitedNaturalLiteralExpression = new UnlimitedNaturalLiteralExpressionElements();
		this.pExpressionMember = new ExpressionMemberElements();
		this.pFeatureReferenceMember = new FeatureReferenceMemberElements();
		this.pTypeReferenceMember = new TypeReferenceMemberElements();
		this.pNamedExpressionMember = new NamedExpressionMemberElements();
		this.pBodyMember = new BodyMemberElements();
		this.pBodyParameterMember = new BodyParameterMemberElements();
		this.pQueryPathExpression = new QueryPathExpressionElements();
		this.pQueryNameExpression = new QueryNameExpressionElements();
		this.pQueryHeadExpression = new QueryHeadExpressionElements();
		this.pName = new NameElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pColonQualifiedName = new ColonQualifiedNameElements();
		this.pDotQualifiedName = new DotQualifiedNameElements();
		this.tDECIMAL_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.DECIMAL_VALUE");
		this.tEXP_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.EXP_VALUE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ID");
		this.tUNRESTRICTED_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.UNRESTRICTED_NAME");
		this.tSTRING_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.STRING_VALUE");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ML_COMMENT");
		this.tDOCUMENTATION_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.DOCUMENTATION_COMMENT");
		this.tML_NOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.ML_NOTE");
		this.tSL_NOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.SL_NOTE");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.xtext.SysML.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.omg.sysml.xtext.SysML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	///* UNITS */ Unit SysML::Package:
	//	AnonymousPackage
	//	| PackageUnit
	//	| AttributeDefinitionUnit
	//	| ItemDefinitionUnit
	//	| PartDefinitionUnit
	//	| IndividualDefinitionUnit
	//	| ConnectionDefinitionUnit
	//	| InterfaceDefinitionUnit
	//	| ActionDefinitionUnit
	//	| CalculationDefinitionUnit
	//	| StateDefinitionUnit
	//	| ConstraintDefinitionUnit
	//	| RequirementDefinitionUnit
	//	| CaseDefinitionUnit
	//	| AnalysisCaseDefinitionUnit
	//	| VerificationCaseDefinitionUnit
	//	| ViewDefinitionUnit
	//	| ViewpointDefinitionUnit
	//	| RenderingDefinitionUnit
	//	| AttributeUnit
	//	| ItemUnit
	//	| PartUnit
	//	| ActionUnit
	//	| CalculationUnit
	//	| StateUnit
	//	| ConstraintUnit
	//	| RequirementUnit
	//	| CaseUnit
	//	| AnalysisCaseUnit
	//	| VerificationCaseUnit
	//	| ViewUnit
	//	| ViewpointUnit
	//	| RenderingUnit;
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//AnonymousPackage SysML::Package:
	//	PackageBody;
	public AnonymousPackageElements getAnonymousPackageAccess() {
		return pAnonymousPackage;
	}
	
	public ParserRule getAnonymousPackageRule() {
		return getAnonymousPackageAccess().getRule();
	}
	
	//PackageUnit SysML::Package:
	//	UnitPrefix PackageDeclaration PackageBody;
	public PackageUnitElements getPackageUnitAccess() {
		return pPackageUnit;
	}
	
	public ParserRule getPackageUnitRule() {
		return getPackageUnitAccess().getRule();
	}
	
	//AttributeDefinitionUnit SysML::AttributeDefinition:
	//	UnitPrefix AttributeDefDeclaration DefinitionBody;
	public AttributeDefinitionUnitElements getAttributeDefinitionUnitAccess() {
		return pAttributeDefinitionUnit;
	}
	
	public ParserRule getAttributeDefinitionUnitRule() {
		return getAttributeDefinitionUnitAccess().getRule();
	}
	
	//ItemDefinitionUnit SysML::ItemDefinition:
	//	UnitPrefix ItemDefDeclaration DefinitionBody;
	public ItemDefinitionUnitElements getItemDefinitionUnitAccess() {
		return pItemDefinitionUnit;
	}
	
	public ParserRule getItemDefinitionUnitRule() {
		return getItemDefinitionUnitAccess().getRule();
	}
	
	//PartDefinitionUnit SysML::PartDefinition:
	//	UnitPrefix PartDefDeclaration DefinitionBody;
	public PartDefinitionUnitElements getPartDefinitionUnitAccess() {
		return pPartDefinitionUnit;
	}
	
	public ParserRule getPartDefinitionUnitRule() {
		return getPartDefinitionUnitAccess().getRule();
	}
	
	//IndividualDefinitionUnit SysML::IndividualDefinition:
	//	UnitPrefix IndividualDefDeclaration DefinitionBody;
	public IndividualDefinitionUnitElements getIndividualDefinitionUnitAccess() {
		return pIndividualDefinitionUnit;
	}
	
	public ParserRule getIndividualDefinitionUnitRule() {
		return getIndividualDefinitionUnitAccess().getRule();
	}
	
	//ConnectionDefinitionUnit SysML::ConnectionDefinition:
	//	UnitPrefix ConnectionDefDeclaration ConnectionDefBody;
	public ConnectionDefinitionUnitElements getConnectionDefinitionUnitAccess() {
		return pConnectionDefinitionUnit;
	}
	
	public ParserRule getConnectionDefinitionUnitRule() {
		return getConnectionDefinitionUnitAccess().getRule();
	}
	
	//InterfaceDefinitionUnit SysML::InterfaceDefinition:
	//	UnitPrefix InterfaceDefDeclaration InterfaceDefBody;
	public InterfaceDefinitionUnitElements getInterfaceDefinitionUnitAccess() {
		return pInterfaceDefinitionUnit;
	}
	
	public ParserRule getInterfaceDefinitionUnitRule() {
		return getInterfaceDefinitionUnitAccess().getRule();
	}
	
	//ActionDefinitionUnit SysML::ActionDefinition:
	//	UnitPrefix ActionDefDeclaration ActionDefBody;
	public ActionDefinitionUnitElements getActionDefinitionUnitAccess() {
		return pActionDefinitionUnit;
	}
	
	public ParserRule getActionDefinitionUnitRule() {
		return getActionDefinitionUnitAccess().getRule();
	}
	
	//CalculationDefinitionUnit SysML::CalculationDefinition:
	//	UnitPrefix CalculationDefDeclaration CalculationDefBody;
	public CalculationDefinitionUnitElements getCalculationDefinitionUnitAccess() {
		return pCalculationDefinitionUnit;
	}
	
	public ParserRule getCalculationDefinitionUnitRule() {
		return getCalculationDefinitionUnitAccess().getRule();
	}
	
	//StateDefinitionUnit SysML::StateDefinition:
	//	UnitPrefix StateDefDeclaration StateDefBody;
	public StateDefinitionUnitElements getStateDefinitionUnitAccess() {
		return pStateDefinitionUnit;
	}
	
	public ParserRule getStateDefinitionUnitRule() {
		return getStateDefinitionUnitAccess().getRule();
	}
	
	//ConstraintDefinitionUnit SysML::ConstraintDefinition:
	//	UnitPrefix ConstraintDefDeclaration ConstraintDefBody;
	public ConstraintDefinitionUnitElements getConstraintDefinitionUnitAccess() {
		return pConstraintDefinitionUnit;
	}
	
	public ParserRule getConstraintDefinitionUnitRule() {
		return getConstraintDefinitionUnitAccess().getRule();
	}
	
	//RequirementDefinitionUnit SysML::RequirementDefinition:
	//	UnitPrefix RequirementDefDeclaration RequirementDefBody;
	public RequirementDefinitionUnitElements getRequirementDefinitionUnitAccess() {
		return pRequirementDefinitionUnit;
	}
	
	public ParserRule getRequirementDefinitionUnitRule() {
		return getRequirementDefinitionUnitAccess().getRule();
	}
	
	//CaseDefinitionUnit SysML::CaseDefinition:
	//	UnitPrefix CaseDefDeclaration CaseDefBody;
	public CaseDefinitionUnitElements getCaseDefinitionUnitAccess() {
		return pCaseDefinitionUnit;
	}
	
	public ParserRule getCaseDefinitionUnitRule() {
		return getCaseDefinitionUnitAccess().getRule();
	}
	
	//AnalysisCaseDefinitionUnit SysML::AnalysisCaseDefinition:
	//	UnitPrefix AnalysisCaseDefDeclaration CaseDefBody;
	public AnalysisCaseDefinitionUnitElements getAnalysisCaseDefinitionUnitAccess() {
		return pAnalysisCaseDefinitionUnit;
	}
	
	public ParserRule getAnalysisCaseDefinitionUnitRule() {
		return getAnalysisCaseDefinitionUnitAccess().getRule();
	}
	
	//VerificationCaseDefinitionUnit SysML::VerificationCaseDefinition:
	//	UnitPrefix VerificationCaseDefDeclaration CaseDefBody;
	public VerificationCaseDefinitionUnitElements getVerificationCaseDefinitionUnitAccess() {
		return pVerificationCaseDefinitionUnit;
	}
	
	public ParserRule getVerificationCaseDefinitionUnitRule() {
		return getVerificationCaseDefinitionUnitAccess().getRule();
	}
	
	//ViewDefinitionUnit SysML::ViewDefinition:
	//	UnitPrefix ViewDefDeclaration DefinitionBody;
	public ViewDefinitionUnitElements getViewDefinitionUnitAccess() {
		return pViewDefinitionUnit;
	}
	
	public ParserRule getViewDefinitionUnitRule() {
		return getViewDefinitionUnitAccess().getRule();
	}
	
	//ViewpointDefinitionUnit SysML::ViewpointDefinition:
	//	UnitPrefix ViewpointDefDeclaration RequirementDefBody;
	public ViewpointDefinitionUnitElements getViewpointDefinitionUnitAccess() {
		return pViewpointDefinitionUnit;
	}
	
	public ParserRule getViewpointDefinitionUnitRule() {
		return getViewpointDefinitionUnitAccess().getRule();
	}
	
	//RenderingDefinitionUnit SysML::RenderingDefinition:
	//	UnitPrefix RenderingDefDeclaration DefinitionBody;
	public RenderingDefinitionUnitElements getRenderingDefinitionUnitAccess() {
		return pRenderingDefinitionUnit;
	}
	
	public ParserRule getRenderingDefinitionUnitRule() {
		return getRenderingDefinitionUnitAccess().getRule();
	}
	
	//AttributeUnit SysML::AttributeUsage:
	//	UnitPrefix AttributeDeclaration UsageCompletion;
	public AttributeUnitElements getAttributeUnitAccess() {
		return pAttributeUnit;
	}
	
	public ParserRule getAttributeUnitRule() {
		return getAttributeUnitAccess().getRule();
	}
	
	//ItemUnit SysML::ItemUsage:
	//	UnitPrefix ItemDeclaration UsageCompletion;
	public ItemUnitElements getItemUnitAccess() {
		return pItemUnit;
	}
	
	public ParserRule getItemUnitRule() {
		return getItemUnitAccess().getRule();
	}
	
	//PartUnit SysML::PartUsage:
	//	UnitPrefix PartDeclaration UsageCompletion;
	public PartUnitElements getPartUnitAccess() {
		return pPartUnit;
	}
	
	public ParserRule getPartUnitRule() {
		return getPartUnitAccess().getRule();
	}
	
	//ActionUnit SysML::ActionUsage:
	//	UnitPrefix ActionDeclaration ActionDefBody;
	public ActionUnitElements getActionUnitAccess() {
		return pActionUnit;
	}
	
	public ParserRule getActionUnitRule() {
		return getActionUnitAccess().getRule();
	}
	
	//CalculationUnit SysML::CalculationUsage:
	//	UnitPrefix CalculationDeclaration CalculationDefBody;
	public CalculationUnitElements getCalculationUnitAccess() {
		return pCalculationUnit;
	}
	
	public ParserRule getCalculationUnitRule() {
		return getCalculationUnitAccess().getRule();
	}
	
	//StateUnit SysML::StateUsage:
	//	UnitPrefix StateDeclaration StateDefBody;
	public StateUnitElements getStateUnitAccess() {
		return pStateUnit;
	}
	
	public ParserRule getStateUnitRule() {
		return getStateUnitAccess().getRule();
	}
	
	//ConstraintUnit SysML::ConstraintUsage:
	//	UnitPrefix ConstraintDeclaration ConstraintDefBody;
	public ConstraintUnitElements getConstraintUnitAccess() {
		return pConstraintUnit;
	}
	
	public ParserRule getConstraintUnitRule() {
		return getConstraintUnitAccess().getRule();
	}
	
	//RequirementUnit SysML::RequirementUsage:
	//	UnitPrefix RequirementDeclaration RequirementDefBody;
	public RequirementUnitElements getRequirementUnitAccess() {
		return pRequirementUnit;
	}
	
	public ParserRule getRequirementUnitRule() {
		return getRequirementUnitAccess().getRule();
	}
	
	//CaseUnit SysML::CaseUsage:
	//	UnitPrefix CaseDeclaration CaseDefBody;
	public CaseUnitElements getCaseUnitAccess() {
		return pCaseUnit;
	}
	
	public ParserRule getCaseUnitRule() {
		return getCaseUnitAccess().getRule();
	}
	
	//AnalysisCaseUnit SysML::AnalysisCaseUsage:
	//	UnitPrefix AnalysisCaseDeclaration CaseDefBody;
	public AnalysisCaseUnitElements getAnalysisCaseUnitAccess() {
		return pAnalysisCaseUnit;
	}
	
	public ParserRule getAnalysisCaseUnitRule() {
		return getAnalysisCaseUnitAccess().getRule();
	}
	
	//VerificationCaseUnit SysML::VerificationCaseUsage:
	//	UnitPrefix VerificationCaseDeclaration CaseDefBody;
	public VerificationCaseUnitElements getVerificationCaseUnitAccess() {
		return pVerificationCaseUnit;
	}
	
	public ParserRule getVerificationCaseUnitRule() {
		return getVerificationCaseUnitAccess().getRule();
	}
	
	//ViewUnit SysML::ViewUsage:
	//	UnitPrefix ViewDeclaration ValuePart? ViewBody;
	public ViewUnitElements getViewUnitAccess() {
		return pViewUnit;
	}
	
	public ParserRule getViewUnitRule() {
		return getViewUnitAccess().getRule();
	}
	
	//ViewpointUnit SysML::ViewpointUsage:
	//	UnitPrefix ViewpointDeclaration RequirementDefBody;
	public ViewpointUnitElements getViewpointUnitAccess() {
		return pViewpointUnit;
	}
	
	public ParserRule getViewpointUnitRule() {
		return getViewpointUnitAccess().getRule();
	}
	
	//RenderingUnit SysML::RenderingUsage:
	//	UnitPrefix RenderingDeclaration UsageCompletion;
	public RenderingUnitElements getRenderingUnitAccess() {
		return pRenderingUnit;
	}
	
	public ParserRule getRenderingUnitRule() {
		return getRenderingUnitAccess().getRule();
	}
	
	//fragment UnitPrefix returns SysML::Package:
	//	ownedRelationship_comp+=PrefixAnnotation*;
	public UnitPrefixElements getUnitPrefixAccess() {
		return pUnitPrefix;
	}
	
	public ParserRule getUnitPrefixRule() {
		return getUnitPrefixAccess().getRule();
	}
	
	///* IDENTIFICATION */ fragment Identification returns SysML::Element:
	//	('id' humanId=Name)? name=Name;
	public IdentificationElements getIdentificationAccess() {
		return pIdentification;
	}
	
	public ParserRule getIdentificationRule() {
		return getIdentificationAccess().getRule();
	}
	
	//enum PackageElementVisibilityIndicator returns SysML::VisibilityKind:
	//	public | private;
	public PackageElementVisibilityIndicatorElements getPackageElementVisibilityIndicatorAccess() {
		return ePackageElementVisibilityIndicator;
	}
	
	public EnumRule getPackageElementVisibilityIndicatorRule() {
		return getPackageElementVisibilityIndicatorAccess().getRule();
	}
	
	//enum VisibilityIndicator returns SysML::VisibilityKind:
	//	public | private | protected;
	public VisibilityIndicatorElements getVisibilityIndicatorAccess() {
		return eVisibilityIndicator;
	}
	
	public EnumRule getVisibilityIndicatorRule() {
		return getVisibilityIndicatorAccess().getRule();
	}
	
	///* ANNOTATIONS */ Annotation SysML::Annotation:
	//	{SysML::Annotation} ('about' annotatedElement=[SysML::Element|QualifiedName])?;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//EmptyAnnotation SysML::Annotation:
	//	{SysML::Annotation};
	public EmptyAnnotationElements getEmptyAnnotationAccess() {
		return pEmptyAnnotation;
	}
	
	public ParserRule getEmptyAnnotationRule() {
		return getEmptyAnnotationAccess().getRule();
	}
	
	//PrefixAnnotation SysML::Annotation:
	//	ownedRelatedElement_comp+=Documentation;
	public PrefixAnnotationElements getPrefixAnnotationAccess() {
		return pPrefixAnnotation;
	}
	
	public ParserRule getPrefixAnnotationRule() {
		return getPrefixAnnotationAccess().getRule();
	}
	
	///* COMMENTS */ Comment SysML::Comment:
	//	('comment' Identification? ownedRelationship_comp+=Annotation
	//	| ownedRelationship_comp+=EmptyAnnotation) body=ML_COMMENT;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	///* DOCUMENTATION */ Documentation SysML::Comment:
	//	('doc' ('id' humanId=Name)?)? body=DOCUMENTATION_COMMENT;
	public DocumentationElements getDocumentationAccess() {
		return pDocumentation;
	}
	
	public ParserRule getDocumentationRule() {
		return getDocumentationAccess().getRule();
	}
	
	//OwnedDocumentation SysML::Documentation:
	//	documentingComment_comp=DocumentationComment;
	public OwnedDocumentationElements getOwnedDocumentationAccess() {
		return pOwnedDocumentation;
	}
	
	public ParserRule getOwnedDocumentationRule() {
		return getOwnedDocumentationAccess().getRule();
	}
	
	//DocumentationComment SysML::Comment:
	//	'doc' ('id' humanId=Name)? body=ML_COMMENT;
	public DocumentationCommentElements getDocumentationCommentAccess() {
		return pDocumentationComment;
	}
	
	public ParserRule getDocumentationCommentRule() {
		return getDocumentationCommentAccess().getRule();
	}
	
	///* TEXTUAL REPRESENTATION */ TextualRepresentation SysML::TextualRepresentation:
	//	('rep' Identification? ownedRelationship_comp+=Annotation
	//	| ownedRelationship_comp+=EmptyAnnotation)
	//	'language' language=STRING_VALUE
	//	body=ML_COMMENT;
	public TextualRepresentationElements getTextualRepresentationAccess() {
		return pTextualRepresentation;
	}
	
	public ParserRule getTextualRepresentationRule() {
		return getTextualRepresentationAccess().getRule();
	}
	
	///* IMPORTS */ Import SysML::Import:
	//	ownedRelationship_comp+=PrefixAnnotation*
	//	visibility=PackageElementVisibilityIndicator?
	//	'import' (importedPackage=[SysML::Package|Name] ('::' | '.') '*'
	//	| importedPackage=[SysML::Package|ColonQualifiedName] '::' '*'
	//	| importedPackage=[SysML::Package|DotQualifiedName] '.' '*') ';';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	///* PACKAGES */ Package SysML::Package:
	//	PackageDeclaration PackageBody;
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//fragment PackageDeclaration returns SysML::Package:
	//	'package' Identification;
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return pPackageDeclaration;
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}
	
	//fragment PackageBody returns SysML::Package:
	//	';'
	//	| '{' (documentation_comp+=OwnedDocumentation
	//	| ownedMembership_comp+=PackageMember
	//	| ownedImport_comp+=Import)*
	//	'}';
	public PackageBodyElements getPackageBodyAccess() {
		return pPackageBody;
	}
	
	public ParserRule getPackageBodyRule() {
		return getPackageBodyAccess().getRule();
	}
	
	//PackagedDefinitionElement SysML::Element:
	//	Package
	//	| AttributeDefinition
	//	| ItemDefinition
	//	| PartDefinition
	//	| IndividualDefinition
	//	| ConnectionDefinition
	//	| InterfaceDefinition
	//	| PortDefinition
	//	| ActionDefinition
	//	| CalculationDefinition
	//	| StateDefinition
	//	| ConstraintDefinition
	//	| RequirementDefinition
	//	| CaseDefinition
	//	| AnalysisCaseDefinition
	//	| VerificationCaseDefinition
	//	| ViewDefinition
	//	| ViewpointDefinition
	//	| RenderingDefinition
	//	| Comment
	//	| TextualRepresentation
	//	| Dependency;
	public PackagedDefinitionElementElements getPackagedDefinitionElementAccess() {
		return pPackagedDefinitionElement;
	}
	
	public ParserRule getPackagedDefinitionElementRule() {
		return getPackagedDefinitionElementAccess().getRule();
	}
	
	//PackagedUsageElement SysML::Usage:
	//	AttributeUsage
	//	| ItemUsage
	//	| PartUsage
	//	| IndividualUsage
	//	| TimeSliceUsage
	//	| SnapshotUsage
	//	| PortUsage
	//	| ConnectionUsage
	//	| Connector
	//	| InterfaceUsage
	//	| ActionUsage
	//	| CalculationUsage
	//	| StateUsage
	//	| ConstraintUsage
	//	| RequirementUsage
	//	| CaseUsage
	//	| AnalysisCaseUsage
	//	| VerificationCaseUsage
	//	| ViewUsage
	//	| ViewpointUsage
	//	| RenderingUsage;
	public PackagedUsageElementElements getPackagedUsageElementAccess() {
		return pPackagedUsageElement;
	}
	
	public ParserRule getPackagedUsageElementRule() {
		return getPackagedUsageElementAccess().getRule();
	}
	
	///* PACKAGE MEMBERSHIPS */ PackageMember SysML::Membership:
	//	PackageMemberPrefix (PackagedDefinitionMember | PackagedUsageMember);
	public PackageMemberElements getPackageMemberAccess() {
		return pPackageMember;
	}
	
	public ParserRule getPackageMemberRule() {
		return getPackageMemberAccess().getRule();
	}
	
	//fragment PackagedDefinitionMember returns SysML::Membership:
	//	ownedMemberElement_comp=PackagedDefinitionElement
	//	| ('import' | 'alias') memberElement=[SysML::Element|QualifiedName] ('as' memberName=Name)? ';';
	public PackagedDefinitionMemberElements getPackagedDefinitionMemberAccess() {
		return pPackagedDefinitionMember;
	}
	
	public ParserRule getPackagedDefinitionMemberRule() {
		return getPackagedDefinitionMemberAccess().getRule();
	}
	
	//fragment PackagedUsageMember returns SysML::Membership:
	//	ownedMemberElement_comp=PackagedUsageElement;
	public PackagedUsageMemberElements getPackagedUsageMemberAccess() {
		return pPackagedUsageMember;
	}
	
	public ParserRule getPackagedUsageMemberRule() {
		return getPackagedUsageMemberAccess().getRule();
	}
	
	//fragment PackageMemberPrefix returns SysML::Membership:
	//	ownedRelationship_comp+=PrefixAnnotation*
	//	visibility=PackageElementVisibilityIndicator?;
	public PackageMemberPrefixElements getPackageMemberPrefixAccess() {
		return pPackageMemberPrefix;
	}
	
	public ParserRule getPackageMemberPrefixRule() {
		return getPackageMemberPrefixAccess().getRule();
	}
	
	///* DEPENDENCIES */ Dependency SysML::Dependency:
	//	'dependency' (Identification? 'from')?
	//	client+=[SysML::Element|QualifiedName] (',' client+=[SysML::Element|QualifiedName])* 'to'
	//	supplier+=[SysML::Element|QualifiedName] (',' supplier+=[SysML::Element|QualifiedName])* ';';
	public DependencyElements getDependencyAccess() {
		return pDependency;
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}
	
	///* DEFINITIONS */ fragment DefinitionPrefix returns SysML::Definition:
	//	isAbstract?='abstract' | isVariation?='variation';
	public DefinitionPrefixElements getDefinitionPrefixAccess() {
		return pDefinitionPrefix;
	}
	
	public ParserRule getDefinitionPrefixRule() {
		return getDefinitionPrefixAccess().getRule();
	}
	
	//fragment DefinitionBody returns SysML::Type:
	//	';'
	//	| '{' DefinitionBodyItem* '}';
	public DefinitionBodyElements getDefinitionBodyAccess() {
		return pDefinitionBody;
	}
	
	public ParserRule getDefinitionBodyRule() {
		return getDefinitionBodyAccess().getRule();
	}
	
	//fragment DefinitionBodyItem returns SysML::Type:
	//	documentation_comp+=OwnedDocumentation
	//	| ownedMembership_comp+=NestedDefinitionMember
	//	| ownedMembership_comp+=VariantUsageMember
	//	| ownedFeatureMembership_comp+=NestedUsageMember
	//	| ownedFeatureMembership_comp+=EmptySuccessionMember?
	//	ownedFeatureMembership_comp+=IndividualUsageMember
	//	| => ownedImport_comp+=Import;
	public DefinitionBodyItemElements getDefinitionBodyItemAccess() {
		return pDefinitionBodyItem;
	}
	
	public ParserRule getDefinitionBodyItemRule() {
		return getDefinitionBodyItemAccess().getRule();
	}
	
	//DirectionalStructureUsageElement SysML::Usage:
	//	ReferenceUsage
	//	| AttributeUsage
	//	| ItemRefUsage
	//	| PartRefUsage
	//	| ViewRefUsage
	//	| RenderingRefUsage;
	public DirectionalStructureUsageElementElements getDirectionalStructureUsageElementAccess() {
		return pDirectionalStructureUsageElement;
	}
	
	public ParserRule getDirectionalStructureUsageElementRule() {
		return getDirectionalStructureUsageElementAccess().getRule();
	}
	
	//NondirectionalStructureUsageElement SysML::Feature:
	//	PortUsage
	//	| ConnectionUsage
	//	| Connector
	//	| InterfaceUsage
	//	| BindingConnector
	//	| Succession
	//	| ItemFlow
	//	| SuccessionItemFlow;
	public NondirectionalStructureUsageElementElements getNondirectionalStructureUsageElementAccess() {
		return pNondirectionalStructureUsageElement;
	}
	
	public ParserRule getNondirectionalStructureUsageElementRule() {
		return getNondirectionalStructureUsageElementAccess().getRule();
	}
	
	//IndividualUsageElement SysML::Usage:
	//	IndividualRefUsage
	//	| TimeSliceRefUsage
	//	| SnapshotRefUsage;
	public IndividualUsageElementElements getIndividualUsageElementAccess() {
		return pIndividualUsageElement;
	}
	
	public ParserRule getIndividualUsageElementRule() {
		return getIndividualUsageElementAccess().getRule();
	}
	
	//DirectionalBehaviorUsageElement SysML::Usage:
	//	ActionRefUsage
	//	| CalculationRefUsage
	//	| StateRefUsage
	//	| ConstraintRefUsage
	//	| RequirementRefUsage
	//	| CaseRefUsage
	//	| AnalysisCaseRefUsage
	//	| VerificationCaseRefUsage
	//	| ViewpointRefUsage;
	public DirectionalBehaviorUsageElementElements getDirectionalBehaviorUsageElementAccess() {
		return pDirectionalBehaviorUsageElement;
	}
	
	public ParserRule getDirectionalBehaviorUsageElementRule() {
		return getDirectionalBehaviorUsageElementAccess().getRule();
	}
	
	//NondirectionalBehaviorUsageElement SysML::Usage:
	//	PerformActionUsage
	//	| ExhibitStateUsage
	//	| AssertConstraintUsage
	//	| SatisfyRequirementUsage;
	public NondirectionalBehaviorUsageElementElements getNondirectionalBehaviorUsageElementAccess() {
		return pNondirectionalBehaviorUsageElement;
	}
	
	public ParserRule getNondirectionalBehaviorUsageElementRule() {
		return getNondirectionalBehaviorUsageElementAccess().getRule();
	}
	
	//VariantUsageElement SysML::Usage:
	//	ReferenceVariantUsage
	//	| AttributeVariantUsage
	//	| ItemRefUsage
	//	| PartRefUsage
	//	| PortUsage
	//	| ConnectionUsage
	//	| Connector
	//	| InterfaceUsage
	//	| IndividualUsageElement
	//	| DirectionalBehaviorUsageElement
	//	| NondirectionalBehaviorUsageElement;
	public VariantUsageElementElements getVariantUsageElementAccess() {
		return pVariantUsageElement;
	}
	
	public ParserRule getVariantUsageElementRule() {
		return getVariantUsageElementAccess().getRule();
	}
	
	///* DEFINITION MEMBERSHIPS */ NestedDefinitionMember SysML::Membership:
	//	DefinitionMemberPrefix PackagedDefinitionMember;
	public NestedDefinitionMemberElements getNestedDefinitionMemberAccess() {
		return pNestedDefinitionMember;
	}
	
	public ParserRule getNestedDefinitionMemberRule() {
		return getNestedDefinitionMemberAccess().getRule();
	}
	
	//VariantUsageMember SysML::VariantMembership:
	//	DefinitionMemberPrefix 'variant' ownedVariantUsage_comp=VariantUsageElement;
	public VariantUsageMemberElements getVariantUsageMemberAccess() {
		return pVariantUsageMember;
	}
	
	public ParserRule getVariantUsageMemberRule() {
		return getVariantUsageMemberAccess().getRule();
	}
	
	//NestedUsageMember SysML::FeatureMembership:
	//	StructureUsageMember | BehaviorUsageMember;
	public NestedUsageMemberElements getNestedUsageMemberAccess() {
		return pNestedUsageMember;
	}
	
	public ParserRule getNestedUsageMemberRule() {
		return getNestedUsageMemberAccess().getRule();
	}
	
	//StructureUsageMember SysML::FeatureMembership:
	//	DefinitionMemberPrefix (direction=FeatureDirection? ownedMemberFeature_comp=DirectionalStructureUsageElement
	//	| ownedMemberFeature_comp=NondirectionalStructureUsageElement);
	public StructureUsageMemberElements getStructureUsageMemberAccess() {
		return pStructureUsageMember;
	}
	
	public ParserRule getStructureUsageMemberRule() {
		return getStructureUsageMemberAccess().getRule();
	}
	
	//IndividualUsageMember SysML::FeatureMembership:
	//	DefinitionMemberPrefix ownedMemberFeature_comp=IndividualUsageElement;
	public IndividualUsageMemberElements getIndividualUsageMemberAccess() {
		return pIndividualUsageMember;
	}
	
	public ParserRule getIndividualUsageMemberRule() {
		return getIndividualUsageMemberAccess().getRule();
	}
	
	//BehaviorUsageMember SysML::FeatureMembership:
	//	DefinitionMemberPrefix (direction=FeatureDirection? ownedMemberFeature_comp=DirectionalBehaviorUsageElement
	//	| ownedMemberFeature_comp=NondirectionalBehaviorUsageElement);
	public BehaviorUsageMemberElements getBehaviorUsageMemberAccess() {
		return pBehaviorUsageMember;
	}
	
	public ParserRule getBehaviorUsageMemberRule() {
		return getBehaviorUsageMemberAccess().getRule();
	}
	
	//fragment DefinitionMemberPrefix returns SysML::Membership:
	//	ownedRelationship_comp+=PrefixAnnotation*
	//	visibility=VisibilityIndicator?;
	public DefinitionMemberPrefixElements getDefinitionMemberPrefixAccess() {
		return pDefinitionMemberPrefix;
	}
	
	public ParserRule getDefinitionMemberPrefixRule() {
		return getDefinitionMemberPrefixAccess().getRule();
	}
	
	//enum FeatureDirection returns SysML::FeatureDirectionKind:
	//	in | out | inout;
	public FeatureDirectionElements getFeatureDirectionAccess() {
		return eFeatureDirection;
	}
	
	public EnumRule getFeatureDirectionRule() {
		return getFeatureDirectionAccess().getRule();
	}
	
	///* CLASSIFIERS */ fragment ClassifierDeclarationCompletion returns SysML::Classifier:
	//	Identification
	//	//  ( '<' ownedMember += ClassifierTemplateParameter ( ',' ownedMember += ClassifierTemplateParameter )* '>' )? 
	//	SuperclassingList?;
	public ClassifierDeclarationCompletionElements getClassifierDeclarationCompletionAccess() {
		return pClassifierDeclarationCompletion;
	}
	
	public ParserRule getClassifierDeclarationCompletionRule() {
		return getClassifierDeclarationCompletionAccess().getRule();
	}
	
	//fragment SuperclassingList returns SysML::Classifier:
	//	SpecializesKeyword ownedRelationship_comp+=Superclassing (',' ownedRelationship_comp+=Superclassing)*;
	public SuperclassingListElements getSuperclassingListAccess() {
		return pSuperclassingList;
	}
	
	public ParserRule getSuperclassingListRule() {
		return getSuperclassingListAccess().getRule();
	}
	
	//SpecializesKeyword:
	//	':>' | 'specializes';
	public SpecializesKeywordElements getSpecializesKeywordAccess() {
		return pSpecializesKeyword;
	}
	
	public ParserRule getSpecializesKeywordRule() {
		return getSpecializesKeywordAccess().getRule();
	}
	
	//Superclassing SysML::Superclassing:
	//	superclass=[SysML::Classifier|QualifiedName];
	public SuperclassingElements getSuperclassingAccess() {
		return pSuperclassing;
	}
	
	public ParserRule getSuperclassingRule() {
		return getSuperclassingAccess().getRule();
	}
	
	///* ATTRIBUTE DEFINITIONS */ AttributeKeyword:
	//	'attribute';
	public AttributeKeywordElements getAttributeKeywordAccess() {
		return pAttributeKeyword;
	}
	
	public ParserRule getAttributeKeywordRule() {
		return getAttributeKeywordAccess().getRule();
	}
	
	//AttributeDefKeyword:
	//	AttributeKeyword 'def' | 'value' 'type';
	public AttributeDefKeywordElements getAttributeDefKeywordAccess() {
		return pAttributeDefKeyword;
	}
	
	public ParserRule getAttributeDefKeywordRule() {
		return getAttributeDefKeywordAccess().getRule();
	}
	
	//AttributeDefinition SysML::AttributeDefinition:
	//	AttributeDefDeclaration DefinitionBody;
	public AttributeDefinitionElements getAttributeDefinitionAccess() {
		return pAttributeDefinition;
	}
	
	public ParserRule getAttributeDefinitionRule() {
		return getAttributeDefinitionAccess().getRule();
	}
	
	//fragment AttributeDefDeclaration returns SysML::AttributeDefinition:
	//	DefinitionPrefix? AttributeDefKeyword ClassifierDeclarationCompletion;
	public AttributeDefDeclarationElements getAttributeDefDeclarationAccess() {
		return pAttributeDefDeclaration;
	}
	
	public ParserRule getAttributeDefDeclarationRule() {
		return getAttributeDefDeclarationAccess().getRule();
	}
	
	///* ITEM DEFINITIONS */ ItemKeyword:
	//	'item';
	public ItemKeywordElements getItemKeywordAccess() {
		return pItemKeyword;
	}
	
	public ParserRule getItemKeywordRule() {
		return getItemKeywordAccess().getRule();
	}
	
	//ItemDefKeyword:
	//	ItemKeyword 'def';
	public ItemDefKeywordElements getItemDefKeywordAccess() {
		return pItemDefKeyword;
	}
	
	public ParserRule getItemDefKeywordRule() {
		return getItemDefKeywordAccess().getRule();
	}
	
	//ItemDefinition SysML::ItemDefinition:
	//	ItemDefDeclaration DefinitionBody;
	public ItemDefinitionElements getItemDefinitionAccess() {
		return pItemDefinition;
	}
	
	public ParserRule getItemDefinitionRule() {
		return getItemDefinitionAccess().getRule();
	}
	
	//fragment ItemDefDeclaration returns SysML::ItemDefinition:
	//	DefinitionPrefix? ItemDefKeyword ClassifierDeclarationCompletion;
	public ItemDefDeclarationElements getItemDefDeclarationAccess() {
		return pItemDefDeclaration;
	}
	
	public ParserRule getItemDefDeclarationRule() {
		return getItemDefDeclarationAccess().getRule();
	}
	
	///* PART DEFINITIONS */ PartKeyword:
	//	'part';
	public PartKeywordElements getPartKeywordAccess() {
		return pPartKeyword;
	}
	
	public ParserRule getPartKeywordRule() {
		return getPartKeywordAccess().getRule();
	}
	
	//PartDefKeyword:
	//	PartKeyword 'def' | 'block';
	public PartDefKeywordElements getPartDefKeywordAccess() {
		return pPartDefKeyword;
	}
	
	public ParserRule getPartDefKeywordRule() {
		return getPartDefKeywordAccess().getRule();
	}
	
	//PartDefinition SysML::PartDefinition:
	//	PartDefDeclaration DefinitionBody;
	public PartDefinitionElements getPartDefinitionAccess() {
		return pPartDefinition;
	}
	
	public ParserRule getPartDefinitionRule() {
		return getPartDefinitionAccess().getRule();
	}
	
	//fragment PartDefDeclaration returns SysML::PartDefinition:
	//	DefinitionPrefix? PartDefKeyword ClassifierDeclarationCompletion;
	public PartDefDeclarationElements getPartDefDeclarationAccess() {
		return pPartDefDeclaration;
	}
	
	public ParserRule getPartDefDeclarationRule() {
		return getPartDefDeclarationAccess().getRule();
	}
	
	///* INDIVIDUAL DEFINITIONS */ IndividualKeyword:
	//	'individual';
	public IndividualKeywordElements getIndividualKeywordAccess() {
		return pIndividualKeyword;
	}
	
	public ParserRule getIndividualKeywordRule() {
		return getIndividualKeywordAccess().getRule();
	}
	
	//IndividualDefKeyword:
	//	IndividualKeyword 'def';
	public IndividualDefKeywordElements getIndividualDefKeywordAccess() {
		return pIndividualDefKeyword;
	}
	
	public ParserRule getIndividualDefKeywordRule() {
		return getIndividualDefKeywordAccess().getRule();
	}
	
	//IndividualDefinition SysML::IndividualDefinition:
	//	IndividualDefDeclaration DefinitionBody;
	public IndividualDefinitionElements getIndividualDefinitionAccess() {
		return pIndividualDefinition;
	}
	
	public ParserRule getIndividualDefinitionRule() {
		return getIndividualDefinitionAccess().getRule();
	}
	
	//fragment IndividualDefDeclaration returns SysML::IndividualDefinition:
	//	DefinitionPrefix? IndividualDefKeyword ClassifierDeclarationCompletion
	//	ownedMembership_comp+=LifeClassMembership;
	public IndividualDefDeclarationElements getIndividualDefDeclarationAccess() {
		return pIndividualDefDeclaration;
	}
	
	public ParserRule getIndividualDefDeclarationRule() {
		return getIndividualDefDeclarationAccess().getRule();
	}
	
	//LifeClass SysML::LifeClass:
	//	{SysML::LifeClass};
	public LifeClassElements getLifeClassAccess() {
		return pLifeClass;
	}
	
	public ParserRule getLifeClassRule() {
		return getLifeClassAccess().getRule();
	}
	
	///* INDIVIDUAL DEFINITION MEMBERSHIPS */ LifeClassMembership SysML::Membership:
	//	ownedMemberElement_comp=LifeClass;
	public LifeClassMembershipElements getLifeClassMembershipAccess() {
		return pLifeClassMembership;
	}
	
	public ParserRule getLifeClassMembershipRule() {
		return getLifeClassMembershipAccess().getRule();
	}
	
	///* PORT DEFINITIONS */ PortKeyword:
	//	'port';
	public PortKeywordElements getPortKeywordAccess() {
		return pPortKeyword;
	}
	
	public ParserRule getPortKeywordRule() {
		return getPortKeywordAccess().getRule();
	}
	
	//PortDefKeyword:
	//	PortKeyword 'def' | 'interface' 'block';
	public PortDefKeywordElements getPortDefKeywordAccess() {
		return pPortDefKeyword;
	}
	
	public ParserRule getPortDefKeywordRule() {
		return getPortDefKeywordAccess().getRule();
	}
	
	//PortDefinition SysML::PortDefinition:
	//	PortDefDeclaration DefinitionBody;
	public PortDefinitionElements getPortDefinitionAccess() {
		return pPortDefinition;
	}
	
	public ParserRule getPortDefinitionRule() {
		return getPortDefinitionAccess().getRule();
	}
	
	//fragment PortDefDeclaration returns SysML::PortDefinition:
	//	DefinitionPrefix? PortDefKeyword ClassifierDeclarationCompletion
	//	ownedMembership_comp+=ConjugatedPortDefinitionMember;
	public PortDefDeclarationElements getPortDefDeclarationAccess() {
		return pPortDefDeclaration;
	}
	
	public ParserRule getPortDefDeclarationRule() {
		return getPortDefDeclarationAccess().getRule();
	}
	
	//ConjugatedPortDefinition SysML::ConjugatedPortDefinition:
	//	ownedRelationship_comp+=PortConjugation;
	public ConjugatedPortDefinitionElements getConjugatedPortDefinitionAccess() {
		return pConjugatedPortDefinition;
	}
	
	public ParserRule getConjugatedPortDefinitionRule() {
		return getConjugatedPortDefinitionAccess().getRule();
	}
	
	//PortConjugation SysML::PortConjugation:
	//	{SysML::PortConjugation};
	public PortConjugationElements getPortConjugationAccess() {
		return pPortConjugation;
	}
	
	public ParserRule getPortConjugationRule() {
		return getPortConjugationAccess().getRule();
	}
	
	///* PORT DEFINITION MEMBERSHIPS */ ConjugatedPortDefinitionMember SysML::Membership:
	//	ownedMemberElement_comp=ConjugatedPortDefinition;
	public ConjugatedPortDefinitionMemberElements getConjugatedPortDefinitionMemberAccess() {
		return pConjugatedPortDefinitionMember;
	}
	
	public ParserRule getConjugatedPortDefinitionMemberRule() {
		return getConjugatedPortDefinitionMemberAccess().getRule();
	}
	
	///* CONNECTION DEFINITIONS */ ConnectionKeyword:
	//	'connection';
	public ConnectionKeywordElements getConnectionKeywordAccess() {
		return pConnectionKeyword;
	}
	
	public ParserRule getConnectionKeywordRule() {
		return getConnectionKeywordAccess().getRule();
	}
	
	//ConnectionDefKeyword:
	//	ConnectionKeyword 'def' | 'assoc' 'block';
	public ConnectionDefKeywordElements getConnectionDefKeywordAccess() {
		return pConnectionDefKeyword;
	}
	
	public ParserRule getConnectionDefKeywordRule() {
		return getConnectionDefKeywordAccess().getRule();
	}
	
	//ConnectionDefinition SysML::ConnectionDefinition:
	//	ConnectionDefDeclaration ConnectionDefBody;
	public ConnectionDefinitionElements getConnectionDefinitionAccess() {
		return pConnectionDefinition;
	}
	
	public ParserRule getConnectionDefinitionRule() {
		return getConnectionDefinitionAccess().getRule();
	}
	
	//fragment ConnectionDefDeclaration returns SysML::ConnectionDefinition:
	//	DefinitionPrefix? ConnectionDefKeyword ClassifierDeclarationCompletion;
	public ConnectionDefDeclarationElements getConnectionDefDeclarationAccess() {
		return pConnectionDefDeclaration;
	}
	
	public ParserRule getConnectionDefDeclarationRule() {
		return getConnectionDefDeclarationAccess().getRule();
	}
	
	//fragment ConnectionDefBody returns SysML::Type:
	//	';'
	//	| '{' (documentation_comp+=OwnedDocumentation
	//	| ownedMembership_comp+=NestedDefinitionMember
	//	| ownedMembership_comp+=VariantUsageMember
	//	| ownedFeatureMembership_comp+=ConnectionUsageMember
	//	| ownedFeatureMembership_comp+=EmptySuccessionMember?
	//	ownedFeatureMembership_comp+=IndividualUsageMember
	//	| ownedImport_comp+=Import)* '}';
	public ConnectionDefBodyElements getConnectionDefBodyAccess() {
		return pConnectionDefBody;
	}
	
	public ParserRule getConnectionDefBodyRule() {
		return getConnectionDefBodyAccess().getRule();
	}
	
	//ConnectionEndElement SysML::Feature:
	//	ReferenceEndUsage
	//	| ItemRefUsage
	//	| PartRefUsage
	//	| PortUsage
	//	| ActionRefUsage
	//	| CalculationRefUsage
	//	| StateRefUsage;
	public ConnectionEndElementElements getConnectionEndElementAccess() {
		return pConnectionEndElement;
	}
	
	public ParserRule getConnectionEndElementRule() {
		return getConnectionEndElementAccess().getRule();
	}
	
	///* CONNECTION DEFINITION MEMBERSHIPS */ ConnectionUsageMember SysML::FeatureMembership:
	//	NestedUsageMember | ConnectionEndMember;
	public ConnectionUsageMemberElements getConnectionUsageMemberAccess() {
		return pConnectionUsageMember;
	}
	
	public ParserRule getConnectionUsageMemberRule() {
		return getConnectionUsageMemberAccess().getRule();
	}
	
	//ConnectionEndMember SysML::EndFeatureMembership:
	//	DefinitionMemberPrefix 'end' ownedMemberFeature_comp=ConnectionEndElement;
	public ConnectionEndMemberElements getConnectionEndMemberAccess() {
		return pConnectionEndMember;
	}
	
	public ParserRule getConnectionEndMemberRule() {
		return getConnectionEndMemberAccess().getRule();
	}
	
	///* INTERFACE DEFINITIONS */ InterfaceKeyword:
	//	'interface';
	public InterfaceKeywordElements getInterfaceKeywordAccess() {
		return pInterfaceKeyword;
	}
	
	public ParserRule getInterfaceKeywordRule() {
		return getInterfaceKeywordAccess().getRule();
	}
	
	//InterfaceDefKeyword:
	//	InterfaceKeyword 'def';
	public InterfaceDefKeywordElements getInterfaceDefKeywordAccess() {
		return pInterfaceDefKeyword;
	}
	
	public ParserRule getInterfaceDefKeywordRule() {
		return getInterfaceDefKeywordAccess().getRule();
	}
	
	//InterfaceDefinition SysML::InterfaceDefinition:
	//	InterfaceDefDeclaration InterfaceDefBody;
	public InterfaceDefinitionElements getInterfaceDefinitionAccess() {
		return pInterfaceDefinition;
	}
	
	public ParserRule getInterfaceDefinitionRule() {
		return getInterfaceDefinitionAccess().getRule();
	}
	
	//fragment InterfaceDefDeclaration returns SysML::InterfaceDefinition:
	//	DefinitionPrefix? InterfaceDefKeyword ClassifierDeclarationCompletion;
	public InterfaceDefDeclarationElements getInterfaceDefDeclarationAccess() {
		return pInterfaceDefDeclaration;
	}
	
	public ParserRule getInterfaceDefDeclarationRule() {
		return getInterfaceDefDeclarationAccess().getRule();
	}
	
	//fragment InterfaceDefBody returns SysML::Type:
	//	';'
	//	| '{' (documentation_comp+=OwnedDocumentation
	//	| ownedMembership_comp+=NestedDefinitionMember
	//	| ownedMembership_comp+=VariantUsageMember
	//	| ownedFeatureMembership_comp+=InterfaceUsageMember
	//	| ownedImport_comp+=Import)* '}';
	public InterfaceDefBodyElements getInterfaceDefBodyAccess() {
		return pInterfaceDefBody;
	}
	
	public ParserRule getInterfaceDefBodyRule() {
		return getInterfaceDefBodyAccess().getRule();
	}
	
	///* INTERFACE DEFINITION MEMBERSHIPS */ InterfaceUsageMember SysML::FeatureMembership:
	//	NestedUsageMember | InterfaceEndMember;
	public InterfaceUsageMemberElements getInterfaceUsageMemberAccess() {
		return pInterfaceUsageMember;
	}
	
	public ParserRule getInterfaceUsageMemberRule() {
		return getInterfaceUsageMemberAccess().getRule();
	}
	
	//InterfaceEndMember SysML::EndFeatureMembership:
	//	DefinitionMemberPrefix 'end' ownedMemberFeature_comp=PortEndUsage;
	public InterfaceEndMemberElements getInterfaceEndMemberAccess() {
		return pInterfaceEndMember;
	}
	
	public ParserRule getInterfaceEndMemberRule() {
		return getInterfaceEndMemberAccess().getRule();
	}
	
	///* ACTION DEFINITIONS */ ActionKeyword:
	//	'action';
	public ActionKeywordElements getActionKeywordAccess() {
		return pActionKeyword;
	}
	
	public ParserRule getActionKeywordRule() {
		return getActionKeywordAccess().getRule();
	}
	
	//ActionDefKeyword:
	//	ActionKeyword 'def' | 'activity';
	public ActionDefKeywordElements getActionDefKeywordAccess() {
		return pActionDefKeyword;
	}
	
	public ParserRule getActionDefKeywordRule() {
		return getActionDefKeywordAccess().getRule();
	}
	
	//ActionDefinition SysML::ActionDefinition:
	//	ActionDefDeclaration ActionDefBody;
	public ActionDefinitionElements getActionDefinitionAccess() {
		return pActionDefinition;
	}
	
	public ParserRule getActionDefinitionRule() {
		return getActionDefinitionAccess().getRule();
	}
	
	//fragment ActionDefDeclaration returns SysML::ActionDefinition:
	//	DefinitionPrefix? ActionDefKeyword Identification SuperclassingList? ParameterList?;
	public ActionDefDeclarationElements getActionDefDeclarationAccess() {
		return pActionDefDeclaration;
	}
	
	public ParserRule getActionDefDeclarationRule() {
		return getActionDefDeclarationAccess().getRule();
	}
	
	//fragment ParameterList returns SysML::Type:
	//	'(' (ownedFeatureMembership_comp+=ParameterMember (',' ownedFeatureMembership_comp+=ParameterMember)*)? ')';
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//fragment ActionDefBody returns SysML::Type:
	//	';'
	//	// Note: Using a syntactic predicate here seems to avoid a possible infinite loop
	//	// while incrementally parsing.
	//	| '{' => ActionDefBodyItem* '}';
	public ActionDefBodyElements getActionDefBodyAccess() {
		return pActionDefBody;
	}
	
	public ParserRule getActionDefBodyRule() {
		return getActionDefBodyAccess().getRule();
	}
	
	//fragment ActionDefBodyItem returns SysML::Type:
	//	documentation_comp+=OwnedDocumentation
	//	| ownedMembership_comp+=NestedDefinitionMember
	//	| ownedMembership_comp+=VariantUsageMember
	//	| ownedFeatureMembership_comp+=StructureUsageMember
	//	| ownedFeatureMembership_comp+=EmptySuccessionMember?
	//	ownedFeatureMembership_comp+=IndividualUsageMember
	//	| ownedFeatureMembership_comp+=InitialNodeMember
	//	ownedFeatureMembership_comp+=TargetSuccessionMember*
	//	| ownedFeatureMembership_comp+=EmptySuccessionMember?
	//	ownedFeatureMembership_comp+=(BehaviorUsageMember | ActionNodeMember)
	//	ownedFeatureMembership_comp+=TargetSuccessionMember*
	//	| ownedFeatureMembership_comp+=GuardedSuccessionMember
	//	| ownedImport_comp+=Import;
	public ActionDefBodyItemElements getActionDefBodyItemAccess() {
		return pActionDefBodyItem;
	}
	
	public ParserRule getActionDefBodyItemRule() {
		return getActionDefBodyItemAccess().getRule();
	}
	
	///* ACTION DEFINITION MEMBERSHIPS */ ParameterMember SysML::ParameterMembership:
	//	direction=FeatureDirection? ownedMemberFeature_comp=Parameter;
	public ParameterMemberElements getParameterMemberAccess() {
		return pParameterMember;
	}
	
	public ParserRule getParameterMemberRule() {
		return getParameterMemberAccess().getRule();
	}
	
	//InitialNodeMember SysML::FeatureMembership:
	//	DefinitionMemberPrefix 'first' memberFeature=[SysML::Feature|QualifiedName] ';';
	public InitialNodeMemberElements getInitialNodeMemberAccess() {
		return pInitialNodeMember;
	}
	
	public ParserRule getInitialNodeMemberRule() {
		return getInitialNodeMemberAccess().getRule();
	}
	
	//ActionNodeMember SysML::FeatureMembership:
	//	DefinitionMemberPrefix ownedMemberFeature_comp=ActionNode;
	public ActionNodeMemberElements getActionNodeMemberAccess() {
		return pActionNodeMember;
	}
	
	public ParserRule getActionNodeMemberRule() {
		return getActionNodeMemberAccess().getRule();
	}
	
	//TargetSuccessionMember SysML::FeatureMembership:
	//	DefinitionMemberPrefix ownedMemberFeature_comp=(TargetSuccession | GuardedTargetSuccession | DefaultTargetSuccession)
	//	';';
	public TargetSuccessionMemberElements getTargetSuccessionMemberAccess() {
		return pTargetSuccessionMember;
	}
	
	public ParserRule getTargetSuccessionMemberRule() {
		return getTargetSuccessionMemberAccess().getRule();
	}
	
	//GuardedSuccessionMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=GuardedSuccession ';';
	public GuardedSuccessionMemberElements getGuardedSuccessionMemberAccess() {
		return pGuardedSuccessionMember;
	}
	
	public ParserRule getGuardedSuccessionMemberRule() {
		return getGuardedSuccessionMemberAccess().getRule();
	}
	
	///* CALCULATION DEFINITIONS */ CalculationKeyword:
	//	'calc';
	public CalculationKeywordElements getCalculationKeywordAccess() {
		return pCalculationKeyword;
	}
	
	public ParserRule getCalculationKeywordRule() {
		return getCalculationKeywordAccess().getRule();
	}
	
	//CalculationDefKeyword:
	//	CalculationKeyword 'def';
	public CalculationDefKeywordElements getCalculationDefKeywordAccess() {
		return pCalculationDefKeyword;
	}
	
	public ParserRule getCalculationDefKeywordRule() {
		return getCalculationDefKeywordAccess().getRule();
	}
	
	//CalculationDefinition SysML::CalculationDefinition:
	//	CalculationDefDeclaration (CalculationDefBody
	//	| '=' ownedFeatureMembership_comp+=ExpressionMember ';');
	public CalculationDefinitionElements getCalculationDefinitionAccess() {
		return pCalculationDefinition;
	}
	
	public ParserRule getCalculationDefinitionRule() {
		return getCalculationDefinitionAccess().getRule();
	}
	
	//fragment CalculationDefDeclaration returns SysML::CalculationDefinition:
	//	DefinitionPrefix? CalculationDefKeyword Identification
	//	SuperclassingList? ParameterPart;
	public CalculationDefDeclarationElements getCalculationDefDeclarationAccess() {
		return pCalculationDefDeclaration;
	}
	
	public ParserRule getCalculationDefDeclarationRule() {
		return getCalculationDefDeclarationAccess().getRule();
	}
	
	//fragment ParameterPart returns SysML::Type:
	//	ParameterList (ReturnParameterPart | EmptyReturnParameterPart) | EmptyReturnParameterPart;
	public ParameterPartElements getParameterPartAccess() {
		return pParameterPart;
	}
	
	public ParserRule getParameterPartRule() {
		return getParameterPartAccess().getRule();
	}
	
	//fragment ReturnParameterPart returns SysML::Type:
	//	ownedFeatureMembership_comp+=ReturnParameterMember;
	public ReturnParameterPartElements getReturnParameterPartAccess() {
		return pReturnParameterPart;
	}
	
	public ParserRule getReturnParameterPartRule() {
		return getReturnParameterPartAccess().getRule();
	}
	
	//fragment EmptyReturnParameterPart returns SysML::Type:
	//	ownedFeatureMembership_comp+=EmptyReturnParameterMember;
	public EmptyReturnParameterPartElements getEmptyReturnParameterPartAccess() {
		return pEmptyReturnParameterPart;
	}
	
	public ParserRule getEmptyReturnParameterPartRule() {
		return getEmptyReturnParameterPartAccess().getRule();
	}
	
	//EmptyParameter SysML::Usage:
	//	{SysML::ReferenceUsage};
	public EmptyParameterElements getEmptyParameterAccess() {
		return pEmptyParameter;
	}
	
	public ParserRule getEmptyParameterRule() {
		return getEmptyParameterAccess().getRule();
	}
	
	//fragment CalculationDefBody returns SysML::Type:
	//	';'
	//	| '{' => CalculationDefBodyItem*
	//	ownedFeatureMembership_comp+=ExpressionMember?
	//	'}';
	public CalculationDefBodyElements getCalculationDefBodyAccess() {
		return pCalculationDefBody;
	}
	
	public ParserRule getCalculationDefBodyRule() {
		return getCalculationDefBodyAccess().getRule();
	}
	
	//fragment CalculationDefBodyItem returns SysML::Type:
	//	documentation_comp+=OwnedDocumentation
	//	| ownedMembership_comp+=NestedDefinitionMember
	//	| ownedMembership_comp+=VariantUsageMember
	//	| ownedFeatureMembership_comp+=StructureUsageMember
	//	| ownedFeatureMembership_comp+=InitialNodeMember
	//	ownedFeatureMembership_comp+=TargetSuccessionMember*
	//	| ownedFeatureMembership_comp+=EmptySuccessionMember?
	//	ownedFeatureMembership_comp+=(BehaviorUsageMember | ActionNodeMember)
	//	ownedFeatureMembership_comp+=TargetSuccessionMember*
	//	| ownedFeatureMembership_comp+=GuardedSuccessionMember
	//	| ownedImport_comp+=Import;
	public CalculationDefBodyItemElements getCalculationDefBodyItemAccess() {
		return pCalculationDefBodyItem;
	}
	
	public ParserRule getCalculationDefBodyItemRule() {
		return getCalculationDefBodyItemAccess().getRule();
	}
	
	///* CALCULATION DEFINITION MEMBERSHIPS */ ReturnParameterMember SysML::ReturnParameterMembership:
	//	'return'? ownedMemberParameter_comp=Parameter;
	public ReturnParameterMemberElements getReturnParameterMemberAccess() {
		return pReturnParameterMember;
	}
	
	public ParserRule getReturnParameterMemberRule() {
		return getReturnParameterMemberAccess().getRule();
	}
	
	//EmptyReturnParameterMember SysML::ReturnParameterMembership:
	//	ownedMemberFeature_comp=EmptyParameter;
	public EmptyReturnParameterMemberElements getEmptyReturnParameterMemberAccess() {
		return pEmptyReturnParameterMember;
	}
	
	public ParserRule getEmptyReturnParameterMemberRule() {
		return getEmptyReturnParameterMemberAccess().getRule();
	}
	
	///* STATE DEFINITIONS */ StateKeyword:
	//	'state';
	public StateKeywordElements getStateKeywordAccess() {
		return pStateKeyword;
	}
	
	public ParserRule getStateKeywordRule() {
		return getStateKeywordAccess().getRule();
	}
	
	//StateDefKeyword:
	//	StateKeyword 'def';
	public StateDefKeywordElements getStateDefKeywordAccess() {
		return pStateDefKeyword;
	}
	
	public ParserRule getStateDefKeywordRule() {
		return getStateDefKeywordAccess().getRule();
	}
	
	//StateDefinition SysML::StateDefinition:
	//	StateDefDeclaration StateDefBody;
	public StateDefinitionElements getStateDefinitionAccess() {
		return pStateDefinition;
	}
	
	public ParserRule getStateDefinitionRule() {
		return getStateDefinitionAccess().getRule();
	}
	
	//fragment StateDefDeclaration returns SysML::StateDefinition:
	//	isAbstract?='abstract'? StateDefKeyword Identification SuperclassingList? ParameterList?;
	public StateDefDeclarationElements getStateDefDeclarationAccess() {
		return pStateDefDeclaration;
	}
	
	public ParserRule getStateDefDeclarationRule() {
		return getStateDefDeclarationAccess().getRule();
	}
	
	//fragment StateDefBody returns SysML::Type:
	//	';' | '{' StateDefBodyPart '}';
	public StateDefBodyElements getStateDefBodyAccess() {
		return pStateDefBody;
	}
	
	public ParserRule getStateDefBodyRule() {
		return getStateDefBodyAccess().getRule();
	}
	
	//fragment StateDefBodyPart returns SysML::Type:
	//	(ownedFeatureMembership_comp+=EntryActionMember
	//	ownedFeatureMembership_comp+=EntryTransitionMember*)?
	//	ownedFeatureMembership_comp+=DoActionMember?
	//	ownedFeatureMembership_comp+=ExitActionMember?
	//	// Note: Using a syntactic predicate here seems to avoid a possible infinite loop
	//	// while incrementally parsing.
	//	=> StateDefBodyItem*;
	public StateDefBodyPartElements getStateDefBodyPartAccess() {
		return pStateDefBodyPart;
	}
	
	public ParserRule getStateDefBodyPartRule() {
		return getStateDefBodyPartAccess().getRule();
	}
	
	//fragment StateDefBodyItem returns SysML::Type:
	//	documentation_comp+=OwnedDocumentation
	//	| ownedMembership_comp+=NestedDefinitionMember
	//	| ownedMembership_comp+=VariantUsageMember
	//	| ownedFeatureMembership_comp+=StructureUsageMember
	//	| ownedFeatureMembership_comp+=EmptySuccessionMember?
	//	ownedFeatureMembership_comp+=IndividualUsageMember
	//	| ownedFeatureMembership_comp+=BehaviorUsageMember
	//	ownedFeatureMembership_comp+=TargetTransitionSuccessionMember*
	//	| ownedFeatureMembership_comp+=TransitionStepMember
	//	| ownedImport_comp+=Import;
	public StateDefBodyItemElements getStateDefBodyItemAccess() {
		return pStateDefBodyItem;
	}
	
	public ParserRule getStateDefBodyItemRule() {
		return getStateDefBodyItemAccess().getRule();
	}
	
	//StateActionUsage SysML::ActionUsage:
	//	EmptyActionUsage ';' | PerformedActionUsage ActionDefBody;
	public StateActionUsageElements getStateActionUsageAccess() {
		return pStateActionUsage;
	}
	
	public ParserRule getStateActionUsageRule() {
		return getStateActionUsageAccess().getRule();
	}
	
	//PerformedActionUsage SysML::ActionUsage:
	//	{SysML::PerformActionUsage} PerformActionUsageDeclaration
	//	| {SysML::AcceptActionUsage} AcceptNodeDeclaration
	//	| {SysML::SendActionUsage} SendNodeDeclaration;
	public PerformedActionUsageElements getPerformedActionUsageAccess() {
		return pPerformedActionUsage;
	}
	
	public ParserRule getPerformedActionUsageRule() {
		return getPerformedActionUsageAccess().getRule();
	}
	
	//EmptyActionUsage SysML::ActionUsage:
	//	{SysML::ActionUsage};
	public EmptyActionUsageElements getEmptyActionUsageAccess() {
		return pEmptyActionUsage;
	}
	
	public ParserRule getEmptyActionUsageRule() {
		return getEmptyActionUsageAccess().getRule();
	}
	
	///* STATE DEFINITION MEMBERSHIPS */ EntryActionMember SysML::StateSubactionMembership:
	//	DefinitionMemberPrefix kind=EntryActionKind ownedMemberFeature_comp=StateActionUsage;
	public EntryActionMemberElements getEntryActionMemberAccess() {
		return pEntryActionMember;
	}
	
	public ParserRule getEntryActionMemberRule() {
		return getEntryActionMemberAccess().getRule();
	}
	
	//EntryActionKind SysML::StateSubactionKind:
	//	'entry';
	public EntryActionKindElements getEntryActionKindAccess() {
		return pEntryActionKind;
	}
	
	public ParserRule getEntryActionKindRule() {
		return getEntryActionKindAccess().getRule();
	}
	
	//DoActionMember SysML::StateSubactionMembership:
	//	DefinitionMemberPrefix kind=DoActionKind ownedMemberFeature_comp=StateActionUsage;
	public DoActionMemberElements getDoActionMemberAccess() {
		return pDoActionMember;
	}
	
	public ParserRule getDoActionMemberRule() {
		return getDoActionMemberAccess().getRule();
	}
	
	//DoActionKind SysML::StateSubactionKind:
	//	'do';
	public DoActionKindElements getDoActionKindAccess() {
		return pDoActionKind;
	}
	
	public ParserRule getDoActionKindRule() {
		return getDoActionKindAccess().getRule();
	}
	
	//ExitActionMember SysML::StateSubactionMembership:
	//	DefinitionMemberPrefix kind=ExitActionKind ownedMemberFeature_comp=StateActionUsage;
	public ExitActionMemberElements getExitActionMemberAccess() {
		return pExitActionMember;
	}
	
	public ParserRule getExitActionMemberRule() {
		return getExitActionMemberAccess().getRule();
	}
	
	//ExitActionKind SysML::StateSubactionKind:
	//	'exit';
	public ExitActionKindElements getExitActionKindAccess() {
		return pExitActionKind;
	}
	
	public ParserRule getExitActionKindRule() {
		return getExitActionKindAccess().getRule();
	}
	
	//EntryTransitionMember SysML::FeatureMembership:
	//	DefinitionMemberPrefix (ownedMemberFeature_comp=GuardedTargetSuccession
	//	| 'then' ownedMemberFeature_comp=TransitionSuccession) ';';
	public EntryTransitionMemberElements getEntryTransitionMemberAccess() {
		return pEntryTransitionMember;
	}
	
	public ParserRule getEntryTransitionMemberRule() {
		return getEntryTransitionMemberAccess().getRule();
	}
	
	//TargetTransitionSuccessionMember SysML::FeatureMembership:
	//	DefinitionMemberPrefix ownedMemberFeature_comp=TargetTransitionStep ';';
	public TargetTransitionSuccessionMemberElements getTargetTransitionSuccessionMemberAccess() {
		return pTargetTransitionSuccessionMember;
	}
	
	public ParserRule getTargetTransitionSuccessionMemberRule() {
		return getTargetTransitionSuccessionMemberAccess().getRule();
	}
	
	//TransitionStepMember SysML::FeatureMembership:
	//	DefinitionMemberPrefix ownedMemberFeature_comp=TransitionStep ';';
	public TransitionStepMemberElements getTransitionStepMemberAccess() {
		return pTransitionStepMember;
	}
	
	public ParserRule getTransitionStepMemberRule() {
		return getTransitionStepMemberAccess().getRule();
	}
	
	///* CONSTRAINT DEFINITIONS */ ConstraintKeyword:
	//	'constraint';
	public ConstraintKeywordElements getConstraintKeywordAccess() {
		return pConstraintKeyword;
	}
	
	public ParserRule getConstraintKeywordRule() {
		return getConstraintKeywordAccess().getRule();
	}
	
	//ConstraintDefKeyword:
	//	ConstraintKeyword 'def';
	public ConstraintDefKeywordElements getConstraintDefKeywordAccess() {
		return pConstraintDefKeyword;
	}
	
	public ParserRule getConstraintDefKeywordRule() {
		return getConstraintDefKeywordAccess().getRule();
	}
	
	//ConstraintDefinition SysML::ConstraintDefinition:
	//	ConstraintDefDeclaration ConstraintDefBody;
	public ConstraintDefinitionElements getConstraintDefinitionAccess() {
		return pConstraintDefinition;
	}
	
	public ParserRule getConstraintDefinitionRule() {
		return getConstraintDefinitionAccess().getRule();
	}
	
	//fragment ConstraintDefDeclaration returns SysML::ConstraintDefinition:
	//	DefinitionPrefix? ConstraintDefKeyword Identification
	//	SuperclassingList? ParameterList? EmptyReturnParameterPart;
	public ConstraintDefDeclarationElements getConstraintDefDeclarationAccess() {
		return pConstraintDefDeclaration;
	}
	
	public ParserRule getConstraintDefDeclarationRule() {
		return getConstraintDefDeclarationAccess().getRule();
	}
	
	//fragment ConstraintDefBody returns SysML::Type:
	//	';' | '{' ConstraintDefMembers '}';
	public ConstraintDefBodyElements getConstraintDefBodyAccess() {
		return pConstraintDefBody;
	}
	
	public ParserRule getConstraintDefBodyRule() {
		return getConstraintDefBodyAccess().getRule();
	}
	
	//fragment ConstraintDefMembers returns SysML::Type:
	//	DefinitionBodyItem*
	//	ownedFeatureMembership_comp+=ConstraintExpressionMember?;
	public ConstraintDefMembersElements getConstraintDefMembersAccess() {
		return pConstraintDefMembers;
	}
	
	public ParserRule getConstraintDefMembersRule() {
		return getConstraintDefMembersAccess().getRule();
	}
	
	///* CONSTRAINT DEFINITION MEMBERSHIPS */ ConstraintExpressionMember SysML::FeatureMembership:
	//	DefinitionMemberPrefix ownedMemberFeature_comp=Expression;
	public ConstraintExpressionMemberElements getConstraintExpressionMemberAccess() {
		return pConstraintExpressionMember;
	}
	
	public ParserRule getConstraintExpressionMemberRule() {
		return getConstraintExpressionMemberAccess().getRule();
	}
	
	///* REQUIREMENT DEFINITIONS */ RequirementKeyword:
	//	'requirement';
	public RequirementKeywordElements getRequirementKeywordAccess() {
		return pRequirementKeyword;
	}
	
	public ParserRule getRequirementKeywordRule() {
		return getRequirementKeywordAccess().getRule();
	}
	
	//RequirementDefKeyword:
	//	RequirementKeyword 'def';
	public RequirementDefKeywordElements getRequirementDefKeywordAccess() {
		return pRequirementDefKeyword;
	}
	
	public ParserRule getRequirementDefKeywordRule() {
		return getRequirementDefKeywordAccess().getRule();
	}
	
	//RequirementDefinition SysML::RequirementDefinition:
	//	RequirementDefDeclaration RequirementDefBody;
	public RequirementDefinitionElements getRequirementDefinitionAccess() {
		return pRequirementDefinition;
	}
	
	public ParserRule getRequirementDefinitionRule() {
		return getRequirementDefinitionAccess().getRule();
	}
	
	//fragment RequirementDefDeclaration returns SysML::RequirementDefinition:
	//	DefinitionPrefix? RequirementDefKeyword Identification
	//	SuperclassingList? ParameterList? EmptyReturnParameterPart;
	public RequirementDefDeclarationElements getRequirementDefDeclarationAccess() {
		return pRequirementDefDeclaration;
	}
	
	public ParserRule getRequirementDefDeclarationRule() {
		return getRequirementDefDeclarationAccess().getRule();
	}
	
	//fragment RequirementDefBody returns SysML::Type:
	//	';' | '{' => RequirementDefBodyItem* '}';
	public RequirementDefBodyElements getRequirementDefBodyAccess() {
		return pRequirementDefBody;
	}
	
	public ParserRule getRequirementDefBodyRule() {
		return getRequirementDefBodyAccess().getRule();
	}
	
	//fragment RequirementDefBodyItem returns SysML::Type:
	//	DefinitionBodyItem
	//	| ownedFeatureMembership_comp+=SubjectMember
	//	| ownedFeatureMembership_comp+=RequirementConstraintMember;
	public RequirementDefBodyItemElements getRequirementDefBodyItemAccess() {
		return pRequirementDefBodyItem;
	}
	
	public ParserRule getRequirementDefBodyItemRule() {
		return getRequirementDefBodyItemAccess().getRule();
	}
	
	//SubjectUsage SysML::ReferenceUsage:
	//	'subject' Usage;
	public SubjectUsageElements getSubjectUsageAccess() {
		return pSubjectUsage;
	}
	
	public ParserRule getSubjectUsageRule() {
		return getSubjectUsageAccess().getRule();
	}
	
	//RequirementConstraintUsage SysML::ConstraintUsage:
	//	ownedRelationship_comp+=Subset UsageSpecialization*
	//	ConstraintParameterPart RequirementDefBody
	//	| 'constraint' UsageDeclaration?
	//	ConstraintParameterPart ConstraintDefBody;
	public RequirementConstraintUsageElements getRequirementConstraintUsageAccess() {
		return pRequirementConstraintUsage;
	}
	
	public ParserRule getRequirementConstraintUsageRule() {
		return getRequirementConstraintUsageAccess().getRule();
	}
	
	///* REQUIREMENT DEFINITION MEMBERSHIPS */ SubjectMember SysML::SubjectMembership:
	//	DefinitionMemberPrefix ownedSubjectParameter_comp=SubjectUsage;
	public SubjectMemberElements getSubjectMemberAccess() {
		return pSubjectMember;
	}
	
	public ParserRule getSubjectMemberRule() {
		return getSubjectMemberAccess().getRule();
	}
	
	//RequirementConstraintMember SysML::RequirementConstraintMembership:
	//	DefinitionMemberPrefix kind=RequirementConstraintKind
	//	ownedMemberFeature_comp=RequirementConstraintUsage;
	public RequirementConstraintMemberElements getRequirementConstraintMemberAccess() {
		return pRequirementConstraintMember;
	}
	
	public ParserRule getRequirementConstraintMemberRule() {
		return getRequirementConstraintMemberAccess().getRule();
	}
	
	//enum RequirementConstraintKind returns SysML::RequirementConstraintKind:
	//	assumption='assume' | requirement='require';
	public RequirementConstraintKindElements getRequirementConstraintKindAccess() {
		return eRequirementConstraintKind;
	}
	
	public EnumRule getRequirementConstraintKindRule() {
		return getRequirementConstraintKindAccess().getRule();
	}
	
	///* CASE DEFINITIONS */ CaseKeyword:
	//	'case';
	public CaseKeywordElements getCaseKeywordAccess() {
		return pCaseKeyword;
	}
	
	public ParserRule getCaseKeywordRule() {
		return getCaseKeywordAccess().getRule();
	}
	
	//CaseDefKeyword:
	//	CaseKeyword 'def';
	public CaseDefKeywordElements getCaseDefKeywordAccess() {
		return pCaseDefKeyword;
	}
	
	public ParserRule getCaseDefKeywordRule() {
		return getCaseDefKeywordAccess().getRule();
	}
	
	//CaseDefinition SysML::CaseDefinition:
	//	CaseDefDeclaration CaseDefBody;
	public CaseDefinitionElements getCaseDefinitionAccess() {
		return pCaseDefinition;
	}
	
	public ParserRule getCaseDefinitionRule() {
		return getCaseDefinitionAccess().getRule();
	}
	
	//fragment CaseDefDeclaration returns SysML::CaseDefinition:
	//	DefinitionPrefix? CaseDefKeyword Identification
	//	SuperclassingList? ParameterPart;
	public CaseDefDeclarationElements getCaseDefDeclarationAccess() {
		return pCaseDefDeclaration;
	}
	
	public ParserRule getCaseDefDeclarationRule() {
		return getCaseDefDeclarationAccess().getRule();
	}
	
	//fragment CaseDefBody returns SysML::Type:
	//	';'
	//	| '{' => CaseDefBodyItem*
	//	ownedFeatureMembership_comp+=ExpressionMember?
	//	'}';
	public CaseDefBodyElements getCaseDefBodyAccess() {
		return pCaseDefBody;
	}
	
	public ParserRule getCaseDefBodyRule() {
		return getCaseDefBodyAccess().getRule();
	}
	
	//fragment CaseDefBodyItem returns SysML::Type:
	//	CalculationDefBodyItem
	//	| ownedFeatureMembership_comp+=SubjectMember
	//	| ownedFeatureMembership_comp+=ObjectiveMember;
	public CaseDefBodyItemElements getCaseDefBodyItemAccess() {
		return pCaseDefBodyItem;
	}
	
	public ParserRule getCaseDefBodyItemRule() {
		return getCaseDefBodyItemAccess().getRule();
	}
	
	//ObjectiveRequirementUsage SysML::RequirementUsage:
	//	RequirementUsageDeclaration RequirementDefBody;
	public ObjectiveRequirementUsageElements getObjectiveRequirementUsageAccess() {
		return pObjectiveRequirementUsage;
	}
	
	public ParserRule getObjectiveRequirementUsageRule() {
		return getObjectiveRequirementUsageAccess().getRule();
	}
	
	///* CASE DEFINITION MEMBERSHIPS */ ObjectiveMember SysML::ObjectiveMembership:
	//	DefinitionMemberPrefix 'objective' ownedObjectiveRequirement_comp=ObjectiveRequirementUsage;
	public ObjectiveMemberElements getObjectiveMemberAccess() {
		return pObjectiveMember;
	}
	
	public ParserRule getObjectiveMemberRule() {
		return getObjectiveMemberAccess().getRule();
	}
	
	///* ANALYSIS CASE DEFINITIONS */ AnalysisCaseKeyword:
	//	'analysis';
	public AnalysisCaseKeywordElements getAnalysisCaseKeywordAccess() {
		return pAnalysisCaseKeyword;
	}
	
	public ParserRule getAnalysisCaseKeywordRule() {
		return getAnalysisCaseKeywordAccess().getRule();
	}
	
	//AnalysisCaseDefKeyword:
	//	AnalysisCaseKeyword 'def';
	public AnalysisCaseDefKeywordElements getAnalysisCaseDefKeywordAccess() {
		return pAnalysisCaseDefKeyword;
	}
	
	public ParserRule getAnalysisCaseDefKeywordRule() {
		return getAnalysisCaseDefKeywordAccess().getRule();
	}
	
	//AnalysisCaseDefinition SysML::AnalysisCaseDefinition:
	//	AnalysisCaseDefDeclaration CaseDefBody;
	public AnalysisCaseDefinitionElements getAnalysisCaseDefinitionAccess() {
		return pAnalysisCaseDefinition;
	}
	
	public ParserRule getAnalysisCaseDefinitionRule() {
		return getAnalysisCaseDefinitionAccess().getRule();
	}
	
	//fragment AnalysisCaseDefDeclaration returns SysML::AnalysisCaseDefinition:
	//	DefinitionPrefix? AnalysisCaseDefKeyword Identification
	//	SuperclassingList? ParameterPart;
	public AnalysisCaseDefDeclarationElements getAnalysisCaseDefDeclarationAccess() {
		return pAnalysisCaseDefDeclaration;
	}
	
	public ParserRule getAnalysisCaseDefDeclarationRule() {
		return getAnalysisCaseDefDeclarationAccess().getRule();
	}
	
	///* VERIFICATION CASE DEFINITIONS */ VerificationCaseKeyword:
	//	'verification';
	public VerificationCaseKeywordElements getVerificationCaseKeywordAccess() {
		return pVerificationCaseKeyword;
	}
	
	public ParserRule getVerificationCaseKeywordRule() {
		return getVerificationCaseKeywordAccess().getRule();
	}
	
	//VerificationCaseDefKeyword:
	//	VerificationCaseKeyword 'def';
	public VerificationCaseDefKeywordElements getVerificationCaseDefKeywordAccess() {
		return pVerificationCaseDefKeyword;
	}
	
	public ParserRule getVerificationCaseDefKeywordRule() {
		return getVerificationCaseDefKeywordAccess().getRule();
	}
	
	//VerificationCaseDefinition SysML::VerificationCaseDefinition:
	//	VerificationCaseDefDeclaration CaseDefBody;
	public VerificationCaseDefinitionElements getVerificationCaseDefinitionAccess() {
		return pVerificationCaseDefinition;
	}
	
	public ParserRule getVerificationCaseDefinitionRule() {
		return getVerificationCaseDefinitionAccess().getRule();
	}
	
	//fragment VerificationCaseDefDeclaration returns SysML::VerificationCaseDefinition:
	//	DefinitionPrefix? VerificationCaseDefKeyword Identification
	//	SuperclassingList? ParameterPart;
	public VerificationCaseDefDeclarationElements getVerificationCaseDefDeclarationAccess() {
		return pVerificationCaseDefDeclaration;
	}
	
	public ParserRule getVerificationCaseDefDeclarationRule() {
		return getVerificationCaseDefDeclarationAccess().getRule();
	}
	
	///* VIEW DEFINITION */ ViewKeyword:
	//	'view';
	public ViewKeywordElements getViewKeywordAccess() {
		return pViewKeyword;
	}
	
	public ParserRule getViewKeywordRule() {
		return getViewKeywordAccess().getRule();
	}
	
	//ViewDefKeyword:
	//	ViewKeyword 'def';
	public ViewDefKeywordElements getViewDefKeywordAccess() {
		return pViewDefKeyword;
	}
	
	public ParserRule getViewDefKeywordRule() {
		return getViewDefKeywordAccess().getRule();
	}
	
	//ViewDefinition SysML::ViewDefinition:
	//	ViewDefDeclaration DefinitionBody;
	public ViewDefinitionElements getViewDefinitionAccess() {
		return pViewDefinition;
	}
	
	public ParserRule getViewDefinitionRule() {
		return getViewDefinitionAccess().getRule();
	}
	
	//fragment ViewDefDeclaration returns SysML::ViewDefinition:
	//	DefinitionPrefix? ViewDefKeyword ClassifierDeclarationCompletion;
	public ViewDefDeclarationElements getViewDefDeclarationAccess() {
		return pViewDefDeclaration;
	}
	
	public ParserRule getViewDefDeclarationRule() {
		return getViewDefDeclarationAccess().getRule();
	}
	
	///* VIEWPOINT DEFINITION */ ViewpointKeyword:
	//	'viewpoint';
	public ViewpointKeywordElements getViewpointKeywordAccess() {
		return pViewpointKeyword;
	}
	
	public ParserRule getViewpointKeywordRule() {
		return getViewpointKeywordAccess().getRule();
	}
	
	//ViewpointDefKeyword:
	//	ViewpointKeyword 'def';
	public ViewpointDefKeywordElements getViewpointDefKeywordAccess() {
		return pViewpointDefKeyword;
	}
	
	public ParserRule getViewpointDefKeywordRule() {
		return getViewpointDefKeywordAccess().getRule();
	}
	
	//ViewpointDefinition SysML::ViewpointDefinition:
	//	ViewpointDefDeclaration RequirementDefBody;
	public ViewpointDefinitionElements getViewpointDefinitionAccess() {
		return pViewpointDefinition;
	}
	
	public ParserRule getViewpointDefinitionRule() {
		return getViewpointDefinitionAccess().getRule();
	}
	
	//fragment ViewpointDefDeclaration returns SysML::ViewpointDefinition:
	//	DefinitionPrefix? ViewpointDefKeyword Identification
	//	SuperclassingList? ParameterList? EmptyReturnParameterPart;
	public ViewpointDefDeclarationElements getViewpointDefDeclarationAccess() {
		return pViewpointDefDeclaration;
	}
	
	public ParserRule getViewpointDefDeclarationRule() {
		return getViewpointDefDeclarationAccess().getRule();
	}
	
	///* RENDERING DEFINITION */ RenderingKeyword:
	//	'rendering';
	public RenderingKeywordElements getRenderingKeywordAccess() {
		return pRenderingKeyword;
	}
	
	public ParserRule getRenderingKeywordRule() {
		return getRenderingKeywordAccess().getRule();
	}
	
	//RenderingDefKeyword:
	//	RenderingKeyword 'def';
	public RenderingDefKeywordElements getRenderingDefKeywordAccess() {
		return pRenderingDefKeyword;
	}
	
	public ParserRule getRenderingDefKeywordRule() {
		return getRenderingDefKeywordAccess().getRule();
	}
	
	//RenderingDefinition SysML::RenderingDefinition:
	//	RenderingDefDeclaration DefinitionBody;
	public RenderingDefinitionElements getRenderingDefinitionAccess() {
		return pRenderingDefinition;
	}
	
	public ParserRule getRenderingDefinitionRule() {
		return getRenderingDefinitionAccess().getRule();
	}
	
	//fragment RenderingDefDeclaration returns SysML::RenderingDefinition:
	//	DefinitionPrefix? RenderingDefKeyword ClassifierDeclarationCompletion;
	public RenderingDefDeclarationElements getRenderingDefDeclarationAccess() {
		return pRenderingDefDeclaration;
	}
	
	public ParserRule getRenderingDefDeclarationRule() {
		return getRenderingDefDeclarationAccess().getRule();
	}
	
	///* USAGES */ fragment UsagePrefix returns SysML::Usage:
	//	isAbstract?='abstract' | isVariation?='variation';
	public UsagePrefixElements getUsagePrefixAccess() {
		return pUsagePrefix;
	}
	
	public ParserRule getUsagePrefixRule() {
		return getUsagePrefixAccess().getRule();
	}
	
	//fragment Usage returns SysML::Usage:
	//	UsageDeclaration? UsageCompletion;
	public UsageElements getUsageAccess() {
		return pUsage;
	}
	
	public ParserRule getUsageRule() {
		return getUsageAccess().getRule();
	}
	
	//fragment UsageDeclaration returns SysML::Feature:
	//	Identification UsageSpecializationPart?
	//	| (Subsettings | Redefinitions) UsageSpecializationPart?
	//	| Typings MultiplicityPart? UsageSpecialization*
	//	| MultiplicityPart UsageSpecialization*;
	public UsageDeclarationElements getUsageDeclarationAccess() {
		return pUsageDeclaration;
	}
	
	public ParserRule getUsageDeclarationRule() {
		return getUsageDeclarationAccess().getRule();
	}
	
	//fragment UsageSpecializationPart returns SysML::Feature:
	//	(Subsettings | Redefinitions | Typings MultiplicityPart?) UsageSpecialization*
	//	| MultiplicityPart UsageSpecialization*;
	public UsageSpecializationPartElements getUsageSpecializationPartAccess() {
		return pUsageSpecializationPart;
	}
	
	public ParserRule getUsageSpecializationPartRule() {
		return getUsageSpecializationPartAccess().getRule();
	}
	
	//fragment MultiplicityPart returns SysML::Feature:
	//	ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered' isNonunique?='nonunique'?
	//	| isNonunique?='nonunique' isOrdered?='ordered'?)?;
	public MultiplicityPartElements getMultiplicityPartAccess() {
		return pMultiplicityPart;
	}
	
	public ParserRule getMultiplicityPartRule() {
		return getMultiplicityPartAccess().getRule();
	}
	
	//Multiplicity SysML::MultiplicityRange:
	//	'[' (ownedFeatureMembership_comp+=NaturalLiteralMember '..')?
	//	ownedFeatureMembership_comp+=UnlimitedNaturalLiteralMember ']';
	public MultiplicityElements getMultiplicityAccess() {
		return pMultiplicity;
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}
	
	//fragment UsageSpecialization returns SysML::Feature:
	//	Typings | Subsettings | Redefinitions;
	public UsageSpecializationElements getUsageSpecializationAccess() {
		return pUsageSpecialization;
	}
	
	public ParserRule getUsageSpecializationRule() {
		return getUsageSpecializationAccess().getRule();
	}
	
	//fragment Typings returns SysML::Feature:
	//	DefinedBy (',' ownedRelationship_comp+=FeatureTyping)*;
	public TypingsElements getTypingsAccess() {
		return pTypings;
	}
	
	public ParserRule getTypingsRule() {
		return getTypingsAccess().getRule();
	}
	
	//fragment DefinedBy returns SysML::Feature:
	//	DefinedByKeyword ownedRelationship_comp+=FeatureTyping;
	public DefinedByElements getDefinedByAccess() {
		return pDefinedBy;
	}
	
	public ParserRule getDefinedByRule() {
		return getDefinedByAccess().getRule();
	}
	
	//DefinedByKeyword:
	//	':' | 'defined' 'by';
	public DefinedByKeywordElements getDefinedByKeywordAccess() {
		return pDefinedByKeyword;
	}
	
	public ParserRule getDefinedByKeywordRule() {
		return getDefinedByKeywordAccess().getRule();
	}
	
	//FeatureTyping SysML::FeatureTyping:
	//	type=[SysML::Type|QualifiedName];
	public FeatureTypingElements getFeatureTypingAccess() {
		return pFeatureTyping;
	}
	
	public ParserRule getFeatureTypingRule() {
		return getFeatureTypingAccess().getRule();
	}
	
	//fragment SubsettingPart returns SysML::Feature:
	//	(Subsets (',' ownedRelationship_comp+=Subset)*
	//	| Redefines (',' ownedRelationship_comp+=Redefinition)*)*;
	public SubsettingPartElements getSubsettingPartAccess() {
		return pSubsettingPart;
	}
	
	public ParserRule getSubsettingPartRule() {
		return getSubsettingPartAccess().getRule();
	}
	
	//fragment Subsettings returns SysML::Feature:
	//	Subsets (',' ownedRelationship_comp+=Subset)*;
	public SubsettingsElements getSubsettingsAccess() {
		return pSubsettings;
	}
	
	public ParserRule getSubsettingsRule() {
		return getSubsettingsAccess().getRule();
	}
	
	//fragment Subsets returns SysML::Feature:
	//	SubsetsKeyword ownedRelationship_comp+=Subset;
	public SubsetsElements getSubsetsAccess() {
		return pSubsets;
	}
	
	public ParserRule getSubsetsRule() {
		return getSubsetsAccess().getRule();
	}
	
	//SubsetsKeyword:
	//	':>' | 'subsets';
	public SubsetsKeywordElements getSubsetsKeywordAccess() {
		return pSubsetsKeyword;
	}
	
	public ParserRule getSubsetsKeywordRule() {
		return getSubsetsKeywordAccess().getRule();
	}
	
	//Subset SysML::Subsetting:
	//	subsettedFeature=[SysML::Feature|QualifiedName];
	public SubsetElements getSubsetAccess() {
		return pSubset;
	}
	
	public ParserRule getSubsetRule() {
		return getSubsetAccess().getRule();
	}
	
	//fragment Redefinitions returns SysML::Feature:
	//	Redefines (',' ownedRelationship_comp+=Redefinition)*;
	public RedefinitionsElements getRedefinitionsAccess() {
		return pRedefinitions;
	}
	
	public ParserRule getRedefinitionsRule() {
		return getRedefinitionsAccess().getRule();
	}
	
	//fragment Redefines returns SysML::Feature:
	//	RedefinesKeyword ownedRelationship_comp+=Redefinition;
	public RedefinesElements getRedefinesAccess() {
		return pRedefines;
	}
	
	public ParserRule getRedefinesRule() {
		return getRedefinesAccess().getRule();
	}
	
	//RedefinesKeyword:
	//	':>>' | 'redefines';
	public RedefinesKeywordElements getRedefinesKeywordAccess() {
		return pRedefinesKeyword;
	}
	
	public ParserRule getRedefinesKeywordRule() {
		return getRedefinesKeywordAccess().getRule();
	}
	
	//Redefinition SysML::Redefinition:
	//	redefinedFeature=[SysML::Feature|QualifiedName];
	public RedefinitionElements getRedefinitionAccess() {
		return pRedefinition;
	}
	
	public ParserRule getRedefinitionRule() {
		return getRedefinitionAccess().getRule();
	}
	
	//fragment UsageCompletion returns SysML::Usage:
	//	ValuePart? DefinitionBody;
	public UsageCompletionElements getUsageCompletionAccess() {
		return pUsageCompletion;
	}
	
	public ParserRule getUsageCompletionRule() {
		return getUsageCompletionAccess().getRule();
	}
	
	//fragment ValuePart returns SysML::Feature:
	//	'=' ownedFeatureMembership_comp+=FeatureValue;
	public ValuePartElements getValuePartAccess() {
		return pValuePart;
	}
	
	public ParserRule getValuePartRule() {
		return getValuePartAccess().getRule();
	}
	
	//FeatureValue SysML::FeatureValue:
	//	value_comp=Expression;
	public FeatureValueElements getFeatureValueAccess() {
		return pFeatureValue;
	}
	
	public ParserRule getFeatureValueRule() {
		return getFeatureValueAccess().getRule();
	}
	
	///* USAGE MEMBERSHIPS */ MultiplicityMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=Multiplicity;
	public MultiplicityMemberElements getMultiplicityMemberAccess() {
		return pMultiplicityMember;
	}
	
	public ParserRule getMultiplicityMemberRule() {
		return getMultiplicityMemberAccess().getRule();
	}
	
	//NaturalLiteralMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=NaturalLiteralExpression;
	public NaturalLiteralMemberElements getNaturalLiteralMemberAccess() {
		return pNaturalLiteralMember;
	}
	
	public ParserRule getNaturalLiteralMemberRule() {
		return getNaturalLiteralMemberAccess().getRule();
	}
	
	//UnlimitedNaturalLiteralMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=UnlimitedNaturalLiteralExpression;
	public UnlimitedNaturalLiteralMemberElements getUnlimitedNaturalLiteralMemberAccess() {
		return pUnlimitedNaturalLiteralMember;
	}
	
	public ParserRule getUnlimitedNaturalLiteralMemberRule() {
		return getUnlimitedNaturalLiteralMemberAccess().getRule();
	}
	
	///* PARAMETERS */ Parameter SysML::Usage:
	//	{SysML::ReferenceUsage} (ParameterDeclaration | ReferenceUsageKeyword ParameterDeclaration?) | {SysML::ItemUsage}
	//	ItemUsageKeyword ParameterDeclaration?
	//	| {SysML::PartUsage} PartUsageKeyword ParameterDeclaration?
	//	| {SysML::ActionUsage} ActionUsageKeyword ParameterDeclaration?
	//	| {SysML::CalculationUsage} CalculationUsageKeyword ParameterDeclaration?
	//	| {SysML::ConstraintUsage} ConstraintUsageKeyword ParameterDeclaration?;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//fragment ParameterDeclaration returns SysML::Usage:
	//	Identification ParameterSpecializationPart?
	//	| ParameterSpecializationPart;
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return pParameterDeclaration;
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}
	
	//fragment ParameterSpecializationPart returns SysML::Feature:
	//	(Subsets | Redefines | DefinedBy MultiplicityPart?) ParameterSpecialization*
	//	| MultiplicityPart ParameterSpecialization*;
	public ParameterSpecializationPartElements getParameterSpecializationPartAccess() {
		return pParameterSpecializationPart;
	}
	
	public ParserRule getParameterSpecializationPartRule() {
		return getParameterSpecializationPartAccess().getRule();
	}
	
	//fragment ParameterSpecialization returns SysML::Feature:
	//	DefinedBy | Subsets | Redefines;
	public ParameterSpecializationElements getParameterSpecializationAccess() {
		return pParameterSpecialization;
	}
	
	public ParserRule getParameterSpecializationRule() {
		return getParameterSpecializationAccess().getRule();
	}
	
	///* REFERENCE USAGES */ ReferenceKeyword:
	//	'ref';
	public ReferenceKeywordElements getReferenceKeywordAccess() {
		return pReferenceKeyword;
	}
	
	public ParserRule getReferenceKeywordRule() {
		return getReferenceKeywordAccess().getRule();
	}
	
	//ReferenceUsageKeyword:
	//	ReferenceKeyword;
	public ReferenceUsageKeywordElements getReferenceUsageKeywordAccess() {
		return pReferenceUsageKeyword;
	}
	
	public ParserRule getReferenceUsageKeywordRule() {
		return getReferenceUsageKeywordAccess().getRule();
	}
	
	//ReferenceUsage SysML::ReferenceUsage:
	//	UsagePrefix? ReferenceUsageKeyword Usage;
	public ReferenceUsageElements getReferenceUsageAccess() {
		return pReferenceUsage;
	}
	
	public ParserRule getReferenceUsageRule() {
		return getReferenceUsageAccess().getRule();
	}
	
	//ReferenceEndUsage SysML::ReferenceUsage:
	//	UsagePrefix? ReferenceUsageKeyword? Usage;
	public ReferenceEndUsageElements getReferenceEndUsageAccess() {
		return pReferenceEndUsage;
	}
	
	public ParserRule getReferenceEndUsageRule() {
		return getReferenceEndUsageAccess().getRule();
	}
	
	//// TODO: Find a better way to handle variant references that using ReferenceUsage.
	//ReferenceVariantUsage SysML::ReferenceUsage:
	//	ReferenceUsage
	//	| ownedRelationship_comp+=Subset
	//	UsageSpecialization* DefinitionBody;
	public ReferenceVariantUsageElements getReferenceVariantUsageAccess() {
		return pReferenceVariantUsage;
	}
	
	public ParserRule getReferenceVariantUsageRule() {
		return getReferenceVariantUsageAccess().getRule();
	}
	
	///* ATTRIBUTE USAGES */ AttributeUsageKeyword:
	//	AttributeKeyword | 'value';
	public AttributeUsageKeywordElements getAttributeUsageKeywordAccess() {
		return pAttributeUsageKeyword;
	}
	
	public ParserRule getAttributeUsageKeywordRule() {
		return getAttributeUsageKeywordAccess().getRule();
	}
	
	//fragment AttributeDeclaration returns SysML::AttributeUsage:
	//	UsagePrefix? AttributeUsageKeyword UsageDeclaration;
	public AttributeDeclarationElements getAttributeDeclarationAccess() {
		return pAttributeDeclaration;
	}
	
	public ParserRule getAttributeDeclarationRule() {
		return getAttributeDeclarationAccess().getRule();
	}
	
	//AttributeUsage SysML::AttributeUsage:
	//	UsagePrefix? (AttributeUsageKeyword Usage | UsageDeclaration UsageCompletion);
	public AttributeUsageElements getAttributeUsageAccess() {
		return pAttributeUsage;
	}
	
	public ParserRule getAttributeUsageRule() {
		return getAttributeUsageAccess().getRule();
	}
	
	//AttributeVariantUsage SysML::AttributeUsage:
	//	UsagePrefix? AttributeUsageKeyword Usage;
	public AttributeVariantUsageElements getAttributeVariantUsageAccess() {
		return pAttributeVariantUsage;
	}
	
	public ParserRule getAttributeVariantUsageRule() {
		return getAttributeVariantUsageAccess().getRule();
	}
	
	///* ITEM USAGES */ ItemUsageKeyword:
	//	ItemKeyword;
	public ItemUsageKeywordElements getItemUsageKeywordAccess() {
		return pItemUsageKeyword;
	}
	
	public ParserRule getItemUsageKeywordRule() {
		return getItemUsageKeywordAccess().getRule();
	}
	
	//fragment ItemDeclaration returns SysML::ItemUsage:
	//	UsagePrefix? ItemUsageKeyword UsageDeclaration?;
	public ItemDeclarationElements getItemDeclarationAccess() {
		return pItemDeclaration;
	}
	
	public ParserRule getItemDeclarationRule() {
		return getItemDeclarationAccess().getRule();
	}
	
	//ItemUsage SysML::ItemUsage:
	//	UsagePrefix? ItemUsageKeyword Usage;
	public ItemUsageElements getItemUsageAccess() {
		return pItemUsage;
	}
	
	public ParserRule getItemUsageRule() {
		return getItemUsageAccess().getRule();
	}
	
	//ItemRefUsage SysML::ItemUsage:
	//	UsagePrefix? ('ref' ItemUsageKeyword | isComposite?=ItemUsageKeyword) Usage;
	public ItemRefUsageElements getItemRefUsageAccess() {
		return pItemRefUsage;
	}
	
	public ParserRule getItemRefUsageRule() {
		return getItemRefUsageAccess().getRule();
	}
	
	///* PART USAGES */ PartUsageKeyword:
	//	PartKeyword;
	public PartUsageKeywordElements getPartUsageKeywordAccess() {
		return pPartUsageKeyword;
	}
	
	public ParserRule getPartUsageKeywordRule() {
		return getPartUsageKeywordAccess().getRule();
	}
	
	//fragment PartDeclaration returns SysML::PartUsage:
	//	UsagePrefix? PartUsageKeyword UsageDeclaration?;
	public PartDeclarationElements getPartDeclarationAccess() {
		return pPartDeclaration;
	}
	
	public ParserRule getPartDeclarationRule() {
		return getPartDeclarationAccess().getRule();
	}
	
	//PartUsage SysML::PartUsage:
	//	UsagePrefix? PartUsageKeyword Usage;
	public PartUsageElements getPartUsageAccess() {
		return pPartUsage;
	}
	
	public ParserRule getPartUsageRule() {
		return getPartUsageAccess().getRule();
	}
	
	//PartRefUsage SysML::PartUsage:
	//	UsagePrefix? ('ref' PartUsageKeyword | isComposite?=PartUsageKeyword) Usage;
	public PartRefUsageElements getPartRefUsageAccess() {
		return pPartRefUsage;
	}
	
	public ParserRule getPartRefUsageRule() {
		return getPartRefUsageAccess().getRule();
	}
	
	///* INDIVIDUAL USAGES */ IndividualUsageKeyword:
	//	IndividualKeyword;
	public IndividualUsageKeywordElements getIndividualUsageKeywordAccess() {
		return pIndividualUsageKeyword;
	}
	
	public ParserRule getIndividualUsageKeywordRule() {
		return getIndividualUsageKeywordAccess().getRule();
	}
	
	//TimeSliceKeyword:
	//	'timeslice';
	public TimeSliceKeywordElements getTimeSliceKeywordAccess() {
		return pTimeSliceKeyword;
	}
	
	public ParserRule getTimeSliceKeywordRule() {
		return getTimeSliceKeywordAccess().getRule();
	}
	
	//SnapshotKeyword:
	//	'snapshot';
	public SnapshotKeywordElements getSnapshotKeywordAccess() {
		return pSnapshotKeyword;
	}
	
	public ParserRule getSnapshotKeywordRule() {
		return getSnapshotKeywordAccess().getRule();
	}
	
	//IndividualUsage SysML::IndividualUsage:
	//	UsagePrefix? IndividualUsageKeyword Usage;
	public IndividualUsageElements getIndividualUsageAccess() {
		return pIndividualUsage;
	}
	
	public ParserRule getIndividualUsageRule() {
		return getIndividualUsageAccess().getRule();
	}
	
	//IndividualRefUsage SysML::IndividualUsage:
	//	UsagePrefix? ('ref' IndividualUsageKeyword | isComposite?=IndividualUsageKeyword) Usage;
	public IndividualRefUsageElements getIndividualRefUsageAccess() {
		return pIndividualRefUsage;
	}
	
	public ParserRule getIndividualRefUsageRule() {
		return getIndividualRefUsageAccess().getRule();
	}
	
	//TimeSliceUsage SysML::IndividualUsage:
	//	UsagePrefix? TimeSliceKeyword
	//	UsageDeclaration? ownedFeatureMembership_comp+=TimeSliceFeatureMember
	//	UsageCompletion;
	public TimeSliceUsageElements getTimeSliceUsageAccess() {
		return pTimeSliceUsage;
	}
	
	public ParserRule getTimeSliceUsageRule() {
		return getTimeSliceUsageAccess().getRule();
	}
	
	//TimeSliceRefUsage SysML::IndividualUsage:
	//	UsagePrefix? ('ref' TimeSliceKeyword | isComposite?=TimeSliceKeyword) UsageDeclaration?
	//	ownedFeatureMembership_comp+=TimeSliceFeatureMember
	//	UsageCompletion;
	public TimeSliceRefUsageElements getTimeSliceRefUsageAccess() {
		return pTimeSliceRefUsage;
	}
	
	public ParserRule getTimeSliceRefUsageRule() {
		return getTimeSliceRefUsageAccess().getRule();
	}
	
	//TimeSliceFeature SysML::TimeSliceFeature:
	//	{SysML::TimeSliceFeature};
	public TimeSliceFeatureElements getTimeSliceFeatureAccess() {
		return pTimeSliceFeature;
	}
	
	public ParserRule getTimeSliceFeatureRule() {
		return getTimeSliceFeatureAccess().getRule();
	}
	
	//SnapshotUsage SysML::IndividualUsage:
	//	UsagePrefix? SnapshotKeyword
	//	UsageDeclaration? ownedFeatureMembership_comp+=SnapshotFeatureMember
	//	UsageCompletion;
	public SnapshotUsageElements getSnapshotUsageAccess() {
		return pSnapshotUsage;
	}
	
	public ParserRule getSnapshotUsageRule() {
		return getSnapshotUsageAccess().getRule();
	}
	
	//SnapshotRefUsage SysML::IndividualUsage:
	//	UsagePrefix? ('ref' SnapshotKeyword | isComposite?=SnapshotKeyword) UsageDeclaration?
	//	ownedFeatureMembership_comp+=TimeSliceFeatureMember
	//	UsageCompletion;
	public SnapshotRefUsageElements getSnapshotRefUsageAccess() {
		return pSnapshotRefUsage;
	}
	
	public ParserRule getSnapshotRefUsageRule() {
		return getSnapshotRefUsageAccess().getRule();
	}
	
	//SnapshotFeature SysML::SnapshotFeature:
	//	{SysML::SnapshotFeature};
	public SnapshotFeatureElements getSnapshotFeatureAccess() {
		return pSnapshotFeature;
	}
	
	public ParserRule getSnapshotFeatureRule() {
		return getSnapshotFeatureAccess().getRule();
	}
	
	///* INDIVIDUAL MEMBERSHIPS */ TimeSliceFeatureMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=TimeSliceFeature;
	public TimeSliceFeatureMemberElements getTimeSliceFeatureMemberAccess() {
		return pTimeSliceFeatureMember;
	}
	
	public ParserRule getTimeSliceFeatureMemberRule() {
		return getTimeSliceFeatureMemberAccess().getRule();
	}
	
	//SnapshotFeatureMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=SnapshotFeature;
	public SnapshotFeatureMemberElements getSnapshotFeatureMemberAccess() {
		return pSnapshotFeatureMember;
	}
	
	public ParserRule getSnapshotFeatureMemberRule() {
		return getSnapshotFeatureMemberAccess().getRule();
	}
	
	///* PORT USAGES */ PortUsageKeyword:
	//	PortKeyword;
	public PortUsageKeywordElements getPortUsageKeywordAccess() {
		return pPortUsageKeyword;
	}
	
	public ParserRule getPortUsageKeywordRule() {
		return getPortUsageKeywordAccess().getRule();
	}
	
	//PortUsage SysML::PortUsage:
	//	UsagePrefix? PortUsageKeyword PortUsageDeclaration UsageCompletion;
	public PortUsageElements getPortUsageAccess() {
		return pPortUsage;
	}
	
	public ParserRule getPortUsageRule() {
		return getPortUsageAccess().getRule();
	}
	
	//PortEndUsage SysML::PortUsage:
	//	UsagePrefix? PortUsageKeyword? PortUsageDeclaration UsageCompletion;
	public PortEndUsageElements getPortEndUsageAccess() {
		return pPortEndUsage;
	}
	
	public ParserRule getPortEndUsageRule() {
		return getPortEndUsageAccess().getRule();
	}
	
	//fragment PortUsageDeclaration returns SysML::Usage:
	//	Identification PortTypePart? SubsettingPart
	//	| PortTypePart SubsettingPart
	//	| RedefinesKeyword ownedRelationship_comp+=Redefinition PortTypePart? SubsettingPart;
	public PortUsageDeclarationElements getPortUsageDeclarationAccess() {
		return pPortUsageDeclaration;
	}
	
	public ParserRule getPortUsageDeclarationRule() {
		return getPortUsageDeclarationAccess().getRule();
	}
	
	//fragment PortTypePart returns SysML::Feature:
	//	DefinedByKeyword ((ownedRelationship_comp+=FeatureTyping | '~' ownedRelationship_comp+=ConjugatedPortTyping) (','
	//	ownedRelationship_comp+=FeatureTyping)* | 'any') MultiplicityPart?
	//	| MultiplicityPart;
	public PortTypePartElements getPortTypePartAccess() {
		return pPortTypePart;
	}
	
	public ParserRule getPortTypePartRule() {
		return getPortTypePartAccess().getRule();
	}
	
	//ConjugatedPortTyping SysML::ConjugatedPortTyping:
	//	portDefinition=[SysML::PortDefinition|QualifiedName];
	public ConjugatedPortTypingElements getConjugatedPortTypingAccess() {
		return pConjugatedPortTyping;
	}
	
	public ParserRule getConjugatedPortTypingRule() {
		return getConjugatedPortTypingAccess().getRule();
	}
	
	///* CONNECTION USAGES */ ConnectorKeyword:
	//	'connect';
	public ConnectorKeywordElements getConnectorKeywordAccess() {
		return pConnectorKeyword;
	}
	
	public ParserRule getConnectorKeywordRule() {
		return getConnectorKeywordAccess().getRule();
	}
	
	//Connector SysML::ConnectionUsage:
	//	UsagePrefix? ConnectorKeyword ConnectorPart ConnectionDefBody;
	public ConnectorElements getConnectorAccess() {
		return pConnector;
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}
	
	//ConnectionUsageKeyword:
	//	ConnectionKeyword | 'link';
	public ConnectionUsageKeywordElements getConnectionUsageKeywordAccess() {
		return pConnectionUsageKeyword;
	}
	
	public ParserRule getConnectionUsageKeywordRule() {
		return getConnectionUsageKeywordAccess().getRule();
	}
	
	//ConnectionUsage SysML::ConnectionUsage:
	//	UsagePrefix? ConnectionUsageKeyword UsageDeclaration? (ConnectorKeyword ConnectorPart)? ConnectionDefBody;
	public ConnectionUsageElements getConnectionUsageAccess() {
		return pConnectionUsage;
	}
	
	public ParserRule getConnectionUsageRule() {
		return getConnectionUsageAccess().getRule();
	}
	
	//fragment ConnectorPart returns SysML::ConnectionUsage:
	//	ownedFeatureMembership_comp+=ConnectorEndMember 'to' ownedFeatureMembership_comp+=ConnectorEndMember
	//	| '(' ownedFeatureMembership_comp+=ConnectorEndMember ',' ownedFeatureMembership_comp+=ConnectorEndMember (','
	//	ownedFeatureMembership_comp+=ConnectorEndMember)*
	//	')';
	public ConnectorPartElements getConnectorPartAccess() {
		return pConnectorPart;
	}
	
	public ParserRule getConnectorPartRule() {
		return getConnectorPartAccess().getRule();
	}
	
	//ConnectorEnd SysML::Feature:
	//	ownedRelationship_comp+=Subset ownedFeatureMembership_comp+=MultiplicityMember?;
	public ConnectorEndElements getConnectorEndAccess() {
		return pConnectorEnd;
	}
	
	public ParserRule getConnectorEndRule() {
		return getConnectorEndAccess().getRule();
	}
	
	//MultiplicitySourceEnd SysML::Feature:
	//	{SysML::SourceEnd} ownedFeatureMembership_comp+=MultiplicityMember?;
	public MultiplicitySourceEndElements getMultiplicitySourceEndAccess() {
		return pMultiplicitySourceEnd;
	}
	
	public ParserRule getMultiplicitySourceEndRule() {
		return getMultiplicitySourceEndAccess().getRule();
	}
	
	//EmptySourceEnd SysML::Feature:
	//	{SysML::SourceEnd};
	public EmptySourceEndElements getEmptySourceEndAccess() {
		return pEmptySourceEnd;
	}
	
	public ParserRule getEmptySourceEndRule() {
		return getEmptySourceEndAccess().getRule();
	}
	
	//EmptyTargetEnd SysML::Feature:
	//	{SysML::TargetEnd};
	public EmptyTargetEndElements getEmptyTargetEndAccess() {
		return pEmptyTargetEnd;
	}
	
	public ParserRule getEmptyTargetEndRule() {
		return getEmptyTargetEndAccess().getRule();
	}
	
	///* CONNECTION MEMBERSHIPS */ ConnectorEndMember SysML::EndFeatureMembership:
	//	(memberName=Name '=>')? ownedMemberFeature_comp=ConnectorEnd;
	public ConnectorEndMemberElements getConnectorEndMemberAccess() {
		return pConnectorEndMember;
	}
	
	public ParserRule getConnectorEndMemberRule() {
		return getConnectorEndMemberAccess().getRule();
	}
	
	//MultiplicitySourceEndMember SysML::EndFeatureMembership:
	//	ownedMemberFeature_comp=MultiplicitySourceEnd;
	public MultiplicitySourceEndMemberElements getMultiplicitySourceEndMemberAccess() {
		return pMultiplicitySourceEndMember;
	}
	
	public ParserRule getMultiplicitySourceEndMemberRule() {
		return getMultiplicitySourceEndMemberAccess().getRule();
	}
	
	//EmptySourceEndMember SysML::EndFeatureMembership:
	//	ownedMemberFeature_comp=EmptySourceEnd;
	public EmptySourceEndMemberElements getEmptySourceEndMemberAccess() {
		return pEmptySourceEndMember;
	}
	
	public ParserRule getEmptySourceEndMemberRule() {
		return getEmptySourceEndMemberAccess().getRule();
	}
	
	//EmptyTargetEndMember SysML::EndFeatureMembership:
	//	ownedMemberFeature_comp=EmptyTargetEnd;
	public EmptyTargetEndMemberElements getEmptyTargetEndMemberAccess() {
		return pEmptyTargetEndMember;
	}
	
	public ParserRule getEmptyTargetEndMemberRule() {
		return getEmptyTargetEndMemberAccess().getRule();
	}
	
	///* INTERFACE USAGES */ InterfaceUsageKeyword:
	//	InterfaceKeyword;
	public InterfaceUsageKeywordElements getInterfaceUsageKeywordAccess() {
		return pInterfaceUsageKeyword;
	}
	
	public ParserRule getInterfaceUsageKeywordRule() {
		return getInterfaceUsageKeywordAccess().getRule();
	}
	
	//InterfaceUsage SysML::InterfaceUsage:
	//	UsagePrefix? InterfaceUsageKeyword InterfaceUsageDeclaration InterfaceDefBody;
	public InterfaceUsageElements getInterfaceUsageAccess() {
		return pInterfaceUsage;
	}
	
	public ParserRule getInterfaceUsageRule() {
		return getInterfaceUsageAccess().getRule();
	}
	
	//fragment InterfaceUsageDeclaration returns SysML::InterfaceUsage:
	//	UsageDeclaration? (ConnectorKeyword ConnectorPart)? | ConnectorPart;
	public InterfaceUsageDeclarationElements getInterfaceUsageDeclarationAccess() {
		return pInterfaceUsageDeclaration;
	}
	
	public ParserRule getInterfaceUsageDeclarationRule() {
		return getInterfaceUsageDeclarationAccess().getRule();
	}
	
	///* BINDING CONNECTORS */ BindingKeyword:
	//	'bind';
	public BindingKeywordElements getBindingKeywordAccess() {
		return pBindingKeyword;
	}
	
	public ParserRule getBindingKeywordRule() {
		return getBindingKeywordAccess().getRule();
	}
	
	//BindingConnector SysML::BindingConnector:
	//	isAbstract?='abstract'? BindingKeyword (UsageDeclaration 'as')?
	//	ownedFeatureMembership_comp+=ConnectorEndMember '=' ownedFeatureMembership_comp+=ConnectorEndMember
	//	DefinitionBody;
	public BindingConnectorElements getBindingConnectorAccess() {
		return pBindingConnector;
	}
	
	public ParserRule getBindingConnectorRule() {
		return getBindingConnectorAccess().getRule();
	}
	
	///* SUCCESSIONS */ SuccessionKeyword:
	//	'succession';
	public SuccessionKeywordElements getSuccessionKeywordAccess() {
		return pSuccessionKeyword;
	}
	
	public ParserRule getSuccessionKeywordRule() {
		return getSuccessionKeywordAccess().getRule();
	}
	
	//Succession SysML::Succession:
	//	isAbstract?='abstract'? SuccessionKeyword SuccessionDeclaration ConnectionDefBody;
	public SuccessionElements getSuccessionAccess() {
		return pSuccession;
	}
	
	public ParserRule getSuccessionRule() {
		return getSuccessionAccess().getRule();
	}
	
	//fragment SuccessionDeclaration returns SysML::Succession:
	//	(UsageDeclaration? 'first')?
	//	ownedFeatureMembership_comp+=ConnectorEndMember 'then' ownedFeatureMembership_comp+=ConnectorEndMember;
	public SuccessionDeclarationElements getSuccessionDeclarationAccess() {
		return pSuccessionDeclaration;
	}
	
	public ParserRule getSuccessionDeclarationRule() {
		return getSuccessionDeclarationAccess().getRule();
	}
	
	//TargetSuccession SysML::Succession:
	//	'then' ownedFeatureMembership_comp+=MultiplicitySourceEndMember ownedFeatureMembership_comp+=ConnectorEndMember;
	public TargetSuccessionElements getTargetSuccessionAccess() {
		return pTargetSuccession;
	}
	
	public ParserRule getTargetSuccessionRule() {
		return getTargetSuccessionAccess().getRule();
	}
	
	//EmptySuccession SysML::Succession:
	//	'then' ownedFeatureMembership_comp+=MultiplicitySourceEndMember ownedFeatureMembership_comp+=EmptyTargetEndMember;
	public EmptySuccessionElements getEmptySuccessionAccess() {
		return pEmptySuccession;
	}
	
	public ParserRule getEmptySuccessionRule() {
		return getEmptySuccessionAccess().getRule();
	}
	
	//GuardedSuccession SysML::TransitionUsage:
	//	SuccessionKeyword (UsageDeclaration? 'first')?
	//	ownedFeatureMembership_comp+=TransitionSourceMember
	//	ownedFeatureMembership_comp+=GuardExpressionMember
	//	'then' ownedFeatureMembership_comp+=TransitionSuccessionMember;
	public GuardedSuccessionElements getGuardedSuccessionAccess() {
		return pGuardedSuccession;
	}
	
	public ParserRule getGuardedSuccessionRule() {
		return getGuardedSuccessionAccess().getRule();
	}
	
	//GuardedTargetSuccession SysML::TransitionUsage:
	//	ownedFeatureMembership_comp+=GuardExpressionMember
	//	'then' ownedFeatureMembership_comp+=TransitionSuccessionMember;
	public GuardedTargetSuccessionElements getGuardedTargetSuccessionAccess() {
		return pGuardedTargetSuccession;
	}
	
	public ParserRule getGuardedTargetSuccessionRule() {
		return getGuardedTargetSuccessionAccess().getRule();
	}
	
	//DefaultTargetSuccession SysML::TransitionUsage:
	//	'else' ownedFeatureMembership_comp+=TransitionSuccessionMember;
	public DefaultTargetSuccessionElements getDefaultTargetSuccessionAccess() {
		return pDefaultTargetSuccession;
	}
	
	public ParserRule getDefaultTargetSuccessionRule() {
		return getDefaultTargetSuccessionAccess().getRule();
	}
	
	///* ITEM FLOWS */ ItemFlowKeyword:
	//	'stream';
	public ItemFlowKeywordElements getItemFlowKeywordAccess() {
		return pItemFlowKeyword;
	}
	
	public ParserRule getItemFlowKeywordRule() {
		return getItemFlowKeywordAccess().getRule();
	}
	
	//ItemFlow SysML::ItemFlow:
	//	isAbstract?='abstract'? ItemFlowKeyword ItemFlowDeclaration DefinitionBody;
	public ItemFlowElements getItemFlowAccess() {
		return pItemFlow;
	}
	
	public ParserRule getItemFlowRule() {
		return getItemFlowAccess().getRule();
	}
	
	//SuccessionItemFlowKeyword:
	//	'flow';
	public SuccessionItemFlowKeywordElements getSuccessionItemFlowKeywordAccess() {
		return pSuccessionItemFlowKeyword;
	}
	
	public ParserRule getSuccessionItemFlowKeywordRule() {
		return getSuccessionItemFlowKeywordAccess().getRule();
	}
	
	//SuccessionItemFlow SysML::SuccessionItemFlow:
	//	isAbstract?='abstract'? SuccessionItemFlowKeyword ItemFlowDeclaration DefinitionBody;
	public SuccessionItemFlowElements getSuccessionItemFlowAccess() {
		return pSuccessionItemFlow;
	}
	
	public ParserRule getSuccessionItemFlowRule() {
		return getSuccessionItemFlowAccess().getRule();
	}
	
	//fragment ItemFlowDeclaration returns SysML::ItemFlow:
	//	(UsageDeclaration? ('of' ownedFeatureMembership_comp+=ItemFeatureMember
	//	| ownedFeatureMembership_comp+=EmptyItemFeatureMember) 'from'
	//	| ownedFeatureMembership_comp+=EmptyItemFeatureMember) ownedFeatureMembership_comp+=ItemFlowEndMember 'to'
	//	ownedFeatureMembership_comp+=ItemFlowEndMember;
	public ItemFlowDeclarationElements getItemFlowDeclarationAccess() {
		return pItemFlowDeclaration;
	}
	
	public ParserRule getItemFlowDeclarationRule() {
		return getItemFlowDeclarationAccess().getRule();
	}
	
	//ItemFeatureTyping SysML::ItemFeature:
	//	ownedRelationship_comp+=FeatureTyping ownedFeatureMembership_comp+=MultiplicityMember?;
	public ItemFeatureTypingElements getItemFeatureTypingAccess() {
		return pItemFeatureTyping;
	}
	
	public ParserRule getItemFeatureTypingRule() {
		return getItemFeatureTypingAccess().getRule();
	}
	
	//EmptyItemFeature SysML::ItemFeature:
	//	{SysML::ItemFeature};
	public EmptyItemFeatureElements getEmptyItemFeatureAccess() {
		return pEmptyItemFeature;
	}
	
	public ParserRule getEmptyItemFeatureRule() {
		return getEmptyItemFeatureAccess().getRule();
	}
	
	//ItemFlowEnd SysML::ItemFlowEnd:
	//	ownedFeatureMembership_comp+=ItemFlowFeatureMember;
	public ItemFlowEndElements getItemFlowEndAccess() {
		return pItemFlowEnd;
	}
	
	public ParserRule getItemFlowEndRule() {
		return getItemFlowEndAccess().getRule();
	}
	
	//ItemFlowFeature SysML::ItemFlowFeature:
	//	ownedRelationship_comp+=Redefinition;
	public ItemFlowFeatureElements getItemFlowFeatureAccess() {
		return pItemFlowFeature;
	}
	
	public ParserRule getItemFlowFeatureRule() {
		return getItemFlowFeatureAccess().getRule();
	}
	
	///* ITEM FLOW MEMBERSHIPS */ ItemFeatureMember SysML::FeatureMembership:
	//	(memberName=Name DefinedByKeyword)? ownedMemberFeature_comp=ItemFeatureTyping;
	public ItemFeatureMemberElements getItemFeatureMemberAccess() {
		return pItemFeatureMember;
	}
	
	public ParserRule getItemFeatureMemberRule() {
		return getItemFeatureMemberAccess().getRule();
	}
	
	//ItemFlowEndMember SysML::EndFeatureMembership:
	//	ownedMemberFeature_comp=ItemFlowEnd;
	public ItemFlowEndMemberElements getItemFlowEndMemberAccess() {
		return pItemFlowEndMember;
	}
	
	public ParserRule getItemFlowEndMemberRule() {
		return getItemFlowEndMemberAccess().getRule();
	}
	
	//ItemFlowFeatureMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=ItemFlowFeature;
	public ItemFlowFeatureMemberElements getItemFlowFeatureMemberAccess() {
		return pItemFlowFeatureMember;
	}
	
	public ParserRule getItemFlowFeatureMemberRule() {
		return getItemFlowFeatureMemberAccess().getRule();
	}
	
	//EmptyItemFeatureMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=EmptyItemFeature;
	public EmptyItemFeatureMemberElements getEmptyItemFeatureMemberAccess() {
		return pEmptyItemFeatureMember;
	}
	
	public ParserRule getEmptyItemFeatureMemberRule() {
		return getEmptyItemFeatureMemberAccess().getRule();
	}
	
	///* ACTION USAGES */ ActionUsageKeyword:
	//	ActionKeyword;
	public ActionUsageKeywordElements getActionUsageKeywordAccess() {
		return pActionUsageKeyword;
	}
	
	public ParserRule getActionUsageKeywordRule() {
		return getActionUsageKeywordAccess().getRule();
	}
	
	//fragment ActionDeclaration returns SysML::ActionUsage:
	//	UsagePrefix? ActionUsageKeyword ActionUsageDeclaration;
	public ActionDeclarationElements getActionDeclarationAccess() {
		return pActionDeclaration;
	}
	
	public ParserRule getActionDeclarationRule() {
		return getActionDeclarationAccess().getRule();
	}
	
	//ActionUsage SysML::ActionUsage:
	//	ActionDeclaration ActionDefBody;
	public ActionUsageElements getActionUsageAccess() {
		return pActionUsage;
	}
	
	public ParserRule getActionUsageRule() {
		return getActionUsageAccess().getRule();
	}
	
	//ActionRefUsage SysML::ActionUsage:
	//	UsagePrefix? ('ref' ActionUsageKeyword | isComposite?=ActionUsageKeyword) ActionUsageDeclaration ActionDefBody;
	public ActionRefUsageElements getActionRefUsageAccess() {
		return pActionRefUsage;
	}
	
	public ParserRule getActionRefUsageRule() {
		return getActionRefUsageAccess().getRule();
	}
	
	//fragment ActionUsageDeclaration returns SysML::Step:
	//	UsageDeclaration? (ValuePart | ActionParameterList)?;
	public ActionUsageDeclarationElements getActionUsageDeclarationAccess() {
		return pActionUsageDeclaration;
	}
	
	public ParserRule getActionUsageDeclarationRule() {
		return getActionUsageDeclarationAccess().getRule();
	}
	
	//fragment ActionParameterList returns SysML::Type:
	//	'(' (ActionArgument (',' ActionArgument)*)? ')';
	public ActionParameterListElements getActionParameterListAccess() {
		return pActionParameterList;
	}
	
	public ParserRule getActionParameterListRule() {
		return getActionParameterListAccess().getRule();
	}
	
	//fragment ActionArgument returns SysML::Type:
	//	ownedFeatureMembership_comp+=ActionParameterMember
	//	| ownedFeatureMembership_comp+=(ParameterMember | DirectionParameterMember)
	//	ownedFeatureMembership_comp+=ActionParameterFlowMember;
	public ActionArgumentElements getActionArgumentAccess() {
		return pActionArgument;
	}
	
	public ParserRule getActionArgumentRule() {
		return getActionArgumentAccess().getRule();
	}
	
	//ActionParameter SysML::Usage:
	//	Parameter ValuePart? | {SysML::ReferenceUsage} ValuePart;
	public ActionParameterElements getActionParameterAccess() {
		return pActionParameter;
	}
	
	public ParserRule getActionParameterRule() {
		return getActionParameterAccess().getRule();
	}
	
	//ActionParameterFlow SysML::ItemFlow:
	//	(ItemFlowKeyword | {SysML::SuccessionItemFlow} SuccessionItemFlowKeyword)
	//	ownedFeatureMembership_comp+=EmptyItemFeatureMember
	//	'from' ownedFeatureMembership_comp+=ItemFlowEndMember;
	public ActionParameterFlowElements getActionParameterFlowAccess() {
		return pActionParameterFlow;
	}
	
	public ParserRule getActionParameterFlowRule() {
		return getActionParameterFlowAccess().getRule();
	}
	
	//PerformActionUsage SysML::PerformActionUsage:
	//	UsagePrefix? 'perform' PerformActionUsageDeclaration ActionDefBody;
	public PerformActionUsageElements getPerformActionUsageAccess() {
		return pPerformActionUsage;
	}
	
	public ParserRule getPerformActionUsageRule() {
		return getPerformActionUsageAccess().getRule();
	}
	
	//fragment PerformActionUsageDeclaration returns SysML::ActionUsage:
	//	(ownedRelationship_comp+=Subset UsageSpecialization*
	//	| ActionKeyword UsageDeclaration?) (ValuePart | ActionParameterList)?;
	public PerformActionUsageDeclarationElements getPerformActionUsageDeclarationAccess() {
		return pPerformActionUsageDeclaration;
	}
	
	public ParserRule getPerformActionUsageDeclarationRule() {
		return getPerformActionUsageDeclarationAccess().getRule();
	}
	
	///* ACTION NODES */ ActionNode SysML::ActionUsage:
	//	SendNode | AcceptNode | ControlNode;
	public ActionNodeElements getActionNodeAccess() {
		return pActionNode;
	}
	
	public ParserRule getActionNodeRule() {
		return getActionNodeAccess().getRule();
	}
	
	//AcceptNode SysML::AcceptActionUsage:
	//	UsagePrefix? AcceptNodeDeclaration ActionDefBody;
	public AcceptNodeElements getAcceptNodeAccess() {
		return pAcceptNode;
	}
	
	public ParserRule getAcceptNodeRule() {
		return getAcceptNodeAccess().getRule();
	}
	
	//fragment AcceptNodeDeclaration returns SysML::ActionUsage:
	//	ownedFeatureMembership_comp+=EmptyParameterMember
	//	'accept' UsageDeclaration? '(' ownedFeatureMembership_comp+=ItemFeatureMember ')';
	public AcceptNodeDeclarationElements getAcceptNodeDeclarationAccess() {
		return pAcceptNodeDeclaration;
	}
	
	public ParserRule getAcceptNodeDeclarationRule() {
		return getAcceptNodeDeclarationAccess().getRule();
	}
	
	//SendNode SysML::SendActionUsage:
	//	UsagePrefix? SendNodeDeclaration ActionDefBody;
	public SendNodeElements getSendNodeAccess() {
		return pSendNode;
	}
	
	public ParserRule getSendNodeRule() {
		return getSendNodeAccess().getRule();
	}
	
	//fragment SendNodeDeclaration returns SysML::ActionUsage:
	//	ownedFeatureMembership_comp+=EmptyParameterMember ownedFeatureMembership_comp+=EmptyItemFeatureMember
	//	'send' (UsageDeclaration 'of')? ownedFeatureMembership_comp+=ExpressionMember
	//	'to' ownedFeatureMembership_comp+=ExpressionMember;
	public SendNodeDeclarationElements getSendNodeDeclarationAccess() {
		return pSendNodeDeclaration;
	}
	
	public ParserRule getSendNodeDeclarationRule() {
		return getSendNodeDeclarationAccess().getRule();
	}
	
	//ControlNode SysML::ControlNode:
	//	MergeNode
	//	| DecisionNode
	//	| JoinNode
	//	| ForkNode;
	public ControlNodeElements getControlNodeAccess() {
		return pControlNode;
	}
	
	public ParserRule getControlNodeRule() {
		return getControlNodeAccess().getRule();
	}
	
	//MergeNode SysML::MergeNode:
	//	UsagePrefix? isComposite?='merge' UsageDeclaration? ';';
	public MergeNodeElements getMergeNodeAccess() {
		return pMergeNode;
	}
	
	public ParserRule getMergeNodeRule() {
		return getMergeNodeAccess().getRule();
	}
	
	//DecisionNode SysML::DecisionNode:
	//	UsagePrefix? isComposite?='decide' UsageDeclaration? ';';
	public DecisionNodeElements getDecisionNodeAccess() {
		return pDecisionNode;
	}
	
	public ParserRule getDecisionNodeRule() {
		return getDecisionNodeAccess().getRule();
	}
	
	//JoinNode SysML::JoinNode:
	//	UsagePrefix? isComposite?='join' UsageDeclaration? ';';
	public JoinNodeElements getJoinNodeAccess() {
		return pJoinNode;
	}
	
	public ParserRule getJoinNodeRule() {
		return getJoinNodeAccess().getRule();
	}
	
	//ForkNode SysML::ForkNode:
	//	UsagePrefix? isComposite?='fork' UsageDeclaration? ';';
	public ForkNodeElements getForkNodeAccess() {
		return pForkNode;
	}
	
	public ParserRule getForkNodeRule() {
		return getForkNodeAccess().getRule();
	}
	
	///* ACTION MEMBERSHIPS */ ActionParameterMember SysML::ParameterMembership:
	//	direction=FeatureDirection? ownedMemberParameter_comp=ActionParameter;
	public ActionParameterMemberElements getActionParameterMemberAccess() {
		return pActionParameterMember;
	}
	
	public ParserRule getActionParameterMemberRule() {
		return getActionParameterMemberAccess().getRule();
	}
	
	//ActionParameterFlowMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=ActionParameterFlow;
	public ActionParameterFlowMemberElements getActionParameterFlowMemberAccess() {
		return pActionParameterFlowMember;
	}
	
	public ParserRule getActionParameterFlowMemberRule() {
		return getActionParameterFlowMemberAccess().getRule();
	}
	
	//EmptySuccessionMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=EmptySuccession;
	public EmptySuccessionMemberElements getEmptySuccessionMemberAccess() {
		return pEmptySuccessionMember;
	}
	
	public ParserRule getEmptySuccessionMemberRule() {
		return getEmptySuccessionMemberAccess().getRule();
	}
	
	//DirectionParameterMember SysML::ParameterMembership:
	//	direction=FeatureDirection? ownedMemberParameter_comp=EmptyParameter;
	public DirectionParameterMemberElements getDirectionParameterMemberAccess() {
		return pDirectionParameterMember;
	}
	
	public ParserRule getDirectionParameterMemberRule() {
		return getDirectionParameterMemberAccess().getRule();
	}
	
	//EmptyParameterMember SysML::ParameterMembership:
	//	ownedMemberParameter_comp=EmptyParameter;
	public EmptyParameterMemberElements getEmptyParameterMemberAccess() {
		return pEmptyParameterMember;
	}
	
	public ParserRule getEmptyParameterMemberRule() {
		return getEmptyParameterMemberAccess().getRule();
	}
	
	///* CALCULATION USAGES */ CalculationUsageKeyword:
	//	CalculationKeyword;
	public CalculationUsageKeywordElements getCalculationUsageKeywordAccess() {
		return pCalculationUsageKeyword;
	}
	
	public ParserRule getCalculationUsageKeywordRule() {
		return getCalculationUsageKeywordAccess().getRule();
	}
	
	//fragment CalculationDeclaration returns SysML::CalculationUsage:
	//	UsagePrefix? CalculationUsageKeyword CalculationUsageDeclaration;
	public CalculationDeclarationElements getCalculationDeclarationAccess() {
		return pCalculationDeclaration;
	}
	
	public ParserRule getCalculationDeclarationRule() {
		return getCalculationDeclarationAccess().getRule();
	}
	
	//CalculationUsage SysML::CalculationUsage:
	//	CalculationDeclaration CalculationDefBody;
	public CalculationUsageElements getCalculationUsageAccess() {
		return pCalculationUsage;
	}
	
	public ParserRule getCalculationUsageRule() {
		return getCalculationUsageAccess().getRule();
	}
	
	//CalculationRefUsage SysML::CalculationUsage:
	//	UsagePrefix? ('ref' CalculationUsageKeyword | isComposite?=CalculationUsageKeyword) CalculationUsageDeclaration
	//	CalculationDefBody;
	public CalculationRefUsageElements getCalculationRefUsageAccess() {
		return pCalculationRefUsage;
	}
	
	public ParserRule getCalculationRefUsageRule() {
		return getCalculationRefUsageAccess().getRule();
	}
	
	//fragment CalculationUsageDeclaration returns SysML::Step:
	//	UsageDeclaration? CalculationParameterPart;
	public CalculationUsageDeclarationElements getCalculationUsageDeclarationAccess() {
		return pCalculationUsageDeclaration;
	}
	
	public ParserRule getCalculationUsageDeclarationRule() {
		return getCalculationUsageDeclarationAccess().getRule();
	}
	
	//fragment CalculationParameterPart returns SysML::Feature:
	//	ActionParameterList (CalculationReturnParameterPart | EmptyReturnParameterPart) | ValuePart? EmptyReturnParameterPart;
	public CalculationParameterPartElements getCalculationParameterPartAccess() {
		return pCalculationParameterPart;
	}
	
	public ParserRule getCalculationParameterPartRule() {
		return getCalculationParameterPartAccess().getRule();
	}
	
	//fragment CalculationReturnParameterPart returns SysML::Feature:
	//	ownedFeatureMembership_comp+=CalculationReturnParameterMember;
	public CalculationReturnParameterPartElements getCalculationReturnParameterPartAccess() {
		return pCalculationReturnParameterPart;
	}
	
	public ParserRule getCalculationReturnParameterPartRule() {
		return getCalculationReturnParameterPartAccess().getRule();
	}
	
	///* CALCULATION MEMBERSHIPS */ CalculationReturnParameterMember SysML::ReturnParameterMembership:
	//	'return'? ownedMemberParameter_comp=ActionParameter;
	public CalculationReturnParameterMemberElements getCalculationReturnParameterMemberAccess() {
		return pCalculationReturnParameterMember;
	}
	
	public ParserRule getCalculationReturnParameterMemberRule() {
		return getCalculationReturnParameterMemberAccess().getRule();
	}
	
	///* STATE USAGES */ StateUsageKeyword:
	//	StateKeyword;
	public StateUsageKeywordElements getStateUsageKeywordAccess() {
		return pStateUsageKeyword;
	}
	
	public ParserRule getStateUsageKeywordRule() {
		return getStateUsageKeywordAccess().getRule();
	}
	
	//fragment StateDeclaration returns SysML::StateUsage:
	//	UsagePrefix? StateUsageKeyword UsageDeclaration? (ValuePart | ActionParameterList)?;
	public StateDeclarationElements getStateDeclarationAccess() {
		return pStateDeclaration;
	}
	
	public ParserRule getStateDeclarationRule() {
		return getStateDeclarationAccess().getRule();
	}
	
	//StateUsage SysML::StateUsage:
	//	UsagePrefix? StateUsageKeyword ActionUsageDeclaration StateDefBody;
	public StateUsageElements getStateUsageAccess() {
		return pStateUsage;
	}
	
	public ParserRule getStateUsageRule() {
		return getStateUsageAccess().getRule();
	}
	
	//StateRefUsage SysML::StateUsage:
	//	UsagePrefix? ('ref' StateUsageKeyword | isComposite?=StateUsageKeyword) ActionUsageDeclaration StateDefBody;
	public StateRefUsageElements getStateRefUsageAccess() {
		return pStateRefUsage;
	}
	
	public ParserRule getStateRefUsageRule() {
		return getStateRefUsageAccess().getRule();
	}
	
	//ExhibitStateUsage SysML::ExhibitStateUsage:
	//	UsagePrefix? 'exhibit' (ownedRelationship_comp+=Subset UsageSpecialization*
	//	| StateUsageKeyword UsageDeclaration?) (ValuePart | ActionParameterList)? StateDefBody;
	public ExhibitStateUsageElements getExhibitStateUsageAccess() {
		return pExhibitStateUsage;
	}
	
	public ParserRule getExhibitStateUsageRule() {
		return getExhibitStateUsageAccess().getRule();
	}
	
	///* TRANSITION USAGES */ TransitionUsageKeyword:
	//	'transition';
	public TransitionUsageKeywordElements getTransitionUsageKeywordAccess() {
		return pTransitionUsageKeyword;
	}
	
	public ParserRule getTransitionUsageKeywordRule() {
		return getTransitionUsageKeywordAccess().getRule();
	}
	
	//TransitionStep SysML::TransitionUsage:
	//	TransitionUsageKeyword (UsageDeclaration? 'first')?
	//	ownedFeatureMembership_comp+=TransitionSourceMember
	//	ownedFeatureMembership_comp+=TriggerStepMember?
	//	ownedFeatureMembership_comp+=GuardExpressionMember?
	//	ownedFeatureMembership_comp+=EffectBehaviorMember?
	//	'then' ownedFeatureMembership_comp+=TransitionSuccessionMember;
	public TransitionStepElements getTransitionStepAccess() {
		return pTransitionStep;
	}
	
	public ParserRule getTransitionStepRule() {
		return getTransitionStepAccess().getRule();
	}
	
	//TargetTransitionStep SysML::TransitionUsage:
	//	ownedFeatureMembership_comp+=TriggerStepMember?
	//	ownedFeatureMembership_comp+=GuardExpressionMember?
	//	ownedFeatureMembership_comp+=EffectBehaviorMember?
	//	'then' ownedFeatureMembership_comp+=TransitionSuccessionMember;
	public TargetTransitionStepElements getTargetTransitionStepAccess() {
		return pTargetTransitionStep;
	}
	
	public ParserRule getTargetTransitionStepRule() {
		return getTargetTransitionStepAccess().getRule();
	}
	
	//TriggerStep SysML::AcceptActionUsage:
	//	ownedFeatureMembership_comp+=EmptyParameterMember
	//	ownedFeatureMembership_comp+=ItemFeatureMember;
	public TriggerStepElements getTriggerStepAccess() {
		return pTriggerStep;
	}
	
	public ParserRule getTriggerStepRule() {
		return getTriggerStepAccess().getRule();
	}
	
	//EffectBehaviorUsage SysML::ActionUsage:
	//	EmptyActionUsage | PerformedActionUsage ('{' ActionDefBodyItem* '}')?;
	public EffectBehaviorUsageElements getEffectBehaviorUsageAccess() {
		return pEffectBehaviorUsage;
	}
	
	public ParserRule getEffectBehaviorUsageRule() {
		return getEffectBehaviorUsageAccess().getRule();
	}
	
	//TransitionSuccession SysML::Succession:
	//	ownedFeatureMembership_comp+=EmptySourceEndMember
	//	ownedFeatureMembership_comp+=ConnectorEndMember;
	public TransitionSuccessionElements getTransitionSuccessionAccess() {
		return pTransitionSuccession;
	}
	
	public ParserRule getTransitionSuccessionRule() {
		return getTransitionSuccessionAccess().getRule();
	}
	
	///* TRANSITION MEMBERSHIPS */ TransitionSourceMember SysML::FeatureMembership:
	//	memberFeature=[SysML::Feature|QualifiedName];
	public TransitionSourceMemberElements getTransitionSourceMemberAccess() {
		return pTransitionSourceMember;
	}
	
	public ParserRule getTransitionSourceMemberRule() {
		return getTransitionSourceMemberAccess().getRule();
	}
	
	//TransitionSuccessionMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=TransitionSuccession;
	public TransitionSuccessionMemberElements getTransitionSuccessionMemberAccess() {
		return pTransitionSuccessionMember;
	}
	
	public ParserRule getTransitionSuccessionMemberRule() {
		return getTransitionSuccessionMemberAccess().getRule();
	}
	
	//TriggerStepMember SysML::TransitionFeatureMembership:
	//	kind=TriggerFeatureKind ownedMemberFeature_comp=TriggerStep;
	public TriggerStepMemberElements getTriggerStepMemberAccess() {
		return pTriggerStepMember;
	}
	
	public ParserRule getTriggerStepMemberRule() {
		return getTriggerStepMemberAccess().getRule();
	}
	
	//enum TriggerFeatureKind returns SysML::TransitionFeatureKind:
	//	trigger='accept';
	public TriggerFeatureKindElements getTriggerFeatureKindAccess() {
		return eTriggerFeatureKind;
	}
	
	public EnumRule getTriggerFeatureKindRule() {
		return getTriggerFeatureKindAccess().getRule();
	}
	
	//GuardExpressionMember SysML::TransitionFeatureMembership:
	//	kind=GuardFeatureKind ownedMemberFeature_comp=Expression;
	public GuardExpressionMemberElements getGuardExpressionMemberAccess() {
		return pGuardExpressionMember;
	}
	
	public ParserRule getGuardExpressionMemberRule() {
		return getGuardExpressionMemberAccess().getRule();
	}
	
	//enum GuardFeatureKind returns SysML::TransitionFeatureKind:
	//	guard='if';
	public GuardFeatureKindElements getGuardFeatureKindAccess() {
		return eGuardFeatureKind;
	}
	
	public EnumRule getGuardFeatureKindRule() {
		return getGuardFeatureKindAccess().getRule();
	}
	
	//EffectBehaviorMember SysML::TransitionFeatureMembership:
	//	kind=EffectFeatureKind ownedMemberFeature_comp=EffectBehaviorUsage;
	public EffectBehaviorMemberElements getEffectBehaviorMemberAccess() {
		return pEffectBehaviorMember;
	}
	
	public ParserRule getEffectBehaviorMemberRule() {
		return getEffectBehaviorMemberAccess().getRule();
	}
	
	//enum EffectFeatureKind returns SysML::TransitionFeatureKind:
	//	effect='do';
	public EffectFeatureKindElements getEffectFeatureKindAccess() {
		return eEffectFeatureKind;
	}
	
	public EnumRule getEffectFeatureKindRule() {
		return getEffectFeatureKindAccess().getRule();
	}
	
	///* CONSTRAINT USAGES */ ConstraintUsageKeyword:
	//	ConstraintKeyword;
	public ConstraintUsageKeywordElements getConstraintUsageKeywordAccess() {
		return pConstraintUsageKeyword;
	}
	
	public ParserRule getConstraintUsageKeywordRule() {
		return getConstraintUsageKeywordAccess().getRule();
	}
	
	//fragment ConstraintDeclaration returns SysML::ConstraintUsage:
	//	UsagePrefix? ConstraintUsageKeyword UsageDeclaration? ConstraintParameterPart;
	public ConstraintDeclarationElements getConstraintDeclarationAccess() {
		return pConstraintDeclaration;
	}
	
	public ParserRule getConstraintDeclarationRule() {
		return getConstraintDeclarationAccess().getRule();
	}
	
	//ConstraintUsage SysML::ConstraintUsage:
	//	UsagePrefix? ConstraintUsageKeyword ConstraintUsageDeclaration ConstraintDefBody;
	public ConstraintUsageElements getConstraintUsageAccess() {
		return pConstraintUsage;
	}
	
	public ParserRule getConstraintUsageRule() {
		return getConstraintUsageAccess().getRule();
	}
	
	//ConstraintRefUsage SysML::ConstraintUsage:
	//	UsagePrefix? ('ref' ConstraintUsageKeyword | isComposite?=ConstraintUsageKeyword) ConstraintUsageDeclaration
	//	ConstraintDefBody;
	public ConstraintRefUsageElements getConstraintRefUsageAccess() {
		return pConstraintRefUsage;
	}
	
	public ParserRule getConstraintRefUsageRule() {
		return getConstraintRefUsageAccess().getRule();
	}
	
	//fragment ConstraintUsageDeclaration returns SysML::ConstraintUsage:
	//	UsageDeclaration? ConstraintParameterPart;
	public ConstraintUsageDeclarationElements getConstraintUsageDeclarationAccess() {
		return pConstraintUsageDeclaration;
	}
	
	public ParserRule getConstraintUsageDeclarationRule() {
		return getConstraintUsageDeclarationAccess().getRule();
	}
	
	//fragment ConstraintParameterPart returns SysML::ConstraintUsage:
	//	(ValuePart | ActionParameterList)? EmptyReturnParameterPart;
	public ConstraintParameterPartElements getConstraintParameterPartAccess() {
		return pConstraintParameterPart;
	}
	
	public ParserRule getConstraintParameterPartRule() {
		return getConstraintParameterPartAccess().getRule();
	}
	
	//AssertConstraintUsage SysML::AssertConstraintUsage:
	//	UsagePrefix? 'assert' (ownedRelationship_comp+=Subset
	//	| ConstraintUsageKeyword UsageDeclaration?) ConstraintParameterPart InvariantPart ConstraintDefBody;
	public AssertConstraintUsageElements getAssertConstraintUsageAccess() {
		return pAssertConstraintUsage;
	}
	
	public ParserRule getAssertConstraintUsageRule() {
		return getAssertConstraintUsageAccess().getRule();
	}
	
	//fragment InvariantPart returns SysML::Invariant:
	//	ownedFeatureMembership_comp+=TrueLiteralMember;
	public InvariantPartElements getInvariantPartAccess() {
		return pInvariantPart;
	}
	
	public ParserRule getInvariantPartRule() {
		return getInvariantPartAccess().getRule();
	}
	
	//TrueLiteralExpression SysML::LiteralBoolean:
	//	{SysML::LiteralBoolean};
	public TrueLiteralExpressionElements getTrueLiteralExpressionAccess() {
		return pTrueLiteralExpression;
	}
	
	public ParserRule getTrueLiteralExpressionRule() {
		return getTrueLiteralExpressionAccess().getRule();
	}
	
	///* CONSTRAINT MEMBERSHIPS */ TrueLiteralMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=TrueLiteralExpression;
	public TrueLiteralMemberElements getTrueLiteralMemberAccess() {
		return pTrueLiteralMember;
	}
	
	public ParserRule getTrueLiteralMemberRule() {
		return getTrueLiteralMemberAccess().getRule();
	}
	
	///* REQUIREMENT USAGES */ RequirementUsageKeyword:
	//	RequirementKeyword;
	public RequirementUsageKeywordElements getRequirementUsageKeywordAccess() {
		return pRequirementUsageKeyword;
	}
	
	public ParserRule getRequirementUsageKeywordRule() {
		return getRequirementUsageKeywordAccess().getRule();
	}
	
	//fragment RequirementDeclaration returns SysML::RequirementUsage:
	//	UsagePrefix? RequirementUsageKeyword UsageDeclaration? ConstraintParameterPart;
	public RequirementDeclarationElements getRequirementDeclarationAccess() {
		return pRequirementDeclaration;
	}
	
	public ParserRule getRequirementDeclarationRule() {
		return getRequirementDeclarationAccess().getRule();
	}
	
	//RequirementUsage SysML::RequirementUsage:
	//	UsagePrefix? RequirementUsageKeyword RequirementUsageDeclaration RequirementDefBody;
	public RequirementUsageElements getRequirementUsageAccess() {
		return pRequirementUsage;
	}
	
	public ParserRule getRequirementUsageRule() {
		return getRequirementUsageAccess().getRule();
	}
	
	//RequirementRefUsage SysML::RequirementUsage:
	//	UsagePrefix? ('ref' RequirementUsageKeyword | isComposite?=RequirementUsageKeyword) RequirementUsageDeclaration
	//	RequirementDefBody;
	public RequirementRefUsageElements getRequirementRefUsageAccess() {
		return pRequirementRefUsage;
	}
	
	public ParserRule getRequirementRefUsageRule() {
		return getRequirementRefUsageAccess().getRule();
	}
	
	//fragment RequirementUsageDeclaration returns SysML::RequirementUsage:
	//	UsageDeclaration? ConstraintParameterPart;
	public RequirementUsageDeclarationElements getRequirementUsageDeclarationAccess() {
		return pRequirementUsageDeclaration;
	}
	
	public ParserRule getRequirementUsageDeclarationRule() {
		return getRequirementUsageDeclarationAccess().getRule();
	}
	
	//SatisfyRequirementUsage SysML::SatisfyRequirementUsage:
	//	UsagePrefix? 'satisfy' (ownedRelationship_comp+=Subset UsageSpecialization*
	//	| RequirementKeyword UsageDeclaration?) ('by' ownedFeatureMembership_comp+=SatisfactionConnectorMember)?
	//	ConstraintParameterPart InvariantPart RequirementDefBody;
	public SatisfyRequirementUsageElements getSatisfyRequirementUsageAccess() {
		return pSatisfyRequirementUsage;
	}
	
	public ParserRule getSatisfyRequirementUsageRule() {
		return getSatisfyRequirementUsageAccess().getRule();
	}
	
	//SatisfactionConnector SysML::BindingConnector:
	//	ownedFeatureMembership_comp+=EmptySourceEndMember ownedFeatureMembership_comp+=ConnectorEndMember;
	public SatisfactionConnectorElements getSatisfactionConnectorAccess() {
		return pSatisfactionConnector;
	}
	
	public ParserRule getSatisfactionConnectorRule() {
		return getSatisfactionConnectorAccess().getRule();
	}
	
	///* REQUIREMENT MEMBERSHIPS */ SatisfactionConnectorMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=SatisfactionConnector;
	public SatisfactionConnectorMemberElements getSatisfactionConnectorMemberAccess() {
		return pSatisfactionConnectorMember;
	}
	
	public ParserRule getSatisfactionConnectorMemberRule() {
		return getSatisfactionConnectorMemberAccess().getRule();
	}
	
	///* CASE USAGES */ CaseUsageKeyword:
	//	CaseKeyword;
	public CaseUsageKeywordElements getCaseUsageKeywordAccess() {
		return pCaseUsageKeyword;
	}
	
	public ParserRule getCaseUsageKeywordRule() {
		return getCaseUsageKeywordAccess().getRule();
	}
	
	//fragment CaseDeclaration returns SysML::CaseUsage:
	//	UsagePrefix? CaseUsageKeyword CalculationUsageDeclaration;
	public CaseDeclarationElements getCaseDeclarationAccess() {
		return pCaseDeclaration;
	}
	
	public ParserRule getCaseDeclarationRule() {
		return getCaseDeclarationAccess().getRule();
	}
	
	//CaseUsage SysML::CaseUsage:
	//	CaseDeclaration CaseDefBody;
	public CaseUsageElements getCaseUsageAccess() {
		return pCaseUsage;
	}
	
	public ParserRule getCaseUsageRule() {
		return getCaseUsageAccess().getRule();
	}
	
	//CaseRefUsage SysML::CaseUsage:
	//	UsagePrefix? ('ref' CaseUsageKeyword | isComposite?=CaseUsageKeyword) CalculationUsageDeclaration CaseDefBody;
	public CaseRefUsageElements getCaseRefUsageAccess() {
		return pCaseRefUsage;
	}
	
	public ParserRule getCaseRefUsageRule() {
		return getCaseRefUsageAccess().getRule();
	}
	
	///* ANALYSIS CASE USAGES */ AnalysisCaseUsageKeyword:
	//	AnalysisCaseKeyword;
	public AnalysisCaseUsageKeywordElements getAnalysisCaseUsageKeywordAccess() {
		return pAnalysisCaseUsageKeyword;
	}
	
	public ParserRule getAnalysisCaseUsageKeywordRule() {
		return getAnalysisCaseUsageKeywordAccess().getRule();
	}
	
	//fragment AnalysisCaseDeclaration returns SysML::AnalysisCaseUsage:
	//	UsagePrefix? AnalysisCaseUsageKeyword CalculationUsageDeclaration;
	public AnalysisCaseDeclarationElements getAnalysisCaseDeclarationAccess() {
		return pAnalysisCaseDeclaration;
	}
	
	public ParserRule getAnalysisCaseDeclarationRule() {
		return getAnalysisCaseDeclarationAccess().getRule();
	}
	
	//AnalysisCaseUsage SysML::AnalysisCaseUsage:
	//	AnalysisCaseDeclaration CaseDefBody;
	public AnalysisCaseUsageElements getAnalysisCaseUsageAccess() {
		return pAnalysisCaseUsage;
	}
	
	public ParserRule getAnalysisCaseUsageRule() {
		return getAnalysisCaseUsageAccess().getRule();
	}
	
	//AnalysisCaseRefUsage SysML::AnalysisCaseUsage:
	//	UsagePrefix? ('ref' AnalysisCaseUsageKeyword | isComposite?=AnalysisCaseUsageKeyword) CalculationUsageDeclaration
	//	CaseDefBody;
	public AnalysisCaseRefUsageElements getAnalysisCaseRefUsageAccess() {
		return pAnalysisCaseRefUsage;
	}
	
	public ParserRule getAnalysisCaseRefUsageRule() {
		return getAnalysisCaseRefUsageAccess().getRule();
	}
	
	///* VERIFICATION CASE USAGES */ VerificationCaseUsageKeyword:
	//	VerificationCaseKeyword;
	public VerificationCaseUsageKeywordElements getVerificationCaseUsageKeywordAccess() {
		return pVerificationCaseUsageKeyword;
	}
	
	public ParserRule getVerificationCaseUsageKeywordRule() {
		return getVerificationCaseUsageKeywordAccess().getRule();
	}
	
	//fragment VerificationCaseDeclaration returns SysML::VerificationCaseUsage:
	//	UsagePrefix? VerificationCaseUsageKeyword CalculationUsageDeclaration;
	public VerificationCaseDeclarationElements getVerificationCaseDeclarationAccess() {
		return pVerificationCaseDeclaration;
	}
	
	public ParserRule getVerificationCaseDeclarationRule() {
		return getVerificationCaseDeclarationAccess().getRule();
	}
	
	//VerificationCaseUsage SysML::VerificationCaseUsage:
	//	VerificationCaseDeclaration CaseDefBody;
	public VerificationCaseUsageElements getVerificationCaseUsageAccess() {
		return pVerificationCaseUsage;
	}
	
	public ParserRule getVerificationCaseUsageRule() {
		return getVerificationCaseUsageAccess().getRule();
	}
	
	//VerificationCaseRefUsage SysML::VerificationCaseUsage:
	//	UsagePrefix? ('ref' VerificationCaseUsageKeyword | isComposite?=VerificationCaseUsageKeyword)
	//	CalculationUsageDeclaration CaseDefBody;
	public VerificationCaseRefUsageElements getVerificationCaseRefUsageAccess() {
		return pVerificationCaseRefUsage;
	}
	
	public ParserRule getVerificationCaseRefUsageRule() {
		return getVerificationCaseRefUsageAccess().getRule();
	}
	
	///* VIEW USAGES */ ViewUsageKeyword:
	//	ViewKeyword;
	public ViewUsageKeywordElements getViewUsageKeywordAccess() {
		return pViewUsageKeyword;
	}
	
	public ParserRule getViewUsageKeywordRule() {
		return getViewUsageKeywordAccess().getRule();
	}
	
	//fragment ViewDeclaration returns SysML::ViewUsage:
	//	UsagePrefix? ViewKeyword UsageDeclaration?;
	public ViewDeclarationElements getViewDeclarationAccess() {
		return pViewDeclaration;
	}
	
	public ParserRule getViewDeclarationRule() {
		return getViewDeclarationAccess().getRule();
	}
	
	//ViewUsage SysML::ViewUsage:
	//	UsagePrefix? ViewUsageKeyword UsageDeclaration? ValuePart? ViewBody;
	public ViewUsageElements getViewUsageAccess() {
		return pViewUsage;
	}
	
	public ParserRule getViewUsageRule() {
		return getViewUsageAccess().getRule();
	}
	
	//ViewRefUsage SysML::ViewUsage:
	//	UsagePrefix? ('ref' ViewUsageKeyword | isComposite?=ViewUsageKeyword) UsageDeclaration? ValuePart? ViewBody;
	public ViewRefUsageElements getViewRefUsageAccess() {
		return pViewRefUsage;
	}
	
	public ParserRule getViewRefUsageRule() {
		return getViewRefUsageAccess().getRule();
	}
	
	//fragment ViewBody returns SysML::ViewUsage:
	//	';' | '{' ViewBodyItem* '}';
	public ViewBodyElements getViewBodyAccess() {
		return pViewBody;
	}
	
	public ParserRule getViewBodyRule() {
		return getViewBodyAccess().getRule();
	}
	
	//fragment ViewBodyItem returns SysML::ViewUsage:
	//	DefinitionBodyItem
	//	| ownedImport_comp+=Expose;
	public ViewBodyItemElements getViewBodyItemAccess() {
		return pViewBodyItem;
	}
	
	public ParserRule getViewBodyItemRule() {
		return getViewBodyItemAccess().getRule();
	}
	
	//Expose SysML::Expose:
	//	ownedRelationship_comp+=PrefixAnnotation*
	//	visibility=PackageElementVisibilityIndicator?
	//	'expose' (importedPackage=[SysML::Package|Name] ('::' | '.') '*'
	//	| importedPackage=[SysML::Package|ColonQualifiedName] '::' '*'
	//	| importedPackage=[SysML::Package|DotQualifiedName] '.' '*') ';';
	public ExposeElements getExposeAccess() {
		return pExpose;
	}
	
	public ParserRule getExposeRule() {
		return getExposeAccess().getRule();
	}
	
	///* VIEWPOINT USAGES */ ViewpointUsageKeyword:
	//	ViewpointKeyword;
	public ViewpointUsageKeywordElements getViewpointUsageKeywordAccess() {
		return pViewpointUsageKeyword;
	}
	
	public ParserRule getViewpointUsageKeywordRule() {
		return getViewpointUsageKeywordAccess().getRule();
	}
	
	//fragment ViewpointDeclaration returns SysML::ViewpointUsage:
	//	UsagePrefix? ViewpointUsageKeyword UsageDeclaration? ConstraintParameterPart;
	public ViewpointDeclarationElements getViewpointDeclarationAccess() {
		return pViewpointDeclaration;
	}
	
	public ParserRule getViewpointDeclarationRule() {
		return getViewpointDeclarationAccess().getRule();
	}
	
	//ViewpointUsage SysML::ViewpointUsage:
	//	UsagePrefix? ViewpointUsageKeyword RequirementUsageDeclaration RequirementDefBody;
	public ViewpointUsageElements getViewpointUsageAccess() {
		return pViewpointUsage;
	}
	
	public ParserRule getViewpointUsageRule() {
		return getViewpointUsageAccess().getRule();
	}
	
	//ViewpointRefUsage SysML::ViewpointUsage:
	//	UsagePrefix? ('ref' ViewpointUsageKeyword | isComposite?=ViewpointUsageKeyword) RequirementUsageDeclaration
	//	RequirementDefBody;
	public ViewpointRefUsageElements getViewpointRefUsageAccess() {
		return pViewpointRefUsage;
	}
	
	public ParserRule getViewpointRefUsageRule() {
		return getViewpointRefUsageAccess().getRule();
	}
	
	///* RENDERING USAGES */ RenderingUsageKeyword:
	//	RenderingKeyword;
	public RenderingUsageKeywordElements getRenderingUsageKeywordAccess() {
		return pRenderingUsageKeyword;
	}
	
	public ParserRule getRenderingUsageKeywordRule() {
		return getRenderingUsageKeywordAccess().getRule();
	}
	
	//fragment RenderingDeclaration returns SysML::RenderingUsage:
	//	UsagePrefix? RenderingKeyword UsageDeclaration?;
	public RenderingDeclarationElements getRenderingDeclarationAccess() {
		return pRenderingDeclaration;
	}
	
	public ParserRule getRenderingDeclarationRule() {
		return getRenderingDeclarationAccess().getRule();
	}
	
	//RenderingUsage SysML::RenderingUsage:
	//	UsagePrefix? RenderingUsageKeyword Usage;
	public RenderingUsageElements getRenderingUsageAccess() {
		return pRenderingUsage;
	}
	
	public ParserRule getRenderingUsageRule() {
		return getRenderingUsageAccess().getRule();
	}
	
	//RenderingRefUsage SysML::RenderingUsage:
	//	UsagePrefix? ('ref' RenderingUsageKeyword | isComposite?=RenderingUsageKeyword) Usage;
	public RenderingRefUsageElements getRenderingRefUsageAccess() {
		return pRenderingRefUsage;
	}
	
	public ParserRule getRenderingRefUsageRule() {
		return getRenderingRefUsageAccess().getRule();
	}
	
	///* EXPRESSIONS */ Expression SysML::Expression:
	//	ConditionalExpression | QueryPathExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//// Conditional Test Expressions
	//ConditionalExpression SysML::Expression:
	//	NullCoalescingExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalTestOperator
	//	operand_comp+=Expression ':' operand_comp+=ConditionalExpression)?;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return pConditionalExpression;
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	//ConditionalTestOperator:
	//	'?';
	public ConditionalTestOperatorElements getConditionalTestOperatorAccess() {
		return pConditionalTestOperator;
	}
	
	public ParserRule getConditionalTestOperatorRule() {
		return getConditionalTestOperatorAccess().getRule();
	}
	
	//// Null Coalescing Expressions
	//NullCoalescingExpression SysML::Expression:
	//	ConditionalOrExpression ({SysML::OperatorExpression.operand_comp+=current} operator=NullCoalescingOperator
	//	operand_comp+=ConditionalOrExpression)*;
	public NullCoalescingExpressionElements getNullCoalescingExpressionAccess() {
		return pNullCoalescingExpression;
	}
	
	public ParserRule getNullCoalescingExpressionRule() {
		return getNullCoalescingExpressionAccess().getRule();
	}
	
	//NullCoalescingOperator:
	//	'??';
	public NullCoalescingOperatorElements getNullCoalescingOperatorAccess() {
		return pNullCoalescingOperator;
	}
	
	public ParserRule getNullCoalescingOperatorRule() {
		return getNullCoalescingOperatorAccess().getRule();
	}
	
	//// Conditional Logical Expressions
	//ConditionalOrExpression SysML::Expression:
	//	ConditionalAndExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalOrOperator
	//	operand_comp+=ConditionalAndExpression)*;
	public ConditionalOrExpressionElements getConditionalOrExpressionAccess() {
		return pConditionalOrExpression;
	}
	
	public ParserRule getConditionalOrExpressionRule() {
		return getConditionalOrExpressionAccess().getRule();
	}
	
	//ConditionalOrOperator:
	//	'||';
	public ConditionalOrOperatorElements getConditionalOrOperatorAccess() {
		return pConditionalOrOperator;
	}
	
	public ParserRule getConditionalOrOperatorRule() {
		return getConditionalOrOperatorAccess().getRule();
	}
	
	//ConditionalAndExpression SysML::Expression:
	//	OrExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalAndOperator
	//	operand_comp+=OrExpression)*;
	public ConditionalAndExpressionElements getConditionalAndExpressionAccess() {
		return pConditionalAndExpression;
	}
	
	public ParserRule getConditionalAndExpressionRule() {
		return getConditionalAndExpressionAccess().getRule();
	}
	
	//ConditionalAndOperator:
	//	'&&';
	public ConditionalAndOperatorElements getConditionalAndOperatorAccess() {
		return pConditionalAndOperator;
	}
	
	public ParserRule getConditionalAndOperatorRule() {
		return getConditionalAndOperatorAccess().getRule();
	}
	
	//// Logical Expressions
	//OrExpression SysML::Expression:
	//	XorExpression ({SysML::OperatorExpression.operand_comp+=current} operator=OrOperator operand_comp+=XorExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//OrOperator:
	//	'|';
	public OrOperatorElements getOrOperatorAccess() {
		return pOrOperator;
	}
	
	public ParserRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}
	
	//XorExpression SysML::Expression:
	//	AndExpression ({SysML::OperatorExpression.operand_comp+=current} operator=XorOperator operand_comp+=AndExpression)*;
	public XorExpressionElements getXorExpressionAccess() {
		return pXorExpression;
	}
	
	public ParserRule getXorExpressionRule() {
		return getXorExpressionAccess().getRule();
	}
	
	//XorOperator:
	//	'^';
	public XorOperatorElements getXorOperatorAccess() {
		return pXorOperator;
	}
	
	public ParserRule getXorOperatorRule() {
		return getXorOperatorAccess().getRule();
	}
	
	//AndExpression SysML::Expression:
	//	EqualityExpression ({SysML::OperatorExpression.operand_comp+=current} operator=AndOperator
	//	operand_comp+=EqualityExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//AndOperator:
	//	'&';
	public AndOperatorElements getAndOperatorAccess() {
		return pAndOperator;
	}
	
	public ParserRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}
	
	//// Equality Expressions
	//EqualityExpression SysML::Expression:
	//	ClassificationExpression ({SysML::OperatorExpression.operand_comp+=current} operator=EqualityOperator
	//	operand_comp+=ClassificationExpression)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//EqualityOperator:
	//	'==' | '!=';
	public EqualityOperatorElements getEqualityOperatorAccess() {
		return pEqualityOperator;
	}
	
	public ParserRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}
	
	//// Classification Expressions
	//ClassificationExpression SysML::Expression:
	//	RelationalExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ClassificationOperator
	//	ownedFeatureMembership_comp+=TypeReferenceMember)?;
	public ClassificationExpressionElements getClassificationExpressionAccess() {
		return pClassificationExpression;
	}
	
	public ParserRule getClassificationExpressionRule() {
		return getClassificationExpressionAccess().getRule();
	}
	
	//ClassificationOperator:
	//	'instanceof' | 'hastype' | 'istype';
	public ClassificationOperatorElements getClassificationOperatorAccess() {
		return pClassificationOperator;
	}
	
	public ParserRule getClassificationOperatorRule() {
		return getClassificationOperatorAccess().getRule();
	}
	
	//// Relational Expressions
	//RelationalExpression SysML::Expression:
	//	AdditiveExpression ({SysML::OperatorExpression.operand_comp+=current} operator=RelationalOperator
	//	operand_comp+=AdditiveExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//RelationalOperator:
	//	'<' | '>' | '<=' | '>=';
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return pRelationalOperator;
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}
	
	//// Arithmetic Expressions
	//AdditiveExpression SysML::Expression:
	//	MultiplicativeExpression ({SysML::OperatorExpression.operand_comp+=current} operator=AdditiveOperator
	//	operand_comp+=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//AdditiveOperator:
	//	'+' | '-';
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return pAdditiveOperator;
	}
	
	public ParserRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}
	
	//MultiplicativeExpression SysML::Expression:
	//	ExponentiationExpression ({SysML::OperatorExpression.operand_comp+=current} operator=MultiplicativeOperator
	//	operand_comp+=ExponentiationExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//MultiplicativeOperator:
	//	'*' | '/';
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return pMultiplicativeOperator;
	}
	
	public ParserRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}
	
	//ExponentiationExpression SysML::Expression:
	//	UnitsExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ExponentiationOperator
	//	operand_comp+=UnitsExpression)*;
	public ExponentiationExpressionElements getExponentiationExpressionAccess() {
		return pExponentiationExpression;
	}
	
	public ParserRule getExponentiationExpressionRule() {
		return getExponentiationExpressionAccess().getRule();
	}
	
	//ExponentiationOperator:
	//	'**';
	public ExponentiationOperatorElements getExponentiationOperatorAccess() {
		return pExponentiationOperator;
	}
	
	public ParserRule getExponentiationOperatorRule() {
		return getExponentiationOperatorAccess().getRule();
	}
	
	//// Units Expressions
	//UnitsExpression SysML::Expression:
	//	UnaryExpression ({SysML::OperatorExpression.operand_comp+=current} operator='@' '[' operand_comp+=Expression ']')?;
	public UnitsExpressionElements getUnitsExpressionAccess() {
		return pUnitsExpression;
	}
	
	public ParserRule getUnitsExpressionRule() {
		return getUnitsExpressionAccess().getRule();
	}
	
	//// Unary Expressions
	//UnaryExpression SysML::Expression:
	//	SequenceAccessExpression | {SysML::OperatorExpression} operator=UnaryOperator operand_comp+=SequenceAccessExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//UnaryOperator:
	//	'+' | '-' | '!' | '~';
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return pUnaryOperator;
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//SequenceAccessExpression SysML::Expression:
	//	PrimaryExpression ({SysML::OperatorExpression.operand_comp+=current} operator='[' operand_comp+=Expression ']')?;
	public SequenceAccessExpressionElements getSequenceAccessExpressionAccess() {
		return pSequenceAccessExpression;
	}
	
	public ParserRule getSequenceAccessExpressionRule() {
		return getSequenceAccessExpressionAccess().getRule();
	}
	
	//// Primary Expressions
	//PrimaryExpression SysML::Expression:
	//	BaseExpression ({SysML::OperatorExpression.operand_comp+=current} '->'
	//	operator=Name ownedFeatureMembership_comp+=BodyMember+)*;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//// Body Expressions
	//BodyExpression SysML::BlockExpression:
	//	=> (ownedFeatureMembership_comp+=BodyParameterMember ownedFeatureMembership_comp+=BodyParameterMember*
	//	'(' ownedFeatureMembership_comp+=ExpressionMember ')') | ownedRelationship_comp+=ExpressionTyping;
	public BodyExpressionElements getBodyExpressionAccess() {
		return pBodyExpression;
	}
	
	public ParserRule getBodyExpressionRule() {
		return getBodyExpressionAccess().getRule();
	}
	
	//BodyParameter SysML::Usage:
	//	{SysML::ReferenceUsage} (DefinedBy MultiplicityPart? | MultiplicityPart DefinedBy?)?;
	public BodyParameterElements getBodyParameterAccess() {
		return pBodyParameter;
	}
	
	public ParserRule getBodyParameterRule() {
		return getBodyParameterAccess().getRule();
	}
	
	//ExpressionTyping SysML::FeatureTyping:
	//	type=[SysML::Function|QualifiedName];
	public ExpressionTypingElements getExpressionTypingAccess() {
		return pExpressionTyping;
	}
	
	public ParserRule getExpressionTypingRule() {
		return getExpressionTypingAccess().getRule();
	}
	
	//// Base Expressions
	//BaseExpression SysML::Expression:
	//	NullExpression
	//	| LiteralExpression
	//	| FeatureReferenceExpression
	//	| InvocationExpression
	//	| ExtentExpression
	//	| SequenceConstructionExpression
	//	| '(' Expression ')';
	public BaseExpressionElements getBaseExpressionAccess() {
		return pBaseExpression;
	}
	
	public ParserRule getBaseExpressionRule() {
		return getBaseExpressionAccess().getRule();
	}
	
	//FeatureReferenceExpression SysML::FeatureReferenceExpression:
	//	ownedFeatureMembership_comp+=FeatureReferenceMember;
	public FeatureReferenceExpressionElements getFeatureReferenceExpressionAccess() {
		return pFeatureReferenceExpression;
	}
	
	public ParserRule getFeatureReferenceExpressionRule() {
		return getFeatureReferenceExpressionAccess().getRule();
	}
	
	//FeatureReference SysML::ReferenceUsage:
	//	ownedRelationship_comp+=Subset;
	public FeatureReferenceElements getFeatureReferenceAccess() {
		return pFeatureReference;
	}
	
	public ParserRule getFeatureReferenceRule() {
		return getFeatureReferenceAccess().getRule();
	}
	
	//InvocationExpression SysML::InvocationExpression:
	//	ownedRelationship_comp+=FeatureTyping '(' Tuple? ')';
	public InvocationExpressionElements getInvocationExpressionAccess() {
		return pInvocationExpression;
	}
	
	public ParserRule getInvocationExpressionRule() {
		return getInvocationExpressionAccess().getRule();
	}
	
	//fragment Tuple returns SysML::Expression:
	//	PositionalTuple | NamedTuple;
	public TupleElements getTupleAccess() {
		return pTuple;
	}
	
	public ParserRule getTupleRule() {
		return getTupleAccess().getRule();
	}
	
	//fragment PositionalTuple returns SysML::Expression:
	//	ownedFeatureMembership_comp+=ExpressionMember (',' ownedFeatureMembership_comp+=ExpressionMember)*;
	public PositionalTupleElements getPositionalTupleAccess() {
		return pPositionalTuple;
	}
	
	public ParserRule getPositionalTupleRule() {
		return getPositionalTupleAccess().getRule();
	}
	
	//fragment NamedTuple returns SysML::Expression:
	//	ownedFeatureMembership_comp+=NamedExpressionMember (',' ownedFeatureMembership_comp+=NamedExpressionMember)*;
	public NamedTupleElements getNamedTupleAccess() {
		return pNamedTuple;
	}
	
	public ParserRule getNamedTupleRule() {
		return getNamedTupleAccess().getRule();
	}
	
	//ExtentExpression SysML::OperatorExpression:
	//	ownedFeatureMembership_comp+=TypeReferenceMember '.' operator='allInstances' '(' ')'
	//	| operator='all' ownedFeatureMembership_comp+=TypeReferenceMember;
	public ExtentExpressionElements getExtentExpressionAccess() {
		return pExtentExpression;
	}
	
	public ParserRule getExtentExpressionRule() {
		return getExtentExpressionAccess().getRule();
	}
	
	//TypeReference SysML::Feature:
	//	ownedRelationship_comp+=FeatureTyping;
	public TypeReferenceElements getTypeReferenceAccess() {
		return pTypeReference;
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}
	
	//SequenceConstructionExpression SysML::Expression:
	//	{SysML::NullExpression} '{' '}'
	//	| '{' Expression ({SysML::OperatorExpression.operand_comp+=current} operator=',' operand_comp+=SequenceElementList
	//	| {SysML::OperatorExpression.operand_comp+=current} operator='..' operand_comp+=Expression)?
	//	'}';
	public SequenceConstructionExpressionElements getSequenceConstructionExpressionAccess() {
		return pSequenceConstructionExpression;
	}
	
	public ParserRule getSequenceConstructionExpressionRule() {
		return getSequenceConstructionExpressionAccess().getRule();
	}
	
	//SequenceElementList SysML::Expression:
	//	Expression ({SysML::OperatorExpression.operand_comp+=current} operator=',' operand_comp+=SequenceElementList)?;
	public SequenceElementListElements getSequenceElementListAccess() {
		return pSequenceElementList;
	}
	
	public ParserRule getSequenceElementListRule() {
		return getSequenceElementListAccess().getRule();
	}
	
	//NullExpression SysML::NullExpression:
	//	{SysML::NullExpression} 'null';
	public NullExpressionElements getNullExpressionAccess() {
		return pNullExpression;
	}
	
	public ParserRule getNullExpressionRule() {
		return getNullExpressionAccess().getRule();
	}
	
	//// Literal Expressions
	//LiteralExpression SysML::LiteralExpression:
	//	BooleanLiteralExpression | StringLiteralExpression | RealLiteralExpression | UnlimitedNaturalLiteralExpression;
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return pLiteralExpression;
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//BooleanLiteralExpression SysML::LiteralBoolean:
	//	value=BooleanValue;
	public BooleanLiteralExpressionElements getBooleanLiteralExpressionAccess() {
		return pBooleanLiteralExpression;
	}
	
	public ParserRule getBooleanLiteralExpressionRule() {
		return getBooleanLiteralExpressionAccess().getRule();
	}
	
	//BooleanValue Ecore::EBoolean:
	//	'true' | 'false';
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//StringLiteralExpression SysML::LiteralString:
	//	value=STRING_VALUE;
	public StringLiteralExpressionElements getStringLiteralExpressionAccess() {
		return pStringLiteralExpression;
	}
	
	public ParserRule getStringLiteralExpressionRule() {
		return getStringLiteralExpressionAccess().getRule();
	}
	
	//RealLiteralExpression SysML::LiteralReal:
	//	value=RealValue;
	public RealLiteralExpressionElements getRealLiteralExpressionAccess() {
		return pRealLiteralExpression;
	}
	
	public ParserRule getRealLiteralExpressionRule() {
		return getRealLiteralExpressionAccess().getRule();
	}
	
	//RealValue Ecore::EDouble:
	//	DECIMAL_VALUE? '.' (DECIMAL_VALUE | EXP_VALUE) | EXP_VALUE;
	public RealValueElements getRealValueAccess() {
		return pRealValue;
	}
	
	public ParserRule getRealValueRule() {
		return getRealValueAccess().getRule();
	}
	
	//NaturalLiteralExpression SysML::LiteralInteger:
	//	value=DECIMAL_VALUE;
	public NaturalLiteralExpressionElements getNaturalLiteralExpressionAccess() {
		return pNaturalLiteralExpression;
	}
	
	public ParserRule getNaturalLiteralExpressionRule() {
		return getNaturalLiteralExpressionAccess().getRule();
	}
	
	//UnlimitedNaturalLiteralExpression SysML::LiteralExpression:
	//	NaturalLiteralExpression | {SysML::LiteralUnbounded} '*';
	public UnlimitedNaturalLiteralExpressionElements getUnlimitedNaturalLiteralExpressionAccess() {
		return pUnlimitedNaturalLiteralExpression;
	}
	
	public ParserRule getUnlimitedNaturalLiteralExpressionRule() {
		return getUnlimitedNaturalLiteralExpressionAccess().getRule();
	}
	
	///* EXPRESSION MEMBERSHIPS */ ExpressionMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=Expression;
	public ExpressionMemberElements getExpressionMemberAccess() {
		return pExpressionMember;
	}
	
	public ParserRule getExpressionMemberRule() {
		return getExpressionMemberAccess().getRule();
	}
	
	//FeatureReferenceMember SysML::ReturnParameterMembership:
	//	ownedMemberFeature_comp=FeatureReference;
	public FeatureReferenceMemberElements getFeatureReferenceMemberAccess() {
		return pFeatureReferenceMember;
	}
	
	public ParserRule getFeatureReferenceMemberRule() {
		return getFeatureReferenceMemberAccess().getRule();
	}
	
	//TypeReferenceMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=TypeReference;
	public TypeReferenceMemberElements getTypeReferenceMemberAccess() {
		return pTypeReferenceMember;
	}
	
	public ParserRule getTypeReferenceMemberRule() {
		return getTypeReferenceMemberAccess().getRule();
	}
	
	//NamedExpressionMember SysML::FeatureMembership:
	//	memberName=Name '=>' ownedMemberFeature_comp=Expression;
	public NamedExpressionMemberElements getNamedExpressionMemberAccess() {
		return pNamedExpressionMember;
	}
	
	public ParserRule getNamedExpressionMemberRule() {
		return getNamedExpressionMemberAccess().getRule();
	}
	
	//BodyMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=BodyExpression;
	public BodyMemberElements getBodyMemberAccess() {
		return pBodyMember;
	}
	
	public ParserRule getBodyMemberRule() {
		return getBodyMemberAccess().getRule();
	}
	
	//BodyParameterMember SysML::ParameterMembership:
	//	memberName=Name ownedMemberParameter_comp=BodyParameter;
	public BodyParameterMemberElements getBodyParameterMemberAccess() {
		return pBodyParameterMember;
	}
	
	public ParserRule getBodyParameterMemberRule() {
		return getBodyParameterMemberAccess().getRule();
	}
	
	///* QUERY PATH EXPRESSIONS */ QueryPathExpression SysML::Expression:
	//	QueryHeadExpression ('[' {SysML::QueryQualifierExpression.operand_comp+=current}
	//	ownedFeatureMembership_comp+=BodyMember ']')? ('/' {SysML::QueryPathStepExpression.operand_comp+=current}
	//	operand_comp+=QueryNameExpression ('[' {SysML::QueryQualifierExpression.operand_comp+=current}
	//	ownedFeatureMembership_comp+=BodyMember ']')?)*;
	public QueryPathExpressionElements getQueryPathExpressionAccess() {
		return pQueryPathExpression;
	}
	
	public ParserRule getQueryPathExpressionRule() {
		return getQueryPathExpressionAccess().getRule();
	}
	
	//QueryNameExpression SysML::QueryPathExpression:
	//	ownedFeatureMembership_comp+=FeatureReferenceMember;
	public QueryNameExpressionElements getQueryNameExpressionAccess() {
		return pQueryNameExpression;
	}
	
	public ParserRule getQueryNameExpressionRule() {
		return getQueryNameExpressionAccess().getRule();
	}
	
	//QueryHeadExpression SysML::QueryPathExpression:
	//	'./' ownedFeatureMembership_comp+=FeatureReferenceMember;
	public QueryHeadExpressionElements getQueryHeadExpressionAccess() {
		return pQueryHeadExpression;
	}
	
	public ParserRule getQueryHeadExpressionRule() {
		return getQueryHeadExpressionAccess().getRule();
	}
	
	///* NAMES */ Name:
	//	ID | UNRESTRICTED_NAME;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//QualifiedName:
	//	Name | ColonQualifiedName | DotQualifiedName;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//ColonQualifiedName:
	//	Name ('::' Name)+;
	public ColonQualifiedNameElements getColonQualifiedNameAccess() {
		return pColonQualifiedName;
	}
	
	public ParserRule getColonQualifiedNameRule() {
		return getColonQualifiedNameAccess().getRule();
	}
	
	//DotQualifiedName:
	//	Name ('.' Name)+;
	public DotQualifiedNameElements getDotQualifiedNameAccess() {
		return pDotQualifiedName;
	}
	
	public ParserRule getDotQualifiedNameRule() {
		return getDotQualifiedNameAccess().getRule();
	}
	
	//terminal DECIMAL_VALUE returns Ecore::EInt:
	//	'0'..'9' '0'..'9'*;
	public TerminalRule getDECIMAL_VALUERule() {
		return tDECIMAL_VALUE;
	}
	
	//terminal EXP_VALUE:
	//	DECIMAL_VALUE ('e' | 'E') ('+' | '-')? DECIMAL_VALUE;
	public TerminalRule getEXP_VALUERule() {
		return tEXP_VALUE;
	}
	
	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal UNRESTRICTED_NAME:
	//	'\'' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '\''))* '\'';
	public TerminalRule getUNRESTRICTED_NAMERule() {
		return tUNRESTRICTED_NAME;
	}
	
	//terminal STRING_VALUE:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRING_VALUERule() {
		return tSTRING_VALUE;
	}
	
	//terminal ML_COMMENT:
	//	'/*' !'*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal DOCUMENTATION_COMMENT:
	//	'/**'->'*/';
	public TerminalRule getDOCUMENTATION_COMMENTRule() {
		return tDOCUMENTATION_COMMENT;
	}
	
	//terminal ML_NOTE:
	//	'//*'->'*/';
	public TerminalRule getML_NOTERule() {
		return tML_NOTE;
	}
	
	//terminal SL_NOTE:
	//	'//' (!('\n' | '\r') !('\n' | '\r')*)? ('\r'? '\n')?;
	public TerminalRule getSL_NOTERule() {
		return tSL_NOTE;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
