//*
XPECT_SETUP org.omg.sysml.xpect.tests.expression.SysMLTests
        ResourceSet {
                ThisFile {}
                    File {from ="/library.kernel/Base.kerml"}
                    File {from ="/library.kernel/Objects.kerml"}
                    File {from ="/library.kernel/Performances.kerml"}
                    File {from ="/library.kernel/ScalarValues.kerml"}
                	File {from ="/library.kernel/ScalarFunctions.kerml"}
                	File {from ="/library.systems/Items.sysml"}
                	File {from ="/library.systems/Parts.sysml"}
                	File {from ="/library.domain/Quantities and Units/USCustomaryUnits.sysml"}
					File {from ="/library.domain/Quantities and Units/Quantities.sysml"}
					File {from ="/library.domain/Quantities and Units/UnitsAndScales.sysml"}
					File {from ="/library.domain/Quantities and Units/ISQAtomicNuclear.sysml"}
					File {from ="/library.domain/Quantities and Units/ISQChemistryMolecular.sysml"}
					File {from ="/library.domain/Quantities and Units/ISQElectromagnetism.sysml"}
					File {from ="/library.domain/Quantities and Units/ISQLight.sysml"}
					File {from ="/library.domain/Quantities and Units/ISQMechanics.sysml"}
					File {from ="/library.domain/Quantities and Units/ISQSpaceTime.sysml"}
					File {from ="/library.domain/Quantities and Units/ISQThermodynamics.sysml"}
					File {from ="/library.domain/Quantities and Units/ISQ.sysml"}
					File {from ="/library.domain/Quantities and Units/SI.sysml"}
					File {from ="/library.domain/Quantities and Units/SIPrefixes.sysml"}
        }
        Workspace {
                JavaProject {
                        SrcFolder {
                                ThisFile {}
                                File {from ="/library.kernel/Base.kerml"}
                                File {from ="/library.kernel/Objects.kerml"}
                                File {from ="/library.kernel/Performances.kerml"}
                                File {from ="/library.kernel/ScalarValues.kerml"}
                				File {from ="/library.kernel/ScalarFunctions.kerml"}
                				File {from ="/library.systems/Items.sysml"}
                				File {from ="/library.systems/Parts.sysml"}
                				File {from ="/library.domain/Quantities and Units/USCustomaryUnits.sysml"}
                                File {from ="/library.domain/Quantities and Units/Quantities.sysml"}
								File {from ="/library.domain/Quantities and Units/UnitsAndScales.sysml"}
								File {from ="/library.domain/Quantities and Units/ISQAtomicNuclear.sysml"}
								File {from ="/library.domain/Quantities and Units/ISQChemistryMolecular.sysml"}
								File {from ="/library.domain/Quantities and Units/ISQElectromagnetism.sysml"}
								File {from ="/library.domain/Quantities and Units/ISQLight.sysml"}
								File {from ="/library.domain/Quantities and Units/ISQMechanics.sysml"}
								File {from ="/library.domain/Quantities and Units/ISQSpaceTime.sysml"}
								File {from ="/library.domain/Quantities and Units/ISQThermodynamics.sysml"}
								File {from ="/library.domain/Quantities and Units/ISQ.sysml"}
								File {from ="/library.domain/Quantities and Units/SI.sysml"}
								File {from ="/library.domain/Quantities and Units/SIPrefixes.sysml"}
                        }
                }
        }
END_SETUP
*/
// XPECT noErrors ---> ""
package '15_01-Constants' {
	import ScalarValues::*;
	import Quantities::*;
	import UnitsAndScales::*;
	import ISQ::*;
    import SI::*;
    import USCustomaryUnits::*;

    /* Math and physical constants should be defined in the model library. */
    
     /**
     Examples of mathematical constants
     Note: There should be a way to mark these as "invariant" 
     */
    package 'Mathematical Constants' {
        attribute e: Real = 2.71828182845904523536;
        attribute pi: Real = 3.14159265358979323846;
    }

    attribute def DimensionOneValue :> QuantityValue {
		attribute magnitude: Real redefines QuantityValue::num;
    	attribute scale: DimensionOneUnit redefines QuantityValue::mRef;
    }
    
    attribute def AccelerationUnit :> SIDerivedUnit {
		attribute lengthPowerFactor :>> SIDerivedUnit::lengthPowerFactor {
			attribute exponent redefines UnitPowerFactor::exponent = 1;
		}
		attribute timePowerFactor :>> SIDerivedUnit::timePowerFactor {
			attribute exponent redefines UnitPowerFactor::exponent = -2;
		}		
    }
    attribute def AccelerationValue :> QuantityValue {
		attribute magnitude: Real redefines QuantityValue::num;
    	ref scale: AccelerationUnit redefines QuantityValue::mRef;
    }

    /**
     Examples of fundamental physical constants
     Note: There should be a way to mark these as "invariant" 
     */
    /**
     * The reference source is:
     CODATA - Task Group on Fundamental Physical Constants (TGFC) - 2010 Recommended Values - See http://www.codata.org/committees-and-groups/fundamental-physical-constants/tgfc-previous-values-and-publications
     */
    package 'Fundamental Physical Constants' {
        attribute 'fine structure constant': DimensionOneValue = 7.297352569824E-3;
        attribute 'electron to proton mass ratio': DimensionOneValue = 5.446170217822E-4;
        attribute 'speed of light in vacuum': SpeedValue = 299792458@[m/s];
    }

    package 'Global Context' {
        attribute 'nominal earth gravitational acceleration': AccelerationValue = 9.80665@[m/(s^2)];
    }

    package 'Model X Context' {
        attribute 'amplifier gain': DimensionOneValue = 3.5;
    }

}
