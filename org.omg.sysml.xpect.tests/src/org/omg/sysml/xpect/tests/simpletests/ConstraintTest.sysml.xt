//* 
XPECT_SETUP org.omg.sysml.xpect.tests.simpletests.SysMLSimpleTests
	ResourceSet {
		ThisFile {}
		File {from ="/library.kernel/Base.kerml"}
		File {from ="/library.kernel/ScalarValues.kerml"}
		File {from ="/library.kernel/BaseFunctions.kerml"}
		File {from ="/library.kernel/ScalarFunctions.kerml"}
		File {from ="/library.systems/Blocks.sysml"}
		File {from ="/library.systems/Constraints.sysml"}
		File {from ="/library.domain/Quantities and Units/Quantities.sysml"}
		File {from ="/library.domain/Quantities and Units/UnitsAndScales.sysml"}
		File {from ="/library.domain/Quantities and Units/ISQ.sysml"}
		File {from ="/library.domain/Quantities and Units/SI.sysml"}
		File {from ="/library.domain/Quantities and Units/SIPrefixes.sysml"}
	}
	Workspace {
		JavaProject {
			SrcFolder {
				ThisFile {}
				File {from ="/library.kernel/Base.kerml"}
				File {from ="/library.kernel/ScalarValues.kerml"}
				File {from ="/library.kernel/BaseFunctions.kerml"}
				File {from ="/library.kernel/ScalarFunctions.kerml"}
				File {from ="/library.systems/Blocks.sysml"}
				File {from ="/library.systems/Constraints.sysml"}
				File {from ="/library.domain/Quantities and Units/Quantities.sysml"}
				File {from ="/library.domain/Quantities and Units/UnitsAndScales.sysml"}
				File {from ="/library.domain/Quantities and Units/ISQ.sysml"}
				File {from ="/library.domain/Quantities and Units/SI.sysml"}
				File {from ="/library.domain/Quantities and Units/SIPrefixes.sysml"}
			}
		}
	}
END_SETUP 
*/
// XPECT noErrors ---> ""
package ConstraintTest {
	import ISQ::MassValue;
	import SI::kg;
	import ScalarFunctions::sum;
	
	constraint def MassAnalysis {
		value totalMass: MassValue;
		value componentMasses: MassValue[0..*];		

		totalMass == sum(componentMasses)
	}
	
	block Component {
		value mass: MassValue;
	}
	
	part vehicle : Component {	
		part engine : Component;
		part frontAxleAssembly : Component;
		part rearAxleAssembly : Component;	
	}
		
	part vehicle1a :> vehicle {
		assert constraint massAnalysis : MassAnalysis {
			value totalMass redefines MassAnalysis::totalMass;
			value componentMasses redefines MassAnalysis::componentMasses;
		}
		value mass redefines vehicle::mass;
		part engine redefines vehicle::engine {
			value mass redefines vehicle::engine::mass;
		}
		part frontAxleAssembly redefines vehicle::frontAxleAssembly {
			value mass redefines vehicle::frontAxleAssembly::mass;
		}
		part rearAxleAssembly redefines vehicle::rearAxleAssembly {
			value mass redefines vehicle::rearAxleAssembly::mass;
		}
		
		bind massAnalysis::totalMass = mass;
		bind massAnalysis::componentMasses[1] = engine::mass;
		bind massAnalysis::componentMasses[1] = frontAxleAssembly::mass;
		bind massAnalysis::componentMasses[1] = rearAxleAssembly::mass;
	}
	
	part vehicle1b :> vehicle {		
		assert constraint massAnalysis : MassAnalysis {
			value redefines totalMass = mass;
			value redefines componentMasses = {engine::mass, frontAxleAssembly::mass, rearAxleAssembly::mass};		
		}	
	}
		
	constraint def MassAnalysis2 (totalMass : MassValue, componentMasses: MassValue[0..*]) {
		totalMass == sum(componentMasses)
	}
	
	part vehicle2a :> vehicle {
		assert constraint massConstraint : MassAnalysis2 (totalMass, componentMasses);
		value mass redefines vehicle::mass;
		part engine redefines vehicle::engine {
			value mass redefines vehicle::engine::mass;
		}
		part frontAxleAssembly redefines vehicle::frontAxleAssembly {
			value mass redefines vehicle::frontAxleAssembly::mass;
		}
		part rearAxleAssembly redefines vehicle::rearAxleAssembly {
			value mass redefines vehicle::rearAxleAssembly::mass;
		}
		
		bind massConstraint::totalMass = mass;
		bind massConstraint::componentMasses[1] = engine::mass;
		bind massConstraint::componentMasses[1] = frontAxleAssembly::mass;
		bind massConstraint::componentMasses[1] = rearAxleAssembly::mass;
	}
		
	part vehicle2b :> vehicle {
		assert constraint massAnalysis2 : MassAnalysis2 (
			totalMass = mass,
			componentMasses = {engine::mass, frontAxleAssembly::mass, rearAxleAssembly::mass}
		);
	}
	
	constraint def MassAnalysis3 (totalMass : MassValue, componentMasses: MassValue[0..*]);
	
	constraint massAnalysis3 : MassAnalysis3 (totalMass : MassValue, componentMasses: MassValue[0..*]) {
		totalMass == sum(componentMasses)
	}
	
	part vehicle3 :> vehicle {
		assert massAnalysis3 (
			totalMass = mass,
			componentMasses = {engine::mass, frontAxleAssembly::mass, rearAxleAssembly::mass}
		);
	}
	
	part vehicle4 :> vehicle {
		assert constraint { mass == engine::mass + frontAxleAssembly::mass + rearAxleAssembly::mass }
	}
	
}