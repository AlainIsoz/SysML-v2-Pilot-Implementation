/*
 * generated by Xtext 2.16.0
 */
package org.omg.sysml.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.omg.sysml.lang.sysml.Annotation;
import org.omg.sysml.lang.sysml.Association;
import org.omg.sysml.lang.sysml.Behavior;
import org.omg.sysml.lang.sysml.BlockExpression;
import org.omg.sysml.lang.sysml.Comment;
import org.omg.sysml.lang.sysml.Connector;
import org.omg.sysml.lang.sysml.ConnectorEnd;
import org.omg.sysml.lang.sysml.ElementReferenceExpression;
import org.omg.sysml.lang.sysml.EndFeatureMembership;
import org.omg.sysml.lang.sysml.Feature;
import org.omg.sysml.lang.sysml.FeatureMembership;
import org.omg.sysml.lang.sysml.FeatureTyping;
import org.omg.sysml.lang.sysml.FeatureValue;
import org.omg.sysml.lang.sysml.Function;
import org.omg.sysml.lang.sysml.Import;
import org.omg.sysml.lang.sysml.InvocationExpression;
import org.omg.sysml.lang.sysml.LiteralBoolean;
import org.omg.sysml.lang.sysml.LiteralInteger;
import org.omg.sysml.lang.sysml.LiteralReal;
import org.omg.sysml.lang.sysml.LiteralString;
import org.omg.sysml.lang.sysml.LiteralUnbounded;
import org.omg.sysml.lang.sysml.Membership;
import org.omg.sysml.lang.sysml.Multiplicity;
import org.omg.sysml.lang.sysml.NullExpression;
import org.omg.sysml.lang.sysml.ObjectClass;
import org.omg.sysml.lang.sysml.OperatorExpression;
import org.omg.sysml.lang.sysml.ParameterMembership;
import org.omg.sysml.lang.sysml.Redefinition;
import org.omg.sysml.lang.sysml.ReturnParameterMembership;
import org.omg.sysml.lang.sysml.SequenceConstructionExpression;
import org.omg.sysml.lang.sysml.Step;
import org.omg.sysml.lang.sysml.Subsetting;
import org.omg.sysml.lang.sysml.Superclassing;
import org.omg.sysml.lang.sysml.SysMLPackage;
import org.omg.sysml.lang.sysml.ValueClass;
import org.omg.sysml.services.AlfGrammarAccess;

@SuppressWarnings("all")
public class AlfSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AlfGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SysMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SysMLPackage.ANNOTATION:
				sequence_Annotation(context, (Annotation) semanticObject); 
				return; 
			case SysMLPackage.ASSOCIATION:
				if (rule == grammarAccess.getNonFeatureDefinitionRule()
						|| rule == grammarAccess.getAssociationDefinitionOrStubRule()) {
					sequence_AssociationBody_AssociationDeclaration_ClassDeclarationCompletion_SpecializationList(context, (Association) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUnitDefinitionRule()) {
					sequence_AssociationBody_AssociationDeclaration_ClassDeclarationCompletion_SpecializationList_UnitPrefix(context, (Association) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAssociationUnitDefinitionRule()) {
					sequence_AssociationBody_AssociationDeclaration_ClassDeclarationCompletion_SpecializationList_UnitPrefix(context, (Association) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.BEHAVIOR:
				if (rule == grammarAccess.getNonFeatureDefinitionRule()
						|| rule == grammarAccess.getBehaviorDefinitionOrStubRule()) {
					sequence_BehaviorBody_BehaviorDeclaration_ParameterList_SpecializationList(context, (Behavior) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUnitDefinitionRule()) {
					sequence_BehaviorBody_BehaviorDeclaration_ParameterList_SpecializationList_UnitPrefix(context, (Behavior) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBehaviorUnitDefinitionRule()) {
					sequence_BehaviorBody_BehaviorDeclaration_ParameterList_SpecializationList_UnitPrefix(context, (Behavior) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.BLOCK_EXPRESSION:
				if (rule == grammarAccess.getBodyExpressionRule()) {
					sequence_BodyExpression(context, (BlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionDefinitionRule()) {
					sequence_ExpressionDefinition_FunctionBody_ParameterList_Redefines_ReturnParameterPart_Subsets_SubsettingPart_TypePart(context, (BlockExpression) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CLASS:
				sequence_CategoryBody_ClassDeclaration_ClassDeclarationCompletion_SpecializationList(context, (org.omg.sysml.lang.sysml.Class) semanticObject); 
				return; 
			case SysMLPackage.COMMENT:
				sequence_Comment(context, (Comment) semanticObject); 
				return; 
			case SysMLPackage.CONNECTOR:
				if (rule == grammarAccess.getAbstractConnectorDefinitionRule()) {
					sequence_AbstractCategoryBody_ConnectorDeclaration(context, (Connector) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getConnectorDefinitionRule()) {
					sequence_CategoryBody_ConnectorDeclaration(context, (Connector) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CONNECTOR_END:
				sequence_ConnectorEnd(context, (ConnectorEnd) semanticObject); 
				return; 
			case SysMLPackage.ELEMENT_REFERENCE_EXPRESSION:
				sequence_NameExpression(context, (ElementReferenceExpression) semanticObject); 
				return; 
			case SysMLPackage.END_FEATURE_MEMBERSHIP:
				sequence_AssociationEndFeatureMember_CategoryMemberPrefix(context, (EndFeatureMembership) semanticObject); 
				return; 
			case SysMLPackage.FEATURE:
				if (rule == grammarAccess.getAbstractFeatureDefinitionRule()) {
					sequence_AbstractCategoryBody_AbstractFeatureCompletion_AbstractUnnamedFeatureDefinition_FeatureDeclaration_Redefines_Subsets_SubsettingPart_TypePart(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAbstractUnnamedFeatureDefinitionRule()) {
					sequence_AbstractCategoryBody_AbstractFeatureCompletion_AbstractUnnamedFeatureDefinition_TypePart(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAbstractNamedFeatureDefinitionRule()) {
					sequence_AbstractCategoryBody_AbstractFeatureCompletion_FeatureDeclaration_Redefines_Subsets_SubsettingPart_TypePart(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUnitDefinitionRule()) {
					sequence_CategoryBody_FeatureBodyDefinition_FeatureCompletion_FeatureDeclaration_Redefines_Subsets_SubsettingPart_TypePart_UnitPrefix(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureUnitDefinitionRule()) {
					sequence_CategoryBody_FeatureBodyDefinition_FeatureCompletion_FeatureDeclaration_Redefines_Subsets_SubsettingPart_TypePart_UnitPrefix(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNamedFeatureDefinitionRule()) {
					sequence_CategoryBody_FeatureCompletion_FeatureDeclaration_Redefines_Subsets_SubsettingPart_TypePart(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureDefinitionRule()) {
					sequence_CategoryBody_FeatureCompletion_FeatureDeclaration_Redefines_Subsets_SubsettingPart_TypePart_UnnamedFeatureDefinition(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUnnamedFeatureDefinitionRule()) {
					sequence_CategoryBody_FeatureCompletion_TypePart_UnnamedFeatureDefinition(context, (Feature) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_MEMBERSHIP:
				if (rule == grammarAccess.getBehaviorMemberRule()) {
					sequence_BehaviorStepMember_CategoryMemberPrefix_FeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBehaviorStepMemberRule()) {
					sequence_BehaviorStepMember_CategoryMemberPrefix(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBodyMemberRule()) {
					sequence_BodyMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCategoryMemberRule()) {
					sequence_CategoryMemberPrefix_FeatureCategoryMember_FeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureCategoryMemberRule()) {
					sequence_CategoryMemberPrefix_FeatureCategoryMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureMemberRule()
						|| rule == grammarAccess.getAssociationMemberRule()) {
					sequence_CategoryMemberPrefix_FeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionMemberRule()) {
					sequence_ExpressionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNamedExpressionMemberRule()) {
					sequence_NamedExpressionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_TYPING:
				if (rule == grammarAccess.getConnectorTypingRule()) {
					sequence_ConnectorTyping(context, (FeatureTyping) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionTypingRule()) {
					sequence_ExpressionTyping(context, (FeatureTyping) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureTypingRule()) {
					sequence_FeatureTyping(context, (FeatureTyping) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_VALUE:
				sequence_FeatureValue(context, (FeatureValue) semanticObject); 
				return; 
			case SysMLPackage.FUNCTION:
				if (rule == grammarAccess.getNonFeatureDefinitionRule()
						|| rule == grammarAccess.getFunctionDefinitionOrStubRule()) {
					sequence_FunctionBody_FunctionDeclaration_ParameterList_ReturnParameterPart_SpecializationList(context, (Function) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUnitDefinitionRule()) {
					sequence_FunctionBody_FunctionDeclaration_ParameterList_ReturnParameterPart_SpecializationList_UnitPrefix(context, (Function) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFunctionUnitDefinitionRule()) {
					sequence_FunctionBody_FunctionDeclaration_ParameterList_ReturnParameterPart_SpecializationList_UnitPrefix(context, (Function) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.IMPORT:
				sequence_PackageImport(context, (Import) semanticObject); 
				return; 
			case SysMLPackage.INVOCATION_EXPRESSION:
				sequence_InvocationExpression_NamedTuple_PositionalTuple(context, (InvocationExpression) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_BOOLEAN:
				sequence_BooleanLiteralExpression(context, (LiteralBoolean) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_INTEGER:
				sequence_NaturalLiteralExpression(context, (LiteralInteger) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_REAL:
				sequence_RealLiteralExpression(context, (LiteralReal) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_STRING:
				sequence_StringLiteralExpression(context, (LiteralString) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_UNBOUNDED:
				sequence_UnlimitedNaturalLiteralExpression(context, (LiteralUnbounded) semanticObject); 
				return; 
			case SysMLPackage.MEMBERSHIP:
				if (rule == grammarAccess.getCategoryMemberRule()
						|| rule == grammarAccess.getNonFeatureCategoryMemberRule()
						|| rule == grammarAccess.getAssociationMemberRule()
						|| rule == grammarAccess.getBehaviorMemberRule()) {
					sequence_CategoryMemberPrefix_NonFeatureMemberElement(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getElementImportRule()) {
					sequence_ElementImport_PackageMemberPrefix(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPackageMemberRule()) {
					sequence_FeaturePackageMemberElement_NonFeatureMemberElement_PackageMemberPrefix(context, (Membership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.MULTIPLICITY:
				sequence_Multiplicity(context, (Multiplicity) semanticObject); 
				return; 
			case SysMLPackage.NULL_EXPRESSION:
				sequence_NullExpression(context, (NullExpression) semanticObject); 
				return; 
			case SysMLPackage.OBJECT_CLASS:
				if (rule == grammarAccess.getNonFeatureDefinitionRule()
						|| rule == grammarAccess.getObjectClassDefinitionOrStubRule()) {
					sequence_CategoryBody_ClassDeclarationCompletion_ObjectClassDeclaration_SpecializationList(context, (ObjectClass) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getObjectClassUnitDefinitionRule()) {
					sequence_CategoryBody_ClassDeclarationCompletion_ObjectClassDeclaration_SpecializationList_UnitPrefix(context, (ObjectClass) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUnitDefinitionRule()) {
					sequence_CategoryBody_ClassDeclaration_ClassDeclarationCompletion_ObjectClassDeclaration_SpecializationList_UnitPrefix(context, (ObjectClass) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getClassUnitDefinitionRule()) {
					sequence_CategoryBody_ClassDeclaration_ClassDeclarationCompletion_SpecializationList_UnitPrefix(context, (ObjectClass) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.OPERATOR_EXPRESSION:
				sequence_AdditiveExpression_AndExpression_ConditionalAndExpression_ConditionalExpression_ConditionalOrExpression_EqualityExpression_MultiplicativeExpression_OrExpression_PrimaryExpression_RelationalExpression_SequenceAccessExpression_UnaryExpression_UnitsExpression_XorExpression(context, (OperatorExpression) semanticObject); 
				return; 
			case SysMLPackage.PACKAGE:
				if (rule == grammarAccess.getNonFeatureDefinitionRule()
						|| rule == grammarAccess.getPackageDefinitionOrStubRule()) {
					sequence_PackageDefinition(context, (org.omg.sysml.lang.sysml.Package) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUnitDefinitionRule()
						|| rule == grammarAccess.getPackageUnitDefinitionRule()) {
					sequence_PackageDefinition_UnitPrefix(context, (org.omg.sysml.lang.sysml.Package) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PARAMETER:
				if (rule == grammarAccess.getBodyParameterRule()) {
					sequence_BodyParameter(context, (org.omg.sysml.lang.sysml.Parameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterDefinitionRule()) {
					sequence_TypePart(context, (org.omg.sysml.lang.sysml.Parameter) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PARAMETER_MEMBERSHIP:
				if (rule == grammarAccess.getBodyParameterMemberRule()) {
					sequence_BodyParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterMemberRule()) {
					sequence_ParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.REDEFINITION:
				sequence_Redefinition(context, (Redefinition) semanticObject); 
				return; 
			case SysMLPackage.RETURN_PARAMETER_MEMBERSHIP:
				sequence_ReturnParameterMember(context, (ReturnParameterMembership) semanticObject); 
				return; 
			case SysMLPackage.SEQUENCE_CONSTRUCTION_EXPRESSION:
				sequence_SequenceConstructionExpression(context, (SequenceConstructionExpression) semanticObject); 
				return; 
			case SysMLPackage.STEP:
				sequence_BehaviorBody_ParameterList_Redefines_StepDefinition_Subsets_SubsettingPart(context, (Step) semanticObject); 
				return; 
			case SysMLPackage.SUBSETTING:
				sequence_Subset(context, (Subsetting) semanticObject); 
				return; 
			case SysMLPackage.SUPERCLASSING:
				sequence_Superclassing(context, (Superclassing) semanticObject); 
				return; 
			case SysMLPackage.VALUE_CLASS:
				if (rule == grammarAccess.getUnitDefinitionRule()) {
					sequence_CategoryBody_ClassDeclarationCompletion_SpecializationList_UnitPrefix_ValueClassDeclaration(context, (ValueClass) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getValueClassUnitDefinitionRule()) {
					sequence_CategoryBody_ClassDeclarationCompletion_SpecializationList_UnitPrefix_ValueClassDeclaration(context, (ValueClass) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNonFeatureDefinitionRule()
						|| rule == grammarAccess.getValueClassDefinitionOrStubRule()) {
					sequence_CategoryBody_ClassDeclarationCompletion_SpecializationList_ValueClassDeclaration(context, (ValueClass) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AbstractFeatureDefinition returns Feature
	 *
	 * Constraint:
	 *     (
	 *         (ownedRelationship+=Redefinition | name=Name) 
	 *         isComposite?='compose'? 
	 *         ownedRelationship+=FeatureTyping? 
	 *         ownedRelationship+=Multiplicity? 
	 *         isOrdered?='ordered'? 
	 *         (isNonunique?='nonunique'? isOrdered?='ordered'?)* 
	 *         ((ownedRelationship+=Subset ownedRelationship+=Subset*) | (ownedRelationship+=Redefinition ownedRelationship+=Redefinition*))* 
	 *         ownedRelationship+=FeatureValue? 
	 *         (isAbstract?=';' | (isAbstract?='{' (ownedRelationship+=CategoryMember | ownedRelationship+=PackageImport)*))
	 *     )
	 */
	protected void sequence_AbstractCategoryBody_AbstractFeatureCompletion_AbstractUnnamedFeatureDefinition_FeatureDeclaration_Redefines_Subsets_SubsettingPart_TypePart(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractUnnamedFeatureDefinition returns Feature
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=Redefinition 
	 *         isComposite?='compose'? 
	 *         ownedRelationship+=FeatureTyping? 
	 *         ownedRelationship+=Multiplicity? 
	 *         (isOrdered?='ordered' | isNonunique?='nonunique')* 
	 *         ownedRelationship+=FeatureValue? 
	 *         (isAbstract?=';' | (isAbstract?='{' (ownedRelationship+=CategoryMember | ownedRelationship+=PackageImport)*))
	 *     )
	 */
	protected void sequence_AbstractCategoryBody_AbstractFeatureCompletion_AbstractUnnamedFeatureDefinition_TypePart(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractNamedFeatureDefinition returns Feature
	 *
	 * Constraint:
	 *     (
	 *         name=Name 
	 *         isComposite?='compose'? 
	 *         ownedRelationship+=FeatureTyping? 
	 *         ownedRelationship+=Multiplicity? 
	 *         (isOrdered?='ordered' | isNonunique?='nonunique')* 
	 *         ((ownedRelationship+=Subset ownedRelationship+=Subset*) | (ownedRelationship+=Redefinition ownedRelationship+=Redefinition*))* 
	 *         ownedRelationship+=FeatureValue? 
	 *         (isAbstract?=';' | (isAbstract?='{' (ownedRelationship+=CategoryMember | ownedRelationship+=PackageImport)*))
	 *     )
	 */
	protected void sequence_AbstractCategoryBody_AbstractFeatureCompletion_FeatureDeclaration_Redefines_Subsets_SubsettingPart_TypePart(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractConnectorDefinition returns Connector
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (name=Name? ownedRelationship+=ConnectorTyping? ownedRelationship+=ConnectorEnd ownedRelationship+=ConnectorEnd) | 
	 *             (name=Name? ownedRelationship+=ConnectorTyping? ownedRelationship+=ConnectorEnd ownedRelationship+=ConnectorEnd ownedRelationship+=ConnectorEnd*)
	 *         ) 
	 *         (isAbstract?=';' | (isAbstract?='{' (ownedRelationship+=CategoryMember | ownedRelationship+=PackageImport)*))
	 *     )
	 */
	protected void sequence_AbstractCategoryBody_ConnectorDeclaration(ISerializationContext context, Connector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns OperatorExpression
	 *     ConditionalExpression returns OperatorExpression
	 *     ConditionalExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ConditionalOrExpression returns OperatorExpression
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ConditionalAndExpression returns OperatorExpression
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     OrExpression returns OperatorExpression
	 *     OrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     XorExpression returns OperatorExpression
	 *     XorExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     AndExpression returns OperatorExpression
	 *     AndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     EqualityExpression returns OperatorExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     RelationalExpression returns OperatorExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     AdditiveExpression returns OperatorExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     MultiplicativeExpression returns OperatorExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     UnitsExpression returns OperatorExpression
	 *     UnitsExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     UnaryExpression returns OperatorExpression
	 *     SequenceAccessExpression returns OperatorExpression
	 *     SequenceAccessExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     PrimaryExpression returns OperatorExpression
	 *     PrimaryExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     BaseExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             operand+=ConditionalExpression_OperatorExpression_1_0 
	 *             operator=ConditionalTestOperator 
	 *             operand+=ConditionalOrExpression 
	 *             operand+=ConditionalExpression
	 *         ) | 
	 *         (operand+=ConditionalOrExpression_OperatorExpression_1_0 operator=ConditionalOrOperator operand+=ConditionalAndExpression) | 
	 *         (operand+=ConditionalAndExpression_OperatorExpression_1_0 operator=ConditionalAndOperator operand+=OrExpression) | 
	 *         (operand+=OrExpression_OperatorExpression_1_0 operator=OrOperator operand+=XorExpression) | 
	 *         (operand+=XorExpression_OperatorExpression_1_0 operator=XorOperator operand+=AndExpression) | 
	 *         (operand+=AndExpression_OperatorExpression_1_0 operator=AndOperator operand+=EqualityExpression) | 
	 *         (operand+=EqualityExpression_OperatorExpression_1_0 operator=EqualityOperator operand+=RelationalExpression) | 
	 *         (operand+=RelationalExpression_OperatorExpression_1_0 operator=RelationalOperator operand+=AdditiveExpression) | 
	 *         (operand+=AdditiveExpression_OperatorExpression_1_0 operator=AdditiveOperator operand+=MultiplicativeExpression) | 
	 *         (operand+=MultiplicativeExpression_OperatorExpression_1_0 operator=MultiplicativeOperator operand+=UnitsExpression) | 
	 *         (operand+=UnitsExpression_OperatorExpression_1_0 operator='@' operand+=Expression) | 
	 *         (operator=UnaryOperator operand+=SequenceAccessExpression) | 
	 *         (operand+=SequenceAccessExpression_OperatorExpression_1_0 operator='[' operand+=Expression) | 
	 *         (operand+=PrimaryExpression_OperatorExpression_1_0 operator=Name ownedRelationship+=BodyMember+)
	 *     )
	 */
	protected void sequence_AdditiveExpression_AndExpression_ConditionalAndExpression_ConditionalExpression_ConditionalOrExpression_EqualityExpression_MultiplicativeExpression_OrExpression_PrimaryExpression_RelationalExpression_SequenceAccessExpression_UnaryExpression_UnitsExpression_XorExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Annotation returns Annotation
	 *
	 * Constraint:
	 *     ownedRelatedElement+=Comment
	 */
	protected void sequence_Annotation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureDefinition returns Association
	 *     AssociationDefinitionOrStub returns Association
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         name=Name 
	 *         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	 *         (ownedRelationship+=AssociationMember | ownedRelationship+=PackageImport)*
	 *     )
	 */
	protected void sequence_AssociationBody_AssociationDeclaration_ClassDeclarationCompletion_SpecializationList(ISerializationContext context, Association semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnitDefinition returns Association
	 *
	 * Constraint:
	 *     (
	 *         (ownedRelationship+=PackageImport | ownedRelationship+=ElementImport)* 
	 *         ownedRelationship+=Annotation? 
	 *         isAbstract?='abstract'? 
	 *         name=Name 
	 *         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	 *         (ownedRelationship+=AssociationMember | ownedRelationship+=PackageImport)*
	 *     )
	 */
	protected void sequence_AssociationBody_AssociationDeclaration_ClassDeclarationCompletion_SpecializationList_UnitPrefix(ISerializationContext context, Association semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     AssociationUnitDefinition returns Association
	//
	// Constraint:
	//     (
	//         (ownedRelationship+=PackageImport | ownedRelationship+=ElementImport)* 
	//         ownedRelationship+=Annotation* 
	//         isAbstract?='abstract'? 
	//         name=Name 
	//         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	//         (ownedRelationship+=AssociationMember | ownedRelationship+=PackageImport)*
	//     )
	//
	// protected void sequence_AssociationBody_AssociationDeclaration_ClassDeclarationCompletion_SpecializationList_UnitPrefix(ISerializationContext context, Association semanticObject) { }
	
	/**
	 * Contexts:
	 *     AssociationMember returns EndFeatureMembership
	 *     AssociationEndFeatureMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=Annotation* 
	 *         visibility=VisibilityIndicator? 
	 *         (
	 *             ((isPart?='part' | isPort?='port')? direction=FeatureDirection? ownedRelatedElement+=FeatureDefinition) | 
	 *             ((isPart?='part' | isPort?='port')? direction=FeatureDirection? ownedRelatedElement+=AbstractFeatureDefinition) | 
	 *             (isPart?='part' memberName=Name? memberFeature=[Feature|QualifiedName]) | 
	 *             (direction=FeatureDirection? ownedRelatedElement+=NamedFeatureDefinition) | 
	 *             (direction=FeatureDirection? ownedRelatedElement+=AbstractNamedFeatureDefinition) | 
	 *             (memberName=Name memberFeature=[Feature|QualifiedName])
	 *         )
	 *     )
	 */
	protected void sequence_AssociationEndFeatureMember_CategoryMemberPrefix(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureDefinition returns Behavior
	 *     BehaviorDefinitionOrStub returns Behavior
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         name=Name 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	 *         (ownedRelationship+=BehaviorMember | ownedRelationship+=PackageImport)*
	 *     )
	 */
	protected void sequence_BehaviorBody_BehaviorDeclaration_ParameterList_SpecializationList(ISerializationContext context, Behavior semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnitDefinition returns Behavior
	 *
	 * Constraint:
	 *     (
	 *         (ownedRelationship+=PackageImport | ownedRelationship+=ElementImport)* 
	 *         ownedRelationship+=Annotation? 
	 *         isAbstract?='abstract'? 
	 *         name=Name 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	 *         (ownedRelationship+=BehaviorMember | ownedRelationship+=PackageImport)*
	 *     )
	 */
	protected void sequence_BehaviorBody_BehaviorDeclaration_ParameterList_SpecializationList_UnitPrefix(ISerializationContext context, Behavior semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     BehaviorUnitDefinition returns Behavior
	//
	// Constraint:
	//     (
	//         (ownedRelationship+=PackageImport | ownedRelationship+=ElementImport)* 
	//         ownedRelationship+=Annotation* 
	//         isAbstract?='abstract'? 
	//         name=Name 
	//         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	//         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	//         (ownedRelationship+=BehaviorMember | ownedRelationship+=PackageImport)*
	//     )
	//
	// protected void sequence_BehaviorBody_BehaviorDeclaration_ParameterList_SpecializationList_UnitPrefix(ISerializationContext context, Behavior semanticObject) { }
	
	/**
	 * Contexts:
	 *     StepDefinition returns Step
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         (name=Name | ownedRelationship+=Redefinition) 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         ((ownedRelationship+=Subset ownedRelationship+=Subset*) | (ownedRelationship+=Redefinition ownedRelationship+=Redefinition*))* 
	 *         ownedRelationship+=BehaviorMember? 
	 *         (ownedRelationship+=PackageImport? ownedRelationship+=BehaviorMember?)*
	 *     )
	 */
	protected void sequence_BehaviorBody_ParameterList_Redefines_StepDefinition_Subsets_SubsettingPart(ISerializationContext context, Step semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=Annotation* 
	 *         visibility=VisibilityIndicator? 
	 *         (
	 *             (
	 *                 (isPart?='part' | isPort?='port')? 
	 *                 direction=FeatureDirection? 
	 *                 (ownedRelatedElement+=FeatureDefinition | (memberName=Name? memberFeature=[Feature|QualifiedName]))
	 *             ) | 
	 *             ((isPart?='part' | isPort?='port')? direction=FeatureDirection? ownedRelatedElement+=AbstractFeatureDefinition) | 
	 *             ownedRelatedElement+=ConnectorDefinition | 
	 *             (memberName=Name? memberFeature=[Connector|QualifiedName]) | 
	 *             ownedRelatedElement+=AbstractConnectorDefinition | 
	 *             ownedRelatedElement+=StepDefinition | 
	 *             ownedRelatedElement+=ExpressionDefinition | 
	 *             (memberName=Name? memberFeature=[Step|QualifiedName]) | 
	 *             (memberName=Name? memberFeature=[Expression|QualifiedName])
	 *         )
	 *     )
	 */
	protected void sequence_BehaviorStepMember_CategoryMemberPrefix_FeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorStepMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=Annotation* 
	 *         visibility=VisibilityIndicator? 
	 *         (
	 *             ownedRelatedElement+=StepDefinition | 
	 *             ownedRelatedElement+=ExpressionDefinition | 
	 *             (memberName=Name? memberFeature=[Step|QualifiedName]) | 
	 *             (memberName=Name? memberFeature=[Expression|QualifiedName])
	 *         )
	 *     )
	 */
	protected void sequence_BehaviorStepMember_CategoryMemberPrefix(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BodyExpression returns BlockExpression
	 *
	 * Constraint:
	 *     (
	 *         (ownedRelationship+=BodyParameterMember ownedRelationship+=BodyParameterMember* ownedRelationship+=ExpressionMember) | 
	 *         ownedRelationship+=ExpressionTyping
	 *     )
	 */
	protected void sequence_BodyExpression(ISerializationContext context, BlockExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BodyMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=BodyExpression
	 */
	protected void sequence_BodyMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BodyParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=BodyParameter
	 */
	protected void sequence_BodyParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BodyParameter returns Parameter
	 *
	 * Constraint:
	 *     name=Name
	 */
	protected void sequence_BodyParameter(ISerializationContext context, org.omg.sysml.lang.sysml.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBodyParameterAccess().getNameNameParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns LiteralBoolean
	 *     ConditionalExpression returns LiteralBoolean
	 *     ConditionalExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     ConditionalOrExpression returns LiteralBoolean
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     ConditionalAndExpression returns LiteralBoolean
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     OrExpression returns LiteralBoolean
	 *     OrExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     XorExpression returns LiteralBoolean
	 *     XorExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     AndExpression returns LiteralBoolean
	 *     AndExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     EqualityExpression returns LiteralBoolean
	 *     EqualityExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     RelationalExpression returns LiteralBoolean
	 *     RelationalExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     AdditiveExpression returns LiteralBoolean
	 *     AdditiveExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     MultiplicativeExpression returns LiteralBoolean
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     UnitsExpression returns LiteralBoolean
	 *     UnitsExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     UnaryExpression returns LiteralBoolean
	 *     SequenceAccessExpression returns LiteralBoolean
	 *     SequenceAccessExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     PrimaryExpression returns LiteralBoolean
	 *     PrimaryExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     BaseExpression returns LiteralBoolean
	 *     LiteralExpression returns LiteralBoolean
	 *     BooleanLiteralExpression returns LiteralBoolean
	 *
	 * Constraint:
	 *     value=BOOLEAN_VALUE
	 */
	protected void sequence_BooleanLiteralExpression(ISerializationContext context, LiteralBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.LITERAL_BOOLEAN__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.LITERAL_BOOLEAN__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanLiteralExpressionAccess().getValueBOOLEAN_VALUETerminalRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureDefinition returns ObjectClass
	 *     ObjectClassDefinitionOrStub returns ObjectClass
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         name=Name 
	 *         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	 *         (ownedRelationship+=CategoryMember | ownedRelationship+=PackageImport)*
	 *     )
	 */
	protected void sequence_CategoryBody_ClassDeclarationCompletion_ObjectClassDeclaration_SpecializationList(ISerializationContext context, ObjectClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjectClassUnitDefinition returns ObjectClass
	 *
	 * Constraint:
	 *     (
	 *         (ownedRelationship+=PackageImport | ownedRelationship+=ElementImport)* 
	 *         ownedRelationship+=Annotation* 
	 *         isAbstract?='abstract'? 
	 *         name=Name 
	 *         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	 *         (ownedRelationship+=CategoryMember | ownedRelationship+=PackageImport)*
	 *     )
	 */
	protected void sequence_CategoryBody_ClassDeclarationCompletion_ObjectClassDeclaration_SpecializationList_UnitPrefix(ISerializationContext context, ObjectClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnitDefinition returns ValueClass
	 *
	 * Constraint:
	 *     (
	 *         (ownedRelationship+=PackageImport | ownedRelationship+=ElementImport)* 
	 *         ownedRelationship+=Annotation? 
	 *         isAbstract?='abstract'? 
	 *         name=Name 
	 *         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	 *         (ownedRelationship+=CategoryMember | ownedRelationship+=PackageImport)*
	 *     )
	 */
	protected void sequence_CategoryBody_ClassDeclarationCompletion_SpecializationList_UnitPrefix_ValueClassDeclaration(ISerializationContext context, ValueClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     ValueClassUnitDefinition returns ValueClass
	//
	// Constraint:
	//     (
	//         (ownedRelationship+=PackageImport | ownedRelationship+=ElementImport)* 
	//         ownedRelationship+=Annotation* 
	//         isAbstract?='abstract'? 
	//         name=Name 
	//         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	//         (ownedRelationship+=CategoryMember | ownedRelationship+=PackageImport)*
	//     )
	//
	// protected void sequence_CategoryBody_ClassDeclarationCompletion_SpecializationList_UnitPrefix_ValueClassDeclaration(ISerializationContext context, ValueClass semanticObject) { }
	
	/**
	 * Contexts:
	 *     NonFeatureDefinition returns ValueClass
	 *     ValueClassDefinitionOrStub returns ValueClass
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         name=Name 
	 *         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	 *         (ownedRelationship+=CategoryMember | ownedRelationship+=PackageImport)*
	 *     )
	 */
	protected void sequence_CategoryBody_ClassDeclarationCompletion_SpecializationList_ValueClassDeclaration(ISerializationContext context, ValueClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnitDefinition returns ObjectClass
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=PackageImport? 
	 *         (ownedRelationship+=ElementImport? ownedRelationship+=PackageImport?)* 
	 *         ownedRelationship+=Annotation? 
	 *         (isAbstract?='abstract' | isAbstract?='abstract')? 
	 *         name=Name 
	 *         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	 *         (ownedRelationship+=CategoryMember | ownedRelationship+=PackageImport)*
	 *     )
	 */
	protected void sequence_CategoryBody_ClassDeclaration_ClassDeclarationCompletion_ObjectClassDeclaration_SpecializationList_UnitPrefix(ISerializationContext context, ObjectClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureDefinition returns Class
	 *     ClassDefinitionOrStub returns Class
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         name=Name 
	 *         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	 *         (ownedRelationship+=CategoryMember | ownedRelationship+=PackageImport)*
	 *     )
	 */
	protected void sequence_CategoryBody_ClassDeclaration_ClassDeclarationCompletion_SpecializationList(ISerializationContext context, org.omg.sysml.lang.sysml.Class semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ClassUnitDefinition returns ObjectClass
	 *
	 * Constraint:
	 *     (
	 *         (ownedRelationship+=PackageImport | ownedRelationship+=ElementImport)* 
	 *         ownedRelationship+=Annotation* 
	 *         isAbstract?='abstract'? 
	 *         name=Name 
	 *         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	 *         (ownedRelationship+=CategoryMember | ownedRelationship+=PackageImport)*
	 *     )
	 */
	protected void sequence_CategoryBody_ClassDeclaration_ClassDeclarationCompletion_SpecializationList_UnitPrefix(ISerializationContext context, ObjectClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConnectorDefinition returns Connector
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (name=Name? ownedRelationship+=ConnectorTyping? ownedRelationship+=ConnectorEnd ownedRelationship+=ConnectorEnd) | 
	 *             (name=Name? ownedRelationship+=ConnectorTyping? ownedRelationship+=ConnectorEnd ownedRelationship+=ConnectorEnd ownedRelationship+=ConnectorEnd*)
	 *         ) 
	 *         (ownedRelationship+=CategoryMember | ownedRelationship+=PackageImport)*
	 *     )
	 */
	protected void sequence_CategoryBody_ConnectorDeclaration(ISerializationContext context, Connector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnitDefinition returns Feature
	 *
	 * Constraint:
	 *     (
	 *         (ownedRelationship+=PackageImport | ownedRelationship+=ElementImport)* 
	 *         ownedRelationship+=Annotation? 
	 *         isAbstract?='abstract'? 
	 *         name=Name 
	 *         isComposite?='compose'? 
	 *         ownedRelationship+=FeatureTyping? 
	 *         ownedRelationship+=Multiplicity? 
	 *         isOrdered?='ordered'? 
	 *         (isNonunique?='nonunique'? isOrdered?='ordered'?)* 
	 *         ((ownedRelationship+=Subset ownedRelationship+=Subset*) | (ownedRelationship+=Redefinition ownedRelationship+=Redefinition*))* 
	 *         ownedRelationship+=FeatureValue? 
	 *         (ownedRelationship+=CategoryMember | ownedRelationship+=PackageImport)*
	 *     )
	 */
	protected void sequence_CategoryBody_FeatureBodyDefinition_FeatureCompletion_FeatureDeclaration_Redefines_Subsets_SubsettingPart_TypePart_UnitPrefix(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     FeatureUnitDefinition returns Feature
	//
	// Constraint:
	//     (
	//         (ownedRelationship+=PackageImport | ownedRelationship+=ElementImport)* 
	//         ownedRelationship+=Annotation* 
	//         isAbstract?='abstract'? 
	//         name=Name 
	//         isComposite?='compose'? 
	//         ownedRelationship+=FeatureTyping? 
	//         ownedRelationship+=Multiplicity? 
	//         (isOrdered?='ordered' | isNonunique?='nonunique')* 
	//         ((ownedRelationship+=Subset ownedRelationship+=Subset*) | (ownedRelationship+=Redefinition ownedRelationship+=Redefinition*))* 
	//         ownedRelationship+=FeatureValue? 
	//         ownedRelationship+=CategoryMember? 
	//         (ownedRelationship+=PackageImport? ownedRelationship+=CategoryMember?)*
	//     )
	//
	// protected void sequence_CategoryBody_FeatureBodyDefinition_FeatureCompletion_FeatureDeclaration_Redefines_Subsets_SubsettingPart_TypePart_UnitPrefix(ISerializationContext context, Feature semanticObject) { }
	
	/**
	 * Contexts:
	 *     NamedFeatureDefinition returns Feature
	 *
	 * Constraint:
	 *     (
	 *         name=Name 
	 *         isComposite?='compose'? 
	 *         ownedRelationship+=FeatureTyping? 
	 *         ownedRelationship+=Multiplicity? 
	 *         (isOrdered?='ordered' | isNonunique?='nonunique')* 
	 *         ((ownedRelationship+=Subset ownedRelationship+=Subset*) | (ownedRelationship+=Redefinition ownedRelationship+=Redefinition*))* 
	 *         ownedRelationship+=FeatureValue? 
	 *         ownedRelationship+=CategoryMember? 
	 *         (ownedRelationship+=PackageImport? ownedRelationship+=CategoryMember?)*
	 *     )
	 */
	protected void sequence_CategoryBody_FeatureCompletion_FeatureDeclaration_Redefines_Subsets_SubsettingPart_TypePart(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureDefinition returns Feature
	 *
	 * Constraint:
	 *     (
	 *         (ownedRelationship+=Redefinition | name=Name) 
	 *         isComposite?='compose'? 
	 *         ownedRelationship+=FeatureTyping? 
	 *         ownedRelationship+=Multiplicity? 
	 *         isOrdered?='ordered'? 
	 *         (isNonunique?='nonunique'? isOrdered?='ordered'?)* 
	 *         ((ownedRelationship+=Subset ownedRelationship+=Subset*) | (ownedRelationship+=Redefinition ownedRelationship+=Redefinition*))* 
	 *         ownedRelationship+=FeatureValue? 
	 *         ownedRelationship+=CategoryMember? 
	 *         (ownedRelationship+=PackageImport? ownedRelationship+=CategoryMember?)*
	 *     )
	 */
	protected void sequence_CategoryBody_FeatureCompletion_FeatureDeclaration_Redefines_Subsets_SubsettingPart_TypePart_UnnamedFeatureDefinition(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnnamedFeatureDefinition returns Feature
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=Redefinition 
	 *         isComposite?='compose'? 
	 *         ownedRelationship+=FeatureTyping? 
	 *         ownedRelationship+=Multiplicity? 
	 *         (isOrdered?='ordered' | isNonunique?='nonunique')* 
	 *         ownedRelationship+=FeatureValue? 
	 *         ownedRelationship+=CategoryMember? 
	 *         (ownedRelationship+=PackageImport? ownedRelationship+=CategoryMember?)*
	 *     )
	 */
	protected void sequence_CategoryBody_FeatureCompletion_TypePart_UnnamedFeatureDefinition(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CategoryMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=Annotation* 
	 *         visibility=VisibilityIndicator? 
	 *         (
	 *             (direction=FeatureDirection? ownedRelatedElement+=NamedFeatureDefinition) | 
	 *             (direction=FeatureDirection? ownedRelatedElement+=AbstractNamedFeatureDefinition) | 
	 *             (direction=FeatureDirection? memberName=Name memberFeature=[Feature|QualifiedName]) | 
	 *             (
	 *                 (isPart?='part' | isPort?='port')? 
	 *                 direction=FeatureDirection? 
	 *                 (ownedRelatedElement+=FeatureDefinition | (memberName=Name? memberFeature=[Feature|QualifiedName]))
	 *             ) | 
	 *             ((isPart?='part' | isPort?='port')? direction=FeatureDirection? ownedRelatedElement+=AbstractFeatureDefinition) | 
	 *             ownedRelatedElement+=ConnectorDefinition | 
	 *             (memberName=Name? memberFeature=[Connector|QualifiedName]) | 
	 *             ownedRelatedElement+=AbstractConnectorDefinition
	 *         )
	 *     )
	 */
	protected void sequence_CategoryMemberPrefix_FeatureCategoryMember_FeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureCategoryMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=Annotation* 
	 *         visibility=VisibilityIndicator? 
	 *         (
	 *             (direction=FeatureDirection? ownedRelatedElement+=NamedFeatureDefinition) | 
	 *             (direction=FeatureDirection? ownedRelatedElement+=AbstractNamedFeatureDefinition) | 
	 *             (direction=FeatureDirection? memberName=Name memberFeature=[Feature|QualifiedName])
	 *         )
	 *     )
	 */
	protected void sequence_CategoryMemberPrefix_FeatureCategoryMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureMember returns FeatureMembership
	 *     AssociationMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=Annotation* 
	 *         visibility=VisibilityIndicator? 
	 *         (
	 *             (
	 *                 (isPart?='part' | isPort?='port')? 
	 *                 direction=FeatureDirection? 
	 *                 (ownedRelatedElement+=FeatureDefinition | (memberName=Name? memberFeature=[Feature|QualifiedName]))
	 *             ) | 
	 *             ((isPart?='part' | isPort?='port')? direction=FeatureDirection? ownedRelatedElement+=AbstractFeatureDefinition) | 
	 *             ownedRelatedElement+=ConnectorDefinition | 
	 *             (memberName=Name? memberFeature=[Connector|QualifiedName]) | 
	 *             ownedRelatedElement+=AbstractConnectorDefinition
	 *         )
	 *     )
	 */
	protected void sequence_CategoryMemberPrefix_FeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CategoryMember returns Membership
	 *     NonFeatureCategoryMember returns Membership
	 *     AssociationMember returns Membership
	 *     BehaviorMember returns Membership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=Annotation* 
	 *         visibility=VisibilityIndicator? 
	 *         (
	 *             ownedRelatedElement+=NonFeatureDefinition | 
	 *             (memberName=Name? memberElement=[Package|QualifiedName]) | 
	 *             (memberName=Name? memberElement=[Class|QualifiedName]) | 
	 *             (memberName=Name? memberElement=[ObjectClass|QualifiedName]) | 
	 *             (memberName=Name? memberElement=[ValueClass|QualifiedName]) | 
	 *             (memberName=Name? memberElement=[Association|QualifiedName]) | 
	 *             (memberName=Name? memberElement=[Behavior|QualifiedName]) | 
	 *             (memberName=Name? memberElement=[Function|QualifiedName]) | 
	 *             (memberElement=[Element|QualifiedName] memberName=Name?)
	 *         )
	 *     )
	 */
	protected void sequence_CategoryMemberPrefix_NonFeatureMemberElement(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comment returns Comment
	 *
	 * Constraint:
	 *     body=DOCUMENTATION_COMMENT
	 */
	protected void sequence_Comment(ISerializationContext context, Comment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.COMMENT__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.COMMENT__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommentAccess().getBodyDOCUMENTATION_COMMENTTerminalRuleCall_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConnectorEnd returns ConnectorEnd
	 *
	 * Constraint:
	 *     (
	 *         (end=[Feature|QualifiedName]? feature=[Feature|QualifiedName] ownedRelationship+=Multiplicity?) | 
	 *         (end=[Feature|QualifiedName] ownedRelationship+=Multiplicity? feature=[Feature|QualifiedName])
	 *     )
	 */
	protected void sequence_ConnectorEnd(ISerializationContext context, ConnectorEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConnectorTyping returns FeatureTyping
	 *
	 * Constraint:
	 *     type=[Association|QualifiedName]
	 */
	protected void sequence_ConnectorTyping(ISerializationContext context, FeatureTyping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConnectorTypingAccess().getTypeAssociationQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.FEATURE_TYPING__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ElementImport returns Membership
	 *
	 * Constraint:
	 *     (ownedRelationship+=Annotation* visibility=PackageElementVisibilityIndicator? memberElement=[Element|QualifiedName] memberName=Name?)
	 */
	protected void sequence_ElementImport_PackageMemberPrefix(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpressionDefinition returns BlockExpression
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         (
	 *             (name=Name | ownedRelationship+=Redefinition) 
	 *             isComposite?='compose'? 
	 *             ownedRelationship+=FeatureTyping? 
	 *             ownedRelationship+=Multiplicity? 
	 *             isOrdered?='ordered'? 
	 *             (isNonunique?='nonunique'? isOrdered?='ordered'?)* 
	 *             ((ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? ownedRelationship+=ReturnParameterMember)? 
	 *             ((ownedRelationship+=Subset ownedRelationship+=Subset*) | (ownedRelationship+=Redefinition ownedRelationship+=Redefinition*))*
	 *         )? 
	 *         ownedRelationship+=BehaviorMember? 
	 *         (ownedRelationship+=PackageImport? ownedRelationship+=BehaviorMember?)* 
	 *         ownedRelationship+=ExpressionMember?
	 *     )
	 */
	protected void sequence_ExpressionDefinition_FunctionBody_ParameterList_Redefines_ReturnParameterPart_Subsets_SubsettingPart_TypePart(ISerializationContext context, BlockExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpressionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=Expression
	 */
	protected void sequence_ExpressionMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpressionTyping returns FeatureTyping
	 *
	 * Constraint:
	 *     type=[Function|QualifiedName]
	 */
	protected void sequence_ExpressionTyping(ISerializationContext context, FeatureTyping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionTypingAccess().getTypeFunctionQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.FEATURE_TYPING__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PackageMember returns Membership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=Annotation* 
	 *         visibility=PackageElementVisibilityIndicator? 
	 *         (
	 *             ownedRelatedElement+=NonFeatureDefinition | 
	 *             (memberName=Name? memberElement=[Package|QualifiedName]) | 
	 *             (memberName=Name? memberElement=[Class|QualifiedName]) | 
	 *             (memberName=Name? memberElement=[ObjectClass|QualifiedName]) | 
	 *             (memberName=Name? memberElement=[ValueClass|QualifiedName]) | 
	 *             (memberName=Name? memberElement=[Association|QualifiedName]) | 
	 *             (memberName=Name? memberElement=[Behavior|QualifiedName]) | 
	 *             (memberName=Name? memberElement=[Function|QualifiedName]) | 
	 *             (memberElement=[Element|QualifiedName] memberName=Name?) | 
	 *             ownedRelatedElement+=NamedFeatureDefinition | 
	 *             ownedRelatedElement+=AbstractNamedFeatureDefinition | 
	 *             ownedRelatedElement+=UnnamedFeatureDefinition | 
	 *             ownedRelatedElement+=AbstractUnnamedFeatureDefinition | 
	 *             ((memberName=Name | memberName=Name)? memberElement=[Feature|QualifiedName])
	 *         )
	 *     )
	 */
	protected void sequence_FeaturePackageMemberElement_NonFeatureMemberElement_PackageMemberPrefix(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureTyping returns FeatureTyping
	 *
	 * Constraint:
	 *     type=[Category|QualifiedName]
	 */
	protected void sequence_FeatureTyping(ISerializationContext context, FeatureTyping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFeatureTypingAccess().getTypeCategoryQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.FEATURE_TYPING__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FeatureValue returns FeatureValue
	 *
	 * Constraint:
	 *     ownedRelatedElement+=Expression
	 */
	protected void sequence_FeatureValue(ISerializationContext context, FeatureValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureDefinition returns Function
	 *     FunctionDefinitionOrStub returns Function
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         name=Name 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         ownedRelationship+=ReturnParameterMember 
	 *         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	 *         (ownedRelationship+=BehaviorMember | ownedRelationship+=PackageImport)* 
	 *         ownedRelationship+=ExpressionMember?
	 *     )
	 */
	protected void sequence_FunctionBody_FunctionDeclaration_ParameterList_ReturnParameterPart_SpecializationList(ISerializationContext context, Function semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnitDefinition returns Function
	 *
	 * Constraint:
	 *     (
	 *         (ownedRelationship+=PackageImport | ownedRelationship+=ElementImport)* 
	 *         ownedRelationship+=Annotation? 
	 *         isAbstract?='abstract'? 
	 *         name=Name 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         ownedRelationship+=ReturnParameterMember 
	 *         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	 *         (ownedRelationship+=BehaviorMember | ownedRelationship+=PackageImport)* 
	 *         ownedRelationship+=ExpressionMember?
	 *     )
	 */
	protected void sequence_FunctionBody_FunctionDeclaration_ParameterList_ReturnParameterPart_SpecializationList_UnitPrefix(ISerializationContext context, Function semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     FunctionUnitDefinition returns Function
	//
	// Constraint:
	//     (
	//         (ownedRelationship+=PackageImport | ownedRelationship+=ElementImport)* 
	//         ownedRelationship+=Annotation* 
	//         isAbstract?='abstract'? 
	//         name=Name 
	//         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	//         ownedRelationship+=ReturnParameterMember 
	//         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	//         (ownedRelationship+=BehaviorMember | ownedRelationship+=PackageImport)* 
	//         ownedRelationship+=ExpressionMember?
	//     )
	//
	// protected void sequence_FunctionBody_FunctionDeclaration_ParameterList_ReturnParameterPart_SpecializationList_UnitPrefix(ISerializationContext context, Function semanticObject) { }
	
	/**
	 * Contexts:
	 *     Expression returns InvocationExpression
	 *     ConditionalExpression returns InvocationExpression
	 *     ConditionalExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     ConditionalOrExpression returns InvocationExpression
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     ConditionalAndExpression returns InvocationExpression
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     OrExpression returns InvocationExpression
	 *     OrExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     XorExpression returns InvocationExpression
	 *     XorExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     AndExpression returns InvocationExpression
	 *     AndExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     EqualityExpression returns InvocationExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     RelationalExpression returns InvocationExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     AdditiveExpression returns InvocationExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     MultiplicativeExpression returns InvocationExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     UnitsExpression returns InvocationExpression
	 *     UnitsExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     UnaryExpression returns InvocationExpression
	 *     SequenceAccessExpression returns InvocationExpression
	 *     SequenceAccessExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     PrimaryExpression returns InvocationExpression
	 *     PrimaryExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     BaseExpression returns InvocationExpression
	 *     InvocationExpression returns InvocationExpression
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=FeatureTyping 
	 *         (
	 *             (ownedRelationship+=ExpressionMember ownedRelationship+=ExpressionMember*) | 
	 *             (ownedRelationship+=NamedExpressionMember ownedRelationship+=NamedExpressionMember*)
	 *         )?
	 *     )
	 */
	protected void sequence_InvocationExpression_NamedTuple_PositionalTuple(ISerializationContext context, InvocationExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Multiplicity returns Multiplicity
	 *
	 * Constraint:
	 *     (ownedRelatedElement+=NaturalLiteralExpression? ownedRelatedElement+=UnlimitedNaturalLiteralExpression)
	 */
	protected void sequence_Multiplicity(ISerializationContext context, Multiplicity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ElementReferenceExpression
	 *     ConditionalExpression returns ElementReferenceExpression
	 *     ConditionalExpression.OperatorExpression_1_0 returns ElementReferenceExpression
	 *     ConditionalOrExpression returns ElementReferenceExpression
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns ElementReferenceExpression
	 *     ConditionalAndExpression returns ElementReferenceExpression
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns ElementReferenceExpression
	 *     OrExpression returns ElementReferenceExpression
	 *     OrExpression.OperatorExpression_1_0 returns ElementReferenceExpression
	 *     XorExpression returns ElementReferenceExpression
	 *     XorExpression.OperatorExpression_1_0 returns ElementReferenceExpression
	 *     AndExpression returns ElementReferenceExpression
	 *     AndExpression.OperatorExpression_1_0 returns ElementReferenceExpression
	 *     EqualityExpression returns ElementReferenceExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns ElementReferenceExpression
	 *     RelationalExpression returns ElementReferenceExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns ElementReferenceExpression
	 *     AdditiveExpression returns ElementReferenceExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns ElementReferenceExpression
	 *     MultiplicativeExpression returns ElementReferenceExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns ElementReferenceExpression
	 *     UnitsExpression returns ElementReferenceExpression
	 *     UnitsExpression.OperatorExpression_1_0 returns ElementReferenceExpression
	 *     UnaryExpression returns ElementReferenceExpression
	 *     SequenceAccessExpression returns ElementReferenceExpression
	 *     SequenceAccessExpression.OperatorExpression_1_0 returns ElementReferenceExpression
	 *     PrimaryExpression returns ElementReferenceExpression
	 *     PrimaryExpression.OperatorExpression_1_0 returns ElementReferenceExpression
	 *     BaseExpression returns ElementReferenceExpression
	 *     NameExpression returns ElementReferenceExpression
	 *
	 * Constraint:
	 *     referent=[Feature|QualifiedName]
	 */
	protected void sequence_NameExpression(ISerializationContext context, ElementReferenceExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.ELEMENT_REFERENCE_EXPRESSION__REFERENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.ELEMENT_REFERENCE_EXPRESSION__REFERENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNameExpressionAccess().getReferentFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.ELEMENT_REFERENCE_EXPRESSION__REFERENT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NamedExpressionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (memberName=Name ownedRelatedElement+=Expression)
	 */
	protected void sequence_NamedExpressionMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns LiteralInteger
	 *     ConditionalExpression returns LiteralInteger
	 *     ConditionalExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     ConditionalOrExpression returns LiteralInteger
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     ConditionalAndExpression returns LiteralInteger
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     OrExpression returns LiteralInteger
	 *     OrExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     XorExpression returns LiteralInteger
	 *     XorExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     AndExpression returns LiteralInteger
	 *     AndExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     EqualityExpression returns LiteralInteger
	 *     EqualityExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     RelationalExpression returns LiteralInteger
	 *     RelationalExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     AdditiveExpression returns LiteralInteger
	 *     AdditiveExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     MultiplicativeExpression returns LiteralInteger
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     UnitsExpression returns LiteralInteger
	 *     UnitsExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     UnaryExpression returns LiteralInteger
	 *     SequenceAccessExpression returns LiteralInteger
	 *     SequenceAccessExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     PrimaryExpression returns LiteralInteger
	 *     PrimaryExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     BaseExpression returns LiteralInteger
	 *     LiteralExpression returns LiteralInteger
	 *     NaturalLiteralExpression returns LiteralInteger
	 *     UnlimitedNaturalLiteralExpression returns LiteralInteger
	 *
	 * Constraint:
	 *     value=NATURAL_VALUE
	 */
	protected void sequence_NaturalLiteralExpression(ISerializationContext context, LiteralInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.LITERAL_INTEGER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.LITERAL_INTEGER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNaturalLiteralExpressionAccess().getValueNATURAL_VALUETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns NullExpression
	 *     ConditionalExpression returns NullExpression
	 *     ConditionalExpression.OperatorExpression_1_0 returns NullExpression
	 *     ConditionalOrExpression returns NullExpression
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns NullExpression
	 *     ConditionalAndExpression returns NullExpression
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns NullExpression
	 *     OrExpression returns NullExpression
	 *     OrExpression.OperatorExpression_1_0 returns NullExpression
	 *     XorExpression returns NullExpression
	 *     XorExpression.OperatorExpression_1_0 returns NullExpression
	 *     AndExpression returns NullExpression
	 *     AndExpression.OperatorExpression_1_0 returns NullExpression
	 *     EqualityExpression returns NullExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns NullExpression
	 *     RelationalExpression returns NullExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns NullExpression
	 *     AdditiveExpression returns NullExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns NullExpression
	 *     MultiplicativeExpression returns NullExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns NullExpression
	 *     UnitsExpression returns NullExpression
	 *     UnitsExpression.OperatorExpression_1_0 returns NullExpression
	 *     UnaryExpression returns NullExpression
	 *     SequenceAccessExpression returns NullExpression
	 *     SequenceAccessExpression.OperatorExpression_1_0 returns NullExpression
	 *     PrimaryExpression returns NullExpression
	 *     PrimaryExpression.OperatorExpression_1_0 returns NullExpression
	 *     BaseExpression returns NullExpression
	 *     NullExpression returns NullExpression
	 *
	 * Constraint:
	 *     {NullExpression}
	 */
	protected void sequence_NullExpression(ISerializationContext context, NullExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureDefinition returns Package
	 *     PackageDefinitionOrStub returns Package
	 *
	 * Constraint:
	 *     (name=Name (ownedRelationship+=PackageMember | ownedRelationship+=PackageImport)*)
	 */
	protected void sequence_PackageDefinition(ISerializationContext context, org.omg.sysml.lang.sysml.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnitDefinition returns Package
	 *     PackageUnitDefinition returns Package
	 *
	 * Constraint:
	 *     (
	 *         (ownedRelationship+=PackageImport | ownedRelationship+=ElementImport)* 
	 *         ownedRelationship+=Annotation* 
	 *         name=Name 
	 *         (ownedRelationship+=PackageMember | ownedRelationship+=PackageImport)*
	 *     )
	 */
	protected void sequence_PackageDefinition_UnitPrefix(ISerializationContext context, org.omg.sysml.lang.sysml.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackageImport returns Import
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=Annotation* 
	 *         visibility=PackageElementVisibilityIndicator? 
	 *         (importedPackage=[Package|Name] | importedPackage=[Package|ColonQualifiedName] | importedPackage=[Package|DotQualifiedName])
	 *     )
	 */
	protected void sequence_PackageImport(ISerializationContext context, Import semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     (direction=FeatureDirection? memberName=Name ownedRelatedElement+=ParameterDefinition)
	 */
	protected void sequence_ParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns LiteralReal
	 *     ConditionalExpression returns LiteralReal
	 *     ConditionalExpression.OperatorExpression_1_0 returns LiteralReal
	 *     ConditionalOrExpression returns LiteralReal
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns LiteralReal
	 *     ConditionalAndExpression returns LiteralReal
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns LiteralReal
	 *     OrExpression returns LiteralReal
	 *     OrExpression.OperatorExpression_1_0 returns LiteralReal
	 *     XorExpression returns LiteralReal
	 *     XorExpression.OperatorExpression_1_0 returns LiteralReal
	 *     AndExpression returns LiteralReal
	 *     AndExpression.OperatorExpression_1_0 returns LiteralReal
	 *     EqualityExpression returns LiteralReal
	 *     EqualityExpression.OperatorExpression_1_0 returns LiteralReal
	 *     RelationalExpression returns LiteralReal
	 *     RelationalExpression.OperatorExpression_1_0 returns LiteralReal
	 *     AdditiveExpression returns LiteralReal
	 *     AdditiveExpression.OperatorExpression_1_0 returns LiteralReal
	 *     MultiplicativeExpression returns LiteralReal
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns LiteralReal
	 *     UnitsExpression returns LiteralReal
	 *     UnitsExpression.OperatorExpression_1_0 returns LiteralReal
	 *     UnaryExpression returns LiteralReal
	 *     SequenceAccessExpression returns LiteralReal
	 *     SequenceAccessExpression.OperatorExpression_1_0 returns LiteralReal
	 *     PrimaryExpression returns LiteralReal
	 *     PrimaryExpression.OperatorExpression_1_0 returns LiteralReal
	 *     BaseExpression returns LiteralReal
	 *     LiteralExpression returns LiteralReal
	 *     RealLiteralExpression returns LiteralReal
	 *
	 * Constraint:
	 *     value=RealValue
	 */
	protected void sequence_RealLiteralExpression(ISerializationContext context, LiteralReal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.LITERAL_REAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.LITERAL_REAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRealLiteralExpressionAccess().getValueRealValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Redefinition returns Redefinition
	 *
	 * Constraint:
	 *     redefinedFeature=[Feature|QualifiedName]
	 */
	protected void sequence_Redefinition(ISerializationContext context, Redefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRedefinitionAccess().getRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReturnParameterMember returns ReturnParameterMembership
	 *
	 * Constraint:
	 *     (memberName=Name? ownedRelatedElement+=ParameterDefinition)
	 */
	protected void sequence_ReturnParameterMember(ISerializationContext context, ReturnParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns SequenceConstructionExpression
	 *     ConditionalExpression returns SequenceConstructionExpression
	 *     ConditionalExpression.OperatorExpression_1_0 returns SequenceConstructionExpression
	 *     ConditionalOrExpression returns SequenceConstructionExpression
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns SequenceConstructionExpression
	 *     ConditionalAndExpression returns SequenceConstructionExpression
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns SequenceConstructionExpression
	 *     OrExpression returns SequenceConstructionExpression
	 *     OrExpression.OperatorExpression_1_0 returns SequenceConstructionExpression
	 *     XorExpression returns SequenceConstructionExpression
	 *     XorExpression.OperatorExpression_1_0 returns SequenceConstructionExpression
	 *     AndExpression returns SequenceConstructionExpression
	 *     AndExpression.OperatorExpression_1_0 returns SequenceConstructionExpression
	 *     EqualityExpression returns SequenceConstructionExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns SequenceConstructionExpression
	 *     RelationalExpression returns SequenceConstructionExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns SequenceConstructionExpression
	 *     AdditiveExpression returns SequenceConstructionExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns SequenceConstructionExpression
	 *     MultiplicativeExpression returns SequenceConstructionExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns SequenceConstructionExpression
	 *     UnitsExpression returns SequenceConstructionExpression
	 *     UnitsExpression.OperatorExpression_1_0 returns SequenceConstructionExpression
	 *     UnaryExpression returns SequenceConstructionExpression
	 *     SequenceAccessExpression returns SequenceConstructionExpression
	 *     SequenceAccessExpression.OperatorExpression_1_0 returns SequenceConstructionExpression
	 *     PrimaryExpression returns SequenceConstructionExpression
	 *     PrimaryExpression.OperatorExpression_1_0 returns SequenceConstructionExpression
	 *     BaseExpression returns SequenceConstructionExpression
	 *     SequenceConstructionExpression returns SequenceConstructionExpression
	 *
	 * Constraint:
	 *     (element+=Expression element+=Expression*)?
	 */
	protected void sequence_SequenceConstructionExpression(ISerializationContext context, SequenceConstructionExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns LiteralString
	 *     ConditionalExpression returns LiteralString
	 *     ConditionalExpression.OperatorExpression_1_0 returns LiteralString
	 *     ConditionalOrExpression returns LiteralString
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns LiteralString
	 *     ConditionalAndExpression returns LiteralString
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns LiteralString
	 *     OrExpression returns LiteralString
	 *     OrExpression.OperatorExpression_1_0 returns LiteralString
	 *     XorExpression returns LiteralString
	 *     XorExpression.OperatorExpression_1_0 returns LiteralString
	 *     AndExpression returns LiteralString
	 *     AndExpression.OperatorExpression_1_0 returns LiteralString
	 *     EqualityExpression returns LiteralString
	 *     EqualityExpression.OperatorExpression_1_0 returns LiteralString
	 *     RelationalExpression returns LiteralString
	 *     RelationalExpression.OperatorExpression_1_0 returns LiteralString
	 *     AdditiveExpression returns LiteralString
	 *     AdditiveExpression.OperatorExpression_1_0 returns LiteralString
	 *     MultiplicativeExpression returns LiteralString
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns LiteralString
	 *     UnitsExpression returns LiteralString
	 *     UnitsExpression.OperatorExpression_1_0 returns LiteralString
	 *     UnaryExpression returns LiteralString
	 *     SequenceAccessExpression returns LiteralString
	 *     SequenceAccessExpression.OperatorExpression_1_0 returns LiteralString
	 *     PrimaryExpression returns LiteralString
	 *     PrimaryExpression.OperatorExpression_1_0 returns LiteralString
	 *     BaseExpression returns LiteralString
	 *     LiteralExpression returns LiteralString
	 *     StringLiteralExpression returns LiteralString
	 *
	 * Constraint:
	 *     value=STRING_VALUE
	 */
	protected void sequence_StringLiteralExpression(ISerializationContext context, LiteralString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.LITERAL_STRING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.LITERAL_STRING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringLiteralExpressionAccess().getValueSTRING_VALUETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Subset returns Subsetting
	 *
	 * Constraint:
	 *     subsettedFeature=[Feature|QualifiedName]
	 */
	protected void sequence_Subset(ISerializationContext context, Subsetting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.SUBSETTING__SUBSETTED_FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.SUBSETTING__SUBSETTED_FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSubsetAccess().getSubsettedFeatureFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.SUBSETTING__SUBSETTED_FEATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Superclassing returns Superclassing
	 *
	 * Constraint:
	 *     superclass=[Class|QualifiedName]
	 */
	protected void sequence_Superclassing(ISerializationContext context, Superclassing semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.SUPERCLASSING__SUPERCLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.SUPERCLASSING__SUPERCLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSuperclassingAccess().getSuperclassClassQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.SUPERCLASSING__SUPERCLASS, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ParameterDefinition returns Parameter
	 *
	 * Constraint:
	 *     (isComposite?='compose'? ownedRelationship+=FeatureTyping? ownedRelationship+=Multiplicity? (isOrdered?='ordered' | isNonunique?='nonunique')*)
	 */
	protected void sequence_TypePart(ISerializationContext context, org.omg.sysml.lang.sysml.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns LiteralUnbounded
	 *     ConditionalExpression returns LiteralUnbounded
	 *     ConditionalExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     ConditionalOrExpression returns LiteralUnbounded
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     ConditionalAndExpression returns LiteralUnbounded
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     OrExpression returns LiteralUnbounded
	 *     OrExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     XorExpression returns LiteralUnbounded
	 *     XorExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     AndExpression returns LiteralUnbounded
	 *     AndExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     EqualityExpression returns LiteralUnbounded
	 *     EqualityExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     RelationalExpression returns LiteralUnbounded
	 *     RelationalExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     AdditiveExpression returns LiteralUnbounded
	 *     AdditiveExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     MultiplicativeExpression returns LiteralUnbounded
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     UnitsExpression returns LiteralUnbounded
	 *     UnitsExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     UnaryExpression returns LiteralUnbounded
	 *     SequenceAccessExpression returns LiteralUnbounded
	 *     SequenceAccessExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     PrimaryExpression returns LiteralUnbounded
	 *     PrimaryExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     BaseExpression returns LiteralUnbounded
	 *     LiteralExpression returns LiteralUnbounded
	 *     UnlimitedNaturalLiteralExpression returns LiteralUnbounded
	 *
	 * Constraint:
	 *     {LiteralUnbounded}
	 */
	protected void sequence_UnlimitedNaturalLiteralExpression(ISerializationContext context, LiteralUnbounded semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
