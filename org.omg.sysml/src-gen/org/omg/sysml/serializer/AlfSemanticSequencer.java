/*
 * generated by Xtext 2.12.0
 */
package org.omg.sysml.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.omg.sysml.lang.sysml.Feature;
import org.omg.sysml.lang.sysml.Generalization;
import org.omg.sysml.lang.sysml.LiteralInteger;
import org.omg.sysml.lang.sysml.LiteralUnbounded;
import org.omg.sysml.lang.sysml.Membership;
import org.omg.sysml.lang.sysml.Redefinition;
import org.omg.sysml.lang.sysml.SysMLPackage;
import org.omg.sysml.services.AlfGrammarAccess;

@SuppressWarnings("all")
public class AlfSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AlfGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SysMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SysMLPackage.CLASS:
				if (rule == grammarAccess.getClassDeclarationRule()) {
					sequence_ClassDeclaration(context, (org.omg.sysml.lang.sysml.Class) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUnitDefinitionRule()
						|| rule == grammarAccess.getPackagedElementDefinitionRule()
						|| rule == grammarAccess.getClassifierDefinitionOrStubRule()
						|| rule == grammarAccess.getClassDefinitionRule()
						|| rule == grammarAccess.getClassDefinitionOrStubRule()) {
					sequence_ClassDeclaration_ClassDefinition(context, (org.omg.sysml.lang.sysml.Class) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE:
				sequence_FeatureDefinition(context, (Feature) semanticObject); 
				return; 
			case SysMLPackage.GENERALIZATION:
				sequence_Generalization(context, (Generalization) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_INTEGER:
				sequence_NaturalLiteralExpression(context, (LiteralInteger) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_UNBOUNDED:
				sequence_UnlimitedNaturalLiteralExpression(context, (LiteralUnbounded) semanticObject); 
				return; 
			case SysMLPackage.MEMBERSHIP:
				if (rule == grammarAccess.getMemberDefinitionRule()) {
					sequence_MemberDefinition(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedGeneralizationRule()) {
					sequence_OwnedGeneralization(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedRedefinitionRule()) {
					sequence_OwnedRedefinition(context, (Membership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PACKAGE:
				sequence_PackageDefinition(context, (org.omg.sysml.lang.sysml.Package) semanticObject); 
				return; 
			case SysMLPackage.REDEFINITION:
				sequence_Redefinition(context, (Redefinition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ClassDeclaration returns Class
	 *
	 * Constraint:
	 *     (isAbstract?='abstract'? name=Name (membership+=OwnedGeneralization membership+=OwnedGeneralization*)?)
	 */
	protected void sequence_ClassDeclaration(ISerializationContext context, org.omg.sysml.lang.sysml.Class semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnitDefinition returns Class
	 *     PackagedElementDefinition returns Class
	 *     ClassifierDefinitionOrStub returns Class
	 *     ClassDefinition returns Class
	 *     ClassDefinitionOrStub returns Class
	 *
	 * Constraint:
	 *     (isAbstract?='abstract'? name=Name (membership+=OwnedGeneralization membership+=OwnedGeneralization*)? membership+=MemberDefinition*)
	 */
	protected void sequence_ClassDeclaration_ClassDefinition(ISerializationContext context, org.omg.sysml.lang.sysml.Class semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackagedElementDefinition returns Feature
	 *     FeatureDefinition returns Feature
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             name=Name 
	 *             (referencedType+=[Class|QualifiedName] membership+=OwnedRedefinition?)? 
	 *             (lower=NaturalLiteralExpression? upper=UnlimitedNaturalLiteralExpression)? 
	 *             membership+=MemberDefinition*
	 *         ) | 
	 *         (
	 *             name=Name? 
	 *             membership+=OwnedRedefinition 
	 *             (
	 *                 ((lower=NaturalLiteralExpression? upper=UnlimitedNaturalLiteralExpression)? membership+=MemberDefinition*) | 
	 *                 (lower=NaturalLiteralExpression? upper=UnlimitedNaturalLiteralExpression)
	 *             )
	 *         )
	 *     )
	 */
	protected void sequence_FeatureDefinition(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Generalization returns Generalization
	 *
	 * Constraint:
	 *     general=[Class|QualifiedName]
	 */
	protected void sequence_Generalization(ISerializationContext context, Generalization semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.GENERALIZATION__GENERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.GENERALIZATION__GENERAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGeneralizationAccess().getGeneralClassQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.GENERALIZATION__GENERAL, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MemberDefinition returns Membership
	 *
	 * Constraint:
	 *     (visibility=VisibilityIndicator? (ownedMemberElement=PackagedElementDefinition | (memberName=Name? memberElement=[Element|QualifiedName])))
	 */
	protected void sequence_MemberDefinition(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NaturalLiteralExpression returns LiteralInteger
	 *     UnlimitedNaturalLiteralExpression returns LiteralInteger
	 *
	 * Constraint:
	 *     value=NATURAL_VALUE
	 */
	protected void sequence_NaturalLiteralExpression(ISerializationContext context, LiteralInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.LITERAL_INTEGER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.LITERAL_INTEGER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNaturalLiteralExpressionAccess().getValueNATURAL_VALUETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedGeneralization returns Membership
	 *
	 * Constraint:
	 *     ownedMemberElement=Generalization
	 */
	protected void sequence_OwnedGeneralization(ISerializationContext context, Membership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.MEMBERSHIP__OWNED_MEMBER_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.MEMBERSHIP__OWNED_MEMBER_ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedGeneralizationAccess().getOwnedMemberElementGeneralizationParserRuleCall_0(), semanticObject.getOwnedMemberElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedRedefinition returns Membership
	 *
	 * Constraint:
	 *     ownedMemberElement=Redefinition
	 */
	protected void sequence_OwnedRedefinition(ISerializationContext context, Membership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.MEMBERSHIP__OWNED_MEMBER_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.MEMBERSHIP__OWNED_MEMBER_ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedRedefinitionAccess().getOwnedMemberElementRedefinitionParserRuleCall_0(), semanticObject.getOwnedMemberElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     UnitDefinition returns Package
	 *     PackageDefinition returns Package
	 *     PackageDefinitionOrStub returns Package
	 *     PackagedElementDefinition returns Package
	 *
	 * Constraint:
	 *     (name=Name membership+=MemberDefinition*)
	 */
	protected void sequence_PackageDefinition(ISerializationContext context, org.omg.sysml.lang.sysml.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Redefinition returns Redefinition
	 *
	 * Constraint:
	 *     redefinedFeature=[Feature|QualifiedName]
	 */
	protected void sequence_Redefinition(ISerializationContext context, Redefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRedefinitionAccess().getRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     UnlimitedNaturalLiteralExpression returns LiteralUnbounded
	 *
	 * Constraint:
	 *     {LiteralUnbounded}
	 */
	protected void sequence_UnlimitedNaturalLiteralExpression(ISerializationContext context, LiteralUnbounded semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
