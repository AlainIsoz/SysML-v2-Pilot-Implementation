/*
 * generated by Xtext 2.12.0
 */
package org.omg.sysml.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.omg.sysml.kerml.structure.Feature;
import org.omg.sysml.kerml.structure.StructurePackage;
import org.omg.sysml.services.AlfGrammarAccess;

@SuppressWarnings("all")
public class AlfSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AlfGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == StructurePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case StructurePackage.CLASS:
				if (rule == grammarAccess.getClassDeclarationRule()) {
					sequence_ClassDeclaration(context, (org.omg.sysml.kerml.structure.Class) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getClassDefinitionRule()) {
					sequence_ClassDeclaration_ClassDefinition(context, (org.omg.sysml.kerml.structure.Class) semanticObject); 
					return; 
				}
				else break;
			case StructurePackage.FEATURE:
				sequence_FeatureDefinition(context, (Feature) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ClassDeclaration returns Class
	 *
	 * Constraint:
	 *     (isAbstract?='abstract'? name=Name)
	 */
	protected void sequence_ClassDeclaration(ISerializationContext context, org.omg.sysml.kerml.structure.Class semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ClassDefinition returns Class
	 *
	 * Constraint:
	 *     (isAbstract?='abstract'? name=Name ownedFeature+=ClassMember*)
	 */
	protected void sequence_ClassDeclaration_ClassDefinition(ISerializationContext context, org.omg.sysml.kerml.structure.Class semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ClassMember returns Feature
	 *     FeatureDefinition returns Feature
	 *
	 * Constraint:
	 *     (methodVisibility=VisibilityKind? name=Name type+=[Class|QualifiedName])
	 */
	protected void sequence_FeatureDefinition(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
