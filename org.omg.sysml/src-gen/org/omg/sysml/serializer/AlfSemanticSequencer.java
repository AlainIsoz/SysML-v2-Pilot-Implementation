/*
 * generated by Xtext 2.12.0
 */
package org.omg.sysml.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.omg.sysml.lang.sysml.Annotation;
import org.omg.sysml.lang.sysml.Association;
import org.omg.sysml.lang.sysml.Comment;
import org.omg.sysml.lang.sysml.Connector;
import org.omg.sysml.lang.sysml.ConnectorEnd;
import org.omg.sysml.lang.sysml.ElementReferenceExpression;
import org.omg.sysml.lang.sysml.EndFeatureMembership;
import org.omg.sysml.lang.sysml.Feature;
import org.omg.sysml.lang.sysml.FeatureMembership;
import org.omg.sysml.lang.sysml.FeatureTyping;
import org.omg.sysml.lang.sysml.FeatureValue;
import org.omg.sysml.lang.sysml.Import;
import org.omg.sysml.lang.sysml.InstanceCreationExpression;
import org.omg.sysml.lang.sysml.LiteralBoolean;
import org.omg.sysml.lang.sysml.LiteralInteger;
import org.omg.sysml.lang.sysml.LiteralNull;
import org.omg.sysml.lang.sysml.LiteralReal;
import org.omg.sysml.lang.sysml.LiteralString;
import org.omg.sysml.lang.sysml.LiteralUnbounded;
import org.omg.sysml.lang.sysml.Membership;
import org.omg.sysml.lang.sysml.Multiplicity;
import org.omg.sysml.lang.sysml.ObjectClass;
import org.omg.sysml.lang.sysml.OperatorExpression;
import org.omg.sysml.lang.sysml.Redefinition;
import org.omg.sysml.lang.sysml.SequenceAccessExpression;
import org.omg.sysml.lang.sysml.SequenceConstructionExpression;
import org.omg.sysml.lang.sysml.Subsetting;
import org.omg.sysml.lang.sysml.Superclassing;
import org.omg.sysml.lang.sysml.SysMLPackage;
import org.omg.sysml.lang.sysml.ValueClass;
import org.omg.sysml.services.AlfGrammarAccess;

@SuppressWarnings("all")
public class AlfSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AlfGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SysMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SysMLPackage.ANNOTATION:
				sequence_Annotation(context, (Annotation) semanticObject); 
				return; 
			case SysMLPackage.ASSOCIATION:
				if (rule == grammarAccess.getNonFeatureDefinitionRule()
						|| rule == grammarAccess.getAssociationDefinitionOrStubRule()) {
					sequence_AssociationBody_AssociationDeclaration(context, (Association) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUnitDefinitionRule()) {
					sequence_AssociationBody_AssociationDeclaration_UnitPrefix(context, (Association) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAssociationUnitDefinitionRule()) {
					sequence_AssociationBody_AssociationDeclaration_UnitPrefix(context, (Association) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.COMMENT:
				sequence_Comment(context, (Comment) semanticObject); 
				return; 
			case SysMLPackage.CONNECTOR:
				sequence_CategoryBody_ConnectorDefinition(context, (Connector) semanticObject); 
				return; 
			case SysMLPackage.CONNECTOR_END:
				sequence_ConnectorEnd(context, (ConnectorEnd) semanticObject); 
				return; 
			case SysMLPackage.ELEMENT_REFERENCE_EXPRESSION:
				sequence_ElementReferenceExpression(context, (ElementReferenceExpression) semanticObject); 
				return; 
			case SysMLPackage.END_FEATURE_MEMBERSHIP:
				sequence_AssociationEndFeatureMember_CategoryMemberPrefix(context, (EndFeatureMembership) semanticObject); 
				return; 
			case SysMLPackage.FEATURE:
				if (rule == grammarAccess.getNamedFeatureDefinitionRule()) {
					sequence_CategoryBody_FeatureCompletion_FeatureDeclaration_Redefinitions_Subsets_TypePart(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUnitDefinitionRule()) {
					sequence_CategoryBody_FeatureCompletion_FeatureDeclaration_Redefinitions_Subsets_TypePart_UnitPrefix(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureUnitDefinitionRule()) {
					sequence_CategoryBody_FeatureCompletion_FeatureDeclaration_Redefinitions_Subsets_TypePart_UnitPrefix(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureDefinitionRule()) {
					sequence_CategoryBody_FeatureCompletion_FeatureDeclaration_Redefinitions_Subsets_TypePart_UnnamedFeatureDefinition(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUnnamedFeatureDefinitionRule()) {
					sequence_CategoryBody_FeatureCompletion_Redefinitions_Subsets_TypePart_UnnamedFeatureDefinition(context, (Feature) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_MEMBERSHIP:
				if (rule == grammarAccess.getCategoryMemberRule()
						|| rule == grammarAccess.getFeatureCategoryMemberRule()) {
					sequence_CategoryMemberPrefix_FeatureCategoryMember_FeatureMemberElement(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAssociationMemberRule()) {
					sequence_CategoryMemberPrefix_FeatureMemberElement(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAssociationFeatureMemberRule()) {
					sequence_CategoryMemberPrefix_FeatureMemberElement(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_TYPING:
				if (rule == grammarAccess.getConnectorTypingRule()) {
					sequence_ConnectorTyping(context, (FeatureTyping) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureTypingRule()) {
					sequence_FeatureTyping(context, (FeatureTyping) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_VALUE:
				sequence_FeatureValue(context, (FeatureValue) semanticObject); 
				return; 
			case SysMLPackage.IMPORT:
				sequence_PackageImport(context, (Import) semanticObject); 
				return; 
			case SysMLPackage.INSTANCE_CREATION_EXPRESSION:
				sequence_InstanceCreationExpression_NamedTuple_PositionalTuple(context, (InstanceCreationExpression) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_BOOLEAN:
				sequence_BooleanLiteralExpression(context, (LiteralBoolean) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_INTEGER:
				sequence_NaturalLiteralExpression(context, (LiteralInteger) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_NULL:
				sequence_NullLiteralExpression(context, (LiteralNull) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_REAL:
				sequence_RealLiteralExpression(context, (LiteralReal) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_STRING:
				sequence_StringLiteralExpression(context, (LiteralString) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_UNBOUNDED:
				sequence_UnlimitedNaturalLiteralExpression(context, (LiteralUnbounded) semanticObject); 
				return; 
			case SysMLPackage.MEMBERSHIP:
				if (rule == grammarAccess.getCategoryMemberRule()
						|| rule == grammarAccess.getAssociationMemberRule()) {
					sequence_CategoryMemberPrefix_NonFeatureMemberElement(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNonFeatureCategoryMemberRule()) {
					sequence_CategoryMemberPrefix_NonFeatureMemberElement(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getElementImportRule()) {
					sequence_ElementImport_PackageMemberPrefix(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPackageMemberRule()) {
					sequence_FeaturePackageMemberElement_NonFeatureMemberElement_PackageMemberPrefix(context, (Membership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.MULTIPLICITY:
				sequence_Multiplicity(context, (Multiplicity) semanticObject); 
				return; 
			case SysMLPackage.OBJECT_CLASS:
				if (rule == grammarAccess.getNonFeatureDefinitionRule()
						|| rule == grammarAccess.getClassDefinitionOrStubRule()) {
					sequence_CategoryBody_ClassDeclaration_ClassDeclarationCompletion(context, (ObjectClass) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUnitDefinitionRule()) {
					sequence_CategoryBody_ClassDeclaration_ClassDeclarationCompletion_UnitPrefix(context, (ObjectClass) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getClassUnitDefinitionRule()) {
					sequence_CategoryBody_ClassDeclaration_ClassDeclarationCompletion_UnitPrefix(context, (ObjectClass) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.OPERATOR_EXPRESSION:
				sequence_BinaryExpression_UnaryExpression(context, (OperatorExpression) semanticObject); 
				return; 
			case SysMLPackage.PACKAGE:
				if (rule == grammarAccess.getNonFeatureDefinitionRule()
						|| rule == grammarAccess.getPackageDefinitionOrStubRule()) {
					sequence_PackageDefinition(context, (org.omg.sysml.lang.sysml.Package) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUnitDefinitionRule()
						|| rule == grammarAccess.getPackageUnitDefinitionRule()) {
					sequence_PackageDefinition_UnitPrefix(context, (org.omg.sysml.lang.sysml.Package) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.REDEFINITION:
				sequence_Redefinition(context, (Redefinition) semanticObject); 
				return; 
			case SysMLPackage.SEQUENCE_ACCESS_EXPRESSION:
				sequence_SequenceAccessExpression(context, (SequenceAccessExpression) semanticObject); 
				return; 
			case SysMLPackage.SEQUENCE_CONSTRUCTION_EXPRESSION:
				sequence_SequenceConstructionExpression(context, (SequenceConstructionExpression) semanticObject); 
				return; 
			case SysMLPackage.SUBSETTING:
				sequence_Subset(context, (Subsetting) semanticObject); 
				return; 
			case SysMLPackage.SUPERCLASSING:
				sequence_Superclassing(context, (Superclassing) semanticObject); 
				return; 
			case SysMLPackage.VALUE_CLASS:
				if (rule == grammarAccess.getDataTypeUnitDefinitionRule()) {
					sequence_CategoryBody_ClassDeclarationCompletion_DataTypeDeclaration_UnitPrefix(context, (ValueClass) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNonFeatureDefinitionRule()
						|| rule == grammarAccess.getDataTypeDefinitionOrStubRule()) {
					sequence_CategoryBody_ClassDeclarationCompletion_DataTypeDeclaration(context, (ValueClass) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Annotation returns Annotation
	 *
	 * Constraint:
	 *     ownedRelatedElement+=Comment
	 */
	protected void sequence_Annotation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureDefinition returns Association
	 *     AssociationDefinitionOrStub returns Association
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         name=Name 
	 *         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	 *         (ownedMembership+=AssociationMember | ownedImport+=PackageImport)*
	 *     )
	 */
	protected void sequence_AssociationBody_AssociationDeclaration(ISerializationContext context, Association semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnitDefinition returns Association
	 *
	 * Constraint:
	 *     (
	 *         (ownedImport+=PackageImport | ownedMembership+=ElementImport)* 
	 *         ownedRelationship+=Annotation? 
	 *         isAbstract?='abstract'? 
	 *         name=Name 
	 *         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	 *         (ownedMembership+=AssociationMember | ownedImport+=PackageImport)*
	 *     )
	 */
	protected void sequence_AssociationBody_AssociationDeclaration_UnitPrefix(ISerializationContext context, Association semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     AssociationUnitDefinition returns Association
	//
	// Constraint:
	//     (
	//         (ownedImport+=PackageImport | ownedMembership+=ElementImport)* 
	//         ownedRelationship+=Annotation* 
	//         isAbstract?='abstract'? 
	//         name=Name 
	//         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	//         (ownedMembership+=AssociationMember | ownedImport+=PackageImport)*
	//     )
	//
	// protected void sequence_AssociationBody_AssociationDeclaration_UnitPrefix(ISerializationContext context, Association semanticObject) { }
	
	/**
	 * Contexts:
	 *     AssociationMember returns EndFeatureMembership
	 *     AssociationEndFeatureMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=Annotation* 
	 *         visibility=VisibilityIndicator? 
	 *         (
	 *             ((isPart?='part' | isPort?='port')? direction=FeatureDirection? ownedMemberFeature=FeatureDefinition) | 
	 *             (isPart?='part' memberName=Name? memberFeature=[Feature|QualifiedName]) | 
	 *             (direction=FeatureDirection? ownedMemberFeature=NamedFeatureDefinition) | 
	 *             (memberName=Name memberFeature=[Feature|QualifiedName])
	 *         )
	 *     )
	 */
	protected void sequence_AssociationEndFeatureMember_CategoryMemberPrefix(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns OperatorExpression
	 *     BinaryExpression returns OperatorExpression
	 *     BinaryExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     UnaryExpression returns OperatorExpression
	 *     SequenceAccessExpression returns OperatorExpression
	 *     SequenceAccessExpression.SequenceAccessExpression_1_0 returns OperatorExpression
	 *     PrimaryExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (operand+=BinaryExpression_OperatorExpression_1_0 ((operator=BinaryOperator operand+=Expression) | (operator='@' operand+=Expression))) | 
	 *         (operator=UnaryOperator operand+=SequenceAccessExpression)
	 *     )
	 */
	protected void sequence_BinaryExpression_UnaryExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns LiteralBoolean
	 *     BinaryExpression returns LiteralBoolean
	 *     BinaryExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     UnaryExpression returns LiteralBoolean
	 *     SequenceAccessExpression returns LiteralBoolean
	 *     SequenceAccessExpression.SequenceAccessExpression_1_0 returns LiteralBoolean
	 *     PrimaryExpression returns LiteralBoolean
	 *     LiteralExpression returns LiteralBoolean
	 *     BooleanLiteralExpression returns LiteralBoolean
	 *
	 * Constraint:
	 *     value=BOOLEAN_VALUE
	 */
	protected void sequence_BooleanLiteralExpression(ISerializationContext context, LiteralBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.LITERAL_BOOLEAN__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.LITERAL_BOOLEAN__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanLiteralExpressionAccess().getValueBOOLEAN_VALUETerminalRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DataTypeUnitDefinition returns ValueClass
	 *
	 * Constraint:
	 *     (
	 *         (ownedImport+=PackageImport | ownedMembership+=ElementImport)* 
	 *         ownedRelationship+=Annotation* 
	 *         isAbstract?='abstract'? 
	 *         name=Name 
	 *         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	 *         (ownedMembership+=CategoryMember | ownedImport+=PackageImport)*
	 *     )
	 */
	protected void sequence_CategoryBody_ClassDeclarationCompletion_DataTypeDeclaration_UnitPrefix(ISerializationContext context, ValueClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureDefinition returns ValueClass
	 *     DataTypeDefinitionOrStub returns ValueClass
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         name=Name 
	 *         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	 *         (ownedMembership+=CategoryMember | ownedImport+=PackageImport)*
	 *     )
	 */
	protected void sequence_CategoryBody_ClassDeclarationCompletion_DataTypeDeclaration(ISerializationContext context, ValueClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureDefinition returns ObjectClass
	 *     ClassDefinitionOrStub returns ObjectClass
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         name=Name 
	 *         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	 *         (ownedMembership+=CategoryMember | ownedImport+=PackageImport)*
	 *     )
	 */
	protected void sequence_CategoryBody_ClassDeclaration_ClassDeclarationCompletion(ISerializationContext context, ObjectClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnitDefinition returns ObjectClass
	 *
	 * Constraint:
	 *     (
	 *         (ownedImport+=PackageImport | ownedMembership+=ElementImport)* 
	 *         ownedRelationship+=Annotation? 
	 *         isAbstract?='abstract'? 
	 *         name=Name 
	 *         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	 *         (ownedMembership+=CategoryMember | ownedImport+=PackageImport)*
	 *     )
	 */
	protected void sequence_CategoryBody_ClassDeclaration_ClassDeclarationCompletion_UnitPrefix(ISerializationContext context, ObjectClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     ClassUnitDefinition returns ObjectClass
	//
	// Constraint:
	//     (
	//         (ownedImport+=PackageImport | ownedMembership+=ElementImport)* 
	//         ownedRelationship+=Annotation* 
	//         isAbstract?='abstract'? 
	//         name=Name 
	//         (ownedRelationship+=Superclassing ownedRelationship+=Superclassing*)? 
	//         (ownedMembership+=CategoryMember | ownedImport+=PackageImport)*
	//     )
	//
	// protected void sequence_CategoryBody_ClassDeclaration_ClassDeclarationCompletion_UnitPrefix(ISerializationContext context, ObjectClass semanticObject) { }
	
	/**
	 * Contexts:
	 *     ConnectorDefinition returns Connector
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (name=Name? ownedRelationship+=ConnectorTyping? connectorEnd+=ConnectorEnd connectorEnd+=ConnectorEnd) | 
	 *             (name=Name? ownedRelationship+=ConnectorTyping? connectorEnd+=ConnectorEnd connectorEnd+=ConnectorEnd connectorEnd+=ConnectorEnd*)
	 *         ) 
	 *         (ownedMembership+=CategoryMember | ownedImport+=PackageImport)*
	 *     )
	 */
	protected void sequence_CategoryBody_ConnectorDefinition(ISerializationContext context, Connector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NamedFeatureDefinition returns Feature
	 *
	 * Constraint:
	 *     (
	 *         name=Name 
	 *         isComposite?='compose'? 
	 *         ownedRelationship+=FeatureTyping? 
	 *         multiplicity=Multiplicity? 
	 *         (isOrdered?='ordered' | isNonunique?='nonunique')* 
	 *         (ownedRelationship+=Redefinition ownedRelationship+=Redefinition*)? 
	 *         (ownedRelationship+=Subset ownedRelationship+=Subset*)? 
	 *         valuation=FeatureValue? 
	 *         ownedMembership+=CategoryMember? 
	 *         (ownedImport+=PackageImport? ownedMembership+=CategoryMember?)*
	 *     )
	 */
	protected void sequence_CategoryBody_FeatureCompletion_FeatureDeclaration_Redefinitions_Subsets_TypePart(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnitDefinition returns Feature
	 *
	 * Constraint:
	 *     (
	 *         (ownedImport+=PackageImport | ownedMembership+=ElementImport)* 
	 *         ownedRelationship+=Annotation? 
	 *         name=Name 
	 *         isComposite?='compose'? 
	 *         ownedRelationship+=FeatureTyping? 
	 *         multiplicity=Multiplicity? 
	 *         isOrdered?='ordered'? 
	 *         (isNonunique?='nonunique'? isOrdered?='ordered'?)* 
	 *         (ownedRelationship+=Redefinition ownedRelationship+=Redefinition*)? 
	 *         (ownedRelationship+=Subset ownedRelationship+=Subset*)? 
	 *         valuation=FeatureValue? 
	 *         (ownedMembership+=CategoryMember | ownedImport+=PackageImport)*
	 *     )
	 */
	protected void sequence_CategoryBody_FeatureCompletion_FeatureDeclaration_Redefinitions_Subsets_TypePart_UnitPrefix(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     FeatureUnitDefinition returns Feature
	//
	// Constraint:
	//     (
	//         (ownedImport+=PackageImport | ownedMembership+=ElementImport)* 
	//         ownedRelationship+=Annotation* 
	//         name=Name 
	//         isComposite?='compose'? 
	//         ownedRelationship+=FeatureTyping? 
	//         multiplicity=Multiplicity? 
	//         (isOrdered?='ordered' | isNonunique?='nonunique')* 
	//         (ownedRelationship+=Redefinition ownedRelationship+=Redefinition*)? 
	//         (ownedRelationship+=Subset ownedRelationship+=Subset*)? 
	//         valuation=FeatureValue? 
	//         ownedMembership+=CategoryMember? 
	//         (ownedImport+=PackageImport? ownedMembership+=CategoryMember?)*
	//     )
	//
	// protected void sequence_CategoryBody_FeatureCompletion_FeatureDeclaration_Redefinitions_Subsets_TypePart_UnitPrefix(ISerializationContext context, Feature semanticObject) { }
	
	/**
	 * Contexts:
	 *     FeatureDefinition returns Feature
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         (
	 *                             name=Name | 
	 *                             (ownedRelationship+=Subset ownedRelationship+=Subset* ownedRelationship+=Redefinition ownedRelationship+=Redefinition*) | 
	 *                             (ownedRelationship+=Redefinition ownedRelationship+=Redefinition*)
	 *                         ) 
	 *                         isComposite?='compose'? 
	 *                         ownedRelationship+=FeatureTyping? 
	 *                         multiplicity=Multiplicity? 
	 *                         (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                         isOrdered?='ordered' 
	 *                         ownedRelationship+=Redefinition 
	 *                         ownedRelationship+=Redefinition* 
	 *                         isComposite?='compose'? 
	 *                         ownedRelationship+=FeatureTyping? 
	 *                         (
	 *                             multiplicity=Multiplicity? 
	 *                             (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                             isOrdered?='ordered' 
	 *                             ownedRelationship+=Redefinition 
	 *                             ownedRelationship+=Redefinition* 
	 *                             isComposite?='compose'? 
	 *                             ownedRelationship+=FeatureTyping?
	 *                         )* 
	 *                         multiplicity=Multiplicity? 
	 *                         (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                         isOrdered?='ordered' 
	 *                         ownedRelationship+=Subset 
	 *                         ownedRelationship+=Subset* 
	 *                         ownedRelationship+=Redefinition 
	 *                         ownedRelationship+=Redefinition* 
	 *                         isComposite?='compose'? 
	 *                         ownedRelationship+=FeatureTyping? 
	 *                         (
	 *                             multiplicity=Multiplicity? 
	 *                             (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                             isOrdered?='ordered' 
	 *                             ownedRelationship+=Subset 
	 *                             ownedRelationship+=Subset* 
	 *                             ownedRelationship+=Redefinition 
	 *                             ownedRelationship+=Redefinition* 
	 *                             isComposite?='compose'? 
	 *                             ownedRelationship+=FeatureTyping?
	 *                         )* 
	 *                         multiplicity=Multiplicity? 
	 *                         (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                         isOrdered?='ordered' 
	 *                         ownedRelationship+=Redefinition 
	 *                         ownedRelationship+=Redefinition* 
	 *                         isComposite?='compose'? 
	 *                         ownedRelationship+=FeatureTyping? 
	 *                         (
	 *                             multiplicity=Multiplicity? 
	 *                             (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                             isOrdered?='ordered' 
	 *                             ownedRelationship+=Redefinition 
	 *                             ownedRelationship+=Redefinition* 
	 *                             isComposite?='compose'? 
	 *                             ownedRelationship+=FeatureTyping?
	 *                         )* 
	 *                         multiplicity=Multiplicity? 
	 *                         (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                         isOrdered?='ordered' 
	 *                         ownedRelationship+=Subset 
	 *                         ownedRelationship+=Subset* 
	 *                         ownedRelationship+=Redefinition 
	 *                         ownedRelationship+=Redefinition* 
	 *                         isComposite?='compose'? 
	 *                         ownedRelationship+=FeatureTyping? 
	 *                         (
	 *                             multiplicity=Multiplicity? 
	 *                             (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                             isOrdered?='ordered' 
	 *                             ownedRelationship+=Subset 
	 *                             ownedRelationship+=Subset* 
	 *                             ownedRelationship+=Redefinition 
	 *                             ownedRelationship+=Redefinition* 
	 *                             isComposite?='compose'? 
	 *                             ownedRelationship+=FeatureTyping?
	 *                         )*
	 *                     ) | 
	 *                     (
	 *                         (
	 *                             name=Name | 
	 *                             (ownedRelationship+=Subset ownedRelationship+=Subset* ownedRelationship+=Redefinition ownedRelationship+=Redefinition*) | 
	 *                             (ownedRelationship+=Redefinition ownedRelationship+=Redefinition*)
	 *                         ) 
	 *                         isComposite?='compose'? 
	 *                         ownedRelationship+=FeatureTyping? 
	 *                         multiplicity=Multiplicity? 
	 *                         (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                         isOrdered?='ordered' 
	 *                         ownedRelationship+=Subset 
	 *                         ownedRelationship+=Subset* 
	 *                         ownedRelationship+=Redefinition 
	 *                         ownedRelationship+=Redefinition* 
	 *                         isComposite?='compose'? 
	 *                         ownedRelationship+=FeatureTyping? 
	 *                         (
	 *                             multiplicity=Multiplicity? 
	 *                             (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                             isOrdered?='ordered' 
	 *                             ownedRelationship+=Subset 
	 *                             ownedRelationship+=Subset* 
	 *                             ownedRelationship+=Redefinition 
	 *                             ownedRelationship+=Redefinition* 
	 *                             isComposite?='compose'? 
	 *                             ownedRelationship+=FeatureTyping?
	 *                         )* 
	 *                         multiplicity=Multiplicity? 
	 *                         (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                         isOrdered?='ordered' 
	 *                         ownedRelationship+=Redefinition 
	 *                         ownedRelationship+=Redefinition* 
	 *                         isComposite?='compose'? 
	 *                         ownedRelationship+=FeatureTyping? 
	 *                         (
	 *                             multiplicity=Multiplicity? 
	 *                             (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                             isOrdered?='ordered' 
	 *                             ownedRelationship+=Redefinition 
	 *                             ownedRelationship+=Redefinition* 
	 *                             isComposite?='compose'? 
	 *                             ownedRelationship+=FeatureTyping?
	 *                         )* 
	 *                         multiplicity=Multiplicity? 
	 *                         (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                         isOrdered?='ordered' 
	 *                         ownedRelationship+=Subset 
	 *                         ownedRelationship+=Subset* 
	 *                         ownedRelationship+=Redefinition 
	 *                         ownedRelationship+=Redefinition* 
	 *                         isComposite?='compose'? 
	 *                         ownedRelationship+=FeatureTyping? 
	 *                         (
	 *                             multiplicity=Multiplicity? 
	 *                             (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                             isOrdered?='ordered' 
	 *                             ownedRelationship+=Subset 
	 *                             ownedRelationship+=Subset* 
	 *                             ownedRelationship+=Redefinition 
	 *                             ownedRelationship+=Redefinition* 
	 *                             isComposite?='compose'? 
	 *                             ownedRelationship+=FeatureTyping?
	 *                         )*
	 *                     )
	 *                 ) 
	 *                 (
	 *                     multiplicity=Multiplicity? 
	 *                     (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                     isOrdered?='ordered' 
	 *                     ownedRelationship+=Redefinition 
	 *                     ownedRelationship+=Redefinition* 
	 *                     isComposite?='compose'? 
	 *                     ownedRelationship+=FeatureTyping? 
	 *                     (
	 *                         multiplicity=Multiplicity? 
	 *                         (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                         isOrdered?='ordered' 
	 *                         ownedRelationship+=Redefinition 
	 *                         ownedRelationship+=Redefinition* 
	 *                         isComposite?='compose'? 
	 *                         ownedRelationship+=FeatureTyping?
	 *                     )* 
	 *                     multiplicity=Multiplicity? 
	 *                     (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                     isOrdered?='ordered' 
	 *                     ownedRelationship+=Subset 
	 *                     ownedRelationship+=Subset* 
	 *                     ownedRelationship+=Redefinition 
	 *                     ownedRelationship+=Redefinition* 
	 *                     isComposite?='compose'? 
	 *                     ownedRelationship+=FeatureTyping? 
	 *                     (
	 *                         multiplicity=Multiplicity? 
	 *                         (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                         isOrdered?='ordered' 
	 *                         ownedRelationship+=Subset 
	 *                         ownedRelationship+=Subset* 
	 *                         ownedRelationship+=Redefinition 
	 *                         ownedRelationship+=Redefinition* 
	 *                         isComposite?='compose'? 
	 *                         ownedRelationship+=FeatureTyping?
	 *                     )*
	 *                 )* 
	 *                 (
	 *                     multiplicity=Multiplicity | 
	 *                     (
	 *                         multiplicity=Multiplicity? 
	 *                         (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                         (isOrdered?='ordered' | (isOrdered?='ordered' ownedRelationship+=Subset ownedRelationship+=Subset*))?
	 *                     ) | 
	 *                     (
	 *                         multiplicity=Multiplicity? 
	 *                         (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                         isOrdered?='ordered' 
	 *                         ownedRelationship+=Redefinition 
	 *                         ownedRelationship+=Redefinition* 
	 *                         isComposite?='compose'? 
	 *                         ownedRelationship+=FeatureTyping? 
	 *                         (
	 *                             multiplicity=Multiplicity? 
	 *                             (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                             isOrdered?='ordered' 
	 *                             ownedRelationship+=Redefinition 
	 *                             ownedRelationship+=Redefinition* 
	 *                             isComposite?='compose'? 
	 *                             ownedRelationship+=FeatureTyping?
	 *                         )* 
	 *                         (
	 *                             multiplicity=Multiplicity | 
	 *                             (
	 *                                 multiplicity=Multiplicity? 
	 *                                 (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                                 (isOrdered?='ordered' | (isOrdered?='ordered' ownedRelationship+=Subset ownedRelationship+=Subset*))?
	 *                             )
	 *                         )
	 *                     )
	 *                 )?
	 *             ) | 
	 *             (
	 *                 (
	 *                     name=Name | 
	 *                     (ownedRelationship+=Subset ownedRelationship+=Subset* ownedRelationship+=Redefinition ownedRelationship+=Redefinition*) | 
	 *                     (ownedRelationship+=Redefinition ownedRelationship+=Redefinition*)
	 *                 ) 
	 *                 isComposite?='compose'? 
	 *                 ownedRelationship+=FeatureTyping? 
	 *                 (
	 *                     multiplicity=Multiplicity | 
	 *                     (
	 *                         multiplicity=Multiplicity? 
	 *                         (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                         (isOrdered?='ordered' | (isOrdered?='ordered' ownedRelationship+=Subset ownedRelationship+=Subset*))?
	 *                     )
	 *                 )
	 *             ) | 
	 *             (
	 *                 (
	 *                     name=Name | 
	 *                     (ownedRelationship+=Subset ownedRelationship+=Subset* ownedRelationship+=Redefinition ownedRelationship+=Redefinition*) | 
	 *                     (ownedRelationship+=Redefinition ownedRelationship+=Redefinition*)
	 *                 ) 
	 *                 isComposite?='compose'? 
	 *                 ownedRelationship+=FeatureTyping? 
	 *                 multiplicity=Multiplicity? 
	 *                 (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                 isOrdered?='ordered' 
	 *                 ownedRelationship+=Redefinition 
	 *                 ownedRelationship+=Redefinition* 
	 *                 isComposite?='compose'? 
	 *                 ownedRelationship+=FeatureTyping? 
	 *                 (
	 *                     multiplicity=Multiplicity? 
	 *                     (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                     isOrdered?='ordered' 
	 *                     ownedRelationship+=Redefinition 
	 *                     ownedRelationship+=Redefinition* 
	 *                     isComposite?='compose'? 
	 *                     ownedRelationship+=FeatureTyping?
	 *                 )* 
	 *                 (
	 *                     multiplicity=Multiplicity | 
	 *                     (
	 *                         multiplicity=Multiplicity? 
	 *                         (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                         (isOrdered?='ordered' | (isOrdered?='ordered' ownedRelationship+=Subset ownedRelationship+=Subset*))?
	 *                     ) | 
	 *                     (
	 *                         multiplicity=Multiplicity? 
	 *                         (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                         isOrdered?='ordered' 
	 *                         ownedRelationship+=Subset 
	 *                         ownedRelationship+=Subset* 
	 *                         ownedRelationship+=Redefinition 
	 *                         ownedRelationship+=Redefinition* 
	 *                         isComposite?='compose'? 
	 *                         ownedRelationship+=FeatureTyping? 
	 *                         (
	 *                             multiplicity=Multiplicity? 
	 *                             (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                             isOrdered?='ordered' 
	 *                             ownedRelationship+=Subset 
	 *                             ownedRelationship+=Subset* 
	 *                             ownedRelationship+=Redefinition 
	 *                             ownedRelationship+=Redefinition* 
	 *                             isComposite?='compose'? 
	 *                             ownedRelationship+=FeatureTyping?
	 *                         )* 
	 *                         (
	 *                             multiplicity=Multiplicity | 
	 *                             (
	 *                                 multiplicity=Multiplicity? 
	 *                                 (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                                 (isOrdered?='ordered' | (isOrdered?='ordered' ownedRelationship+=Subset ownedRelationship+=Subset*))?
	 *                             ) | 
	 *                             (
	 *                                 multiplicity=Multiplicity? 
	 *                                 (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                                 isOrdered?='ordered' 
	 *                                 ownedRelationship+=Redefinition 
	 *                                 ownedRelationship+=Redefinition* 
	 *                                 isComposite?='compose'? 
	 *                                 ownedRelationship+=FeatureTyping? 
	 *                                 (
	 *                                     multiplicity=Multiplicity? 
	 *                                     (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                                     isOrdered?='ordered' 
	 *                                     ownedRelationship+=Redefinition 
	 *                                     ownedRelationship+=Redefinition* 
	 *                                     isComposite?='compose'? 
	 *                                     ownedRelationship+=FeatureTyping?
	 *                                 )* 
	 *                                 (
	 *                                     multiplicity=Multiplicity | 
	 *                                     (
	 *                                         multiplicity=Multiplicity? 
	 *                                         (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                                         (isOrdered?='ordered' | (isOrdered?='ordered' ownedRelationship+=Subset ownedRelationship+=Subset*))?
	 *                                     )
	 *                                 )
	 *                             )
	 *                         )
	 *                     )
	 *                 )
	 *             ) | 
	 *             (
	 *                 (
	 *                     name=Name | 
	 *                     (ownedRelationship+=Subset ownedRelationship+=Subset* ownedRelationship+=Redefinition ownedRelationship+=Redefinition*) | 
	 *                     (ownedRelationship+=Redefinition ownedRelationship+=Redefinition*)
	 *                 ) 
	 *                 isComposite?='compose'? 
	 *                 ownedRelationship+=FeatureTyping? 
	 *                 multiplicity=Multiplicity? 
	 *                 (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                 isOrdered?='ordered' 
	 *                 ownedRelationship+=Subset 
	 *                 ownedRelationship+=Subset* 
	 *                 ownedRelationship+=Redefinition 
	 *                 ownedRelationship+=Redefinition* 
	 *                 isComposite?='compose'? 
	 *                 ownedRelationship+=FeatureTyping? 
	 *                 (
	 *                     multiplicity=Multiplicity? 
	 *                     (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                     isOrdered?='ordered' 
	 *                     ownedRelationship+=Subset 
	 *                     ownedRelationship+=Subset* 
	 *                     ownedRelationship+=Redefinition 
	 *                     ownedRelationship+=Redefinition* 
	 *                     isComposite?='compose'? 
	 *                     ownedRelationship+=FeatureTyping?
	 *                 )* 
	 *                 (
	 *                     multiplicity=Multiplicity | 
	 *                     (
	 *                         multiplicity=Multiplicity? 
	 *                         (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                         (isOrdered?='ordered' | (isOrdered?='ordered' ownedRelationship+=Subset ownedRelationship+=Subset*))?
	 *                     ) | 
	 *                     (
	 *                         multiplicity=Multiplicity? 
	 *                         (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                         isOrdered?='ordered' 
	 *                         ownedRelationship+=Redefinition 
	 *                         ownedRelationship+=Redefinition* 
	 *                         isComposite?='compose'? 
	 *                         ownedRelationship+=FeatureTyping? 
	 *                         (
	 *                             multiplicity=Multiplicity? 
	 *                             (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                             isOrdered?='ordered' 
	 *                             ownedRelationship+=Redefinition 
	 *                             ownedRelationship+=Redefinition* 
	 *                             isComposite?='compose'? 
	 *                             ownedRelationship+=FeatureTyping?
	 *                         )* 
	 *                         (
	 *                             multiplicity=Multiplicity | 
	 *                             (
	 *                                 multiplicity=Multiplicity? 
	 *                                 (isOrdered?='ordered' isNonunique?='nonunique'?)* 
	 *                                 (isOrdered?='ordered' | (isOrdered?='ordered' ownedRelationship+=Subset ownedRelationship+=Subset*))?
	 *                             )
	 *                         )
	 *                     )
	 *                 )
	 *             ) | 
	 *             (ownedRelationship+=Subset ownedRelationship+=Subset*)
	 *         ) 
	 *         valuation=FeatureValue? 
	 *         (ownedMembership+=CategoryMember | ownedImport+=PackageImport)*
	 *     )
	 */
	protected void sequence_CategoryBody_FeatureCompletion_FeatureDeclaration_Redefinitions_Subsets_TypePart_UnnamedFeatureDefinition(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnnamedFeatureDefinition returns Feature
	 *
	 * Constraint:
	 *     (
	 *         (ownedRelationship+=Subset ownedRelationship+=Subset*)? 
	 *         ownedRelationship+=Redefinition 
	 *         ownedRelationship+=Redefinition* 
	 *         isComposite?='compose'? 
	 *         ownedRelationship+=FeatureTyping? 
	 *         multiplicity=Multiplicity? 
	 *         valuation=FeatureValue? 
	 *         (ownedMembership+=CategoryMember | ownedImport+=PackageImport)*
	 *     )
	 */
	protected void sequence_CategoryBody_FeatureCompletion_Redefinitions_Subsets_TypePart_UnnamedFeatureDefinition(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CategoryMember returns FeatureMembership
	 *     FeatureCategoryMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=Annotation* 
	 *         visibility=VisibilityIndicator? 
	 *         (
	 *             (direction=FeatureDirection? ownedMemberFeature=NamedFeatureDefinition) | 
	 *             (direction=FeatureDirection? memberName=Name memberFeature=[Feature|QualifiedName]) | 
	 *             (
	 *                 (isPart?='part' | isPort?='port')? 
	 *                 direction=FeatureDirection? 
	 *                 (ownedMemberFeature=FeatureDefinition | (memberName=Name? memberFeature=[Feature|QualifiedName]))
	 *             ) | 
	 *             ownedMemberFeature=ConnectorDefinition | 
	 *             (memberName=Name? memberFeature=[Connector|QualifiedName])
	 *         )
	 *     )
	 */
	protected void sequence_CategoryMemberPrefix_FeatureCategoryMember_FeatureMemberElement(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AssociationMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=Annotation? 
	 *         visibility=VisibilityIndicator? 
	 *         (
	 *             (
	 *                 (isPart?='part' | isPort?='port')? 
	 *                 direction=FeatureDirection? 
	 *                 (ownedMemberFeature=FeatureDefinition | (memberName=Name? memberFeature=[Feature|QualifiedName]))
	 *             ) | 
	 *             ownedMemberFeature=ConnectorDefinition | 
	 *             (memberName=Name? memberFeature=[Connector|QualifiedName])
	 *         )
	 *     )
	 */
	protected void sequence_CategoryMemberPrefix_FeatureMemberElement(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     AssociationFeatureMember returns FeatureMembership
	//
	// Constraint:
	//     (
	//         ownedRelationship+=Annotation* 
	//         visibility=VisibilityIndicator? 
	//         (
	//             (
	//                 (isPart?='part' | isPort?='port')? 
	//                 direction=FeatureDirection? 
	//                 (ownedMemberFeature=FeatureDefinition | (memberName=Name? memberFeature=[Feature|QualifiedName]))
	//             ) | 
	//             ownedMemberFeature=ConnectorDefinition | 
	//             (memberName=Name? memberFeature=[Connector|QualifiedName])
	//         )
	//     )
	//
	// protected void sequence_CategoryMemberPrefix_FeatureMemberElement(ISerializationContext context, FeatureMembership semanticObject) { }
	
	/**
	 * Contexts:
	 *     CategoryMember returns Membership
	 *     AssociationMember returns Membership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=Annotation? 
	 *         visibility=VisibilityIndicator? 
	 *         (
	 *             ownedMemberElement=NonFeatureDefinition | 
	 *             (memberName=Name? memberElement=[Package|QualifiedName]) | 
	 *             (memberName=Name? memberElement=[ObjectClass|QualifiedName]) | 
	 *             (memberName=Name? memberElement=[ValueClass|QualifiedName]) | 
	 *             (memberName=Name? memberElement=[Association|QualifiedName]) | 
	 *             (memberElement=[Element|QualifiedName] memberName=Name?)
	 *         )
	 *     )
	 */
	protected void sequence_CategoryMemberPrefix_NonFeatureMemberElement(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     NonFeatureCategoryMember returns Membership
	//
	// Constraint:
	//     (
	//         ownedRelationship+=Annotation* 
	//         visibility=VisibilityIndicator? 
	//         (
	//             ownedMemberElement=NonFeatureDefinition | 
	//             (memberName=Name? memberElement=[Package|QualifiedName]) | 
	//             (memberName=Name? memberElement=[ObjectClass|QualifiedName]) | 
	//             (memberName=Name? memberElement=[ValueClass|QualifiedName]) | 
	//             (memberName=Name? memberElement=[Association|QualifiedName]) | 
	//             (memberElement=[Element|QualifiedName] memberName=Name?)
	//         )
	//     )
	//
	// protected void sequence_CategoryMemberPrefix_NonFeatureMemberElement(ISerializationContext context, Membership semanticObject) { }
	
	/**
	 * Contexts:
	 *     Comment returns Comment
	 *
	 * Constraint:
	 *     body=DOCUMENTATION_COMMENT
	 */
	protected void sequence_Comment(ISerializationContext context, Comment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.COMMENT__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.COMMENT__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommentAccess().getBodyDOCUMENTATION_COMMENTTerminalRuleCall_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConnectorEnd returns ConnectorEnd
	 *
	 * Constraint:
	 *     (
	 *         (end=[Feature|QualifiedName]? feature=[Feature|QualifiedName] multiplicity=Multiplicity?) | 
	 *         (end=[Feature|QualifiedName] multiplicity=Multiplicity? feature=[Feature|QualifiedName])
	 *     )
	 */
	protected void sequence_ConnectorEnd(ISerializationContext context, ConnectorEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConnectorTyping returns FeatureTyping
	 *
	 * Constraint:
	 *     type=[Association|QualifiedName]
	 */
	protected void sequence_ConnectorTyping(ISerializationContext context, FeatureTyping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConnectorTypingAccess().getTypeAssociationQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.FEATURE_TYPING__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ElementImport returns Membership
	 *
	 * Constraint:
	 *     (ownedRelationship+=Annotation* visibility=PackageElementVisibilityIndicator? memberElement=[Element|QualifiedName] memberName=Name?)
	 */
	protected void sequence_ElementImport_PackageMemberPrefix(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ElementReferenceExpression
	 *     BinaryExpression returns ElementReferenceExpression
	 *     BinaryExpression.OperatorExpression_1_0 returns ElementReferenceExpression
	 *     UnaryExpression returns ElementReferenceExpression
	 *     SequenceAccessExpression returns ElementReferenceExpression
	 *     SequenceAccessExpression.SequenceAccessExpression_1_0 returns ElementReferenceExpression
	 *     PrimaryExpression returns ElementReferenceExpression
	 *     ElementReferenceExpression returns ElementReferenceExpression
	 *
	 * Constraint:
	 *     referent=[Element|QualifiedName]
	 */
	protected void sequence_ElementReferenceExpression(ISerializationContext context, ElementReferenceExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.ELEMENT_REFERENCE_EXPRESSION__REFERENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.ELEMENT_REFERENCE_EXPRESSION__REFERENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementReferenceExpressionAccess().getReferentElementQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.ELEMENT_REFERENCE_EXPRESSION__REFERENT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PackageMember returns Membership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=Annotation* 
	 *         visibility=PackageElementVisibilityIndicator? 
	 *         (
	 *             ownedMemberElement=NonFeatureDefinition | 
	 *             (memberName=Name? memberElement=[Package|QualifiedName]) | 
	 *             (memberName=Name? memberElement=[ObjectClass|QualifiedName]) | 
	 *             (memberName=Name? memberElement=[ValueClass|QualifiedName]) | 
	 *             (memberName=Name? memberElement=[Association|QualifiedName]) | 
	 *             (memberElement=[Element|QualifiedName] memberName=Name?) | 
	 *             ownedMemberElement=NamedFeatureDefinition | 
	 *             ownedMemberElement=UnnamedFeatureDefinition | 
	 *             ((memberName=Name | memberName=Name)? memberElement=[Feature|QualifiedName])
	 *         )
	 *     )
	 */
	protected void sequence_FeaturePackageMemberElement_NonFeatureMemberElement_PackageMemberPrefix(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureTyping returns FeatureTyping
	 *
	 * Constraint:
	 *     type=[Category|QualifiedName]
	 */
	protected void sequence_FeatureTyping(ISerializationContext context, FeatureTyping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFeatureTypingAccess().getTypeCategoryQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.FEATURE_TYPING__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FeatureValue returns FeatureValue
	 *
	 * Constraint:
	 *     value=Expression
	 */
	protected void sequence_FeatureValue(ISerializationContext context, FeatureValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFeatureValueAccess().getValueExpressionParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns InstanceCreationExpression
	 *     BinaryExpression returns InstanceCreationExpression
	 *     BinaryExpression.OperatorExpression_1_0 returns InstanceCreationExpression
	 *     UnaryExpression returns InstanceCreationExpression
	 *     SequenceAccessExpression returns InstanceCreationExpression
	 *     SequenceAccessExpression.SequenceAccessExpression_1_0 returns InstanceCreationExpression
	 *     PrimaryExpression returns InstanceCreationExpression
	 *     InstanceCreationExpression returns InstanceCreationExpression
	 *
	 * Constraint:
	 *     (class=[Class|QualifiedName] ((argument+=Expression argument+=Expression*) | (argument+=Expression argument+=Expression*))?)
	 */
	protected void sequence_InstanceCreationExpression_NamedTuple_PositionalTuple(ISerializationContext context, InstanceCreationExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Multiplicity returns Multiplicity
	 *
	 * Constraint:
	 *     (lower=NaturalLiteralExpression? upper=UnlimitedNaturalLiteralExpression)
	 */
	protected void sequence_Multiplicity(ISerializationContext context, Multiplicity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns LiteralInteger
	 *     BinaryExpression returns LiteralInteger
	 *     BinaryExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     UnaryExpression returns LiteralInteger
	 *     SequenceAccessExpression returns LiteralInteger
	 *     SequenceAccessExpression.SequenceAccessExpression_1_0 returns LiteralInteger
	 *     PrimaryExpression returns LiteralInteger
	 *     LiteralExpression returns LiteralInteger
	 *     NaturalLiteralExpression returns LiteralInteger
	 *     UnlimitedNaturalLiteralExpression returns LiteralInteger
	 *
	 * Constraint:
	 *     value=NATURAL_VALUE
	 */
	protected void sequence_NaturalLiteralExpression(ISerializationContext context, LiteralInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.LITERAL_INTEGER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.LITERAL_INTEGER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNaturalLiteralExpressionAccess().getValueNATURAL_VALUETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns LiteralNull
	 *     BinaryExpression returns LiteralNull
	 *     BinaryExpression.OperatorExpression_1_0 returns LiteralNull
	 *     UnaryExpression returns LiteralNull
	 *     SequenceAccessExpression returns LiteralNull
	 *     SequenceAccessExpression.SequenceAccessExpression_1_0 returns LiteralNull
	 *     PrimaryExpression returns LiteralNull
	 *     LiteralExpression returns LiteralNull
	 *     NullLiteralExpression returns LiteralNull
	 *
	 * Constraint:
	 *     {LiteralNull}
	 */
	protected void sequence_NullLiteralExpression(ISerializationContext context, LiteralNull semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureDefinition returns Package
	 *     PackageDefinitionOrStub returns Package
	 *
	 * Constraint:
	 *     (name=Name (ownedMembership+=PackageMember | ownedImport+=PackageImport)*)
	 */
	protected void sequence_PackageDefinition(ISerializationContext context, org.omg.sysml.lang.sysml.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnitDefinition returns Package
	 *     PackageUnitDefinition returns Package
	 *
	 * Constraint:
	 *     (
	 *         (ownedImport+=PackageImport | ownedMembership+=ElementImport)* 
	 *         ownedRelationship+=Annotation* 
	 *         name=Name 
	 *         (ownedMembership+=PackageMember | ownedImport+=PackageImport)*
	 *     )
	 */
	protected void sequence_PackageDefinition_UnitPrefix(ISerializationContext context, org.omg.sysml.lang.sysml.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackageImport returns Import
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=Annotation* 
	 *         visibility=PackageElementVisibilityIndicator? 
	 *         (importedPackage=[Package|Name] | importedPackage=[Package|ColonQualifiedName] | importedPackage=[Package|DotQualifiedName])
	 *     )
	 */
	protected void sequence_PackageImport(ISerializationContext context, Import semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns LiteralReal
	 *     BinaryExpression returns LiteralReal
	 *     BinaryExpression.OperatorExpression_1_0 returns LiteralReal
	 *     UnaryExpression returns LiteralReal
	 *     SequenceAccessExpression returns LiteralReal
	 *     SequenceAccessExpression.SequenceAccessExpression_1_0 returns LiteralReal
	 *     PrimaryExpression returns LiteralReal
	 *     LiteralExpression returns LiteralReal
	 *     RealLiteralExpression returns LiteralReal
	 *
	 * Constraint:
	 *     value=RealValue
	 */
	protected void sequence_RealLiteralExpression(ISerializationContext context, LiteralReal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.LITERAL_REAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.LITERAL_REAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRealLiteralExpressionAccess().getValueRealValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Redefinition returns Redefinition
	 *
	 * Constraint:
	 *     redefinedFeature=[Feature|QualifiedName]
	 */
	protected void sequence_Redefinition(ISerializationContext context, Redefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRedefinitionAccess().getRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns SequenceAccessExpression
	 *     BinaryExpression returns SequenceAccessExpression
	 *     BinaryExpression.OperatorExpression_1_0 returns SequenceAccessExpression
	 *     UnaryExpression returns SequenceAccessExpression
	 *     SequenceAccessExpression returns SequenceAccessExpression
	 *     SequenceAccessExpression.SequenceAccessExpression_1_0 returns SequenceAccessExpression
	 *     PrimaryExpression returns SequenceAccessExpression
	 *
	 * Constraint:
	 *     (primary=SequenceAccessExpression_SequenceAccessExpression_1_0 index=Expression)
	 */
	protected void sequence_SequenceAccessExpression(ISerializationContext context, SequenceAccessExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.SEQUENCE_ACCESS_EXPRESSION__PRIMARY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.SEQUENCE_ACCESS_EXPRESSION__PRIMARY));
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.SEQUENCE_ACCESS_EXPRESSION__INDEX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.SEQUENCE_ACCESS_EXPRESSION__INDEX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSequenceAccessExpressionAccess().getSequenceAccessExpressionPrimaryAction_1_0(), semanticObject.getPrimary());
		feeder.accept(grammarAccess.getSequenceAccessExpressionAccess().getIndexExpressionParserRuleCall_1_2_0(), semanticObject.getIndex());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns SequenceConstructionExpression
	 *     BinaryExpression returns SequenceConstructionExpression
	 *     BinaryExpression.OperatorExpression_1_0 returns SequenceConstructionExpression
	 *     UnaryExpression returns SequenceConstructionExpression
	 *     SequenceAccessExpression returns SequenceConstructionExpression
	 *     SequenceAccessExpression.SequenceAccessExpression_1_0 returns SequenceConstructionExpression
	 *     PrimaryExpression returns SequenceConstructionExpression
	 *     SequenceConstructionExpression returns SequenceConstructionExpression
	 *
	 * Constraint:
	 *     (element+=Expression element+=Expression*)?
	 */
	protected void sequence_SequenceConstructionExpression(ISerializationContext context, SequenceConstructionExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns LiteralString
	 *     BinaryExpression returns LiteralString
	 *     BinaryExpression.OperatorExpression_1_0 returns LiteralString
	 *     UnaryExpression returns LiteralString
	 *     SequenceAccessExpression returns LiteralString
	 *     SequenceAccessExpression.SequenceAccessExpression_1_0 returns LiteralString
	 *     PrimaryExpression returns LiteralString
	 *     LiteralExpression returns LiteralString
	 *     StringLiteralExpression returns LiteralString
	 *
	 * Constraint:
	 *     value=STRING_VALUE
	 */
	protected void sequence_StringLiteralExpression(ISerializationContext context, LiteralString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.LITERAL_STRING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.LITERAL_STRING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringLiteralExpressionAccess().getValueSTRING_VALUETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Subset returns Subsetting
	 *
	 * Constraint:
	 *     subsettedFeature=[Feature|QualifiedName]
	 */
	protected void sequence_Subset(ISerializationContext context, Subsetting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.SUBSETTING__SUBSETTED_FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.SUBSETTING__SUBSETTED_FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSubsetAccess().getSubsettedFeatureFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.SUBSETTING__SUBSETTED_FEATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Superclassing returns Superclassing
	 *
	 * Constraint:
	 *     superclass=[Class|QualifiedName]
	 */
	protected void sequence_Superclassing(ISerializationContext context, Superclassing semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.SUPERCLASSING__SUPERCLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.SUPERCLASSING__SUPERCLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSuperclassingAccess().getSuperclassClassQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.SUPERCLASSING__SUPERCLASS, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns LiteralUnbounded
	 *     BinaryExpression returns LiteralUnbounded
	 *     BinaryExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     UnaryExpression returns LiteralUnbounded
	 *     SequenceAccessExpression returns LiteralUnbounded
	 *     SequenceAccessExpression.SequenceAccessExpression_1_0 returns LiteralUnbounded
	 *     PrimaryExpression returns LiteralUnbounded
	 *     LiteralExpression returns LiteralUnbounded
	 *     UnlimitedNaturalLiteralExpression returns LiteralUnbounded
	 *
	 * Constraint:
	 *     {LiteralUnbounded}
	 */
	protected void sequence_UnlimitedNaturalLiteralExpression(ISerializationContext context, LiteralUnbounded semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
