/*
 * generated by Xtext 2.12.0
 */
package org.omg.sysml.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.omg.sysml.services.AlfGrammarAccess;

@SuppressWarnings("all")
public class AlfSyntacticSequencer extends AbstractSyntacticSequencer {

	protected AlfGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AssociationDeclaration_IsKeyword_3_0_0_or_SpecializesKeyword_3_0_1;
	protected AbstractElementAlias match_AssociationEndFeatureMember_EndKeyword_2_0_0_q;
	protected AbstractElementAlias match_ClassDeclaration_IsKeyword_3_0_0_or_SpecializesKeyword_3_0_1;
	protected AbstractElementAlias match_ConnectorDefinition_IsKeyword_0_2_q;
	protected AbstractElementAlias match_FeatureClassMember_FeatureKeyword_2_0_0_0_q;
	protected AbstractElementAlias match_FeaturePackageMemberElement_FeatureKeyword_0_0_q;
	protected AbstractElementAlias match_PackageImport_ColonColonKeyword_2_0_1_0_or_FullStopKeyword_2_0_1_1;
	protected AbstractElementAlias match_PrimaryExpression_LeftParenthesisKeyword_4_0_a;
	protected AbstractElementAlias match_PrimaryExpression_LeftParenthesisKeyword_4_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (AlfGrammarAccess) access;
		match_AssociationDeclaration_IsKeyword_3_0_0_or_SpecializesKeyword_3_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAssociationDeclarationAccess().getIsKeyword_3_0_0()), new TokenAlias(false, false, grammarAccess.getAssociationDeclarationAccess().getSpecializesKeyword_3_0_1()));
		match_AssociationEndFeatureMember_EndKeyword_2_0_0_q = new TokenAlias(false, true, grammarAccess.getAssociationEndFeatureMemberAccess().getEndKeyword_2_0_0());
		match_ClassDeclaration_IsKeyword_3_0_0_or_SpecializesKeyword_3_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getClassDeclarationAccess().getIsKeyword_3_0_0()), new TokenAlias(false, false, grammarAccess.getClassDeclarationAccess().getSpecializesKeyword_3_0_1()));
		match_ConnectorDefinition_IsKeyword_0_2_q = new TokenAlias(false, true, grammarAccess.getConnectorDefinitionAccess().getIsKeyword_0_2());
		match_FeatureClassMember_FeatureKeyword_2_0_0_0_q = new TokenAlias(false, true, grammarAccess.getFeatureClassMemberAccess().getFeatureKeyword_2_0_0_0());
		match_FeaturePackageMemberElement_FeatureKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getFeaturePackageMemberElementAccess().getFeatureKeyword_0_0());
		match_PackageImport_ColonColonKeyword_2_0_1_0_or_FullStopKeyword_2_0_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPackageImportAccess().getColonColonKeyword_2_0_1_0()), new TokenAlias(false, false, grammarAccess.getPackageImportAccess().getFullStopKeyword_2_0_1_1()));
		match_PrimaryExpression_LeftParenthesisKeyword_4_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_4_0());
		match_PrimaryExpression_LeftParenthesisKeyword_4_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_4_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AssociationDeclaration_IsKeyword_3_0_0_or_SpecializesKeyword_3_0_1.equals(syntax))
				emit_AssociationDeclaration_IsKeyword_3_0_0_or_SpecializesKeyword_3_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AssociationEndFeatureMember_EndKeyword_2_0_0_q.equals(syntax))
				emit_AssociationEndFeatureMember_EndKeyword_2_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ClassDeclaration_IsKeyword_3_0_0_or_SpecializesKeyword_3_0_1.equals(syntax))
				emit_ClassDeclaration_IsKeyword_3_0_0_or_SpecializesKeyword_3_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConnectorDefinition_IsKeyword_0_2_q.equals(syntax))
				emit_ConnectorDefinition_IsKeyword_0_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FeatureClassMember_FeatureKeyword_2_0_0_0_q.equals(syntax))
				emit_FeatureClassMember_FeatureKeyword_2_0_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FeaturePackageMemberElement_FeatureKeyword_0_0_q.equals(syntax))
				emit_FeaturePackageMemberElement_FeatureKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PackageImport_ColonColonKeyword_2_0_1_0_or_FullStopKeyword_2_0_1_1.equals(syntax))
				emit_PackageImport_ColonColonKeyword_2_0_1_0_or_FullStopKeyword_2_0_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExpression_LeftParenthesisKeyword_4_0_a.equals(syntax))
				emit_PrimaryExpression_LeftParenthesisKeyword_4_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExpression_LeftParenthesisKeyword_4_0_p.equals(syntax))
				emit_PrimaryExpression_LeftParenthesisKeyword_4_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'is' | 'specializes'
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Name (ambiguity) ownedElement+=Generalization
	 */
	protected void emit_AssociationDeclaration_IsKeyword_3_0_0_or_SpecializesKeyword_3_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'end'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) direction=FeatureDirection
	 *     (rule start) (ambiguity) ownedMemberElement=NamedFeatureDefinition
	 *     ownedElement+=Comment (ambiguity) direction=FeatureDirection
	 *     ownedElement+=Comment (ambiguity) ownedMemberElement=NamedFeatureDefinition
	 *     visibility=VisibilityIndicator (ambiguity) direction=FeatureDirection
	 *     visibility=VisibilityIndicator (ambiguity) ownedMemberElement=NamedFeatureDefinition
	 */
	protected void emit_AssociationEndFeatureMember_EndKeyword_2_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'specializes' | 'is'
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Name (ambiguity) ownedElement+=Generalization
	 */
	protected void emit_ClassDeclaration_IsKeyword_3_0_0_or_SpecializesKeyword_3_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'is'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) sourceFeature=[Feature|QualifiedName]
	 */
	protected void emit_ConnectorDefinition_IsKeyword_0_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'feature'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) direction=FeatureDirection
	 *     (rule start) (ambiguity) ownedMemberElement=NamedFeatureDefinition
	 *     ownedElement+=Comment (ambiguity) direction=FeatureDirection
	 *     ownedElement+=Comment (ambiguity) ownedMemberElement=NamedFeatureDefinition
	 *     visibility=VisibilityIndicator (ambiguity) direction=FeatureDirection
	 *     visibility=VisibilityIndicator (ambiguity) ownedMemberElement=NamedFeatureDefinition
	 */
	protected void emit_FeatureClassMember_FeatureKeyword_2_0_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'feature'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ownedMemberElement=NamedFeatureDefinition
	 *     ownedElement+=Comment (ambiguity) ownedMemberElement=NamedFeatureDefinition
	 *     visibility=PackageElementVisibilityIndicator (ambiguity) ownedMemberElement=NamedFeatureDefinition
	 */
	protected void emit_FeaturePackageMemberElement_FeatureKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '::' | '.'
	 *
	 * This ambiguous syntax occurs at:
	 *     importedPackage=[Package|Name] (ambiguity) '*' ';' (rule end)
	 */
	protected void emit_PackageImport_ColonColonKeyword_2_0_1_0_or_FullStopKeyword_2_0_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '*' (rule start)
	 *     (rule start) (ambiguity) 'null' (rule start)
	 *     (rule start) (ambiguity) '{' '}' (rule start)
	 *     (rule start) (ambiguity) '{' element+=Expression
	 *     (rule start) (ambiguity) class=[Class|QualifiedName]
	 *     (rule start) (ambiguity) operator=UnaryOperator
	 *     (rule start) (ambiguity) referent=[Element|QualifiedName]
	 *     (rule start) (ambiguity) value=BOOLEAN_VALUE
	 *     (rule start) (ambiguity) value=NATURAL_VALUE
	 *     (rule start) (ambiguity) value=RealValue
	 *     (rule start) (ambiguity) value=STRING_VALUE
	 *     (rule start) (ambiguity) {OperatorExpression.operand+=}
	 *     (rule start) (ambiguity) {SequenceAccessExpression.primary=}
	 */
	protected void emit_PrimaryExpression_LeftParenthesisKeyword_4_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) operator=UnaryOperator
	 *     (rule start) (ambiguity) {OperatorExpression.operand+=}
	 *     (rule start) (ambiguity) {SequenceAccessExpression.primary=}
	 */
	protected void emit_PrimaryExpression_LeftParenthesisKeyword_4_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
