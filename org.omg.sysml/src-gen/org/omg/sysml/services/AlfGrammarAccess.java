/*
 * generated by Xtext 2.12.0
 */
package org.omg.sysml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AlfGrammarAccess extends AbstractGrammarElementFinder {
	
	public class UnitDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.UnitDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageUnitDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassUnitDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssociationUnitDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFeatureUnitDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///* UNITS */ UnitDefinition SysML::Package:
		//	PackageUnitDefinition
		//	| ClassUnitDefinition
		//	| AssociationUnitDefinition
		//	| FeatureUnitDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//PackageUnitDefinition | ClassUnitDefinition | AssociationUnitDefinition | FeatureUnitDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PackageUnitDefinition
		public RuleCall getPackageUnitDefinitionParserRuleCall_0() { return cPackageUnitDefinitionParserRuleCall_0; }
		
		//ClassUnitDefinition
		public RuleCall getClassUnitDefinitionParserRuleCall_1() { return cClassUnitDefinitionParserRuleCall_1; }
		
		//AssociationUnitDefinition
		public RuleCall getAssociationUnitDefinitionParserRuleCall_2() { return cAssociationUnitDefinitionParserRuleCall_2; }
		
		//FeatureUnitDefinition
		public RuleCall getFeatureUnitDefinitionParserRuleCall_3() { return cFeatureUnitDefinitionParserRuleCall_3; }
	}
	public class PackageUnitDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.PackageUnitDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPackageDefinitionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PackageUnitDefinition SysML::Package:
		//	UnitPrefix PackageDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix PackageDefinition
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//PackageDefinition
		public RuleCall getPackageDefinitionParserRuleCall_1() { return cPackageDefinitionParserRuleCall_1; }
	}
	public class ClassUnitDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.ClassUnitDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cClassDefinitionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ClassUnitDefinition SysML::Class:
		//	UnitPrefix ClassDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix ClassDefinition
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//ClassDefinition
		public RuleCall getClassDefinitionParserRuleCall_1() { return cClassDefinitionParserRuleCall_1; }
	}
	public class AssociationUnitDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.AssociationUnitDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAssociationDefinitionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//AssociationUnitDefinition SysML::Association:
		//	UnitPrefix AssociationDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix AssociationDefinition
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//AssociationDefinition
		public RuleCall getAssociationDefinitionParserRuleCall_1() { return cAssociationDefinitionParserRuleCall_1; }
	}
	public class FeatureUnitDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.FeatureUnitDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cFeatureBodyDefinitionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FeatureUnitDefinition SysML::Feature:
		//	UnitPrefix FeatureBodyDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix FeatureBodyDefinition
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//FeatureBodyDefinition
		public RuleCall getFeatureBodyDefinitionParserRuleCall_1() { return cFeatureBodyDefinitionParserRuleCall_1; }
	}
	public class UnitPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.UnitPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cOwnedImportAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cOwnedImportPackageImportParserRuleCall_0_0_0 = (RuleCall)cOwnedImportAssignment_0_0.eContents().get(0);
		private final Assignment cOwnedMembershipAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cOwnedMembershipElementImportParserRuleCall_0_1_0 = (RuleCall)cOwnedMembershipAssignment_0_1.eContents().get(0);
		private final Assignment cOwnedElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedElementCommentParserRuleCall_1_0 = (RuleCall)cOwnedElementAssignment_1.eContents().get(0);
		
		//fragment UnitPrefix returns SysML::Package:
		//	(ownedImport+=PackageImport
		//	| ownedMembership+=ElementImport)*
		//	ownedElement+=Comment*;
		@Override public ParserRule getRule() { return rule; }
		
		//(ownedImport+=PackageImport | ownedMembership+=ElementImport)* ownedElement+=Comment*
		public Group getGroup() { return cGroup; }
		
		//(ownedImport+=PackageImport | ownedMembership+=ElementImport)*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ownedImport+=PackageImport
		public Assignment getOwnedImportAssignment_0_0() { return cOwnedImportAssignment_0_0; }
		
		//PackageImport
		public RuleCall getOwnedImportPackageImportParserRuleCall_0_0_0() { return cOwnedImportPackageImportParserRuleCall_0_0_0; }
		
		//ownedMembership+=ElementImport
		public Assignment getOwnedMembershipAssignment_0_1() { return cOwnedMembershipAssignment_0_1; }
		
		//ElementImport
		public RuleCall getOwnedMembershipElementImportParserRuleCall_0_1_0() { return cOwnedMembershipElementImportParserRuleCall_0_1_0; }
		
		//ownedElement+=Comment*
		public Assignment getOwnedElementAssignment_1() { return cOwnedElementAssignment_1; }
		
		//Comment
		public RuleCall getOwnedElementCommentParserRuleCall_1_0() { return cOwnedElementCommentParserRuleCall_1_0; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.Comment");
		private final Assignment cBodyAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBodyDOCUMENTATION_COMMENTTerminalRuleCall_0 = (RuleCall)cBodyAssignment.eContents().get(0);
		
		///* COMMENTS */ Comment SysML::Comment:
		//	body=DOCUMENTATION_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//body=DOCUMENTATION_COMMENT
		public Assignment getBodyAssignment() { return cBodyAssignment; }
		
		//DOCUMENTATION_COMMENT
		public RuleCall getBodyDOCUMENTATION_COMMENTTerminalRuleCall_0() { return cBodyDOCUMENTATION_COMMENTTerminalRuleCall_0; }
	}
	public class PackageImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.PackageImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityPackageElementVisibilityIndicatorEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cImportedPackageAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final CrossReference cImportedPackagePackageCrossReference_2_0_0_0 = (CrossReference)cImportedPackageAssignment_2_0_0.eContents().get(0);
		private final RuleCall cImportedPackagePackageNameParserRuleCall_2_0_0_0_1 = (RuleCall)cImportedPackagePackageCrossReference_2_0_0_0.eContents().get(1);
		private final Alternatives cAlternatives_2_0_1 = (Alternatives)cGroup_2_0.eContents().get(1);
		private final Keyword cColonColonKeyword_2_0_1_0 = (Keyword)cAlternatives_2_0_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2_0_1_1 = (Keyword)cAlternatives_2_0_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cImportedPackageAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final CrossReference cImportedPackagePackageCrossReference_2_1_0_0 = (CrossReference)cImportedPackageAssignment_2_1_0.eContents().get(0);
		private final RuleCall cImportedPackagePackageColonQualifiedNameParserRuleCall_2_1_0_0_1 = (RuleCall)cImportedPackagePackageCrossReference_2_1_0_0.eContents().get(1);
		private final Keyword cColonColonKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Assignment cImportedPackageAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final CrossReference cImportedPackagePackageCrossReference_2_2_0_0 = (CrossReference)cImportedPackageAssignment_2_2_0.eContents().get(0);
		private final RuleCall cImportedPackagePackageDotQualifiedNameParserRuleCall_2_2_0_0_1 = (RuleCall)cImportedPackagePackageCrossReference_2_2_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Keyword cAsteriskKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///* IMPORTS */ PackageImport SysML::Import:
		//	visibility=PackageElementVisibilityIndicator?
		//	'import' (importedPackage=[SysML::Package|Name] ('::' | '.') '*'
		//	| importedPackage=[SysML::Package|ColonQualifiedName] '::' '*'
		//	| importedPackage=[SysML::Package|DotQualifiedName] '.' '*') ';';
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=PackageElementVisibilityIndicator? 'import' (importedPackage=[SysML::Package|Name] ('::' | '.') '*' |
		//importedPackage=[SysML::Package|ColonQualifiedName] '::' '*' | importedPackage=[SysML::Package|DotQualifiedName] '.'
		//'*') ';'
		public Group getGroup() { return cGroup; }
		
		//visibility=PackageElementVisibilityIndicator?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//PackageElementVisibilityIndicator
		public RuleCall getVisibilityPackageElementVisibilityIndicatorEnumRuleCall_0_0() { return cVisibilityPackageElementVisibilityIndicatorEnumRuleCall_0_0; }
		
		//'import'
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }
		
		//importedPackage=[SysML::Package|Name] ('::' | '.') '*' | importedPackage=[SysML::Package|ColonQualifiedName] '::' '*' |
		//importedPackage=[SysML::Package|DotQualifiedName] '.' '*'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//importedPackage=[SysML::Package|Name] ('::' | '.') '*'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//importedPackage=[SysML::Package|Name]
		public Assignment getImportedPackageAssignment_2_0_0() { return cImportedPackageAssignment_2_0_0; }
		
		//[SysML::Package|Name]
		public CrossReference getImportedPackagePackageCrossReference_2_0_0_0() { return cImportedPackagePackageCrossReference_2_0_0_0; }
		
		//Name
		public RuleCall getImportedPackagePackageNameParserRuleCall_2_0_0_0_1() { return cImportedPackagePackageNameParserRuleCall_2_0_0_0_1; }
		
		//'::' | '.'
		public Alternatives getAlternatives_2_0_1() { return cAlternatives_2_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_2_0_1_0() { return cColonColonKeyword_2_0_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0_1_1() { return cFullStopKeyword_2_0_1_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_0_2() { return cAsteriskKeyword_2_0_2; }
		
		//importedPackage=[SysML::Package|ColonQualifiedName] '::' '*'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//importedPackage=[SysML::Package|ColonQualifiedName]
		public Assignment getImportedPackageAssignment_2_1_0() { return cImportedPackageAssignment_2_1_0; }
		
		//[SysML::Package|ColonQualifiedName]
		public CrossReference getImportedPackagePackageCrossReference_2_1_0_0() { return cImportedPackagePackageCrossReference_2_1_0_0; }
		
		//ColonQualifiedName
		public RuleCall getImportedPackagePackageColonQualifiedNameParserRuleCall_2_1_0_0_1() { return cImportedPackagePackageColonQualifiedNameParserRuleCall_2_1_0_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_2_1_1() { return cColonColonKeyword_2_1_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_1_2() { return cAsteriskKeyword_2_1_2; }
		
		//importedPackage=[SysML::Package|DotQualifiedName] '.' '*'
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//importedPackage=[SysML::Package|DotQualifiedName]
		public Assignment getImportedPackageAssignment_2_2_0() { return cImportedPackageAssignment_2_2_0; }
		
		//[SysML::Package|DotQualifiedName]
		public CrossReference getImportedPackagePackageCrossReference_2_2_0_0() { return cImportedPackagePackageCrossReference_2_2_0_0; }
		
		//DotQualifiedName
		public RuleCall getImportedPackagePackageDotQualifiedNameParserRuleCall_2_2_0_0_1() { return cImportedPackagePackageDotQualifiedNameParserRuleCall_2_2_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2_2_1() { return cFullStopKeyword_2_2_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_2_2() { return cAsteriskKeyword_2_2_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ElementImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.ElementImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityPackageElementVisibilityIndicatorEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMemberElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMemberElementElementCrossReference_2_0 = (CrossReference)cMemberElementAssignment_2.eContents().get(0);
		private final RuleCall cMemberElementElementQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cMemberElementElementCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMemberNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMemberNameNameParserRuleCall_3_1_0 = (RuleCall)cMemberNameAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ElementImport SysML::Membership:
		//	visibility=PackageElementVisibilityIndicator?
		//	'import' memberElement=[SysML::Element|QualifiedName] ('as' memberName=Name)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=PackageElementVisibilityIndicator? 'import' memberElement=[SysML::Element|QualifiedName] ('as'
		//memberName=Name)? ';'
		public Group getGroup() { return cGroup; }
		
		//visibility=PackageElementVisibilityIndicator?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//PackageElementVisibilityIndicator
		public RuleCall getVisibilityPackageElementVisibilityIndicatorEnumRuleCall_0_0() { return cVisibilityPackageElementVisibilityIndicatorEnumRuleCall_0_0; }
		
		//'import'
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }
		
		//memberElement=[SysML::Element|QualifiedName]
		public Assignment getMemberElementAssignment_2() { return cMemberElementAssignment_2; }
		
		//[SysML::Element|QualifiedName]
		public CrossReference getMemberElementElementCrossReference_2_0() { return cMemberElementElementCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getMemberElementElementQualifiedNameParserRuleCall_2_0_1() { return cMemberElementElementQualifiedNameParserRuleCall_2_0_1; }
		
		//('as' memberName=Name)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'as'
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }
		
		//memberName=Name
		public Assignment getMemberNameAssignment_3_1() { return cMemberNameAssignment_3_1; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_3_1_0() { return cMemberNameNameParserRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class NonFeatureDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.NonFeatureDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageDefinitionOrStubParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassDefinitionOrStubParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssociationDefinitionOrStubParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///* PACKAGES */ NonFeatureDefinition SysML::Package:
		//	PackageDefinitionOrStub | ClassDefinitionOrStub | AssociationDefinitionOrStub;
		@Override public ParserRule getRule() { return rule; }
		
		//PackageDefinitionOrStub | ClassDefinitionOrStub | AssociationDefinitionOrStub
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PackageDefinitionOrStub
		public RuleCall getPackageDefinitionOrStubParserRuleCall_0() { return cPackageDefinitionOrStubParserRuleCall_0; }
		
		//ClassDefinitionOrStub
		public RuleCall getClassDefinitionOrStubParserRuleCall_1() { return cClassDefinitionOrStubParserRuleCall_1; }
		
		//AssociationDefinitionOrStub
		public RuleCall getAssociationDefinitionOrStubParserRuleCall_2() { return cAssociationDefinitionOrStubParserRuleCall_2; }
	}
	public class PackageDefinitionOrStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.PackageDefinitionOrStub");
		private final RuleCall cPackageDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PackageDefinitionOrStub SysML::Package:
		//	PackageDefinition
		//	//	'package' name = Name ( isStub ?= ';' | '{' ( ownedMembership += PackageMember )* '}' )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PackageDefinition
		public RuleCall getPackageDefinitionParserRuleCall() { return cPackageDefinitionParserRuleCall; }
	}
	public class PackageDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.PackageDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cOwnedMembershipAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cOwnedMembershipPackageMemberParserRuleCall_3_0_0 = (RuleCall)cOwnedMembershipAssignment_3_0.eContents().get(0);
		private final Assignment cOwnedImportAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cOwnedImportPackageImportParserRuleCall_3_1_0 = (RuleCall)cOwnedImportAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//fragment PackageDefinition returns SysML::Package:
		//	'package' name=Name '{' (ownedMembership+=PackageMember | ownedImport+=PackageImport)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=Name '{' (ownedMembership+=PackageMember | ownedImport+=PackageImport)* '}'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(ownedMembership+=PackageMember | ownedImport+=PackageImport)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//ownedMembership+=PackageMember
		public Assignment getOwnedMembershipAssignment_3_0() { return cOwnedMembershipAssignment_3_0; }
		
		//PackageMember
		public RuleCall getOwnedMembershipPackageMemberParserRuleCall_3_0_0() { return cOwnedMembershipPackageMemberParserRuleCall_3_0_0; }
		
		//ownedImport+=PackageImport
		public Assignment getOwnedImportAssignment_3_1() { return cOwnedImportAssignment_3_1; }
		
		//PackageImport
		public RuleCall getOwnedImportPackageImportParserRuleCall_3_1_0() { return cOwnedImportPackageImportParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PackageMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.PackageMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedElementCommentParserRuleCall_0_0 = (RuleCall)cOwnedElementAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityPackageElementVisibilityIndicatorEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cNonFeatureMemberElementParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cFeaturePackageMemberElementParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		///* PACKAGE MEMBERSHIPS */ PackageMember SysML::Membership:
		//	ownedElement+=Comment*
		//	//  ( annotation += StereotypeAnnotation )*
		//	visibility=PackageElementVisibilityIndicator? (NonFeatureMemberElement
		//	| FeaturePackageMemberElement);
		@Override public ParserRule getRule() { return rule; }
		
		//ownedElement+=Comment* //  ( annotation += StereotypeAnnotation )*
		//visibility=PackageElementVisibilityIndicator? (NonFeatureMemberElement | FeaturePackageMemberElement)
		public Group getGroup() { return cGroup; }
		
		//ownedElement+=Comment*
		public Assignment getOwnedElementAssignment_0() { return cOwnedElementAssignment_0; }
		
		//Comment
		public RuleCall getOwnedElementCommentParserRuleCall_0_0() { return cOwnedElementCommentParserRuleCall_0_0; }
		
		////  ( annotation += StereotypeAnnotation )*
		//visibility=PackageElementVisibilityIndicator?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//PackageElementVisibilityIndicator
		public RuleCall getVisibilityPackageElementVisibilityIndicatorEnumRuleCall_1_0() { return cVisibilityPackageElementVisibilityIndicatorEnumRuleCall_1_0; }
		
		//NonFeatureMemberElement | FeaturePackageMemberElement
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//NonFeatureMemberElement
		public RuleCall getNonFeatureMemberElementParserRuleCall_2_0() { return cNonFeatureMemberElementParserRuleCall_2_0; }
		
		//FeaturePackageMemberElement
		public RuleCall getFeaturePackageMemberElementParserRuleCall_2_1() { return cFeaturePackageMemberElementParserRuleCall_2_1; }
	}
	public class NonFeatureMemberElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.NonFeatureMemberElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOwnedMemberElementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOwnedMemberElementNonFeatureDefinitionParserRuleCall_0_0 = (RuleCall)cOwnedMemberElementAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPackageKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMemberNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMemberNameNameParserRuleCall_1_1_0 = (RuleCall)cMemberNameAssignment_1_1.eContents().get(0);
		private final Keyword cIsKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cMemberElementAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cMemberElementPackageCrossReference_1_3_0 = (CrossReference)cMemberElementAssignment_1_3.eContents().get(0);
		private final RuleCall cMemberElementPackageQualifiedNameParserRuleCall_1_3_0_1 = (RuleCall)cMemberElementPackageCrossReference_1_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cClassKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMemberNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMemberNameNameParserRuleCall_2_1_0 = (RuleCall)cMemberNameAssignment_2_1.eContents().get(0);
		private final Keyword cIsKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cMemberElementAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final CrossReference cMemberElementClassCrossReference_2_3_0 = (CrossReference)cMemberElementAssignment_2_3.eContents().get(0);
		private final RuleCall cMemberElementClassQualifiedNameParserRuleCall_2_3_0_1 = (RuleCall)cMemberElementClassCrossReference_2_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cAssocKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMemberNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMemberNameNameParserRuleCall_3_1_0 = (RuleCall)cMemberNameAssignment_3_1.eContents().get(0);
		private final Keyword cIsKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cMemberElementAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final CrossReference cMemberElementAssociationCrossReference_3_3_0 = (CrossReference)cMemberElementAssignment_3_3.eContents().get(0);
		private final RuleCall cMemberElementAssociationQualifiedNameParserRuleCall_3_3_0_1 = (RuleCall)cMemberElementAssociationCrossReference_3_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cImportKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMemberElementAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cMemberElementElementCrossReference_4_1_0 = (CrossReference)cMemberElementAssignment_4_1.eContents().get(0);
		private final RuleCall cMemberElementElementQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cMemberElementElementCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cAsKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cMemberNameAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cMemberNameNameParserRuleCall_4_2_1_0 = (RuleCall)cMemberNameAssignment_4_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//fragment NonFeatureMemberElement returns SysML::Membership:
		//	ownedMemberElement=NonFeatureDefinition
		//	| 'package' memberName=Name? 'is' memberElement=[SysML::Package|QualifiedName] ';'
		//	| 'class' memberName=Name? 'is' memberElement=[SysML::Class|QualifiedName] ';'
		//	| 'assoc' memberName=Name? 'is' memberElement=[SysML::Association|QualifiedName] ';'
		//	| 'import' memberElement=[SysML::Element|QualifiedName] ('as' memberName=Name)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberElement=NonFeatureDefinition | 'package' memberName=Name? 'is' memberElement=[SysML::Package|QualifiedName]
		//';' | 'class' memberName=Name? 'is' memberElement=[SysML::Class|QualifiedName] ';' | 'assoc' memberName=Name? 'is'
		//memberElement=[SysML::Association|QualifiedName] ';' | 'import' memberElement=[SysML::Element|QualifiedName] ('as'
		//memberName=Name)? ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ownedMemberElement=NonFeatureDefinition
		public Assignment getOwnedMemberElementAssignment_0() { return cOwnedMemberElementAssignment_0; }
		
		//NonFeatureDefinition
		public RuleCall getOwnedMemberElementNonFeatureDefinitionParserRuleCall_0_0() { return cOwnedMemberElementNonFeatureDefinitionParserRuleCall_0_0; }
		
		//'package' memberName=Name? 'is' memberElement=[SysML::Package|QualifiedName] ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//'package'
		public Keyword getPackageKeyword_1_0() { return cPackageKeyword_1_0; }
		
		//memberName=Name?
		public Assignment getMemberNameAssignment_1_1() { return cMemberNameAssignment_1_1; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_1_1_0() { return cMemberNameNameParserRuleCall_1_1_0; }
		
		//'is'
		public Keyword getIsKeyword_1_2() { return cIsKeyword_1_2; }
		
		//memberElement=[SysML::Package|QualifiedName]
		public Assignment getMemberElementAssignment_1_3() { return cMemberElementAssignment_1_3; }
		
		//[SysML::Package|QualifiedName]
		public CrossReference getMemberElementPackageCrossReference_1_3_0() { return cMemberElementPackageCrossReference_1_3_0; }
		
		//QualifiedName
		public RuleCall getMemberElementPackageQualifiedNameParserRuleCall_1_3_0_1() { return cMemberElementPackageQualifiedNameParserRuleCall_1_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_4() { return cSemicolonKeyword_1_4; }
		
		//'class' memberName=Name? 'is' memberElement=[SysML::Class|QualifiedName] ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//'class'
		public Keyword getClassKeyword_2_0() { return cClassKeyword_2_0; }
		
		//memberName=Name?
		public Assignment getMemberNameAssignment_2_1() { return cMemberNameAssignment_2_1; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_2_1_0() { return cMemberNameNameParserRuleCall_2_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2_2() { return cIsKeyword_2_2; }
		
		//memberElement=[SysML::Class|QualifiedName]
		public Assignment getMemberElementAssignment_2_3() { return cMemberElementAssignment_2_3; }
		
		//[SysML::Class|QualifiedName]
		public CrossReference getMemberElementClassCrossReference_2_3_0() { return cMemberElementClassCrossReference_2_3_0; }
		
		//QualifiedName
		public RuleCall getMemberElementClassQualifiedNameParserRuleCall_2_3_0_1() { return cMemberElementClassQualifiedNameParserRuleCall_2_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2_4() { return cSemicolonKeyword_2_4; }
		
		//'assoc' memberName=Name? 'is' memberElement=[SysML::Association|QualifiedName] ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//'assoc'
		public Keyword getAssocKeyword_3_0() { return cAssocKeyword_3_0; }
		
		//memberName=Name?
		public Assignment getMemberNameAssignment_3_1() { return cMemberNameAssignment_3_1; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_3_1_0() { return cMemberNameNameParserRuleCall_3_1_0; }
		
		//'is'
		public Keyword getIsKeyword_3_2() { return cIsKeyword_3_2; }
		
		//memberElement=[SysML::Association|QualifiedName]
		public Assignment getMemberElementAssignment_3_3() { return cMemberElementAssignment_3_3; }
		
		//[SysML::Association|QualifiedName]
		public CrossReference getMemberElementAssociationCrossReference_3_3_0() { return cMemberElementAssociationCrossReference_3_3_0; }
		
		//QualifiedName
		public RuleCall getMemberElementAssociationQualifiedNameParserRuleCall_3_3_0_1() { return cMemberElementAssociationQualifiedNameParserRuleCall_3_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3_4() { return cSemicolonKeyword_3_4; }
		
		//'import' memberElement=[SysML::Element|QualifiedName] ('as' memberName=Name)? ';'
		public Group getGroup_4() { return cGroup_4; }
		
		//'import'
		public Keyword getImportKeyword_4_0() { return cImportKeyword_4_0; }
		
		//memberElement=[SysML::Element|QualifiedName]
		public Assignment getMemberElementAssignment_4_1() { return cMemberElementAssignment_4_1; }
		
		//[SysML::Element|QualifiedName]
		public CrossReference getMemberElementElementCrossReference_4_1_0() { return cMemberElementElementCrossReference_4_1_0; }
		
		//QualifiedName
		public RuleCall getMemberElementElementQualifiedNameParserRuleCall_4_1_0_1() { return cMemberElementElementQualifiedNameParserRuleCall_4_1_0_1; }
		
		//('as' memberName=Name)?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'as'
		public Keyword getAsKeyword_4_2_0() { return cAsKeyword_4_2_0; }
		
		//memberName=Name
		public Assignment getMemberNameAssignment_4_2_1() { return cMemberNameAssignment_4_2_1; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_4_2_1_0() { return cMemberNameNameParserRuleCall_4_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_3() { return cSemicolonKeyword_4_3; }
	}
	public class FeaturePackageMemberElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.FeaturePackageMemberElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFeatureKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cOwnedMemberElementAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOwnedMemberElementNamedFeatureDefinitionParserRuleCall_0_1_0 = (RuleCall)cOwnedMemberElementAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFeatureKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedMemberElementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedMemberElementUnnamedFeatureDefinitionParserRuleCall_1_1_0 = (RuleCall)cOwnedMemberElementAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cAlternatives_2_0.eContents().get(0);
		private final Keyword cFeatureKeyword_2_0_0_0 = (Keyword)cGroup_2_0_0.eContents().get(0);
		private final Assignment cMemberNameAssignment_2_0_0_1 = (Assignment)cGroup_2_0_0.eContents().get(1);
		private final RuleCall cMemberNameNameParserRuleCall_2_0_0_1_0 = (RuleCall)cMemberNameAssignment_2_0_0_1.eContents().get(0);
		private final Assignment cMemberNameAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cMemberNameNameParserRuleCall_2_0_1_0 = (RuleCall)cMemberNameAssignment_2_0_1.eContents().get(0);
		private final Keyword cIsKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMemberElementAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cMemberElementFeatureCrossReference_2_2_0 = (CrossReference)cMemberElementAssignment_2_2.eContents().get(0);
		private final RuleCall cMemberElementFeatureQualifiedNameParserRuleCall_2_2_0_1 = (RuleCall)cMemberElementFeatureCrossReference_2_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		////NonFeatureMemberKind :
		////	'package' | 'class' | 'assoc'
		////;
		//fragment FeaturePackageMemberElement returns SysML::Membership:
		//	'feature'? ownedMemberElement=NamedFeatureDefinition
		//	| 'feature' ownedMemberElement=UnnamedFeatureDefinition
		//	| ('feature' memberName=Name? | memberName=Name) 'is' memberElement=[SysML::Feature|QualifiedName] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'feature'? ownedMemberElement=NamedFeatureDefinition | 'feature' ownedMemberElement=UnnamedFeatureDefinition |
		//('feature' memberName=Name? | memberName=Name) 'is' memberElement=[SysML::Feature|QualifiedName] ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'feature'? ownedMemberElement=NamedFeatureDefinition
		public Group getGroup_0() { return cGroup_0; }
		
		//'feature'?
		public Keyword getFeatureKeyword_0_0() { return cFeatureKeyword_0_0; }
		
		//ownedMemberElement=NamedFeatureDefinition
		public Assignment getOwnedMemberElementAssignment_0_1() { return cOwnedMemberElementAssignment_0_1; }
		
		//NamedFeatureDefinition
		public RuleCall getOwnedMemberElementNamedFeatureDefinitionParserRuleCall_0_1_0() { return cOwnedMemberElementNamedFeatureDefinitionParserRuleCall_0_1_0; }
		
		//'feature' ownedMemberElement=UnnamedFeatureDefinition
		public Group getGroup_1() { return cGroup_1; }
		
		//'feature'
		public Keyword getFeatureKeyword_1_0() { return cFeatureKeyword_1_0; }
		
		//ownedMemberElement=UnnamedFeatureDefinition
		public Assignment getOwnedMemberElementAssignment_1_1() { return cOwnedMemberElementAssignment_1_1; }
		
		//UnnamedFeatureDefinition
		public RuleCall getOwnedMemberElementUnnamedFeatureDefinitionParserRuleCall_1_1_0() { return cOwnedMemberElementUnnamedFeatureDefinitionParserRuleCall_1_1_0; }
		
		//('feature' memberName=Name? | memberName=Name) 'is' memberElement=[SysML::Feature|QualifiedName] ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//'feature' memberName=Name? | memberName=Name
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//'feature' memberName=Name?
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }
		
		//'feature'
		public Keyword getFeatureKeyword_2_0_0_0() { return cFeatureKeyword_2_0_0_0; }
		
		//memberName=Name?
		public Assignment getMemberNameAssignment_2_0_0_1() { return cMemberNameAssignment_2_0_0_1; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_2_0_0_1_0() { return cMemberNameNameParserRuleCall_2_0_0_1_0; }
		
		//memberName=Name
		public Assignment getMemberNameAssignment_2_0_1() { return cMemberNameAssignment_2_0_1; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_2_0_1_0() { return cMemberNameNameParserRuleCall_2_0_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2_1() { return cIsKeyword_2_1; }
		
		//memberElement=[SysML::Feature|QualifiedName]
		public Assignment getMemberElementAssignment_2_2() { return cMemberElementAssignment_2_2; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getMemberElementFeatureCrossReference_2_2_0() { return cMemberElementFeatureCrossReference_2_2_0; }
		
		//QualifiedName
		public RuleCall getMemberElementFeatureQualifiedNameParserRuleCall_2_2_0_1() { return cMemberElementFeatureQualifiedNameParserRuleCall_2_2_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2_3() { return cSemicolonKeyword_2_3; }
	}
	public class ClassDefinitionOrStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.ClassDefinitionOrStub");
		private final RuleCall cClassDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* CLASSES */ ClassDefinitionOrStub SysML::Class:
		//	ClassDefinition
		//	//	ClassDeclaration ( isStub ?= ';' | ClassBody '}' )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ClassDefinition
		public RuleCall getClassDefinitionParserRuleCall() { return cClassDefinitionParserRuleCall; }
	}
	public class ClassDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.ClassDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cClassBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fragment ClassDefinition returns SysML::Class:
		//	ClassDeclaration ClassBody;
		@Override public ParserRule getRule() { return rule; }
		
		//ClassDeclaration ClassBody
		public Group getGroup() { return cGroup; }
		
		//ClassDeclaration
		public RuleCall getClassDeclarationParserRuleCall_0() { return cClassDeclarationParserRuleCall_0; }
		
		//ClassBody
		public RuleCall getClassBodyParserRuleCall_1() { return cClassBodyParserRuleCall_1; }
	}
	public class ClassDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.ClassDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSpecializesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedElementAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedElementGeneralizationParserRuleCall_3_1_0 = (RuleCall)cOwnedElementAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cOwnedElementAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cOwnedElementGeneralizationParserRuleCall_3_2_1_0 = (RuleCall)cOwnedElementAssignment_3_2_1.eContents().get(0);
		
		//fragment ClassDeclaration returns SysML::Class:
		//	isAbstract?='abstract'? 'class' name=Name ('specializes' ownedElement+=Generalization (','
		//	ownedElement+=Generalization)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'class' name=Name ('specializes' ownedElement+=Generalization (','
		//ownedElement+=Generalization)*)?
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=Name
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }
		
		//('specializes' ownedElement+=Generalization (',' ownedElement+=Generalization)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'specializes'
		public Keyword getSpecializesKeyword_3_0() { return cSpecializesKeyword_3_0; }
		
		//ownedElement+=Generalization
		public Assignment getOwnedElementAssignment_3_1() { return cOwnedElementAssignment_3_1; }
		
		//Generalization
		public RuleCall getOwnedElementGeneralizationParserRuleCall_3_1_0() { return cOwnedElementGeneralizationParserRuleCall_3_1_0; }
		
		//(',' ownedElement+=Generalization)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//ownedElement+=Generalization
		public Assignment getOwnedElementAssignment_3_2_1() { return cOwnedElementAssignment_3_2_1; }
		
		//Generalization
		public RuleCall getOwnedElementGeneralizationParserRuleCall_3_2_1_0() { return cOwnedElementGeneralizationParserRuleCall_3_2_1_0; }
	}
	public class ClassBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.ClassBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOwnedMembershipAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cOwnedMembershipClassMemberParserRuleCall_1_0_0 = (RuleCall)cOwnedMembershipAssignment_1_0.eContents().get(0);
		private final Assignment cOwnedImportAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cOwnedImportPackageImportParserRuleCall_1_1_0 = (RuleCall)cOwnedImportAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//fragment ClassBody returns SysML::Class:
		//	'{' (ownedMembership+=ClassMember | ownedImport+=PackageImport)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' (ownedMembership+=ClassMember | ownedImport+=PackageImport)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(ownedMembership+=ClassMember | ownedImport+=PackageImport)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ownedMembership+=ClassMember
		public Assignment getOwnedMembershipAssignment_1_0() { return cOwnedMembershipAssignment_1_0; }
		
		//ClassMember
		public RuleCall getOwnedMembershipClassMemberParserRuleCall_1_0_0() { return cOwnedMembershipClassMemberParserRuleCall_1_0_0; }
		
		//ownedImport+=PackageImport
		public Assignment getOwnedImportAssignment_1_1() { return cOwnedImportAssignment_1_1; }
		
		//PackageImport
		public RuleCall getOwnedImportPackageImportParserRuleCall_1_1_0() { return cOwnedImportPackageImportParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class GeneralizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.Generalization");
		private final Assignment cGeneralAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cGeneralClassCrossReference_0 = (CrossReference)cGeneralAssignment.eContents().get(0);
		private final RuleCall cGeneralClassQualifiedNameParserRuleCall_0_1 = (RuleCall)cGeneralClassCrossReference_0.eContents().get(1);
		
		//Generalization SysML::Generalization:
		//	general=[SysML::Class|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//general=[SysML::Class|QualifiedName]
		public Assignment getGeneralAssignment() { return cGeneralAssignment; }
		
		//[SysML::Class|QualifiedName]
		public CrossReference getGeneralClassCrossReference_0() { return cGeneralClassCrossReference_0; }
		
		//QualifiedName
		public RuleCall getGeneralClassQualifiedNameParserRuleCall_0_1() { return cGeneralClassQualifiedNameParserRuleCall_0_1; }
	}
	public class ClassMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.ClassMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNonFeatureClassMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureClassMemberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* CLASS MEMBERSHIPS */ ClassMember SysML::Membership:
		//	NonFeatureClassMember | FeatureClassMember;
		@Override public ParserRule getRule() { return rule; }
		
		//NonFeatureClassMember | FeatureClassMember
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NonFeatureClassMember
		public RuleCall getNonFeatureClassMemberParserRuleCall_0() { return cNonFeatureClassMemberParserRuleCall_0; }
		
		//FeatureClassMember
		public RuleCall getFeatureClassMemberParserRuleCall_1() { return cFeatureClassMemberParserRuleCall_1; }
	}
	public class NonFeatureClassMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.NonFeatureClassMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedElementCommentParserRuleCall_0_0 = (RuleCall)cOwnedElementAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityIndicatorEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final RuleCall cNonFeatureMemberElementParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//NonFeatureClassMember SysML::Membership:
		//	ownedElement+=Comment*
		//	//  ( annotation += StereotypeAnnotation )*
		//	visibility=VisibilityIndicator?
		//	NonFeatureMemberElement;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedElement+=Comment* //  ( annotation += StereotypeAnnotation )*
		//visibility=VisibilityIndicator? NonFeatureMemberElement
		public Group getGroup() { return cGroup; }
		
		//ownedElement+=Comment*
		public Assignment getOwnedElementAssignment_0() { return cOwnedElementAssignment_0; }
		
		//Comment
		public RuleCall getOwnedElementCommentParserRuleCall_0_0() { return cOwnedElementCommentParserRuleCall_0_0; }
		
		////  ( annotation += StereotypeAnnotation )*
		//visibility=VisibilityIndicator?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//VisibilityIndicator
		public RuleCall getVisibilityVisibilityIndicatorEnumRuleCall_1_0() { return cVisibilityVisibilityIndicatorEnumRuleCall_1_0; }
		
		//NonFeatureMemberElement
		public RuleCall getNonFeatureMemberElementParserRuleCall_2() { return cNonFeatureMemberElementParserRuleCall_2; }
	}
	public class FeatureClassMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.FeatureClassMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedElementCommentParserRuleCall_0_0 = (RuleCall)cOwnedElementAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityIndicatorEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cFeatureMemberElementParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cDirectionAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cDirectionFeatureDirectionEnumRuleCall_2_1_0_0 = (RuleCall)cDirectionAssignment_2_1_0.eContents().get(0);
		private final Assignment cOwnedMemberElementAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOwnedMemberElementNamedFeatureDefinitionParserRuleCall_2_1_1_0 = (RuleCall)cOwnedMemberElementAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Assignment cMemberNameAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cMemberNameNameParserRuleCall_2_2_0_0 = (RuleCall)cMemberNameAssignment_2_2_0.eContents().get(0);
		private final Keyword cIsKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Assignment cMemberElementAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final CrossReference cMemberElementFeatureCrossReference_2_2_2_0 = (CrossReference)cMemberElementAssignment_2_2_2.eContents().get(0);
		private final RuleCall cMemberElementFeatureQualifiedNameParserRuleCall_2_2_2_0_1 = (RuleCall)cMemberElementFeatureCrossReference_2_2_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_2_3 = (Keyword)cGroup_2_2.eContents().get(3);
		
		//FeatureClassMember SysML::FeatureMembership:
		//	ownedElement+=Comment*
		//	//  ( annotation += StereotypeAnnotation )*
		//	visibility=VisibilityIndicator? (FeatureMemberElement
		//	// These alternatives are provided for legacy Alf backwards compatibility.	
		//	| direction=FeatureDirection? ownedMemberElement=NamedFeatureDefinition
		//	| memberName=Name 'is' memberElement=[SysML::Feature|QualifiedName] ';');
		@Override public ParserRule getRule() { return rule; }
		
		//ownedElement+=Comment* //  ( annotation += StereotypeAnnotation )*
		//visibility=VisibilityIndicator? (FeatureMemberElement // These alternatives are provided for legacy Alf backwards compatibility.	
		//| direction=FeatureDirection? ownedMemberElement=NamedFeatureDefinition | memberName=Name 'is'
		//memberElement=[SysML::Feature|QualifiedName] ';')
		public Group getGroup() { return cGroup; }
		
		//ownedElement+=Comment*
		public Assignment getOwnedElementAssignment_0() { return cOwnedElementAssignment_0; }
		
		//Comment
		public RuleCall getOwnedElementCommentParserRuleCall_0_0() { return cOwnedElementCommentParserRuleCall_0_0; }
		
		////  ( annotation += StereotypeAnnotation )*
		//visibility=VisibilityIndicator?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//VisibilityIndicator
		public RuleCall getVisibilityVisibilityIndicatorEnumRuleCall_1_0() { return cVisibilityVisibilityIndicatorEnumRuleCall_1_0; }
		
		//FeatureMemberElement // These alternatives are provided for legacy Alf backwards compatibility.	
		//| direction=FeatureDirection? ownedMemberElement=NamedFeatureDefinition | memberName=Name 'is'
		//memberElement=[SysML::Feature|QualifiedName] ';'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//FeatureMemberElement
		public RuleCall getFeatureMemberElementParserRuleCall_2_0() { return cFeatureMemberElementParserRuleCall_2_0; }
		
		//direction=FeatureDirection? ownedMemberElement=NamedFeatureDefinition
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//direction=FeatureDirection?
		public Assignment getDirectionAssignment_2_1_0() { return cDirectionAssignment_2_1_0; }
		
		//FeatureDirection
		public RuleCall getDirectionFeatureDirectionEnumRuleCall_2_1_0_0() { return cDirectionFeatureDirectionEnumRuleCall_2_1_0_0; }
		
		//ownedMemberElement=NamedFeatureDefinition
		public Assignment getOwnedMemberElementAssignment_2_1_1() { return cOwnedMemberElementAssignment_2_1_1; }
		
		//NamedFeatureDefinition
		public RuleCall getOwnedMemberElementNamedFeatureDefinitionParserRuleCall_2_1_1_0() { return cOwnedMemberElementNamedFeatureDefinitionParserRuleCall_2_1_1_0; }
		
		//memberName=Name 'is' memberElement=[SysML::Feature|QualifiedName] ';'
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//memberName=Name
		public Assignment getMemberNameAssignment_2_2_0() { return cMemberNameAssignment_2_2_0; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_2_2_0_0() { return cMemberNameNameParserRuleCall_2_2_0_0; }
		
		//'is'
		public Keyword getIsKeyword_2_2_1() { return cIsKeyword_2_2_1; }
		
		//memberElement=[SysML::Feature|QualifiedName]
		public Assignment getMemberElementAssignment_2_2_2() { return cMemberElementAssignment_2_2_2; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getMemberElementFeatureCrossReference_2_2_2_0() { return cMemberElementFeatureCrossReference_2_2_2_0; }
		
		//QualifiedName
		public RuleCall getMemberElementFeatureQualifiedNameParserRuleCall_2_2_2_0_1() { return cMemberElementFeatureQualifiedNameParserRuleCall_2_2_2_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2_2_3() { return cSemicolonKeyword_2_2_3; }
	}
	public class FeatureMemberElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.FeatureMemberElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cFeatureKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Assignment cIsCompositeAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final Keyword cIsCompositePartKeyword_0_0_1_0 = (Keyword)cIsCompositeAssignment_0_0_1.eContents().get(0);
		private final Assignment cIsPortAssignment_0_0_2 = (Assignment)cAlternatives_0_0.eContents().get(2);
		private final Keyword cIsPortPortKeyword_0_0_2_0 = (Keyword)cIsPortAssignment_0_0_2.eContents().get(0);
		private final Assignment cDirectionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDirectionFeatureDirectionEnumRuleCall_0_1_0 = (RuleCall)cDirectionAssignment_0_1.eContents().get(0);
		private final Assignment cOwnedMemberElementAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOwnedMemberElementFeatureDefinitionParserRuleCall_0_2_0 = (RuleCall)cOwnedMemberElementAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cFeatureKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Assignment cIsCompositeAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cIsCompositePartKeyword_1_0_1_0 = (Keyword)cIsCompositeAssignment_1_0_1.eContents().get(0);
		private final Assignment cMemberNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMemberNameNameParserRuleCall_1_1_0 = (RuleCall)cMemberNameAssignment_1_1.eContents().get(0);
		private final Keyword cIsKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cMemberElementAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cMemberElementFeatureCrossReference_1_3_0 = (CrossReference)cMemberElementAssignment_1_3.eContents().get(0);
		private final RuleCall cMemberElementFeatureQualifiedNameParserRuleCall_1_3_0_1 = (RuleCall)cMemberElementFeatureCrossReference_1_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cConnectorKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedMemberElementAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedMemberElementConnectorDefinitionParserRuleCall_2_1_0 = (RuleCall)cOwnedMemberElementAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cConnectorKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMemberNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMemberNameNameParserRuleCall_3_1_0 = (RuleCall)cMemberNameAssignment_3_1.eContents().get(0);
		private final Keyword cIsKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cMemberElementAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final CrossReference cMemberElementConnectorCrossReference_3_3_0 = (CrossReference)cMemberElementAssignment_3_3.eContents().get(0);
		private final RuleCall cMemberElementConnectorQualifiedNameParserRuleCall_3_3_0_1 = (RuleCall)cMemberElementConnectorCrossReference_3_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//fragment FeatureMemberElement returns SysML::FeatureMembership:
		//	('feature' | isComposite?='part' | isPort?='port') direction=FeatureDirection? ownedMemberElement=FeatureDefinition
		//	| ('feature' | isComposite?='part') memberName=Name? 'is' memberElement=[SysML::Feature|QualifiedName] ';'
		//	| 'connector' ownedMemberElement=ConnectorDefinition
		//	| 'connector' memberName=Name? 'is' memberElement=[SysML::Connector|QualifiedName] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//('feature' | isComposite?='part' | isPort?='port') direction=FeatureDirection? ownedMemberElement=FeatureDefinition |
		//('feature' | isComposite?='part') memberName=Name? 'is' memberElement=[SysML::Feature|QualifiedName] ';' | 'connector'
		//ownedMemberElement=ConnectorDefinition | 'connector' memberName=Name? 'is'
		//memberElement=[SysML::Connector|QualifiedName] ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('feature' | isComposite?='part' | isPort?='port') direction=FeatureDirection? ownedMemberElement=FeatureDefinition
		public Group getGroup_0() { return cGroup_0; }
		
		//'feature' | isComposite?='part' | isPort?='port'
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//'feature'
		public Keyword getFeatureKeyword_0_0_0() { return cFeatureKeyword_0_0_0; }
		
		//isComposite?='part'
		public Assignment getIsCompositeAssignment_0_0_1() { return cIsCompositeAssignment_0_0_1; }
		
		//'part'
		public Keyword getIsCompositePartKeyword_0_0_1_0() { return cIsCompositePartKeyword_0_0_1_0; }
		
		//isPort?='port'
		public Assignment getIsPortAssignment_0_0_2() { return cIsPortAssignment_0_0_2; }
		
		//'port'
		public Keyword getIsPortPortKeyword_0_0_2_0() { return cIsPortPortKeyword_0_0_2_0; }
		
		//direction=FeatureDirection?
		public Assignment getDirectionAssignment_0_1() { return cDirectionAssignment_0_1; }
		
		//FeatureDirection
		public RuleCall getDirectionFeatureDirectionEnumRuleCall_0_1_0() { return cDirectionFeatureDirectionEnumRuleCall_0_1_0; }
		
		//ownedMemberElement=FeatureDefinition
		public Assignment getOwnedMemberElementAssignment_0_2() { return cOwnedMemberElementAssignment_0_2; }
		
		//FeatureDefinition
		public RuleCall getOwnedMemberElementFeatureDefinitionParserRuleCall_0_2_0() { return cOwnedMemberElementFeatureDefinitionParserRuleCall_0_2_0; }
		
		//('feature' | isComposite?='part') memberName=Name? 'is' memberElement=[SysML::Feature|QualifiedName] ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//'feature' | isComposite?='part'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'feature'
		public Keyword getFeatureKeyword_1_0_0() { return cFeatureKeyword_1_0_0; }
		
		//isComposite?='part'
		public Assignment getIsCompositeAssignment_1_0_1() { return cIsCompositeAssignment_1_0_1; }
		
		//'part'
		public Keyword getIsCompositePartKeyword_1_0_1_0() { return cIsCompositePartKeyword_1_0_1_0; }
		
		//memberName=Name?
		public Assignment getMemberNameAssignment_1_1() { return cMemberNameAssignment_1_1; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_1_1_0() { return cMemberNameNameParserRuleCall_1_1_0; }
		
		//'is'
		public Keyword getIsKeyword_1_2() { return cIsKeyword_1_2; }
		
		//memberElement=[SysML::Feature|QualifiedName]
		public Assignment getMemberElementAssignment_1_3() { return cMemberElementAssignment_1_3; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getMemberElementFeatureCrossReference_1_3_0() { return cMemberElementFeatureCrossReference_1_3_0; }
		
		//QualifiedName
		public RuleCall getMemberElementFeatureQualifiedNameParserRuleCall_1_3_0_1() { return cMemberElementFeatureQualifiedNameParserRuleCall_1_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_4() { return cSemicolonKeyword_1_4; }
		
		//'connector' ownedMemberElement=ConnectorDefinition
		public Group getGroup_2() { return cGroup_2; }
		
		//'connector'
		public Keyword getConnectorKeyword_2_0() { return cConnectorKeyword_2_0; }
		
		//ownedMemberElement=ConnectorDefinition
		public Assignment getOwnedMemberElementAssignment_2_1() { return cOwnedMemberElementAssignment_2_1; }
		
		//ConnectorDefinition
		public RuleCall getOwnedMemberElementConnectorDefinitionParserRuleCall_2_1_0() { return cOwnedMemberElementConnectorDefinitionParserRuleCall_2_1_0; }
		
		//'connector' memberName=Name? 'is' memberElement=[SysML::Connector|QualifiedName] ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//'connector'
		public Keyword getConnectorKeyword_3_0() { return cConnectorKeyword_3_0; }
		
		//memberName=Name?
		public Assignment getMemberNameAssignment_3_1() { return cMemberNameAssignment_3_1; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_3_1_0() { return cMemberNameNameParserRuleCall_3_1_0; }
		
		//'is'
		public Keyword getIsKeyword_3_2() { return cIsKeyword_3_2; }
		
		//memberElement=[SysML::Connector|QualifiedName]
		public Assignment getMemberElementAssignment_3_3() { return cMemberElementAssignment_3_3; }
		
		//[SysML::Connector|QualifiedName]
		public CrossReference getMemberElementConnectorCrossReference_3_3_0() { return cMemberElementConnectorCrossReference_3_3_0; }
		
		//QualifiedName
		public RuleCall getMemberElementConnectorQualifiedNameParserRuleCall_3_3_0_1() { return cMemberElementConnectorQualifiedNameParserRuleCall_3_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3_4() { return cSemicolonKeyword_3_4; }
	}
	public class AssociationDefinitionOrStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.AssociationDefinitionOrStub");
		private final RuleCall cAssociationDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* ASSOCIATIONS */ AssociationDefinitionOrStub SysML::Association:
		//	AssociationDefinition
		//	// AssociationDeclaration { isStub = ';' | AssociationBody }
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AssociationDefinition
		public RuleCall getAssociationDefinitionParserRuleCall() { return cAssociationDefinitionParserRuleCall; }
	}
	public class AssociationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.AssociationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAssociationDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAssociationBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fragment AssociationDefinition returns SysML::Association:
		//	AssociationDeclaration AssociationBody;
		@Override public ParserRule getRule() { return rule; }
		
		//AssociationDeclaration AssociationBody
		public Group getGroup() { return cGroup; }
		
		//AssociationDeclaration
		public RuleCall getAssociationDeclarationParserRuleCall_0() { return cAssociationDeclarationParserRuleCall_0; }
		
		//AssociationBody
		public RuleCall getAssociationBodyParserRuleCall_1() { return cAssociationBodyParserRuleCall_1; }
	}
	public class AssociationDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.AssociationDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cAssocKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSpecializesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedElementAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedElementGeneralizationParserRuleCall_3_1_0 = (RuleCall)cOwnedElementAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cOwnedElementAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cOwnedElementGeneralizationParserRuleCall_3_2_1_0 = (RuleCall)cOwnedElementAssignment_3_2_1.eContents().get(0);
		
		//fragment AssociationDeclaration returns SysML::Association:
		//	isAbstract?='abstract'? 'assoc' name=Name ('specializes' ownedElement+=Generalization (','
		//	ownedElement+=Generalization)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'assoc' name=Name ('specializes' ownedElement+=Generalization (','
		//ownedElement+=Generalization)*)?
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'assoc'
		public Keyword getAssocKeyword_1() { return cAssocKeyword_1; }
		
		//name=Name
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }
		
		//('specializes' ownedElement+=Generalization (',' ownedElement+=Generalization)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'specializes'
		public Keyword getSpecializesKeyword_3_0() { return cSpecializesKeyword_3_0; }
		
		//ownedElement+=Generalization
		public Assignment getOwnedElementAssignment_3_1() { return cOwnedElementAssignment_3_1; }
		
		//Generalization
		public RuleCall getOwnedElementGeneralizationParserRuleCall_3_1_0() { return cOwnedElementGeneralizationParserRuleCall_3_1_0; }
		
		//(',' ownedElement+=Generalization)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//ownedElement+=Generalization
		public Assignment getOwnedElementAssignment_3_2_1() { return cOwnedElementAssignment_3_2_1; }
		
		//Generalization
		public RuleCall getOwnedElementGeneralizationParserRuleCall_3_2_1_0() { return cOwnedElementGeneralizationParserRuleCall_3_2_1_0; }
	}
	public class AssociationBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.AssociationBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOwnedMembershipAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cOwnedMembershipAssociationMemberParserRuleCall_1_0_0 = (RuleCall)cOwnedMembershipAssignment_1_0.eContents().get(0);
		private final Assignment cOwnedImportAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cOwnedImportPackageImportParserRuleCall_1_1_0 = (RuleCall)cOwnedImportAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//fragment AssociationBody returns SysML::Association:
		//	'{' (ownedMembership+=AssociationMember | ownedImport+=PackageImport)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' (ownedMembership+=AssociationMember | ownedImport+=PackageImport)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(ownedMembership+=AssociationMember | ownedImport+=PackageImport)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ownedMembership+=AssociationMember
		public Assignment getOwnedMembershipAssignment_1_0() { return cOwnedMembershipAssignment_1_0; }
		
		//AssociationMember
		public RuleCall getOwnedMembershipAssociationMemberParserRuleCall_1_0_0() { return cOwnedMembershipAssociationMemberParserRuleCall_1_0_0; }
		
		//ownedImport+=PackageImport
		public Assignment getOwnedImportAssignment_1_1() { return cOwnedImportAssignment_1_1; }
		
		//PackageImport
		public RuleCall getOwnedImportPackageImportParserRuleCall_1_1_0() { return cOwnedImportPackageImportParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class AssociationMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.AssociationMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNonFeatureClassMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssociationFeatureMemberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssociationEndFeatureMemberParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///* ASSOCIATION MEMBERSHIPS */ AssociationMember SysML::Membership:
		//	NonFeatureClassMember | AssociationFeatureMember | AssociationEndFeatureMember;
		@Override public ParserRule getRule() { return rule; }
		
		//NonFeatureClassMember | AssociationFeatureMember | AssociationEndFeatureMember
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NonFeatureClassMember
		public RuleCall getNonFeatureClassMemberParserRuleCall_0() { return cNonFeatureClassMemberParserRuleCall_0; }
		
		//AssociationFeatureMember
		public RuleCall getAssociationFeatureMemberParserRuleCall_1() { return cAssociationFeatureMemberParserRuleCall_1; }
		
		//AssociationEndFeatureMember
		public RuleCall getAssociationEndFeatureMemberParserRuleCall_2() { return cAssociationEndFeatureMemberParserRuleCall_2; }
	}
	public class AssociationFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.AssociationFeatureMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedElementCommentParserRuleCall_0_0 = (RuleCall)cOwnedElementAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityIndicatorEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final RuleCall cFeatureMemberElementParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//AssociationFeatureMember SysML::FeatureMembership:
		//	ownedElement+=Comment*
		//	//  ( annotation += StereotypeAnnotation )*
		//	visibility=VisibilityIndicator?
		//	FeatureMemberElement;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedElement+=Comment* //  ( annotation += StereotypeAnnotation )*
		//visibility=VisibilityIndicator? FeatureMemberElement
		public Group getGroup() { return cGroup; }
		
		//ownedElement+=Comment*
		public Assignment getOwnedElementAssignment_0() { return cOwnedElementAssignment_0; }
		
		//Comment
		public RuleCall getOwnedElementCommentParserRuleCall_0_0() { return cOwnedElementCommentParserRuleCall_0_0; }
		
		////  ( annotation += StereotypeAnnotation )*
		//visibility=VisibilityIndicator?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//VisibilityIndicator
		public RuleCall getVisibilityVisibilityIndicatorEnumRuleCall_1_0() { return cVisibilityVisibilityIndicatorEnumRuleCall_1_0; }
		
		//FeatureMemberElement
		public RuleCall getFeatureMemberElementParserRuleCall_2() { return cFeatureMemberElementParserRuleCall_2; }
	}
	public class AssociationEndFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.AssociationEndFeatureMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedElementCommentParserRuleCall_0_0 = (RuleCall)cOwnedElementAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityIndicatorEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cEndKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cDirectionAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cDirectionFeatureDirectionEnumRuleCall_2_0_1_0 = (RuleCall)cDirectionAssignment_2_0_1.eContents().get(0);
		private final Assignment cOwnedMemberElementAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cOwnedMemberElementFeatureDefinitionParserRuleCall_2_0_2_0 = (RuleCall)cOwnedMemberElementAssignment_2_0_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cEndKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cMemberNameAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMemberNameNameParserRuleCall_2_1_1_0 = (RuleCall)cMemberNameAssignment_2_1_1.eContents().get(0);
		private final Keyword cIsKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Assignment cMemberElementAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final CrossReference cMemberElementFeatureCrossReference_2_1_3_0 = (CrossReference)cMemberElementAssignment_2_1_3.eContents().get(0);
		private final RuleCall cMemberElementFeatureQualifiedNameParserRuleCall_2_1_3_0_1 = (RuleCall)cMemberElementFeatureCrossReference_2_1_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Assignment cDirectionAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cDirectionFeatureDirectionEnumRuleCall_2_2_0_0 = (RuleCall)cDirectionAssignment_2_2_0.eContents().get(0);
		private final Assignment cOwnedMemberElementAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cOwnedMemberElementNamedFeatureDefinitionParserRuleCall_2_2_1_0 = (RuleCall)cOwnedMemberElementAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cAlternatives_2.eContents().get(3);
		private final Assignment cMemberNameAssignment_2_3_0 = (Assignment)cGroup_2_3.eContents().get(0);
		private final RuleCall cMemberNameNameParserRuleCall_2_3_0_0 = (RuleCall)cMemberNameAssignment_2_3_0.eContents().get(0);
		private final Keyword cIsKeyword_2_3_1 = (Keyword)cGroup_2_3.eContents().get(1);
		private final Assignment cMemberElementAssignment_2_3_2 = (Assignment)cGroup_2_3.eContents().get(2);
		private final CrossReference cMemberElementFeatureCrossReference_2_3_2_0 = (CrossReference)cMemberElementAssignment_2_3_2.eContents().get(0);
		private final RuleCall cMemberElementFeatureQualifiedNameParserRuleCall_2_3_2_0_1 = (RuleCall)cMemberElementFeatureCrossReference_2_3_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_3_3 = (Keyword)cGroup_2_3.eContents().get(3);
		
		//AssociationEndFeatureMember SysML::EndFeatureMembership:
		//	ownedElement+=Comment*
		//	//  ( annotation += StereotypeAnnotation )*
		//	visibility=VisibilityIndicator? ('end' direction=FeatureDirection? ownedMemberElement=FeatureDefinition
		//	| 'end' memberName=Name? 'is' memberElement=[SysML::Feature|QualifiedName] ';'
		//	// These alternatives are provided for legacy Alf backwards compatibilty;
		//	| direction=FeatureDirection? ownedMemberElement=NamedFeatureDefinition
		//	| memberName=Name 'is' memberElement=[SysML::Feature|QualifiedName] ';');
		@Override public ParserRule getRule() { return rule; }
		
		//ownedElement+=Comment* //  ( annotation += StereotypeAnnotation )*
		//visibility=VisibilityIndicator? ('end' direction=FeatureDirection? ownedMemberElement=FeatureDefinition | 'end'
		//memberName=Name? 'is' memberElement=[SysML::Feature|QualifiedName] ';' // These alternatives are provided for legacy Alf backwards compatibilty;
		//| direction=FeatureDirection? ownedMemberElement=NamedFeatureDefinition | memberName=Name 'is'
		//memberElement=[SysML::Feature|QualifiedName] ';')
		public Group getGroup() { return cGroup; }
		
		//ownedElement+=Comment*
		public Assignment getOwnedElementAssignment_0() { return cOwnedElementAssignment_0; }
		
		//Comment
		public RuleCall getOwnedElementCommentParserRuleCall_0_0() { return cOwnedElementCommentParserRuleCall_0_0; }
		
		////  ( annotation += StereotypeAnnotation )*
		//visibility=VisibilityIndicator?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//VisibilityIndicator
		public RuleCall getVisibilityVisibilityIndicatorEnumRuleCall_1_0() { return cVisibilityVisibilityIndicatorEnumRuleCall_1_0; }
		
		//'end' direction=FeatureDirection? ownedMemberElement=FeatureDefinition | 'end' memberName=Name? 'is'
		//memberElement=[SysML::Feature|QualifiedName] ';' // These alternatives are provided for legacy Alf backwards compatibilty;
		//| direction=FeatureDirection? ownedMemberElement=NamedFeatureDefinition | memberName=Name 'is'
		//memberElement=[SysML::Feature|QualifiedName] ';'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'end' direction=FeatureDirection? ownedMemberElement=FeatureDefinition
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'end'
		public Keyword getEndKeyword_2_0_0() { return cEndKeyword_2_0_0; }
		
		//direction=FeatureDirection?
		public Assignment getDirectionAssignment_2_0_1() { return cDirectionAssignment_2_0_1; }
		
		//FeatureDirection
		public RuleCall getDirectionFeatureDirectionEnumRuleCall_2_0_1_0() { return cDirectionFeatureDirectionEnumRuleCall_2_0_1_0; }
		
		//ownedMemberElement=FeatureDefinition
		public Assignment getOwnedMemberElementAssignment_2_0_2() { return cOwnedMemberElementAssignment_2_0_2; }
		
		//FeatureDefinition
		public RuleCall getOwnedMemberElementFeatureDefinitionParserRuleCall_2_0_2_0() { return cOwnedMemberElementFeatureDefinitionParserRuleCall_2_0_2_0; }
		
		//'end' memberName=Name? 'is' memberElement=[SysML::Feature|QualifiedName] ';'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'end'
		public Keyword getEndKeyword_2_1_0() { return cEndKeyword_2_1_0; }
		
		//memberName=Name?
		public Assignment getMemberNameAssignment_2_1_1() { return cMemberNameAssignment_2_1_1; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_2_1_1_0() { return cMemberNameNameParserRuleCall_2_1_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2_1_2() { return cIsKeyword_2_1_2; }
		
		//memberElement=[SysML::Feature|QualifiedName]
		public Assignment getMemberElementAssignment_2_1_3() { return cMemberElementAssignment_2_1_3; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getMemberElementFeatureCrossReference_2_1_3_0() { return cMemberElementFeatureCrossReference_2_1_3_0; }
		
		//QualifiedName
		public RuleCall getMemberElementFeatureQualifiedNameParserRuleCall_2_1_3_0_1() { return cMemberElementFeatureQualifiedNameParserRuleCall_2_1_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_4() { return cSemicolonKeyword_2_1_4; }
		
		//direction=FeatureDirection? ownedMemberElement=NamedFeatureDefinition
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//direction=FeatureDirection?
		public Assignment getDirectionAssignment_2_2_0() { return cDirectionAssignment_2_2_0; }
		
		//FeatureDirection
		public RuleCall getDirectionFeatureDirectionEnumRuleCall_2_2_0_0() { return cDirectionFeatureDirectionEnumRuleCall_2_2_0_0; }
		
		//ownedMemberElement=NamedFeatureDefinition
		public Assignment getOwnedMemberElementAssignment_2_2_1() { return cOwnedMemberElementAssignment_2_2_1; }
		
		//NamedFeatureDefinition
		public RuleCall getOwnedMemberElementNamedFeatureDefinitionParserRuleCall_2_2_1_0() { return cOwnedMemberElementNamedFeatureDefinitionParserRuleCall_2_2_1_0; }
		
		//memberName=Name 'is' memberElement=[SysML::Feature|QualifiedName] ';'
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//memberName=Name
		public Assignment getMemberNameAssignment_2_3_0() { return cMemberNameAssignment_2_3_0; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_2_3_0_0() { return cMemberNameNameParserRuleCall_2_3_0_0; }
		
		//'is'
		public Keyword getIsKeyword_2_3_1() { return cIsKeyword_2_3_1; }
		
		//memberElement=[SysML::Feature|QualifiedName]
		public Assignment getMemberElementAssignment_2_3_2() { return cMemberElementAssignment_2_3_2; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getMemberElementFeatureCrossReference_2_3_2_0() { return cMemberElementFeatureCrossReference_2_3_2_0; }
		
		//QualifiedName
		public RuleCall getMemberElementFeatureQualifiedNameParserRuleCall_2_3_2_0_1() { return cMemberElementFeatureQualifiedNameParserRuleCall_2_3_2_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2_3_3() { return cSemicolonKeyword_2_3_3; }
	}
	public class FeatureDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.FeatureDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNamedFeatureDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnnamedFeatureDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* FEATURES */ FeatureDefinition SysML::Feature:
		//	NamedFeatureDefinition | UnnamedFeatureDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//NamedFeatureDefinition | UnnamedFeatureDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NamedFeatureDefinition
		public RuleCall getNamedFeatureDefinitionParserRuleCall_0() { return cNamedFeatureDefinitionParserRuleCall_0; }
		
		//UnnamedFeatureDefinition
		public RuleCall getUnnamedFeatureDefinitionParserRuleCall_1() { return cUnnamedFeatureDefinitionParserRuleCall_1; }
	}
	public class NamedFeatureDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.NamedFeatureDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeatureDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cFeatureCompletionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//NamedFeatureDefinition SysML::Feature:
		//	FeatureDeclaration FeatureCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureDeclaration FeatureCompletion
		public Group getGroup() { return cGroup; }
		
		//FeatureDeclaration
		public RuleCall getFeatureDeclarationParserRuleCall_0() { return cFeatureDeclarationParserRuleCall_0; }
		
		//FeatureCompletion
		public RuleCall getFeatureCompletionParserRuleCall_1() { return cFeatureCompletionParserRuleCall_1; }
	}
	public class UnnamedFeatureDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.UnnamedFeatureDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedElementSubsetOrRedefinitionParserRuleCall_0_0 = (RuleCall)cOwnedElementAssignment_0.eContents().get(0);
		private final RuleCall cTypePartParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cMultiplicityParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cFeatureCompletionParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//UnnamedFeatureDefinition SysML::Feature:
		//	ownedElement+=SubsetOrRedefinition TypePart? Multiplicity?
		//	FeatureCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedElement+=SubsetOrRedefinition TypePart? Multiplicity? FeatureCompletion
		public Group getGroup() { return cGroup; }
		
		//ownedElement+=SubsetOrRedefinition
		public Assignment getOwnedElementAssignment_0() { return cOwnedElementAssignment_0; }
		
		//SubsetOrRedefinition
		public RuleCall getOwnedElementSubsetOrRedefinitionParserRuleCall_0_0() { return cOwnedElementSubsetOrRedefinitionParserRuleCall_0_0; }
		
		//TypePart?
		public RuleCall getTypePartParserRuleCall_1() { return cTypePartParserRuleCall_1; }
		
		//Multiplicity?
		public RuleCall getMultiplicityParserRuleCall_2() { return cMultiplicityParserRuleCall_2; }
		
		//FeatureCompletion
		public RuleCall getFeatureCompletionParserRuleCall_3() { return cFeatureCompletionParserRuleCall_3; }
	}
	public class FeatureBodyDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.FeatureBodyDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFeatureDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cClassBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment FeatureBodyDefinition returns SysML::Feature:
		//	'feature' FeatureDeclaration ClassBody;
		@Override public ParserRule getRule() { return rule; }
		
		//'feature' FeatureDeclaration ClassBody
		public Group getGroup() { return cGroup; }
		
		//'feature'
		public Keyword getFeatureKeyword_0() { return cFeatureKeyword_0; }
		
		//FeatureDeclaration
		public RuleCall getFeatureDeclarationParserRuleCall_1() { return cFeatureDeclarationParserRuleCall_1; }
		
		//ClassBody
		public RuleCall getClassBodyParserRuleCall_2() { return cClassBodyParserRuleCall_2; }
	}
	public class FeatureDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.FeatureDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cTypePartParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cMultiplicityParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cOwnedElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedElementSubsetOrRedefinitionParserRuleCall_3_0 = (RuleCall)cOwnedElementAssignment_3.eContents().get(0);
		
		//fragment FeatureDeclaration returns SysML::Feature:
		//	name=Name TypePart? Multiplicity?
		//	ownedElement+=SubsetOrRedefinition?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Name TypePart? Multiplicity? ownedElement+=SubsetOrRedefinition?
		public Group getGroup() { return cGroup; }
		
		//name=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }
		
		//TypePart?
		public RuleCall getTypePartParserRuleCall_1() { return cTypePartParserRuleCall_1; }
		
		//Multiplicity?
		public RuleCall getMultiplicityParserRuleCall_2() { return cMultiplicityParserRuleCall_2; }
		
		//ownedElement+=SubsetOrRedefinition?
		public Assignment getOwnedElementAssignment_3() { return cOwnedElementAssignment_3; }
		
		//SubsetOrRedefinition
		public RuleCall getOwnedElementSubsetOrRedefinitionParserRuleCall_3_0() { return cOwnedElementSubsetOrRedefinitionParserRuleCall_3_0; }
	}
	public class FeatureCompletionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.FeatureCompletion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final RuleCall cClassBodyParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//fragment FeatureCompletion returns SysML::Feature:
		//	('=' value=Expression)? (';' | ClassBody);
		@Override public ParserRule getRule() { return rule; }
		
		//('=' value=Expression)? (';' | ClassBody)
		public Group getGroup() { return cGroup; }
		
		//('=' value=Expression)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_0() { return cEqualsSignKeyword_0_0; }
		
		//value=Expression
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_0_1_0() { return cValueExpressionParserRuleCall_0_1_0; }
		
		//';' | ClassBody
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//ClassBody
		public RuleCall getClassBodyParserRuleCall_1_1() { return cClassBodyParserRuleCall_1_1; }
	}
	public class TypePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.TypePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsCompositeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsCompositeComposeKeyword_1_0 = (Keyword)cIsCompositeAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cReferencedTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cReferencedTypeClassCrossReference_2_0_0 = (CrossReference)cReferencedTypeAssignment_2_0.eContents().get(0);
		private final RuleCall cReferencedTypeClassQualifiedNameParserRuleCall_2_0_0_1 = (RuleCall)cReferencedTypeClassCrossReference_2_0_0.eContents().get(1);
		private final Keyword cAnyKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//fragment TypePart returns SysML::Feature:
		//	':' isComposite?='compose'? (referencedType+=[SysML::Class|QualifiedName] | 'any');
		@Override public ParserRule getRule() { return rule; }
		
		//':' isComposite?='compose'? (referencedType+=[SysML::Class|QualifiedName] | 'any')
		public Group getGroup() { return cGroup; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//isComposite?='compose'?
		public Assignment getIsCompositeAssignment_1() { return cIsCompositeAssignment_1; }
		
		//'compose'
		public Keyword getIsCompositeComposeKeyword_1_0() { return cIsCompositeComposeKeyword_1_0; }
		
		//referencedType+=[SysML::Class|QualifiedName] | 'any'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//referencedType+=[SysML::Class|QualifiedName]
		public Assignment getReferencedTypeAssignment_2_0() { return cReferencedTypeAssignment_2_0; }
		
		//[SysML::Class|QualifiedName]
		public CrossReference getReferencedTypeClassCrossReference_2_0_0() { return cReferencedTypeClassCrossReference_2_0_0; }
		
		//QualifiedName
		public RuleCall getReferencedTypeClassQualifiedNameParserRuleCall_2_0_0_1() { return cReferencedTypeClassQualifiedNameParserRuleCall_2_0_0_1; }
		
		//'any'
		public Keyword getAnyKeyword_2_1() { return cAnyKeyword_2_1; }
	}
	public class MultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.Multiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLowerAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLowerNaturalLiteralExpressionParserRuleCall_1_0_0 = (RuleCall)cLowerAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cUpperAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUpperUnlimitedNaturalLiteralExpressionParserRuleCall_2_0 = (RuleCall)cUpperAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Assignment cIsOrderedAssignment_4_0 = (Assignment)cUnorderedGroup_4.eContents().get(0);
		private final Keyword cIsOrderedOrderedKeyword_4_0_0 = (Keyword)cIsOrderedAssignment_4_0.eContents().get(0);
		private final Assignment cIsNonuniqueAssignment_4_1 = (Assignment)cUnorderedGroup_4.eContents().get(1);
		private final Keyword cIsNonuniqueNonuniqueKeyword_4_1_0 = (Keyword)cIsNonuniqueAssignment_4_1.eContents().get(0);
		
		//fragment Multiplicity returns SysML::Feature:
		//	'[' (lower=NaturalLiteralExpression '..')? upper=UnlimitedNaturalLiteralExpression ']' (isOrdered?='ordered'? &
		//	isNonunique?='nonunique'?);
		@Override public ParserRule getRule() { return rule; }
		
		//'[' (lower=NaturalLiteralExpression '..')? upper=UnlimitedNaturalLiteralExpression ']' (isOrdered?='ordered'? &
		//isNonunique?='nonunique'?)
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//(lower=NaturalLiteralExpression '..')?
		public Group getGroup_1() { return cGroup_1; }
		
		//lower=NaturalLiteralExpression
		public Assignment getLowerAssignment_1_0() { return cLowerAssignment_1_0; }
		
		//NaturalLiteralExpression
		public RuleCall getLowerNaturalLiteralExpressionParserRuleCall_1_0_0() { return cLowerNaturalLiteralExpressionParserRuleCall_1_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_1() { return cFullStopFullStopKeyword_1_1; }
		
		//upper=UnlimitedNaturalLiteralExpression
		public Assignment getUpperAssignment_2() { return cUpperAssignment_2; }
		
		//UnlimitedNaturalLiteralExpression
		public RuleCall getUpperUnlimitedNaturalLiteralExpressionParserRuleCall_2_0() { return cUpperUnlimitedNaturalLiteralExpressionParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//isOrdered?='ordered'? & isNonunique?='nonunique'?
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }
		
		//isOrdered?='ordered'?
		public Assignment getIsOrderedAssignment_4_0() { return cIsOrderedAssignment_4_0; }
		
		//'ordered'
		public Keyword getIsOrderedOrderedKeyword_4_0_0() { return cIsOrderedOrderedKeyword_4_0_0; }
		
		//isNonunique?='nonunique'?
		public Assignment getIsNonuniqueAssignment_4_1() { return cIsNonuniqueAssignment_4_1; }
		
		//'nonunique'
		public Keyword getIsNonuniqueNonuniqueKeyword_4_1_0() { return cIsNonuniqueNonuniqueKeyword_4_1_0; }
	}
	public class SubsetOrRedefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.SubsetOrRedefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSubsetsKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cSubsetParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRedefinesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cRedefinitionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//SubsetOrRedefinition SysML::Subset:
		//	'subsets' Subset
		//	| 'redefines' Redefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//'subsets' Subset | 'redefines' Redefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'subsets' Subset
		public Group getGroup_0() { return cGroup_0; }
		
		//'subsets'
		public Keyword getSubsetsKeyword_0_0() { return cSubsetsKeyword_0_0; }
		
		//Subset
		public RuleCall getSubsetParserRuleCall_0_1() { return cSubsetParserRuleCall_0_1; }
		
		//'redefines' Redefinition
		public Group getGroup_1() { return cGroup_1; }
		
		//'redefines'
		public Keyword getRedefinesKeyword_1_0() { return cRedefinesKeyword_1_0; }
		
		//Redefinition
		public RuleCall getRedefinitionParserRuleCall_1_1() { return cRedefinitionParserRuleCall_1_1; }
	}
	public class RedefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.Redefinition");
		private final Assignment cRedefinedFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRedefinedFeatureFeatureCrossReference_0 = (CrossReference)cRedefinedFeatureAssignment.eContents().get(0);
		private final RuleCall cRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1 = (RuleCall)cRedefinedFeatureFeatureCrossReference_0.eContents().get(1);
		
		//Redefinition SysML::Redefinition:
		//	redefinedFeature=[SysML::Feature|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//redefinedFeature=[SysML::Feature|QualifiedName]
		public Assignment getRedefinedFeatureAssignment() { return cRedefinedFeatureAssignment; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getRedefinedFeatureFeatureCrossReference_0() { return cRedefinedFeatureFeatureCrossReference_0; }
		
		//QualifiedName
		public RuleCall getRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1() { return cRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1; }
	}
	public class SubsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.Subset");
		private final Assignment cSubsettedFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSubsettedFeatureFeatureCrossReference_0 = (CrossReference)cSubsettedFeatureAssignment.eContents().get(0);
		private final RuleCall cSubsettedFeatureFeatureQualifiedNameParserRuleCall_0_1 = (RuleCall)cSubsettedFeatureFeatureCrossReference_0.eContents().get(1);
		
		//Subset SysML::Subset:
		//	subsettedFeature=[SysML::Feature|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//subsettedFeature=[SysML::Feature|QualifiedName]
		public Assignment getSubsettedFeatureAssignment() { return cSubsettedFeatureAssignment; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getSubsettedFeatureFeatureCrossReference_0() { return cSubsettedFeatureFeatureCrossReference_0; }
		
		//QualifiedName
		public RuleCall getSubsettedFeatureFeatureQualifiedNameParserRuleCall_0_1() { return cSubsettedFeatureFeatureQualifiedNameParserRuleCall_0_1; }
	}
	public class ConnectorDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.ConnectorDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0_0_0 = (RuleCall)cNameAssignment_0_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cGroup_0_0.eContents().get(1);
		private final Keyword cColonKeyword_0_0_1_0 = (Keyword)cGroup_0_0_1.eContents().get(0);
		private final Assignment cAssociationAssignment_0_0_1_1 = (Assignment)cGroup_0_0_1.eContents().get(1);
		private final CrossReference cAssociationAssociationCrossReference_0_0_1_1_0 = (CrossReference)cAssociationAssignment_0_0_1_1.eContents().get(0);
		private final RuleCall cAssociationAssociationQualifiedNameParserRuleCall_0_0_1_1_0_1 = (RuleCall)cAssociationAssociationCrossReference_0_0_1_1_0.eContents().get(1);
		private final Keyword cIsKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cConnectorEndAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cConnectorEndConnectorEndParserRuleCall_0_1_0 = (RuleCall)cConnectorEndAssignment_0_1.eContents().get(0);
		private final Keyword cToKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cConnectorEndAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cConnectorEndConnectorEndParserRuleCall_0_3_0 = (RuleCall)cConnectorEndAssignment_0_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cColonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cAssociationAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cAssociationAssociationCrossReference_1_1_1_0 = (CrossReference)cAssociationAssignment_1_1_1.eContents().get(0);
		private final RuleCall cAssociationAssociationQualifiedNameParserRuleCall_1_1_1_0_1 = (RuleCall)cAssociationAssociationCrossReference_1_1_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cConnectorEndAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cConnectorEndConnectorEndParserRuleCall_1_3_0 = (RuleCall)cConnectorEndAssignment_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cConnectorEndAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cConnectorEndConnectorEndParserRuleCall_1_5_0 = (RuleCall)cConnectorEndAssignment_1_5.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cGroup_1.eContents().get(6);
		private final Keyword cCommaKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Assignment cConnectorEndAssignment_1_6_1 = (Assignment)cGroup_1_6.eContents().get(1);
		private final RuleCall cConnectorEndConnectorEndParserRuleCall_1_6_1_0 = (RuleCall)cConnectorEndAssignment_1_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Keyword cSemicolonKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		
		///* CONNECTORS */ ConnectorDefinition SysML::Connector:
		//	(name=Name? (':' association=[SysML::Association|QualifiedName])? 'is')?
		//	connectorEnd+=ConnectorEnd 'to' connectorEnd+=ConnectorEnd ';'
		//	| name=Name? (':' association=[SysML::Association|QualifiedName])?
		//	'(' connectorEnd+=ConnectorEnd ',' connectorEnd+=ConnectorEnd (',' connectorEnd+=ConnectorEnd)*
		//	')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(name=Name? (':' association=[SysML::Association|QualifiedName])? 'is')? connectorEnd+=ConnectorEnd 'to'
		//connectorEnd+=ConnectorEnd ';' | name=Name? (':' association=[SysML::Association|QualifiedName])? '('
		//connectorEnd+=ConnectorEnd ',' connectorEnd+=ConnectorEnd (',' connectorEnd+=ConnectorEnd)* ')' ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(name=Name? (':' association=[SysML::Association|QualifiedName])? 'is')? connectorEnd+=ConnectorEnd 'to'
		//connectorEnd+=ConnectorEnd ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//(name=Name? (':' association=[SysML::Association|QualifiedName])? 'is')?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//name=Name?
		public Assignment getNameAssignment_0_0_0() { return cNameAssignment_0_0_0; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_0_0_0_0() { return cNameNameParserRuleCall_0_0_0_0; }
		
		//(':' association=[SysML::Association|QualifiedName])?
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_0_0_1_0() { return cColonKeyword_0_0_1_0; }
		
		//association=[SysML::Association|QualifiedName]
		public Assignment getAssociationAssignment_0_0_1_1() { return cAssociationAssignment_0_0_1_1; }
		
		//[SysML::Association|QualifiedName]
		public CrossReference getAssociationAssociationCrossReference_0_0_1_1_0() { return cAssociationAssociationCrossReference_0_0_1_1_0; }
		
		//QualifiedName
		public RuleCall getAssociationAssociationQualifiedNameParserRuleCall_0_0_1_1_0_1() { return cAssociationAssociationQualifiedNameParserRuleCall_0_0_1_1_0_1; }
		
		//'is'
		public Keyword getIsKeyword_0_0_2() { return cIsKeyword_0_0_2; }
		
		//connectorEnd+=ConnectorEnd
		public Assignment getConnectorEndAssignment_0_1() { return cConnectorEndAssignment_0_1; }
		
		//ConnectorEnd
		public RuleCall getConnectorEndConnectorEndParserRuleCall_0_1_0() { return cConnectorEndConnectorEndParserRuleCall_0_1_0; }
		
		//'to'
		public Keyword getToKeyword_0_2() { return cToKeyword_0_2; }
		
		//connectorEnd+=ConnectorEnd
		public Assignment getConnectorEndAssignment_0_3() { return cConnectorEndAssignment_0_3; }
		
		//ConnectorEnd
		public RuleCall getConnectorEndConnectorEndParserRuleCall_0_3_0() { return cConnectorEndConnectorEndParserRuleCall_0_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }
		
		//name=Name? (':' association=[SysML::Association|QualifiedName])? '(' connectorEnd+=ConnectorEnd ','
		//connectorEnd+=ConnectorEnd (',' connectorEnd+=ConnectorEnd)* ')' ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//name=Name?
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0_0() { return cNameNameParserRuleCall_1_0_0; }
		
		//(':' association=[SysML::Association|QualifiedName])?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//':'
		public Keyword getColonKeyword_1_1_0() { return cColonKeyword_1_1_0; }
		
		//association=[SysML::Association|QualifiedName]
		public Assignment getAssociationAssignment_1_1_1() { return cAssociationAssignment_1_1_1; }
		
		//[SysML::Association|QualifiedName]
		public CrossReference getAssociationAssociationCrossReference_1_1_1_0() { return cAssociationAssociationCrossReference_1_1_1_0; }
		
		//QualifiedName
		public RuleCall getAssociationAssociationQualifiedNameParserRuleCall_1_1_1_0_1() { return cAssociationAssociationQualifiedNameParserRuleCall_1_1_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//connectorEnd+=ConnectorEnd
		public Assignment getConnectorEndAssignment_1_3() { return cConnectorEndAssignment_1_3; }
		
		//ConnectorEnd
		public RuleCall getConnectorEndConnectorEndParserRuleCall_1_3_0() { return cConnectorEndConnectorEndParserRuleCall_1_3_0; }
		
		//','
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }
		
		//connectorEnd+=ConnectorEnd
		public Assignment getConnectorEndAssignment_1_5() { return cConnectorEndAssignment_1_5; }
		
		//ConnectorEnd
		public RuleCall getConnectorEndConnectorEndParserRuleCall_1_5_0() { return cConnectorEndConnectorEndParserRuleCall_1_5_0; }
		
		//(',' connectorEnd+=ConnectorEnd)*
		public Group getGroup_1_6() { return cGroup_1_6; }
		
		//','
		public Keyword getCommaKeyword_1_6_0() { return cCommaKeyword_1_6_0; }
		
		//connectorEnd+=ConnectorEnd
		public Assignment getConnectorEndAssignment_1_6_1() { return cConnectorEndAssignment_1_6_1; }
		
		//ConnectorEnd
		public RuleCall getConnectorEndConnectorEndParserRuleCall_1_6_1_0() { return cConnectorEndConnectorEndParserRuleCall_1_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_7() { return cRightParenthesisKeyword_1_7; }
		
		//';'
		public Keyword getSemicolonKeyword_1_8() { return cSemicolonKeyword_1_8; }
	}
	public class ConnectorEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.ConnectorEnd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cEndAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final CrossReference cEndFeatureCrossReference_0_0_0_0 = (CrossReference)cEndAssignment_0_0_0.eContents().get(0);
		private final RuleCall cEndFeatureQualifiedNameParserRuleCall_0_0_0_0_1 = (RuleCall)cEndFeatureCrossReference_0_0_0_0.eContents().get(1);
		private final Keyword cColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_0_1_0 = (CrossReference)cFeatureAssignment_0_1.eContents().get(0);
		private final RuleCall cFeatureFeatureQualifiedNameParserRuleCall_0_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_0_1_0.eContents().get(1);
		private final RuleCall cConnectorEndMultiplicityParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cEndAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final CrossReference cEndFeatureCrossReference_1_0_0_0 = (CrossReference)cEndAssignment_1_0_0.eContents().get(0);
		private final RuleCall cEndFeatureQualifiedNameParserRuleCall_1_0_0_0_1 = (RuleCall)cEndFeatureCrossReference_1_0_0_0.eContents().get(1);
		private final RuleCall cConnectorEndMultiplicityParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cFeatureAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_1_1_0 = (CrossReference)cFeatureAssignment_1_1.eContents().get(0);
		private final RuleCall cFeatureFeatureQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_1_1_0.eContents().get(1);
		
		//ConnectorEnd SysML::ConnectorEnd:
		//	(end=[SysML::Feature|QualifiedName] ':')?
		//	feature=[SysML::Feature|QualifiedName] ConnectorEndMultiplicity?
		//	| (end=[SysML::Feature|QualifiedName] ConnectorEndMultiplicity? '=>') feature=[SysML::Feature|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//(end=[SysML::Feature|QualifiedName] ':')? feature=[SysML::Feature|QualifiedName] ConnectorEndMultiplicity? |
		//(end=[SysML::Feature|QualifiedName] ConnectorEndMultiplicity? '=>') feature=[SysML::Feature|QualifiedName]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(end=[SysML::Feature|QualifiedName] ':')? feature=[SysML::Feature|QualifiedName] ConnectorEndMultiplicity?
		public Group getGroup_0() { return cGroup_0; }
		
		//(end=[SysML::Feature|QualifiedName] ':')?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//end=[SysML::Feature|QualifiedName]
		public Assignment getEndAssignment_0_0_0() { return cEndAssignment_0_0_0; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getEndFeatureCrossReference_0_0_0_0() { return cEndFeatureCrossReference_0_0_0_0; }
		
		//QualifiedName
		public RuleCall getEndFeatureQualifiedNameParserRuleCall_0_0_0_0_1() { return cEndFeatureQualifiedNameParserRuleCall_0_0_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_0_0_1() { return cColonKeyword_0_0_1; }
		
		//feature=[SysML::Feature|QualifiedName]
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getFeatureFeatureCrossReference_0_1_0() { return cFeatureFeatureCrossReference_0_1_0; }
		
		//QualifiedName
		public RuleCall getFeatureFeatureQualifiedNameParserRuleCall_0_1_0_1() { return cFeatureFeatureQualifiedNameParserRuleCall_0_1_0_1; }
		
		//ConnectorEndMultiplicity?
		public RuleCall getConnectorEndMultiplicityParserRuleCall_0_2() { return cConnectorEndMultiplicityParserRuleCall_0_2; }
		
		//(end=[SysML::Feature|QualifiedName] ConnectorEndMultiplicity? '=>') feature=[SysML::Feature|QualifiedName]
		public Group getGroup_1() { return cGroup_1; }
		
		//end=[SysML::Feature|QualifiedName] ConnectorEndMultiplicity? '=>'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//end=[SysML::Feature|QualifiedName]
		public Assignment getEndAssignment_1_0_0() { return cEndAssignment_1_0_0; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getEndFeatureCrossReference_1_0_0_0() { return cEndFeatureCrossReference_1_0_0_0; }
		
		//QualifiedName
		public RuleCall getEndFeatureQualifiedNameParserRuleCall_1_0_0_0_1() { return cEndFeatureQualifiedNameParserRuleCall_1_0_0_0_1; }
		
		//ConnectorEndMultiplicity?
		public RuleCall getConnectorEndMultiplicityParserRuleCall_1_0_1() { return cConnectorEndMultiplicityParserRuleCall_1_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_0_2() { return cEqualsSignGreaterThanSignKeyword_1_0_2; }
		
		//feature=[SysML::Feature|QualifiedName]
		public Assignment getFeatureAssignment_1_1() { return cFeatureAssignment_1_1; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getFeatureFeatureCrossReference_1_1_0() { return cFeatureFeatureCrossReference_1_1_0; }
		
		//QualifiedName
		public RuleCall getFeatureFeatureQualifiedNameParserRuleCall_1_1_0_1() { return cFeatureFeatureQualifiedNameParserRuleCall_1_1_0_1; }
	}
	public class ConnectorEndMultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.ConnectorEndMultiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLowerAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLowerNaturalLiteralExpressionParserRuleCall_1_0_0 = (RuleCall)cLowerAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cUpperAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUpperUnlimitedNaturalLiteralExpressionParserRuleCall_2_0 = (RuleCall)cUpperAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//fragment ConnectorEndMultiplicity returns SysML::ConnectorEnd:
		//	'[' (lower=NaturalLiteralExpression '..')? upper=UnlimitedNaturalLiteralExpression ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' (lower=NaturalLiteralExpression '..')? upper=UnlimitedNaturalLiteralExpression ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//(lower=NaturalLiteralExpression '..')?
		public Group getGroup_1() { return cGroup_1; }
		
		//lower=NaturalLiteralExpression
		public Assignment getLowerAssignment_1_0() { return cLowerAssignment_1_0; }
		
		//NaturalLiteralExpression
		public RuleCall getLowerNaturalLiteralExpressionParserRuleCall_1_0_0() { return cLowerNaturalLiteralExpressionParserRuleCall_1_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_1() { return cFullStopFullStopKeyword_1_1; }
		
		//upper=UnlimitedNaturalLiteralExpression
		public Assignment getUpperAssignment_2() { return cUpperAssignment_2; }
		
		//UnlimitedNaturalLiteralExpression
		public RuleCall getUpperUnlimitedNaturalLiteralExpressionParserRuleCall_2_0() { return cUpperUnlimitedNaturalLiteralExpressionParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.Expression");
		private final RuleCall cBinaryExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* EXPRESSIONS */ Expression SysML::Expression:
		//	BinaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//BinaryExpression
		public RuleCall getBinaryExpressionParserRuleCall() { return cBinaryExpressionParserRuleCall; }
	}
	public class BinaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.BinaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1_0_0 = (Assignment)cGroup_1_1_0.eContents().get(0);
		private final RuleCall cOperatorBinaryOperatorParserRuleCall_1_1_0_0_0 = (RuleCall)cOperatorAssignment_1_1_0_0.eContents().get(0);
		private final Assignment cOperandAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cOperandExpressionParserRuleCall_1_1_0_1_0 = (RuleCall)cOperandAssignment_1_1_0_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final Keyword cOperatorCommercialAtKeyword_1_1_1_0_0 = (Keyword)cOperatorAssignment_1_1_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Assignment cOperandAssignment_1_1_1_2 = (Assignment)cGroup_1_1_1.eContents().get(2);
		private final RuleCall cOperandExpressionParserRuleCall_1_1_1_2_0 = (RuleCall)cOperandAssignment_1_1_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_1_3 = (Keyword)cGroup_1_1_1.eContents().get(3);
		
		//BinaryExpression SysML::Expression:
		//	UnaryExpression ({SysML::OperatorExpression.operand+=current} (operator=BinaryOperator operand+=Expression |
		//	operator='@' '[' operand+=Expression ']'))?;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression ({SysML::OperatorExpression.operand+=current} (operator=BinaryOperator operand+=Expression |
		//operator='@' '[' operand+=Expression ']'))?
		public Group getGroup() { return cGroup; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand+=current} (operator=BinaryOperator operand+=Expression | operator='@' '['
		//operand+=Expression ']'))?
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand+=current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//operator=BinaryOperator operand+=Expression | operator='@' '[' operand+=Expression ']'
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//operator=BinaryOperator operand+=Expression
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//operator=BinaryOperator
		public Assignment getOperatorAssignment_1_1_0_0() { return cOperatorAssignment_1_1_0_0; }
		
		//BinaryOperator
		public RuleCall getOperatorBinaryOperatorParserRuleCall_1_1_0_0_0() { return cOperatorBinaryOperatorParserRuleCall_1_1_0_0_0; }
		
		//operand+=Expression
		public Assignment getOperandAssignment_1_1_0_1() { return cOperandAssignment_1_1_0_1; }
		
		//Expression
		public RuleCall getOperandExpressionParserRuleCall_1_1_0_1_0() { return cOperandExpressionParserRuleCall_1_1_0_1_0; }
		
		//operator='@' '[' operand+=Expression ']'
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//operator='@'
		public Assignment getOperatorAssignment_1_1_1_0() { return cOperatorAssignment_1_1_1_0; }
		
		//'@'
		public Keyword getOperatorCommercialAtKeyword_1_1_1_0_0() { return cOperatorCommercialAtKeyword_1_1_1_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_1_1() { return cLeftSquareBracketKeyword_1_1_1_1; }
		
		//operand+=Expression
		public Assignment getOperandAssignment_1_1_1_2() { return cOperandAssignment_1_1_1_2; }
		
		//Expression
		public RuleCall getOperandExpressionParserRuleCall_1_1_1_2_0() { return cOperandExpressionParserRuleCall_1_1_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_1_3() { return cRightSquareBracketKeyword_1_1_1_3; }
	}
	public class BinaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.BinaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCircumflexAccentKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//BinaryOperator:
		//	'+' | '-' | '*' | '/' | '^';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '*' | '/' | '^'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//'/'
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_4() { return cCircumflexAccentKeyword_4; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSequenceAccessExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOperatorExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorUnaryOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandSequenceAccessExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//UnaryExpression SysML::Expression:
		//	SequenceAccessExpression | {SysML::OperatorExpression} operator=UnaryOperator operand+=SequenceAccessExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//SequenceAccessExpression | {SysML::OperatorExpression} operator=UnaryOperator operand+=SequenceAccessExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SequenceAccessExpression
		public RuleCall getSequenceAccessExpressionParserRuleCall_0() { return cSequenceAccessExpressionParserRuleCall_0; }
		
		//{SysML::OperatorExpression} operator=UnaryOperator operand+=SequenceAccessExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression}
		public Action getOperatorExpressionAction_1_0() { return cOperatorExpressionAction_1_0; }
		
		//operator=UnaryOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//UnaryOperator
		public RuleCall getOperatorUnaryOperatorParserRuleCall_1_1_0() { return cOperatorUnaryOperatorParserRuleCall_1_1_0; }
		
		//operand+=SequenceAccessExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//SequenceAccessExpression
		public RuleCall getOperandSequenceAccessExpressionParserRuleCall_1_2_0() { return cOperandSequenceAccessExpressionParserRuleCall_1_2_0; }
	}
	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//UnaryOperator:
		//	'+' | '-';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class SequenceAccessExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.SequenceAccessExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSequenceAccessExpressionPrimaryAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIndexAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIndexExpressionParserRuleCall_1_2_0 = (RuleCall)cIndexAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//SequenceAccessExpression SysML::Expression:
		//	PrimaryExpression ({SysML::SequenceAccessExpression.primary=current} '[' index=Expression ']')*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression ({SysML::SequenceAccessExpression.primary=current} '[' index=Expression ']')*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//({SysML::SequenceAccessExpression.primary=current} '[' index=Expression ']')*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::SequenceAccessExpression.primary=current}
		public Action getSequenceAccessExpressionPrimaryAction_1_0() { return cSequenceAccessExpressionPrimaryAction_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//index=Expression
		public Assignment getIndexAssignment_1_2() { return cIndexAssignment_1_2; }
		
		//Expression
		public RuleCall getIndexExpressionParserRuleCall_1_2_0() { return cIndexExpressionParserRuleCall_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementReferenceExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInstanceCreationExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSequenceConstructionExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//PrimaryExpression SysML::Expression:
		//	LiteralExpression
		//	| ElementReferenceExpression
		//	| InstanceCreationExpression
		//	| SequenceConstructionExpression
		//	| '(' Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralExpression | ElementReferenceExpression | InstanceCreationExpression | SequenceConstructionExpression | '('
		//Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall_0() { return cLiteralExpressionParserRuleCall_0; }
		
		//ElementReferenceExpression
		public RuleCall getElementReferenceExpressionParserRuleCall_1() { return cElementReferenceExpressionParserRuleCall_1; }
		
		//InstanceCreationExpression
		public RuleCall getInstanceCreationExpressionParserRuleCall_2() { return cInstanceCreationExpressionParserRuleCall_2; }
		
		//SequenceConstructionExpression
		public RuleCall getSequenceConstructionExpressionParserRuleCall_3() { return cSequenceConstructionExpressionParserRuleCall_3; }
		
		//'(' Expression ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_4_1() { return cExpressionParserRuleCall_4_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}
	public class ElementReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.ElementReferenceExpression");
		private final Assignment cReferentAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferentElementCrossReference_0 = (CrossReference)cReferentAssignment.eContents().get(0);
		private final RuleCall cReferentElementQualifiedNameParserRuleCall_0_1 = (RuleCall)cReferentElementCrossReference_0.eContents().get(1);
		
		//ElementReferenceExpression SysML::ElementReferenceExpression:
		//	referent=[SysML::Element|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//referent=[SysML::Element|QualifiedName]
		public Assignment getReferentAssignment() { return cReferentAssignment; }
		
		//[SysML::Element|QualifiedName]
		public CrossReference getReferentElementCrossReference_0() { return cReferentElementCrossReference_0; }
		
		//QualifiedName
		public RuleCall getReferentElementQualifiedNameParserRuleCall_0_1() { return cReferentElementQualifiedNameParserRuleCall_0_1; }
	}
	public class InstanceCreationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.InstanceCreationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cClassClassCrossReference_0_0 = (CrossReference)cClassAssignment_0.eContents().get(0);
		private final RuleCall cClassClassQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cClassClassCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTupleParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InstanceCreationExpression SysML::InstanceCreationExpression:
		//	class=[SysML::Class|QualifiedName] '(' Tuple? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//class=[SysML::Class|QualifiedName] '(' Tuple? ')'
		public Group getGroup() { return cGroup; }
		
		//class=[SysML::Class|QualifiedName]
		public Assignment getClassAssignment_0() { return cClassAssignment_0; }
		
		//[SysML::Class|QualifiedName]
		public CrossReference getClassClassCrossReference_0_0() { return cClassClassCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getClassClassQualifiedNameParserRuleCall_0_0_1() { return cClassClassQualifiedNameParserRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Tuple?
		public RuleCall getTupleParserRuleCall_2() { return cTupleParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class TupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.Tuple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPositionalTupleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNamedTupleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//fragment Tuple returns SysML::InstanceCreationExpression:
		//	PositionalTuple | NamedTuple;
		@Override public ParserRule getRule() { return rule; }
		
		//PositionalTuple | NamedTuple
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PositionalTuple
		public RuleCall getPositionalTupleParserRuleCall_0() { return cPositionalTupleParserRuleCall_0; }
		
		//NamedTuple
		public RuleCall getNamedTupleParserRuleCall_1() { return cNamedTupleParserRuleCall_1; }
	}
	public class PositionalTupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.PositionalTuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentExpressionParserRuleCall_0_0 = (RuleCall)cArgumentAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentExpressionParserRuleCall_1_1_0 = (RuleCall)cArgumentAssignment_1_1.eContents().get(0);
		
		//fragment PositionalTuple returns SysML::InstanceCreationExpression:
		//	argument+=Expression (',' argument+=Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//argument+=Expression (',' argument+=Expression)*
		public Group getGroup() { return cGroup; }
		
		//argument+=Expression
		public Assignment getArgumentAssignment_0() { return cArgumentAssignment_0; }
		
		//Expression
		public RuleCall getArgumentExpressionParserRuleCall_0_0() { return cArgumentExpressionParserRuleCall_0_0; }
		
		//(',' argument+=Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//argument+=Expression
		public Assignment getArgumentAssignment_1_1() { return cArgumentAssignment_1_1; }
		
		//Expression
		public RuleCall getArgumentExpressionParserRuleCall_1_1_0() { return cArgumentExpressionParserRuleCall_1_1_0; }
	}
	public class NamedTupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.NamedTuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentExpressionParserRuleCall_2_0 = (RuleCall)cArgumentAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cNameParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cArgumentAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cArgumentExpressionParserRuleCall_3_3_0 = (RuleCall)cArgumentAssignment_3_3.eContents().get(0);
		
		//fragment NamedTuple returns SysML::InstanceCreationExpression:
		//	Name '=>' argument+=Expression (',' Name '=>' argument+=Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Name '=>' argument+=Expression (',' Name '=>' argument+=Expression)*
		public Group getGroup() { return cGroup; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//argument+=Expression
		public Assignment getArgumentAssignment_2() { return cArgumentAssignment_2; }
		
		//Expression
		public RuleCall getArgumentExpressionParserRuleCall_2_0() { return cArgumentExpressionParserRuleCall_2_0; }
		
		//(',' Name '=>' argument+=Expression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//Name
		public RuleCall getNameParserRuleCall_3_1() { return cNameParserRuleCall_3_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_3_2() { return cEqualsSignGreaterThanSignKeyword_3_2; }
		
		//argument+=Expression
		public Assignment getArgumentAssignment_3_3() { return cArgumentAssignment_3_3; }
		
		//Expression
		public RuleCall getArgumentExpressionParserRuleCall_3_3_0() { return cArgumentExpressionParserRuleCall_3_3_0; }
	}
	public class SequenceConstructionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.SequenceConstructionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSequenceConstructionExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementExpressionParserRuleCall_2_0_0 = (RuleCall)cElementAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementExpressionParserRuleCall_2_1_1_0 = (RuleCall)cElementAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SequenceConstructionExpression SysML::SequenceConstructionExpression:
		//	{SysML::SequenceConstructionExpression} '{' (element+=Expression (',' element+=Expression)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::SequenceConstructionExpression} '{' (element+=Expression (',' element+=Expression)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{SysML::SequenceConstructionExpression}
		public Action getSequenceConstructionExpressionAction_0() { return cSequenceConstructionExpressionAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(element+=Expression (',' element+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//element+=Expression
		public Assignment getElementAssignment_2_0() { return cElementAssignment_2_0; }
		
		//Expression
		public RuleCall getElementExpressionParserRuleCall_2_0_0() { return cElementExpressionParserRuleCall_2_0_0; }
		
		//(',' element+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//element+=Expression
		public Assignment getElementAssignment_2_1_1() { return cElementAssignment_2_1_1; }
		
		//Expression
		public RuleCall getElementExpressionParserRuleCall_2_1_1_0() { return cElementExpressionParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.LiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNullLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanLiteralExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRealLiteralExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUnlimitedNaturalLiteralExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//LiteralExpression SysML::Expression:
		//	NullLiteralExpression | BooleanLiteralExpression | StringLiteralExpression | RealLiteralExpression |
		//	UnlimitedNaturalLiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//NullLiteralExpression | BooleanLiteralExpression | StringLiteralExpression | RealLiteralExpression |
		//UnlimitedNaturalLiteralExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NullLiteralExpression
		public RuleCall getNullLiteralExpressionParserRuleCall_0() { return cNullLiteralExpressionParserRuleCall_0; }
		
		//BooleanLiteralExpression
		public RuleCall getBooleanLiteralExpressionParserRuleCall_1() { return cBooleanLiteralExpressionParserRuleCall_1; }
		
		//StringLiteralExpression
		public RuleCall getStringLiteralExpressionParserRuleCall_2() { return cStringLiteralExpressionParserRuleCall_2; }
		
		//RealLiteralExpression
		public RuleCall getRealLiteralExpressionParserRuleCall_3() { return cRealLiteralExpressionParserRuleCall_3; }
		
		//UnlimitedNaturalLiteralExpression
		public RuleCall getUnlimitedNaturalLiteralExpressionParserRuleCall_4() { return cUnlimitedNaturalLiteralExpressionParserRuleCall_4; }
	}
	public class NullLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.NullLiteralExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralNullAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullLiteralExpression SysML::LiteralNull:
		//	{SysML::LiteralNull} 'null';
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::LiteralNull} 'null'
		public Group getGroup() { return cGroup; }
		
		//{SysML::LiteralNull}
		public Action getLiteralNullAction_0() { return cLiteralNullAction_0; }
		
		//'null'
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}
	public class BooleanLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.BooleanLiteralExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLEAN_VALUETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanLiteralExpression SysML::LiteralBoolean:
		//	value=BOOLEAN_VALUE;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BOOLEAN_VALUE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BOOLEAN_VALUE
		public RuleCall getValueBOOLEAN_VALUETerminalRuleCall_0() { return cValueBOOLEAN_VALUETerminalRuleCall_0; }
	}
	public class StringLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.StringLiteralExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRING_VALUETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteralExpression SysML::LiteralString:
		//	value=STRING_VALUE;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING_VALUE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING_VALUE
		public RuleCall getValueSTRING_VALUETerminalRuleCall_0() { return cValueSTRING_VALUETerminalRuleCall_0; }
	}
	public class RealLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.RealLiteralExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueRealValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//RealLiteralExpression SysML::LiteralReal:
		//	value=RealValue;
		@Override public ParserRule getRule() { return rule; }
		
		//value=RealValue
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//RealValue
		public RuleCall getValueRealValueParserRuleCall_0() { return cValueRealValueParserRuleCall_0; }
	}
	public class RealValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.RealValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cNATURAL_VALUETerminalRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final RuleCall cNATURAL_VALUETerminalRuleCall_0_0_2 = (RuleCall)cGroup_0_0.eContents().get(2);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cNATURAL_VALUETerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cEKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cEKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cNATURAL_VALUETerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//RealValue Ecore::EDouble:
		//	(NATURAL_VALUE '.' NATURAL_VALUE? | '.' NATURAL_VALUE) (('e' | 'E') ('+' | '-')? NATURAL_VALUE)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(NATURAL_VALUE '.' NATURAL_VALUE? | '.' NATURAL_VALUE) (('e' | 'E') ('+' | '-')? NATURAL_VALUE)?
		public Group getGroup() { return cGroup; }
		
		//NATURAL_VALUE '.' NATURAL_VALUE? | '.' NATURAL_VALUE
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//NATURAL_VALUE '.' NATURAL_VALUE?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//NATURAL_VALUE
		public RuleCall getNATURAL_VALUETerminalRuleCall_0_0_0() { return cNATURAL_VALUETerminalRuleCall_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_0_1() { return cFullStopKeyword_0_0_1; }
		
		//NATURAL_VALUE?
		public RuleCall getNATURAL_VALUETerminalRuleCall_0_0_2() { return cNATURAL_VALUETerminalRuleCall_0_0_2; }
		
		//'.' NATURAL_VALUE
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1_0() { return cFullStopKeyword_0_1_0; }
		
		//NATURAL_VALUE
		public RuleCall getNATURAL_VALUETerminalRuleCall_0_1_1() { return cNATURAL_VALUETerminalRuleCall_0_1_1; }
		
		//(('e' | 'E') ('+' | '-')? NATURAL_VALUE)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'e' | 'E'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'e'
		public Keyword getEKeyword_1_0_0() { return cEKeyword_1_0_0; }
		
		//'E'
		public Keyword getEKeyword_1_0_1() { return cEKeyword_1_0_1; }
		
		//('+' | '-')?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_1_0() { return cPlusSignKeyword_1_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1_1() { return cHyphenMinusKeyword_1_1_1; }
		
		//NATURAL_VALUE
		public RuleCall getNATURAL_VALUETerminalRuleCall_1_2() { return cNATURAL_VALUETerminalRuleCall_1_2; }
	}
	public class NaturalLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.NaturalLiteralExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNATURAL_VALUETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NaturalLiteralExpression SysML::LiteralInteger:
		//	value=NATURAL_VALUE;
		@Override public ParserRule getRule() { return rule; }
		
		//value=NATURAL_VALUE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//NATURAL_VALUE
		public RuleCall getValueNATURAL_VALUETerminalRuleCall_0() { return cValueNATURAL_VALUETerminalRuleCall_0; }
	}
	public class UnlimitedNaturalLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.UnlimitedNaturalLiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNaturalLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLiteralUnboundedAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//UnlimitedNaturalLiteralExpression SysML::Expression:
		//	NaturalLiteralExpression | {SysML::LiteralUnbounded} '*';
		@Override public ParserRule getRule() { return rule; }
		
		//NaturalLiteralExpression | {SysML::LiteralUnbounded} '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NaturalLiteralExpression
		public RuleCall getNaturalLiteralExpressionParserRuleCall_0() { return cNaturalLiteralExpressionParserRuleCall_0; }
		
		//{SysML::LiteralUnbounded} '*'
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::LiteralUnbounded}
		public Action getLiteralUnboundedAction_1_0() { return cLiteralUnboundedAction_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUNRESTRICTED_NAMETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* NAMES */ Name:
		//	ID | UNRESTRICTED_NAME;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | UNRESTRICTED_NAME
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//UNRESTRICTED_NAME
		public RuleCall getUNRESTRICTED_NAMETerminalRuleCall_1() { return cUNRESTRICTED_NAMETerminalRuleCall_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.QualifiedName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColonQualifiedNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDotQualifiedNameParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//QualifiedName:
		//	Name | ColonQualifiedName | DotQualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//Name | ColonQualifiedName | DotQualifiedName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//ColonQualifiedName
		public RuleCall getColonQualifiedNameParserRuleCall_1() { return cColonQualifiedNameParserRuleCall_1; }
		
		//DotQualifiedName
		public RuleCall getDotQualifiedNameParserRuleCall_2() { return cDotQualifiedNameParserRuleCall_2; }
	}
	public class ColonQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.ColonQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ColonQualifiedName:
		//	Name ('::' Name)+;
		@Override public ParserRule getRule() { return rule; }
		
		//Name ('::' Name)+
		public Group getGroup() { return cGroup; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//('::' Name)+
		public Group getGroup_1() { return cGroup_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }
		
		//Name
		public RuleCall getNameParserRuleCall_1_1() { return cNameParserRuleCall_1_1; }
	}
	public class DotQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.DotQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//DotQualifiedName:
		//	Name ('.' Name)+;
		@Override public ParserRule getRule() { return rule; }
		
		//Name ('.' Name)+
		public Group getGroup() { return cGroup; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//('.' Name)+
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//Name
		public RuleCall getNameParserRuleCall_1_1() { return cNameParserRuleCall_1_1; }
	}
	
	public class PackageElementVisibilityIndicatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.PackageElementVisibilityIndicator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_0 = (Keyword)cPrivateEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum PackageElementVisibilityIndicator returns SysML::VisibilityKind:
		//	public | private;
		public EnumRule getRule() { return rule; }
		
		//public | private
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }
		
		//'public'
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }
		
		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_1() { return cPrivateEnumLiteralDeclaration_1; }
		
		//'private'
		public Keyword getPrivatePrivateKeyword_1_0() { return cPrivatePrivateKeyword_1_0; }
	}
	public class VisibilityIndicatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.VisibilityIndicator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_0 = (Keyword)cPrivateEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cProtectedProtectedKeyword_2_0 = (Keyword)cProtectedEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPackageEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPackagePackagedKeyword_3_0 = (Keyword)cPackageEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum VisibilityIndicator returns SysML::VisibilityKind:
		//	public | private | protected | package='packaged';
		public EnumRule getRule() { return rule; }
		
		//public | private | protected | package='packaged'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }
		
		//'public'
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }
		
		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_1() { return cPrivateEnumLiteralDeclaration_1; }
		
		//'private'
		public Keyword getPrivatePrivateKeyword_1_0() { return cPrivatePrivateKeyword_1_0; }
		
		//protected
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_2() { return cProtectedEnumLiteralDeclaration_2; }
		
		//'protected'
		public Keyword getProtectedProtectedKeyword_2_0() { return cProtectedProtectedKeyword_2_0; }
		
		//package='packaged'
		public EnumLiteralDeclaration getPackageEnumLiteralDeclaration_3() { return cPackageEnumLiteralDeclaration_3; }
		
		//'packaged'
		public Keyword getPackagePackagedKeyword_3_0() { return cPackagePackagedKeyword_3_0; }
	}
	public class FeatureDirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.FeatureDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInInKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOutOutKeyword_1_0 = (Keyword)cOutEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInoutEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInoutInoutKeyword_2_0 = (Keyword)cInoutEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum FeatureDirection returns SysML::FeatureDirectionKind:
		//	in | out | inout;
		public EnumRule getRule() { return rule; }
		
		//in | out | inout
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }
		
		//'in'
		public Keyword getInInKeyword_0_0() { return cInInKeyword_0_0; }
		
		//out
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration_1() { return cOutEnumLiteralDeclaration_1; }
		
		//'out'
		public Keyword getOutOutKeyword_1_0() { return cOutOutKeyword_1_0; }
		
		//inout
		public EnumLiteralDeclaration getInoutEnumLiteralDeclaration_2() { return cInoutEnumLiteralDeclaration_2; }
		
		//'inout'
		public Keyword getInoutInoutKeyword_2_0() { return cInoutInoutKeyword_2_0; }
	}
	
	private final UnitDefinitionElements pUnitDefinition;
	private final PackageUnitDefinitionElements pPackageUnitDefinition;
	private final ClassUnitDefinitionElements pClassUnitDefinition;
	private final AssociationUnitDefinitionElements pAssociationUnitDefinition;
	private final FeatureUnitDefinitionElements pFeatureUnitDefinition;
	private final UnitPrefixElements pUnitPrefix;
	private final PackageElementVisibilityIndicatorElements ePackageElementVisibilityIndicator;
	private final VisibilityIndicatorElements eVisibilityIndicator;
	private final CommentElements pComment;
	private final PackageImportElements pPackageImport;
	private final ElementImportElements pElementImport;
	private final NonFeatureDefinitionElements pNonFeatureDefinition;
	private final PackageDefinitionOrStubElements pPackageDefinitionOrStub;
	private final PackageDefinitionElements pPackageDefinition;
	private final PackageMemberElements pPackageMember;
	private final NonFeatureMemberElementElements pNonFeatureMemberElement;
	private final FeaturePackageMemberElementElements pFeaturePackageMemberElement;
	private final ClassDefinitionOrStubElements pClassDefinitionOrStub;
	private final ClassDefinitionElements pClassDefinition;
	private final ClassDeclarationElements pClassDeclaration;
	private final ClassBodyElements pClassBody;
	private final GeneralizationElements pGeneralization;
	private final ClassMemberElements pClassMember;
	private final NonFeatureClassMemberElements pNonFeatureClassMember;
	private final FeatureClassMemberElements pFeatureClassMember;
	private final FeatureMemberElementElements pFeatureMemberElement;
	private final FeatureDirectionElements eFeatureDirection;
	private final AssociationDefinitionOrStubElements pAssociationDefinitionOrStub;
	private final AssociationDefinitionElements pAssociationDefinition;
	private final AssociationDeclarationElements pAssociationDeclaration;
	private final AssociationBodyElements pAssociationBody;
	private final AssociationMemberElements pAssociationMember;
	private final AssociationFeatureMemberElements pAssociationFeatureMember;
	private final AssociationEndFeatureMemberElements pAssociationEndFeatureMember;
	private final FeatureDefinitionElements pFeatureDefinition;
	private final NamedFeatureDefinitionElements pNamedFeatureDefinition;
	private final UnnamedFeatureDefinitionElements pUnnamedFeatureDefinition;
	private final FeatureBodyDefinitionElements pFeatureBodyDefinition;
	private final FeatureDeclarationElements pFeatureDeclaration;
	private final FeatureCompletionElements pFeatureCompletion;
	private final TypePartElements pTypePart;
	private final MultiplicityElements pMultiplicity;
	private final SubsetOrRedefinitionElements pSubsetOrRedefinition;
	private final RedefinitionElements pRedefinition;
	private final SubsetElements pSubset;
	private final ConnectorDefinitionElements pConnectorDefinition;
	private final ConnectorEndElements pConnectorEnd;
	private final ConnectorEndMultiplicityElements pConnectorEndMultiplicity;
	private final ExpressionElements pExpression;
	private final BinaryExpressionElements pBinaryExpression;
	private final BinaryOperatorElements pBinaryOperator;
	private final UnaryExpressionElements pUnaryExpression;
	private final UnaryOperatorElements pUnaryOperator;
	private final SequenceAccessExpressionElements pSequenceAccessExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final ElementReferenceExpressionElements pElementReferenceExpression;
	private final InstanceCreationExpressionElements pInstanceCreationExpression;
	private final TupleElements pTuple;
	private final PositionalTupleElements pPositionalTuple;
	private final NamedTupleElements pNamedTuple;
	private final SequenceConstructionExpressionElements pSequenceConstructionExpression;
	private final LiteralExpressionElements pLiteralExpression;
	private final NullLiteralExpressionElements pNullLiteralExpression;
	private final BooleanLiteralExpressionElements pBooleanLiteralExpression;
	private final StringLiteralExpressionElements pStringLiteralExpression;
	private final RealLiteralExpressionElements pRealLiteralExpression;
	private final RealValueElements pRealValue;
	private final NaturalLiteralExpressionElements pNaturalLiteralExpression;
	private final UnlimitedNaturalLiteralExpressionElements pUnlimitedNaturalLiteralExpression;
	private final NameElements pName;
	private final QualifiedNameElements pQualifiedName;
	private final ColonQualifiedNameElements pColonQualifiedName;
	private final DotQualifiedNameElements pDotQualifiedName;
	private final TerminalRule tBOOLEAN_VALUE;
	private final TerminalRule tNATURAL_VALUE;
	private final TerminalRule tID;
	private final TerminalRule tUNRESTRICTED_NAME;
	private final TerminalRule tSTRING_VALUE;
	private final TerminalRule tDOCUMENTATION_COMMENT;
	private final TerminalRule tSTATEMENT_ANNOTATION;
	private final TerminalRule tINLINE_STATEMENT;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public AlfGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pUnitDefinition = new UnitDefinitionElements();
		this.pPackageUnitDefinition = new PackageUnitDefinitionElements();
		this.pClassUnitDefinition = new ClassUnitDefinitionElements();
		this.pAssociationUnitDefinition = new AssociationUnitDefinitionElements();
		this.pFeatureUnitDefinition = new FeatureUnitDefinitionElements();
		this.pUnitPrefix = new UnitPrefixElements();
		this.ePackageElementVisibilityIndicator = new PackageElementVisibilityIndicatorElements();
		this.eVisibilityIndicator = new VisibilityIndicatorElements();
		this.pComment = new CommentElements();
		this.pPackageImport = new PackageImportElements();
		this.pElementImport = new ElementImportElements();
		this.pNonFeatureDefinition = new NonFeatureDefinitionElements();
		this.pPackageDefinitionOrStub = new PackageDefinitionOrStubElements();
		this.pPackageDefinition = new PackageDefinitionElements();
		this.pPackageMember = new PackageMemberElements();
		this.pNonFeatureMemberElement = new NonFeatureMemberElementElements();
		this.pFeaturePackageMemberElement = new FeaturePackageMemberElementElements();
		this.pClassDefinitionOrStub = new ClassDefinitionOrStubElements();
		this.pClassDefinition = new ClassDefinitionElements();
		this.pClassDeclaration = new ClassDeclarationElements();
		this.pClassBody = new ClassBodyElements();
		this.pGeneralization = new GeneralizationElements();
		this.pClassMember = new ClassMemberElements();
		this.pNonFeatureClassMember = new NonFeatureClassMemberElements();
		this.pFeatureClassMember = new FeatureClassMemberElements();
		this.pFeatureMemberElement = new FeatureMemberElementElements();
		this.eFeatureDirection = new FeatureDirectionElements();
		this.pAssociationDefinitionOrStub = new AssociationDefinitionOrStubElements();
		this.pAssociationDefinition = new AssociationDefinitionElements();
		this.pAssociationDeclaration = new AssociationDeclarationElements();
		this.pAssociationBody = new AssociationBodyElements();
		this.pAssociationMember = new AssociationMemberElements();
		this.pAssociationFeatureMember = new AssociationFeatureMemberElements();
		this.pAssociationEndFeatureMember = new AssociationEndFeatureMemberElements();
		this.pFeatureDefinition = new FeatureDefinitionElements();
		this.pNamedFeatureDefinition = new NamedFeatureDefinitionElements();
		this.pUnnamedFeatureDefinition = new UnnamedFeatureDefinitionElements();
		this.pFeatureBodyDefinition = new FeatureBodyDefinitionElements();
		this.pFeatureDeclaration = new FeatureDeclarationElements();
		this.pFeatureCompletion = new FeatureCompletionElements();
		this.pTypePart = new TypePartElements();
		this.pMultiplicity = new MultiplicityElements();
		this.pSubsetOrRedefinition = new SubsetOrRedefinitionElements();
		this.pRedefinition = new RedefinitionElements();
		this.pSubset = new SubsetElements();
		this.pConnectorDefinition = new ConnectorDefinitionElements();
		this.pConnectorEnd = new ConnectorEndElements();
		this.pConnectorEndMultiplicity = new ConnectorEndMultiplicityElements();
		this.pExpression = new ExpressionElements();
		this.pBinaryExpression = new BinaryExpressionElements();
		this.pBinaryOperator = new BinaryOperatorElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pUnaryOperator = new UnaryOperatorElements();
		this.pSequenceAccessExpression = new SequenceAccessExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pElementReferenceExpression = new ElementReferenceExpressionElements();
		this.pInstanceCreationExpression = new InstanceCreationExpressionElements();
		this.pTuple = new TupleElements();
		this.pPositionalTuple = new PositionalTupleElements();
		this.pNamedTuple = new NamedTupleElements();
		this.pSequenceConstructionExpression = new SequenceConstructionExpressionElements();
		this.pLiteralExpression = new LiteralExpressionElements();
		this.pNullLiteralExpression = new NullLiteralExpressionElements();
		this.pBooleanLiteralExpression = new BooleanLiteralExpressionElements();
		this.pStringLiteralExpression = new StringLiteralExpressionElements();
		this.pRealLiteralExpression = new RealLiteralExpressionElements();
		this.pRealValue = new RealValueElements();
		this.pNaturalLiteralExpression = new NaturalLiteralExpressionElements();
		this.pUnlimitedNaturalLiteralExpression = new UnlimitedNaturalLiteralExpressionElements();
		this.pName = new NameElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pColonQualifiedName = new ColonQualifiedNameElements();
		this.pDotQualifiedName = new DotQualifiedNameElements();
		this.tBOOLEAN_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.BOOLEAN_VALUE");
		this.tNATURAL_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.NATURAL_VALUE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.ID");
		this.tUNRESTRICTED_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.UNRESTRICTED_NAME");
		this.tSTRING_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.STRING_VALUE");
		this.tDOCUMENTATION_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.DOCUMENTATION_COMMENT");
		this.tSTATEMENT_ANNOTATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.STATEMENT_ANNOTATION");
		this.tINLINE_STATEMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.INLINE_STATEMENT");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.omg.sysml.Alf".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	///* UNITS */ UnitDefinition SysML::Package:
	//	PackageUnitDefinition
	//	| ClassUnitDefinition
	//	| AssociationUnitDefinition
	//	| FeatureUnitDefinition;
	public UnitDefinitionElements getUnitDefinitionAccess() {
		return pUnitDefinition;
	}
	
	public ParserRule getUnitDefinitionRule() {
		return getUnitDefinitionAccess().getRule();
	}
	
	//PackageUnitDefinition SysML::Package:
	//	UnitPrefix PackageDefinition;
	public PackageUnitDefinitionElements getPackageUnitDefinitionAccess() {
		return pPackageUnitDefinition;
	}
	
	public ParserRule getPackageUnitDefinitionRule() {
		return getPackageUnitDefinitionAccess().getRule();
	}
	
	//ClassUnitDefinition SysML::Class:
	//	UnitPrefix ClassDefinition;
	public ClassUnitDefinitionElements getClassUnitDefinitionAccess() {
		return pClassUnitDefinition;
	}
	
	public ParserRule getClassUnitDefinitionRule() {
		return getClassUnitDefinitionAccess().getRule();
	}
	
	//AssociationUnitDefinition SysML::Association:
	//	UnitPrefix AssociationDefinition;
	public AssociationUnitDefinitionElements getAssociationUnitDefinitionAccess() {
		return pAssociationUnitDefinition;
	}
	
	public ParserRule getAssociationUnitDefinitionRule() {
		return getAssociationUnitDefinitionAccess().getRule();
	}
	
	//FeatureUnitDefinition SysML::Feature:
	//	UnitPrefix FeatureBodyDefinition;
	public FeatureUnitDefinitionElements getFeatureUnitDefinitionAccess() {
		return pFeatureUnitDefinition;
	}
	
	public ParserRule getFeatureUnitDefinitionRule() {
		return getFeatureUnitDefinitionAccess().getRule();
	}
	
	//fragment UnitPrefix returns SysML::Package:
	//	(ownedImport+=PackageImport
	//	| ownedMembership+=ElementImport)*
	//	ownedElement+=Comment*;
	public UnitPrefixElements getUnitPrefixAccess() {
		return pUnitPrefix;
	}
	
	public ParserRule getUnitPrefixRule() {
		return getUnitPrefixAccess().getRule();
	}
	
	//enum PackageElementVisibilityIndicator returns SysML::VisibilityKind:
	//	public | private;
	public PackageElementVisibilityIndicatorElements getPackageElementVisibilityIndicatorAccess() {
		return ePackageElementVisibilityIndicator;
	}
	
	public EnumRule getPackageElementVisibilityIndicatorRule() {
		return getPackageElementVisibilityIndicatorAccess().getRule();
	}
	
	//enum VisibilityIndicator returns SysML::VisibilityKind:
	//	public | private | protected | package='packaged';
	public VisibilityIndicatorElements getVisibilityIndicatorAccess() {
		return eVisibilityIndicator;
	}
	
	public EnumRule getVisibilityIndicatorRule() {
		return getVisibilityIndicatorAccess().getRule();
	}
	
	///* COMMENTS */ Comment SysML::Comment:
	//	body=DOCUMENTATION_COMMENT;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	///* IMPORTS */ PackageImport SysML::Import:
	//	visibility=PackageElementVisibilityIndicator?
	//	'import' (importedPackage=[SysML::Package|Name] ('::' | '.') '*'
	//	| importedPackage=[SysML::Package|ColonQualifiedName] '::' '*'
	//	| importedPackage=[SysML::Package|DotQualifiedName] '.' '*') ';';
	public PackageImportElements getPackageImportAccess() {
		return pPackageImport;
	}
	
	public ParserRule getPackageImportRule() {
		return getPackageImportAccess().getRule();
	}
	
	//ElementImport SysML::Membership:
	//	visibility=PackageElementVisibilityIndicator?
	//	'import' memberElement=[SysML::Element|QualifiedName] ('as' memberName=Name)? ';';
	public ElementImportElements getElementImportAccess() {
		return pElementImport;
	}
	
	public ParserRule getElementImportRule() {
		return getElementImportAccess().getRule();
	}
	
	///* PACKAGES */ NonFeatureDefinition SysML::Package:
	//	PackageDefinitionOrStub | ClassDefinitionOrStub | AssociationDefinitionOrStub;
	public NonFeatureDefinitionElements getNonFeatureDefinitionAccess() {
		return pNonFeatureDefinition;
	}
	
	public ParserRule getNonFeatureDefinitionRule() {
		return getNonFeatureDefinitionAccess().getRule();
	}
	
	//PackageDefinitionOrStub SysML::Package:
	//	PackageDefinition
	//	//	'package' name = Name ( isStub ?= ';' | '{' ( ownedMembership += PackageMember )* '}' )
	//;
	public PackageDefinitionOrStubElements getPackageDefinitionOrStubAccess() {
		return pPackageDefinitionOrStub;
	}
	
	public ParserRule getPackageDefinitionOrStubRule() {
		return getPackageDefinitionOrStubAccess().getRule();
	}
	
	//fragment PackageDefinition returns SysML::Package:
	//	'package' name=Name '{' (ownedMembership+=PackageMember | ownedImport+=PackageImport)* '}';
	public PackageDefinitionElements getPackageDefinitionAccess() {
		return pPackageDefinition;
	}
	
	public ParserRule getPackageDefinitionRule() {
		return getPackageDefinitionAccess().getRule();
	}
	
	///* PACKAGE MEMBERSHIPS */ PackageMember SysML::Membership:
	//	ownedElement+=Comment*
	//	//  ( annotation += StereotypeAnnotation )*
	//	visibility=PackageElementVisibilityIndicator? (NonFeatureMemberElement
	//	| FeaturePackageMemberElement);
	public PackageMemberElements getPackageMemberAccess() {
		return pPackageMember;
	}
	
	public ParserRule getPackageMemberRule() {
		return getPackageMemberAccess().getRule();
	}
	
	//fragment NonFeatureMemberElement returns SysML::Membership:
	//	ownedMemberElement=NonFeatureDefinition
	//	| 'package' memberName=Name? 'is' memberElement=[SysML::Package|QualifiedName] ';'
	//	| 'class' memberName=Name? 'is' memberElement=[SysML::Class|QualifiedName] ';'
	//	| 'assoc' memberName=Name? 'is' memberElement=[SysML::Association|QualifiedName] ';'
	//	| 'import' memberElement=[SysML::Element|QualifiedName] ('as' memberName=Name)? ';';
	public NonFeatureMemberElementElements getNonFeatureMemberElementAccess() {
		return pNonFeatureMemberElement;
	}
	
	public ParserRule getNonFeatureMemberElementRule() {
		return getNonFeatureMemberElementAccess().getRule();
	}
	
	////NonFeatureMemberKind :
	////	'package' | 'class' | 'assoc'
	////;
	//fragment FeaturePackageMemberElement returns SysML::Membership:
	//	'feature'? ownedMemberElement=NamedFeatureDefinition
	//	| 'feature' ownedMemberElement=UnnamedFeatureDefinition
	//	| ('feature' memberName=Name? | memberName=Name) 'is' memberElement=[SysML::Feature|QualifiedName] ';';
	public FeaturePackageMemberElementElements getFeaturePackageMemberElementAccess() {
		return pFeaturePackageMemberElement;
	}
	
	public ParserRule getFeaturePackageMemberElementRule() {
		return getFeaturePackageMemberElementAccess().getRule();
	}
	
	///* CLASSES */ ClassDefinitionOrStub SysML::Class:
	//	ClassDefinition
	//	//	ClassDeclaration ( isStub ?= ';' | ClassBody '}' )
	//;
	public ClassDefinitionOrStubElements getClassDefinitionOrStubAccess() {
		return pClassDefinitionOrStub;
	}
	
	public ParserRule getClassDefinitionOrStubRule() {
		return getClassDefinitionOrStubAccess().getRule();
	}
	
	//fragment ClassDefinition returns SysML::Class:
	//	ClassDeclaration ClassBody;
	public ClassDefinitionElements getClassDefinitionAccess() {
		return pClassDefinition;
	}
	
	public ParserRule getClassDefinitionRule() {
		return getClassDefinitionAccess().getRule();
	}
	
	//fragment ClassDeclaration returns SysML::Class:
	//	isAbstract?='abstract'? 'class' name=Name ('specializes' ownedElement+=Generalization (','
	//	ownedElement+=Generalization)*)?;
	public ClassDeclarationElements getClassDeclarationAccess() {
		return pClassDeclaration;
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}
	
	//fragment ClassBody returns SysML::Class:
	//	'{' (ownedMembership+=ClassMember | ownedImport+=PackageImport)* '}';
	public ClassBodyElements getClassBodyAccess() {
		return pClassBody;
	}
	
	public ParserRule getClassBodyRule() {
		return getClassBodyAccess().getRule();
	}
	
	//Generalization SysML::Generalization:
	//	general=[SysML::Class|QualifiedName];
	public GeneralizationElements getGeneralizationAccess() {
		return pGeneralization;
	}
	
	public ParserRule getGeneralizationRule() {
		return getGeneralizationAccess().getRule();
	}
	
	///* CLASS MEMBERSHIPS */ ClassMember SysML::Membership:
	//	NonFeatureClassMember | FeatureClassMember;
	public ClassMemberElements getClassMemberAccess() {
		return pClassMember;
	}
	
	public ParserRule getClassMemberRule() {
		return getClassMemberAccess().getRule();
	}
	
	//NonFeatureClassMember SysML::Membership:
	//	ownedElement+=Comment*
	//	//  ( annotation += StereotypeAnnotation )*
	//	visibility=VisibilityIndicator?
	//	NonFeatureMemberElement;
	public NonFeatureClassMemberElements getNonFeatureClassMemberAccess() {
		return pNonFeatureClassMember;
	}
	
	public ParserRule getNonFeatureClassMemberRule() {
		return getNonFeatureClassMemberAccess().getRule();
	}
	
	//FeatureClassMember SysML::FeatureMembership:
	//	ownedElement+=Comment*
	//	//  ( annotation += StereotypeAnnotation )*
	//	visibility=VisibilityIndicator? (FeatureMemberElement
	//	// These alternatives are provided for legacy Alf backwards compatibility.	
	//	| direction=FeatureDirection? ownedMemberElement=NamedFeatureDefinition
	//	| memberName=Name 'is' memberElement=[SysML::Feature|QualifiedName] ';');
	public FeatureClassMemberElements getFeatureClassMemberAccess() {
		return pFeatureClassMember;
	}
	
	public ParserRule getFeatureClassMemberRule() {
		return getFeatureClassMemberAccess().getRule();
	}
	
	//fragment FeatureMemberElement returns SysML::FeatureMembership:
	//	('feature' | isComposite?='part' | isPort?='port') direction=FeatureDirection? ownedMemberElement=FeatureDefinition
	//	| ('feature' | isComposite?='part') memberName=Name? 'is' memberElement=[SysML::Feature|QualifiedName] ';'
	//	| 'connector' ownedMemberElement=ConnectorDefinition
	//	| 'connector' memberName=Name? 'is' memberElement=[SysML::Connector|QualifiedName] ';';
	public FeatureMemberElementElements getFeatureMemberElementAccess() {
		return pFeatureMemberElement;
	}
	
	public ParserRule getFeatureMemberElementRule() {
		return getFeatureMemberElementAccess().getRule();
	}
	
	//enum FeatureDirection returns SysML::FeatureDirectionKind:
	//	in | out | inout;
	public FeatureDirectionElements getFeatureDirectionAccess() {
		return eFeatureDirection;
	}
	
	public EnumRule getFeatureDirectionRule() {
		return getFeatureDirectionAccess().getRule();
	}
	
	///* ASSOCIATIONS */ AssociationDefinitionOrStub SysML::Association:
	//	AssociationDefinition
	//	// AssociationDeclaration { isStub = ';' | AssociationBody }
	//;
	public AssociationDefinitionOrStubElements getAssociationDefinitionOrStubAccess() {
		return pAssociationDefinitionOrStub;
	}
	
	public ParserRule getAssociationDefinitionOrStubRule() {
		return getAssociationDefinitionOrStubAccess().getRule();
	}
	
	//fragment AssociationDefinition returns SysML::Association:
	//	AssociationDeclaration AssociationBody;
	public AssociationDefinitionElements getAssociationDefinitionAccess() {
		return pAssociationDefinition;
	}
	
	public ParserRule getAssociationDefinitionRule() {
		return getAssociationDefinitionAccess().getRule();
	}
	
	//fragment AssociationDeclaration returns SysML::Association:
	//	isAbstract?='abstract'? 'assoc' name=Name ('specializes' ownedElement+=Generalization (','
	//	ownedElement+=Generalization)*)?;
	public AssociationDeclarationElements getAssociationDeclarationAccess() {
		return pAssociationDeclaration;
	}
	
	public ParserRule getAssociationDeclarationRule() {
		return getAssociationDeclarationAccess().getRule();
	}
	
	//fragment AssociationBody returns SysML::Association:
	//	'{' (ownedMembership+=AssociationMember | ownedImport+=PackageImport)* '}';
	public AssociationBodyElements getAssociationBodyAccess() {
		return pAssociationBody;
	}
	
	public ParserRule getAssociationBodyRule() {
		return getAssociationBodyAccess().getRule();
	}
	
	///* ASSOCIATION MEMBERSHIPS */ AssociationMember SysML::Membership:
	//	NonFeatureClassMember | AssociationFeatureMember | AssociationEndFeatureMember;
	public AssociationMemberElements getAssociationMemberAccess() {
		return pAssociationMember;
	}
	
	public ParserRule getAssociationMemberRule() {
		return getAssociationMemberAccess().getRule();
	}
	
	//AssociationFeatureMember SysML::FeatureMembership:
	//	ownedElement+=Comment*
	//	//  ( annotation += StereotypeAnnotation )*
	//	visibility=VisibilityIndicator?
	//	FeatureMemberElement;
	public AssociationFeatureMemberElements getAssociationFeatureMemberAccess() {
		return pAssociationFeatureMember;
	}
	
	public ParserRule getAssociationFeatureMemberRule() {
		return getAssociationFeatureMemberAccess().getRule();
	}
	
	//AssociationEndFeatureMember SysML::EndFeatureMembership:
	//	ownedElement+=Comment*
	//	//  ( annotation += StereotypeAnnotation )*
	//	visibility=VisibilityIndicator? ('end' direction=FeatureDirection? ownedMemberElement=FeatureDefinition
	//	| 'end' memberName=Name? 'is' memberElement=[SysML::Feature|QualifiedName] ';'
	//	// These alternatives are provided for legacy Alf backwards compatibilty;
	//	| direction=FeatureDirection? ownedMemberElement=NamedFeatureDefinition
	//	| memberName=Name 'is' memberElement=[SysML::Feature|QualifiedName] ';');
	public AssociationEndFeatureMemberElements getAssociationEndFeatureMemberAccess() {
		return pAssociationEndFeatureMember;
	}
	
	public ParserRule getAssociationEndFeatureMemberRule() {
		return getAssociationEndFeatureMemberAccess().getRule();
	}
	
	///* FEATURES */ FeatureDefinition SysML::Feature:
	//	NamedFeatureDefinition | UnnamedFeatureDefinition;
	public FeatureDefinitionElements getFeatureDefinitionAccess() {
		return pFeatureDefinition;
	}
	
	public ParserRule getFeatureDefinitionRule() {
		return getFeatureDefinitionAccess().getRule();
	}
	
	//NamedFeatureDefinition SysML::Feature:
	//	FeatureDeclaration FeatureCompletion;
	public NamedFeatureDefinitionElements getNamedFeatureDefinitionAccess() {
		return pNamedFeatureDefinition;
	}
	
	public ParserRule getNamedFeatureDefinitionRule() {
		return getNamedFeatureDefinitionAccess().getRule();
	}
	
	//UnnamedFeatureDefinition SysML::Feature:
	//	ownedElement+=SubsetOrRedefinition TypePart? Multiplicity?
	//	FeatureCompletion;
	public UnnamedFeatureDefinitionElements getUnnamedFeatureDefinitionAccess() {
		return pUnnamedFeatureDefinition;
	}
	
	public ParserRule getUnnamedFeatureDefinitionRule() {
		return getUnnamedFeatureDefinitionAccess().getRule();
	}
	
	//fragment FeatureBodyDefinition returns SysML::Feature:
	//	'feature' FeatureDeclaration ClassBody;
	public FeatureBodyDefinitionElements getFeatureBodyDefinitionAccess() {
		return pFeatureBodyDefinition;
	}
	
	public ParserRule getFeatureBodyDefinitionRule() {
		return getFeatureBodyDefinitionAccess().getRule();
	}
	
	//fragment FeatureDeclaration returns SysML::Feature:
	//	name=Name TypePart? Multiplicity?
	//	ownedElement+=SubsetOrRedefinition?;
	public FeatureDeclarationElements getFeatureDeclarationAccess() {
		return pFeatureDeclaration;
	}
	
	public ParserRule getFeatureDeclarationRule() {
		return getFeatureDeclarationAccess().getRule();
	}
	
	//fragment FeatureCompletion returns SysML::Feature:
	//	('=' value=Expression)? (';' | ClassBody);
	public FeatureCompletionElements getFeatureCompletionAccess() {
		return pFeatureCompletion;
	}
	
	public ParserRule getFeatureCompletionRule() {
		return getFeatureCompletionAccess().getRule();
	}
	
	//fragment TypePart returns SysML::Feature:
	//	':' isComposite?='compose'? (referencedType+=[SysML::Class|QualifiedName] | 'any');
	public TypePartElements getTypePartAccess() {
		return pTypePart;
	}
	
	public ParserRule getTypePartRule() {
		return getTypePartAccess().getRule();
	}
	
	//fragment Multiplicity returns SysML::Feature:
	//	'[' (lower=NaturalLiteralExpression '..')? upper=UnlimitedNaturalLiteralExpression ']' (isOrdered?='ordered'? &
	//	isNonunique?='nonunique'?);
	public MultiplicityElements getMultiplicityAccess() {
		return pMultiplicity;
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}
	
	//SubsetOrRedefinition SysML::Subset:
	//	'subsets' Subset
	//	| 'redefines' Redefinition;
	public SubsetOrRedefinitionElements getSubsetOrRedefinitionAccess() {
		return pSubsetOrRedefinition;
	}
	
	public ParserRule getSubsetOrRedefinitionRule() {
		return getSubsetOrRedefinitionAccess().getRule();
	}
	
	//Redefinition SysML::Redefinition:
	//	redefinedFeature=[SysML::Feature|QualifiedName];
	public RedefinitionElements getRedefinitionAccess() {
		return pRedefinition;
	}
	
	public ParserRule getRedefinitionRule() {
		return getRedefinitionAccess().getRule();
	}
	
	//Subset SysML::Subset:
	//	subsettedFeature=[SysML::Feature|QualifiedName];
	public SubsetElements getSubsetAccess() {
		return pSubset;
	}
	
	public ParserRule getSubsetRule() {
		return getSubsetAccess().getRule();
	}
	
	///* CONNECTORS */ ConnectorDefinition SysML::Connector:
	//	(name=Name? (':' association=[SysML::Association|QualifiedName])? 'is')?
	//	connectorEnd+=ConnectorEnd 'to' connectorEnd+=ConnectorEnd ';'
	//	| name=Name? (':' association=[SysML::Association|QualifiedName])?
	//	'(' connectorEnd+=ConnectorEnd ',' connectorEnd+=ConnectorEnd (',' connectorEnd+=ConnectorEnd)*
	//	')' ';';
	public ConnectorDefinitionElements getConnectorDefinitionAccess() {
		return pConnectorDefinition;
	}
	
	public ParserRule getConnectorDefinitionRule() {
		return getConnectorDefinitionAccess().getRule();
	}
	
	//ConnectorEnd SysML::ConnectorEnd:
	//	(end=[SysML::Feature|QualifiedName] ':')?
	//	feature=[SysML::Feature|QualifiedName] ConnectorEndMultiplicity?
	//	| (end=[SysML::Feature|QualifiedName] ConnectorEndMultiplicity? '=>') feature=[SysML::Feature|QualifiedName];
	public ConnectorEndElements getConnectorEndAccess() {
		return pConnectorEnd;
	}
	
	public ParserRule getConnectorEndRule() {
		return getConnectorEndAccess().getRule();
	}
	
	//fragment ConnectorEndMultiplicity returns SysML::ConnectorEnd:
	//	'[' (lower=NaturalLiteralExpression '..')? upper=UnlimitedNaturalLiteralExpression ']';
	public ConnectorEndMultiplicityElements getConnectorEndMultiplicityAccess() {
		return pConnectorEndMultiplicity;
	}
	
	public ParserRule getConnectorEndMultiplicityRule() {
		return getConnectorEndMultiplicityAccess().getRule();
	}
	
	///* EXPRESSIONS */ Expression SysML::Expression:
	//	BinaryExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//BinaryExpression SysML::Expression:
	//	UnaryExpression ({SysML::OperatorExpression.operand+=current} (operator=BinaryOperator operand+=Expression |
	//	operator='@' '[' operand+=Expression ']'))?;
	public BinaryExpressionElements getBinaryExpressionAccess() {
		return pBinaryExpression;
	}
	
	public ParserRule getBinaryExpressionRule() {
		return getBinaryExpressionAccess().getRule();
	}
	
	//BinaryOperator:
	//	'+' | '-' | '*' | '/' | '^';
	public BinaryOperatorElements getBinaryOperatorAccess() {
		return pBinaryOperator;
	}
	
	public ParserRule getBinaryOperatorRule() {
		return getBinaryOperatorAccess().getRule();
	}
	
	//UnaryExpression SysML::Expression:
	//	SequenceAccessExpression | {SysML::OperatorExpression} operator=UnaryOperator operand+=SequenceAccessExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//UnaryOperator:
	//	'+' | '-';
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return pUnaryOperator;
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//SequenceAccessExpression SysML::Expression:
	//	PrimaryExpression ({SysML::SequenceAccessExpression.primary=current} '[' index=Expression ']')*;
	public SequenceAccessExpressionElements getSequenceAccessExpressionAccess() {
		return pSequenceAccessExpression;
	}
	
	public ParserRule getSequenceAccessExpressionRule() {
		return getSequenceAccessExpressionAccess().getRule();
	}
	
	//PrimaryExpression SysML::Expression:
	//	LiteralExpression
	//	| ElementReferenceExpression
	//	| InstanceCreationExpression
	//	| SequenceConstructionExpression
	//	| '(' Expression ')';
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//ElementReferenceExpression SysML::ElementReferenceExpression:
	//	referent=[SysML::Element|QualifiedName];
	public ElementReferenceExpressionElements getElementReferenceExpressionAccess() {
		return pElementReferenceExpression;
	}
	
	public ParserRule getElementReferenceExpressionRule() {
		return getElementReferenceExpressionAccess().getRule();
	}
	
	//InstanceCreationExpression SysML::InstanceCreationExpression:
	//	class=[SysML::Class|QualifiedName] '(' Tuple? ')';
	public InstanceCreationExpressionElements getInstanceCreationExpressionAccess() {
		return pInstanceCreationExpression;
	}
	
	public ParserRule getInstanceCreationExpressionRule() {
		return getInstanceCreationExpressionAccess().getRule();
	}
	
	//fragment Tuple returns SysML::InstanceCreationExpression:
	//	PositionalTuple | NamedTuple;
	public TupleElements getTupleAccess() {
		return pTuple;
	}
	
	public ParserRule getTupleRule() {
		return getTupleAccess().getRule();
	}
	
	//fragment PositionalTuple returns SysML::InstanceCreationExpression:
	//	argument+=Expression (',' argument+=Expression)*;
	public PositionalTupleElements getPositionalTupleAccess() {
		return pPositionalTuple;
	}
	
	public ParserRule getPositionalTupleRule() {
		return getPositionalTupleAccess().getRule();
	}
	
	//fragment NamedTuple returns SysML::InstanceCreationExpression:
	//	Name '=>' argument+=Expression (',' Name '=>' argument+=Expression)*;
	public NamedTupleElements getNamedTupleAccess() {
		return pNamedTuple;
	}
	
	public ParserRule getNamedTupleRule() {
		return getNamedTupleAccess().getRule();
	}
	
	//SequenceConstructionExpression SysML::SequenceConstructionExpression:
	//	{SysML::SequenceConstructionExpression} '{' (element+=Expression (',' element+=Expression)*)? '}';
	public SequenceConstructionExpressionElements getSequenceConstructionExpressionAccess() {
		return pSequenceConstructionExpression;
	}
	
	public ParserRule getSequenceConstructionExpressionRule() {
		return getSequenceConstructionExpressionAccess().getRule();
	}
	
	//LiteralExpression SysML::Expression:
	//	NullLiteralExpression | BooleanLiteralExpression | StringLiteralExpression | RealLiteralExpression |
	//	UnlimitedNaturalLiteralExpression;
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return pLiteralExpression;
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//NullLiteralExpression SysML::LiteralNull:
	//	{SysML::LiteralNull} 'null';
	public NullLiteralExpressionElements getNullLiteralExpressionAccess() {
		return pNullLiteralExpression;
	}
	
	public ParserRule getNullLiteralExpressionRule() {
		return getNullLiteralExpressionAccess().getRule();
	}
	
	//BooleanLiteralExpression SysML::LiteralBoolean:
	//	value=BOOLEAN_VALUE;
	public BooleanLiteralExpressionElements getBooleanLiteralExpressionAccess() {
		return pBooleanLiteralExpression;
	}
	
	public ParserRule getBooleanLiteralExpressionRule() {
		return getBooleanLiteralExpressionAccess().getRule();
	}
	
	//StringLiteralExpression SysML::LiteralString:
	//	value=STRING_VALUE;
	public StringLiteralExpressionElements getStringLiteralExpressionAccess() {
		return pStringLiteralExpression;
	}
	
	public ParserRule getStringLiteralExpressionRule() {
		return getStringLiteralExpressionAccess().getRule();
	}
	
	//RealLiteralExpression SysML::LiteralReal:
	//	value=RealValue;
	public RealLiteralExpressionElements getRealLiteralExpressionAccess() {
		return pRealLiteralExpression;
	}
	
	public ParserRule getRealLiteralExpressionRule() {
		return getRealLiteralExpressionAccess().getRule();
	}
	
	//RealValue Ecore::EDouble:
	//	(NATURAL_VALUE '.' NATURAL_VALUE? | '.' NATURAL_VALUE) (('e' | 'E') ('+' | '-')? NATURAL_VALUE)?;
	public RealValueElements getRealValueAccess() {
		return pRealValue;
	}
	
	public ParserRule getRealValueRule() {
		return getRealValueAccess().getRule();
	}
	
	//NaturalLiteralExpression SysML::LiteralInteger:
	//	value=NATURAL_VALUE;
	public NaturalLiteralExpressionElements getNaturalLiteralExpressionAccess() {
		return pNaturalLiteralExpression;
	}
	
	public ParserRule getNaturalLiteralExpressionRule() {
		return getNaturalLiteralExpressionAccess().getRule();
	}
	
	//UnlimitedNaturalLiteralExpression SysML::Expression:
	//	NaturalLiteralExpression | {SysML::LiteralUnbounded} '*';
	public UnlimitedNaturalLiteralExpressionElements getUnlimitedNaturalLiteralExpressionAccess() {
		return pUnlimitedNaturalLiteralExpression;
	}
	
	public ParserRule getUnlimitedNaturalLiteralExpressionRule() {
		return getUnlimitedNaturalLiteralExpressionAccess().getRule();
	}
	
	///* NAMES */ Name:
	//	ID | UNRESTRICTED_NAME;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//QualifiedName:
	//	Name | ColonQualifiedName | DotQualifiedName;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//ColonQualifiedName:
	//	Name ('::' Name)+;
	public ColonQualifiedNameElements getColonQualifiedNameAccess() {
		return pColonQualifiedName;
	}
	
	public ParserRule getColonQualifiedNameRule() {
		return getColonQualifiedNameAccess().getRule();
	}
	
	//DotQualifiedName:
	//	Name ('.' Name)+;
	public DotQualifiedNameElements getDotQualifiedNameAccess() {
		return pDotQualifiedName;
	}
	
	public ParserRule getDotQualifiedNameRule() {
		return getDotQualifiedNameAccess().getRule();
	}
	
	//terminal BOOLEAN_VALUE returns Ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLEAN_VALUERule() {
		return tBOOLEAN_VALUE;
	}
	
	//terminal NATURAL_VALUE returns Ecore::EInt:
	//	('0' | '1'..'9' ('_'? '0'..'9')*) | ('0b' | '0B') '0'..'1' ('_'? '0'..'1')* | ('0x' | '0X') ('0'..'9' | 'a'..'f' |
	//	'A'..'F') ('_'? ('0'..'9' | 'a'..'f' | 'A'..'F'))* | '0' '_'? '0'..'7' ('_'? '0'..'7')*;
	public TerminalRule getNATURAL_VALUERule() {
		return tNATURAL_VALUE;
	}
	
	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal UNRESTRICTED_NAME:
	//	'\'' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '\''))* '\'';
	public TerminalRule getUNRESTRICTED_NAMERule() {
		return tUNRESTRICTED_NAME;
	}
	
	//terminal STRING_VALUE:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRING_VALUERule() {
		return tSTRING_VALUE;
	}
	
	//terminal DOCUMENTATION_COMMENT:
	//	'/**'->'*/';
	public TerminalRule getDOCUMENTATION_COMMENTRule() {
		return tDOCUMENTATION_COMMENT;
	}
	
	//terminal STATEMENT_ANNOTATION:
	//	'//@'->'\n'
	//	//  '//@' WS? ID (WS? '(' WS? (ID | UNRESTRICTED_NAME) (WS? ',' WS? (ID | UNRESTRICTED_NAME))* WS? ')')? 
	//	//  (WS? '@' WS? ID (WS? '(' WS? (ID | UNRESTRICTED_NAME) (WS? ',' WS? (ID | UNRESTRICTED_NAME))* WS? ')')?)* (' '|'\t')* ('\r'? '\n')
	//;
	public TerminalRule getSTATEMENT_ANNOTATIONRule() {
		return tSTATEMENT_ANNOTATION;
	}
	
	//terminal INLINE_STATEMENT:
	//	'/*@inline(' (ID | UNRESTRICTED_NAME) ')'->'*/';
	public TerminalRule getINLINE_STATEMENTRule() {
		return tINLINE_STATEMENT;
	}
	
	//terminal ML_COMMENT:
	//	'/*' !('*' | '@')->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' (!('@' | '\n' | '\r') !('\n' | '\r')*)? ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
