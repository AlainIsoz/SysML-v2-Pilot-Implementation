/*
 * generated by Xtext 2.12.0
 */
package org.omg.sysml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AlfGrammarAccess extends AbstractGrammarElementFinder {
	
	public class UnitDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.UnitDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* UNITS */ UnitDefinition groups::Namespace:
		//	PackageDefinition | ClassDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//PackageDefinition | ClassDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PackageDefinition
		public RuleCall getPackageDefinitionParserRuleCall_0() { return cPackageDefinitionParserRuleCall_0; }
		
		//ClassDefinition
		public RuleCall getClassDefinitionParserRuleCall_1() { return cClassDefinitionParserRuleCall_1; }
	}
	public class PackageDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.PackageDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGroupMemberAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGroupMemberMemberDefinitionParserRuleCall_3_0 = (RuleCall)cGroupMemberAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///* PACKAGES */ PackageDefinition groups::Namespace:
		//	'package' name=Name '{' groupMember+=MemberDefinition* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=Name '{' groupMember+=MemberDefinition* '}'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//groupMember+=MemberDefinition*
		public Assignment getGroupMemberAssignment_3() { return cGroupMemberAssignment_3; }
		
		//MemberDefinition
		public RuleCall getGroupMemberMemberDefinitionParserRuleCall_3_0() { return cGroupMemberMemberDefinitionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PackageDefinitionOrStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.PackageDefinitionOrStub");
		private final RuleCall cPackageDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PackageDefinitionOrStub groups::Namespace:
		//	PackageDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		////	'package' name = Name ( isStub ?= ';' | '{' ( ownedMember += PackagedElement )* '}' )
		//PackageDefinition
		public RuleCall getPackageDefinitionParserRuleCall() { return cPackageDefinitionParserRuleCall; }
	}
	public class MemberDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.MemberDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityIndicatorEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOwnedMemberElementAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cOwnedMemberElementPackagedElementDefinitionParserRuleCall_1_0_0 = (RuleCall)cOwnedMemberElementAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cMemberKindParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cMemberNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cMemberNameNameParserRuleCall_1_1_1_0 = (RuleCall)cMemberNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cIsKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cMemberElementAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final CrossReference cMemberElementElementCrossReference_1_1_3_0 = (CrossReference)cMemberElementAssignment_1_1_3.eContents().get(0);
		private final RuleCall cMemberElementElementQualifiedNameParserRuleCall_1_1_3_0_1 = (RuleCall)cMemberElementElementCrossReference_1_1_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		
		//MemberDefinition groups::NamespaceMembership:
		//	visibility=VisibilityIndicator? (ownedMemberElement=PackagedElementDefinition
		//	| MemberKind memberName=Name? 'is' memberElement=[core::Element|QualifiedName] ';');
		@Override public ParserRule getRule() { return rule; }
		
		////  ( documentation += DOCUMENTATION_COMMENT )?
		////  ( annotation += StereotypeAnnotation )*
		//visibility=VisibilityIndicator? (ownedMemberElement=PackagedElementDefinition | MemberKind memberName=Name? 'is'
		//memberElement=[core::Element|QualifiedName] ';')
		public Group getGroup() { return cGroup; }
		
		////  ( documentation += DOCUMENTATION_COMMENT )?
		////  ( annotation += StereotypeAnnotation )*
		//visibility=VisibilityIndicator?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//VisibilityIndicator
		public RuleCall getVisibilityVisibilityIndicatorEnumRuleCall_0_0() { return cVisibilityVisibilityIndicatorEnumRuleCall_0_0; }
		
		//ownedMemberElement=PackagedElementDefinition | MemberKind memberName=Name? 'is'
		//memberElement=[core::Element|QualifiedName] ';'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ownedMemberElement=PackagedElementDefinition
		public Assignment getOwnedMemberElementAssignment_1_0() { return cOwnedMemberElementAssignment_1_0; }
		
		//PackagedElementDefinition
		public RuleCall getOwnedMemberElementPackagedElementDefinitionParserRuleCall_1_0_0() { return cOwnedMemberElementPackagedElementDefinitionParserRuleCall_1_0_0; }
		
		//MemberKind memberName=Name? 'is' memberElement=[core::Element|QualifiedName] ';'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//MemberKind
		public RuleCall getMemberKindParserRuleCall_1_1_0() { return cMemberKindParserRuleCall_1_1_0; }
		
		//memberName=Name?
		public Assignment getMemberNameAssignment_1_1_1() { return cMemberNameAssignment_1_1_1; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_1_1_1_0() { return cMemberNameNameParserRuleCall_1_1_1_0; }
		
		//'is'
		public Keyword getIsKeyword_1_1_2() { return cIsKeyword_1_1_2; }
		
		//memberElement=[core::Element|QualifiedName]
		public Assignment getMemberElementAssignment_1_1_3() { return cMemberElementAssignment_1_1_3; }
		
		//[core::Element|QualifiedName]
		public CrossReference getMemberElementElementCrossReference_1_1_3_0() { return cMemberElementElementCrossReference_1_1_3_0; }
		
		//QualifiedName
		public RuleCall getMemberElementElementQualifiedNameParserRuleCall_1_1_3_0_1() { return cMemberElementElementQualifiedNameParserRuleCall_1_1_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1_4() { return cSemicolonKeyword_1_1_4; }
	}
	public class MemberKindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.MemberKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFeatureKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//MemberKind:
		//	'package' | 'class' | 'feature';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' | 'class' | 'feature'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//'feature'
		public Keyword getFeatureKeyword_2() { return cFeatureKeyword_2; }
	}
	public class PackagedElementDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.PackagedElementDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageDefinitionOrStubParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassifierDefinitionOrStubParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFeatureDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////enum ImportVisibilityIndicator returns groups::VisibilityKind:
		////	public = 'public' | private = 'private'
		////;
		//PackagedElementDefinition core::Element:
		//	PackageDefinitionOrStub | ClassifierDefinitionOrStub | FeatureDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//PackageDefinitionOrStub | ClassifierDefinitionOrStub | FeatureDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PackageDefinitionOrStub
		public RuleCall getPackageDefinitionOrStubParserRuleCall_0() { return cPackageDefinitionOrStubParserRuleCall_0; }
		
		//ClassifierDefinitionOrStub
		public RuleCall getClassifierDefinitionOrStubParserRuleCall_1() { return cClassifierDefinitionOrStubParserRuleCall_1; }
		
		//FeatureDefinition
		public RuleCall getFeatureDefinitionParserRuleCall_2() { return cFeatureDefinitionParserRuleCall_2; }
	}
	public class ClassifierDefinitionOrStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.ClassifierDefinitionOrStub");
		private final RuleCall cClassDefinitionOrStubParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ClassifierDefinitionOrStub classification::Class:
		//	ClassDefinitionOrStub;
		@Override public ParserRule getRule() { return rule; }
		
		//ClassDefinitionOrStub
		public RuleCall getClassDefinitionOrStubParserRuleCall() { return cClassDefinitionOrStubParserRuleCall; }
	}
	public class ClassDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.ClassDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cIsKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cSpecializesKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Assignment cOwnedGeneralizationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedGeneralizationGeneralizationParserRuleCall_3_1_0 = (RuleCall)cOwnedGeneralizationAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cOwnedGeneralizationAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cOwnedGeneralizationGeneralizationParserRuleCall_3_2_1_0 = (RuleCall)cOwnedGeneralizationAssignment_3_2_1.eContents().get(0);
		
		///* CLASSES */ ClassDeclaration classification::Class:
		//	isAbstract?='abstract'? 'class' name=Name (('is' | 'specializes') ownedGeneralization+=Generalization (','
		//	ownedGeneralization+=Generalization)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		////	( 'namespace' namespace += [groups::Namespace | QualifiedName] )?
		////	( ^import += ImportDeclaration )*
		//isAbstract?='abstract'? 'class' name=Name (('is' | 'specializes') ownedGeneralization+=Generalization (','
		//ownedGeneralization+=Generalization)*)?
		public Group getGroup() { return cGroup; }
		
		////	( 'namespace' namespace += [groups::Namespace | QualifiedName] )?
		////	( ^import += ImportDeclaration )*
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=Name
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }
		
		//(('is' | 'specializes') ownedGeneralization+=Generalization (',' ownedGeneralization+=Generalization)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'is' | 'specializes'
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//'is'
		public Keyword getIsKeyword_3_0_0() { return cIsKeyword_3_0_0; }
		
		//'specializes'
		public Keyword getSpecializesKeyword_3_0_1() { return cSpecializesKeyword_3_0_1; }
		
		//ownedGeneralization+=Generalization
		public Assignment getOwnedGeneralizationAssignment_3_1() { return cOwnedGeneralizationAssignment_3_1; }
		
		//Generalization
		public RuleCall getOwnedGeneralizationGeneralizationParserRuleCall_3_1_0() { return cOwnedGeneralizationGeneralizationParserRuleCall_3_1_0; }
		
		//(',' ownedGeneralization+=Generalization)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//ownedGeneralization+=Generalization
		public Assignment getOwnedGeneralizationAssignment_3_2_1() { return cOwnedGeneralizationAssignment_3_2_1; }
		
		//Generalization
		public RuleCall getOwnedGeneralizationGeneralizationParserRuleCall_3_2_1_0() { return cOwnedGeneralizationGeneralizationParserRuleCall_3_2_1_0; }
	}
	public class GeneralizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.Generalization");
		private final Assignment cGeneralAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cGeneralClassCrossReference_0 = (CrossReference)cGeneralAssignment.eContents().get(0);
		private final RuleCall cGeneralClassQualifiedNameParserRuleCall_0_1 = (RuleCall)cGeneralClassCrossReference_0.eContents().get(1);
		
		//Generalization classification::Generalization:
		//	general=[classification::Class|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//general=[classification::Class|QualifiedName]
		public Assignment getGeneralAssignment() { return cGeneralAssignment; }
		
		//[classification::Class|QualifiedName]
		public CrossReference getGeneralClassCrossReference_0() { return cGeneralClassCrossReference_0; }
		
		//QualifiedName
		public RuleCall getGeneralClassQualifiedNameParserRuleCall_0_1() { return cGeneralClassQualifiedNameParserRuleCall_0_1; }
	}
	public class ClassDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.ClassDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGroupMemberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGroupMemberMemberDefinitionParserRuleCall_2_0 = (RuleCall)cGroupMemberAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClassDefinition classification::Class:
		//	ClassDeclaration '{' groupMember+=MemberDefinition* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//ClassDeclaration '{' groupMember+=MemberDefinition* '}'
		public Group getGroup() { return cGroup; }
		
		//ClassDeclaration
		public RuleCall getClassDeclarationParserRuleCall_0() { return cClassDeclarationParserRuleCall_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//groupMember+=MemberDefinition*
		public Assignment getGroupMemberAssignment_2() { return cGroupMemberAssignment_2; }
		
		//MemberDefinition
		public RuleCall getGroupMemberMemberDefinitionParserRuleCall_2_0() { return cGroupMemberMemberDefinitionParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ClassDefinitionOrStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.ClassDefinitionOrStub");
		private final RuleCall cClassDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ClassDefinitionOrStub classification::Class:
		//	ClassDefinition
		//	//	ClassDeclaration
		//	//	( isStub ?= ';' | '{' ( ownedMember += ClassMember )* '}' )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ClassDefinition
		public RuleCall getClassDefinitionParserRuleCall() { return cClassDefinitionParserRuleCall; }
	}
	public class FeatureDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.FeatureDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cNameAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_1_0_0_0 = (RuleCall)cNameAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cColonKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cReferencedTypeAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final CrossReference cReferencedTypeClassCrossReference_1_0_1_1_0 = (CrossReference)cReferencedTypeAssignment_1_0_1_1.eContents().get(0);
		private final RuleCall cReferencedTypeClassQualifiedNameParserRuleCall_1_0_1_1_0_1 = (RuleCall)cReferencedTypeClassCrossReference_1_0_1_1_0.eContents().get(1);
		private final Group cGroup_1_0_1_2 = (Group)cGroup_1_0_1.eContents().get(2);
		private final Keyword cIsKeyword_1_0_1_2_0 = (Keyword)cGroup_1_0_1_2.eContents().get(0);
		private final Assignment cRedefinedFeatureAssignment_1_0_1_2_1 = (Assignment)cGroup_1_0_1_2.eContents().get(1);
		private final CrossReference cRedefinedFeatureFeatureCrossReference_1_0_1_2_1_0 = (CrossReference)cRedefinedFeatureAssignment_1_0_1_2_1.eContents().get(0);
		private final RuleCall cRedefinedFeatureFeatureQualifiedNameParserRuleCall_1_0_1_2_1_0_1 = (RuleCall)cRedefinedFeatureFeatureCrossReference_1_0_1_2_1_0.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Group cGroup_1_0_2_1 = (Group)cGroup_1_0_2.eContents().get(1);
		private final Assignment cLowerAssignment_1_0_2_1_0 = (Assignment)cGroup_1_0_2_1.eContents().get(0);
		private final RuleCall cLowerNaturalLiteralExpressionParserRuleCall_1_0_2_1_0_0 = (RuleCall)cLowerAssignment_1_0_2_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_0_2_1_1 = (Keyword)cGroup_1_0_2_1.eContents().get(1);
		private final Assignment cUpperAssignment_1_0_2_2 = (Assignment)cGroup_1_0_2.eContents().get(2);
		private final RuleCall cUpperUnlimitedNaturalLiteralExpressionParserRuleCall_1_0_2_2_0 = (RuleCall)cUpperAssignment_1_0_2_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_2_3 = (Keyword)cGroup_1_0_2.eContents().get(3);
		private final Alternatives cAlternatives_1_0_3 = (Alternatives)cGroup_1_0.eContents().get(3);
		private final Keyword cSemicolonKeyword_1_0_3_0 = (Keyword)cAlternatives_1_0_3.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_1_0_3_1 = (Assignment)cAlternatives_1_0_3.eContents().get(1);
		private final RuleCall cOwnedTypeAnonymousClassDefinitionParserRuleCall_1_0_3_1_0 = (RuleCall)cOwnedTypeAssignment_1_0_3_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_1_1_0_0 = (RuleCall)cNameAssignment_1_1_0.eContents().get(0);
		private final Keyword cIsKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRedefinedFeatureAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final CrossReference cRedefinedFeatureFeatureCrossReference_1_1_2_0 = (CrossReference)cRedefinedFeatureAssignment_1_1_2.eContents().get(0);
		private final RuleCall cRedefinedFeatureFeatureQualifiedNameParserRuleCall_1_1_2_0_1 = (RuleCall)cRedefinedFeatureFeatureCrossReference_1_1_2_0.eContents().get(1);
		private final Alternatives cAlternatives_1_1_3 = (Alternatives)cGroup_1_1.eContents().get(3);
		private final Group cGroup_1_1_3_0 = (Group)cAlternatives_1_1_3.eContents().get(0);
		private final Group cGroup_1_1_3_0_0 = (Group)cGroup_1_1_3_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_3_0_0_0 = (Keyword)cGroup_1_1_3_0_0.eContents().get(0);
		private final Group cGroup_1_1_3_0_0_1 = (Group)cGroup_1_1_3_0_0.eContents().get(1);
		private final Assignment cLowerAssignment_1_1_3_0_0_1_0 = (Assignment)cGroup_1_1_3_0_0_1.eContents().get(0);
		private final RuleCall cLowerNaturalLiteralExpressionParserRuleCall_1_1_3_0_0_1_0_0 = (RuleCall)cLowerAssignment_1_1_3_0_0_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_1_3_0_0_1_1 = (Keyword)cGroup_1_1_3_0_0_1.eContents().get(1);
		private final Assignment cUpperAssignment_1_1_3_0_0_2 = (Assignment)cGroup_1_1_3_0_0.eContents().get(2);
		private final RuleCall cUpperUnlimitedNaturalLiteralExpressionParserRuleCall_1_1_3_0_0_2_0 = (RuleCall)cUpperAssignment_1_1_3_0_0_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_3_0_0_3 = (Keyword)cGroup_1_1_3_0_0.eContents().get(3);
		private final Assignment cOwnedTypeAssignment_1_1_3_0_1 = (Assignment)cGroup_1_1_3_0.eContents().get(1);
		private final RuleCall cOwnedTypeAnonymousClassDefinitionParserRuleCall_1_1_3_0_1_0 = (RuleCall)cOwnedTypeAssignment_1_1_3_0_1.eContents().get(0);
		private final Group cGroup_1_1_3_1 = (Group)cAlternatives_1_1_3.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_3_1_0 = (Keyword)cGroup_1_1_3_1.eContents().get(0);
		private final Group cGroup_1_1_3_1_1 = (Group)cGroup_1_1_3_1.eContents().get(1);
		private final Assignment cLowerAssignment_1_1_3_1_1_0 = (Assignment)cGroup_1_1_3_1_1.eContents().get(0);
		private final RuleCall cLowerNaturalLiteralExpressionParserRuleCall_1_1_3_1_1_0_0 = (RuleCall)cLowerAssignment_1_1_3_1_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_1_3_1_1_1 = (Keyword)cGroup_1_1_3_1_1.eContents().get(1);
		private final Assignment cUpperAssignment_1_1_3_1_2 = (Assignment)cGroup_1_1_3_1.eContents().get(2);
		private final RuleCall cUpperUnlimitedNaturalLiteralExpressionParserRuleCall_1_1_3_1_2_0 = (RuleCall)cUpperAssignment_1_1_3_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_3_1_3 = (Keyword)cGroup_1_1_3_1.eContents().get(3);
		private final Keyword cSemicolonKeyword_1_1_3_1_4 = (Keyword)cGroup_1_1_3_1.eContents().get(4);
		
		///*
		//ClassMember returns groups::NamespaceMembership : 
		////	( documentation += DOCUMENTATION_COMMENT )?
		////	( annotation += StereotypeAnnotation )*
		////	( methodVisibility = VisibilityKind )?
		////	definition = ClassMemberDefinition
		//	( visibility = VisibilityIndicator )?
		//	( ownedMemberElement = ClassElementDefinition
		//	| 'has' memberElement = [core::Element|QualifiedName] ";"
		//	)
		//;
		//*/ //ClassElementDefinition returns core::Element :
		////	FeatureDefinition
		////;
		///* FEATURES */ FeatureDefinition classification::Feature:
		//	'feature'? (name=Name (':' referencedType+=[classification::Class|QualifiedName] ('is'
		//	redefinedFeature+=[classification::Feature|QualifiedName])?)? ('[' (lower=NaturalLiteralExpression '..')?
		//	upper=UnlimitedNaturalLiteralExpression ']')? (';' | ownedType+=AnonymousClassDefinition) | name=Name? 'is'
		//	redefinedFeature+=[classification::Feature|QualifiedName] (('[' (lower=NaturalLiteralExpression '..')?
		//	upper=UnlimitedNaturalLiteralExpression ']')?
		//	ownedType+=AnonymousClassDefinition
		//	| '[' (lower=NaturalLiteralExpression '..')? upper=UnlimitedNaturalLiteralExpression ']' ';'));
		@Override public ParserRule getRule() { return rule; }
		
		//'feature'? (name=Name (':' referencedType+=[classification::Class|QualifiedName] ('is'
		//redefinedFeature+=[classification::Feature|QualifiedName])?)? ('[' (lower=NaturalLiteralExpression '..')?
		//upper=UnlimitedNaturalLiteralExpression ']')? (';' | ownedType+=AnonymousClassDefinition) | name=Name? 'is'
		//redefinedFeature+=[classification::Feature|QualifiedName] (('[' (lower=NaturalLiteralExpression '..')?
		//upper=UnlimitedNaturalLiteralExpression ']')? ownedType+=AnonymousClassDefinition | '[' (lower=NaturalLiteralExpression
		//'..')? upper=UnlimitedNaturalLiteralExpression ']' ';'))
		public Group getGroup() { return cGroup; }
		
		//'feature'?
		public Keyword getFeatureKeyword_0() { return cFeatureKeyword_0; }
		
		//name=Name (':' referencedType+=[classification::Class|QualifiedName] ('is'
		//redefinedFeature+=[classification::Feature|QualifiedName])?)? ('[' (lower=NaturalLiteralExpression '..')?
		//upper=UnlimitedNaturalLiteralExpression ']')? (';' | ownedType+=AnonymousClassDefinition) | name=Name? 'is'
		//redefinedFeature+=[classification::Feature|QualifiedName] (('[' (lower=NaturalLiteralExpression '..')?
		//upper=UnlimitedNaturalLiteralExpression ']')? ownedType+=AnonymousClassDefinition | '[' (lower=NaturalLiteralExpression
		//'..')? upper=UnlimitedNaturalLiteralExpression ']' ';')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//name=Name (':' referencedType+=[classification::Class|QualifiedName] ('is'
		//redefinedFeature+=[classification::Feature|QualifiedName])?)? ('[' (lower=NaturalLiteralExpression '..')?
		//upper=UnlimitedNaturalLiteralExpression ']')? (';' | ownedType+=AnonymousClassDefinition)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//name=Name
		public Assignment getNameAssignment_1_0_0() { return cNameAssignment_1_0_0; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0_0_0() { return cNameNameParserRuleCall_1_0_0_0; }
		
		//(':' referencedType+=[classification::Class|QualifiedName] ('is'
		//redefinedFeature+=[classification::Feature|QualifiedName])?)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//':'
		public Keyword getColonKeyword_1_0_1_0() { return cColonKeyword_1_0_1_0; }
		
		//referencedType+=[classification::Class|QualifiedName]
		public Assignment getReferencedTypeAssignment_1_0_1_1() { return cReferencedTypeAssignment_1_0_1_1; }
		
		//[classification::Class|QualifiedName]
		public CrossReference getReferencedTypeClassCrossReference_1_0_1_1_0() { return cReferencedTypeClassCrossReference_1_0_1_1_0; }
		
		//QualifiedName
		public RuleCall getReferencedTypeClassQualifiedNameParserRuleCall_1_0_1_1_0_1() { return cReferencedTypeClassQualifiedNameParserRuleCall_1_0_1_1_0_1; }
		
		//('is' redefinedFeature+=[classification::Feature|QualifiedName])?
		public Group getGroup_1_0_1_2() { return cGroup_1_0_1_2; }
		
		//'is'
		public Keyword getIsKeyword_1_0_1_2_0() { return cIsKeyword_1_0_1_2_0; }
		
		//redefinedFeature+=[classification::Feature|QualifiedName]
		public Assignment getRedefinedFeatureAssignment_1_0_1_2_1() { return cRedefinedFeatureAssignment_1_0_1_2_1; }
		
		//[classification::Feature|QualifiedName]
		public CrossReference getRedefinedFeatureFeatureCrossReference_1_0_1_2_1_0() { return cRedefinedFeatureFeatureCrossReference_1_0_1_2_1_0; }
		
		//QualifiedName
		public RuleCall getRedefinedFeatureFeatureQualifiedNameParserRuleCall_1_0_1_2_1_0_1() { return cRedefinedFeatureFeatureQualifiedNameParserRuleCall_1_0_1_2_1_0_1; }
		
		//('[' (lower=NaturalLiteralExpression '..')? upper=UnlimitedNaturalLiteralExpression ']')?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0_2_0() { return cLeftSquareBracketKeyword_1_0_2_0; }
		
		//(lower=NaturalLiteralExpression '..')?
		public Group getGroup_1_0_2_1() { return cGroup_1_0_2_1; }
		
		//lower=NaturalLiteralExpression
		public Assignment getLowerAssignment_1_0_2_1_0() { return cLowerAssignment_1_0_2_1_0; }
		
		//NaturalLiteralExpression
		public RuleCall getLowerNaturalLiteralExpressionParserRuleCall_1_0_2_1_0_0() { return cLowerNaturalLiteralExpressionParserRuleCall_1_0_2_1_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_0_2_1_1() { return cFullStopFullStopKeyword_1_0_2_1_1; }
		
		//upper=UnlimitedNaturalLiteralExpression
		public Assignment getUpperAssignment_1_0_2_2() { return cUpperAssignment_1_0_2_2; }
		
		//UnlimitedNaturalLiteralExpression
		public RuleCall getUpperUnlimitedNaturalLiteralExpressionParserRuleCall_1_0_2_2_0() { return cUpperUnlimitedNaturalLiteralExpressionParserRuleCall_1_0_2_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_0_2_3() { return cRightSquareBracketKeyword_1_0_2_3; }
		
		//';' | ownedType+=AnonymousClassDefinition
		public Alternatives getAlternatives_1_0_3() { return cAlternatives_1_0_3; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0_3_0() { return cSemicolonKeyword_1_0_3_0; }
		
		//ownedType+=AnonymousClassDefinition
		public Assignment getOwnedTypeAssignment_1_0_3_1() { return cOwnedTypeAssignment_1_0_3_1; }
		
		//AnonymousClassDefinition
		public RuleCall getOwnedTypeAnonymousClassDefinitionParserRuleCall_1_0_3_1_0() { return cOwnedTypeAnonymousClassDefinitionParserRuleCall_1_0_3_1_0; }
		
		//name=Name? 'is' redefinedFeature+=[classification::Feature|QualifiedName] (('[' (lower=NaturalLiteralExpression '..')?
		//upper=UnlimitedNaturalLiteralExpression ']')? ownedType+=AnonymousClassDefinition | '[' (lower=NaturalLiteralExpression
		//'..')? upper=UnlimitedNaturalLiteralExpression ']' ';')
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//name=Name?
		public Assignment getNameAssignment_1_1_0() { return cNameAssignment_1_1_0; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_1_0_0() { return cNameNameParserRuleCall_1_1_0_0; }
		
		//'is'
		public Keyword getIsKeyword_1_1_1() { return cIsKeyword_1_1_1; }
		
		//redefinedFeature+=[classification::Feature|QualifiedName]
		public Assignment getRedefinedFeatureAssignment_1_1_2() { return cRedefinedFeatureAssignment_1_1_2; }
		
		//[classification::Feature|QualifiedName]
		public CrossReference getRedefinedFeatureFeatureCrossReference_1_1_2_0() { return cRedefinedFeatureFeatureCrossReference_1_1_2_0; }
		
		//QualifiedName
		public RuleCall getRedefinedFeatureFeatureQualifiedNameParserRuleCall_1_1_2_0_1() { return cRedefinedFeatureFeatureQualifiedNameParserRuleCall_1_1_2_0_1; }
		
		//('[' (lower=NaturalLiteralExpression '..')? upper=UnlimitedNaturalLiteralExpression ']')?
		//ownedType+=AnonymousClassDefinition | '[' (lower=NaturalLiteralExpression '..')?
		//upper=UnlimitedNaturalLiteralExpression ']' ';'
		public Alternatives getAlternatives_1_1_3() { return cAlternatives_1_1_3; }
		
		//('[' (lower=NaturalLiteralExpression '..')? upper=UnlimitedNaturalLiteralExpression ']')?
		//ownedType+=AnonymousClassDefinition
		public Group getGroup_1_1_3_0() { return cGroup_1_1_3_0; }
		
		//('[' (lower=NaturalLiteralExpression '..')? upper=UnlimitedNaturalLiteralExpression ']')?
		public Group getGroup_1_1_3_0_0() { return cGroup_1_1_3_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_3_0_0_0() { return cLeftSquareBracketKeyword_1_1_3_0_0_0; }
		
		//(lower=NaturalLiteralExpression '..')?
		public Group getGroup_1_1_3_0_0_1() { return cGroup_1_1_3_0_0_1; }
		
		//lower=NaturalLiteralExpression
		public Assignment getLowerAssignment_1_1_3_0_0_1_0() { return cLowerAssignment_1_1_3_0_0_1_0; }
		
		//NaturalLiteralExpression
		public RuleCall getLowerNaturalLiteralExpressionParserRuleCall_1_1_3_0_0_1_0_0() { return cLowerNaturalLiteralExpressionParserRuleCall_1_1_3_0_0_1_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_1_3_0_0_1_1() { return cFullStopFullStopKeyword_1_1_3_0_0_1_1; }
		
		//upper=UnlimitedNaturalLiteralExpression
		public Assignment getUpperAssignment_1_1_3_0_0_2() { return cUpperAssignment_1_1_3_0_0_2; }
		
		//UnlimitedNaturalLiteralExpression
		public RuleCall getUpperUnlimitedNaturalLiteralExpressionParserRuleCall_1_1_3_0_0_2_0() { return cUpperUnlimitedNaturalLiteralExpressionParserRuleCall_1_1_3_0_0_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_3_0_0_3() { return cRightSquareBracketKeyword_1_1_3_0_0_3; }
		
		//ownedType+=AnonymousClassDefinition
		public Assignment getOwnedTypeAssignment_1_1_3_0_1() { return cOwnedTypeAssignment_1_1_3_0_1; }
		
		//AnonymousClassDefinition
		public RuleCall getOwnedTypeAnonymousClassDefinitionParserRuleCall_1_1_3_0_1_0() { return cOwnedTypeAnonymousClassDefinitionParserRuleCall_1_1_3_0_1_0; }
		
		//'[' (lower=NaturalLiteralExpression '..')? upper=UnlimitedNaturalLiteralExpression ']' ';'
		public Group getGroup_1_1_3_1() { return cGroup_1_1_3_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_3_1_0() { return cLeftSquareBracketKeyword_1_1_3_1_0; }
		
		//(lower=NaturalLiteralExpression '..')?
		public Group getGroup_1_1_3_1_1() { return cGroup_1_1_3_1_1; }
		
		//lower=NaturalLiteralExpression
		public Assignment getLowerAssignment_1_1_3_1_1_0() { return cLowerAssignment_1_1_3_1_1_0; }
		
		//NaturalLiteralExpression
		public RuleCall getLowerNaturalLiteralExpressionParserRuleCall_1_1_3_1_1_0_0() { return cLowerNaturalLiteralExpressionParserRuleCall_1_1_3_1_1_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_1_3_1_1_1() { return cFullStopFullStopKeyword_1_1_3_1_1_1; }
		
		//upper=UnlimitedNaturalLiteralExpression
		public Assignment getUpperAssignment_1_1_3_1_2() { return cUpperAssignment_1_1_3_1_2; }
		
		//UnlimitedNaturalLiteralExpression
		public RuleCall getUpperUnlimitedNaturalLiteralExpressionParserRuleCall_1_1_3_1_2_0() { return cUpperUnlimitedNaturalLiteralExpressionParserRuleCall_1_1_3_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_3_1_3() { return cRightSquareBracketKeyword_1_1_3_1_3; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1_3_1_4() { return cSemicolonKeyword_1_1_3_1_4; }
	}
	public class AnonymousClassDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.AnonymousClassDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGroupMemberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGroupMemberMemberDefinitionParserRuleCall_2_0 = (RuleCall)cGroupMemberAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AnonymousClassDefinition classification::Class:
		//	{classification::Class} '{' groupMember+=MemberDefinition* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{classification::Class} '{' groupMember+=MemberDefinition* '}'
		public Group getGroup() { return cGroup; }
		
		//{classification::Class}
		public Action getClassAction_0() { return cClassAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//groupMember+=MemberDefinition*
		public Assignment getGroupMemberAssignment_2() { return cGroupMemberAssignment_2; }
		
		//MemberDefinition
		public RuleCall getGroupMemberMemberDefinitionParserRuleCall_2_0() { return cGroupMemberMemberDefinitionParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class NaturalLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.NaturalLiteralExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNATURAL_VALUETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NaturalLiteralExpression behaviors::LiteralInteger:
		//	value=NATURAL_VALUE;
		@Override public ParserRule getRule() { return rule; }
		
		//value=NATURAL_VALUE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//NATURAL_VALUE
		public RuleCall getValueNATURAL_VALUETerminalRuleCall_0() { return cValueNATURAL_VALUETerminalRuleCall_0; }
	}
	public class UnlimitedNaturalLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.UnlimitedNaturalLiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNaturalLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLiteralUnboundedAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//UnlimitedNaturalLiteralExpression behaviors::Expression:
		//	NaturalLiteralExpression | {behaviors::LiteralUnbounded} '*';
		@Override public ParserRule getRule() { return rule; }
		
		//NaturalLiteralExpression | {behaviors::LiteralUnbounded} '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NaturalLiteralExpression
		public RuleCall getNaturalLiteralExpressionParserRuleCall_0() { return cNaturalLiteralExpressionParserRuleCall_0; }
		
		//{behaviors::LiteralUnbounded} '*'
		public Group getGroup_1() { return cGroup_1; }
		
		//{behaviors::LiteralUnbounded}
		public Action getLiteralUnboundedAction_1_0() { return cLiteralUnboundedAction_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUNRESTRICTED_NAMETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////FeatureDefinitionOrStub returns classification::Feature : 
		////  AttributeDefinition /*| OperationDefinitionOrStub*/
		////;
		////
		/////* PROPERTIES */
		////PropertyDefinition returns classification::Feature : 
		////	PropertyDeclaration ';'
		////;
		////
		////AttributeDefinition returns classification::Feature : 
		////	PropertyDeclaration ( initializer = AttributeInitializer )? ';'
		////;
		////
		////AttributeInitializer returns Expression : 
		////	'=' InitializationExpression
		////;
		////
		////PropertyDeclaration returns PropertyDefinition : 
		////	name = Name ':' ( isComposite?='compose' )? 
		////	// CHANGE: Made TypedElementDefinition a composite part of PropertyDefinition instead of the supertype
		////	typePart = TypePart
		////;
		////
		////TypePart returns TypedElementDefinition :
		////  // CHANGE: Added isAny attribute to TypedElementDefinition to allow Xtext serialization.
		////  // CHANGE: Added isMultiplicity attribute to TypedElementDefinition.
		////  // CHANGE: Added isSequence attribute to TypedElementDefinition.
		////  ( isAny ?= 'any' | typeName = QualifiedName )
		////  ( ( '[' 
		////      ( isMultiplicity ?= ']' | 
		////        ( lowerBound = NATURAL_VALUE '..' )? upperBound = UnlimitedNaturalLiteral ']' 
		////      )
		////    )?
		////    ( isOrdered ?= 'ordered' ( isNonunique ?= 'nonunique' )? | 
		////      isNonunique ?='nonunique' ( isOrdered ?= 'ordered' )? | 
		////      isSequence ?= 'sequence'
		////    )?
		////  )?
		////;
		///***************
		//* NAMES        *
		//***************/ Name:
		//	ID | UNRESTRICTED_NAME;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | UNRESTRICTED_NAME
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//UNRESTRICTED_NAME
		public RuleCall getUNRESTRICTED_NAMETerminalRuleCall_1() { return cUNRESTRICTED_NAMETerminalRuleCall_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	Name ('.' Name)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Name ('.' Name)*
		public Group getGroup() { return cGroup; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//('.' Name)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//Name
		public RuleCall getNameParserRuleCall_1_1() { return cNameParserRuleCall_1_1; }
	}
	
	public class VisibilityIndicatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.VisibilityIndicator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_0 = (Keyword)cPrivateEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cProtectedProtectedKeyword_2_0 = (Keyword)cProtectedEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPackageEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPackagePackagedKeyword_3_0 = (Keyword)cPackageEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum VisibilityIndicator returns groups::VisibilityKind:
		//	public | private | protected | package='packaged';
		public EnumRule getRule() { return rule; }
		
		//public | private | protected | package='packaged'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }
		
		//'public'
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }
		
		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_1() { return cPrivateEnumLiteralDeclaration_1; }
		
		//'private'
		public Keyword getPrivatePrivateKeyword_1_0() { return cPrivatePrivateKeyword_1_0; }
		
		//protected
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_2() { return cProtectedEnumLiteralDeclaration_2; }
		
		//'protected'
		public Keyword getProtectedProtectedKeyword_2_0() { return cProtectedProtectedKeyword_2_0; }
		
		//package='packaged'
		public EnumLiteralDeclaration getPackageEnumLiteralDeclaration_3() { return cPackageEnumLiteralDeclaration_3; }
		
		//'packaged'
		public Keyword getPackagePackagedKeyword_3_0() { return cPackagePackagedKeyword_3_0; }
	}
	
	private final UnitDefinitionElements pUnitDefinition;
	private final PackageDefinitionElements pPackageDefinition;
	private final PackageDefinitionOrStubElements pPackageDefinitionOrStub;
	private final MemberDefinitionElements pMemberDefinition;
	private final VisibilityIndicatorElements eVisibilityIndicator;
	private final MemberKindElements pMemberKind;
	private final PackagedElementDefinitionElements pPackagedElementDefinition;
	private final ClassifierDefinitionOrStubElements pClassifierDefinitionOrStub;
	private final ClassDeclarationElements pClassDeclaration;
	private final GeneralizationElements pGeneralization;
	private final ClassDefinitionElements pClassDefinition;
	private final ClassDefinitionOrStubElements pClassDefinitionOrStub;
	private final FeatureDefinitionElements pFeatureDefinition;
	private final AnonymousClassDefinitionElements pAnonymousClassDefinition;
	private final NaturalLiteralExpressionElements pNaturalLiteralExpression;
	private final UnlimitedNaturalLiteralExpressionElements pUnlimitedNaturalLiteralExpression;
	private final NameElements pName;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tBOOLEAN_VALUE;
	private final TerminalRule tNATURAL_VALUE;
	private final TerminalRule tID;
	private final TerminalRule tUNRESTRICTED_NAME;
	private final TerminalRule tSTRING;
	private final TerminalRule tDOCUMENTATION_COMMENT;
	private final TerminalRule tSTATEMENT_ANNOTATION;
	private final TerminalRule tINLINE_STATEMENT;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public AlfGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pUnitDefinition = new UnitDefinitionElements();
		this.pPackageDefinition = new PackageDefinitionElements();
		this.pPackageDefinitionOrStub = new PackageDefinitionOrStubElements();
		this.pMemberDefinition = new MemberDefinitionElements();
		this.eVisibilityIndicator = new VisibilityIndicatorElements();
		this.pMemberKind = new MemberKindElements();
		this.pPackagedElementDefinition = new PackagedElementDefinitionElements();
		this.pClassifierDefinitionOrStub = new ClassifierDefinitionOrStubElements();
		this.pClassDeclaration = new ClassDeclarationElements();
		this.pGeneralization = new GeneralizationElements();
		this.pClassDefinition = new ClassDefinitionElements();
		this.pClassDefinitionOrStub = new ClassDefinitionOrStubElements();
		this.pFeatureDefinition = new FeatureDefinitionElements();
		this.pAnonymousClassDefinition = new AnonymousClassDefinitionElements();
		this.pNaturalLiteralExpression = new NaturalLiteralExpressionElements();
		this.pUnlimitedNaturalLiteralExpression = new UnlimitedNaturalLiteralExpressionElements();
		this.pName = new NameElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tBOOLEAN_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.BOOLEAN_VALUE");
		this.tNATURAL_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.NATURAL_VALUE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.ID");
		this.tUNRESTRICTED_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.UNRESTRICTED_NAME");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.STRING");
		this.tDOCUMENTATION_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.DOCUMENTATION_COMMENT");
		this.tSTATEMENT_ANNOTATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.STATEMENT_ANNOTATION");
		this.tINLINE_STATEMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.INLINE_STATEMENT");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.sysml.Alf.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.omg.sysml.Alf".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	///* UNITS */ UnitDefinition groups::Namespace:
	//	PackageDefinition | ClassDefinition;
	public UnitDefinitionElements getUnitDefinitionAccess() {
		return pUnitDefinition;
	}
	
	public ParserRule getUnitDefinitionRule() {
		return getUnitDefinitionAccess().getRule();
	}
	
	///* PACKAGES */ PackageDefinition groups::Namespace:
	//	'package' name=Name '{' groupMember+=MemberDefinition* '}';
	public PackageDefinitionElements getPackageDefinitionAccess() {
		return pPackageDefinition;
	}
	
	public ParserRule getPackageDefinitionRule() {
		return getPackageDefinitionAccess().getRule();
	}
	
	//PackageDefinitionOrStub groups::Namespace:
	//	PackageDefinition;
	public PackageDefinitionOrStubElements getPackageDefinitionOrStubAccess() {
		return pPackageDefinitionOrStub;
	}
	
	public ParserRule getPackageDefinitionOrStubRule() {
		return getPackageDefinitionOrStubAccess().getRule();
	}
	
	//MemberDefinition groups::NamespaceMembership:
	//	visibility=VisibilityIndicator? (ownedMemberElement=PackagedElementDefinition
	//	| MemberKind memberName=Name? 'is' memberElement=[core::Element|QualifiedName] ';');
	public MemberDefinitionElements getMemberDefinitionAccess() {
		return pMemberDefinition;
	}
	
	public ParserRule getMemberDefinitionRule() {
		return getMemberDefinitionAccess().getRule();
	}
	
	//enum VisibilityIndicator returns groups::VisibilityKind:
	//	public | private | protected | package='packaged';
	public VisibilityIndicatorElements getVisibilityIndicatorAccess() {
		return eVisibilityIndicator;
	}
	
	public EnumRule getVisibilityIndicatorRule() {
		return getVisibilityIndicatorAccess().getRule();
	}
	
	//MemberKind:
	//	'package' | 'class' | 'feature';
	public MemberKindElements getMemberKindAccess() {
		return pMemberKind;
	}
	
	public ParserRule getMemberKindRule() {
		return getMemberKindAccess().getRule();
	}
	
	////enum ImportVisibilityIndicator returns groups::VisibilityKind:
	////	public = 'public' | private = 'private'
	////;
	//PackagedElementDefinition core::Element:
	//	PackageDefinitionOrStub | ClassifierDefinitionOrStub | FeatureDefinition;
	public PackagedElementDefinitionElements getPackagedElementDefinitionAccess() {
		return pPackagedElementDefinition;
	}
	
	public ParserRule getPackagedElementDefinitionRule() {
		return getPackagedElementDefinitionAccess().getRule();
	}
	
	//ClassifierDefinitionOrStub classification::Class:
	//	ClassDefinitionOrStub;
	public ClassifierDefinitionOrStubElements getClassifierDefinitionOrStubAccess() {
		return pClassifierDefinitionOrStub;
	}
	
	public ParserRule getClassifierDefinitionOrStubRule() {
		return getClassifierDefinitionOrStubAccess().getRule();
	}
	
	///* CLASSES */ ClassDeclaration classification::Class:
	//	isAbstract?='abstract'? 'class' name=Name (('is' | 'specializes') ownedGeneralization+=Generalization (','
	//	ownedGeneralization+=Generalization)*)?;
	public ClassDeclarationElements getClassDeclarationAccess() {
		return pClassDeclaration;
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}
	
	//Generalization classification::Generalization:
	//	general=[classification::Class|QualifiedName];
	public GeneralizationElements getGeneralizationAccess() {
		return pGeneralization;
	}
	
	public ParserRule getGeneralizationRule() {
		return getGeneralizationAccess().getRule();
	}
	
	//ClassDefinition classification::Class:
	//	ClassDeclaration '{' groupMember+=MemberDefinition* '}';
	public ClassDefinitionElements getClassDefinitionAccess() {
		return pClassDefinition;
	}
	
	public ParserRule getClassDefinitionRule() {
		return getClassDefinitionAccess().getRule();
	}
	
	//ClassDefinitionOrStub classification::Class:
	//	ClassDefinition
	//	//	ClassDeclaration
	//	//	( isStub ?= ';' | '{' ( ownedMember += ClassMember )* '}' )
	//;
	public ClassDefinitionOrStubElements getClassDefinitionOrStubAccess() {
		return pClassDefinitionOrStub;
	}
	
	public ParserRule getClassDefinitionOrStubRule() {
		return getClassDefinitionOrStubAccess().getRule();
	}
	
	///*
	//ClassMember returns groups::NamespaceMembership : 
	////	( documentation += DOCUMENTATION_COMMENT )?
	////	( annotation += StereotypeAnnotation )*
	////	( methodVisibility = VisibilityKind )?
	////	definition = ClassMemberDefinition
	//	( visibility = VisibilityIndicator )?
	//	( ownedMemberElement = ClassElementDefinition
	//	| 'has' memberElement = [core::Element|QualifiedName] ";"
	//	)
	//;
	//*/ //ClassElementDefinition returns core::Element :
	////	FeatureDefinition
	////;
	///* FEATURES */ FeatureDefinition classification::Feature:
	//	'feature'? (name=Name (':' referencedType+=[classification::Class|QualifiedName] ('is'
	//	redefinedFeature+=[classification::Feature|QualifiedName])?)? ('[' (lower=NaturalLiteralExpression '..')?
	//	upper=UnlimitedNaturalLiteralExpression ']')? (';' | ownedType+=AnonymousClassDefinition) | name=Name? 'is'
	//	redefinedFeature+=[classification::Feature|QualifiedName] (('[' (lower=NaturalLiteralExpression '..')?
	//	upper=UnlimitedNaturalLiteralExpression ']')?
	//	ownedType+=AnonymousClassDefinition
	//	| '[' (lower=NaturalLiteralExpression '..')? upper=UnlimitedNaturalLiteralExpression ']' ';'));
	public FeatureDefinitionElements getFeatureDefinitionAccess() {
		return pFeatureDefinition;
	}
	
	public ParserRule getFeatureDefinitionRule() {
		return getFeatureDefinitionAccess().getRule();
	}
	
	//AnonymousClassDefinition classification::Class:
	//	{classification::Class} '{' groupMember+=MemberDefinition* '}';
	public AnonymousClassDefinitionElements getAnonymousClassDefinitionAccess() {
		return pAnonymousClassDefinition;
	}
	
	public ParserRule getAnonymousClassDefinitionRule() {
		return getAnonymousClassDefinitionAccess().getRule();
	}
	
	//NaturalLiteralExpression behaviors::LiteralInteger:
	//	value=NATURAL_VALUE;
	public NaturalLiteralExpressionElements getNaturalLiteralExpressionAccess() {
		return pNaturalLiteralExpression;
	}
	
	public ParserRule getNaturalLiteralExpressionRule() {
		return getNaturalLiteralExpressionAccess().getRule();
	}
	
	//UnlimitedNaturalLiteralExpression behaviors::Expression:
	//	NaturalLiteralExpression | {behaviors::LiteralUnbounded} '*';
	public UnlimitedNaturalLiteralExpressionElements getUnlimitedNaturalLiteralExpressionAccess() {
		return pUnlimitedNaturalLiteralExpression;
	}
	
	public ParserRule getUnlimitedNaturalLiteralExpressionRule() {
		return getUnlimitedNaturalLiteralExpressionAccess().getRule();
	}
	
	////FeatureDefinitionOrStub returns classification::Feature : 
	////  AttributeDefinition /*| OperationDefinitionOrStub*/
	////;
	////
	/////* PROPERTIES */
	////PropertyDefinition returns classification::Feature : 
	////	PropertyDeclaration ';'
	////;
	////
	////AttributeDefinition returns classification::Feature : 
	////	PropertyDeclaration ( initializer = AttributeInitializer )? ';'
	////;
	////
	////AttributeInitializer returns Expression : 
	////	'=' InitializationExpression
	////;
	////
	////PropertyDeclaration returns PropertyDefinition : 
	////	name = Name ':' ( isComposite?='compose' )? 
	////	// CHANGE: Made TypedElementDefinition a composite part of PropertyDefinition instead of the supertype
	////	typePart = TypePart
	////;
	////
	////TypePart returns TypedElementDefinition :
	////  // CHANGE: Added isAny attribute to TypedElementDefinition to allow Xtext serialization.
	////  // CHANGE: Added isMultiplicity attribute to TypedElementDefinition.
	////  // CHANGE: Added isSequence attribute to TypedElementDefinition.
	////  ( isAny ?= 'any' | typeName = QualifiedName )
	////  ( ( '[' 
	////      ( isMultiplicity ?= ']' | 
	////        ( lowerBound = NATURAL_VALUE '..' )? upperBound = UnlimitedNaturalLiteral ']' 
	////      )
	////    )?
	////    ( isOrdered ?= 'ordered' ( isNonunique ?= 'nonunique' )? | 
	////      isNonunique ?='nonunique' ( isOrdered ?= 'ordered' )? | 
	////      isSequence ?= 'sequence'
	////    )?
	////  )?
	////;
	///***************
	//* NAMES        *
	//***************/ Name:
	//	ID | UNRESTRICTED_NAME;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//QualifiedName:
	//	Name ('.' Name)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal BOOLEAN_VALUE:
	//	'true' | 'false';
	public TerminalRule getBOOLEAN_VALUERule() {
		return tBOOLEAN_VALUE;
	}
	
	//terminal NATURAL_VALUE returns ecore::EInt:
	//	('0' | '1'..'9' ('_'? '0'..'9')*) | ('0b' | '0B') '0'..'1' ('_'? '0'..'1')* | ('0x' | '0X') ('0'..'9' | 'a'..'f' |
	//	'A'..'F') ('_'? ('0'..'9' | 'a'..'f' | 'A'..'F'))* | '0' '_'? '0'..'7' ('_'? '0'..'7')*;
	public TerminalRule getNATURAL_VALUERule() {
		return tNATURAL_VALUE;
	}
	
	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal UNRESTRICTED_NAME:
	//	'\'' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '\''))* '\'';
	public TerminalRule getUNRESTRICTED_NAMERule() {
		return tUNRESTRICTED_NAME;
	}
	
	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal DOCUMENTATION_COMMENT:
	//	'/**'->'*/';
	public TerminalRule getDOCUMENTATION_COMMENTRule() {
		return tDOCUMENTATION_COMMENT;
	}
	
	//terminal STATEMENT_ANNOTATION:
	//	'//@'->'\n'
	//	//  '//@' WS? ID (WS? '(' WS? (ID | UNRESTRICTED_NAME) (WS? ',' WS? (ID | UNRESTRICTED_NAME))* WS? ')')? 
	//	//  (WS? '@' WS? ID (WS? '(' WS? (ID | UNRESTRICTED_NAME) (WS? ',' WS? (ID | UNRESTRICTED_NAME))* WS? ')')?)* (' '|'\t')* ('\r'? '\n')
	//;
	public TerminalRule getSTATEMENT_ANNOTATIONRule() {
		return tSTATEMENT_ANNOTATION;
	}
	
	//terminal INLINE_STATEMENT:
	//	'/*@inline(' (ID | UNRESTRICTED_NAME) ')'->'*/';
	public TerminalRule getINLINE_STATEMENTRule() {
		return tINLINE_STATEMENT;
	}
	
	//terminal ML_COMMENT:
	//	'/*' !('*' | '@')->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' (!('@' | '\n' | '\r') !('\n' | '\r')*)? ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
