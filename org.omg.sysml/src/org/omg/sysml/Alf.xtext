/*****************************************************************************
 * SysML 2 Pilot Implementation
 * Copyright (c) 2018, 2019 Model Driven Solutions, Inc.
 * Copyright (c) 2018 IncQuery Labs Ltd.
 * Copyright (c) 2019 Maplesoft (Waterloo Maple, Inc.)
 *    
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of theGNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * @license LGPL-3.0-or-later <http://spdx.org/licenses/LGPL-3.0-or-later>
 * 
 * Contributors:
 *  Ed Seidewitz, MDS
 *  Zoltan Kiss, IncQuery
 *  Balazs Grill, IncQuery
 *  Hisashi Miyashita, Maplesoft
 * 
 *****************************************************************************/

grammar org.omg.sysml.Alf hidden (WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as Ecore
import "http://www.omg.org/spec/SysML/2.0" as SysML

/* UNITS */

MultiunitDefinition returns SysML::Element :
	UnitDefinition 
	( {SysML::Membership.ownedRelatedElement += current} {SysML::Package.ownedRelationship += current} 
	  ( ownedRelationship += UnitMember )+
	)?
;

UnitDefinition returns SysML::Package :
	  PackageUnitDefinition 
	| ClassifierUnitDefinition 
	| ClassUnitDefinition
	| DataTypeUnitDefinition
	| AssociationUnitDefinition 
	| InteractionUnitDefinition
	| BehaviorUnitDefinition
	| FunctionUnitDefinition
	| FeatureUnitDefinition
;

PackageUnitDefinition returns SysML::Package: 
    UnitPrefix PackageDefinition 
;

ClassifierUnitDefinition returns SysML::Classifier : 
	UnitPrefix ClassifierDefinition
;

ClassUnitDefinition returns SysML::Class:
	UnitPrefix ClassDefinition
;

DataTypeUnitDefinition returns SysML::DataType :
	UnitPrefix DataTypeDefinition
;

AssociationUnitDefinition returns SysML::Association :
	UnitPrefix AssociationDefinition
;

InteractionUnitDefinition returns SysML::Interaction :
	UnitPrefix InteractionDefinition
;

BehaviorUnitDefinition returns SysML::Behavior :
	UnitPrefix BehaviorDefinition
;

FunctionUnitDefinition returns SysML::Function :
	UnitPrefix FunctionDefinition
;

FeatureUnitDefinition returns SysML::Feature :
	UnitPrefix FeatureBodyDefinition
;

fragment UnitPrefix returns SysML::Package :
	//	( 'namespace' namespace += [SysML::Package | QualifiedName] )?
	( ownedRelationship += PackageImport | ownedRelationship += ElementImport )*
	( ownedRelationship += Annotation )*
;

/* UNIT MEMBERSHIPS */

UnitMember returns SysML::Membership :
	ownedRelatedElement += UnitDefinition
;

/* VISIBILITY */

enum PackageElementVisibilityIndicator returns SysML::VisibilityKind:
	public = 'public' | private = 'private'
;

enum VisibilityIndicator returns SysML::VisibilityKind :
	public = 'public' | private = 'private' | protected = 'protected' | package = 'packaged'
;

/* COMMENTS */

Annotation returns SysML::Annotation :
	ownedRelatedElement += Comment
;

Comment returns SysML::Comment :
	body = DOCUMENTATION_COMMENT
;

/* IMPORTS */

PackageImport returns SysML::Import :
	( ownedRelationship += Annotation )*
	( visibility = PackageElementVisibilityIndicator )?  
	'import' (
	  importedPackage = [SysML::Package|Name] ( '::' | '.' ) '*' 
	| importedPackage = [SysML::Package|ColonQualifiedName] '::' '*' 
	| importedPackage = [SysML::Package|DotQualifiedName] '.' '*'
	) ';'
;

ElementImport returns SysML::Membership :
	PackageMemberPrefix	
	'import' memberElement = [SysML::Element|QualifiedName] ( 'as' memberName = Name )? ';'
;

/* PACKAGES */

NonFeatureDefinition returns SysML::Package:
	  PackageDefinitionOrStub 
	| ClassifierDefinitionOrStub 
	| ClassDefinitionOrStub
	| DataTypeDefinitionOrStub 
	| AssociationDefinitionOrStub
	| InteractionDefinitionOrStub
	| BehaviorDefinitionOrStub
	| FunctionDefinitionOrStub
;

PackageDefinitionOrStub returns SysML::Package :
	PackageDefinition
//	'package' name = Name ( isStub ?= ';' | '{' ( ownedRelationship += PackageMember )* '}' )
;

fragment PackageDefinition returns SysML::Package : 
	'package' name = Name '{' ( ownedRelationship += PackageMember | ownedRelationship += PackageImport )* '}' 
;

/* PACKAGE MEMBERSHIPS */

PackageMember returns SysML::Membership : 
	PackageMemberPrefix	
	( NonFeatureMemberElement 
	| FeaturePackageMemberElement
	)
;

fragment PackageMemberPrefix returns SysML::Membership :
	( ownedRelationship += Annotation )*
//  ( annotation += StereotypeAnnotation )*
    ( visibility = PackageElementVisibilityIndicator )?		
;

fragment NonFeatureMemberElement returns SysML::Membership :
	( ownedRelatedElement += NonFeatureDefinition
	| 'package' ( memberName = Name )? 'is' memberElement = [SysML::Package|QualifiedName] ';'
    | 'classifier' ( memberName = Name )? 'is' memberElement = [SysML::Classifier|QualifiedName] ';'
    | 'class' ( memberName = Name )? 'is' memberElement = [SysML::Class|QualifiedName] ';'
    | 'datatype' ( memberName = Name )? 'is' memberElement = [SysML::DataType|QualifiedName] ';'
    | 'assoc' ( memberName = Name )? 'is' memberElement = [SysML::Association|QualifiedName] ';'
    | 'behavior' ( memberName = Name )? 'is' memberElement = [SysML::Behavior|QualifiedName] ';'
    | 'function' ( memberName = Name )? 'is' memberElement = [SysML::Function|QualifiedName] ';'
	| 'import' memberElement = [SysML::Element|QualifiedName] ( 'as' memberName = Name )? ';'
	)
;

//NonFeatureMemberKind :
//	'package' | 'class' | 'assoc'
//;

fragment FeaturePackageMemberElement returns SysML::Membership :
	  'feature'? ownedRelatedElement += NamedFeatureDefinition
	| 'abstract' 'feature'? ownedRelatedElement += AbstractNamedFeatureDefinition
	| 'feature' ownedRelatedElement += UnnamedFeatureDefinition
	| 'abstract' 'feature' ownedRelatedElement += AbstractUnnamedFeatureDefinition
	| ( 'feature' ( memberName = Name )? | memberName = Name ) 'is' memberElement = [SysML::Feature|QualifiedName] ';'
	| ownedRelatedElement += StepDefinition
	| 'step' ( memberName = Name )? 'is' memberElement = [SysML::Step|QualifiedName] ';'
	| ownedRelatedElement += ExpressionDefinition
	| 'expr' ( memberName = Name )? 'is' memberElement = [SysML::Expression|QualifiedName] ';'
;

/* TYPES */

fragment TypeBody returns SysML::Type :
	';' | '{' ( ownedRelationship += TypeMember | ownedRelationship += PackageImport )* '}'
;

fragment AbstractTypeBody returns SysML::Type :
	isAbstract ?= ';' | isAbstract ?= '{' ( ownedRelationship += TypeMember | ownedRelationship += PackageImport )* '}'
;

/* TYPE MEMBERSHIPS */

TypeMember returns SysML::Membership : 
	NonFeatureTypeMember | FeatureMember | EndFeatureMember | FeatureTypeMember
;

NonFeatureTypeMember returns SysML::Membership : 
	TypeMemberPrefix NonFeatureMemberElement
;

FeatureTypeMember returns SysML::FeatureMembership : 
	TypeMemberPrefix
	(
    // These alternatives are provided for legacy Alf backwards compatibility.	
      ( direction = FeatureDirection )? ownedRelatedElement += NamedFeatureDefinition
    | 'abstract' ( direction = FeatureDirection )? ownedRelatedElement += AbstractNamedFeatureDefinition
	| ( direction = FeatureDirection )? memberName = Name 'is' memberFeature = [SysML::Feature|QualifiedName] ';'		
	)
;

FeatureMember returns SysML::FeatureMembership :
	TypeMemberPrefix
	(
      ( 'feature' | isPart ?= 'part' | isPortion ?= 'portion' | isPort ?= 'port' ) ( direction = FeatureDirection )?  
      ( ownedRelatedElement += FeatureDefinition 
      | ( memberName = Name )? 'is' memberFeature = [SysML::Feature|QualifiedName] ';'
      )
    | 'abstract' ( 'feature' | isPart ?= 'part' | isPortion ?= 'portion' | isPort ?= 'port' ) ( direction = FeatureDirection )?
      ownedRelatedElement += AbstractFeatureDefinition
	| 'connector' 
	  ( ownedRelatedElement += ConnectorDefinition 
	  | ( memberName = Name )? 'is' memberFeature = [SysML::Connector|QualifiedName] ';'
	  )
	| ownedRelatedElement += StepDefinition
	| 'step' ( memberName = Name )? 'is' memberFeature = [SysML::Step|QualifiedName] ';'
	| ownedRelatedElement += ExpressionDefinition
	| 'expr' ( memberName = Name )? 'is' memberFeature = [SysML::Expression|QualifiedName] ';'
	| ownedRelatedElement += PerformedStepDefinition
	| ownedRelatedElement += AcceptStepDefinition
	| 'perform' ( memberName = Name)? 'is' memberFeature = [SysML::Step|QualifiedName] ';'
    | 'abstract' 'connector' ownedRelatedElement += AbstractConnectorDefinition
    | 'binding' ownedRelatedElement += BindingConnectorDefinition
	| 'succession' 
	  ( ownedRelatedElement += SuccessionDefinition 
	  | ( memberName = Name )? 'is' memberFeature = [SysML::Succession|QualifiedName] ';'
	  )
    | 'abstract' 'succession' ownedRelatedElement += AbstractSuccessionDefinition
    | 'then' ownedRelatedElement += TargetSuccessionDefinition ';'
	| 'stream' 
	  ( ownedRelatedElement += ItemFlowDefinition 
	  | ( memberName = Name )? 'is' memberFeature = [SysML::ItemFlow|QualifiedName] ';'
	  )
    | 'abstract' 'stream' ownedRelatedElement += AbstractItemFlowDefinition
	| 'flow' 
	  ( ownedRelatedElement += SuccessionItemFlowDefinition 
	  | ( memberName = Name )? 'is' memberFeature = [SysML::SuccessionItemFlow|QualifiedName] ';'
	  )
    | 'abstract' 'flow' ownedRelatedElement += AbstractSuccessionItemFlowDefinition
    )
;

EndFeatureMember returns SysML::EndFeatureMembership :
	TypeMemberPrefix
    (
      'end' ( isPart ?= 'part' | isPortion ?= 'portion' | isPort ?= 'port' )? ( direction = FeatureDirection )? ownedRelatedElement += FeatureDefinition
    | 'abstract' 'end' ( isPart ?= 'part' | isPortion ?= 'portion' | isPort ?= 'port' )? ( direction = FeatureDirection )? ownedRelatedElement += AbstractFeatureDefinition
	| 'end' ( isPart ?= 'part' | isPortion ?= 'portion' ) ( memberName = Name )? 'is' memberFeature = [SysML::Feature|QualifiedName] ';'
	)
;

enum FeatureDirection returns SysML::FeatureDirectionKind:
	in = 'in' | out = 'out' | inout = 'inout'
;

fragment TypeMemberPrefix returns SysML::Membership :
	( ownedRelationship += Annotation )*
//  ( annotation += StereotypeAnnotation )*
    ( visibility = VisibilityIndicator )?
;

/* CLASSIFIERS */

ClassifierDefinitionOrStub returns SysML::Classifier :
	ClassifierDefinition 
//	ClassifierDeclaration ( isStub ?= ';' | CategoryBody )
;

fragment ClassifierDefinition returns SysML::Classifier : 
	ClassifierDeclaration TypeBody
;

fragment ClassifierDeclaration returns SysML::Classifier :
	( isAbstract ?= 'abstract' )? 'classifier' ClassifierDeclarationCompletion
;

fragment ClassifierDeclarationCompletion returns SysML::Classifier :	
	name = Name 
//  ( '<' ownedMember += ClassifierTemplateParameter ( ',' ownedMember += ClassifierTemplateParameter )* '>' )? 
	SpecializationList?
;

fragment SpecializationList returns SysML::Classifier :
	'specializes' ownedRelationship += Superclassing ( ',' ownedRelationship += Superclassing )*
;

Superclassing returns SysML::Superclassing:
	superclass = [SysML::Classifier | QualifiedName]
;

/* CLASSES */

ClassDefinitionOrStub returns SysML::Class :
	ClassDefinition
;

fragment ClassDefinition returns SysML::Class : 
	ClassDeclaration TypeBody
;

fragment ClassDeclaration returns SysML::Class :
	( isAbstract ?= 'abstract' )? 'class' ClassifierDeclarationCompletion
;

/* DATA TYPES */

DataTypeDefinitionOrStub returns SysML::DataType :
	DataTypeDefinition
;

fragment DataTypeDefinition returns SysML::DataType :
	DataTypeDeclaration TypeBody
;

fragment DataTypeDeclaration returns SysML::DataType :
	( isAbstract ?= 'abstract' )? 'datatype' ClassifierDeclarationCompletion
;

/* ASSOCIATIONS */

AssociationDefinitionOrStub returns SysML::Association :
	AssociationDefinition
	// AssociationDeclaration { isStub = ';' | AssociationBody }
;

fragment AssociationDefinition returns SysML::Association :
	AssociationDeclaration AssociationBody
;

fragment AssociationDeclaration returns SysML::Association :
	( isAbstract ?= 'abstract' )? 'assoc' ClassifierDeclarationCompletion
;

fragment AssociationBody returns SysML::Association :
	';'| '{' ( ownedRelationship += AssociationMember | ownedRelationship += PackageImport )* '}'
;

/* ASSOCIATION MEMBERSHIPS */

AssociationMember returns SysML::Membership :
	NonFeatureTypeMember | FeatureMember | EndFeatureMember | AssociationEndFeatureMember
;

AssociationEndFeatureMember returns SysML::EndFeatureMembership :
	TypeMemberPrefix
    (
	// These alternatives are provided for legacy Alf backwards compatibility;
      ( direction = FeatureDirection )? ownedRelatedElement += NamedFeatureDefinition
    | 'abstract' ( direction = FeatureDirection )? ownedRelatedElement += AbstractNamedFeatureDefinition
	| memberName = Name 'is' memberFeature = [SysML::Feature|QualifiedName] ';'
	
	)
;

/* INTERACTIONS */

InteractionDefinitionOrStub returns SysML::Interaction :
	InteractionDefinition
;

fragment InteractionDefinition returns SysML::Interaction :
	InteractionDeclaration AssociationBody
;

fragment InteractionDeclaration returns SysML::Interaction :
	( isAbstract ?= 'abstract' )? 'interaction' ClassifierDeclarationCompletion
;

/* BEHAVIORS */

BehaviorDefinitionOrStub returns SysML::Behavior :
	BehaviorDefinition
;

fragment BehaviorDefinition returns SysML::Behavior :
	BehaviorDeclaration BehaviorBody
;

fragment BehaviorDeclaration returns SysML::Behavior :
	( isAbstract ?= 'abstract')? 'behavior' name = Name ParameterList SpecializationList?
;

fragment ParameterList returns SysML::Type :
	'(' ( ownedRelationship += ParameterMember ( ',' ownedRelationship += ParameterMember )* )? ')'
;

fragment BehaviorBody returns SysML::Type :
	';'| '{' ( ownedRelationship += BehaviorMember | ownedRelationship += PackageImport )* '}'
;

/* BEHAVIOR MEMBERSHIPS */

ParameterMember returns SysML::ParameterMembership :
	( direction = FeatureDirection )? memberName = Name ownedRelatedElement += ParameterDefinition
;

BehaviorMember returns SysML::Membership :
	NonFeatureTypeMember | FeatureMember | EndFeatureMember	
;

/* FUNCTIONS */

FunctionDefinitionOrStub returns SysML::Function :
	FunctionDefinition  
;

fragment FunctionDefinition returns SysML::Function :
	FunctionDeclaration FunctionBody
;

fragment FunctionDeclaration returns SysML::Function :
	( isAbstract ?= 'abstract')? 'function' name = Name ParameterList ReturnParameterPart SpecializationList?
;

fragment ReturnParameterPart returns SysML::Type :
	ownedRelationship += ReturnParameterMember
;

fragment FunctionBody returns SysML::Type :
	  ';'
	| '{' ( ownedRelationship += BehaviorMember | ownedRelationship += PackageImport )* 
	      ( ownedRelationship += ExpressionMember )? '}'
;

/* FUNCTION MEMBERSHIPS */

ReturnParameterMember returns SysML::ReturnParameterMembership :
	( memberName = Name )? ownedRelatedElement += ParameterDefinition
;

ExpressionMember returns SysML::FeatureMembership :
	ownedRelatedElement += Expression
;

/* FEATURES */

FeatureDefinition returns SysML::Feature :
	NamedFeatureDefinition | UnnamedFeatureDefinition
;

AbstractFeatureDefinition returns SysML::Feature :
	AbstractNamedFeatureDefinition | AbstractUnnamedFeatureDefinition
;

NamedFeatureDefinition returns SysML::Feature :
	FeatureDeclaration FeatureCompletion
;

AbstractNamedFeatureDefinition returns SysML::Feature :
	FeatureDeclaration AbstractFeatureCompletion
;

UnnamedFeatureDefinition returns SysML::Feature :
	'redefines' ownedRelationship += Redefinition TypePart
	FeatureCompletion
;

AbstractUnnamedFeatureDefinition returns SysML::Feature :
	'redefines' ownedRelationship += Redefinition TypePart
	AbstractFeatureCompletion
;

fragment FeatureBodyDefinition returns SysML::Feature :
	( isAbstract ?= 'abstract' )? 'feature'? FeatureDeclaration FeatureCompletion
;

fragment FeatureDeclaration returns SysML::Feature :
	name = Name TypePart SubsettingPart
;

fragment FeatureCompletion returns SysML::Feature :
	ValuePart? TypeBody
;

fragment AbstractFeatureCompletion returns SysML::Feature :
	ValuePart? AbstractTypeBody
;

fragment ValuePart returns SysML::Feature :
	'=' ownedRelationship += FeatureValue
;

FeatureValue returns SysML::FeatureValue :
	ownedRelatedElement += Expression
;

fragment TypePart returns SysML::Feature :
	( ':' ( isComposite ?= 'compose' )? ( ownedRelationship += FeatureTyping | 'any' ) )?
	( ownedRelationship += Multiplicity )? 
	( isOrdered ?= 'ordered'? & isNonunique ?= 'nonunique'? )
;

fragment NoncomposingTypePart returns SysML::Feature :
	( ':' ( ownedRelationship += FeatureTyping | 'any' ) )?
	( ownedRelationship += Multiplicity )? 
	( isOrdered ?= 'ordered'? & isNonunique ?= 'nonunique'? )
;

FeatureTyping returns SysML::FeatureTyping :
	type = [SysML::Type | QualifiedName]
;

Multiplicity returns SysML::Multiplicity :
	'[' ( ownedRelatedElement +=  NaturalLiteralExpression '..' )? ownedRelatedElement +=  UnlimitedNaturalLiteralExpression ']'
;

fragment SubsettingPart returns SysML::Feature :
	  (  
	  	Subsets ( ',' ownedRelationship += Subset )*
	  | Redefines ( ',' ownedRelationship += Redefinition )*
	  )*
;

fragment Subsets returns SysML::Feature :
	'subsets' ownedRelationship += Subset 
;

Subset returns SysML::Subsetting:
	subsettedFeature = [SysML::Feature|QualifiedName]
;

fragment Redefines returns SysML::Feature :
	'redefines' ownedRelationship += Redefinition
;

Redefinition returns SysML::Redefinition:
	redefinedFeature = [SysML::Feature|QualifiedName] 
;

/* CONNECTORS */

ConnectorDefinition returns SysML::Connector :	 
	ConnectorDeclaration TypeBody	  
;

AbstractConnectorDefinition returns SysML::Connector :
	ConnectorDeclaration AbstractTypeBody
;

fragment ConnectorDeclaration returns SysML::Connector :
	( ( ( name = Name )? ConnectorTypePart 'is')?
	  ownedRelationship += ConnectorEndMember 'to' ownedRelationship += ConnectorEndMember
	  SubsettingPart
	| ( name = Name )? ConnectorTypePart SubsettingPart
	  '(' ownedRelationship += ConnectorEndMember ',' ownedRelationship += ConnectorEndMember
	      ( ',' ownedRelationship += ConnectorEndMember )*
	  ')'
	)
;

fragment ConnectorTypePart returns SysML::Feature :
	( ':' ownedRelationship += ConnectorTyping )?
	( ownedRelationship += Multiplicity )? 
	( isOrdered ?= 'ordered'? & isNonunique ?= 'nonunique'? )
;

ConnectorTyping returns SysML::FeatureTyping :
	type = [SysML::Association | QualifiedName]
;

ConnectorEnd returns SysML::Feature :
	ownedRelationship += Subset ( ownedRelationship += Multiplicity )?
;

MultiplicityEnd returns SysML::Feature :
	{SysML::SourceEnd} ( ownedRelationship += Multiplicity )?
;

EmptyEnd returns SysML::Feature :
	{SysML::TargetEnd}
;

/* CONNECTOR MEMBERSHIPS */

ConnectorEndMember returns SysML::EndFeatureMembership :
	( memberName = Name '=>' )? ownedRelatedElement += ConnectorEnd
;

MultiplicityEndMember returns SysML::EndFeatureMembership :
	ownedRelatedElement += MultiplicityEnd
;

EmptyEndMember returns SysML::EndFeatureMembership :
	ownedRelatedElement += EmptyEnd
;

/* BINDING CONNECTORS */

BindingConnectorDefinition returns SysML::BindingConnector :
	( ( name = Name )? ConnectorTypePart 'is')?
	  ownedRelationship += ConnectorEndMember '=' ownedRelationship += ConnectorEndMember
	  TypeBody	
;

/* SUCCESSIONS */

SuccessionDefinition returns SysML::Succession :
	SuccessionDeclaration TypeBody
;

AbstractSuccessionDefinition returns SysML::Succession :
	SuccessionDeclaration AbstractTypeBody
;

fragment SuccessionDeclaration returns SysML::Succession :
	( ( name = Name )? ConnectorTypePart 'is' )?
	ownedRelationship += ConnectorEndMember 'then' ownedRelationship += ConnectorEndMember
;

TargetSuccessionDefinition returns SysML::Succession :
	ownedRelationship += MultiplicityEndMember ownedRelationship += ConnectorEndMember
;

EmptySuccessionDefinition returns SysML::Succession :
	ownedRelationship += MultiplicityEndMember ownedRelationship += EmptyEndMember
;

/* ITEM FLOWS */

ItemFlowDefinition returns SysML::ItemFlow :
	ItemFlowDeclaration TypeBody
;

AbstractItemFlowDefinition returns SysML::ItemFlow :
	ItemFlowDeclaration AbstractTypeBody
;

SuccessionItemFlowDefinition returns SysML::SuccessionItemFlow :
	ItemFlowDeclaration TypeBody
;

AbstractSuccessionItemFlowDefinition returns SysML::SuccessionItemFlow :
	ItemFlowDeclaration AbstractTypeBody
;

fragment ItemFlowDeclaration returns SysML::ItemFlow :
	( ( name = Name )? ConnectorTypePart 'is' )? ( ( ownedRelationship += ItemFeatureMember )? 'from' )
	ownedRelationship += ItemFlowEndMember 'to' ownedRelationship += ItemFlowEndMember
;

ItemFeatureTyping returns SysML::ItemFeature :
	ownedRelationship += FeatureTyping ( ownedRelationship += Multiplicity )?
;

EmptyItemFeature returns SysML::ItemFeature :
	{SysML::ItemFeature}
;

ItemFlowEnd returns SysML::ItemFlowEnd :
	ownedRelationship += ItemFlowFeatureMember
;

ItemFlowFeature returns SysML::ItemFlowFeature :
	ownedRelationship += Redefinition
;


/* ITEM FLOW MEMBERSHIPS */

ItemFeatureMember returns SysML::FeatureMembership :
	( memberName = Name ':' )? ownedRelatedElement += ItemFeatureTyping
;

ItemFlowEndMember returns SysML::EndFeatureMembership :
	ownedRelatedElement += ItemFlowEnd
;

ItemFlowFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += ItemFlowFeature
;

EmptyItemFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += EmptyItemFeature
;

/* PARAMETERS */

ParameterDefinition returns SysML::Parameter :
	TypePart // ( Subsets | Redefines )*
;

/* STEPS */

StepDefinition returns SysML::Step :
	( 'then' ownedRelationship += EmptySuccessionMember )?
    ( isAbstract ?= 'abstract' )? isComposite ?= 'step' 
	( name = Name NoncomposingTypePart StepParameterList? SubsettingPart ValuePart?
	| NoncomposingTypePart StepParameterList? ValuePart?
	| 'redefines' ownedRelationship += Redefinition NoncomposingTypePart StepParameterList? ValuePart?
	) BehaviorBody

;

fragment StepParameterList returns SysML::Type :
	'(' ( ownedRelationship += StepParameterMember ( ownedRelationship += StepParameterFlowMember )?
		  ( ',' ownedRelationship += StepParameterMember ( ownedRelationship += StepParameterFlowMember )? )*
	    )? ')'
;

StepParameterDefinition returns SysML::Parameter :
	TypePart ValuePart?
;

StepParameterFlowDefinition returns SysML::ItemFlow :
	( 'stream' | {SysML::SuccessionItemFlow} 'flow' )? ownedRelationship += EmptyItemFeatureMember 
	'from' ownedRelationship += ItemFlowEndMember
;

PerformedStepDefinition returns SysML::Step :
	( 'then' ownedRelationship += EmptySuccessionMember )?
    'perform' ( name = Name NoncomposingTypePart 'by' )? 
    ownedRelationship += Subset 
    StepParameterList? SubsettingPart ValuePart?
	BehaviorBody
;

AcceptStepDefinition returns SysML::Step :
	( 'then' ownedRelationship += EmptySuccessionMember )?
	'accept' ( name = Name NoncomposingTypePart )? '(' ownedRelationship += ItemFeatureMember ')'
	BehaviorBody
;

/* STEP MEMBERSHIPS */

StepParameterMember returns SysML::ParameterMembership :
	( direction = FeatureDirection )? ( memberName = Name )? ownedRelatedElement += StepParameterDefinition
;

StepParameterFlowMember returns SysML::FeatureMembership :
	ownedRelatedElement += StepParameterFlowDefinition
;

EmptySuccessionMember returns SysML::FeatureMembership :
	ownedRelatedElement += EmptySuccessionDefinition
;

/* EXPRESSIONS */

// Block Expressions

ExpressionDefinition returns SysML::BlockExpression :
	( isAbstract ?= 'abstract')? 'expr' 
	( name = Name TypePart ( StepParameterList ReturnParameterPart )? SubsettingPart ValuePart?
	| TypePart ( StepParameterList ReturnParameterPart )? ValuePart?
	| 'redefines' ownedRelationship += Redefinition TypePart ( StepParameterList ReturnParameterPart )? ValuePart?
	)
	FunctionBody
;

Expression returns SysML::Expression :
	 ConditionalExpression
;

// Conditional Test Expressions

ConditionalExpression returns SysML::Expression :
	NullCoalescingExpression ( {SysML::OperatorExpression.operand += current}
		operator = ConditionalTestOperator operand += Expression ':' operand += ConditionalExpression
	)?
;

ConditionalTestOperator: 
	'?'
;

// Null Coalescing Expressions

NullCoalescingExpression returns SysML::Expression :
	ConditionalOrExpression ( {SysML::OperatorExpression.operand += current}
		operator = NullCoalescingOperator operand += ConditionalOrExpression )*
;

NullCoalescingOperator :
	'??'
;

// Conditional Logical Expressions

ConditionalOrExpression returns SysML::Expression :
	ConditionalAndExpression ( {SysML::OperatorExpression.operand += current}
		operator = ConditionalOrOperator operand += ConditionalAndExpression )*
;

ConditionalOrOperator :
	'||'
;

ConditionalAndExpression returns SysML::Expression :
	OrExpression ( {SysML::OperatorExpression.operand += current}
		operator = ConditionalAndOperator operand += OrExpression )*
;

ConditionalAndOperator :
	'&&'
;

OrExpression returns SysML::Expression :
	XorExpression ( {SysML::OperatorExpression.operand += current}  
		operator = OrOperator operand += XorExpression )*
;

// Logical Expressions

OrOperator :
	'|'
;

XorExpression returns SysML::Expression :
	AndExpression ( {SysML::OperatorExpression.operand += current}  
		operator = XorOperator operand += AndExpression )*
;

XorOperator :
	'^'
;

AndExpression returns SysML::Expression :
	EqualityExpression ( {SysML::OperatorExpression.operand += current}  
		operator = AndOperator operand += EqualityExpression )*
;

AndOperator :
	'&'
;

// Equality Expressions

EqualityExpression returns SysML::Expression :
	ClassificationExpression ( {SysML::OperatorExpression.operand += current}  
		operator = EqualityOperator operand += ClassificationExpression )*
	
;

EqualityOperator :
	'==' | '!=' 
;

// Classification Expressions

ClassificationExpression returns SysML::Expression :
	RelationalExpression ( {SysML::OperatorExpression.operand += current}
		operator = ClassificationOperator ownedRelationship += TypeReferenceMember )?
;

ClassificationOperator :
	'instanceof' | 'hastype'
;

// Relational Expressions

RelationalExpression returns SysML::Expression :
	AdditiveExpression ( {SysML::OperatorExpression.operand += current}  
		operator = RelationalOperator operand += AdditiveExpression )*
;

RelationalOperator :
	'<' | '>' | '<=' | '>='
;

// Arithmetic Expressions

AdditiveExpression returns SysML::Expression :
	MultiplicativeExpression ( {SysML::OperatorExpression.operand += current}  
		operator = AdditiveOperator operand += MultiplicativeExpression )*	
;

AdditiveOperator :
	'+' | '-' 
;

MultiplicativeExpression returns SysML::Expression :
	UnitsExpression ( {SysML::OperatorExpression.operand += current}  
		operator = MultiplicativeOperator operand += UnitsExpression )*	
;

MultiplicativeOperator :
	'*' | '/' | '**' 
;

// Units Expressions

UnitsExpression returns SysML::Expression :
	UnaryExpression ( {SysML::OperatorExpression.operand += current} 
		operator = '@' '[' operand += Expression ']' )?		
;

// Unary Expressions

UnaryExpression returns SysML::Expression:
	SequenceAccessExpression | {SysML::OperatorExpression} operator = UnaryOperator operand += SequenceAccessExpression
;

UnaryOperator :
	'+' | '-' | '!' | '~'
;

SequenceAccessExpression returns SysML::Expression :
	 PrimaryExpression 
	 ( {SysML::OperatorExpression.operand += current} operator = '[' operand += Expression ']' )?
;

// Primary Expressions

PrimaryExpression returns SysML::Expression :
	BaseExpression ( {SysML::OperatorExpression.operand += current} '->' 
		operator = Name ( ownedRelationship += BodyMember )+
	)*
;

BodyExpression returns SysML::BlockExpression :
	// TODO: Update syntax (if possible) to remove need for backtracking.
	// (Backtracking is required if typing is allowed on body parameters. Otherwise, a "=>" on the first alternative is sufficient.)
	  ownedRelationship += BodyParameterMember ( ownedRelationship += BodyParameterMember )* '(' ownedRelationship += ExpressionMember ')'
	| ownedRelationship += ExpressionTyping
;

ExpressionTyping returns SysML::FeatureTyping :
	type = [ SysML::Function | QualifiedName ]
;

// Base Expressions

BaseExpression returns SysML::Expression :
	  NullExpression
	| LiteralExpression 
	| FeatureReferenceExpression 
	| QueryPathExpression
	| InvocationExpression 
	| ClassExtentExpression
	| SequenceConstructionExpression 
	| '(' Expression ')'
;

FeatureReferenceExpression returns SysML::FeatureReferenceExpression :
	ownedRelationship += FeatureReference
;

InvocationExpression returns SysML::InvocationExpression :
	ownedRelationship += FeatureTyping '(' Tuple? ')'
;

fragment Tuple returns SysML::Expression :
	PositionalTuple | NamedTuple
;

fragment PositionalTuple returns SysML::Expression :
	ownedRelationship += ExpressionMember ( ',' ownedRelationship += ExpressionMember )*
;

fragment NamedTuple returns SysML::Expression :
	ownedRelationship += NamedExpressionMember ( ',' ownedRelationship += NamedExpressionMember )*
;

ClassExtentExpression returns SysML::OperatorExpression :
	ownedRelationship += TypeReferenceMember '.' operator = 'allInstances' '(' ')'
;

TypeReference returns SysML::Feature :
	ownedRelationship += FeatureTyping
;

SequenceConstructionExpression returns SysML::SequenceConstructionExpression:
	{SysML::SequenceConstructionExpression} '{' ( element += Expression ( ',' element += Expression )* )? '}'
;

NullExpression returns SysML::NullExpression :
	{SysML::NullExpression} 'null'
;

// Literal Expressions

LiteralExpression returns SysML::LiteralExpression :
	BooleanLiteralExpression | StringLiteralExpression | RealLiteralExpression | UnlimitedNaturalLiteralExpression
;

BooleanLiteralExpression returns SysML::LiteralBoolean :
	value = BOOLEAN_VALUE
;

StringLiteralExpression returns SysML::LiteralString :
	value = STRING_VALUE
;

RealLiteralExpression returns SysML::LiteralReal:
	value = RealValue
;

RealValue returns Ecore::EDouble:
	NATURAL_VALUE? '.' ( NATURAL_VALUE | EXP_VALUE ) | EXP_VALUE
;

NaturalLiteralExpression returns SysML::LiteralInteger:
	value = NATURAL_VALUE
;

UnlimitedNaturalLiteralExpression returns SysML::LiteralExpression:
	NaturalLiteralExpression | {SysML::LiteralUnbounded} '*'
;

/* EXPRESSION MEMBERSHIPS */

FeatureReference returns SysML::FeatureMembership :
	memberFeature = [SysML::Feature | QualifiedName ]
;

TypeReferenceMember returns SysML::FeatureMembership :
	ownedRelatedElement += TypeReference
;

NamedExpressionMember returns SysML::FeatureMembership :
	memberName = Name '=>' ownedRelatedElement += Expression
;

BodyMember returns SysML::FeatureMembership :
	ownedRelatedElement += BodyExpression
;

BodyParameterMember returns SysML::ParameterMembership :
	memberName = Name ownedRelatedElement += ParameterDefinition
;

/* QUERY PATH EXPRESSIONS */

QueryPathExpression returns SysML::Expression :
	QueryHeadExpression
	( '[' {SysML::QueryQualifierExpression.operand += current}
         ( ownedRelationship += BodyMember ) ']' )?
	( '/' {SysML::QueryPathStepExpression.operand += current}
		operand += QueryNameExpression
		( '[' {SysML::QueryQualifierExpression.operand += current}
	         ( ownedRelationship += BodyMember ) ']' )?
	)*
;

QueryNameExpression returns SysML::QueryPathExpression :
    /* isParent ?= '..'
    | isDescendants ?= '/'
    | @traversal
    */
    ownedRelationship += FeatureReference
;

QueryHeadExpression returns SysML::FeatureReferenceExpression :
	'./' FeatureReferenceExpression
;        

/* NAMES */

Name :
	ID | UNRESTRICTED_NAME
;

QualifiedName :
	Name | ColonQualifiedName | DotQualifiedName
;

ColonQualifiedName :
	Name ('::' Name)+
;

DotQualifiedName :
	Name ('.' Name)+
;

/* TERMINALS */

terminal BOOLEAN_VALUE returns Ecore::EBoolean : 
	'true' | 'false' ;

terminal NATURAL_VALUE returns Ecore::EInt :
	('0' | '1'..'9' (('_')? '0'..'9')*) | //DECIMAL 
	(('0b' | '0B') '0'..'1' (('_')? '0'..'1')*) | // BINARY
	(('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')  (('_')? ('0'..'9'|'a'..'f'|'A'..'F'))*) | // HEX
	('0' ('_')? '0'..'7' (('_')? '0'..'7')*) // OCT
;

terminal EXP_VALUE :
	NATURAL_VALUE ('e' | 'E') ('+' | '-')? NATURAL_VALUE
;

terminal ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ;
terminal UNRESTRICTED_NAME returns Ecore::EString : 
	'\'' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'\'') )* '\'' ;

terminal STRING_VALUE returns Ecore::EString : 
	'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"' ;

terminal DOCUMENTATION_COMMENT : '/**' -> '*/' ;
terminal STATEMENT_ANNOTATION : '//@' -> '\n'
//  '//@' WS? ID (WS? '(' WS? (ID | UNRESTRICTED_NAME) (WS? ',' WS? (ID | UNRESTRICTED_NAME))* WS? ')')? 
//  (WS? '@' WS? ID (WS? '(' WS? (ID | UNRESTRICTED_NAME) (WS? ',' WS? (ID | UNRESTRICTED_NAME))* WS? ')')?)* (' '|'\t')* ('\r'? '\n')
;
terminal INLINE_STATEMENT : '/*@inline(' (ID | UNRESTRICTED_NAME) ')' -> '*/';

terminal ML_COMMENT	: '/*' !('*' | '@') -> '*/';
terminal SL_COMMENT : '//' (!('@'|'\n'|'\r') !('\n'|'\r')*)? ('\r'? '\n')?;

terminal WS : (' '|'\t'|'\r'|'\n')+;
