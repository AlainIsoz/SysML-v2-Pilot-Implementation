/*****************************************************************************
 * SysML 2 Pilot Implementation
 * Copyright (c) 2018 Model Driven Solutions, Inc. and IncQuery Labs Ltd.
 *    
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * @license LGPL-3.0-or-later <http://spdx.org/licenses/LGPL-3.0-or-later>
 * 
 * Contributors:
 *  Ed Seidewitz
 *  Zoltan Kiss
 *  Balazs Grill
 * 
 *****************************************************************************/

grammar org.omg.sysml.Alf hidden (WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as Ecore
import "http://www.omg.org/spec/SysML/2.0" as SysML

/* UNITS */

UnitDefinition returns SysML::Package :
	CommentedUnitDefinition | UnCommentedUnitDefinition
;

CommentedUnitDefinition returns SysML::Package :
	( ownedMembership += CommentMember )+
	ownedMembership += UnitMember
;

UnitMember returns SysML::Membership:
	ownedMemberElement = UnCommentedUnitDefinition
;

UnCommentedUnitDefinition returns SysML::Package :
	PackageDefinition | ClassDefinition | NamedFeatureDefinition
;

/* COMMENTS */

Comment returns SysML::Comment :
	body = DOCUMENTATION_COMMENT
;

/* PACKAGES */

PackageDefinition returns SysML::Package: 
	'package' name = Name '{' ( ownedMembership += PackageMember )* '}' 
;

PackageDefinitionOrStub returns SysML::Package :
//	'package' name = Name ( isStub ?= ';' | '{' ( ownedMember += PackagedElement )* '}' )
	PackageDefinition
;

PackageMember returns SysML::Membership : 
	NonFeatureMember | PackagedFeatureMember
;

NonFeatureMember returns SysML::Membership :
	CommentMember | NonCommentNonFeatureMember
;

CommentMember returns SysML::Membership :
	ownedMemberElement = Comment
;

NonCommentNonFeatureMember returns SysML::Membership : 
//  ( annotation += StereotypeAnnotation )*
    ( visibility = VisibilityIndicator )?
	( ownedMemberElement = NonFeatureDefinition
	| NonFeatureMemberKind ( memberName = Name )? 'is' memberElement = [SysML::Element|QualifiedName] ';'
	)
;

NonFeatureMemberKind :
	'package' | 'class' | 'assoc'
;

PackagedFeatureMember returns SysML::Membership : 
//  ( annotation += StereotypeAnnotation )*
    ( visibility = VisibilityIndicator )?
	( 
	  'feature'? ownedMemberElement = NamedFeatureDefinition
	| 'feature' ownedMemberElement = UnnamedFeatureDefinition
	| ( 'feature' ( memberName = Name )? | memberName = Name ) 'is' memberElement = [SysML::Feature|QualifiedName] ';'
	)
;

enum VisibilityIndicator returns SysML::VisibilityKind :
	public = 'public' | private = 'private' | protected = 'protected' | package = 'packaged'
;

//enum ImportVisibilityIndicator returns groups::VisibilityKind:
//	public = 'public' | private = 'private'
//;

NonFeatureDefinition returns SysML::Element:
	PackageDefinitionOrStub | ClassifierDefinitionOrStub
;

ClassifierDefinitionOrStub returns SysML::Class:
	ClassDefinitionOrStub | AssociationDefinitionOrStub
;

/* CLASSES */
ClassDeclaration returns SysML::Class : 
//	( 'namespace' namespace += [groups::Namespace | QualifiedName] )?
//	( ^import += ImportDeclaration )*
	( isAbstract ?= 'abstract' )? 'class' name = Name 
//  ( '<' ownedMember += ClassifierTemplateParameter ( ',' ownedMember += ClassifierTemplateParameter )* '>' )? 
	( ( 'is' | 'specializes' ) ownedMembership += OwnedGeneralization ( ',' ownedMembership += OwnedGeneralization )* )?
;

OwnedGeneralization returns SysML::Membership:
	ownedMemberElement = Generalization
;

Generalization returns SysML::Generalization:
	general = [SysML::Class | QualifiedName]
;

ClassDefinition returns SysML::Class : 
  ClassDeclaration '{' ( ownedMembership += ClassMember )* '}'
;

ClassDefinitionOrStub returns SysML::Class :
	ClassDefinition 
//	ClassDeclaration
//	( isStub ?= ';' | '{' ( ownedMember += ClassMember )* '}' )
;

ClassMember returns SysML::Membership : 
	NonFeatureMember | ClassFeatureMember
;

ClassFeatureMember returns SysML::FeatureMembership : 
//  ( annotation += StereotypeAnnotation )*
    ( visibility = VisibilityIndicator )?
    (
      ( 'feature' | isComposite ?= 'part' | isPort ?= 'port' )? ( direction = FeatureDirection )? ownedMemberElement = NamedFeatureDefinition
    | ( 'feature' | isComposite ?= 'part' | isPort ?= 'port' ) ( direction = FeatureDirection )? ownedMemberElement = UnnamedFeatureDefinition
    | 'connector' ownedMemberElement = ConnectorDefinition
	| ( ( 'feature' | isComposite ?= 'part' ) ( memberName = Name )? | memberName = Name ) 'is' memberElement = [SysML::Element|QualifiedName] ';'
	)
;

enum FeatureDirection returns SysML::FeatureDirectionKind:
	in = 'in' | out = 'out' | inout = 'inout'
;

/* ASSOCIATIONS */

AssociationDeclaration returns SysML::Association :
	( isAbstract ?= 'abstract' )? 'assoc' name = Name
	( ( 'is' | 'specializes' ) ownedMembership += OwnedGeneralization ( ',' ownedMembership += OwnedGeneralization )* )?
;

AssociationDefinition returns SysML::Association:
	AssociationDeclaration '{' ( ownedMembership += AssociationMember )* '}'
;

AssociationMember returns SysML::Membership :
	NonFeatureMember | AssociationFeatureMember | EndFeatureMember
;

AssociationDefinitionOrStub returns SysML::Association :
	AssociationDefinition
;

AssociationFeatureMember returns SysML::FeatureMembership :
//  ( annotation += StereotypeAnnotation )*
    ( visibility = VisibilityIndicator )?
    (
      ( 'feature' | isComposite ?= 'part' | isPort ?= 'port' ) ( direction = FeatureDirection )? ownedMemberElement = FeatureDefinition
    | 'connector' ownedMemberElement = ConnectorDefinition
	| ( 'feature' | isComposite ?= 'part' ) ( memberName = Name )? 'is' memberElement = [SysML::Element|QualifiedName] ';'
	)
;

EndFeatureMember returns SysML::EndFeatureMembership :
//  ( annotation += StereotypeAnnotation )*
    ( visibility = VisibilityIndicator )?
    (
      'end'? ( direction = FeatureDirection )? ownedMemberElement = NamedFeatureDefinition
    | 'end' ( direction = FeatureDirection )? ownedMemberElement = UnnamedFeatureDefinition
	| ( 'end' ( memberName = Name )? | memberName = Name ) 'is' memberElement = [SysML::Element|QualifiedName] ';'
	)
;

/* FEATURES */

FeatureDefinition returns SysML::Feature :
	NamedFeatureDefinition | UnnamedFeatureDefinition
;

NamedFeatureDefinition returns SysML::Feature :
	name = Name 
	(
	  ( ':' ( isComposite ?= 'composes' )? ( referencedType += [SysML::Class | QualifiedName] | 'any' )
	    ( ownedMembership += OwnedRedefinitionOrSubset )? 
	  )?
      ( '[' ( lower = NaturalLiteralExpression '..' )? upper = UnlimitedNaturalLiteralExpression ']' )?
	  ( '=' value = Expression )? ( ';' | '{' ( ownedMembership += ClassMember )* '}' )
	| ownedMembership += OwnedRedefinitionOrSubset
	  ( ( '[' ( lower = NaturalLiteralExpression '..' )? upper = UnlimitedNaturalLiteralExpression ']' )?
	     ( '=' value = Expression ( ';' | '{' ( ownedMembership += ClassMember )* '}' ) 
	     | '{' ( ownedMembership += ClassMember )* '}'
	     )
	  | '[' ( lower = NaturalLiteralExpression '..' )? upper = UnlimitedNaturalLiteralExpression ']' ';'
	  )
	)
;

UnnamedFeatureDefinition returns SysML::Feature :
	ownedMembership += OwnedRedefinitionOrSubset
	( ( '[' ( lower = NaturalLiteralExpression '..' )? upper = UnlimitedNaturalLiteralExpression ']' )?
	   ( '=' value = Expression ( ';' | '{' ( ownedMembership += ClassMember )* '}' ) 
	   | '{' ( ownedMembership += ClassMember )* '}'
	   )
	| '[' ( lower = NaturalLiteralExpression '..' )? upper = UnlimitedNaturalLiteralExpression ']' ';'
	)
;

OwnedRedefinitionOrSubset returns SysML::Membership:
	( ( 'is' | 'redefines' ) ownedMemberElement = Redefinition
	| 'subsets' ownedMemberElement = Subset
	)
;

Redefinition returns SysML::Redefinition:
	redefinedFeature = [SysML::Feature|QualifiedName] 
;

Subset returns SysML::Subset:
	subsettedFeature = [SysML::Feature|QualifiedName]
;

ConnectorDefinition returns SysML::Connector:
	( (name = Name)? ( ':' association = [SysML::Association | QualifiedName] )? 'is' )?
		sourceFeature = [SysML::Feature | QualifiedName] '=>' 
		targetFeature = [SysML::Feature | QualifiedName] ';'
;

/* EXPRESSIONS */

Expression returns SysML::Expression:
	BinaryExpression
;

BinaryExpression returns SysML::Expression:
	UnaryExpression ( {SysML::OperatorExpression.operand += current}  
		( operator = BinaryOperator operand += Expression | operator = '@' '[' operand += Expression ']' ) )?
;

BinaryOperator:
	'+' | '-' | '*' | '/' | '^'
;

UnaryExpression returns SysML::Expression:
	SequenceAccessExpression | {SysML::OperatorExpression} operator = UnaryOperator operand += SequenceAccessExpression
;

UnaryOperator:
	'+' | '-'
;

SequenceAccessExpression returns SysML::Expression:
	 PrimaryExpression 
	 ( {SysML::SequenceAccessExpression.primary = current} '[' index = Expression ']' )*
;

PrimaryExpression returns SysML::Expression:
	  LiteralExpression 
	| ElementReferenceExpression 
	| InstanceCreationExpression 
	| SequenceConstructionExpression 
	| '(' Expression ')'
;

ElementReferenceExpression returns SysML::ElementReferenceExpression:
	referent = [SysML::Element | QualifiedName]
;

InstanceCreationExpression returns SysML::InstanceCreationExpression:
	class = [SysML::Class  | QualifiedName] '(' ( argument += Expression ( ',' argument += Expression )* )? ')'
;

SequenceConstructionExpression returns SysML::SequenceConstructionExpression:
	{SysML::SequenceConstructionExpression} '{' ( element += Expression ( ',' element += Expression )* )? '}'
;

LiteralExpression returns SysML::Expression:
	NullLiteralExpression | BooleanLiteralExpression | StringLiteralExpression | RealLiteralExpression | UnlimitedNaturalLiteralExpression
;

NullLiteralExpression returns SysML::LiteralNull:
	{SysML::LiteralNull} 'null'
;

BooleanLiteralExpression returns SysML::LiteralBoolean :
	value = BOOLEAN_VALUE
;

StringLiteralExpression returns SysML::LiteralString :
	value = STRING_VALUE
;

RealLiteralExpression returns SysML::LiteralReal:
	value = RealValue
;

RealValue returns Ecore::EDouble:
	(NATURAL_VALUE '.' ( NATURAL_VALUE )? | '.' NATURAL_VALUE) (('e' | 'E') ('+' | '-')? NATURAL_VALUE)?
;

NaturalLiteralExpression returns SysML::LiteralInteger:
	value = NATURAL_VALUE
;

UnlimitedNaturalLiteralExpression returns SysML::Expression:
	NaturalLiteralExpression | {SysML::LiteralUnbounded} '*'
;

/***************
* NAMES        *
***************/
Name :
	ID | UNRESTRICTED_NAME
;

QualifiedName :
	Name ( ('.'|'::') Name)*
;

/****************
* Terminals
*****************/
terminal BOOLEAN_VALUE returns Ecore::EBoolean : 
	'true' | 'false' ;

terminal NATURAL_VALUE returns Ecore::EInt :
	('0' | '1'..'9' (('_')? '0'..'9')*) | //DECIMAL 
	(('0b' | '0B') '0'..'1' (('_')? '0'..'1')*) | // BINARY
	(('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')  (('_')? ('0'..'9'|'a'..'f'|'A'..'F'))*) | // HEX
	('0' ('_')? '0'..'7' (('_')? '0'..'7')*) // OCT
;

terminal ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ;
terminal UNRESTRICTED_NAME : '\'' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'\'') )* '\'' ;

terminal STRING_VALUE returns Ecore::EString : 
	'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"' ;

terminal DOCUMENTATION_COMMENT : '/**' -> '*/' ;
terminal STATEMENT_ANNOTATION : '//@' -> '\n'
//  '//@' WS? ID (WS? '(' WS? (ID | UNRESTRICTED_NAME) (WS? ',' WS? (ID | UNRESTRICTED_NAME))* WS? ')')? 
//  (WS? '@' WS? ID (WS? '(' WS? (ID | UNRESTRICTED_NAME) (WS? ',' WS? (ID | UNRESTRICTED_NAME))* WS? ')')?)* (' '|'\t')* ('\r'? '\n')
;
terminal INLINE_STATEMENT : '/*@inline(' (ID | UNRESTRICTED_NAME) ')' -> '*/';

terminal ML_COMMENT	: '/*' !('*' | '@') -> '*/';
terminal SL_COMMENT : '//' (!('@'|'\n'|'\r') !('\n'|'\r')*)? ('\r'? '\n')?;

terminal WS : (' '|'\t'|'\r'|'\n')+;
