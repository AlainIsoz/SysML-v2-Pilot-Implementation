/*****************************************************************************
 * SysML 2 Pilot Implementation
 * Copyright (c) 2018 Model Driven Solutions, Inc.
 *    
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * @license LGPL-3.0-or-later <http://spdx.org/licenses/LGPL-3.0-or-later>
 * 
 * Contributors:
 *  Ed Seidewitz
 * 
 *****************************************************************************/

grammar org.omg.sysml.Alf hidden (WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.omg.org/spec/SysML/2.0/Core" as core
import "http://www.omg.org/spec/SysML/2.0/Groups" as groups
import "http://www.omg.org/spec/SysML/2.0/Classification" as classification

/* UNITS */

UnitDefinition returns groups::Namespace:
	PackageDefinition | ClassDefinition
;

/* PACKAGES */

PackageDefinition returns groups::Namespace: 
	'package' name = Name '{' ( groupMember += MemberDefinition )* '}' 
;

PackageDefinitionOrStub returns groups::Namespace :
//	'package' name = Name ( isStub ?= ';' | '{' ( ownedMember += PackagedElement )* '}' )
	PackageDefinition
;

MemberDefinition returns groups::NamespaceMembership : 
//  ( documentation += DOCUMENTATION_COMMENT )?
//  ( annotation += StereotypeAnnotation )*
    ( visibility = VisibilityIndicator )?
	( ownedMemberElement = PackagedElementDefinition
	| MemberKind ( memberName = Name )? 'is' memberElement = [core::Element|QualifiedName] ';'
	)
;

enum VisibilityIndicator returns groups::VisibilityKind :
	public = 'public' | private = 'private' | protected = 'protected' | package = 'packaged'
;

MemberKind :
	'package' | 'class' | 'feature'
;

//enum ImportVisibilityIndicator returns groups::VisibilityKind:
//	public = 'public' | private = 'private'
//;

PackagedElementDefinition returns core::Element:
  PackageDefinitionOrStub | ClassifierDefinitionOrStub | FeatureDefinition
;

ClassifierDefinitionOrStub returns classification::Class:
	ClassDefinitionOrStub
;

/* CLASSES */
ClassDeclaration returns classification::Class : 
//	( 'namespace' namespace += [groups::Namespace | QualifiedName] )?
//	( ^import += ImportDeclaration )*
	( isAbstract ?= 'abstract' )? 'class' name = Name 
//  ( '<' ownedMember += ClassifierTemplateParameter ( ',' ownedMember += ClassifierTemplateParameter )* '>' )? 
	( 'specializes' ownedGeneralization += Generalization ( ',' ownedGeneralization += Generalization )* )?
;

Generalization returns classification::Generalization :
	general = [classification::Class | QualifiedName]
;

ClassDefinition returns classification::Class : 
  ClassDeclaration '{' ( groupMember += MemberDefinition )* '}'
;

ClassDefinitionOrStub returns classification::Class :
	ClassDefinition 
//	ClassDeclaration
//	( isStub ?= ';' | '{' ( ownedMember += ClassMember )* '}' )
;

/*
ClassMember returns groups::NamespaceMembership : 
//	( documentation += DOCUMENTATION_COMMENT )?
//	( annotation += StereotypeAnnotation )*
//	( methodVisibility = VisibilityKind )?
//	definition = ClassMemberDefinition
	( visibility = VisibilityIndicator )?
	( ownedMemberElement = ClassElementDefinition
	| 'has' memberElement = [core::Element|QualifiedName] ";"
	)
;
*/

//ClassElementDefinition returns core::Element :
//	FeatureDefinition
//;

/* FEATURES */

FeatureDefinition returns classification::Feature :
	'feature'? name = Name ':' referencedType += [classification::Class | QualifiedName]
//	( '[' lower = NATURAL_VALUE '..' upper = NATURAL_VALUE ']' )?
	';'
;

//FeatureDefinitionOrStub returns classification::Feature : 
//  AttributeDefinition /*| OperationDefinitionOrStub*/
//;
//
///* PROPERTIES */
//PropertyDefinition returns classification::Feature : 
//	PropertyDeclaration ';'
//;
//
//AttributeDefinition returns classification::Feature : 
//	PropertyDeclaration ( initializer = AttributeInitializer )? ';'
//;
//
//AttributeInitializer returns Expression : 
//	'=' InitializationExpression
//;
//
//PropertyDeclaration returns PropertyDefinition : 
//	name = Name ':' ( isComposite?='compose' )? 
//	// CHANGE: Made TypedElementDefinition a composite part of PropertyDefinition instead of the supertype
//	typePart = TypePart
//;
//
//TypePart returns TypedElementDefinition :
//  // CHANGE: Added isAny attribute to TypedElementDefinition to allow Xtext serialization.
//  // CHANGE: Added isMultiplicity attribute to TypedElementDefinition.
//  // CHANGE: Added isSequence attribute to TypedElementDefinition.
//  ( isAny ?= 'any' | typeName = QualifiedName )
//  ( ( '[' 
//      ( isMultiplicity ?= ']' | 
//        ( lowerBound = NATURAL_VALUE '..' )? upperBound = UnlimitedNaturalLiteral ']' 
//      )
//    )?
//    ( isOrdered ?= 'ordered' ( isNonunique ?= 'nonunique' )? | 
//      isNonunique ?='nonunique' ( isOrdered ?= 'ordered' )? | 
//      isSequence ?= 'sequence'
//    )?
//  )?
//;


/***************
* NAMES        *
***************/
Name :
	ID | UNRESTRICTED_NAME
;

QualifiedName :
	Name ( '.' Name)*
;

/****************
* Terminals
*****************/
terminal BOOLEAN_VALUE : 'true' | 'false' ;

terminal NATURAL_VALUE :
	('0' | '1'..'9' (('_')? '0'..'9')*) | //DECIMAL 
	(('0b' | '0B') '0'..'1' (('_')? '0'..'1')*) | // BINARY
	(('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')  (('_')? ('0'..'9'|'a'..'f'|'A'..'F'))*) | // HEX
	('0' ('_')? '0'..'7' (('_')? '0'..'7')*) // OCT
;

terminal ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ;
terminal UNRESTRICTED_NAME : '\'' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'\'') )* '\'' ;

terminal STRING	: '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"' ;

terminal DOCUMENTATION_COMMENT : '/**' -> '*/' ;
terminal STATEMENT_ANNOTATION : '//@' -> '\n'
//  '//@' WS? ID (WS? '(' WS? (ID | UNRESTRICTED_NAME) (WS? ',' WS? (ID | UNRESTRICTED_NAME))* WS? ')')? 
//  (WS? '@' WS? ID (WS? '(' WS? (ID | UNRESTRICTED_NAME) (WS? ',' WS? (ID | UNRESTRICTED_NAME))* WS? ')')?)* (' '|'\t')* ('\r'? '\n')
;
terminal INLINE_STATEMENT : '/*@inline(' (ID | UNRESTRICTED_NAME) ')' -> '*/';

terminal ML_COMMENT	: '/*' !('*' | '@') -> '*/';
terminal SL_COMMENT : '//' (!('@'|'\n'|'\r') !('\n'|'\r')*)? ('\r'? '\n')?;

terminal WS : (' '|'\t'|'\r'|'\n')+;
