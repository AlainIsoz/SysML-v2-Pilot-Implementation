/*****************************************************************************
 * SysML 2 Pilot Implementation
 * Copyright (c) 2018 Model Driven Solutions, Inc.
 *    
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * @license LGPL-3.0-or-later <http://spdx.org/licenses/LGPL-3.0-or-later>
 * 
 * Contributors:
 *  Ed Seidewitz
 * 
 *****************************************************************************/

grammar org.omg.sysml.Alf hidden (WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as Ecore
import "http://www.omg.org/spec/SysML/2.0" as SysML

/* UNITS */

UnitDefinition returns SysML::Package:
	PackageDefinition | ClassDefinition
;

/* PACKAGES */

PackageDefinition returns SysML::Package: 
	'package' name = Name '{' ( membership += MemberDefinition )* '}' 
;

PackageDefinitionOrStub returns SysML::Package :
//	'package' name = Name ( isStub ?= ';' | '{' ( ownedMember += PackagedElement )* '}' )
	PackageDefinition
;

MemberDefinition returns SysML::Membership : 
//  ( documentation += DOCUMENTATION_COMMENT )?
//  ( annotation += StereotypeAnnotation )*
    ( visibility = VisibilityIndicator )?
	( ownedMemberElement = PackagedElementDefinition
	| MemberKind? ( memberName = Name )? 'is' memberElement = [SysML::Element|QualifiedName] ';'
	)
;

enum VisibilityIndicator returns SysML::VisibilityKind :
	public = 'public' | private = 'private' | protected = 'protected' | package = 'packaged'
;

MemberKind :
	'package' | 'class' | 'feature'
;

//enum ImportVisibilityIndicator returns groups::VisibilityKind:
//	public = 'public' | private = 'private'
//;

PackagedElementDefinition returns SysML::Element:
  PackageDefinitionOrStub | ClassifierDefinitionOrStub | FeatureDefinition
;

ClassifierDefinitionOrStub returns SysML::Class:
	ClassDefinitionOrStub
;

/* CLASSES */
ClassDeclaration returns SysML::Class : 
//	( 'namespace' namespace += [groups::Namespace | QualifiedName] )?
//	( ^import += ImportDeclaration )*
	( isAbstract ?= 'abstract' )? 'class' name = Name 
//  ( '<' ownedMember += ClassifierTemplateParameter ( ',' ownedMember += ClassifierTemplateParameter )* '>' )? 
	( ( 'is' | 'specializes' ) membership += OwnedGeneralization ( ',' membership += OwnedGeneralization )* )?
;

OwnedGeneralization returns SysML::Membership:
	ownedMemberElement = Generalization
;

Generalization returns SysML::Generalization:
	general = [SysML::Class | QualifiedName]
;

ClassDefinition returns SysML::Class : 
  ClassDeclaration '{' ( membership += MemberDefinition )* '}'
;

ClassDefinitionOrStub returns SysML::Class :
	ClassDefinition 
//	ClassDeclaration
//	( isStub ?= ';' | '{' ( ownedMember += ClassMember )* '}' )
;

/*
ClassMember returns groups::NamespaceMembership : 
//	( documentation += DOCUMENTATION_COMMENT )?
//	( annotation += StereotypeAnnotation )*
//	( methodVisibility = VisibilityKind )?
//	definition = ClassMemberDefinition
	( visibility = VisibilityIndicator )?
	( ownedMemberElement = ClassElementDefinition
	| 'has' memberElement = [core::Element|QualifiedName] ";"
	)
;
*/

//ClassElementDefinition returns core::Element :
//	FeatureDefinition
//;

/* FEATURES */

FeatureDefinition returns SysML::Feature:
	BasicFeatureDefinition | ConnectorDefinition
;

BasicFeatureDefinition returns SysML::Feature :
	( 'feature' | isPort ?= 'port' )? ( direction = FeatureDirection )?
	( name = Name 
	  ( ':' referencedType += [SysML::Class | QualifiedName] 
	  	( membership += OwnedRedefinitionOrSubset )?
      ) ?
      ( '[' ( lower = NaturalLiteralExpression '..' )? upper = UnlimitedNaturalLiteralExpression ']' )?
	  ( ( '=' value = Expression )? ';' | '{' ( membership += MemberDefinition )* '}' )
	| ( name = Name )? membership += OwnedRedefinitionOrSubset
	  ( ( '[' ( lower = NaturalLiteralExpression '..' )? upper = UnlimitedNaturalLiteralExpression ']' )?
	     ( '=' value = Expression ';' | '{' ( membership += MemberDefinition )* '}' )
	  | '[' ( lower = NaturalLiteralExpression '..' )? upper = UnlimitedNaturalLiteralExpression ']' ';'
	  )
	)
;

enum FeatureDirection returns SysML::FeatureDirectionKind:
	in = 'in' | out = 'out' | inout = 'inout'
;

OwnedRedefinitionOrSubset returns SysML::Membership:
	( ( 'is' | 'redefines' ) ownedMemberElement = Redefinition |
	  'subsets' ownedMemberElement = Subset
	)
;

Redefinition returns SysML::Redefinition:
	redefinedFeature = [SysML::Feature|QualifiedName] 
;

Subset returns SysML::Subset:
	subsettedFeature = [SysML::Feature|QualifiedName]
;

ConnectorDefinition returns SysML::Connector:
	'connector' (name = Name)? 
		sourcePath += [SysML::Feature | QualifiedName] '=>' 
		targetPath += [SysML::Feature | QualifiedName] ';'
;

//AnonymousClassDefinition returns SysML::Class :
//	{SysML::Class} '{' ( membership += MemberDefinition )* '}'
//;

/* EXPRESSIONS */

Expression returns SysML::Expression:
	BinaryExpression
;

BinaryExpression returns SysML::Expression:
	UnaryExpression ( {SysML::OperatorExpression.operand += current}  
		( operator = BinaryOperator operand += Expression | operator = '@' '[' operand += Expression ']' ) )?
;

BinaryOperator:
	'+' | '-' | '*' | '/' | '^'
;

UnaryExpression returns SysML::Expression:
	PrimaryExpression | {SysML::OperatorExpression} operator = UnaryOperator operand += PrimaryExpression
;

UnaryOperator:
	'+' | '-'
;

PrimaryExpression returns SysML::Expression:
	LiteralExpression | ElementReferenceExpression | InstanceCreationExpression | SequenceConstructionExpression | '(' Expression ')'
;

ElementReferenceExpression returns SysML::ElementReferenceExpression:
	referent = [SysML::Element | QualifiedName]
;

InstanceCreationExpression returns SysML::InstanceCreationExpression:
	class = [SysML::Class  | QualifiedName] '(' ( argument += Expression ( ',' argument += Expression )* )? ')'
;

SequenceConstructionExpression returns SysML::SequenceConstructionExpression:
	{SysML::SequenceConstructionExpression} '{' ( element += Expression ( ',' element += Expression )* )? '}'
;

LiteralExpression returns SysML::Expression:
	NullLiteralExpression | BooleanLiteralExpression | StringLiteralExpression | RealLiteralExpression | UnlimitedNaturalLiteralExpression
;

NullLiteralExpression returns SysML::LiteralNull:
	{SysML::LiteralNull} 'null'
;

BooleanLiteralExpression returns SysML::LiteralBoolean :
	value = BOOLEAN_VALUE
;

StringLiteralExpression returns SysML::LiteralString :
	value = STRING_VALUE
;

RealLiteralExpression returns SysML::LiteralReal:
	value = RealValue
;

RealValue returns Ecore::EDouble:
	(NATURAL_VALUE '.' ( NATURAL_VALUE )? | '.' NATURAL_VALUE) (('e' | 'E') ('+' | '-')? NATURAL_VALUE)?
;

NaturalLiteralExpression returns SysML::LiteralInteger:
	value = NATURAL_VALUE
;

UnlimitedNaturalLiteralExpression returns SysML::Expression:
	NaturalLiteralExpression | {SysML::LiteralUnbounded} '*'
;

//FeatureDefinitionOrStub returns classification::Feature : 
//  AttributeDefinition /*| OperationDefinitionOrStub*/
//;
//
///* PROPERTIES */
//PropertyDefinition returns classification::Feature : 
//	PropertyDeclaration ';'
//;
//
//AttributeDefinition returns classification::Feature : 
//	PropertyDeclaration ( initializer = AttributeInitializer )? ';'
//;
//
//AttributeInitializer returns Expression : 
//	'=' InitializationExpression
//;
//
//PropertyDeclaration returns PropertyDefinition : 
//	name = Name ':' ( isComposite?='compose' )? 
//	// CHANGE: Made TypedElementDefinition a composite part of PropertyDefinition instead of the supertype
//	typePart = TypePart
//;
//
//TypePart returns TypedElementDefinition :
//  // CHANGE: Added isAny attribute to TypedElementDefinition to allow Xtext serialization.
//  // CHANGE: Added isMultiplicity attribute to TypedElementDefinition.
//  // CHANGE: Added isSequence attribute to TypedElementDefinition.
//  ( isAny ?= 'any' | typeName = QualifiedName )
//  ( ( '[' 
//      ( isMultiplicity ?= ']' | 
//        ( lowerBound = NATURAL_VALUE '..' )? upperBound = UnlimitedNaturalLiteral ']' 
//      )
//    )?
//    ( isOrdered ?= 'ordered' ( isNonunique ?= 'nonunique' )? | 
//      isNonunique ?='nonunique' ( isOrdered ?= 'ordered' )? | 
//      isSequence ?= 'sequence'
//    )?
//  )?
//;


/***************
* NAMES        *
***************/
Name :
	ID | UNRESTRICTED_NAME
;

QualifiedName :
	Name ( '.' Name)*
;

/****************
* Terminals
*****************/
terminal BOOLEAN_VALUE returns Ecore::EBoolean : 
	'true' | 'false' ;

terminal NATURAL_VALUE returns Ecore::EInt :
	('0' | '1'..'9' (('_')? '0'..'9')*) | //DECIMAL 
	(('0b' | '0B') '0'..'1' (('_')? '0'..'1')*) | // BINARY
	(('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')  (('_')? ('0'..'9'|'a'..'f'|'A'..'F'))*) | // HEX
	('0' ('_')? '0'..'7' (('_')? '0'..'7')*) // OCT
;

terminal ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ;
terminal UNRESTRICTED_NAME : '\'' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'\'') )* '\'' ;

terminal STRING_VALUE returns Ecore::EString : 
	'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"' ;

terminal DOCUMENTATION_COMMENT : '/**' -> '*/' ;
terminal STATEMENT_ANNOTATION : '//@' -> '\n'
//  '//@' WS? ID (WS? '(' WS? (ID | UNRESTRICTED_NAME) (WS? ',' WS? (ID | UNRESTRICTED_NAME))* WS? ')')? 
//  (WS? '@' WS? ID (WS? '(' WS? (ID | UNRESTRICTED_NAME) (WS? ',' WS? (ID | UNRESTRICTED_NAME))* WS? ')')?)* (' '|'\t')* ('\r'? '\n')
;
terminal INLINE_STATEMENT : '/*@inline(' (ID | UNRESTRICTED_NAME) ')' -> '*/';

terminal ML_COMMENT	: '/*' !('*' | '@') -> '*/';
terminal SL_COMMENT : '//' (!('@'|'\n'|'\r') !('\n'|'\r')*)? ('\r'? '\n')?;

terminal WS : (' '|'\t'|'\r'|'\n')+;
