import 'http://www.omg.org/spec/SysML/2.0'
package sysml

-- CORE --

-- Comment --

-- (None)

-- Element --

context Element::name: String derive elementNameDerivation:
if owningNamespace = null then null
else owningNamespace.nameOf(self) endif

-- Import --

context Import
def: importedMembership(): Set(Membership) =
	importedPackage.membership->select(visibility = VisibilityKind::public)->asSet() -- Should be ordered set!
	
-- Membership --

context Membership
def: isDistinguishableFrom(other: Membership): Boolean = true -- TBD

-- Package --

context Package
def: nameOf(element: Element): String = 
	if membership->exists(memberElement = element) then
		membership->any(memberElement = element).memberName
	else
		null
	endif
def: excludeCollisions(mem: Set(Membership)): Set(Membership) = mem
	
context Package::membership: OrderedSet(Membership) derive membershipDerivation:
ownedMembership->union(importedMembership)

context Package::importedMembership: OrderedSet(Membership) derive packageImportedMembershipDerivation:
excludeCollisions(ownedImport.importedMembership()->asSet())->
	select(m1 | ownedMembership->forAll(m2 | m1.isDistinguishableFrom(m2)))

context Package::member: OrderedSet(Membership) derive packageMemberDerivation:
membership.memberElement
	
context Package::ownedMember: OrderedSet(Membership) derive packageOwnedMembershipDerivation:
ownedMembership.ownedMemberElement

-- Relationship

context Relationship::related: Bag(Element) derive relationshipRelatedDerivation:
source->asBag()->union(target)

-- CLASSIFICATION

-- Association

context Association::ownedEndFeatureMembership: OrderedSet(EndFeatureMembership) derive associationOwnedEndFeatureMembershipSubset:
ownedFeatureMembership->select(oclIsKindOf(EndFeatureMembership)).oclAsType(EndFeatureMembership)

context Association::relatedType: Bag(Class) derive associationRelatedTypeDerivation:
ownedEndFeatureMembership.memberFeature.type.oclAsType(Class)  -- Return type should be Category!

-- Category

context Category::ownedFeatureMembership: OrderedSet(FeatureMembership) derive categoryOwnedFeatureMembershipSubset:
ownedMembership->select(oclIsKindOf(FeatureMembership)).oclAsType(FeatureMembership)

context Category::feature: OrderedSet(Feature) derive categoryFeatureSubset:
member->select(oclIsKindOf(Feature)).oclAsType(Feature)

context Category::ownedFeature: OrderedSet(Feature) derive categoryOwnedFeatureSubset:
ownedMember->select(oclIsKindOf(Feature)).oclAsType(Feature)

context Category::input: OrderedSet(Feature) derive categoryInputDerivation:
ownedFeatureMembership->
	select(direction = FeatureDirectionKind::_'in' or direction = FeatureDirectionKind::_'inout').
	memberFeature

context Category::output: OrderedSet(Feature) derive categoryOutputDerivation:
ownedFeatureMembership->
	select(direction = FeatureDirectionKind::_'out' or direction = FeatureDirectionKind::_'inout').
	memberFeature

-- Connector

context Connector::relatedFeatures: OrderedSet(Feature) derive connectorRelatedFeatureDerivation:
connectorEnd.feature

-- ConnectorEnd

context ConnectorEnd::path: OrderedSet(Feature) derive connectorEndPathDerivation:
feature.pathFrom(connector.owningNamespace)

-- Feature

context Feature
def: pathFrom(root: Package): OrderedSet(Feature) = 
if owningNamespace = null or owningNamespace = root or not owningNamespace.oclIsKindOf(Feature) then 
	OrderedSet{self}
else 
	owningNamespace.oclAsType(Feature).pathFrom(root)->append(self)
endif

context Feature::ownedType: Set(Category) derive featureOwnedTypeDerivation:
type->intersection(ownedMember).oclAsType(Category)

context Feature::referencedType: Set(Category) derive featureReferenceTypeDerivation:
(type - ownedMember).oclAsType(Category)

context Feature::nestedFeature: Set(Feature) derive featureNestedFeatureDerivation:
feature

context Feature::ownedSubset: Set(Subset) derive featureOwnedSubsetSubset:
ownedGeneralization->select(oclIsKindOf(Subset)).oclAsType(Subset)

context Feature::ownedRedefinition: Set(Redefinition) derive featureOwnedRedefinitionSubset:
ownedSubset->select(oclIsKindOf(Redefinition)).oclAsType(Redefinition)

-- FeatureMembership

-- (None)

-- Generalization

context Generalization::owningCategory: Category derive generalizationOwningCategoryDerivation:
if owningNamespace = specific then  -- Changed from "general" to "specific"!
	owningNamespace.oclAsType(Category)
else
	null
endif

-- Redefinition

-- (None)

-- Subset

-- (None)

endpackage
