/*****************************************************************************
 * SysML 2 Pilot Implementation
 * Copyright (c) 2019 Model Driven Solutions, Inc.
 *    
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * @license LGPL-3.0-or-later <http://spdx.org/licenses/LGPL-3.0-or-later>
 * 
 * Contributors:
 *  Ed Seidewitz
 * 
 *****************************************************************************/

modeltype UML uses "http://www.eclipse.org/uml2/5.0.0/UML";

transformation PrepareMetamodel(inout uml: UML);

main() {
	var model := uml.rootObjects()![Model];
	model.packageImport := Set{};
	model.elementImport := Set{};
	var syntax := uml.objects()[Package]![name = "1. Abstract Syntax"];
	assert fatal (syntax <> null) with log ("Abstract Syntax not found.");
	model.unapplyProfiles();
	syntax.map Namespace(model);
	model.packagedElement[Package]->destroy();
	model.name := "sysml";
	model.URI := "http://www.omg.org/spec/SysML/2.0";
	var featureClass := uml.objects()[Class]![name = "Feature"];
	assert warning (featureClass <> null) with log ("Feature class not found.");
	if featureClass <> null then {
		featureClass.addNonuniqueAttribute();
	} endif;
}

helper Package::unapplyProfiles() {
	self.getAppliedProfiles()->forEach(profile) {
		self.unapplyProfile(profile);
	};
	// Remove stereotype applications
	uml.rootObjects()[obj | obj <> self]->forEach(obj) {
		uml.removeElement(obj)
	};
}

helper Class::addNonuniqueAttribute() {
    var booleanType := self.oclAsType(Class).ownedAttribute![name = "isUnique"].type;
	var isNonuniqueProperty := object Property {
		name := "isNonunique";
		type := booleanType;
		lower := 1;
		upper := 1;
		isDerived := true;
		defaultValue := object LiteralBoolean {
			value := false;
		}
	};
	self.oclAsType(Class).ownedAttribute += isNonuniqueProperty;
	log("Added Property " + isNonuniqueProperty.featureQualifiedName());
}

mapping Package::Namespace(inout model: Model) 
	when { self.name = null or not self.name.endsWith("TBD") } {
	log("Package " + if self.namespace = null then "" else nameOf(self.namespace) + "::" endif + nameOf(self));
	self.ownedMember[Package]->map Namespace(model);
	if self <> model then {
		model.packagedElement += self.packagedElement;
	} endif;
}

query Property::featureQualifiedName(): String {
	return nameOf(self.featuringClassifier![true]) + "::" + nameOf(self);
}

query nameOf(element: NamedElement): String {
	return 
		if element = null then "<null>"
		else if element.name = null or element.name = "" then "<empty>"
		else element.name
		endif endif
}
