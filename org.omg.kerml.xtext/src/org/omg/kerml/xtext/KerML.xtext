/*****************************************************************************
 * SysML 2 Pilot Implementation
 * Copyright (c) 2018-2022 Model Driven Solutions, Inc.
 * Copyright (c) 2018 IncQuery Labs Ltd.
 * Copyright (c) 2019 Maplesoft (Waterloo Maple, Inc.)
 * Copyright (c) 2019 Mgnite Inc.
 *    
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * @license LGPL-3.0-or-later <http://spdx.org/licenses/LGPL-3.0-or-later>
 * 
 * Contributors:
 *  Ed Seidewitz, MDS
 *  Zoltan Kiss, IncQuery
 *  Balazs Grill, IncQuery
 *  Hisashi Miyashita, Maplesoft/Mgnite
 * 
 *****************************************************************************/

grammar org.omg.kerml.xtext.KerML with org.omg.kerml.expressions.xtext.KerMLExpressions

import "http://www.eclipse.org/emf/2002/Ecore" as Ecore
import "http://www.omg.org/spec/SysML/2.0" as SysML

/* ROOT NAMESPACE */

RootNamespace returns SysML::Namespace :
	{SysML::Namespace}NamespaceBodyElement*
;

/* ELEMENTS */

/* Elements */

fragment Identification returns SysML::Element :
	  '<' shortName = Name '>' ( name = Name )?
	| name = Name
;

Element returns SysML::Element :
    'element' Identification? ElementBody
;

fragment ElementBody returns SysML::Element :
    ';' | '{' OwnedElement* '}'
;

fragment OwnedElement returns SysML::Element :
      ownedRelationship += OwnedRelationship
    | ownedRelationship += OwnedCommentAnnotation
    | ownedRelationship += OwnedTextualRepresentationAnnotation
    | ownedRelationship += OwnedMetadataFeatureAnnotation
;

/* Relationships */

Relationship returns SysML::Relationship :
    'relationship' Identification?
    RelationshipRelatedElements
    RelationshipBody
;

OwnedRelationship returns SysML::Relationship :
    'relationship' Identification?
    ( 'to' RelationshipTargetList )?
    RelationshipBody
;

fragment RelationshipRelatedElements returns SysML::Relationship :
      ('from' RelationshipSourceList)? ( 'to' RelationshipTargetList )?
;

fragment RelationshipSourceList returns SysML::Relationship :
    RelationshipSource ( ',' RelationshipSource )*
;

fragment RelationshipSource returns SysML::Relationship :
    source += [SysML::Element | QualifiedName]
;

fragment RelationshipTargetList returns SysML::Relationship :
    RelationshipTarget ( ',' RelationshipTarget )*
;

fragment RelationshipTarget returns SysML::Relationship :
    target += [SysML::Element | QualifiedName]
;

fragment RelationshipBody returns SysML::Relationship :
    ';' | '{' RelationshipOwnedElement* '}'
;

fragment RelationshipOwnedElement returns SysML::Relationship:
      ownedRelatedElement += OwnedRelatedElement
    | ownedRelatedElement += OwnedRelatedRelationship
    | ownedRelationship += OwnedCommentAnnotation
    | ownedRelationship += OwnedTextualRepresentationAnnotation
    | ownedRelationship += OwnedMetadataFeatureAnnotation
;

OwnedRelatedElement returns SysML::Element :
    'element' Identification? ElementBody
;

OwnedRelatedRelationship returns SysML::Relationship :
	'relationship' Identification? 
	RelationshipRelatedElements
	RelationshipBody
;

/* ANNOTATIONS */

Annotation returns SysML::Annotation :
	annotatedElement = [SysML::Element|QualifiedName]
;

EmptyAnnotation returns SysML::Annotation :
	{SysML::Annotation}
;

/* Comments */

Comment returns SysML::Comment :
	( 'comment' Identification? 
	  ('about' ownedRelationship += Annotation
	     ( ',' ownedRelationship += Annotation )* )? 
	)?
	body = REGULAR_COMMENT
;

PrefixComment returns SysML::Comment :
	( 'comment' Identification? )? 
	ownedRelationship += EmptyAnnotation
	body = PREFIX_COMMENT
;

Documentation returns SysML::Documentation :
	'doc' Identification? body = REGULAR_COMMENT
;

OwnedCommentAnnotation returns SysML::Annotation :
	ownedRelatedElement += ( OwnedComment | OwnedDocumentation )
;

OwnedComment returns SysML::Comment :
	( 'comment' Identification? )? body = REGULAR_COMMENT
;

OwnedDocumentation returns SysML::Documentation :
	Documentation
;

/* Textual Representation */

TextualRepresentation returns SysML::TextualRepresentation :
    ( 'rep' Identification? )?
    'language' language = STRING_VALUE 
    body = REGULAR_COMMENT
;

OwnedTextualRepresentationAnnotation returns SysML::Annotation :
	ownedRelatedElement += OwnedTextualRepresentation
;

OwnedTextualRepresentation returns SysML::TextualRepresentation :
	TextualRepresentation
;

/* NAMESPACES */

Namespace returns SysML::Namespace :
	NamespaceDeclaration NamespaceBody
;

fragment NamespaceDeclaration returns SysML::Namespace :
	'namespace' Identification?
;

fragment NamespaceBody returns SysML::Namespace :
	  ';' 
	| '{' ( // Note: PackageBodyElement is expanded here to avoid
			// infinite loops in the incremental parser.
		    ownedRelationship += NamespaceMember 
	      | ownedRelationship += AliasMember
	      | ownedRelationship += Import )* 
	  '}'
;

/* Namespace Bodies */

fragment NamespaceBodyElement returns SysML::Namespace :
	  ownedRelationship += NamespaceMember
	| ownedRelationship += AliasMember
	| ownedRelationship += Import
;

fragment MemberPrefix returns SysML::Membership :
    ( visibility = VisibilityIndicator )?
;

NamespaceMember returns SysML::OwningMembership : 
	  NonFeatureMember | NamespaceFeatureMember
;

NonFeatureMember returns SysML::OwningMembership : 
	MemberPrefix ownedRelatedElement += NonFeatureElement // ownedMemberElement = NonFeatureElement
;

NamespaceFeatureMember returns SysML::OwningMembership :
	MemberPrefix ownedRelatedElement += FeatureElement // ownedMemberElement = FeatureElement
;

AliasMember returns SysML::Membership :
	MemberPrefix 
	'alias' ( '<' memberShortName = Name '>' )? ( memberName = Name )?
	'for' memberElement = [SysML::Element|QualifiedName] ';'
;

Import returns SysML::Import :
	( visibility = VisibilityIndicator )?  
	'import' ( isImportAll ?= 'all' )?
	( ImportedNamespace | ImportedFilterPackage ) ';'
;

fragment ImportedNamespace returns SysML::Import :
	( importedNamespace = [SysML::Namespace|Qualification] )?
	( importedMemberName = Name | '*' )
	( '::' isRecursive ?= '**' )?
;

fragment ImportedFilterPackage returns SysML::Import :
	ownedRelatedElement += FilterPackage
;

FilterPackage returns SysML::Package :
	ownedRelationship += FilterPackageImport
	( ownedRelationship += FilterPackageMember )+
;

FilterPackageImport returns SysML::Import :
	ImportedNamespace
;

FilterPackageMember returns SysML::ElementFilterMembership :
	visibility = FilterPackageMemberVisibility ownedRelatedElement += OwnedExpression ']' // condition = OwnedExpression ']'
;

enum FilterPackageMemberVisibility returns SysML::VisibilityKind :
	private = '['
;

enum VisibilityIndicator returns SysML::VisibilityKind :
	public = 'public' | private = 'private' | protected = 'protected'
;

/* Namespace Elements */

NonFeatureElement returns SysML::Element :
	  Element
	| Relationship
	| Comment
	| PrefixComment
	| Documentation
	| TextualRepresentation
	| MetadataFeature
	| Namespace
	| Package 
	| Multiplicity
	| Type
	| Classifier 
	| Class
	| Structure
	| Metaclass
	| DataType 
	| Association
	| AssociationStructure
	| Interaction
	| Behavior
	| Function
	| Predicate
	| Specialization
	| Conjugation
	| FeatureTyping
	| Subclassification
	| Disjoining
	| FeatureInverting
	| Subsetting
	| Redefinition
	| TypeFeaturing
;

FeatureElement returns SysML::Feature :
	  Feature
	| Step
	| Expression
	| BooleanExpression
	| Invariant
	| Connector
	| BindingConnector
	| Succession
	| ItemFlow
	| SuccessionItemFlow
;

/* PACKAGES */

Package returns SysML::Package :
	PackageDeclaration PackageBody 
;

fragment PackageDeclaration returns SysML::Package :
	'package' Identification?
;

fragment PackageBody returns SysML::Namespace :
	  ';' 
	| '{' ( // Note: PackageBodyElement is expanded here to avoid
			// infinite loops in the incremental parser.
		    ownedRelationship += NamespaceMember 
	      | ownedRelationship += ElementFilterMember
	      | ownedRelationship += AliasMember
	      | ownedRelationship += Import )*
	  '}'
;

ElementFilterMember returns SysML::ElementFilterMembership :
	MemberPrefix
	'filter' ownedRelatedElement += OwnedExpression ';' // condition = OwnedExpression ';'
;

/* TYPES */

/* Types */

Type returns SysML::Type :
    ( isAbstract ?= 'abstract' )? 'type' 
    TypeDeclaration TypeBody
;

fragment TypeDeclaration returns SysML::Type : 
    ( isSufficient ?= 'all' )? Identification?
    ( ownedRelationship += OwnedMultiplicity )? 
    ( SpecializationPart | ConjugationPart )+
    DisjoiningPart?
;

fragment SpecializationPart returns SysML::Type :
      ( ':>' | 'specializes' ) ownedRelationship += OwnedSpecialization
      ( ',' ownedRelationship += OwnedSpecialization )*
;

fragment ConjugationPart returns SysML::Type :
	( '~' | 'conjugates' ) ownedRelationship += OwnedConjugation
;

fragment DisjoiningPart returns SysML::Type :
	'disjoint' 'from' ownedRelationship += OwnedDisjoining
	( ',' ownedRelationship += OwnedDisjoining )* 
;

fragment TypeBody returns SysML::Type :
	';' | 
	'{' ( ownedRelationship += NonFeatureMember 
		| ownedRelationship += FeatureMember 
		| ownedRelationship += AliasMember
		| ownedRelationship += Import
	)* '}'
;

/* Feature Membership */

FeatureMember returns SysML::OwningMembership :
	TypeFeatureMember | OwnedFeatureMember
;

TypeFeatureMember returns SysML::OwningMembership :
	MemberPrefix 'member' ownedRelatedElement += FeatureElement // ownedMemberElement = FeatureElement
;

OwnedFeatureMember returns SysML::FeatureMembership :
	MemberPrefix ownedRelatedElement += FeatureElement // ownedMemberFeature = FeatureElement
;

/* Specialization */

Specialization returns SysML::Specialization :
    ( 'specialization' Identification? )?
    'subtype' 
	( specific = [SysML::Type | QualifiedName]
	| ownedRelatedElement += OwnedFeatureChain )
    ( ':>' | 'specializes') 
	( general = [SysML::Type | QualifiedName]
	| ownedRelatedElement += OwnedFeatureChain ) ';'
;

OwnedSpecialization returns SysML::Specialization :
	  general = [SysML::Type | QualifiedName]
	| ownedRelatedElement += OwnedFeatureChain
;

/* Conjugation */

Conjugation returns SysML::Conjugation :
	( 'conjugation' Identification? )?
    'conjugate' 
    ( conjugatedType = [SysML::Type | QualifiedName]
	| ownedRelatedElement += OwnedFeatureChain )
    ( '~' | 'conjugates') 
    ( originalType = [SysML::Type | QualifiedName]
	| ownedRelatedElement += OwnedFeatureChain ) ';'
;

OwnedConjugation returns SysML::Conjugation :
	  originalType = [SysML::Type | QualifiedName]
	| ownedRelatedElement += OwnedFeatureChain
;

/* Disjoining */

Disjoining returns SysML::Disjoining :
	( 'disjoining' Identification? )?
	'disjoint' 
	( typeDisjoined = [SysML::Type | QualifiedName] 
	| ownedRelatedElement += OwnedFeatureChain )
	'from' 
	( disjoiningType = [SysML::Type | QualifiedName]
	| ownedRelatedElement += OwnedFeatureChain ) ';'
;

OwnedDisjoining returns SysML::Disjoining :
	  disjoiningType = [SysML::Type | QualifiedName]
	| ownedRelatedElement += OwnedFeatureChain
;

/* CLASSIFIERS */

/* Classifiers */

Classifier returns SysML::Classifier :
	( isAbstract ?= 'abstract' )? 'classifier' 
	ClassifierDeclaration TypeBody
;

fragment ClassifierDeclaration returns SysML::Classifier :	
    (isSufficient ?= 'all' )? Identification?
	( ownedRelationship += OwnedMultiplicity )?
	( SuperclassingPart | ClassifierConjugationPart )?
	DisjoiningPart?
;

fragment SuperclassingPart returns SysML::Classifier :
	( ':>' | 'specializes' ) ownedRelationship += Ownedsubclassification 
	( ',' ownedRelationship += Ownedsubclassification )*
;

fragment ClassifierConjugationPart returns SysML::Classifier :
	( '~' | 'conjugates' ) ownedRelationship += ClassifierConjugation
;

/* Subclassification */

Subclassification returns SysML::Subclassification :
	( 'specialization' Identification? )?
    'subclassifier' subclassifier = [SysML::Classifier | QualifiedName]
    ( ':>' | 'specializes') superclassifier = [SysML::Classifier | QualifiedName] ';'
;

Ownedsubclassification returns SysML::Subclassification :
	superclassifier = [SysML::Classifier | QualifiedName]
;

/* Classifier Conjugation */

ClassifierConjugation returns SysML::Conjugation :
	originalType = [SysML::Classifier | QualifiedName]
;

/* FEATURES */

/* Features */

fragment FeaturePrefix returns SysML::Feature :	
	( direction = FeatureDirection )?
	( isAbstract ?= 'abstract' )?
	( isComposite ?= 'composite' | isPortion ?= 'portion' )? 
	( isReadOnly ?= 'readonly' )?
	( isDerived ?= 'derived' )?
	( isEnd ?= 'end' )?
;

enum FeatureDirection returns SysML::FeatureDirectionKind:
	in = 'in' | out = 'out' | inout = 'inout'
;

Feature returns SysML::Feature :
	FeaturePrefix 
	( 'feature'? FeatureDeclaration | 'feature' ) 
	ValuePart? TypeBody
;

fragment FeatureDeclaration returns SysML::Feature :
	( isSufficient ?= 'all' )? 
	( Identification ( FeatureSpecializationPart | FeatureConjugationPart )?
	| FeatureSpecializationPart
	| FeatureConjugationPart
	)
	FeatureRelationshipPart*
;

fragment FeatureRelationshipPart returns SysML::Feature :
	ChainingPart | DisjoiningPart | InvertingPart | TypeFeaturingPart
;

fragment ChainingPart returns SysML::Feature :
	'chains' FeatureChain
;

fragment InvertingPart returns SysML::Feature :
	'inverse' 'of' ownedRelationship += OwnedFeatureInverting
;

fragment TypeFeaturingPart returns SysML::Feature :
	'featured' 'by' ownedRelationship += OwnedTypeFeaturing 
	( ',' ownedRelationship += OwnedTypeFeaturing )*
;

fragment FeatureSpecializationPart returns SysML::Feature :
	  ( -> FeatureSpecialization )+ MultiplicityPart? FeatureSpecialization*
	| MultiplicityPart FeatureSpecialization*
;

fragment MultiplicityPart returns SysML::Feature :
	  ownedRelationship += OwnedMultiplicity 
	| ( ownedRelationship += OwnedMultiplicity )?
	  ( isOrdered ?= 'ordered' isNonunique ?= 'nonunique'?
	  | isNonunique ?= 'nonunique' isOrdered ?= 'ordered'?
	  )
;

fragment FeatureSpecialization returns SysML::Feature :
	Typings | Subsettings | Redefinitions
;

fragment Typings returns SysML::Feature :
	TypedBy ( ',' ownedRelationship += OwnedFeatureTyping )*
;

fragment TypedBy returns SysML::Feature :
	( ':' | 'typed' 'by' ) ownedRelationship += OwnedFeatureTyping
;

fragment Subsettings returns SysML::Feature :
	Subsets ( ',' ownedRelationship += OwnedSubsetting )*
;

fragment Subsets returns SysML::Feature :
	( ':>' | 'subsets' ) ownedRelationship += OwnedSubsetting 
;

fragment Redefinitions returns SysML::Feature :
	Redefines ( ',' ownedRelationship += OwnedRedefinition )*
;

fragment Redefines returns SysML::Feature :
	( ':>>' | 'redefines' ) ownedRelationship += OwnedRedefinition
;

/* Feature Inverting */

FeatureInverting returns SysML::FeatureInverting :
	( 'inverting' Identification? )?
	'inverse' 
	( featureInverted = [SysML::Feature| QualifiedName] 
	| ownedRelatedElement += OwnedFeatureChain )
	'of' 
	( invertingFeature = [SysML::Feature | QualifiedName]
	| ownedRelatedElement += OwnedFeatureChain ) ';'
;

OwnedFeatureInverting returns SysML::FeatureInverting :
	  invertingFeature = [SysML::Feature | QualifiedName]
	| ownedRelatedElement += OwnedFeatureChain
;

/* Type Featuring */

TypeFeaturing returns SysML::TypeFeaturing :
	'featuring' ( Identification? 'of')?
	featureOfType = [SysML::Feature | QualifiedName]
	'by' featuringType = [SysML::Feature | QualifiedName] ';'
;

OwnedTypeFeaturing returns SysML::TypeFeaturing :
	featuringType = [SysML::Type | QualifiedName]
;

/* Feature Typing */

FeatureTyping returns SysML::FeatureTyping :
	( 'specialization' Identification? )?
    'typing' typedFeature = [SysML::Feature | QualifiedName]
    (':' | 'typed' 'by') FeatureType ';'
;

@Override
OwnedFeatureTyping returns SysML::FeatureTyping :
	FeatureType
;

fragment FeatureType returns SysML::FeatureTyping :
	  type = [SysML::Type | QualifiedName]
	| ownedRelatedElement += OwnedFeatureChain
;

/* Subsetting */

Subsetting returns SysML::Subsetting :
	( 'specialization' Identification? )?
    'subset' 
    ( subsettingFeature = [SysML::Feature | QualifiedName]
	| ownedRelatedElement += OwnedFeatureChain )
    ( ':>' | 'subsets' ) 
    ( subsettedFeature = [SysML::Feature | QualifiedName]
	| ownedRelatedElement += OwnedFeatureChain ) ';'
;

OwnedSubsetting returns SysML::Subsetting:
	  subsettedFeature = [SysML::Feature | QualifiedName]
	| ownedRelatedElement += OwnedFeatureChain
;

/* Redefinition */

Redefinition returns SysML::Redefinition :
	( 'specialization' Identification? )?
    'redefinition' 
    ( redefiningFeature = [SysML::Feature | QualifiedName]
	| ownedRelatedElement += OwnedFeatureChain )
    ( ':>>' | 'redefines' ) 
    ( redefinedFeature = [SysML::Feature | QualifiedName]
	| ownedRelatedElement += OwnedFeatureChain ) ';'
;

OwnedRedefinition returns SysML::Redefinition:
	  redefinedFeature = [SysML::Feature | QualifiedName]
	| ownedRelatedElement += OwnedFeatureChain 
;

/* Feature Conjugation */

fragment FeatureConjugationPart returns SysML::Feature :
	( '~' | 'conjugates' ) ownedRelationship += FeatureConjugation
;

FeatureConjugation returns SysML::Conjugation :
	originalType = [SysML::Feature | QualifiedName ]
;

/* FEATURE VALUES */

fragment ValuePart returns SysML::Feature :
	  ownedRelationship += FeatureValue
	| ownedRelationship += FeatureValueExpression
	  ownedRelationship += EmptyFeatureWriteMember
;

FeatureValue returns SysML::FeatureValue :
	( '=' | isDefault ?= 'default' ( '=' | isInitial ?= ':=' )? )
	ownedRelatedElement += OwnedExpression // value = OwnedExpression
;

FeatureValueExpression returns SysML::FeatureValue :
	isInitial ?= ':='
	ownedRelatedElement += OwnedExpression // value = OwnedExpression
;

EmptyFeatureWriteMember returns SysML::OwningMembership :
	ownedRelatedElement += EmptyFeatureWrite // ownedMemberElement = EmptyAssignmentAction
;

EmptyFeatureWrite returns SysML::Step :
	ownedRelationship += EmptyTargetMember
	ownedRelationship += EmptyParameterMember
;

EmptyTargetMember returns SysML::ParameterMembership :
	ownedRelatedElement += EmptyTargetParameter // ownedMemberParameter = TargetParameter
;

EmptyTargetParameter returns SysML::ReferenceUsage :
	ownedRelationship += TargetFeatureMember
;

TargetFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += TargetFeature // ownedMemberFeature = TargetFeature
;

TargetFeature returns SysML::Feature :
	ownedRelationship += EmptyFeatureMember
;

EmptyFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += EmptyFeature // ownedMemberFeature = EmptyFeature
;

EmptyParameterMember returns SysML::ParameterMembership :
	ownedRelatedElement += EmptyFeature
;

/* MULTIPLICITIES */

Multiplicity returns SysML::Multiplicity :
	MultiplicitySubset | MultiplicityRange
;

MultiplicitySubset returns SysML::Multiplicity :
	'multiplicity' Identification? Subsets ';'
;

MultiplicityRange returns SysML::MultiplicityRange :
	'multiplicity' Identification? MultiplicityBounds ';'
;

OwnedMultiplicity returns SysML::OwningMembership :
	ownedRelatedElement += OwnedMultiplicityRange // ownedMemberElement = OwnedMultiplicityRange
;

OwnedMultiplicityRange returns SysML::MultiplicityRange :
	MultiplicityBounds
;

fragment MultiplicityBounds returns SysML::MultiplicityRange :
	// TODO: Allow general expressions for bounds. (Causes LL parsing issues.)
	'[' ownedRelationship += MultiplicityExpressionMember
	      ( '..' ownedRelationship += MultiplicityExpressionMember )? ']'
;

MultiplicityExpressionMember returns SysML::OwningMembership :
	ownedRelatedElement += ( LiteralExpression | FeatureReferenceExpression ) // ownedMemberElement = ( LiteralExpression | FeatureReferenceExpression )
;

/* CLASSIFICATION */

/* Data Types */

DataType returns SysML::DataType :
	( isAbstract ?= 'abstract' )? 'datatype' 
	ClassifierDeclaration TypeBody
;

/* Classes */

Class returns SysML::Class :
	( isAbstract ?= 'abstract' )? 'class' 
	ClassifierDeclaration TypeBody
;

/* STRUCTURES */

Structure returns SysML::Structure :
	( isAbstract ?= 'abstract' )? 'struct' 
	ClassifierDeclaration TypeBody
;


/* ASSOCIATIONS */

Association returns SysML::Association :
	( isAbstract ?= 'abstract' )? 'assoc' 
	ClassifierDeclaration TypeBody
;

AssociationStructure returns SysML::AssociationStructure :
	( isAbstract ?= 'abstract' )? 'assoc' 'struct'
	ClassifierDeclaration TypeBody
;

/* CONNECTORS */

/* Connectors */

Connector returns SysML::Connector :	 
	FeaturePrefix 'connector' 
	ConnectorDeclaration TypeBody	  
;

fragment ConnectorDeclaration returns SysML::Connector :
	BinaryConnectorDeclaration | NaryConnectorDeclaration
;

fragment BinaryConnectorDeclaration returns SysML::Connector :
	( FeatureDeclaration? 'from' | isSufficient ?= 'all' 'from'? )?
	ownedRelationship += ConnectorEndMember 'to' 
	ownedRelationship += ConnectorEndMember
;

fragment NaryConnectorDeclaration returns SysML::Connector :
	FeatureDeclaration?
	( '(' ownedRelationship += ConnectorEndMember ',' 
	      ownedRelationship += ConnectorEndMember
	      ( ',' ownedRelationship += ConnectorEndMember )* 
	  ')' )?
;

ConnectorEndMember returns SysML::EndFeatureMembership :
	ownedRelatedElement += ConnectorEnd // ownedMemberFeature = ConnectorEnd
;

ConnectorEnd returns SysML::Feature :
	( name = Name ':>' )? 
	ownedRelationship += OwnedSubsetting
	( ownedRelationship += OwnedMultiplicity )?
;

/* Binding Connectors */

BindingConnector returns SysML::BindingConnector :
	FeaturePrefix 'binding' 
	BindingConnectorDeclaration TypeBody	
;

fragment BindingConnectorDeclaration returns SysML::BindingConnector :
	( FeatureDeclaration? 'of' | isSufficient ?= 'all' 'of'? )?
	ownedRelationship += ConnectorEndMember '=' 
	ownedRelationship += ConnectorEndMember
;

/* Successions */

Succession returns SysML::Succession :
	FeaturePrefix 'succession' 
	SuccessionDeclaration TypeBody
;

fragment SuccessionDeclaration returns SysML::Succession :
	( FeatureDeclaration? 'first' | isSufficient ?= 'all' 'first'? )?
	ownedRelationship += ConnectorEndMember 'then' 
	ownedRelationship += ConnectorEndMember
;

/* BEHAVIORS */

/* Behaviors */

Behavior returns SysML::Behavior :
	( isAbstract ?= 'abstract')? 'behavior' 
	ClassifierDeclaration TypeBody
;

/* Steps */

Step returns SysML::Step :
	FeaturePrefix 'step' 
	StepDeclaration TypeBody
;

fragment StepDeclaration returns SysML::Step :
	FeatureDeclaration? ValuePart?
;

/* FUNCTIONS */

/* Functions */

Function returns SysML::Function :
	( isAbstract ?= 'abstract' )? 'function' 
	ClassifierDeclaration FunctionBody  
;

fragment FunctionBody returns SysML::Type :
	  ';'
	| '{' ( ownedRelationship += NonFeatureMember 
		  | ownedRelationship += FeatureMember 
		  | ownedRelationship += AliasMember
		  | ownedRelationship += Import
		  | ownedRelationship += ReturnFeatureMember
		  )* 
		  ( ownedRelationship += ResultExpressionMember )? 
	  '}'
;

ReturnFeatureMember returns SysML::ReturnParameterMembership :
	MemberPrefix 'return' 
	ownedRelatedElement += FeatureElement // ownedMemberParameter = FeatureElement
;

@Override
ResultExpressionMember returns SysML::ResultExpressionMembership :
	MemberPrefix ownedRelatedElement += OwnedExpression // ownedResultExpression = OwnedExpression
;

/* Expressions */

Expression returns SysML::Expression :
	FeaturePrefix 'expr' 
	ExpressionDeclaration FunctionBody
;

fragment ExpressionDeclaration returns SysML::Expression :
	FeatureDeclaration? ValuePart?
;

/* Predicates */

Predicate returns SysML::Predicate :
	( isAbstract ?= 'abstract' )? 'predicate' 
	ClassifierDeclaration FunctionBody  
;

/* Boolean Expressions */ 

BooleanExpression returns SysML::BooleanExpression :
	FeaturePrefix 'bool' 
	ExpressionDeclaration FunctionBody
;

/* Invariants */

Invariant returns SysML::Invariant :
	FeaturePrefix 'inv' ( 'true' | isNegated ?= 'false' )?
	ExpressionDeclaration FunctionBody
;

/* INTERACTIONS */

/* Interactions */

Interaction returns SysML::Interaction :
	( isAbstract ?= 'abstract' )? 'interaction' 
	ClassifierDeclaration TypeBody
;

/* Item Flows */

ItemFlow returns SysML::ItemFlow :
	FeaturePrefix 'flow' 
	ItemFlowDeclaration TypeBody
;

SuccessionItemFlow returns SysML::SuccessionItemFlow :
	FeaturePrefix 'succession' 'flow' ItemFlowDeclaration TypeBody
;

fragment ItemFlowDeclaration returns SysML::ItemFlow :
	( FeatureDeclaration? 
      ( 'of'  ownedRelationship += ItemFeatureMember
      | ownedRelationship += EmptyItemFeatureMember
      ) 'from'
    | ( isSufficient ?= 'all' )? ownedRelationship += EmptyItemFeatureMember
    )
	ownedRelationship += ItemFlowEndMember 'to' 
	ownedRelationship += ItemFlowEndMember
;

ItemFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += ItemFeature // ownedMemberFeature = ItemFeature
;

ItemFeature returns SysML::ItemFeature :
	( name = Name ':' )? 
	(  ownedRelationship += OwnedFeatureTyping 
	  ( ownedRelationship += OwnedMultiplicity )?
	| ownedRelationship += OwnedMultiplicity
	  ( ownedRelationship += OwnedFeatureTyping )?
	)
;

EmptyItemFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += EmptyItemFeature // ownedMemberFeature = EmptyItemFeature
;

EmptyItemFeature returns SysML::ItemFeature :
	{SysML::ItemFeature}
;

ItemFlowEndMember returns SysML::EndFeatureMembership :
	ownedRelatedElement += ItemFlowEnd // ownedMemberFeature = ItemFlowEnd
;

ItemFlowEnd returns SysML::ItemFlowEnd :
	( ownedRelationship += ItemFlowEndSubsetting )?
	ownedRelationship += ItemFlowFeatureMember
;

ItemFlowEndSubsetting returns SysML::Subsetting :
	  subsettedFeature = [SysML::Feature | QualifiedName] '.'
	| ownedRelatedElement += FeatureChainPrefix
;

FeatureChainPrefix returns SysML::Feature :
	( ownedRelationship += OwnedFeatureChaining '.' )+
	ownedRelationship += OwnedFeatureChaining '.'
;

ItemFlowFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += ItemFlowFeature // ownedMemberFeature = ItemFlowFeature
;

ItemFlowFeature returns SysML::ItemFlowFeature :
	ownedRelationship += ItemFlowRedefinition
;

ItemFlowRedefinition returns SysML::Redefinition :
	redefinedFeature = [SysML::Feature|QualifiedName]
;

/* METADATA */

Metaclass returns SysML::Metaclass :
	( isAbstract ?= 'abstract' )? 'metaclass' 
	ClassifierDeclaration TypeBody
;

OwnedMetadataFeatureAnnotation returns SysML::Annotation :
	ownedRelatedElement += OwnedMetadataFeature
;

OwnedMetadataFeature returns SysML::MetadataFeature :
	( '@' | 'metadata' ) ( Identification ( ':' | 'typed' 'by' ) )? 
	ownedRelationship += MetadataTyping 
	TypeBody
;

MetadataFeature returns SysML::MetadataFeature :
	( '@' | 'metadata' ) MetadataFeatureDeclaration 
	( 'about' ownedRelationship += Annotation 
		( ',' ownedRelationship += Annotation )*
	)?
	MetadataBody
;

fragment MetadataFeatureDeclaration returns SysML::MetadataFeature :
	( Identification ( ':' | 'typed' 'by' ) )? ownedRelationship += MetadataTyping
;

MetadataTyping returns SysML::FeatureTyping :
	type = [SysML::Metaclass | QualifiedName]
;

fragment MetadataBody returns SysML::Feature :
	';' | 
	'{' ( ownedRelationship += NonFeatureMember 
		| ownedRelationship += MetadataBodyFeatureMember 
		| ownedRelationship += AliasMember
		| ownedRelationship += Import
	)* '}'
;

MetadataBodyFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += MetadataBodyFeature
;

MetadataBodyFeature returns SysML::Feature :
	'feature'? ( ':>>' | 'redefines' )? ownedRelationship += OwnedRedefinition 
	FeatureSpecializationPart? ValuePart?
	MetadataBody
;

/* EXPRESSIONS */

@Override
ExpressionBody returns SysML::Expression :
	FunctionBody
;
