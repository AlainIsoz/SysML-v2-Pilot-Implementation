/*****************************************************************************
 * SysML 2 Pilot Implementation
 * Copyright (c) 2018, 2021 Model Driven Solutions, Inc.
 * Copyright (c) 2018 IncQuery Labs Ltd.
 * Copyright (c) 2019 Maplesoft (Waterloo Maple, Inc.)
 * Copyright (c) 2019 Mgnite Inc.
 *    
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of theGNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * @license LGPL-3.0-or-later <http://spdx.org/licenses/LGPL-3.0-or-later>
 * 
 * Contributors:
 *  Ed Seidewitz, MDS
 *  Zoltan Kiss, IncQuery
 *  Balazs Grill, IncQuery
 *  Hisashi Miyashita, Maplesoft/Mgnite
 * 
 *****************************************************************************/

grammar org.omg.kerml.xtext.KerML with org.omg.kerml.expressions.xtext.KerMLExpressions

import "http://www.eclipse.org/emf/2002/Ecore" as Ecore
import "http://www.omg.org/spec/SysML/2.0" as SysML

/* ROOT NAMESPACE */

RootNamespace returns SysML::Namespace :
	{SysML::Namespace}NamespaceBodyElement*
;

/* ELEMENTS */

/* Elements */

fragment Identification returns SysML::Element :
	  'id' humanId = Name ( name = Name )?
	| name = Name
;

Element returns SysML::Element :
    'element' Identification? ElementBody
;

fragment ElementBody returns SysML::Element :
    ';' | '{' OwnedElement* '}'
;

fragment OwnedElement returns SysML::Element :
      ownedRelationship += OwnedRelationship
    | ownedRelationship += OwnedDocumentation
    | ownedRelationship += OwnedTextualRepresentationAnnotation
    | ownedRelationship += OwnedAnnotatingFeatureAnnotation
;

/* Relationships */

Relationship returns SysML::Relationship :
    'relationship' Identification?
    RelationshipRelatedElements
    RelationshipBody
;

OwnedRelationship returns SysML::Relationship :
    'relationship' Identification?
    'to' RelationshipTargetList
    RelationshipBody
;

fragment RelationshipRelatedElements returns SysML::Relationship :
      'from' RelationshipSourceList ( 'to' RelationshipTargetList )?
    | 'to' RelationshipTargetList
;

fragment RelationshipSourceList returns SysML::Relationship :
    RelationshipSource ( ',' RelationshipSource )*
;

fragment RelationshipSource returns SysML::Relationship :
    source += [SysML::Element | QualifiedName]
;

fragment RelationshipTargetList returns SysML::Relationship :
    RelationshipTarget ( ',' RelationshipTarget )*
;

fragment RelationshipTarget returns SysML::Relationship :
    target += [SysML::Element | QualifiedName]
;

fragment RelationshipBody returns SysML::Relationship :
    ';' | '{' RelationshipOwnedElement* '}'
;

fragment RelationshipOwnedElement returns SysML::Relationship:
      ownedRelatedElement += OwnedRelatedElement
    | ownedRelationship += OwnedDocumentation
    | ownedRelationship += OwnedTextualRepresentationAnnotation
;

OwnedRelatedElement returns SysML::Element :
      'element' ( humanId = Name )? ElementBody
    | OwnedRelatedRelationship
;

OwnedRelatedRelationship returns SysML::Relationship :
	'relationship' ( humanId = Name )? RelationshipBody
;

/* ANNOTATIONS */

/* Comments */

Comment returns SysML::Comment :
	( 'comment' Identification? 'about' ownedRelationship += Annotation
	  ( ',' ownedRelationship += Annotation )*
	| ( 'comment' Identification? )? ownedRelationship += EmptyAnnotation
	)
	body = REGULAR_COMMENT
;

Annotation returns SysML::Annotation :
	annotatedElement = [SysML::Element|QualifiedName]
;

EmptyAnnotation returns SysML::Annotation :
	{SysML::Annotation}
;

/* Documentation */

OwnedDocumentation returns SysML::Documentation :
	ownedRelatedElement += DocumentationComment // documentingComment = DocumentationComment
;

DocumentationComment returns SysML::Comment :
	'doc' ( 'id' humanId = Name )? body = REGULAR_COMMENT
;

PrefixDocumentation returns SysML::Annotation :
	ownedRelatedElement += PrefixDocumentationComment
;

PrefixDocumentationComment returns SysML::Comment :
	( 'doc' ( 'id' humanId = Name )? )? body = DOCUMENTATION_COMMENT
;

/* Textual Representation */

OwnedTextualRepresentationAnnotation returns SysML::Annotation :
	ownedRelatedElement += OwnedTextualRepresentation
;

OwnedTextualRepresentation returns SysML::TextualRepresentation :
	( 'rep' ( humanId = Name )? )? 
	'language' language = STRING_VALUE body = REGULAR_COMMENT
	ownedRelationship += EmptyAnnotation
;

TextualRepresentation returns SysML::TextualRepresentation :
    ( 'rep' Identification? 'about' ownedRelationship += Annotation
    | ( 'rep' Identification? )? ownedRelationship += EmptyAnnotation
    )
    'language' language = STRING_VALUE 
    body = REGULAR_COMMENT
;

/* Annotating Features */

OwnedAnnotatingFeatureAnnotation returns SysML::Annotation :
	ownedRelatedElement += OwnedAnnotatingFeature
;

OwnedAnnotatingFeature returns SysML::AnnotatingFeature :
	'metadata' ( humanId = Name ( ':' | 'typed' 'by' ) )? ownedRelationship += MetadataTyping 
	ownedRelationship += EmptyAnnotation 
	AnnotatingFeatureBody
;

AnnotatingFeature returns SysML::AnnotatingFeature :
	( '@' | 'metadata' ) AnnotatingFeatureDeclaration 
	( 'about' ownedRelationship += Annotation ( ',' ownedRelationship += Annotation )* 
	| ownedRelationship += EmptyAnnotation
	)	
	AnnotatingFeatureBody
;

fragment AnnotatingFeatureDeclaration returns SysML::AnnotatingFeature :
	( Identification ( ':' | 'typed' 'by' ) )? ownedRelationship += MetadataTyping
;

MetadataTyping returns SysML::FeatureTyping :
	type = [SysML::DataType | QualifiedName]
;

fragment AnnotatingFeatureBody returns SysML::AnnotatingFeature :
	';' | '{' ( ownedRelationship += MetadataFeatureMember )* '}'
;

MetadataFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += MetadataFeature // ownedMemberFeature = MetadataFeature
;

MetadataFeature returns SysML::MetadataFeature :
	'feature'? ( ':>>' | 'redefines')? ownedRelationship += OwnedRedefinition 
	'=' ownedRelationship += MetadataFeatureValue ';' // metadataFeatureValue = MetadataFeatureValue ';'
;

MetadataFeatureValue returns SysML::MetadataFeatureValue :
	ownedRelatedElement += OwnedExpression // metadataValue = OwnedExpression
;

/* NAMESPACES */

Namespace returns SysML::Namespace :
	NamespaceDeclaration NamespaceBody
;

fragment NamespaceDeclaration returns SysML::Namespace :
	'namespace' Identification?
;

fragment NamespaceBody returns SysML::Namespace :
	  ';' 
	| '{' ( // Note: PackageBodyElement is expanded here to avoid
			// infinite loops in the incremental parser.
		    ownedRelationship += OwnedDocumentation
	      | ownedRelationship += NamespaceMember 
	      | ownedRelationship += Import )* 
	  '}'
;

/* Namespace Bodies */

fragment NamespaceBodyElement returns SysML::Namespace :
	  ownedRelationship += OwnedDocumentation
	| ownedRelationship += NamespaceMember 
	| ownedRelationship += Import
;

NamespaceMember returns SysML::Membership : 
	( ownedRelationship += PrefixDocumentation )*
    ( visibility = BasicVisibilityIndicator )?		
	( NonFeatureNamespaceMember | FeatureNamespaceMember )
;

fragment NonFeatureNamespaceMember returns SysML::Membership :
	  ownedRelatedElement += NonFeatureElement //ownedMemberElement = NonFeatureElement
	| ( 'alias' | 'import' ) memberElement = [SysML::Element|QualifiedName] ( 'as' memberName = Name )? ';'
;

fragment FeatureNamespaceMember returns SysML::Membership :
	  ownedRelatedElement += FeatureElement // ownedMemberElement = FeatureElement
;

Import returns SysML::Import :
	( ownedRelationship += PrefixDocumentation )*
	( visibility = BasicVisibilityIndicator )?  
	'import' ( ImportedNamespace | ImportedFilterPackage ) ';'
;

fragment ImportedNamespace returns SysML::Import :
	(
	  importedNamespace = [SysML::Namespace|Name] ( '::' | '.' ) 
	| importedNamespace = [SysML::Namespace|ColonQualifiedName] '::' 
	| importedNamespace = [SysML::Namespace|DotQualifiedName] '.'
	)
	( '*' | isRecursive ?= '**' )
;

fragment ImportedFilterPackage returns SysML::Import :
	ownedRelatedElement += FilterPackage
;

FilterPackage returns SysML::Package :
	ownedRelationship += FilterPackageImport
	( ownedRelationship += FilterPackageMember )+
;

FilterPackageImport returns SysML::Import :
	ImportedNamespace
;

FilterPackageMember returns SysML::ElementFilterMembership :
	visibility = FilterPackageMemberVisibility ownedRelatedElement += OwnedExpression ']' // condition = OwnedExpression ']'
;

enum FilterPackageMemberVisibility returns SysML::VisibilityKind :
	private = '['
;

enum BasicVisibilityIndicator returns SysML::VisibilityKind:
	public = 'public' | private = 'private'
;

/* Namespace Elements */

NonFeatureElement returns SysML::Element :
	  Element
	| Relationship
	| Comment
	| TextualRepresentation
	| AnnotatingFeature
	| Namespace
	| Package 
	| Type
	| Classifier 
	| Class
	| Structure
	| DataType 
	| Association
	| AssociationStructure
	| Interaction
	| Behavior
	| Function
	| Predicate
	| Generalization
	| Conjugation
	| FeatureTyping
	| Superclassing
	| Subsetting
	| Redefinition
	| TypeFeaturing
;

FeatureElement returns SysML::Feature :
	  Feature
	| Step
	| Expression
	| BooleanExpression
	| Invariant
	| Connector
	| BindingConnector
	| Succession
	| ItemFlow
	| SuccessionItemFlow
;

/* PACKAGES */

Package returns SysML::Package :
	PackageDeclaration PackageBody 
;

fragment PackageDeclaration returns SysML::Package :
	'package' Identification?
;

fragment PackageBody returns SysML::Namespace :
	  ';' 
	| '{' ( // Note: PackageBodyElement is expanded here to avoid
			// infinite loops in the incremental parser.
		    ownedRelationship += OwnedDocumentation
	      | ownedRelationship += NamespaceMember 
	      | ownedRelationship += ElementFilterMember
	      | ownedRelationship += Import )*
	  '}'
;

ElementFilterMember returns SysML::ElementFilterMembership :
	( ownedRelationship += PrefixDocumentation )*
    ( visibility = BasicVisibilityIndicator )?
	'filter' ownedRelatedElement += OwnedExpression ';' // condition = OwnedExpression ';'
;

/* TYPES */

/* Types */

Type returns SysML::Type :
    ( isAbstract ?= 'abstract' )? 'type' 
    TypeDeclaration TypeBody
;

fragment TypeDeclaration returns SysML::Type : 
    ( isSufficient ?= 'all' )? Identification?
    ( ownedRelationship += MultiplicityMember )? 
    ( SpecializationPart | ConjugationPart )+
;

fragment SpecializationPart returns SysML::Type :
      ( ':>' | 'specializes' ) ownedRelationship += OwnedGeneralization
      ( ',' ownedRelationship += OwnedGeneralization )*
;

fragment ConjugationPart returns SysML::Type :
	( '~' | 'conjugates' ) ownedRelationship += OwnedConjugation
;

MultiplicityMember returns SysML::Membership :
	ownedRelatedElement += Multiplicity // ownedMemberElement = Multiplicity
;

fragment TypeBody returns SysML::Type :
	';' | 
	'{' ( ownedRelationship += OwnedDocumentation
		| ownedRelationship += NonFeatureTypeMember 
		| ownedRelationship += FeatureTypeMember 
		| ownedRelationship += Import
	)* '}'
;

NonFeatureTypeMember returns SysML::Membership : 
	TypeMemberPrefix NonFeatureNamespaceMember
;

FeatureTypeMember returns SysML::FeatureMembership : 
	FeatureMember | EndFeatureMember
;

fragment TypeMemberPrefix returns SysML::Membership :
	( ownedRelationship += PrefixDocumentation )*
    ( visibility = VisibilityIndicator )?
;

enum VisibilityIndicator returns SysML::VisibilityKind :
	public = 'public' | private = 'private' | protected = 'protected' | package = 'packaged'
;

/* Generalization */

Generalization returns SysML::Generalization :
    ( 'generalization' Identification? )?
    'subtype' specific = [SysML::Type | QualifiedName]
    ( ':>' | 'specializes') general = [SysML::Type | QualifiedName] ';'
;

OwnedGeneralization returns SysML::Generalization :
    general = [SysML::Type | QualifiedName]
;

/* Conjugation */

Conjugation returns SysML::Conjugation :
	'conjugation' Identification? 
    'type' conjugatedType = [SysML::Type | QualifiedName] 
    ( '~' | 'conjugates') originalType = [SysML::Type | QualifiedName] ';'
;

OwnedConjugation returns SysML::Conjugation :
	originalType = [SysML::Type | QualifiedName]
;

/* Feature Membership */

FeatureMember returns SysML::FeatureMembership :
	TypeMemberPrefix FeatureMemberFlags 
	( ownedRelatedElement += FeatureElement // ownedMemberFeature = FeatureElement
	| 'feature'? ( memberName = Name )? 'is' memberFeature = [SysML::Feature|QualifiedName] ';'
	)
;

EndFeatureMember returns SysML::EndFeatureMembership :
	TypeMemberPrefix 'end' FeatureMemberFlags ownedRelatedElement += FeatureElement // ownedMemberFeature = FeatureElement
;

fragment FeatureMemberFlags returns SysML::FeatureMembership :
	( direction = FeatureDirection )? 
	( isComposite ?= 'composite' | isPortion ?= 'portion' )? 
	( isPort ?= 'port' )?
;

enum FeatureDirection returns SysML::FeatureDirectionKind:
	in = 'in' | out = 'out' | inout = 'inout'
;

/* CLASSIFIERS */

/* Classifiers */

Classifier returns SysML::Classifier :
	( isAbstract ?= 'abstract' )? 'classifier' 
	ClassifierDeclaration TypeBody
;

fragment ClassifierDeclaration returns SysML::Classifier :	
    (isSufficient ?= 'all' )? Identification?
	( ownedRelationship += MultiplicityMember )?
	( SuperclassingPart | ClassifierConjugationPart )?
;

fragment SuperclassingPart returns SysML::Classifier :
	( ':>' | 'specializes' ) ownedRelationship += OwnedSuperclassing 
	( ',' ownedRelationship += OwnedSuperclassing )*
;

fragment ClassifierConjugationPart returns SysML::Classifier :
	( '~' | 'conjugates' ) ownedRelationship += ClassifierConjugation
;

/* Superclassing */

Superclassing returns SysML::Superclassing :
	( 'generalization' Identification? )?
    'subclass' subclass = [SysML::Classifier | QualifiedName]
    ( ':>' | 'specializes') superclass = [SysML::Classifier | QualifiedName] ';'
;

OwnedSuperclassing returns SysML::Superclassing :
	superclass = [SysML::Classifier | QualifiedName]
;

/* Classifier Conjugation */

ClassifierConjugation returns SysML::Conjugation :
	originalType = [SysML::Classifier | QualifiedName]
;

/* FEATURES */

/* Features */

Feature returns SysML::Feature :
	( isAbstract ?= 'abstract' )? 
	( 'feature'? FeatureDeclaration | 'feature' ) 
	ValuePart? TypeBody
;

fragment FeatureDeclaration returns SysML::Feature :
	( isSufficient ?= 'all' )? 
	( Identification ( FeatureSpecializationPart | FeatureConjugationPart )?
	| FeatureSpecializationPart
	| FeatureConjugationPart
	) TypeFeaturingPart?
;

fragment TypeFeaturingPart returns SysML::Feature :
	'featured' 'by' ownedRelationship += OwnedTypeFeaturing 
	( ',' ownedRelationship += OwnedTypeFeaturing )*
;

fragment FeatureSpecializationPart returns SysML::Feature :
	  ( -> FeatureSpecialization )+ MultiplicityPart? FeatureSpecialization*
	| MultiplicityPart FeatureSpecialization*
;

fragment MultiplicityPart returns SysML::Feature :
	ownedRelationship += MultiplicityMember 
	// NOTE: Can't use "&" here because of use of predication elsewhere.
	( isOrdered ?= 'ordered' isNonunique ?= 'nonunique'?
	| isNonunique ?= 'nonunique' isOrdered ?= 'ordered'?
	)?
;

fragment FeatureSpecialization returns SysML::Feature :
	Typings | Subsettings | Redefinitions
;

fragment Typings returns SysML::Feature :
	TypedBy ( ',' ownedRelationship += OwnedFeatureTyping )*
;

fragment TypedBy returns SysML::Feature :
	( ':' | 'typed' 'by' ) ownedRelationship += OwnedFeatureTyping
;

fragment Subsettings returns SysML::Feature :
	Subsets ( ',' ownedRelationship += OwnedSubsetting )*
;

fragment Subsets returns SysML::Feature :
	( ':>' | 'subsets' ) ownedRelationship += OwnedSubsetting 
;

fragment Redefinitions returns SysML::Feature :
	Redefines ( ',' ownedRelationship += OwnedRedefinition )*
;

fragment Redefines returns SysML::Feature :
	( ':>>' | 'redefines' ) ownedRelationship += OwnedRedefinition
;

/* Type Featuring */

TypeFeaturing returns SysML::TypeFeaturing :
	'featuring' ( Identification? 'of')?
	featureOfType = [SysML::Feature | QualifiedName]
	'by' featuringType = [SysML::Feature | QualifiedName] ';'
;

OwnedTypeFeaturing returns SysML::TypeFeaturing :
	featuringType = [SysML::Type | QualifiedName]
;

/* Feature Typing */

FeatureTyping returns SysML::FeatureTyping :
	( 'generalization' Identification? )?
    'typing' typedFeature = [SysML::Feature | QualifiedName]
    (':' | 'typed' 'by') type = [SysML::Feature | QualifiedName] ';'
;

@Override
OwnedFeatureTyping returns SysML::FeatureTyping :
	type = [SysML::Type | QualifiedName]
;

/* Subsetting */

Subsetting returns SysML::Subsetting :
	( 'generalization' Identification? )?
    'subset' subsettingFeature = [SysML::Feature | QualifiedName]
    ( ':>' | 'subsets' ) subsettedFeature = [SysML::Feature | QualifiedName] ';'
;

OwnedSubsetting returns SysML::Subsetting:
	subsettedFeature = [SysML::Feature|QualifiedName]
;

/* Redefinition */

Redefinition returns SysML::Redefinition :
	( 'generalization' Identification? )?
    'redefinition' redefiningFeature = [SysML::Feature | QualifiedName]
    ( ':>>' | 'redefines' ) redefinedFeature = [SysML::Feature | QualifiedName] ';'
;

OwnedRedefinition returns SysML::Redefinition:
	redefinedFeature = [SysML::Feature | QualifiedName] 
;

/* Feature Conjugation */

fragment FeatureConjugationPart returns SysML::Feature :
	( '~' | 'conjugates' ) ownedRelationship += FeatureConjugation
;

FeatureConjugation returns SysML::Conjugation :
	originalType = [SysML::Feature | QualifiedName ]
;

/* FEATURE VALUES */

fragment ValuePart returns SysML::Feature :
	'=' ownedRelationship += FeatureValue
;

FeatureValue returns SysML::FeatureValue :
	ownedRelatedElement += OwnedExpression // value = OwnedExpression
;

/* MULTIPLICITIES */

Multiplicity returns SysML::MultiplicityRange :
	// TODO: Allow general expressions for bounds. (Causes LL parsing issues.)
	'[' ( ownedRelationship += LiteralIntegerMember '..' )? 
	      ownedRelationship += LiteralUnlimitedNaturalMember ']'
;

LiteralIntegerMember returns SysML::Membership :
	ownedRelatedElement += LiteralInteger // ownedMemberElement = LiteralInteger
;

LiteralUnlimitedNaturalMember returns SysML::Membership :
	ownedRelatedElement += LiteralUnlimitedNatural // ownedMemberElement = LiteralUnlimitedNatural
;

/* CLASSIFICATION */

/* Data Types */

DataType returns SysML::DataType :
	( isAbstract ?= 'abstract' )? 'datatype' 
	ClassifierDeclaration TypeBody
;

/* Classes */

Class returns SysML::Class :
	( isAbstract ?= 'abstract' )? 'class' 
	ClassifierDeclaration TypeBody
;

/* STRUCTURES */

Structure returns SysML::Structure :
	( isAbstract ?= 'abstract' )? 'struct' 
	ClassifierDeclaration TypeBody
;


/* ASSOCIATIONS */

Association returns SysML::Association :
	( isAbstract ?= 'abstract' )? 'assoc' 
	ClassifierDeclaration TypeBody
;

AssociationStructure returns SysML::AssociationStructure :
	( isAbstract ?= 'abstract' )? 'assoc' 'struct'
	ClassifierDeclaration TypeBody
;

/* CONNECTORS */

/* Connectors */

Connector returns SysML::Connector :	 
	( isAbstract ?= 'abstract' )? 'connector' 
	ConnectorDeclaration TypeBody	  
;

fragment ConnectorDeclaration returns SysML::Connector :
	BinaryConnectorDeclaration | NaryConnectorDeclaration
;

fragment BinaryConnectorDeclaration returns SysML::Connector :
	( FeatureDeclaration? 'from' | isSufficient ?= 'all' 'from'? )?
	ownedRelationship += ConnectorEndMember 'to' 
	ownedRelationship += ConnectorEndMember
;

fragment NaryConnectorDeclaration returns SysML::Connector :
	FeatureDeclaration?
	'(' ownedRelationship += ConnectorEndMember ',' 
	    ownedRelationship += ConnectorEndMember
	    ( ',' ownedRelationship += ConnectorEndMember )* ')'
;

ConnectorEndMember returns SysML::EndFeatureMembership :
	( memberName = Name '=>' )? ownedRelatedElement += ConnectorEnd // ownedMemberFeature = ConnectorEnd
;

ConnectorEnd returns SysML::Feature :
	ownedRelationship += OwnedSubsetting 
	( ownedRelationship += MultiplicityMember )?
;

/* Binding Connectors */

BindingConnector returns SysML::BindingConnector :
	( isAbstract ?= 'abstract' )? 'binding' 
	BindingConnectorDeclaration TypeBody	
;

fragment BindingConnectorDeclaration returns SysML::BindingConnector :
	( FeatureDeclaration? 'of' | isSufficient ?= 'all' 'of'? )?
	ownedRelationship += ConnectorEndMember '=' 
	ownedRelationship += ConnectorEndMember
;

/* Successions */

Succession returns SysML::Succession :
	( isAbstract ?= 'abstract' )? 'succession' 
	SuccessionDeclaration TypeBody
;

fragment SuccessionDeclaration returns SysML::Succession :
	( FeatureDeclaration? 'first' | isSufficient ?= 'all' 'first'? )?
	ownedRelationship += ConnectorEndMember 'then' 
	ownedRelationship += ConnectorEndMember
;

/* BEHAVIORS */

/* Behaviors */

Behavior returns SysML::Behavior :
	( isAbstract ?= 'abstract')? 'behavior' 
	BehaviorDeclaration TypeBody
;

fragment BehaviorDeclaration returns SysML::Behavior :
	ClassifierDeclaration ParameterList?
;

fragment ParameterList returns SysML::Type :
	'(' ( ownedRelationship += ParameterMember 
		( ',' ownedRelationship += ParameterMember )* )? ')'
;

ParameterMember returns SysML::ParameterMembership :
	( direction = FeatureDirection )? ownedRelatedElement += Parameter // ownedMemberParameter = Parameter
;

Parameter returns SysML::Feature :
      'feature'? ParameterDeclaration
    | {SysML::Step} 'step' ParameterDeclaration
    | {SysML::Expression} 'expr' ParameterDeclaration
    | {SysML::BooleanExpression} 'bool' ParameterDeclaration
;

fragment ParameterDeclaration returns SysML::Feature :
	( isSufficient ?= 'all' )? 
    ( Identification ParameterSpecializationPart? 
	| ParameterSpecializationPart
	)
;

fragment ParameterSpecializationPart returns SysML::Feature :
	  ( -> ParameterSpecialization )+ MultiplicityPart? ParameterSpecialization*
	| MultiplicityPart ParameterSpecialization*
;

fragment ParameterSpecialization returns SysML::Feature :
	TypedBy | Subsets | Redefines
;

/* Steps */

Step returns SysML::Step :
	( isAbstract ?= 'abstract' )? 'step' 
	StepDeclaration TypeBody
;

fragment StepDeclaration returns SysML::Step :
	FeatureDeclaration? ( ValuePart | StepParameterList )?
;

fragment StepParameterList returns SysML::Step :
	'(' ( ownedRelationship += StepParameterMember
	    ( ',' ownedRelationship += StepParameterMember )* )? ')'
;

StepParameterMember returns SysML::ParameterMembership :
	( direction = FeatureDirection )? ownedRelatedElement += StepParameter // ownedMemberParameter = StepParameter
;

StepParameter returns SysML::Feature :
	Parameter ValuePart? 
;

/* FUNCTIONS */

/* Functions */

Function returns SysML::Function :
	( isAbstract ?= 'abstract' )? 'function' 
	FunctionDeclaration FunctionBody  
;

fragment FunctionDeclaration returns SysML::Function :
	ClassifierDeclaration ParameterPart
;

fragment ParameterPart returns SysML::Type :
	  ParameterList ( ReturnParameterPart | EmptyReturnParameterPart )
	| EmptyReturnParameterPart
;

fragment ReturnParameterPart returns SysML::Type :
	ownedRelationship += ReturnParameterMember
;

ReturnParameterMember returns SysML::ReturnParameterMembership :
	ownedRelatedElement += Parameter // ownedMemberParameter = Parameter
;

fragment EmptyReturnParameterPart returns SysML::Type :
	ownedRelationship += EmptyReturnParameterMember
;

EmptyReturnParameterMember returns SysML::ReturnParameterMembership :
	ownedRelatedElement += EmptyParameter // ownedMemberFeature = EmptyParameter
;

EmptyParameter returns SysML::Feature :
	{SysML::Feature}
;

fragment FunctionBody returns SysML::Type :
	  ';'
	| '{' ( ownedRelationship += OwnedDocumentation
		  | ownedRelationship += NonFeatureTypeMember 
		  | ownedRelationship += FeatureTypeMember
		  | ownedRelationship += Import
		  )* 
		  ( ownedRelationship += ResultExpressionMember )? 
	  '}'
;

@Override
ResultExpressionMember returns SysML::ResultExpressionMembership :
	TypeMemberPrefix ownedRelatedElement += OwnedExpression // ownedResultExpression = OwnedExpression
;

/* Expressions */

Expression returns SysML::Expression :
	( isAbstract ?= 'abstract' )? 'expr' 
	ExpressionDeclaration FunctionBody
;

fragment ExpressionDeclaration returns SysML::Expression :
	FeatureDeclaration? 
	( ValuePart | StepParameterList ( ReturnParameterPart | EmptyReturnParameterPart ) )? 
;

/* Predicates */

Predicate returns SysML::Predicate :
	( isAbstract ?= 'abstract' )? 'predicate' 
	PredicateDeclaration FunctionBody  
;

fragment PredicateDeclaration returns SysML::Predicate :
	ClassifierDeclaration ParameterPart
;

/* Boolean Expressions */ 

BooleanExpression returns SysML::BooleanExpression :
	( isAbstract ?= 'abstract' )? 'bool' 
	ExpressionDeclaration FunctionBody
;

/* Invariants */

Invariant returns SysML::Invariant :
	( isAbstract ?= 'abstract' )? 'inv' 
	ExpressionDeclaration InvariantPart FunctionBody
;

fragment InvariantPart returns SysML::Invariant :
	ownedRelationship += TrueLiteralMember
;

TrueLiteralMember returns SysML::FeatureMembership :
	ownedRelatedElement += TrueLiteralExpression // ownedMemberFeature = TrueLiteralExpression
;

TrueLiteralExpression returns SysML::LiteralBoolean :
	{SysML::LiteralBoolean}
;

/* INTERACTIONS */

/* Interactions */

Interaction returns SysML::Interaction :
	( isAbstract ?= 'abstract' )? 'interaction' 
	BehaviorDeclaration TypeBody
;

/* Item Flows */

ItemFlow returns SysML::ItemFlow :
	( isAbstract ?= 'abstract' )? 'stream' 
	ItemFlowDeclaration TypeBody
;

SuccessionItemFlow returns SysML::SuccessionItemFlow :
	( isAbstract ?= 'abstract' )? 'flow' ItemFlowDeclaration TypeBody
;

fragment ItemFlowDeclaration returns SysML::ItemFlow :
	( FeatureDeclaration? 
      ( 'of'  ownedRelationship += ItemFeatureMember
      | ownedRelationship += EmptyItemFeatureMember
      ) 'from'
    | ( isSufficient ?= 'all' )? ownedRelationship += EmptyItemFeatureMember
    )
	ownedRelationship += ItemFlowEndMember 'to' 
	ownedRelationship += ItemFlowEndMember
;

ItemFeatureMember returns SysML::FeatureMembership :
	( memberName = Name ':' )? ownedRelatedElement += ItemFeature // ownedMemberFeature = ItemFeature
;

ItemFeature returns SysML::ItemFeature :
	  ownedRelationship += OwnedFeatureTyping 
	  ( ownedRelationship += MultiplicityMember )?
	| ownedRelationship += MultiplicityMember
	  ( ownedRelationship += OwnedFeatureTyping )?
;

EmptyItemFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += EmptyItemFeature // ownedMemberFeature = EmptyItemFeature
;

EmptyItemFeature returns SysML::ItemFeature :
	{SysML::ItemFeature}
;

ItemFlowEndMember returns SysML::EndFeatureMembership :
	ownedRelatedElement += ItemFlowEnd // ownedMemberFeature = ItemFlowEnd
;

ItemFlowEnd returns SysML::ItemFlowEnd :
	ownedRelationship += ItemFlowFeatureMember
;

ItemFlowFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += ItemFlowFeature // ownedMemberFeature = ItemFlowFeature
;

ItemFlowFeature returns SysML::ItemFlowFeature :
	ownedRelationship += OwnedRedefinition
;

/* EXPRESSIONS */

@Override
BodyParameter returns SysML::Feature :
	{SysML::Feature} ( TypedBy MultiplicityPart? | MultiplicityPart TypedBy? )?
;
