/*****************************************************************************
 * SysML 2 Pilot Implementation
 * Copyright (c) 2018, 2020 Model Driven Solutions, Inc.
 * Copyright (c) 2018 IncQuery Labs Ltd.
 * Copyright (c) 2019 Maplesoft (Waterloo Maple, Inc.)
 * Copyright (c) 2019 Mgnite Inc.
 *    
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of theGNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * @license LGPL-3.0-or-later <http://spdx.org/licenses/LGPL-3.0-or-later>
 * 
 * Contributors:
 *  Ed Seidewitz, MDS
 *  Zoltan Kiss, IncQuery
 *  Balazs Grill, IncQuery
 *  Hisashi Miyashita, Maplesoft/Mgnite
 * 
 *****************************************************************************/

grammar org.omg.kerml.xtext.KerML hidden (WS, ML_NOTE, SL_NOTE)

import "http://www.eclipse.org/emf/2002/Ecore" as Ecore
import "http://www.omg.org/spec/SysML/2.0" as SysML

/* UNITS */

Unit returns SysML::Package :
	  AnonymousPackage
	| PackageUnit 
	| ClassifierUnitDefinition 
	| ClassUnit
	| DataTypeUnit
	| AssociationUnit 
	| InteractionUnit
	| BehaviorUnit
	| FunctionUnit
	| PredicateUnit
	| FeatureUnit
;

AnonymousPackage returns SysML::Package :
	PackageBody
;

PackageUnit returns SysML::Package: 
    UnitPrefix PackageDefinition 
;

ClassifierUnitDefinition returns SysML::Classifier : 
	UnitPrefix ClassifierDeclaration TypeBody
;

ClassUnit returns SysML::Class:
	UnitPrefix ClassDeclaration TypeBody
;

DataTypeUnit returns SysML::DataType :
	UnitPrefix DataTypeDeclaration TypeBody
;

AssociationUnit returns SysML::Association :
	UnitPrefix AssociationDeclaration TypeBody
;

InteractionUnit returns SysML::Interaction :
	UnitPrefix InteractionDeclaration TypeBody
;

BehaviorUnit returns SysML::Behavior :
	UnitPrefix BehaviorDeclaration BehaviorBody
;

FunctionUnit returns SysML::Function :
	UnitPrefix FunctionDeclaration FunctionBody
;

PredicateUnit returns SysML::Predicate :
	UnitPrefix PredicateDeclaration FunctionBody
;

FeatureUnit returns SysML::Feature :
	UnitPrefix FeatureDefinition
;

fragment UnitPrefix returns SysML::Package :
	( ownedImport_comp += PackageImport | ownedMembership_comp += ElementAlias )*
	( ownedRelationship_comp += UnitAnnotation )*
;

/* IDENTIFICATION */

fragment Identification returns SysML::Element :
	  'id' humanId = Name ( name = Name )?
	| name = Name
;

/* VISIBILITY */

enum PackageElementVisibilityIndicator returns SysML::VisibilityKind:
	public = 'public' | private = 'private'
;

enum VisibilityIndicator returns SysML::VisibilityKind :
	public = 'public' | private = 'private' | protected = 'protected' | package = 'packaged'
;

/* ANNOTATIONS */

Annotation returns SysML::Annotation :
	{SysML::Annotation} ( 'about' annotatedElement = [SysML::Element|QualifiedName] )?
;

EmptyAnnotation returns SysML::Annotation :
	{SysML::Annotation}
;

PrefixAnnotation returns SysML::Annotation :
	ownedRelatedElement_comp += Documentation
;

UnitAnnotation returns SysML::Annotation :
	ownedRelatedElement_comp += UnitDocumentation
;

/* COMMENTS */

Comment returns SysML::Comment :
	( 'comment' Identification? ownedRelationship_comp += Annotation
	| ownedRelationship_comp += EmptyAnnotation
	)
	body = ML_COMMENT
;

/* DOCUMENTATION */

Documentation returns SysML::Comment :
	( 'doc' ( 'id' humanId = Name )? )? body = DOCUMENTATION_COMMENT
;

UnitDocumentation returns SysML::Comment :
	  ( 'comment' Identification? )? body = ML_COMMENT 
    | ( 'doc' ( 'id' humanId = Name )? )? body = DOCUMENTATION_COMMENT
;

OwnedDocumentation returns SysML::Documentation :
	documentingComment_comp = DocumentationComment
;

DocumentationComment returns SysML::Comment :
	'doc' ( 'id' humanId = Name )? body = ML_COMMENT
;

/* TEXTUAL REPRESENTATION */

TextualRepresentation returns SysML::TextualRepresentation :
    ( 'rep' Identification? ownedRelationship_comp += Annotation
    | ownedRelationship_comp += EmptyAnnotation
    )
    'language' language = STRING_VALUE 
    body = ML_COMMENT
;

/* IMPORTS */

PackageImport returns SysML::Import :
	( ownedRelationship_comp += PrefixAnnotation )*
	( visibility = PackageElementVisibilityIndicator )?  
	'import' (
	  importedPackage = [SysML::Package|Name] ( '::' | '.' ) '*' 
	| importedPackage = [SysML::Package|ColonQualifiedName] '::' '*' 
	| importedPackage = [SysML::Package|DotQualifiedName] '.' '*'
	) ';'
;

ElementAlias returns SysML::Membership :
	PackageMemberPrefix	
	( 'alias' | 'import' ) memberElement = [SysML::Element|QualifiedName] ( 'as' memberName = Name )? ';'
;

/* PACKAGES */

Package returns SysML::Package :
	PackageDefinition
;

fragment PackageDefinition returns SysML::Package : 
	'package' Identification? PackageBody 
;

fragment PackageBody returns SysML::Package :
	  ';'
	| '{' ( documentation_comp += OwnedDocumentation
		| ownedMembership_comp += PackageMember 
		| ownedImport_comp += PackageImport
	    )* '}'
;

PackagedNonFeatureElement returns SysML::Element :
	  Package 
	| Classifier 
	| Class
	| DataType 
	| Association
	| Interaction
	| Behavior
	| Function
	| Predicate
	| Comment
	| TextualRepresentation
;

PackagedFeatureElement returns SysML::Feature :
	  Feature
	| Step
	| BlockExpression
	| BooleanExpression
	| Invariant
	| Connector
	| BindingConnector
	| Succession
	| ItemFlow
	| SuccessionItemFlow
;

/* PACKAGE MEMBERSHIPS */

PackageMember returns SysML::Membership : 
	PackageMemberPrefix	( NonFeatureMemberElement | PackageFeatureMemberElement )
;

fragment PackageMemberPrefix returns SysML::Membership :
	( ownedRelationship_comp += PrefixAnnotation )*
    ( visibility = PackageElementVisibilityIndicator )?		
;

fragment NonFeatureMemberElement returns SysML::Membership :
	  ownedMemberElement_comp = PackagedNonFeatureElement
	| ( 'alias' | 'import' ) memberElement = [SysML::Element|QualifiedName] ( 'as' memberName = Name )? ';'
;

fragment PackageFeatureMemberElement returns SysML::Membership :
	  ownedMemberElement_comp = PackagedFeatureElement
;

/* TYPES */

fragment TypeBody returns SysML::Type :
	';' | 
	'{' ( documentation_comp += OwnedDocumentation
		| ownedMembership_comp += NonFeatureTypeMember 
		| ownedFeatureMembership_comp += FeatureTypeMember 
		| ownedImport_comp += PackageImport
	)* '}'
;

/* TYPE MEMBERSHIPS */

NonFeatureTypeMember returns SysML::Membership : 
	TypeMemberPrefix NonFeatureMemberElement
;

FeatureTypeMember returns SysML::FeatureMembership : 
	FeatureMember | EndFeatureMember
;

FeatureMember returns SysML::FeatureMembership :
	TypeMemberPrefix FeatureMemberFlags 
	( ownedMemberFeature_comp = PackagedFeatureElement
	| 'feature'? ( memberName = Name )? 'is' memberFeature = [SysML::Feature|QualifiedName] ';'
	)
;

EndFeatureMember returns SysML::EndFeatureMembership :
	TypeMemberPrefix 'end' FeatureMemberFlags ownedMemberFeature_comp = PackagedFeatureElement
;

fragment FeatureMemberFlags returns SysML::FeatureMembership :
	( direction = FeatureDirection )? ( isComposite ?= 'composite' | isPortion ?= 'portion' )? ( isPort ?= 'port' )?
;

enum FeatureDirection returns SysML::FeatureDirectionKind:
	in = 'in' | out = 'out' | inout = 'inout'
;

fragment TypeMemberPrefix returns SysML::Membership :
	( ownedRelationship_comp += PrefixAnnotation )*
    ( visibility = VisibilityIndicator )?
;

/* CLASSIFIERS */

Classifier returns SysML::Classifier :
	ClassifierDeclaration TypeBody
;

fragment ClassifierDeclaration returns SysML::Classifier :
	( isAbstract ?= 'abstract' )? 'classifier' ClassifierDeclarationCompletion
;

fragment ClassifierDeclarationCompletion returns SysML::Classifier :	
    (isSufficient ?= 'all' )? Identification?
//  ( '<' ownedMember += ClassifierTemplateParameter ( ',' ownedMember += ClassifierTemplateParameter )* '>' )? 
	SpecializationOrConjugation?
	( ownedFeatureMembership_comp += MultiplicityMember )?
;

fragment SpecializationOrConjugation returns SysML::Classifier :
	  ( ':>' | 'specializes' ) ownedRelationship_comp += Superclassing ( ',' ownedRelationship_comp += Superclassing )*
	| ( '~' | 'conjugates' ) ownedRelationship_comp += Conjugation
;

Superclassing returns SysML::Superclassing :
	superclass = [SysML::Classifier | QualifiedName]
;

Conjugation returns SysML::Conjugation :
	originalType = [SysML::Classifier | QualifiedName]
;

/* CLASSES */

Class returns SysML::Class :
	ClassDeclaration TypeBody
;

fragment ClassDeclaration returns SysML::Class :
	( isAbstract ?= 'abstract' )? 'class' ClassifierDeclarationCompletion
;

/* DATA TYPES */

DataType returns SysML::DataType :
	DataTypeDeclaration TypeBody
;

fragment DataTypeDeclaration returns SysML::DataType :
	( isAbstract ?= 'abstract' )? 'datatype' ClassifierDeclarationCompletion
;

/* ASSOCIATIONS */

Association returns SysML::Association :
	AssociationDeclaration TypeBody
;

fragment AssociationDeclaration returns SysML::Association :
	( isAbstract ?= 'abstract' )? 'assoc' ClassifierDeclarationCompletion
;

/* BEHAVIORS */

Behavior returns SysML::Behavior :
	BehaviorDeclaration BehaviorBody
;

fragment BehaviorDeclaration returns SysML::Behavior :
	( isAbstract ?= 'abstract')? 'behavior' BehaviorDeclarationCompletion
;

fragment BehaviorDeclarationCompletion returns SysML::Behavior :
	(isSufficient ?= 'all' )? Identification? SpecializationOrConjugation? ParameterList?
;

fragment ParameterList returns SysML::Type :
	'(' ( ownedFeatureMembership_comp += ParameterMember ( ',' ownedFeatureMembership_comp += ParameterMember )* )? ')'
;

fragment BehaviorBody returns SysML::Type :
	';'| 
	'{' ( documentation_comp += OwnedDocumentation
		| ownedMembership_comp += NonFeatureTypeMember 
		| ownedFeatureMembership_comp += FeatureTypeMember
		| ownedRelationship_comp += PackageImport
	)* '}'
;

/* BEHAVIOR MEMBERSHIPS */

ParameterMember returns SysML::ParameterMembership :
	( direction = FeatureDirection )? ownedMemberParameter_comp = Parameter
;

/* FUNCTIONS */

Function returns SysML::Function :
	FunctionDeclaration FunctionBody  
;

fragment FunctionDeclaration returns SysML::Function :
	( isAbstract ?= 'abstract' )? 'function' (isSufficient ?= 'all' )? 
	Identification? SpecializationOrConjugation? ParameterPart
;

fragment ParameterPart returns SysML::Type :
	  ParameterList ( ReturnParameterPart | EmptyReturnParameterPart )
	| EmptyReturnParameterPart
;

fragment ReturnParameterPart returns SysML::Type :
	ownedFeatureMembership_comp += ReturnParameterMember
;

fragment EmptyReturnParameterPart returns SysML::Type :
	ownedFeatureMembership_comp += EmptyReturnParameterMember
;

EmptyParameter returns SysML::Feature :
	{SysML::Feature}
;

fragment FunctionBody returns SysML::Type :
	  ';'
	| '{' ( documentation_comp += OwnedDocumentation
		  | ownedMembership_comp += NonFeatureTypeMember 
		  | ownedFeatureMembership_comp += FeatureTypeMember
		  | ownedRelationship_comp += PackageImport
		  )* 
		  ( ownedFeatureMembership_comp += ExpressionMember )? 
	  '}'
;

/* FUNCTION MEMBERSHIPS */

ReturnParameterMember returns SysML::ReturnParameterMembership :
	ownedMemberParameter_comp = Parameter
;

EmptyReturnParameterMember returns SysML::ReturnParameterMembership :
	ownedMemberFeature_comp = EmptyParameter
;

ExpressionMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = Expression
;

/* PREDICATES */

Predicate returns SysML::Predicate :
	PredicateDeclaration FunctionBody  
;

fragment PredicateDeclaration returns SysML::Predicate :
	( isAbstract ?= 'abstract' )? 'predicate' (isSufficient ?= 'all' )? 
	Identification?  SpecializationOrConjugation? ParameterPart
;

/* INTERACTIONS */

Interaction returns SysML::Interaction :
	InteractionDeclaration TypeBody
;

fragment InteractionDeclaration returns SysML::Interaction :
	( isAbstract ?= 'abstract' )? 'interaction' BehaviorDeclarationCompletion
;

/* FEATURES */

Feature returns SysML::Feature :
	FeatureDefinition
;

fragment FeatureDefinition returns SysML::Feature :
	( isAbstract ?= 'abstract' )? 
	( 'feature'? FeatureDeclaration FeatureCompletion
	| 'feature' FeatureCompletion
	)
;

fragment FeatureDeclaration returns SysML::Feature :
	( isSufficient ?= 'all' )? 
	( Identification ( FeatureSpecializationPart | FeatureConjugationPart )?
	| ( Subsettings | Redefinitions ) FeatureSpecializationPart?
	| Typings MultiplicityPart? FeatureSpecialization*
	| FeatureConjugationPart
	)
;

fragment FeatureSpecializationPart returns SysML::Feature :
	  ( Subsettings | Redefinitions | Typings MultiplicityPart? ) FeatureSpecialization*
	| MultiplicityPart FeatureSpecialization*
;

fragment MultiplicityPart returns SysML::Feature :
	ownedFeatureMembership_comp += MultiplicityMember 
	( isOrdered ?= 'ordered'? & isNonunique ?= 'nonunique'? )
;

Multiplicity returns SysML::MultiplicityRange :
	'[' ( ownedFeatureMembership_comp += NaturalLiteralMember '..' )? 
	      ownedFeatureMembership_comp += UnlimitedNaturalLiteralMember ']'
;

fragment FeatureSpecialization returns SysML::Feature :
	Typings | Subsettings | Redefinitions
;

fragment Typings returns SysML::Feature :
	TypedBy ( ',' ownedRelationship_comp += FeatureTyping )*
;

fragment TypedBy returns SysML::Feature :
	( ':' | 'typed' 'by' ) ownedRelationship_comp += FeatureTyping
;

FeatureTyping returns SysML::FeatureTyping :
	type = [SysML::Type | QualifiedName]
;

fragment FeatureConjugationPart returns SysML::Feature :
	( '~' | 'conjugates' ) ownedRelationship_comp += FeatureConjugation
;

FeatureConjugation returns SysML::Conjugation :
	originalType = [SysML::Feature | QualifiedName ]
;

fragment FeatureCompletion returns SysML::Feature :
	ValuePart? TypeBody
;

fragment ValuePart returns SysML::Feature :
	'=' ownedFeatureMembership_comp += FeatureValue
;

FeatureValue returns SysML::FeatureValue :
	value_comp = Expression
;

fragment Subsettings returns SysML::Feature :
	Subsets ( ',' ownedRelationship_comp += Subset )*
;

fragment Subsets returns SysML::Feature :
	( ':>' | 'subsets' ) ownedRelationship_comp += Subset 
;

Subset returns SysML::Subsetting:
	subsettedFeature = [SysML::Feature|QualifiedName]
;

fragment Redefinitions returns SysML::Feature :
	Redefines ( ',' ownedRelationship_comp += Redefinition )*
;

fragment Redefines returns SysML::Feature :
	( ':>>' | 'redefines' ) ownedRelationship_comp += Redefinition
;

Redefinition returns SysML::Redefinition:
	redefinedFeature = [SysML::Feature|QualifiedName] 
;

/* FEATURE MEMBERSHIPS */

MultiplicityMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = Multiplicity
;

NaturalLiteralMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = NaturalLiteralExpression
;

UnlimitedNaturalLiteralMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = UnlimitedNaturalLiteralExpression
;

/* CONNECTORS */

Connector returns SysML::Connector :	 
	( isAbstract ?= 'abstract' )? 'connector' ConnectorDeclaration TypeBody	  
;

fragment ConnectorDeclaration returns SysML::Connector :
	( ( FeatureDeclaration? 'from' | isSufficient ?= 'all' )?
	  ownedFeatureMembership_comp += ConnectorEndMember 'to' ownedFeatureMembership_comp += ConnectorEndMember
	| FeatureDeclaration?
	  '(' ownedFeatureMembership_comp += ConnectorEndMember ',' ownedFeatureMembership_comp += ConnectorEndMember
	      ( ',' ownedFeatureMembership_comp += ConnectorEndMember )*
	  ')'
	)
;

ConnectorEnd returns SysML::Feature :
	ownedRelationship_comp += Subset ( ownedFeatureMembership_comp += MultiplicityMember )?
;

/* CONNECTOR MEMBERSHIPS */

ConnectorEndMember returns SysML::EndFeatureMembership :
	( memberName = Name '=>' )? ownedMemberFeature_comp = ConnectorEnd
;

/* BINDING CONNECTORS */

BindingConnector returns SysML::BindingConnector :
	( isAbstract ?= 'abstract' )? 'binding' BindingConnectorDeclaration TypeBody	
;

fragment BindingConnectorDeclaration returns SysML::BindingConnector :
	( FeatureDeclaration? 'of' | isSufficient ?= 'all' )?
	ownedFeatureMembership_comp += ConnectorEndMember '=' ownedFeatureMembership_comp += ConnectorEndMember
;

/* SUCCESSIONS */

Succession returns SysML::Succession :
	( isAbstract ?= 'abstract' )? 'succession' SuccessionDeclaration TypeBody
;

fragment SuccessionDeclaration returns SysML::Succession :
	( FeatureDeclaration? 'first' | isSufficient ?= 'all' )?
	ownedFeatureMembership_comp += ConnectorEndMember 'then' ownedFeatureMembership_comp += ConnectorEndMember
;

/* ITEM FLOWS */

ItemFlow returns SysML::ItemFlow :
	( isAbstract ?= 'abstract' )? 'stream' ItemFlowDeclaration TypeBody
;

SuccessionItemFlow returns SysML::SuccessionItemFlow :
	( isAbstract ?= 'abstract' )? 'flow' ItemFlowDeclaration TypeBody
;

fragment ItemFlowDeclaration returns SysML::ItemFlow :
	( FeatureDeclaration? 
      ( 'of'  ownedFeatureMembership_comp += ItemFeatureMember
      | ownedFeatureMembership_comp += EmptyItemFeatureMember
      ) 'from'
    | ( isSufficient ?= 'all' )? ownedFeatureMembership_comp += EmptyItemFeatureMember
    )
	ownedFeatureMembership_comp += ItemFlowEndMember 'to' ownedFeatureMembership_comp += ItemFlowEndMember
;

ItemFeatureTyping returns SysML::ItemFeature :
	ownedRelationship_comp += FeatureTyping ( ownedFeatureMembership_comp += MultiplicityMember )?
;

EmptyItemFeature returns SysML::ItemFeature :
	{SysML::ItemFeature}
;

ItemFlowEnd returns SysML::ItemFlowEnd :
	ownedFeatureMembership_comp += ItemFlowFeatureMember
;

ItemFlowFeature returns SysML::ItemFlowFeature :
	ownedRelationship_comp += Redefinition
;

/* ITEM FLOW MEMBERSHIPS */

ItemFeatureMember returns SysML::FeatureMembership :
	( memberName = Name ':' )? ownedMemberFeature_comp = ItemFeatureTyping
;

ItemFlowEndMember returns SysML::EndFeatureMembership :
	ownedMemberFeature_comp = ItemFlowEnd
;

ItemFlowFeatureMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = ItemFlowFeature
;

EmptyItemFeatureMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = EmptyItemFeature
;

/* PARAMETERS */

Parameter returns SysML::Feature :
      'feature'? ParameterDeclaration
    | {SysML::Step} 'step' ParameterDeclaration
    | {SysML::Expression} 'expr' ParameterDeclaration
    | {SysML::BooleanExpression} 'bool' ParameterDeclaration
;

fragment ParameterDeclaration returns SysML::Feature :
	( isSufficient ?= 'all' )? 
    ( Identification ParameterSpecializationPart? 
	| ParameterSpecializationPart
	)
;

fragment ParameterSpecializationPart returns SysML::Feature :
	  ( Subsets | Redefines | TypedBy MultiplicityPart? ) ParameterSpecialization*
	| MultiplicityPart ParameterSpecialization*
;

fragment ParameterSpecialization returns SysML::Feature :
	TypedBy | Subsets | Redefines
;

/* STEPS */

Step returns SysML::Step :
	( isAbstract ?= 'abstract' )? 'step' StepDeclaration BehaviorBody
;

fragment StepDeclaration returns SysML::Step :
	FeatureDeclaration? ( ValuePart | StepParameterList )?
;

fragment StepParameterList returns SysML::Step :
	'(' ( ownedFeatureMembership_comp += StepParameterMember
	    ( ',' ownedFeatureMembership_comp += StepParameterMember )* )? ')'
;

StepParameter returns SysML::Feature :
	Parameter ValuePart? 
;

/* STEP MEMBERSHIPS */

StepParameterMember returns SysML::ParameterMembership :
	( direction = FeatureDirection )? ownedMemberParameter_comp = StepParameter
;

/* INVARIANTS */

Invariant returns SysML::Invariant :
	( isAbstract ?= 'abstract' )? 'inv' BooleanExpressionDeclaration InvariantPart FunctionBody
;

fragment InvariantPart returns SysML::Invariant :
	ownedFeatureMembership_comp += TrueLiteralMember
;

TrueLiteralExpression returns SysML::LiteralBoolean :
	{SysML::LiteralBoolean}
;

/* INVARIANT MEMBERSHIPS */

TrueLiteralMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = TrueLiteralExpression
;

/* EXPRESSIONS */

// Block Expressions

BlockExpression returns SysML::BlockExpression :
	( isAbstract ?= 'abstract' )? 'expr' ExpressionDeclaration FunctionBody
;

fragment ExpressionDeclaration returns SysML::Expression :
	FeatureDeclaration? ( ValuePart | ParameterList ReturnParameterPart? )? 
;

// Boolean Expressions

BooleanExpression returns SysML::BooleanExpression :
	( isAbstract ?= 'abstract' )? 'bool' BooleanExpressionDeclaration FunctionBody
;

fragment BooleanExpressionDeclaration returns SysML::Expression :
	FeatureDeclaration? ( ValuePart | ParameterList )? EmptyReturnParameterPart
;

// Expressions

Expression returns SysML::Expression :
	 ConditionalExpression
;

// Conditional Test Expressions

ConditionalExpression returns SysML::Expression :
	NullCoalescingExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = ConditionalTestOperator operand_comp += Expression ':' operand_comp += ConditionalExpression
	)?
;

ConditionalTestOperator: 
	'?'
;

// Null Coalescing Expressions

NullCoalescingExpression returns SysML::Expression :
	ConditionalOrExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = NullCoalescingOperator operand_comp += ConditionalOrExpression )*
;

NullCoalescingOperator :
	'??'
;

// Conditional Logical Expressions

ConditionalOrExpression returns SysML::Expression :
	ConditionalAndExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = ConditionalOrOperator operand_comp += ConditionalAndExpression )*
;

ConditionalOrOperator :
	'||'
;

ConditionalAndExpression returns SysML::Expression :
	OrExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = ConditionalAndOperator operand_comp += OrExpression )*
;

ConditionalAndOperator :
	'&&'
;

// Logical Expressions

OrExpression returns SysML::Expression :
	XorExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = OrOperator operand_comp += XorExpression )*
;

OrOperator :
	'|'
;

XorExpression returns SysML::Expression :
	AndExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = XorOperator operand_comp += AndExpression )*
;

XorOperator :
	'^'
;

AndExpression returns SysML::Expression :
	EqualityExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = AndOperator operand_comp += EqualityExpression )*
;

AndOperator :
	'&'
;

// Equality Expressions

EqualityExpression returns SysML::Expression :
	ClassificationExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = EqualityOperator operand_comp += ClassificationExpression )*
	
;

EqualityOperator :
	'==' | '!=' 
;

// Classification Expressions

ClassificationExpression returns SysML::Expression :
	RelationalExpression ( {SysML::OperatorExpression.operand_comp += current}
		operator = ClassificationOperator ownedFeatureMembership_comp += TypeReferenceMember )?
;

ClassificationOperator :
	'instanceof' | 'hastype' | 'istype'
;

// Relational Expressions

RelationalExpression returns SysML::Expression :
	AdditiveExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = RelationalOperator operand_comp += AdditiveExpression )*
;

RelationalOperator :
	'<' | '>' | '<=' | '>='
;

// Arithmetic Expressions

AdditiveExpression returns SysML::Expression :
	MultiplicativeExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = AdditiveOperator operand_comp += MultiplicativeExpression )*	
;

AdditiveOperator :
	'+' | '-' 
;

MultiplicativeExpression returns SysML::Expression :
	ExponentiationExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = MultiplicativeOperator operand_comp += ExponentiationExpression )*	
;

MultiplicativeOperator :
	'*' | '/' 
;

ExponentiationExpression returns SysML::Expression :
	UnitsExpression ( {SysML::OperatorExpression.operand_comp += current}  
		operator = ExponentiationOperator operand_comp += UnitsExpression )*		
;

ExponentiationOperator :
	'**'
;

// Units Expressions

UnitsExpression returns SysML::Expression :
	UnaryExpression ( {SysML::OperatorExpression.operand_comp += current} 
		operator = '@' '[' operand_comp += Expression ']' )?		
;

// Unary Expressions

UnaryExpression returns SysML::Expression:
	SequenceAccessExpression | {SysML::OperatorExpression} operator = UnaryOperator operand_comp += SequenceAccessExpression
;

UnaryOperator :
	'+' | '-' | '!' | '~'
;

SequenceAccessExpression returns SysML::Expression :
	 PrimaryExpression 
	 ( {SysML::OperatorExpression.operand_comp += current} operator = '[' operand_comp += Expression ']' )?
;

// Primary Expressions

PrimaryExpression returns SysML::Expression :
	BaseExpression ( {SysML::OperatorExpression.operand_comp += current} '->' 
		operator = Name ( ownedFeatureMembership_comp += BodyMember )+
	)*
;

BodyExpression returns SysML::BlockExpression :
	   => ( ownedFeatureMembership_comp += BodyParameterMember ( ownedFeatureMembership_comp += BodyParameterMember )* 
	   	    '(' ownedFeatureMembership_comp += ExpressionMember ')' )
	 | ownedRelationship_comp += ExpressionTyping
;

BodyParameter returns SysML::Feature :
	{SysML::Feature} ( TypedBy MultiplicityPart? | MultiplicityPart TypedBy? )?
;

ExpressionTyping returns SysML::FeatureTyping :
	type = [ SysML::Function | QualifiedName ]
;

// Base Expressions

BaseExpression returns SysML::Expression :
	  NullExpression
	| LiteralExpression 
	| FeatureReferenceExpression 
	| InvocationExpression 
	| ExtentExpression
	| SequenceConstructionExpression 
	| '(' Expression ')'
;

FeatureReferenceExpression returns SysML::FeatureReferenceExpression :
	ownedFeatureMembership_comp += FeatureReferenceMember
;

FeatureReference returns SysML::Feature :
	ownedRelationship_comp += Subset
;

InvocationExpression returns SysML::InvocationExpression :
	ownedRelationship_comp += FeatureTyping '(' Tuple? ')'
;

fragment Tuple returns SysML::Expression :
	PositionalTuple | NamedTuple
;

fragment PositionalTuple returns SysML::Expression :
	ownedFeatureMembership_comp += ExpressionMember ( ',' ownedFeatureMembership_comp += ExpressionMember )*
;

fragment NamedTuple returns SysML::Expression :
	ownedFeatureMembership_comp += NamedExpressionMember ( ',' ownedFeatureMembership_comp += NamedExpressionMember )*
;

ExtentExpression returns SysML::OperatorExpression :
	  ownedFeatureMembership_comp += TypeReferenceMember '.' operator = 'allInstances' '(' ')'
	| operator = 'all' ownedFeatureMembership_comp += TypeReferenceMember
;

TypeReference returns SysML::Feature :
	ownedRelationship_comp += FeatureTyping
;

SequenceConstructionExpression returns SysML::Expression :
	  {SysML::NullExpression} '{' '}'
	| '{' Expression
	      ( {SysML::OperatorExpression.operand_comp += current} operator = ',' operand_comp += SequenceElementList
	      | {SysML::OperatorExpression.operand_comp += current} operator = '..' operand_comp += Expression
	      )?
	  '}'
;

SequenceElementList returns SysML::Expression :	
	Expression ( {SysML::OperatorExpression.operand_comp += current} operator = ',' operand_comp += SequenceElementList )?
;

NullExpression returns SysML::NullExpression :
	{SysML::NullExpression} 'null'
;

// Literal Expressions

LiteralExpression returns SysML::LiteralExpression :
	BooleanLiteralExpression | StringLiteralExpression | RealLiteralExpression | UnlimitedNaturalLiteralExpression
;

BooleanLiteralExpression returns SysML::LiteralBoolean :
	value = BooleanValue
;

BooleanValue returns Ecore::EBoolean :
	'true' | 'false'
;

StringLiteralExpression returns SysML::LiteralString :
	value = STRING_VALUE
;

RealLiteralExpression returns SysML::LiteralReal:
	value = RealValue
;

RealValue returns Ecore::EDouble:
	DECIMAL_VALUE? '.' ( DECIMAL_VALUE | EXP_VALUE ) | EXP_VALUE
;

NaturalLiteralExpression returns SysML::LiteralInteger:
	value = DECIMAL_VALUE
;

UnlimitedNaturalLiteralExpression returns SysML::LiteralExpression:
	NaturalLiteralExpression | {SysML::LiteralUnbounded} '*'
;

/* EXPRESSION MEMBERSHIPS */

FeatureReferenceMember returns SysML::ReturnParameterMembership :
	ownedMemberFeature_comp = FeatureReference
;

TypeReferenceMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = TypeReference
;

NamedExpressionMember returns SysML::FeatureMembership :
	memberName = Name '=>' ownedMemberFeature_comp = Expression
;

BodyMember returns SysML::FeatureMembership :
	ownedMemberFeature_comp = BodyExpression
;

BodyParameterMember returns SysML::ParameterMembership :
	memberName = Name ownedMemberParameter_comp = BodyParameter
;

/* NAMES */

Name :
	ID | UNRESTRICTED_NAME
;

QualifiedName :
	Name | ColonQualifiedName | DotQualifiedName
;

ColonQualifiedName :
	Name ('::' Name)+
;

DotQualifiedName :
	Name ('.' Name)+
;

/* TERMINALS */

//terminal NATURAL_VALUE returns Ecore::EInt :
//	('0' | '1'..'9' (('_')? '0'..'9')*) | //DECIMAL 
//	(('0b' | '0B') '0'..'1' (('_')? '0'..'1')*) | // BINARY
//	(('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')  (('_')? ('0'..'9'|'a'..'f'|'A'..'F'))*) | // HEX
//	('0' ('_')? '0'..'7' (('_')? '0'..'7')*) // OCT
//;

terminal DECIMAL_VALUE returns Ecore::EInt :
	'0'..'9' ('0'..'9')*
;

terminal EXP_VALUE :
	DECIMAL_VALUE ('e' | 'E') ('+' | '-')? DECIMAL_VALUE
;

terminal ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ;
terminal UNRESTRICTED_NAME returns Ecore::EString : 
	'\'' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'\'') )* '\'' ;

terminal STRING_VALUE returns Ecore::EString : 
	'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"' ;

terminal ML_COMMENT	: '/*' !'*' -> '*/';
terminal DOCUMENTATION_COMMENT : '/**' -> '*/' ;

terminal ML_NOTE : '//*' -> '*/';
terminal SL_NOTE : '//' (!('\n'|'\r') !('\n'|'\r')*)? ('\r'? '\n')?;

terminal WS : (' '|'\t'|'\r'|'\n')+;