/*
 * generated by Xtext 2.25.0
 */
package org.omg.kerml.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.omg.kerml.expressions.xtext.serializer.KerMLExpressionsSemanticSequencer;
import org.omg.kerml.xtext.services.KerMLGrammarAccess;
import org.omg.sysml.lang.sysml.AnnotatingFeature;
import org.omg.sysml.lang.sysml.Annotation;
import org.omg.sysml.lang.sysml.Association;
import org.omg.sysml.lang.sysml.AssociationStructure;
import org.omg.sysml.lang.sysml.Behavior;
import org.omg.sysml.lang.sysml.BindingConnector;
import org.omg.sysml.lang.sysml.BooleanExpression;
import org.omg.sysml.lang.sysml.Classifier;
import org.omg.sysml.lang.sysml.Comment;
import org.omg.sysml.lang.sysml.Conjugation;
import org.omg.sysml.lang.sysml.Connector;
import org.omg.sysml.lang.sysml.DataType;
import org.omg.sysml.lang.sysml.Disjoining;
import org.omg.sysml.lang.sysml.Documentation;
import org.omg.sysml.lang.sysml.Element;
import org.omg.sysml.lang.sysml.ElementFilterMembership;
import org.omg.sysml.lang.sysml.EndFeatureMembership;
import org.omg.sysml.lang.sysml.Expression;
import org.omg.sysml.lang.sysml.Feature;
import org.omg.sysml.lang.sysml.FeatureChaining;
import org.omg.sysml.lang.sysml.FeatureMembership;
import org.omg.sysml.lang.sysml.FeatureReferenceExpression;
import org.omg.sysml.lang.sysml.FeatureTyping;
import org.omg.sysml.lang.sysml.FeatureValue;
import org.omg.sysml.lang.sysml.Function;
import org.omg.sysml.lang.sysml.Import;
import org.omg.sysml.lang.sysml.Interaction;
import org.omg.sysml.lang.sysml.Invariant;
import org.omg.sysml.lang.sysml.InvocationExpression;
import org.omg.sysml.lang.sysml.ItemFeature;
import org.omg.sysml.lang.sysml.ItemFlow;
import org.omg.sysml.lang.sysml.ItemFlowEnd;
import org.omg.sysml.lang.sysml.ItemFlowFeature;
import org.omg.sysml.lang.sysml.LiteralBoolean;
import org.omg.sysml.lang.sysml.LiteralInfinity;
import org.omg.sysml.lang.sysml.LiteralInteger;
import org.omg.sysml.lang.sysml.LiteralRational;
import org.omg.sysml.lang.sysml.LiteralString;
import org.omg.sysml.lang.sysml.Membership;
import org.omg.sysml.lang.sysml.MetadataFeature;
import org.omg.sysml.lang.sysml.MetadataFeatureValue;
import org.omg.sysml.lang.sysml.Multiplicity;
import org.omg.sysml.lang.sysml.MultiplicityRange;
import org.omg.sysml.lang.sysml.Namespace;
import org.omg.sysml.lang.sysml.NullExpression;
import org.omg.sysml.lang.sysml.OperatorExpression;
import org.omg.sysml.lang.sysml.ParameterMembership;
import org.omg.sysml.lang.sysml.PathSelectExpression;
import org.omg.sysml.lang.sysml.PathStepExpression;
import org.omg.sysml.lang.sysml.Predicate;
import org.omg.sysml.lang.sysml.Redefinition;
import org.omg.sysml.lang.sysml.Relationship;
import org.omg.sysml.lang.sysml.ResultExpressionMembership;
import org.omg.sysml.lang.sysml.ReturnParameterMembership;
import org.omg.sysml.lang.sysml.Specialization;
import org.omg.sysml.lang.sysml.Step;
import org.omg.sysml.lang.sysml.Structure;
import org.omg.sysml.lang.sysml.Subclassification;
import org.omg.sysml.lang.sysml.Subsetting;
import org.omg.sysml.lang.sysml.Succession;
import org.omg.sysml.lang.sysml.SuccessionItemFlow;
import org.omg.sysml.lang.sysml.SysMLPackage;
import org.omg.sysml.lang.sysml.TextualRepresentation;
import org.omg.sysml.lang.sysml.Type;
import org.omg.sysml.lang.sysml.TypeFeaturing;

@SuppressWarnings("all")
public class KerMLSemanticSequencer extends KerMLExpressionsSemanticSequencer {

	@Inject
	private KerMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SysMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SysMLPackage.ANNOTATING_FEATURE:
				if (rule == grammarAccess.getOwnedAnnotatingFeatureRule()) {
					sequence_AnnotatingFeatureBody_OwnedAnnotatingFeature(context, (AnnotatingFeature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnnotatingFeatureRule()
						|| rule == grammarAccess.getNonFeatureElementRule()) {
					sequence_AnnotatingFeature_AnnotatingFeatureBody_AnnotatingFeatureDeclaration_Identification(context, (AnnotatingFeature) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()) {
					sequence_Annotation(context, (Annotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyAnnotationRule()) {
					sequence_EmptyAnnotation(context, (Annotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedAnnotatingFeatureAnnotationRule()) {
					sequence_OwnedAnnotatingFeatureAnnotation(context, (Annotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedTextualRepresentationAnnotationRule()) {
					sequence_OwnedTextualRepresentationAnnotation(context, (Annotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPrefixDocumentationRule()) {
					sequence_PrefixDocumentation(context, (Annotation) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ASSOCIATION:
				sequence_Association_ClassifierConjugationPart_ClassifierDeclaration_DisjoiningPart_Identification_SuperclassingPart_TypeBody(context, (Association) semanticObject); 
				return; 
			case SysMLPackage.ASSOCIATION_STRUCTURE:
				sequence_AssociationStructure_ClassifierConjugationPart_ClassifierDeclaration_DisjoiningPart_Identification_SuperclassingPart_TypeBody(context, (AssociationStructure) semanticObject); 
				return; 
			case SysMLPackage.BEHAVIOR:
				sequence_Behavior_ClassifierConjugationPart_ClassifierDeclaration_DisjoiningPart_Identification_ParameterList_SuperclassingPart_TypeBody(context, (Behavior) semanticObject); 
				return; 
			case SysMLPackage.BINDING_CONNECTOR:
				sequence_BindingConnectorDeclaration_DisjoiningPart_FeatureConjugationPart_FeatureDeclaration_FeaturePrefix_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypeFeaturingPart_TypedBy_Typings(context, (BindingConnector) semanticObject); 
				return; 
			case SysMLPackage.BOOLEAN_EXPRESSION:
				if (rule == grammarAccess.getFeatureElementRule()
						|| rule == grammarAccess.getBooleanExpressionRule()) {
					sequence_DisjoiningPart_EmptyReturnParameterPart_FeatureConjugationPart_FeatureDeclaration_FeaturePrefix_FunctionBody_Identification_MultiplicityPart_Redefines_Redefinitions_ReturnParameterPart_StepParameterList_Subsets_Subsettings_TypeFeaturingPart_TypedBy_Typings_ValuePart(context, (BooleanExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy(context, (BooleanExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStepParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy_ValuePart(context, (BooleanExpression) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CLASS:
				sequence_Class_ClassifierConjugationPart_ClassifierDeclaration_DisjoiningPart_Identification_SuperclassingPart_TypeBody(context, (org.omg.sysml.lang.sysml.Class) semanticObject); 
				return; 
			case SysMLPackage.CLASSIFIER:
				sequence_Classifier_ClassifierConjugationPart_ClassifierDeclaration_DisjoiningPart_Identification_SuperclassingPart_TypeBody(context, (Classifier) semanticObject); 
				return; 
			case SysMLPackage.COMMENT:
				if (rule == grammarAccess.getCommentRule()
						|| rule == grammarAccess.getNonFeatureElementRule()) {
					sequence_Comment_Identification(context, (Comment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDocumentationCommentRule()) {
					sequence_DocumentationComment(context, (Comment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPrefixDocumentationCommentRule()) {
					sequence_PrefixDocumentationComment(context, (Comment) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CONJUGATION:
				if (rule == grammarAccess.getClassifierConjugationRule()) {
					sequence_ClassifierConjugation(context, (Conjugation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNonFeatureElementRule()
						|| rule == grammarAccess.getConjugationRule()) {
					sequence_Conjugation_Identification(context, (Conjugation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureConjugationRule()) {
					sequence_FeatureConjugation(context, (Conjugation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedConjugationRule()) {
					sequence_OwnedConjugation(context, (Conjugation) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CONNECTOR:
				sequence_BinaryConnectorDeclaration_DisjoiningPart_FeatureConjugationPart_FeatureDeclaration_FeaturePrefix_Identification_MultiplicityPart_NaryConnectorDeclaration_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypeFeaturingPart_TypedBy_Typings(context, (Connector) semanticObject); 
				return; 
			case SysMLPackage.DATA_TYPE:
				sequence_ClassifierConjugationPart_ClassifierDeclaration_DataType_DisjoiningPart_Identification_SuperclassingPart_TypeBody(context, (DataType) semanticObject); 
				return; 
			case SysMLPackage.DISJOINING:
				if (rule == grammarAccess.getNonFeatureElementRule()
						|| rule == grammarAccess.getDisjoiningRule()) {
					sequence_Disjoining_Identification(context, (Disjoining) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedDisjoiningRule()) {
					sequence_OwnedDisjoining(context, (Disjoining) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.DOCUMENTATION:
				sequence_OwnedDocumentation(context, (Documentation) semanticObject); 
				return; 
			case SysMLPackage.ELEMENT:
				if (rule == grammarAccess.getElementRule()
						|| rule == grammarAccess.getNonFeatureElementRule()) {
					sequence_Identification_OwnedElement(context, (Element) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedRelatedElementRule()) {
					sequence_OwnedElement_OwnedRelatedElement(context, (Element) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ELEMENT_FILTER_MEMBERSHIP:
				if (rule == grammarAccess.getElementFilterMemberRule()) {
					sequence_ElementFilterMember_MemberPrefix(context, (ElementFilterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFilterPackageMemberRule()) {
					sequence_FilterPackageMember(context, (ElementFilterMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.END_FEATURE_MEMBERSHIP:
				if (rule == grammarAccess.getConnectorEndMemberRule()) {
					sequence_ConnectorEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFlowEndMemberRule()) {
					sequence_ItemFlowEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.EXPRESSION:
				if (rule == grammarAccess.getFeatureElementRule()
						|| rule == grammarAccess.getExpressionRule()) {
					sequence_DisjoiningPart_EmptyReturnParameterPart_FeatureConjugationPart_FeatureDeclaration_FeaturePrefix_FunctionBody_Identification_MultiplicityPart_Redefines_Redefinitions_ReturnParameterPart_StepParameterList_Subsets_Subsettings_TypeFeaturingPart_TypedBy_Typings_ValuePart(context, (Expression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionBodyRule()
						|| rule == grammarAccess.getOwnedExpressionRule()
						|| rule == grammarAccess.getConditionalExpressionRule()
						|| action == grammarAccess.getConditionalExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getNullCoalescingExpressionRule()
						|| action == grammarAccess.getNullCoalescingExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getXorExpressionRule()
						|| action == grammarAccess.getXorExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getEqualityExpressionRule()
						|| action == grammarAccess.getEqualityExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getClassificationExpressionRule()
						|| action == grammarAccess.getClassificationExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getRelationalExpressionRule()
						|| action == grammarAccess.getRelationalExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getRangeExpressionRule()
						|| action == grammarAccess.getRangeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAdditiveExpressionRule()
						|| action == grammarAccess.getAdditiveExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getMultiplicativeExpressionRule()
						|| action == grammarAccess.getMultiplicativeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getExponentiationExpressionRule()
						|| action == grammarAccess.getExponentiationExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getUnaryExpressionRule()
						|| rule == grammarAccess.getExtentExpressionRule()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_1_0_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_1_1_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getPathStepExpressionOperandAction_1_2_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getPathSelectExpressionOperandAction_1_3_0()
						|| rule == grammarAccess.getBaseExpressionRule()
						|| rule == grammarAccess.getSequenceExpressionRule()
						|| action == grammarAccess.getSequenceExpressionAccess().getOperatorExpressionOperandAction_1_1_0()) {
					sequence_FunctionBody(context, (Expression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFunctionReferenceRule()) {
					sequence_FunctionReference(context, (Expression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy(context, (Expression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStepParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy_ValuePart(context, (Expression) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE:
				if (rule == grammarAccess.getEmptyParameterRule()
						|| rule == grammarAccess.getEmptyFeatureRule()
						|| rule == grammarAccess.getBodyParameterRule()) {
					sequence_BodyParameter_EmptyFeature(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getConnectorEndRule()) {
					sequence_ConnectorEnd(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureElementRule()
						|| rule == grammarAccess.getFeatureRule()) {
					sequence_DisjoiningPart_FeatureConjugationPart_FeatureDeclaration_FeaturePrefix_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypeFeaturingPart_TypedBy_Typings_ValuePart(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureChainPrefixRule()) {
					sequence_FeatureChainPrefix(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureChainRule()) {
					sequence_FeatureChain(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStepParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy_ValuePart(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeReferenceRule()) {
					sequence_TypeReference(context, (Feature) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_CHAINING:
				sequence_OwnedFeatureChaining(context, (FeatureChaining) semanticObject); 
				return; 
			case SysMLPackage.FEATURE_MEMBERSHIP:
				if (rule == grammarAccess.getEmptyItemFeatureMemberRule()) {
					sequence_EmptyItemFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionBodyMemberRule()) {
					sequence_ExpressionBodyMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFunctionReferenceMemberRule()) {
					sequence_FunctionReferenceMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFeatureMemberRule()) {
					sequence_ItemFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFlowFeatureMemberRule()) {
					sequence_ItemFlowFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedFeatureMemberRule()) {
					sequence_MemberPrefix_OwnedFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureMemberRule()) {
					sequence_MemberPrefix_OwnedFeatureMember_UnownedFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUnownedFeatureMemberRule()) {
					sequence_MemberPrefix_UnownedFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMetadataFeatureMemberRule()) {
					sequence_MetadataFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNamedExpressionMemberRule()) {
					sequence_NamedExpressionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedExpressionMemberRule()) {
					sequence_OwnedExpressionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeReferenceMemberRule()) {
					sequence_TypeReferenceMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_REFERENCE_EXPRESSION:
				if (rule == grammarAccess.getOwnedExpressionRule()
						|| rule == grammarAccess.getConditionalExpressionRule()
						|| action == grammarAccess.getConditionalExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getNullCoalescingExpressionRule()
						|| action == grammarAccess.getNullCoalescingExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getXorExpressionRule()
						|| action == grammarAccess.getXorExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getEqualityExpressionRule()
						|| action == grammarAccess.getEqualityExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getClassificationExpressionRule()
						|| action == grammarAccess.getClassificationExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getRelationalExpressionRule()
						|| action == grammarAccess.getRelationalExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getRangeExpressionRule()
						|| action == grammarAccess.getRangeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAdditiveExpressionRule()
						|| action == grammarAccess.getAdditiveExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getMultiplicativeExpressionRule()
						|| action == grammarAccess.getMultiplicativeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getExponentiationExpressionRule()
						|| action == grammarAccess.getExponentiationExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getUnaryExpressionRule()
						|| rule == grammarAccess.getExtentExpressionRule()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_1_0_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_1_1_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getPathStepExpressionOperandAction_1_2_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getPathSelectExpressionOperandAction_1_3_0()
						|| rule == grammarAccess.getBaseExpressionRule()
						|| rule == grammarAccess.getSequenceExpressionRule()
						|| action == grammarAccess.getSequenceExpressionAccess().getOperatorExpressionOperandAction_1_1_0()
						|| rule == grammarAccess.getFeatureReferenceExpressionRule()) {
					sequence_FeatureReferenceExpression(context, (FeatureReferenceExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSelfReferenceExpressionRule()) {
					sequence_SelfReferenceExpression(context, (FeatureReferenceExpression) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_TYPING:
				if (rule == grammarAccess.getNonFeatureElementRule()
						|| rule == grammarAccess.getFeatureTypingRule()) {
					sequence_FeatureTyping_Identification(context, (FeatureTyping) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMetadataTypingRule()) {
					sequence_MetadataTyping(context, (FeatureTyping) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedFeatureTypingRule()) {
					sequence_OwnedFeatureTyping(context, (FeatureTyping) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_VALUE:
				sequence_FeatureValue(context, (FeatureValue) semanticObject); 
				return; 
			case SysMLPackage.FUNCTION:
				sequence_ClassifierConjugationPart_ClassifierDeclaration_DisjoiningPart_EmptyReturnParameterPart_Function_FunctionBody_Identification_ParameterList_ReturnParameterPart_SuperclassingPart(context, (Function) semanticObject); 
				return; 
			case SysMLPackage.IMPORT:
				if (rule == grammarAccess.getImportRule()) {
					sequence_Import_ImportedFilterPackage_ImportedNamespace(context, (Import) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFilterPackageImportRule()) {
					sequence_ImportedNamespace(context, (Import) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.INTERACTION:
				sequence_ClassifierConjugationPart_ClassifierDeclaration_DisjoiningPart_Identification_Interaction_ParameterList_SuperclassingPart_TypeBody(context, (Interaction) semanticObject); 
				return; 
			case SysMLPackage.INVARIANT:
				sequence_DisjoiningPart_EmptyReturnParameterPart_FeatureConjugationPart_FeatureDeclaration_FeaturePrefix_FunctionBody_Identification_Invariant_MultiplicityPart_Redefines_Redefinitions_ReturnParameterPart_StepParameterList_Subsets_Subsettings_TypeFeaturingPart_TypedBy_Typings_ValuePart(context, (Invariant) semanticObject); 
				return; 
			case SysMLPackage.INVOCATION_EXPRESSION:
				sequence_InvocationExpression_NamedArgumentList_PositionalArgumentList(context, (InvocationExpression) semanticObject); 
				return; 
			case SysMLPackage.ITEM_FEATURE:
				if (rule == grammarAccess.getEmptyItemFeatureRule()) {
					sequence_EmptyItemFeature(context, (ItemFeature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFeatureRule()) {
					sequence_ItemFeature(context, (ItemFeature) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ITEM_FLOW:
				sequence_DisjoiningPart_FeatureConjugationPart_FeatureDeclaration_FeaturePrefix_Identification_ItemFlowDeclaration_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypeFeaturingPart_TypedBy_Typings(context, (ItemFlow) semanticObject); 
				return; 
			case SysMLPackage.ITEM_FLOW_END:
				sequence_ItemFlowEnd(context, (ItemFlowEnd) semanticObject); 
				return; 
			case SysMLPackage.ITEM_FLOW_FEATURE:
				sequence_ItemFlowFeature(context, (ItemFlowFeature) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_BOOLEAN:
				sequence_LiteralBoolean(context, (LiteralBoolean) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_INFINITY:
				sequence_LiteralInfinity(context, (LiteralInfinity) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_INTEGER:
				sequence_LiteralInteger(context, (LiteralInteger) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_RATIONAL:
				sequence_LiteralReal(context, (LiteralRational) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_STRING:
				sequence_LiteralString(context, (LiteralString) semanticObject); 
				return; 
			case SysMLPackage.MEMBERSHIP:
				if (rule == grammarAccess.getAliasMemberRule()) {
					sequence_AliasMember_MemberPrefix(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getChainFeatureMemberRule()) {
					sequence_ChainFeatureMember_MemberPrefix(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNamespaceMemberRule()) {
					sequence_ChainFeatureMember_MemberPrefix_NamespaceFeatureMember_NonFeatureMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureMemberRule()) {
					sequence_ChainFeatureMember_MemberPrefix_TypeFeatureMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureReferenceMemberRule()) {
					sequence_FeatureReferenceMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNamespaceFeatureMemberRule()) {
					sequence_MemberPrefix_NamespaceFeatureMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNonFeatureMemberRule()) {
					sequence_MemberPrefix_NonFeatureMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeFeatureMemberRule()) {
					sequence_MemberPrefix_TypeFeatureMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMultiplicityExpressionMemberRule()) {
					sequence_MultiplicityExpressionMember(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedMultiplicityRule()) {
					sequence_OwnedMultiplicity(context, (Membership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.METADATA_FEATURE:
				sequence_MetadataFeature(context, (MetadataFeature) semanticObject); 
				return; 
			case SysMLPackage.METADATA_FEATURE_VALUE:
				sequence_MetadataFeatureValue(context, (MetadataFeatureValue) semanticObject); 
				return; 
			case SysMLPackage.MULTIPLICITY:
				sequence_Identification_Subsets(context, (Multiplicity) semanticObject); 
				return; 
			case SysMLPackage.MULTIPLICITY_RANGE:
				if (rule == grammarAccess.getNonFeatureElementRule()
						|| rule == grammarAccess.getMultiplicityRule()
						|| rule == grammarAccess.getMultiplicityRangeRule()) {
					sequence_Identification_MultiplicityBounds(context, (MultiplicityRange) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedMultiplicityRangeRule()) {
					sequence_MultiplicityBounds(context, (MultiplicityRange) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.NAMESPACE:
				if (rule == grammarAccess.getNamespaceRule()
						|| rule == grammarAccess.getNonFeatureElementRule()) {
					sequence_Identification_NamespaceBody(context, (Namespace) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootNamespaceRule()) {
					sequence_NamespaceBodyElement_RootNamespace(context, (Namespace) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.NULL_EXPRESSION:
				sequence_NullExpression(context, (NullExpression) semanticObject); 
				return; 
			case SysMLPackage.OPERATOR_EXPRESSION:
				sequence_AdditiveExpression_AndExpression_ClassificationExpression_ConditionalExpression_EqualityExpression_ExponentiationExpression_ExtentExpression_ImpliesExpression_MultiplicativeExpression_NamedArgumentList_NullCoalescingExpression_OrExpression_PositionalArgumentList_PrimaryExpression_RangeExpression_RelationalExpression_SequenceExpression_UnaryExpression_XorExpression(context, (OperatorExpression) semanticObject); 
				return; 
			case SysMLPackage.PACKAGE:
				if (rule == grammarAccess.getFilterPackageRule()) {
					sequence_FilterPackage(context, (org.omg.sysml.lang.sysml.Package) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNonFeatureElementRule()
						|| rule == grammarAccess.getPackageRule()) {
					sequence_Identification_PackageBody(context, (org.omg.sysml.lang.sysml.Package) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PARAMETER_MEMBERSHIP:
				if (rule == grammarAccess.getBodyParameterMemberRule()) {
					sequence_BodyParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterMemberRule()) {
					sequence_ParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStepParameterMemberRule()) {
					sequence_StepParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PATH_SELECT_EXPRESSION:
				sequence_PrimaryExpression(context, (PathSelectExpression) semanticObject); 
				return; 
			case SysMLPackage.PATH_STEP_EXPRESSION:
				sequence_PrimaryExpression(context, (PathStepExpression) semanticObject); 
				return; 
			case SysMLPackage.PREDICATE:
				sequence_ClassifierConjugationPart_ClassifierDeclaration_DisjoiningPart_EmptyReturnParameterPart_FunctionBody_Identification_ParameterList_Predicate_ReturnParameterPart_SuperclassingPart(context, (Predicate) semanticObject); 
				return; 
			case SysMLPackage.REDEFINITION:
				if (rule == grammarAccess.getNonFeatureElementRule()
						|| rule == grammarAccess.getRedefinitionRule()) {
					sequence_Identification_Redefinition(context, (Redefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFlowRedefinitionRule()) {
					sequence_ItemFlowRedefinition(context, (Redefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedRedefinitionRule()) {
					sequence_OwnedRedefinition(context, (Redefinition) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.RELATIONSHIP:
				if (rule == grammarAccess.getRelationshipRule()
						|| rule == grammarAccess.getNonFeatureElementRule()) {
					sequence_Identification_RelationshipOwnedElement_RelationshipSource_RelationshipTarget(context, (Relationship) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedRelationshipRule()) {
					sequence_Identification_RelationshipOwnedElement_RelationshipTarget(context, (Relationship) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedRelatedElementRule()
						|| rule == grammarAccess.getOwnedRelatedRelationshipRule()) {
					sequence_OwnedRelatedRelationship_RelationshipOwnedElement(context, (Relationship) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.RESULT_EXPRESSION_MEMBERSHIP:
				sequence_MemberPrefix_ResultExpressionMember(context, (ResultExpressionMembership) semanticObject); 
				return; 
			case SysMLPackage.RETURN_PARAMETER_MEMBERSHIP:
				if (rule == grammarAccess.getEmptyReturnParameterMemberRule()) {
					sequence_EmptyReturnParameterMember(context, (ReturnParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getReturnParameterMemberRule()) {
					sequence_ReturnParameterMember(context, (ReturnParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSelfReferenceMemberRule()) {
					sequence_SelfReferenceMember(context, (ReturnParameterMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SPECIALIZATION:
				if (rule == grammarAccess.getNonFeatureElementRule()
						|| rule == grammarAccess.getSpecializationRule()) {
					sequence_Identification_Specialization(context, (Specialization) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedSpecializationRule()) {
					sequence_OwnedSpecialization(context, (Specialization) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.STEP:
				if (rule == grammarAccess.getFeatureElementRule()
						|| rule == grammarAccess.getStepRule()) {
					sequence_DisjoiningPart_FeatureConjugationPart_FeatureDeclaration_FeaturePrefix_Identification_MultiplicityPart_Redefines_Redefinitions_StepParameterList_Subsets_Subsettings_TypeBody_TypeFeaturingPart_TypedBy_Typings_ValuePart(context, (Step) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy(context, (Step) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStepParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy_ValuePart(context, (Step) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.STRUCTURE:
				sequence_ClassifierConjugationPart_ClassifierDeclaration_DisjoiningPart_Identification_Structure_SuperclassingPart_TypeBody(context, (Structure) semanticObject); 
				return; 
			case SysMLPackage.SUBCLASSIFICATION:
				if (rule == grammarAccess.getNonFeatureElementRule()
						|| rule == grammarAccess.getSubclassificationRule()) {
					sequence_Identification_Subclassification(context, (Subclassification) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedsubclassificationRule()) {
					sequence_Ownedsubclassification(context, (Subclassification) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SUBSETTING:
				if (rule == grammarAccess.getNonFeatureElementRule()
						|| rule == grammarAccess.getSubsettingRule()) {
					sequence_Identification_Subsetting(context, (Subsetting) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFlowEndSubsettingRule()) {
					sequence_ItemFlowEndSubsetting(context, (Subsetting) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedSubsettingRule()) {
					sequence_OwnedSubsetting(context, (Subsetting) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SUCCESSION:
				sequence_DisjoiningPart_FeatureConjugationPart_FeatureDeclaration_FeaturePrefix_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_SuccessionDeclaration_TypeBody_TypeFeaturingPart_TypedBy_Typings(context, (Succession) semanticObject); 
				return; 
			case SysMLPackage.SUCCESSION_ITEM_FLOW:
				sequence_DisjoiningPart_FeatureConjugationPart_FeatureDeclaration_FeaturePrefix_Identification_ItemFlowDeclaration_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypeFeaturingPart_TypedBy_Typings(context, (SuccessionItemFlow) semanticObject); 
				return; 
			case SysMLPackage.TEXTUAL_REPRESENTATION:
				if (rule == grammarAccess.getTextualRepresentationRule()
						|| rule == grammarAccess.getNonFeatureElementRule()) {
					sequence_Identification_TextualRepresentation(context, (TextualRepresentation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedTextualRepresentationRule()) {
					sequence_OwnedTextualRepresentation(context, (TextualRepresentation) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.TYPE:
				sequence_ConjugationPart_DisjoiningPart_Identification_SpecializationPart_Type_TypeBody_TypeDeclaration(context, (Type) semanticObject); 
				return; 
			case SysMLPackage.TYPE_FEATURING:
				if (rule == grammarAccess.getNonFeatureElementRule()
						|| rule == grammarAccess.getTypeFeaturingRule()) {
					sequence_Identification_TypeFeaturing(context, (TypeFeaturing) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedTypeFeaturingRule()) {
					sequence_OwnedTypeFeaturing(context, (TypeFeaturing) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AliasMember returns Membership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? memberName=Name memberElement=[Element|QualifiedName])
	 */
	protected void sequence_AliasMember_MemberPrefix(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedAnnotatingFeature returns AnnotatingFeature
	 *
	 * Constraint:
	 *     (humanId=Name? ownedRelationship+=MetadataTyping ownedRelationship+=EmptyAnnotation ownedRelationship+=MetadataFeatureMember*)
	 */
	protected void sequence_AnnotatingFeatureBody_OwnedAnnotatingFeature(ISerializationContext context, AnnotatingFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AnnotatingFeature returns AnnotatingFeature
	 *     NonFeatureElement returns AnnotatingFeature
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ownedRelationship+=MetadataTyping 
	 *         ((ownedRelationship+=Annotation ownedRelationship+=Annotation*) | ownedRelationship+=EmptyAnnotation) 
	 *         ownedRelationship+=MetadataFeatureMember*
	 *     )
	 */
	protected void sequence_AnnotatingFeature_AnnotatingFeatureBody_AnnotatingFeatureDeclaration_Identification(ISerializationContext context, AnnotatingFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Annotation returns Annotation
	 *
	 * Constraint:
	 *     annotatedElement=[Element|QualifiedName]
	 */
	protected void sequence_Annotation(ISerializationContext context, Annotation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.ANNOTATION__ANNOTATED_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.ANNOTATION__ANNOTATED_ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnnotationAccess().getAnnotatedElementElementQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.ANNOTATION__ANNOTATED_ELEMENT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns AssociationStructure
	 *     AssociationStructure returns AssociationStructure
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         isSufficient?='all'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ownedRelationship+=OwnedMultiplicity? 
	 *         ((ownedRelationship+=Ownedsubclassification ownedRelationship+=Ownedsubclassification*) | ownedRelationship+=ClassifierConjugation)? 
	 *         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=NonFeatureMember | 
	 *             ownedRelationship+=FeatureMember | 
	 *             ownedRelationship+=AliasMember | 
	 *             ownedRelationship+=Import
	 *         )*
	 *     )
	 */
	protected void sequence_AssociationStructure_ClassifierConjugationPart_ClassifierDeclaration_DisjoiningPart_Identification_SuperclassingPart_TypeBody(ISerializationContext context, AssociationStructure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns Association
	 *     Association returns Association
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         isSufficient?='all'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ownedRelationship+=OwnedMultiplicity? 
	 *         ((ownedRelationship+=Ownedsubclassification ownedRelationship+=Ownedsubclassification*) | ownedRelationship+=ClassifierConjugation)? 
	 *         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=NonFeatureMember | 
	 *             ownedRelationship+=FeatureMember | 
	 *             ownedRelationship+=AliasMember | 
	 *             ownedRelationship+=Import
	 *         )*
	 *     )
	 */
	protected void sequence_Association_ClassifierConjugationPart_ClassifierDeclaration_DisjoiningPart_Identification_SuperclassingPart_TypeBody(ISerializationContext context, Association semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns Behavior
	 *     Behavior returns Behavior
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         isSufficient?='all'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ownedRelationship+=OwnedMultiplicity? 
	 *         ((ownedRelationship+=Ownedsubclassification ownedRelationship+=Ownedsubclassification*) | ownedRelationship+=ClassifierConjugation)? 
	 *         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=NonFeatureMember | 
	 *             ownedRelationship+=FeatureMember | 
	 *             ownedRelationship+=AliasMember | 
	 *             ownedRelationship+=Import
	 *         )*
	 *     )
	 */
	protected void sequence_Behavior_ClassifierConjugationPart_ClassifierDeclaration_DisjoiningPart_Identification_ParameterList_SuperclassingPart_TypeBody(ISerializationContext context, Behavior semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureElement returns Connector
	 *     Connector returns Connector
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         isAbstract?='abstract'? 
	 *         (isComposite?='composite' | isPortion?='portion')? 
	 *         isEnd?='end'? 
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name)))? 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     ) | 
	 *                     (
	 *                         (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name))) 
	 *                         (
	 *                             (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                         )* 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     )
	 *                 ) 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     )* 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 )* 
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                     (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                     (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                 )* 
	 *                 (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                 (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)? 
	 *                 (
	 *                     (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember) | 
	 *                     (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember*)
	 *                 )
	 *             ) | 
	 *             (
	 *                 (
	 *                     (isSufficient?='all' ownedRelationship+=FeatureConjugation?) | 
	 *                     (isSufficient?='all' ((humanId=Name name=Name?) | name=Name) ownedRelationship+=FeatureConjugation?)
	 *                 ) 
	 *                 (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                 (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)? 
	 *                 (
	 *                     (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember) | 
	 *                     (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember*)
	 *                 )
	 *             ) | 
	 *             (
	 *                 (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name))) 
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                     (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                     (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                 )* 
	 *                 (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                 (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)? 
	 *                 (
	 *                     (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember) | 
	 *                     (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember*)
	 *                 )
	 *             ) | 
	 *             (isSufficient?='all'? ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember) | 
	 *             (ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember ownedRelationship+=ConnectorEndMember*)
	 *         )? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=NonFeatureMember | 
	 *             ownedRelationship+=FeatureMember | 
	 *             ownedRelationship+=AliasMember | 
	 *             ownedRelationship+=Import
	 *         )*
	 *     )
	 */
	protected void sequence_BinaryConnectorDeclaration_DisjoiningPart_FeatureConjugationPart_FeatureDeclaration_FeaturePrefix_Identification_MultiplicityPart_NaryConnectorDeclaration_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypeFeaturingPart_TypedBy_Typings(ISerializationContext context, Connector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureElement returns BindingConnector
	 *     BindingConnector returns BindingConnector
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         isAbstract?='abstract'? 
	 *         (isComposite?='composite' | isPortion?='portion')? 
	 *         isEnd?='end'? 
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name)))? 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     ) | 
	 *                     (
	 *                         (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name))) 
	 *                         (
	 *                             (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                         )+ 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     )
	 *                 ) 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     )+ 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 )* 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                         (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *                     ) | 
	 *                     (
	 *                         (
	 *                             (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                         )+ 
	 *                         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                         (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *                     )
	 *                 )
	 *             ) | 
	 *             (
	 *                 (
	 *                     (isSufficient?='all' ownedRelationship+=FeatureConjugation?) | 
	 *                     (isSufficient?='all' ((humanId=Name name=Name?) | name=Name) ownedRelationship+=FeatureConjugation?)
	 *                 ) 
	 *                 (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                 (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *             ) | 
	 *             (
	 *                 (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name))) 
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                     (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                     (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                 )+ 
	 *                 (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                 (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *             ) | 
	 *             isSufficient?='all'
	 *         )? 
	 *         ownedRelationship+=ConnectorEndMember 
	 *         ownedRelationship+=ConnectorEndMember 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=NonFeatureMember | 
	 *             ownedRelationship+=FeatureMember | 
	 *             ownedRelationship+=AliasMember | 
	 *             ownedRelationship+=Import
	 *         )*
	 *     )
	 */
	protected void sequence_BindingConnectorDeclaration_DisjoiningPart_FeatureConjugationPart_FeatureDeclaration_FeaturePrefix_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypeFeaturingPart_TypedBy_Typings(ISerializationContext context, BindingConnector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChainFeatureMember returns Membership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? memberName=Name? ownedRelatedElement+=FeatureChain)
	 */
	protected void sequence_ChainFeatureMember_MemberPrefix(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NamespaceMember returns Membership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=PrefixDocumentation* 
	 *         visibility=VisibilityIndicator? 
	 *         (ownedRelatedElement+=NonFeatureElement | ownedRelatedElement+=FeatureElement | (memberName=Name? ownedRelatedElement+=FeatureChain))
	 *     )
	 */
	protected void sequence_ChainFeatureMember_MemberPrefix_NamespaceFeatureMember_NonFeatureMember(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureMember returns Membership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=PrefixDocumentation? 
	 *         visibility=VisibilityIndicator? 
	 *         ((memberName=Name? ownedRelatedElement+=FeatureChain) | ownedRelatedElement+=FeatureElement)
	 *     )
	 */
	protected void sequence_ChainFeatureMember_MemberPrefix_TypeFeatureMember(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns Class
	 *     Class returns Class
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         isSufficient?='all'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ownedRelationship+=OwnedMultiplicity? 
	 *         ((ownedRelationship+=Ownedsubclassification ownedRelationship+=Ownedsubclassification*) | ownedRelationship+=ClassifierConjugation)? 
	 *         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=NonFeatureMember | 
	 *             ownedRelationship+=FeatureMember | 
	 *             ownedRelationship+=AliasMember | 
	 *             ownedRelationship+=Import
	 *         )*
	 *     )
	 */
	protected void sequence_Class_ClassifierConjugationPart_ClassifierDeclaration_DisjoiningPart_Identification_SuperclassingPart_TypeBody(ISerializationContext context, org.omg.sysml.lang.sysml.Class semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns DataType
	 *     DataType returns DataType
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         isSufficient?='all'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ownedRelationship+=OwnedMultiplicity? 
	 *         ((ownedRelationship+=Ownedsubclassification ownedRelationship+=Ownedsubclassification*) | ownedRelationship+=ClassifierConjugation)? 
	 *         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=NonFeatureMember | 
	 *             ownedRelationship+=FeatureMember | 
	 *             ownedRelationship+=AliasMember | 
	 *             ownedRelationship+=Import
	 *         )*
	 *     )
	 */
	protected void sequence_ClassifierConjugationPart_ClassifierDeclaration_DataType_DisjoiningPart_Identification_SuperclassingPart_TypeBody(ISerializationContext context, DataType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns Predicate
	 *     Predicate returns Predicate
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         isSufficient?='all'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ownedRelationship+=OwnedMultiplicity? 
	 *         ((ownedRelationship+=Ownedsubclassification ownedRelationship+=Ownedsubclassification*) | ownedRelationship+=ClassifierConjugation)? 
	 *         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         (ownedRelationship+=ReturnParameterMember | ownedRelationship+=EmptyReturnParameterMember) 
	 *         ownedRelationship+=OwnedDocumentation? 
	 *         (
	 *             (ownedRelationship+=NonFeatureMember | ownedRelationship+=FeatureMember | ownedRelationship+=AliasMember | ownedRelationship+=Import)? 
	 *             ownedRelationship+=OwnedDocumentation?
	 *         )* 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ClassifierConjugationPart_ClassifierDeclaration_DisjoiningPart_EmptyReturnParameterPart_FunctionBody_Identification_ParameterList_Predicate_ReturnParameterPart_SuperclassingPart(ISerializationContext context, Predicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns Function
	 *     Function returns Function
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         isSufficient?='all'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ownedRelationship+=OwnedMultiplicity? 
	 *         ((ownedRelationship+=Ownedsubclassification ownedRelationship+=Ownedsubclassification*) | ownedRelationship+=ClassifierConjugation)? 
	 *         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         (ownedRelationship+=ReturnParameterMember | ownedRelationship+=EmptyReturnParameterMember) 
	 *         ownedRelationship+=OwnedDocumentation? 
	 *         (
	 *             (ownedRelationship+=NonFeatureMember | ownedRelationship+=FeatureMember | ownedRelationship+=AliasMember | ownedRelationship+=Import)? 
	 *             ownedRelationship+=OwnedDocumentation?
	 *         )* 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_ClassifierConjugationPart_ClassifierDeclaration_DisjoiningPart_EmptyReturnParameterPart_Function_FunctionBody_Identification_ParameterList_ReturnParameterPart_SuperclassingPart(ISerializationContext context, Function semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns Interaction
	 *     Interaction returns Interaction
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         isSufficient?='all'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ownedRelationship+=OwnedMultiplicity? 
	 *         ((ownedRelationship+=Ownedsubclassification ownedRelationship+=Ownedsubclassification*) | ownedRelationship+=ClassifierConjugation)? 
	 *         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *         (ownedRelationship+=ParameterMember ownedRelationship+=ParameterMember*)? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=NonFeatureMember | 
	 *             ownedRelationship+=FeatureMember | 
	 *             ownedRelationship+=AliasMember | 
	 *             ownedRelationship+=Import
	 *         )*
	 *     )
	 */
	protected void sequence_ClassifierConjugationPart_ClassifierDeclaration_DisjoiningPart_Identification_Interaction_ParameterList_SuperclassingPart_TypeBody(ISerializationContext context, Interaction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns Structure
	 *     Structure returns Structure
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         isSufficient?='all'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ownedRelationship+=OwnedMultiplicity? 
	 *         ((ownedRelationship+=Ownedsubclassification ownedRelationship+=Ownedsubclassification*) | ownedRelationship+=ClassifierConjugation)? 
	 *         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=NonFeatureMember | 
	 *             ownedRelationship+=FeatureMember | 
	 *             ownedRelationship+=AliasMember | 
	 *             ownedRelationship+=Import
	 *         )*
	 *     )
	 */
	protected void sequence_ClassifierConjugationPart_ClassifierDeclaration_DisjoiningPart_Identification_Structure_SuperclassingPart_TypeBody(ISerializationContext context, Structure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ClassifierConjugation returns Conjugation
	 *
	 * Constraint:
	 *     originalType=[Classifier|QualifiedName]
	 */
	protected void sequence_ClassifierConjugation(ISerializationContext context, Conjugation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.CONJUGATION__ORIGINAL_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.CONJUGATION__ORIGINAL_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClassifierConjugationAccess().getOriginalTypeClassifierQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.CONJUGATION__ORIGINAL_TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns Classifier
	 *     Classifier returns Classifier
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         isSufficient?='all'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ownedRelationship+=OwnedMultiplicity? 
	 *         ((ownedRelationship+=Ownedsubclassification ownedRelationship+=Ownedsubclassification*) | ownedRelationship+=ClassifierConjugation)? 
	 *         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=NonFeatureMember | 
	 *             ownedRelationship+=FeatureMember | 
	 *             ownedRelationship+=AliasMember | 
	 *             ownedRelationship+=Import
	 *         )*
	 *     )
	 */
	protected void sequence_Classifier_ClassifierConjugationPart_ClassifierDeclaration_DisjoiningPart_Identification_SuperclassingPart_TypeBody(ISerializationContext context, Classifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comment returns Comment
	 *     NonFeatureElement returns Comment
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ((ownedRelationship+=Annotation ownedRelationship+=Annotation*) | ownedRelationship+=EmptyAnnotation) 
	 *         body=REGULAR_COMMENT
	 *     )
	 */
	protected void sequence_Comment_Identification(ISerializationContext context, Comment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns Type
	 *     Type returns Type
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         isSufficient?='all'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ownedRelationship+=OwnedMultiplicity? 
	 *         ((ownedRelationship+=OwnedSpecialization ownedRelationship+=OwnedSpecialization*) | ownedRelationship+=OwnedConjugation)+ 
	 *         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=NonFeatureMember | 
	 *             ownedRelationship+=FeatureMember | 
	 *             ownedRelationship+=AliasMember | 
	 *             ownedRelationship+=Import
	 *         )*
	 *     )
	 */
	protected void sequence_ConjugationPart_DisjoiningPart_Identification_SpecializationPart_Type_TypeBody_TypeDeclaration(ISerializationContext context, Type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns Conjugation
	 *     Conjugation returns Conjugation
	 *
	 * Constraint:
	 *     (((humanId=Name name=Name?) | name=Name)? conjugatedType=[Type|QualifiedName] originalType=[Type|QualifiedName])
	 */
	protected void sequence_Conjugation_Identification(ISerializationContext context, Conjugation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConnectorEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     (memberName=Name? ownedRelatedElement+=ConnectorEnd)
	 */
	protected void sequence_ConnectorEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConnectorEnd returns Feature
	 *
	 * Constraint:
	 *     (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedMultiplicity?)
	 */
	protected void sequence_ConnectorEnd(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureElement returns Invariant
	 *     Invariant returns Invariant
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         isAbstract?='abstract'? 
	 *         (isComposite?='composite' | isPortion?='portion')? 
	 *         isEnd?='end'? 
	 *         isNegated?='false'? 
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name)))? 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     ) | 
	 *                     (
	 *                         (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name))) 
	 *                         (
	 *                             (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                         )+ 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     )
	 *                 ) 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     )+ 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 )* 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                         (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *                     ) | 
	 *                     (
	 *                         (
	 *                             (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                         )+ 
	 *                         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                         (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *                     )
	 *                 )
	 *             ) | 
	 *             (
	 *                 (
	 *                     (isSufficient?='all' ownedRelationship+=FeatureConjugation?) | 
	 *                     (isSufficient?='all' ((humanId=Name name=Name?) | name=Name) ownedRelationship+=FeatureConjugation?)
	 *                 ) 
	 *                 (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                 (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *             ) | 
	 *             (
	 *                 (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name))) 
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                     (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                     (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                 )+ 
	 *                 (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                 (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *             )
	 *         )? 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (
	 *                 (ownedRelationship+=StepParameterMember ownedRelationship+=StepParameterMember*)? 
	 *                 (ownedRelationship+=ReturnParameterMember | ownedRelationship+=EmptyReturnParameterMember)
	 *             )
	 *         )? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=NonFeatureMember | 
	 *             ownedRelationship+=FeatureMember | 
	 *             ownedRelationship+=AliasMember | 
	 *             ownedRelationship+=Import
	 *         )* 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_DisjoiningPart_EmptyReturnParameterPart_FeatureConjugationPart_FeatureDeclaration_FeaturePrefix_FunctionBody_Identification_Invariant_MultiplicityPart_Redefines_Redefinitions_ReturnParameterPart_StepParameterList_Subsets_Subsettings_TypeFeaturingPart_TypedBy_Typings_ValuePart(ISerializationContext context, Invariant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureElement returns BooleanExpression
	 *     BooleanExpression returns BooleanExpression
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         isAbstract?='abstract'? 
	 *         (isComposite?='composite' | isPortion?='portion')? 
	 *         isEnd?='end'? 
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name)))? 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     ) | 
	 *                     (
	 *                         (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name))) 
	 *                         (
	 *                             (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                         )+ 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     )
	 *                 ) 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     )+ 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 )* 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                         (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *                     ) | 
	 *                     (
	 *                         (
	 *                             (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                         )+ 
	 *                         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                         (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *                     )
	 *                 )
	 *             ) | 
	 *             (
	 *                 (
	 *                     (isSufficient?='all' ownedRelationship+=FeatureConjugation?) | 
	 *                     (isSufficient?='all' ((humanId=Name name=Name?) | name=Name) ownedRelationship+=FeatureConjugation?)
	 *                 ) 
	 *                 (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                 (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *             ) | 
	 *             (
	 *                 (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name))) 
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                     (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                     (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                 )+ 
	 *                 (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                 (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *             )
	 *         )? 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (
	 *                 (ownedRelationship+=StepParameterMember ownedRelationship+=StepParameterMember*)? 
	 *                 (ownedRelationship+=ReturnParameterMember | ownedRelationship+=EmptyReturnParameterMember)
	 *             )
	 *         )? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=NonFeatureMember | 
	 *             ownedRelationship+=FeatureMember | 
	 *             ownedRelationship+=AliasMember | 
	 *             ownedRelationship+=Import
	 *         )* 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_DisjoiningPart_EmptyReturnParameterPart_FeatureConjugationPart_FeatureDeclaration_FeaturePrefix_FunctionBody_Identification_MultiplicityPart_Redefines_Redefinitions_ReturnParameterPart_StepParameterList_Subsets_Subsettings_TypeFeaturingPart_TypedBy_Typings_ValuePart(ISerializationContext context, BooleanExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureElement returns Expression
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         isAbstract?='abstract'? 
	 *         (isComposite?='composite' | isPortion?='portion')? 
	 *         isEnd?='end'? 
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name)))? 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     ) | 
	 *                     (
	 *                         (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name))) 
	 *                         (
	 *                             (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                         )+ 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     )
	 *                 ) 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     )+ 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 )* 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                         (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *                     ) | 
	 *                     (
	 *                         (
	 *                             (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                         )+ 
	 *                         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                         (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *                     )
	 *                 )
	 *             ) | 
	 *             (
	 *                 (
	 *                     (isSufficient?='all' ownedRelationship+=FeatureConjugation?) | 
	 *                     (isSufficient?='all' ((humanId=Name name=Name?) | name=Name) ownedRelationship+=FeatureConjugation?)
	 *                 ) 
	 *                 (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                 (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *             ) | 
	 *             (
	 *                 (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name))) 
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                     (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                     (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                 )+ 
	 *                 (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                 (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *             )
	 *         )? 
	 *         (
	 *             ownedRelationship+=FeatureValue | 
	 *             (
	 *                 (ownedRelationship+=StepParameterMember ownedRelationship+=StepParameterMember*)? 
	 *                 (ownedRelationship+=ReturnParameterMember | ownedRelationship+=EmptyReturnParameterMember)
	 *             )
	 *         )? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=NonFeatureMember | 
	 *             ownedRelationship+=FeatureMember | 
	 *             ownedRelationship+=AliasMember | 
	 *             ownedRelationship+=Import
	 *         )* 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_DisjoiningPart_EmptyReturnParameterPart_FeatureConjugationPart_FeatureDeclaration_FeaturePrefix_FunctionBody_Identification_MultiplicityPart_Redefines_Redefinitions_ReturnParameterPart_StepParameterList_Subsets_Subsettings_TypeFeaturingPart_TypedBy_Typings_ValuePart(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureElement returns ItemFlow
	 *     ItemFlow returns ItemFlow
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         isAbstract?='abstract'? 
	 *         (isComposite?='composite' | isPortion?='portion')? 
	 *         isEnd?='end'? 
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name)))? 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     ) | 
	 *                     (
	 *                         (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name))) 
	 *                         (
	 *                             (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                         )+ 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     )
	 *                 ) 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     )+ 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 )* 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                         (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)? 
	 *                         (ownedRelationship+=ItemFeatureMember | ownedRelationship+=EmptyItemFeatureMember)
	 *                     ) | 
	 *                     (
	 *                         (
	 *                             (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                         )+ 
	 *                         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                         (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)? 
	 *                         (ownedRelationship+=ItemFeatureMember | ownedRelationship+=EmptyItemFeatureMember)
	 *                     )
	 *                 )
	 *             ) | 
	 *             (
	 *                 (
	 *                     (isSufficient?='all' ownedRelationship+=FeatureConjugation?) | 
	 *                     (isSufficient?='all' ((humanId=Name name=Name?) | name=Name) ownedRelationship+=FeatureConjugation?)
	 *                 ) 
	 *                 (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                 (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)? 
	 *                 (ownedRelationship+=ItemFeatureMember | ownedRelationship+=EmptyItemFeatureMember)
	 *             ) | 
	 *             (
	 *                 (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name))) 
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                     (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                     (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                 )+ 
	 *                 (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                 (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)? 
	 *                 (ownedRelationship+=ItemFeatureMember | ownedRelationship+=EmptyItemFeatureMember)
	 *             ) | 
	 *             ownedRelationship+=ItemFeatureMember | 
	 *             ownedRelationship+=EmptyItemFeatureMember | 
	 *             (isSufficient?='all'? ownedRelationship+=EmptyItemFeatureMember)
	 *         ) 
	 *         ownedRelationship+=ItemFlowEndMember 
	 *         ownedRelationship+=ItemFlowEndMember 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=NonFeatureMember | 
	 *             ownedRelationship+=FeatureMember | 
	 *             ownedRelationship+=AliasMember | 
	 *             ownedRelationship+=Import
	 *         )*
	 *     )
	 */
	protected void sequence_DisjoiningPart_FeatureConjugationPart_FeatureDeclaration_FeaturePrefix_Identification_ItemFlowDeclaration_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypeFeaturingPart_TypedBy_Typings(ISerializationContext context, ItemFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureElement returns SuccessionItemFlow
	 *     SuccessionItemFlow returns SuccessionItemFlow
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         isAbstract?='abstract'? 
	 *         (isComposite?='composite' | isPortion?='portion')? 
	 *         isEnd?='end'? 
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name)))? 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     ) | 
	 *                     (
	 *                         (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name))) 
	 *                         (
	 *                             (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                         )+ 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     )
	 *                 ) 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     )+ 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 )* 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                         (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)? 
	 *                         (ownedRelationship+=ItemFeatureMember | ownedRelationship+=EmptyItemFeatureMember)
	 *                     ) | 
	 *                     (
	 *                         (
	 *                             (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                         )+ 
	 *                         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                         (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)? 
	 *                         (ownedRelationship+=ItemFeatureMember | ownedRelationship+=EmptyItemFeatureMember)
	 *                     )
	 *                 )
	 *             ) | 
	 *             (
	 *                 (
	 *                     (isSufficient?='all' ownedRelationship+=FeatureConjugation?) | 
	 *                     (isSufficient?='all' ((humanId=Name name=Name?) | name=Name) ownedRelationship+=FeatureConjugation?)
	 *                 ) 
	 *                 (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                 (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)? 
	 *                 (ownedRelationship+=ItemFeatureMember | ownedRelationship+=EmptyItemFeatureMember)
	 *             ) | 
	 *             (
	 *                 (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name))) 
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                     (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                     (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                 )+ 
	 *                 (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                 (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)? 
	 *                 (ownedRelationship+=ItemFeatureMember | ownedRelationship+=EmptyItemFeatureMember)
	 *             ) | 
	 *             ownedRelationship+=ItemFeatureMember | 
	 *             ownedRelationship+=EmptyItemFeatureMember | 
	 *             (isSufficient?='all'? ownedRelationship+=EmptyItemFeatureMember)
	 *         ) 
	 *         ownedRelationship+=ItemFlowEndMember 
	 *         ownedRelationship+=ItemFlowEndMember 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=NonFeatureMember | 
	 *             ownedRelationship+=FeatureMember | 
	 *             ownedRelationship+=AliasMember | 
	 *             ownedRelationship+=Import
	 *         )*
	 *     )
	 */
	protected void sequence_DisjoiningPart_FeatureConjugationPart_FeatureDeclaration_FeaturePrefix_Identification_ItemFlowDeclaration_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypeFeaturingPart_TypedBy_Typings(ISerializationContext context, SuccessionItemFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureElement returns Step
	 *     Step returns Step
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         isAbstract?='abstract'? 
	 *         (isComposite?='composite' | isPortion?='portion')? 
	 *         isEnd?='end'? 
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name)))? 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     ) | 
	 *                     (
	 *                         (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name))) 
	 *                         (
	 *                             (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                         )+ 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     )
	 *                 ) 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     )+ 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 )* 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                         (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *                     ) | 
	 *                     (
	 *                         (
	 *                             (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                         )+ 
	 *                         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                         (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *                     )
	 *                 )
	 *             ) | 
	 *             (
	 *                 (
	 *                     (isSufficient?='all' ownedRelationship+=FeatureConjugation?) | 
	 *                     (isSufficient?='all' ((humanId=Name name=Name?) | name=Name) ownedRelationship+=FeatureConjugation?)
	 *                 ) 
	 *                 (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                 (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *             ) | 
	 *             (
	 *                 (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name))) 
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                     (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                     (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                 )+ 
	 *                 (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                 (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *             )
	 *         )? 
	 *         (ownedRelationship+=FeatureValue | (ownedRelationship+=StepParameterMember ownedRelationship+=StepParameterMember*))? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=NonFeatureMember | 
	 *             ownedRelationship+=FeatureMember | 
	 *             ownedRelationship+=AliasMember | 
	 *             ownedRelationship+=Import
	 *         )*
	 *     )
	 */
	protected void sequence_DisjoiningPart_FeatureConjugationPart_FeatureDeclaration_FeaturePrefix_Identification_MultiplicityPart_Redefines_Redefinitions_StepParameterList_Subsets_Subsettings_TypeBody_TypeFeaturingPart_TypedBy_Typings_ValuePart(ISerializationContext context, Step semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureElement returns Succession
	 *     Succession returns Succession
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         isAbstract?='abstract'? 
	 *         (isComposite?='composite' | isPortion?='portion')? 
	 *         isEnd?='end'? 
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name)))? 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     ) | 
	 *                     (
	 *                         (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name))) 
	 *                         (
	 *                             (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                         )+ 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     )
	 *                 ) 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     )+ 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 )* 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                         (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *                     ) | 
	 *                     (
	 *                         (
	 *                             (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                         )+ 
	 *                         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                         (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *                     )
	 *                 )
	 *             ) | 
	 *             (
	 *                 (
	 *                     (isSufficient?='all' ownedRelationship+=FeatureConjugation?) | 
	 *                     (isSufficient?='all' ((humanId=Name name=Name?) | name=Name) ownedRelationship+=FeatureConjugation?)
	 *                 ) 
	 *                 (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                 (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *             ) | 
	 *             (
	 *                 (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name))) 
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                     (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                     (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                 )+ 
	 *                 (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                 (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *             ) | 
	 *             isSufficient?='all'
	 *         )? 
	 *         ownedRelationship+=ConnectorEndMember 
	 *         ownedRelationship+=ConnectorEndMember 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=NonFeatureMember | 
	 *             ownedRelationship+=FeatureMember | 
	 *             ownedRelationship+=AliasMember | 
	 *             ownedRelationship+=Import
	 *         )*
	 *     )
	 */
	protected void sequence_DisjoiningPart_FeatureConjugationPart_FeatureDeclaration_FeaturePrefix_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_SuccessionDeclaration_TypeBody_TypeFeaturingPart_TypedBy_Typings(ISerializationContext context, Succession semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureElement returns Feature
	 *     Feature returns Feature
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         isAbstract?='abstract'? 
	 *         (isComposite?='composite' | isPortion?='portion')? 
	 *         isEnd?='end'? 
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name)))? 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     ) | 
	 *                     (
	 *                         (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name))) 
	 *                         (
	 *                             (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                         )+ 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     )
	 *                 ) 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                         (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                         (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                     )+ 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 )* 
	 *                 (
	 *                     (
	 *                         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                         (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *                     ) | 
	 *                     (
	 *                         (
	 *                             (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                             (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                             (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                         )+ 
	 *                         (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                         (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *                     )
	 *                 )
	 *             ) | 
	 *             (
	 *                 (
	 *                     (isSufficient?='all' ownedRelationship+=FeatureConjugation?) | 
	 *                     (isSufficient?='all' ((humanId=Name name=Name?) | name=Name) ownedRelationship+=FeatureConjugation?)
	 *                 ) 
	 *                 (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                 (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *             ) | 
	 *             (
	 *                 (isSufficient?='all' | (isSufficient?='all' ((humanId=Name name=Name?) | name=Name))) 
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedFeatureTyping*) | 
	 *                     (ownedRelationship+=OwnedSubsetting ownedRelationship+=OwnedSubsetting*) | 
	 *                     (ownedRelationship+=OwnedRedefinition ownedRelationship+=OwnedRedefinition*)
	 *                 )+ 
	 *                 (ownedRelationship+=OwnedDisjoining ownedRelationship+=OwnedDisjoining*)? 
	 *                 (ownedRelationship+=OwnedTypeFeaturing ownedRelationship+=OwnedTypeFeaturing*)?
	 *             )
	 *         )? 
	 *         ownedRelationship+=FeatureValue? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=NonFeatureMember | 
	 *             ownedRelationship+=FeatureMember | 
	 *             ownedRelationship+=AliasMember | 
	 *             ownedRelationship+=Import
	 *         )*
	 *     )
	 */
	protected void sequence_DisjoiningPart_FeatureConjugationPart_FeatureDeclaration_FeaturePrefix_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypeFeaturingPart_TypedBy_Typings_ValuePart(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns Disjoining
	 *     Disjoining returns Disjoining
	 *
	 * Constraint:
	 *     (((humanId=Name name=Name?) | name=Name)? typeDisjoined=[Type|QualifiedName] disjoiningType=[Type|QualifiedName])
	 */
	protected void sequence_Disjoining_Identification(ISerializationContext context, Disjoining semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DocumentationComment returns Comment
	 *
	 * Constraint:
	 *     (humanId=Name? body=REGULAR_COMMENT)
	 */
	protected void sequence_DocumentationComment(ISerializationContext context, Comment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementFilterMember returns ElementFilterMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=OwnedExpression)
	 */
	protected void sequence_ElementFilterMember_MemberPrefix(ISerializationContext context, ElementFilterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyAnnotation returns Annotation
	 *
	 * Constraint:
	 *     {Annotation}
	 */
	protected void sequence_EmptyAnnotation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptyItemFeature
	 */
	protected void sequence_EmptyItemFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFeature returns ItemFeature
	 *
	 * Constraint:
	 *     {ItemFeature}
	 */
	protected void sequence_EmptyItemFeature(ISerializationContext context, ItemFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyReturnParameterMember returns ReturnParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptyParameter
	 */
	protected void sequence_EmptyReturnParameterMember(ISerializationContext context, ReturnParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureChainPrefix returns Feature
	 *
	 * Constraint:
	 *     (ownedRelationship+=OwnedFeatureChaining+ ownedRelationship+=OwnedFeatureChaining)
	 */
	protected void sequence_FeatureChainPrefix(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureChain returns Feature
	 *
	 * Constraint:
	 *     (ownedRelationship+=OwnedFeatureChaining ownedRelationship+=OwnedFeatureChaining+)
	 */
	protected void sequence_FeatureChain(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureConjugation returns Conjugation
	 *
	 * Constraint:
	 *     originalType=[Feature|QualifiedName]
	 */
	protected void sequence_FeatureConjugation(ISerializationContext context, Conjugation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.CONJUGATION__ORIGINAL_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.CONJUGATION__ORIGINAL_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFeatureConjugationAccess().getOriginalTypeFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.CONJUGATION__ORIGINAL_TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns FeatureTyping
	 *     FeatureTyping returns FeatureTyping
	 *
	 * Constraint:
	 *     (((humanId=Name name=Name?) | name=Name)? typedFeature=[Feature|QualifiedName] type=[Feature|QualifiedName])
	 */
	protected void sequence_FeatureTyping_Identification(ISerializationContext context, FeatureTyping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureValue returns FeatureValue
	 *
	 * Constraint:
	 *     (isDefault?='default'? ownedRelatedElement+=OwnedExpression)
	 */
	protected void sequence_FeatureValue(ISerializationContext context, FeatureValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FilterPackageMember returns ElementFilterMembership
	 *
	 * Constraint:
	 *     (visibility=FilterPackageMemberVisibility ownedRelatedElement+=OwnedExpression)
	 */
	protected void sequence_FilterPackageMember(ISerializationContext context, ElementFilterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FilterPackage returns Package
	 *
	 * Constraint:
	 *     (ownedRelationship+=FilterPackageImport ownedRelationship+=FilterPackageMember+)
	 */
	protected void sequence_FilterPackage(ISerializationContext context, org.omg.sysml.lang.sysml.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpressionBody returns Expression
	 *     OwnedExpression returns Expression
	 *     ConditionalExpression returns Expression
	 *     ConditionalExpression.OperatorExpression_0_1_0 returns Expression
	 *     NullCoalescingExpression returns Expression
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns Expression
	 *     ImpliesExpression returns Expression
	 *     ImpliesExpression.OperatorExpression_1_0 returns Expression
	 *     OrExpression returns Expression
	 *     OrExpression.OperatorExpression_1_0 returns Expression
	 *     XorExpression returns Expression
	 *     XorExpression.OperatorExpression_1_0 returns Expression
	 *     AndExpression returns Expression
	 *     AndExpression.OperatorExpression_1_0 returns Expression
	 *     EqualityExpression returns Expression
	 *     EqualityExpression.OperatorExpression_1_0 returns Expression
	 *     ClassificationExpression returns Expression
	 *     ClassificationExpression.OperatorExpression_0_1_0 returns Expression
	 *     RelationalExpression returns Expression
	 *     RelationalExpression.OperatorExpression_1_0 returns Expression
	 *     RangeExpression returns Expression
	 *     RangeExpression.OperatorExpression_1_0 returns Expression
	 *     AdditiveExpression returns Expression
	 *     AdditiveExpression.OperatorExpression_1_0 returns Expression
	 *     MultiplicativeExpression returns Expression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns Expression
	 *     ExponentiationExpression returns Expression
	 *     ExponentiationExpression.OperatorExpression_1_0 returns Expression
	 *     UnaryExpression returns Expression
	 *     ExtentExpression returns Expression
	 *     PrimaryExpression returns Expression
	 *     PrimaryExpression.OperatorExpression_1_0_0 returns Expression
	 *     PrimaryExpression.OperatorExpression_1_1_0 returns Expression
	 *     PrimaryExpression.PathStepExpression_1_2_0 returns Expression
	 *     PrimaryExpression.PathSelectExpression_1_3_0 returns Expression
	 *     BaseExpression returns Expression
	 *     SequenceExpression returns Expression
	 *     SequenceExpression.OperatorExpression_1_1_0 returns Expression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=NonFeatureMember | 
	 *             ownedRelationship+=FeatureMember | 
	 *             ownedRelationship+=AliasMember | 
	 *             ownedRelationship+=Import
	 *         )* 
	 *         ownedRelationship+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_FunctionBody(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns MultiplicityRange
	 *     Multiplicity returns MultiplicityRange
	 *     MultiplicityRange returns MultiplicityRange
	 *
	 * Constraint:
	 *     (((humanId=Name name=Name?) | name=Name)? ownedRelationship+=MultiplicityExpressionMember ownedRelationship+=MultiplicityExpressionMember?)
	 */
	protected void sequence_Identification_MultiplicityBounds(ISerializationContext context, MultiplicityRange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns BooleanExpression
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         isSufficient?='all'? 
	 *         (
	 *             (
	 *                 ((humanId=Name name=Name?) | name=Name) 
	 *                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *             ) | 
	 *             (
	 *                 (
	 *                     (
	 *                         (
	 *                             (
	 *                                 ((humanId=Name name=Name?) | name=Name) 
	 *                                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *                             ) | 
	 *                             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *                         ) 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     ) | 
	 *                     ownedRelationship+=OwnedMultiplicity | 
	 *                     (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                 ) 
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+ 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 )* 
	 *                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *             ) | 
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy(ISerializationContext context, BooleanExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Expression
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         isSufficient?='all'? 
	 *         (
	 *             (
	 *                 ((humanId=Name name=Name?) | name=Name) 
	 *                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *             ) | 
	 *             (
	 *                 (
	 *                     (
	 *                         (
	 *                             (
	 *                                 ((humanId=Name name=Name?) | name=Name) 
	 *                                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *                             ) | 
	 *                             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *                         ) 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     ) | 
	 *                     ownedRelationship+=OwnedMultiplicity | 
	 *                     (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                 ) 
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+ 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 )* 
	 *                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *             ) | 
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Feature
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         isSufficient?='all'? 
	 *         (
	 *             (
	 *                 ((humanId=Name name=Name?) | name=Name) 
	 *                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *             ) | 
	 *             (
	 *                 (
	 *                     (
	 *                         (
	 *                             (
	 *                                 ((humanId=Name name=Name?) | name=Name) 
	 *                                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *                             ) | 
	 *                             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *                         ) 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     ) | 
	 *                     ownedRelationship+=OwnedMultiplicity | 
	 *                     (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                 ) 
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+ 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 )* 
	 *                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *             ) | 
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Step
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         isSufficient?='all'? 
	 *         (
	 *             (
	 *                 ((humanId=Name name=Name?) | name=Name) 
	 *                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *             ) | 
	 *             (
	 *                 (
	 *                     (
	 *                         (
	 *                             (
	 *                                 ((humanId=Name name=Name?) | name=Name) 
	 *                                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *                             ) | 
	 *                             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *                         ) 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     ) | 
	 *                     ownedRelationship+=OwnedMultiplicity | 
	 *                     (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                 ) 
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+ 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 )* 
	 *                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *             ) | 
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy(ISerializationContext context, Step semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StepParameter returns BooleanExpression
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         isSufficient?='all'? 
	 *         (
	 *             (
	 *                 ((humanId=Name name=Name?) | name=Name) 
	 *                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *             ) | 
	 *             (
	 *                 (
	 *                     (
	 *                         (
	 *                             (
	 *                                 ((humanId=Name name=Name?) | name=Name) 
	 *                                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *                             ) | 
	 *                             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *                         ) 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     ) | 
	 *                     ownedRelationship+=OwnedMultiplicity | 
	 *                     (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                 ) 
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+ 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 )* 
	 *                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *             ) | 
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *         )? 
	 *         ownedRelationship+=FeatureValue?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy_ValuePart(ISerializationContext context, BooleanExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StepParameter returns Expression
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         isSufficient?='all'? 
	 *         (
	 *             (
	 *                 ((humanId=Name name=Name?) | name=Name) 
	 *                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *             ) | 
	 *             (
	 *                 (
	 *                     (
	 *                         (
	 *                             (
	 *                                 ((humanId=Name name=Name?) | name=Name) 
	 *                                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *                             ) | 
	 *                             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *                         ) 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     ) | 
	 *                     ownedRelationship+=OwnedMultiplicity | 
	 *                     (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                 ) 
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+ 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 )* 
	 *                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *             ) | 
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *         )? 
	 *         ownedRelationship+=FeatureValue?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy_ValuePart(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StepParameter returns Feature
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         isSufficient?='all'? 
	 *         (
	 *             (
	 *                 ((humanId=Name name=Name?) | name=Name) 
	 *                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *             ) | 
	 *             (
	 *                 (
	 *                     (
	 *                         (
	 *                             (
	 *                                 ((humanId=Name name=Name?) | name=Name) 
	 *                                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *                             ) | 
	 *                             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *                         ) 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     ) | 
	 *                     ownedRelationship+=OwnedMultiplicity | 
	 *                     (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                 ) 
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+ 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 )* 
	 *                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *             ) | 
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *         )? 
	 *         ownedRelationship+=FeatureValue?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy_ValuePart(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StepParameter returns Step
	 *
	 * Constraint:
	 *     (
	 *         direction=FeatureDirection? 
	 *         isSufficient?='all'? 
	 *         (
	 *             (
	 *                 ((humanId=Name name=Name?) | name=Name) 
	 *                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *             ) | 
	 *             (
	 *                 (
	 *                     (
	 *                         (
	 *                             (
	 *                                 ((humanId=Name name=Name?) | name=Name) 
	 *                                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *                             ) | 
	 *                             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *                         ) 
	 *                         (
	 *                             ownedRelationship+=OwnedMultiplicity | 
	 *                             (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                         )
	 *                     ) | 
	 *                     ownedRelationship+=OwnedMultiplicity | 
	 *                     (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                 ) 
	 *                 (
	 *                     (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+ 
	 *                     (
	 *                         ownedRelationship+=OwnedMultiplicity | 
	 *                         (ownedRelationship+=OwnedMultiplicity? ((isOrdered?='ordered' isNonunique?='nonunique'?) | (isNonunique?='nonunique' isOrdered?='ordered'?)))
	 *                     )
	 *                 )* 
	 *                 (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *             ) | 
	 *             (ownedRelationship+=OwnedFeatureTyping | ownedRelationship+=OwnedSubsetting | ownedRelationship+=OwnedRedefinition)+
	 *         )? 
	 *         ownedRelationship+=FeatureValue?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy_ValuePart(ISerializationContext context, Step semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Namespace returns Namespace
	 *     NonFeatureElement returns Namespace
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=OwnedDocumentation | ownedRelationship+=NamespaceMember | ownedRelationship+=AliasMember | ownedRelationship+=Import)*
	 *     )
	 */
	protected void sequence_Identification_NamespaceBody(ISerializationContext context, Namespace semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Element
	 *     NonFeatureElement returns Element
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedRelationship | 
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=OwnedTextualRepresentationAnnotation | 
	 *             ownedRelationship+=OwnedAnnotatingFeatureAnnotation
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_OwnedElement(ISerializationContext context, Element semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns Package
	 *     Package returns Package
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=NamespaceMember | 
	 *             ownedRelationship+=ElementFilterMember | 
	 *             ownedRelationship+=AliasMember | 
	 *             ownedRelationship+=Import
	 *         )*
	 *     )
	 */
	protected void sequence_Identification_PackageBody(ISerializationContext context, org.omg.sysml.lang.sysml.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns Redefinition
	 *     Redefinition returns Redefinition
	 *
	 * Constraint:
	 *     (((humanId=Name name=Name?) | name=Name)? redefiningFeature=[Feature|QualifiedName] redefinedFeature=[Feature|QualifiedName])
	 */
	protected void sequence_Identification_Redefinition(ISerializationContext context, Redefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relationship returns Relationship
	 *     NonFeatureElement returns Relationship
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ((source+=[Element|QualifiedName]+ target+=[Element|QualifiedName]+) | target+=[Element|QualifiedName]+)? 
	 *         (ownedRelatedElement+=OwnedRelatedElement | ownedRelationship+=OwnedDocumentation | ownedRelationship+=OwnedTextualRepresentationAnnotation)*
	 *     )
	 */
	protected void sequence_Identification_RelationshipOwnedElement_RelationshipSource_RelationshipTarget(ISerializationContext context, Relationship semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedRelationship returns Relationship
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         target+=[Element|QualifiedName]+ 
	 *         (ownedRelatedElement+=OwnedRelatedElement | ownedRelationship+=OwnedDocumentation | ownedRelationship+=OwnedTextualRepresentationAnnotation)*
	 *     )
	 */
	protected void sequence_Identification_RelationshipOwnedElement_RelationshipTarget(ISerializationContext context, Relationship semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns Specialization
	 *     Specialization returns Specialization
	 *
	 * Constraint:
	 *     (((humanId=Name name=Name?) | name=Name)? specific=[Type|QualifiedName] general=[Type|QualifiedName])
	 */
	protected void sequence_Identification_Specialization(ISerializationContext context, Specialization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns Subclassification
	 *     Subclassification returns Subclassification
	 *
	 * Constraint:
	 *     (((humanId=Name name=Name?) | name=Name)? subclassifier=[Classifier|QualifiedName] superclassifier=[Classifier|QualifiedName])
	 */
	protected void sequence_Identification_Subclassification(ISerializationContext context, Subclassification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns Multiplicity
	 *     Multiplicity returns Multiplicity
	 *     MultiplicitySubset returns Multiplicity
	 *
	 * Constraint:
	 *     (((humanId=Name name=Name?) | name=Name)? ownedRelationship+=OwnedSubsetting)
	 */
	protected void sequence_Identification_Subsets(ISerializationContext context, Multiplicity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns Subsetting
	 *     Subsetting returns Subsetting
	 *
	 * Constraint:
	 *     (((humanId=Name name=Name?) | name=Name)? subsettingFeature=[Feature|QualifiedName] subsettedFeature=[Feature|QualifiedName])
	 */
	protected void sequence_Identification_Subsetting(ISerializationContext context, Subsetting semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TextualRepresentation returns TextualRepresentation
	 *     NonFeatureElement returns TextualRepresentation
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (ownedRelationship+=Annotation | ownedRelationship+=EmptyAnnotation) 
	 *         language=STRING_VALUE 
	 *         body=REGULAR_COMMENT
	 *     )
	 */
	protected void sequence_Identification_TextualRepresentation(ISerializationContext context, TextualRepresentation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureElement returns TypeFeaturing
	 *     TypeFeaturing returns TypeFeaturing
	 *
	 * Constraint:
	 *     (((humanId=Name name=Name?) | name=Name)? featureOfType=[Feature|QualifiedName] featuringType=[Feature|QualifiedName])
	 */
	protected void sequence_Identification_TypeFeaturing(ISerializationContext context, TypeFeaturing semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=PrefixDocumentation* 
	 *         visibility=VisibilityIndicator? 
	 *         isImportAll?='all'? 
	 *         ((importedNamespace=[Namespace|Qualification]? importedMemberName=Name? isRecursive?='**'?) | ownedRelatedElement+=FilterPackage)?
	 *     )
	 */
	protected void sequence_Import_ImportedFilterPackage_ImportedNamespace(ISerializationContext context, Import semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FilterPackageImport returns Import
	 *
	 * Constraint:
	 *     (importedNamespace=[Namespace|Qualification]? importedMemberName=Name? isRecursive?='**'?)
	 */
	protected void sequence_ImportedNamespace(ISerializationContext context, Import semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (memberName=Name? ownedRelatedElement+=ItemFeature)
	 */
	protected void sequence_ItemFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFeature returns ItemFeature
	 *
	 * Constraint:
	 *     (
	 *         (ownedRelationship+=OwnedFeatureTyping ownedRelationship+=OwnedMultiplicity?) | 
	 *         (ownedRelationship+=OwnedMultiplicity ownedRelationship+=OwnedFeatureTyping?)
	 *     )
	 */
	protected void sequence_ItemFeature(ISerializationContext context, ItemFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=ItemFlowEnd
	 */
	protected void sequence_ItemFlowEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowEndSubsetting returns Subsetting
	 *
	 * Constraint:
	 *     (subsettedFeature=[Feature|QualifiedName] | ownedRelatedElement+=FeatureChainPrefix)
	 */
	protected void sequence_ItemFlowEndSubsetting(ISerializationContext context, Subsetting semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowEnd returns ItemFlowEnd
	 *
	 * Constraint:
	 *     (ownedRelationship+=ItemFlowEndSubsetting? ownedRelationship+=ItemFlowFeatureMember)
	 */
	protected void sequence_ItemFlowEnd(ISerializationContext context, ItemFlowEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=ItemFlowFeature
	 */
	protected void sequence_ItemFlowFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowFeature returns ItemFlowFeature
	 *
	 * Constraint:
	 *     ownedRelationship+=ItemFlowRedefinition
	 */
	protected void sequence_ItemFlowFeature(ISerializationContext context, ItemFlowFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowRedefinition returns Redefinition
	 *
	 * Constraint:
	 *     redefinedFeature=[Feature|QualifiedName]
	 */
	protected void sequence_ItemFlowRedefinition(ISerializationContext context, Redefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getItemFlowRedefinitionAccess().getRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NamespaceFeatureMember returns Membership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=FeatureElement)
	 */
	protected void sequence_MemberPrefix_NamespaceFeatureMember(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureMember returns Membership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=NonFeatureElement)
	 */
	protected void sequence_MemberPrefix_NonFeatureMember(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=FeatureElement)
	 */
	protected void sequence_MemberPrefix_OwnedFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=PrefixDocumentation* 
	 *         visibility=VisibilityIndicator? 
	 *         (ownedRelatedElement+=FeatureElement | (memberName=Name? memberFeature=[Feature|QualifiedName]))
	 *     )
	 */
	protected void sequence_MemberPrefix_OwnedFeatureMember_UnownedFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ResultExpressionMember returns ResultExpressionMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=OwnedExpression)
	 */
	protected void sequence_MemberPrefix_ResultExpressionMember(ISerializationContext context, ResultExpressionMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeFeatureMember returns Membership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? ownedRelatedElement+=FeatureElement)
	 */
	protected void sequence_MemberPrefix_TypeFeatureMember(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnownedFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (ownedRelationship+=PrefixDocumentation* visibility=VisibilityIndicator? memberName=Name? memberFeature=[Feature|QualifiedName])
	 */
	protected void sequence_MemberPrefix_UnownedFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MetadataFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=MetadataFeature
	 */
	protected void sequence_MetadataFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MetadataFeatureValue returns MetadataFeatureValue
	 *
	 * Constraint:
	 *     ownedRelatedElement+=OwnedExpression
	 */
	protected void sequence_MetadataFeatureValue(ISerializationContext context, MetadataFeatureValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MetadataFeature returns MetadataFeature
	 *
	 * Constraint:
	 *     (ownedRelationship+=OwnedRedefinition ownedRelationship+=MetadataFeatureValue)
	 */
	protected void sequence_MetadataFeature(ISerializationContext context, MetadataFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MetadataTyping returns FeatureTyping
	 *
	 * Constraint:
	 *     type=[DataType|QualifiedName]
	 */
	protected void sequence_MetadataTyping(ISerializationContext context, FeatureTyping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMetadataTypingAccess().getTypeDataTypeQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.FEATURE_TYPING__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedMultiplicityRange returns MultiplicityRange
	 *
	 * Constraint:
	 *     (ownedRelationship+=MultiplicityExpressionMember ownedRelationship+=MultiplicityExpressionMember?)
	 */
	protected void sequence_MultiplicityBounds(ISerializationContext context, MultiplicityRange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultiplicityExpressionMember returns Membership
	 *
	 * Constraint:
	 *     (ownedRelatedElement+=LiteralExpression | ownedRelatedElement+=FeatureReferenceExpression)
	 */
	protected void sequence_MultiplicityExpressionMember(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RootNamespace returns Namespace
	 *
	 * Constraint:
	 *     (ownedRelationship+=OwnedDocumentation | ownedRelationship+=NamespaceMember | ownedRelationship+=AliasMember | ownedRelationship+=Import)*
	 */
	protected void sequence_NamespaceBodyElement_RootNamespace(ISerializationContext context, Namespace semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedAnnotatingFeatureAnnotation returns Annotation
	 *
	 * Constraint:
	 *     ownedRelatedElement+=OwnedAnnotatingFeature
	 */
	protected void sequence_OwnedAnnotatingFeatureAnnotation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedConjugation returns Conjugation
	 *
	 * Constraint:
	 *     originalType=[Type|QualifiedName]
	 */
	protected void sequence_OwnedConjugation(ISerializationContext context, Conjugation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.CONJUGATION__ORIGINAL_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.CONJUGATION__ORIGINAL_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedConjugationAccess().getOriginalTypeTypeQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.CONJUGATION__ORIGINAL_TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedDisjoining returns Disjoining
	 *
	 * Constraint:
	 *     disjoiningType=[Type|QualifiedName]
	 */
	protected void sequence_OwnedDisjoining(ISerializationContext context, Disjoining semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.DISJOINING__DISJOINING_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.DISJOINING__DISJOINING_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedDisjoiningAccess().getDisjoiningTypeTypeQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.DISJOINING__DISJOINING_TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedDocumentation returns Documentation
	 *
	 * Constraint:
	 *     ownedRelatedElement+=DocumentationComment
	 */
	protected void sequence_OwnedDocumentation(ISerializationContext context, Documentation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedRelatedElement returns Element
	 *
	 * Constraint:
	 *     (
	 *         humanId=Name? 
	 *         (
	 *             ownedRelationship+=OwnedRelationship | 
	 *             ownedRelationship+=OwnedDocumentation | 
	 *             ownedRelationship+=OwnedTextualRepresentationAnnotation | 
	 *             ownedRelationship+=OwnedAnnotatingFeatureAnnotation
	 *         )*
	 *     )
	 */
	protected void sequence_OwnedElement_OwnedRelatedElement(ISerializationContext context, Element semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedFeatureChaining returns FeatureChaining
	 *
	 * Constraint:
	 *     chainingFeature=[Feature|QualifiedName]
	 */
	protected void sequence_OwnedFeatureChaining(ISerializationContext context, FeatureChaining semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_CHAINING__CHAINING_FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_CHAINING__CHAINING_FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedFeatureChainingAccess().getChainingFeatureFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.FEATURE_CHAINING__CHAINING_FEATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedFeatureTyping returns FeatureTyping
	 *
	 * Constraint:
	 *     type=[Type|QualifiedName]
	 */
	protected void sequence_OwnedFeatureTyping(ISerializationContext context, FeatureTyping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedFeatureTypingAccess().getTypeTypeQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.FEATURE_TYPING__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedMultiplicity returns Membership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=OwnedMultiplicityRange
	 */
	protected void sequence_OwnedMultiplicity(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedRedefinition returns Redefinition
	 *
	 * Constraint:
	 *     (redefinedFeature=[Feature|QualifiedName] | ownedRelatedElement+=FeatureChain)
	 */
	protected void sequence_OwnedRedefinition(ISerializationContext context, Redefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedRelatedElement returns Relationship
	 *     OwnedRelatedRelationship returns Relationship
	 *
	 * Constraint:
	 *     (
	 *         humanId=Name? 
	 *         (ownedRelatedElement+=OwnedRelatedElement | ownedRelationship+=OwnedDocumentation | ownedRelationship+=OwnedTextualRepresentationAnnotation)*
	 *     )
	 */
	protected void sequence_OwnedRelatedRelationship_RelationshipOwnedElement(ISerializationContext context, Relationship semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedSpecialization returns Specialization
	 *
	 * Constraint:
	 *     general=[Type|QualifiedName]
	 */
	protected void sequence_OwnedSpecialization(ISerializationContext context, Specialization semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.SPECIALIZATION__GENERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.SPECIALIZATION__GENERAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedSpecializationAccess().getGeneralTypeQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.SPECIALIZATION__GENERAL, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedSubsetting returns Subsetting
	 *
	 * Constraint:
	 *     (subsettedFeature=[Feature|QualifiedName] | ownedRelatedElement+=FeatureChain)
	 */
	protected void sequence_OwnedSubsetting(ISerializationContext context, Subsetting semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedTextualRepresentationAnnotation returns Annotation
	 *
	 * Constraint:
	 *     ownedRelatedElement+=OwnedTextualRepresentation
	 */
	protected void sequence_OwnedTextualRepresentationAnnotation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedTextualRepresentation returns TextualRepresentation
	 *
	 * Constraint:
	 *     (humanId=Name? language=STRING_VALUE body=REGULAR_COMMENT ownedRelationship+=EmptyAnnotation)
	 */
	protected void sequence_OwnedTextualRepresentation(ISerializationContext context, TextualRepresentation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedTypeFeaturing returns TypeFeaturing
	 *
	 * Constraint:
	 *     featuringType=[Type|QualifiedName]
	 */
	protected void sequence_OwnedTypeFeaturing(ISerializationContext context, TypeFeaturing semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.TYPE_FEATURING__FEATURING_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.TYPE_FEATURING__FEATURING_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedTypeFeaturingAccess().getFeaturingTypeTypeQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.TYPE_FEATURING__FEATURING_TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Ownedsubclassification returns Subclassification
	 *
	 * Constraint:
	 *     superclassifier=[Classifier|QualifiedName]
	 */
	protected void sequence_Ownedsubclassification(ISerializationContext context, Subclassification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.SUBCLASSIFICATION__SUPERCLASSIFIER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.SUBCLASSIFICATION__SUPERCLASSIFIER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedsubclassificationAccess().getSuperclassifierClassifierQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.SUBCLASSIFICATION__SUPERCLASSIFIER, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=Parameter
	 */
	protected void sequence_ParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrefixDocumentationComment returns Comment
	 *
	 * Constraint:
	 *     (humanId=Name? body=DOCUMENTATION_COMMENT)
	 */
	protected void sequence_PrefixDocumentationComment(ISerializationContext context, Comment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrefixDocumentation returns Annotation
	 *
	 * Constraint:
	 *     ownedRelatedElement+=PrefixDocumentationComment
	 */
	protected void sequence_PrefixDocumentation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReturnParameterMember returns ReturnParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=Parameter
	 */
	protected void sequence_ReturnParameterMember(ISerializationContext context, ReturnParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StepParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=StepParameter
	 */
	protected void sequence_StepParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
