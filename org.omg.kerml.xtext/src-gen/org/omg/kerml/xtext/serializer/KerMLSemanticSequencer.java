/*
 * generated by Xtext 2.22.0
 */
package org.omg.kerml.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.omg.kerml.xtext.services.KerMLGrammarAccess;
import org.omg.sysml.lang.sysml.Annotation;
import org.omg.sysml.lang.sysml.Association;
import org.omg.sysml.lang.sysml.Behavior;
import org.omg.sysml.lang.sysml.BindingConnector;
import org.omg.sysml.lang.sysml.BlockExpression;
import org.omg.sysml.lang.sysml.BooleanExpression;
import org.omg.sysml.lang.sysml.Classifier;
import org.omg.sysml.lang.sysml.Comment;
import org.omg.sysml.lang.sysml.Conjugation;
import org.omg.sysml.lang.sysml.Connector;
import org.omg.sysml.lang.sysml.DataType;
import org.omg.sysml.lang.sysml.Documentation;
import org.omg.sysml.lang.sysml.EndFeatureMembership;
import org.omg.sysml.lang.sysml.Expression;
import org.omg.sysml.lang.sysml.Feature;
import org.omg.sysml.lang.sysml.FeatureMembership;
import org.omg.sysml.lang.sysml.FeatureReferenceExpression;
import org.omg.sysml.lang.sysml.FeatureTyping;
import org.omg.sysml.lang.sysml.FeatureValue;
import org.omg.sysml.lang.sysml.Function;
import org.omg.sysml.lang.sysml.Import;
import org.omg.sysml.lang.sysml.Interaction;
import org.omg.sysml.lang.sysml.Invariant;
import org.omg.sysml.lang.sysml.InvocationExpression;
import org.omg.sysml.lang.sysml.ItemFeature;
import org.omg.sysml.lang.sysml.ItemFlow;
import org.omg.sysml.lang.sysml.ItemFlowEnd;
import org.omg.sysml.lang.sysml.ItemFlowFeature;
import org.omg.sysml.lang.sysml.LiteralBoolean;
import org.omg.sysml.lang.sysml.LiteralInteger;
import org.omg.sysml.lang.sysml.LiteralReal;
import org.omg.sysml.lang.sysml.LiteralString;
import org.omg.sysml.lang.sysml.LiteralUnbounded;
import org.omg.sysml.lang.sysml.Membership;
import org.omg.sysml.lang.sysml.MultiplicityRange;
import org.omg.sysml.lang.sysml.NullExpression;
import org.omg.sysml.lang.sysml.OperatorExpression;
import org.omg.sysml.lang.sysml.ParameterMembership;
import org.omg.sysml.lang.sysml.Predicate;
import org.omg.sysml.lang.sysml.Redefinition;
import org.omg.sysml.lang.sysml.ResultExpressionMembership;
import org.omg.sysml.lang.sysml.ReturnParameterMembership;
import org.omg.sysml.lang.sysml.Step;
import org.omg.sysml.lang.sysml.Subsetting;
import org.omg.sysml.lang.sysml.Succession;
import org.omg.sysml.lang.sysml.SuccessionItemFlow;
import org.omg.sysml.lang.sysml.Superclassing;
import org.omg.sysml.lang.sysml.SysMLPackage;
import org.omg.sysml.lang.sysml.TextualRepresentation;

@SuppressWarnings("all")
public class KerMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private KerMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SysMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SysMLPackage.ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()) {
					sequence_Annotation(context, (Annotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyAnnotationRule()) {
					sequence_EmptyAnnotation(context, (Annotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPrefixAnnotationRule()) {
					sequence_PrefixAnnotation(context, (Annotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUnitAnnotationRule()) {
					sequence_UnitAnnotation(context, (Annotation) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ASSOCIATION:
				sequence_AssociationDeclaration_ClassifierDeclarationCompletion_Identification_SpecializationOrConjugation_TypeBody(context, (Association) semanticObject); 
				return; 
			case SysMLPackage.BEHAVIOR:
				sequence_BehaviorBody_BehaviorDeclaration_BehaviorDeclarationCompletion_Identification_ParameterList_SpecializationOrConjugation(context, (Behavior) semanticObject); 
				return; 
			case SysMLPackage.BINDING_CONNECTOR:
				sequence_BindingConnector_BindingConnectorDeclaration_FeatureConjugationPart_FeatureDeclaration_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypedBy_Typings(context, (BindingConnector) semanticObject); 
				return; 
			case SysMLPackage.BLOCK_EXPRESSION:
				if (rule == grammarAccess.getPackagedFeatureElementRule()
						|| rule == grammarAccess.getBlockExpressionRule()) {
					sequence_BlockExpression_FeatureConjugationPart_FeatureDeclaration_FunctionBody_Identification_MultiplicityPart_ParameterList_Redefines_Redefinitions_ReturnParameterPart_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (BlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBodyExpressionRule()) {
					sequence_BodyExpression(context, (BlockExpression) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.BOOLEAN_EXPRESSION:
				if (rule == grammarAccess.getPackagedFeatureElementRule()
						|| rule == grammarAccess.getBooleanExpressionRule()) {
					sequence_BooleanExpression_EmptyReturnParameterPart_FeatureConjugationPart_FeatureDeclaration_FunctionBody_Identification_MultiplicityPart_ParameterList_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (BooleanExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy(context, (BooleanExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStepParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy_ValuePart(context, (BooleanExpression) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CLASS:
				sequence_ClassDeclaration_ClassifierDeclarationCompletion_Identification_SpecializationOrConjugation_TypeBody(context, (org.omg.sysml.lang.sysml.Class) semanticObject); 
				return; 
			case SysMLPackage.CLASSIFIER:
				sequence_ClassifierDeclaration_ClassifierDeclarationCompletion_Identification_SpecializationOrConjugation_TypeBody(context, (Classifier) semanticObject); 
				return; 
			case SysMLPackage.COMMENT:
				if (rule == grammarAccess.getCommentRule()
						|| rule == grammarAccess.getPackagedNonFeatureElementRule()) {
					sequence_Comment_Identification(context, (Comment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDocumentationCommentRule()) {
					sequence_DocumentationComment(context, (Comment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDocumentationRule()) {
					sequence_Documentation(context, (Comment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUnitDocumentationRule()) {
					sequence_Identification_UnitDocumentation(context, (Comment) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CONJUGATION:
				if (rule == grammarAccess.getConjugationRule()) {
					sequence_Conjugation(context, (Conjugation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureConjugationRule()) {
					sequence_FeatureConjugation(context, (Conjugation) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.CONNECTOR:
				sequence_Connector_ConnectorDeclaration_FeatureConjugationPart_FeatureDeclaration_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypedBy_Typings(context, (Connector) semanticObject); 
				return; 
			case SysMLPackage.DATA_TYPE:
				sequence_ClassifierDeclarationCompletion_DataTypeDeclaration_Identification_SpecializationOrConjugation_TypeBody(context, (DataType) semanticObject); 
				return; 
			case SysMLPackage.DOCUMENTATION:
				sequence_OwnedDocumentation(context, (Documentation) semanticObject); 
				return; 
			case SysMLPackage.END_FEATURE_MEMBERSHIP:
				if (rule == grammarAccess.getConnectorEndMemberRule()) {
					sequence_ConnectorEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureTypeMemberRule()
						|| rule == grammarAccess.getEndFeatureMemberRule()) {
					sequence_EndFeatureMember_FeatureMemberFlags_TypeMemberPrefix(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFlowEndMemberRule()) {
					sequence_ItemFlowEndMember(context, (EndFeatureMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.EXPRESSION:
				if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy(context, (Expression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStepParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy_ValuePart(context, (Expression) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE:
				if (rule == grammarAccess.getBodyParameterRule()) {
					sequence_BodyParameter_MultiplicityPart_TypedBy(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getConnectorEndRule()) {
					sequence_ConnectorEnd(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyParameterRule()) {
					sequence_EmptyParameter(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPackagedFeatureElementRule()
						|| rule == grammarAccess.getFeatureRule()) {
					sequence_FeatureConjugationPart_FeatureDeclaration_FeatureDefinition_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypedBy_Typings_ValuePart(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureReferenceRule()) {
					sequence_FeatureReference(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_ParameterDeclaration_Redefines_Subsets_TypedBy(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStepParameterRule()) {
					sequence_Identification_MultiplicityPart_ParameterDeclaration_Redefines_Subsets_TypedBy_ValuePart(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeReferenceRule()) {
					sequence_TypeReference(context, (Feature) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_MEMBERSHIP:
				if (rule == grammarAccess.getBodyMemberRule()) {
					sequence_BodyMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmptyItemFeatureMemberRule()) {
					sequence_EmptyItemFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionMemberRule()) {
					sequence_ExpressionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureTypeMemberRule()
						|| rule == grammarAccess.getFeatureMemberRule()) {
					sequence_FeatureMember_FeatureMemberFlags_TypeMemberPrefix(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFeatureMemberRule()) {
					sequence_ItemFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFlowFeatureMemberRule()) {
					sequence_ItemFlowFeatureMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMultiplicityMemberRule()) {
					sequence_MultiplicityMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNamedExpressionMemberRule()) {
					sequence_NamedExpressionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNaturalLiteralMemberRule()) {
					sequence_NaturalLiteralMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTrueLiteralMemberRule()) {
					sequence_TrueLiteralMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeReferenceMemberRule()) {
					sequence_TypeReferenceMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUnlimitedNaturalLiteralMemberRule()) {
					sequence_UnlimitedNaturalLiteralMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_REFERENCE_EXPRESSION:
				sequence_FeatureReferenceExpression(context, (FeatureReferenceExpression) semanticObject); 
				return; 
			case SysMLPackage.FEATURE_TYPING:
				if (rule == grammarAccess.getExpressionTypingRule()) {
					sequence_ExpressionTyping(context, (FeatureTyping) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureTypingRule()) {
					sequence_FeatureTyping(context, (FeatureTyping) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_VALUE:
				sequence_FeatureValue(context, (FeatureValue) semanticObject); 
				return; 
			case SysMLPackage.FUNCTION:
				if (rule == grammarAccess.getPackagedNonFeatureElementRule()) {
					sequence_EmptyReturnParameterPart_FunctionBody_FunctionDeclaration_Identification_ParameterList_ReturnParameterPart_SpecializationOrConjugation(context, (Function) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFunctionRule()) {
					sequence_EmptyReturnParameterPart_FunctionBody_FunctionDeclaration_Identification_ParameterList_ReturnParameterPart_SpecializationOrConjugation(context, (Function) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.IMPORT:
				sequence_PackageImport(context, (Import) semanticObject); 
				return; 
			case SysMLPackage.INTERACTION:
				sequence_BehaviorDeclarationCompletion_Identification_InteractionDeclaration_ParameterList_SpecializationOrConjugation_TypeBody(context, (Interaction) semanticObject); 
				return; 
			case SysMLPackage.INVARIANT:
				sequence_EmptyReturnParameterPart_FeatureConjugationPart_FeatureDeclaration_FunctionBody_Identification_Invariant_InvariantPart_MultiplicityPart_ParameterList_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (Invariant) semanticObject); 
				return; 
			case SysMLPackage.INVOCATION_EXPRESSION:
				sequence_InvocationExpression_NamedTuple_PositionalTuple(context, (InvocationExpression) semanticObject); 
				return; 
			case SysMLPackage.ITEM_FEATURE:
				if (rule == grammarAccess.getEmptyItemFeatureRule()) {
					sequence_EmptyItemFeature(context, (ItemFeature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getItemFeatureTypingRule()) {
					sequence_ItemFeatureTyping(context, (ItemFeature) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.ITEM_FLOW:
				sequence_FeatureConjugationPart_FeatureDeclaration_Identification_ItemFlow_ItemFlowDeclaration_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypedBy_Typings(context, (ItemFlow) semanticObject); 
				return; 
			case SysMLPackage.ITEM_FLOW_END:
				sequence_ItemFlowEnd(context, (ItemFlowEnd) semanticObject); 
				return; 
			case SysMLPackage.ITEM_FLOW_FEATURE:
				sequence_ItemFlowFeature(context, (ItemFlowFeature) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_BOOLEAN:
				if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getConditionalExpressionRule()
						|| action == grammarAccess.getConditionalExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getNullCoalescingExpressionRule()
						|| action == grammarAccess.getNullCoalescingExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getConditionalOrExpressionRule()
						|| action == grammarAccess.getConditionalOrExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getConditionalAndExpressionRule()
						|| action == grammarAccess.getConditionalAndExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getXorExpressionRule()
						|| action == grammarAccess.getXorExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getEqualityExpressionRule()
						|| action == grammarAccess.getEqualityExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getClassificationExpressionRule()
						|| action == grammarAccess.getClassificationExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getRelationalExpressionRule()
						|| action == grammarAccess.getRelationalExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getAdditiveExpressionRule()
						|| action == grammarAccess.getAdditiveExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getMultiplicativeExpressionRule()
						|| action == grammarAccess.getMultiplicativeExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getExponentiationExpressionRule()
						|| action == grammarAccess.getExponentiationExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getUnitsExpressionRule()
						|| action == grammarAccess.getUnitsExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getUnaryExpressionRule()
						|| rule == grammarAccess.getSequenceAccessExpressionRule()
						|| action == grammarAccess.getSequenceAccessExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getBaseExpressionRule()
						|| rule == grammarAccess.getSequenceConstructionExpressionRule()
						|| action == grammarAccess.getSequenceConstructionExpressionAccess().getOperatorExpressionOperand_compAction_1_2_0_0()
						|| action == grammarAccess.getSequenceConstructionExpressionAccess().getOperatorExpressionOperand_compAction_1_2_1_0()
						|| rule == grammarAccess.getSequenceElementListRule()
						|| action == grammarAccess.getSequenceElementListAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getLiteralExpressionRule()
						|| rule == grammarAccess.getBooleanLiteralExpressionRule()) {
					sequence_BooleanLiteralExpression(context, (LiteralBoolean) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTrueLiteralExpressionRule()) {
					sequence_TrueLiteralExpression(context, (LiteralBoolean) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.LITERAL_INTEGER:
				sequence_NaturalLiteralExpression(context, (LiteralInteger) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_REAL:
				sequence_RealLiteralExpression(context, (LiteralReal) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_STRING:
				sequence_StringLiteralExpression(context, (LiteralString) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_UNBOUNDED:
				sequence_UnlimitedNaturalLiteralExpression(context, (LiteralUnbounded) semanticObject); 
				return; 
			case SysMLPackage.MEMBERSHIP:
				if (rule == grammarAccess.getElementAliasRule()) {
					sequence_ElementAlias_PackageMemberPrefix(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPackageMemberRule()) {
					sequence_NonFeatureMemberElement_PackageFeatureMemberElement_PackageMemberPrefix(context, (Membership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNonFeatureTypeMemberRule()) {
					sequence_NonFeatureMemberElement_TypeMemberPrefix(context, (Membership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.MULTIPLICITY_RANGE:
				sequence_Multiplicity(context, (MultiplicityRange) semanticObject); 
				return; 
			case SysMLPackage.NULL_EXPRESSION:
				sequence_NullExpression_SequenceConstructionExpression(context, (NullExpression) semanticObject); 
				return; 
			case SysMLPackage.OPERATOR_EXPRESSION:
				if (rule == grammarAccess.getSequenceElementListRule()) {
					sequence_AdditiveExpression_AndExpression_ClassificationExpression_ConditionalAndExpression_ConditionalExpression_ConditionalOrExpression_EqualityExpression_ExponentiationExpression_ExtentExpression_MultiplicativeExpression_NullCoalescingExpression_OrExpression_PrimaryExpression_RelationalExpression_SequenceAccessExpression_SequenceConstructionExpression_SequenceElementList_UnaryExpression_UnitsExpression_XorExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getConditionalExpressionRule()
						|| action == grammarAccess.getConditionalExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getNullCoalescingExpressionRule()
						|| action == grammarAccess.getNullCoalescingExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getConditionalOrExpressionRule()
						|| action == grammarAccess.getConditionalOrExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getConditionalAndExpressionRule()
						|| action == grammarAccess.getConditionalAndExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getXorExpressionRule()
						|| action == grammarAccess.getXorExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getEqualityExpressionRule()
						|| action == grammarAccess.getEqualityExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getClassificationExpressionRule()
						|| action == grammarAccess.getClassificationExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getRelationalExpressionRule()
						|| action == grammarAccess.getRelationalExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getAdditiveExpressionRule()
						|| action == grammarAccess.getAdditiveExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getMultiplicativeExpressionRule()
						|| action == grammarAccess.getMultiplicativeExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getExponentiationExpressionRule()
						|| action == grammarAccess.getExponentiationExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getUnitsExpressionRule()
						|| action == grammarAccess.getUnitsExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getUnaryExpressionRule()
						|| rule == grammarAccess.getSequenceAccessExpressionRule()
						|| action == grammarAccess.getSequenceAccessExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperand_compAction_1_0()
						|| rule == grammarAccess.getBaseExpressionRule()
						|| rule == grammarAccess.getSequenceConstructionExpressionRule()
						|| action == grammarAccess.getSequenceConstructionExpressionAccess().getOperatorExpressionOperand_compAction_1_2_0_0()
						|| action == grammarAccess.getSequenceConstructionExpressionAccess().getOperatorExpressionOperand_compAction_1_2_1_0()
						|| action == grammarAccess.getSequenceElementListAccess().getOperatorExpressionOperand_compAction_1_0()) {
					sequence_AdditiveExpression_AndExpression_ClassificationExpression_ConditionalAndExpression_ConditionalExpression_ConditionalOrExpression_EqualityExpression_ExponentiationExpression_ExtentExpression_MultiplicativeExpression_NullCoalescingExpression_OrExpression_PrimaryExpression_RelationalExpression_SequenceAccessExpression_SequenceConstructionExpression_UnaryExpression_UnitsExpression_XorExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExtentExpressionRule()) {
					sequence_ExtentExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PACKAGE:
				if (rule == grammarAccess.getPackageRule()
						|| rule == grammarAccess.getPackagedNonFeatureElementRule()) {
					sequence_Identification_PackageBody(context, (org.omg.sysml.lang.sysml.Package) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootPackageRule()) {
					sequence_PackageBodyElement_RootPackage(context, (org.omg.sysml.lang.sysml.Package) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PARAMETER_MEMBERSHIP:
				if (rule == grammarAccess.getBodyParameterMemberRule()) {
					sequence_BodyParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterMemberRule()) {
					sequence_ParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStepParameterMemberRule()) {
					sequence_StepParameterMember(context, (ParameterMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.PREDICATE:
				if (rule == grammarAccess.getPackagedNonFeatureElementRule()) {
					sequence_EmptyReturnParameterPart_FunctionBody_Identification_ParameterList_PredicateDeclaration_ReturnParameterPart_SpecializationOrConjugation(context, (Predicate) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPredicateRule()) {
					sequence_EmptyReturnParameterPart_FunctionBody_Identification_ParameterList_PredicateDeclaration_ReturnParameterPart_SpecializationOrConjugation(context, (Predicate) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.REDEFINITION:
				sequence_Redefinition(context, (Redefinition) semanticObject); 
				return; 
			case SysMLPackage.RESULT_EXPRESSION_MEMBERSHIP:
				sequence_ResultExpressionMember_TypeMemberPrefix(context, (ResultExpressionMembership) semanticObject); 
				return; 
			case SysMLPackage.RETURN_PARAMETER_MEMBERSHIP:
				if (rule == grammarAccess.getEmptyReturnParameterMemberRule()) {
					sequence_EmptyReturnParameterMember(context, (ReturnParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureReferenceMemberRule()) {
					sequence_FeatureReferenceMember(context, (ReturnParameterMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getReturnParameterMemberRule()) {
					sequence_ReturnParameterMember(context, (ReturnParameterMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.STEP:
				if (rule == grammarAccess.getPackagedFeatureElementRule()
						|| rule == grammarAccess.getStepRule()) {
					sequence_BehaviorBody_FeatureConjugationPart_FeatureDeclaration_Identification_MultiplicityPart_Redefines_Redefinitions_Step_StepParameterList_Subsets_Subsettings_TypedBy_Typings_ValuePart(context, (Step) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy(context, (Step) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStepParameterRule()) {
					sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy_ValuePart(context, (Step) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.SUBSETTING:
				sequence_Subset(context, (Subsetting) semanticObject); 
				return; 
			case SysMLPackage.SUCCESSION:
				sequence_FeatureConjugationPart_FeatureDeclaration_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_Succession_SuccessionDeclaration_TypeBody_TypedBy_Typings(context, (Succession) semanticObject); 
				return; 
			case SysMLPackage.SUCCESSION_ITEM_FLOW:
				sequence_FeatureConjugationPart_FeatureDeclaration_Identification_ItemFlowDeclaration_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_SuccessionItemFlow_TypeBody_TypedBy_Typings(context, (SuccessionItemFlow) semanticObject); 
				return; 
			case SysMLPackage.SUPERCLASSING:
				sequence_Superclassing(context, (Superclassing) semanticObject); 
				return; 
			case SysMLPackage.TEXTUAL_REPRESENTATION:
				sequence_Identification_TextualRepresentation(context, (TextualRepresentation) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     SequenceElementList returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             operand_comp+=ConditionalExpression_OperatorExpression_1_0 
	 *             operator=ConditionalTestOperator 
	 *             operand_comp+=Expression 
	 *             operand_comp+=ConditionalExpression
	 *         ) | 
	 *         (operand_comp+=NullCoalescingExpression_OperatorExpression_1_0 operator=NullCoalescingOperator operand_comp+=ConditionalOrExpression) | 
	 *         (operand_comp+=ConditionalOrExpression_OperatorExpression_1_0 operator=ConditionalOrOperator operand_comp+=ConditionalAndExpression) | 
	 *         (operand_comp+=ConditionalAndExpression_OperatorExpression_1_0 operator=ConditionalAndOperator operand_comp+=OrExpression) | 
	 *         (operand_comp+=OrExpression_OperatorExpression_1_0 operator=OrOperator operand_comp+=XorExpression) | 
	 *         (operand_comp+=XorExpression_OperatorExpression_1_0 operator=XorOperator operand_comp+=AndExpression) | 
	 *         (operand_comp+=AndExpression_OperatorExpression_1_0 operator=AndOperator operand_comp+=EqualityExpression) | 
	 *         (operand_comp+=EqualityExpression_OperatorExpression_1_0 operator=EqualityOperator operand_comp+=ClassificationExpression) | 
	 *         (operand_comp+=ClassificationExpression_OperatorExpression_1_0 operator=ClassificationOperator ownedFeatureMembership_comp+=TypeReferenceMember) | 
	 *         (operand_comp+=RelationalExpression_OperatorExpression_1_0 operator=RelationalOperator operand_comp+=AdditiveExpression) | 
	 *         (operand_comp+=AdditiveExpression_OperatorExpression_1_0 operator=AdditiveOperator operand_comp+=MultiplicativeExpression) | 
	 *         (operand_comp+=MultiplicativeExpression_OperatorExpression_1_0 operator=MultiplicativeOperator operand_comp+=ExponentiationExpression) | 
	 *         (operand_comp+=ExponentiationExpression_OperatorExpression_1_0 operator=ExponentiationOperator operand_comp+=UnitsExpression) | 
	 *         (operand_comp+=UnitsExpression_OperatorExpression_1_0 operator='@' operand_comp+=Expression) | 
	 *         (operator=UnaryOperator operand_comp+=SequenceAccessExpression) | 
	 *         (operand_comp+=SequenceAccessExpression_OperatorExpression_1_0 operator='[' operand_comp+=Expression) | 
	 *         (operand_comp+=PrimaryExpression_OperatorExpression_1_0 operator=Name ownedFeatureMembership_comp+=BodyMember+) | 
	 *         (ownedFeatureMembership_comp+=TypeReferenceMember operator='allInstances') | 
	 *         (operator='all' ownedFeatureMembership_comp+=TypeReferenceMember) | 
	 *         (operand_comp+=SequenceConstructionExpression_OperatorExpression_1_2_0_0 operator=',' operand_comp+=SequenceElementList) | 
	 *         (operand_comp+=SequenceConstructionExpression_OperatorExpression_1_2_1_0 operator='..' operand_comp+=Expression) | 
	 *         (operand_comp+=SequenceElementList_OperatorExpression_1_0 operator=',' operand_comp+=SequenceElementList)
	 *     )
	 */
	protected void sequence_AdditiveExpression_AndExpression_ClassificationExpression_ConditionalAndExpression_ConditionalExpression_ConditionalOrExpression_EqualityExpression_ExponentiationExpression_ExtentExpression_MultiplicativeExpression_NullCoalescingExpression_OrExpression_PrimaryExpression_RelationalExpression_SequenceAccessExpression_SequenceConstructionExpression_SequenceElementList_UnaryExpression_UnitsExpression_XorExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns OperatorExpression
	 *     ConditionalExpression returns OperatorExpression
	 *     ConditionalExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     NullCoalescingExpression returns OperatorExpression
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ConditionalOrExpression returns OperatorExpression
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ConditionalAndExpression returns OperatorExpression
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     OrExpression returns OperatorExpression
	 *     OrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     XorExpression returns OperatorExpression
	 *     XorExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     AndExpression returns OperatorExpression
	 *     AndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     EqualityExpression returns OperatorExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ClassificationExpression returns OperatorExpression
	 *     ClassificationExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     RelationalExpression returns OperatorExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     AdditiveExpression returns OperatorExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     MultiplicativeExpression returns OperatorExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ExponentiationExpression returns OperatorExpression
	 *     ExponentiationExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     UnitsExpression returns OperatorExpression
	 *     UnitsExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     UnaryExpression returns OperatorExpression
	 *     SequenceAccessExpression returns OperatorExpression
	 *     SequenceAccessExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     PrimaryExpression returns OperatorExpression
	 *     PrimaryExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     BaseExpression returns OperatorExpression
	 *     SequenceConstructionExpression returns OperatorExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_0_0 returns OperatorExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_1_0 returns OperatorExpression
	 *     SequenceElementList.OperatorExpression_1_0 returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             operand_comp+=ConditionalExpression_OperatorExpression_1_0 
	 *             operator=ConditionalTestOperator 
	 *             operand_comp+=Expression 
	 *             operand_comp+=ConditionalExpression
	 *         ) | 
	 *         (operand_comp+=NullCoalescingExpression_OperatorExpression_1_0 operator=NullCoalescingOperator operand_comp+=ConditionalOrExpression) | 
	 *         (operand_comp+=ConditionalOrExpression_OperatorExpression_1_0 operator=ConditionalOrOperator operand_comp+=ConditionalAndExpression) | 
	 *         (operand_comp+=ConditionalAndExpression_OperatorExpression_1_0 operator=ConditionalAndOperator operand_comp+=OrExpression) | 
	 *         (operand_comp+=OrExpression_OperatorExpression_1_0 operator=OrOperator operand_comp+=XorExpression) | 
	 *         (operand_comp+=XorExpression_OperatorExpression_1_0 operator=XorOperator operand_comp+=AndExpression) | 
	 *         (operand_comp+=AndExpression_OperatorExpression_1_0 operator=AndOperator operand_comp+=EqualityExpression) | 
	 *         (operand_comp+=EqualityExpression_OperatorExpression_1_0 operator=EqualityOperator operand_comp+=ClassificationExpression) | 
	 *         (operand_comp+=ClassificationExpression_OperatorExpression_1_0 operator=ClassificationOperator ownedFeatureMembership_comp+=TypeReferenceMember) | 
	 *         (operand_comp+=RelationalExpression_OperatorExpression_1_0 operator=RelationalOperator operand_comp+=AdditiveExpression) | 
	 *         (operand_comp+=AdditiveExpression_OperatorExpression_1_0 operator=AdditiveOperator operand_comp+=MultiplicativeExpression) | 
	 *         (operand_comp+=MultiplicativeExpression_OperatorExpression_1_0 operator=MultiplicativeOperator operand_comp+=ExponentiationExpression) | 
	 *         (operand_comp+=ExponentiationExpression_OperatorExpression_1_0 operator=ExponentiationOperator operand_comp+=UnitsExpression) | 
	 *         (operand_comp+=UnitsExpression_OperatorExpression_1_0 operator='@' operand_comp+=Expression) | 
	 *         (operator=UnaryOperator operand_comp+=SequenceAccessExpression) | 
	 *         (operand_comp+=SequenceAccessExpression_OperatorExpression_1_0 operator='[' operand_comp+=Expression) | 
	 *         (operand_comp+=PrimaryExpression_OperatorExpression_1_0 operator=Name ownedFeatureMembership_comp+=BodyMember+) | 
	 *         (ownedFeatureMembership_comp+=TypeReferenceMember operator='allInstances') | 
	 *         (operator='all' ownedFeatureMembership_comp+=TypeReferenceMember) | 
	 *         (operand_comp+=SequenceConstructionExpression_OperatorExpression_1_2_0_0 operator=',' operand_comp+=SequenceElementList) | 
	 *         (operand_comp+=SequenceConstructionExpression_OperatorExpression_1_2_1_0 operator='..' operand_comp+=Expression)
	 *     )
	 */
	protected void sequence_AdditiveExpression_AndExpression_ClassificationExpression_ConditionalAndExpression_ConditionalExpression_ConditionalOrExpression_EqualityExpression_ExponentiationExpression_ExtentExpression_MultiplicativeExpression_NullCoalescingExpression_OrExpression_PrimaryExpression_RelationalExpression_SequenceAccessExpression_SequenceConstructionExpression_UnaryExpression_UnitsExpression_XorExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Annotation returns Annotation
	 *
	 * Constraint:
	 *     annotatedElement=[Element|QualifiedName]?
	 */
	protected void sequence_Annotation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackagedNonFeatureElement returns Association
	 *     Association returns Association
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         isSufficient?='all'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ((ownedRelationship_comp+=Superclassing ownedRelationship_comp+=Superclassing*) | ownedRelationship_comp+=Conjugation)? 
	 *         ownedFeatureMembership_comp+=MultiplicityMember? 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NonFeatureTypeMember | 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember | 
	 *             ownedImport_comp+=PackageImport
	 *         )*
	 *     )
	 */
	protected void sequence_AssociationDeclaration_ClassifierDeclarationCompletion_Identification_SpecializationOrConjugation_TypeBody(ISerializationContext context, Association semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackagedNonFeatureElement returns Behavior
	 *     Behavior returns Behavior
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         isSufficient?='all'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ((ownedRelationship_comp+=Superclassing ownedRelationship_comp+=Superclassing*) | ownedRelationship_comp+=Conjugation)? 
	 *         (ownedFeatureMembership_comp+=ParameterMember ownedFeatureMembership_comp+=ParameterMember*)? 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NonFeatureTypeMember | 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember | 
	 *             ownedRelationship_comp+=PackageImport
	 *         )*
	 *     )
	 */
	protected void sequence_BehaviorBody_BehaviorDeclaration_BehaviorDeclarationCompletion_Identification_ParameterList_SpecializationOrConjugation(ISerializationContext context, Behavior semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackagedFeatureElement returns Step
	 *     Step returns Step
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         (
	 *             (
	 *                 (
	 *                     isSufficient?='all' | 
	 *                     (
	 *                         isSufficient?='all' 
	 *                         ((humanId=Name name=Name?) | name=Name) 
	 *                         (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'? (isOrdered?='ordered'? isNonunique?='nonunique'?)*)
	 *                     )
	 *                 )? 
	 *                 (
	 *                     (
	 *                         (ownedRelationship_comp+=FeatureTyping ownedRelationship_comp+=FeatureTyping*) | 
	 *                         (ownedRelationship_comp+=Subset ownedRelationship_comp+=Subset*) | 
	 *                         (ownedRelationship_comp+=Redefinition ownedRelationship_comp+=Redefinition*)
	 *                     ) 
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'?)?
	 *                 )+
	 *             ) | 
	 *             (isSufficient?='all' ownedRelationship_comp+=FeatureConjugation) | 
	 *             (
	 *                 isSufficient?='all' 
	 *                 ((humanId=Name name=Name?) | name=Name) 
	 *                 (
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'? (isOrdered?='ordered'? isNonunique?='nonunique'?)*) | 
	 *                     ownedRelationship_comp+=FeatureConjugation
	 *                 )?
	 *             )
	 *         )? 
	 *         (
	 *             ownedFeatureMembership_comp+=FeatureValue | 
	 *             (ownedFeatureMembership_comp+=StepParameterMember ownedFeatureMembership_comp+=StepParameterMember*)
	 *         )? 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NonFeatureTypeMember | 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember | 
	 *             ownedRelationship_comp+=PackageImport
	 *         )*
	 *     )
	 */
	protected void sequence_BehaviorBody_FeatureConjugationPart_FeatureDeclaration_Identification_MultiplicityPart_Redefines_Redefinitions_Step_StepParameterList_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, Step semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackagedNonFeatureElement returns Interaction
	 *     Interaction returns Interaction
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         isSufficient?='all'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ((ownedRelationship_comp+=Superclassing ownedRelationship_comp+=Superclassing*) | ownedRelationship_comp+=Conjugation)? 
	 *         (ownedFeatureMembership_comp+=ParameterMember ownedFeatureMembership_comp+=ParameterMember*)? 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NonFeatureTypeMember | 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember | 
	 *             ownedImport_comp+=PackageImport
	 *         )*
	 *     )
	 */
	protected void sequence_BehaviorDeclarationCompletion_Identification_InteractionDeclaration_ParameterList_SpecializationOrConjugation_TypeBody(ISerializationContext context, Interaction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackagedFeatureElement returns BindingConnector
	 *     BindingConnector returns BindingConnector
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         (
	 *             (
	 *                 (
	 *                     isSufficient?='all' | 
	 *                     (
	 *                         isSufficient?='all' 
	 *                         ((humanId=Name name=Name?) | name=Name) 
	 *                         (ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)
	 *                     )
	 *                 )? 
	 *                 (
	 *                     (
	 *                         (ownedRelationship_comp+=FeatureTyping ownedRelationship_comp+=FeatureTyping*) | 
	 *                         (ownedRelationship_comp+=Subset ownedRelationship_comp+=Subset*) | 
	 *                         (ownedRelationship_comp+=Redefinition ownedRelationship_comp+=Redefinition*)
	 *                     ) 
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)
	 *                 )+
	 *             ) | 
	 *             (isSufficient?='all' ownedRelationship_comp+=FeatureConjugation) | 
	 *             (
	 *                 isSufficient?='all' 
	 *                 ((humanId=Name name=Name?) | name=Name) 
	 *                 (
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*) | 
	 *                     ownedRelationship_comp+=FeatureConjugation
	 *                 )?
	 *             ) | 
	 *             isSufficient?='all'
	 *         )? 
	 *         ownedFeatureMembership_comp+=ConnectorEndMember 
	 *         ownedFeatureMembership_comp+=ConnectorEndMember 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NonFeatureTypeMember | 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember | 
	 *             ownedImport_comp+=PackageImport
	 *         )*
	 *     )
	 */
	protected void sequence_BindingConnector_BindingConnectorDeclaration_FeatureConjugationPart_FeatureDeclaration_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypedBy_Typings(ISerializationContext context, BindingConnector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackagedFeatureElement returns BlockExpression
	 *     BlockExpression returns BlockExpression
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         (
	 *             (
	 *                 (
	 *                     isSufficient?='all' | 
	 *                     (
	 *                         isSufficient?='all' 
	 *                         ((humanId=Name name=Name?) | name=Name) 
	 *                         (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'? (isOrdered?='ordered'? isNonunique?='nonunique'?)*)
	 *                     )
	 *                 )? 
	 *                 (
	 *                     (
	 *                         (ownedRelationship_comp+=FeatureTyping ownedRelationship_comp+=FeatureTyping*) | 
	 *                         (ownedRelationship_comp+=Subset ownedRelationship_comp+=Subset*) | 
	 *                         (ownedRelationship_comp+=Redefinition ownedRelationship_comp+=Redefinition*)
	 *                     ) 
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'?)?
	 *                 )+
	 *             ) | 
	 *             (isSufficient?='all' ownedRelationship_comp+=FeatureConjugation) | 
	 *             (
	 *                 isSufficient?='all' 
	 *                 ((humanId=Name name=Name?) | name=Name) 
	 *                 (
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'? (isOrdered?='ordered'? isNonunique?='nonunique'?)*) | 
	 *                     ownedRelationship_comp+=FeatureConjugation
	 *                 )?
	 *             )
	 *         )? 
	 *         (
	 *             (
	 *                 (ownedFeatureMembership_comp+=ParameterMember ownedFeatureMembership_comp+=ParameterMember*)? 
	 *                 ownedFeatureMembership_comp+=ReturnParameterMember?
	 *             ) | 
	 *             ownedFeatureMembership_comp+=FeatureValue
	 *         )? 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NonFeatureTypeMember | 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember | 
	 *             ownedRelationship_comp+=PackageImport
	 *         )* 
	 *         ownedFeatureMembership_comp+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_BlockExpression_FeatureConjugationPart_FeatureDeclaration_FunctionBody_Identification_MultiplicityPart_ParameterList_Redefines_Redefinitions_ReturnParameterPart_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, BlockExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BodyExpression returns BlockExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             ownedFeatureMembership_comp+=BodyParameterMember 
	 *             ownedFeatureMembership_comp+=BodyParameterMember* 
	 *             ownedFeatureMembership_comp+=ResultExpressionMember
	 *         ) | 
	 *         ownedRelationship_comp+=ExpressionTyping
	 *     )
	 */
	protected void sequence_BodyExpression(ISerializationContext context, BlockExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BodyMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=BodyExpression
	 */
	protected void sequence_BodyMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBodyMemberAccess().getOwnedMemberFeature_compBodyExpressionParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BodyParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     (memberName=Name ownedMemberParameter_comp=BodyParameter)
	 */
	protected void sequence_BodyParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.MEMBERSHIP__MEMBER_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.MEMBERSHIP__MEMBER_NAME));
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.PARAMETER_MEMBERSHIP__OWNED_MEMBER_PARAMETER_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.PARAMETER_MEMBERSHIP__OWNED_MEMBER_PARAMETER_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBodyParameterMemberAccess().getMemberNameNameParserRuleCall_0_0(), semanticObject.getMemberName());
		feeder.accept(grammarAccess.getBodyParameterMemberAccess().getOwnedMemberParameter_compBodyParameterParserRuleCall_1_0(), semanticObject.getOwnedMemberParameter_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BodyParameter returns Feature
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship_comp+=FeatureTyping? 
	 *         (
	 *             ownedFeatureMembership_comp+=MultiplicityMember 
	 *             (isOrdered?='ordered' | isNonunique?='nonunique')* 
	 *             (ownedRelationship_comp+=FeatureTyping? ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)* 
	 *             ownedRelationship_comp+=FeatureTyping?
	 *         )?
	 *     )
	 */
	protected void sequence_BodyParameter_MultiplicityPart_TypedBy(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackagedFeatureElement returns BooleanExpression
	 *     BooleanExpression returns BooleanExpression
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         (
	 *             (
	 *                 (
	 *                     isSufficient?='all' | 
	 *                     (
	 *                         isSufficient?='all' 
	 *                         ((humanId=Name name=Name?) | name=Name) 
	 *                         (ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)
	 *                     )
	 *                 )? 
	 *                 (
	 *                     (
	 *                         (ownedRelationship_comp+=FeatureTyping ownedRelationship_comp+=FeatureTyping*) | 
	 *                         (ownedRelationship_comp+=Subset ownedRelationship_comp+=Subset*) | 
	 *                         (ownedRelationship_comp+=Redefinition ownedRelationship_comp+=Redefinition*)
	 *                     ) 
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)
	 *                 )+
	 *             ) | 
	 *             (isSufficient?='all' ownedRelationship_comp+=FeatureConjugation) | 
	 *             (
	 *                 isSufficient?='all' 
	 *                 ((humanId=Name name=Name?) | name=Name) 
	 *                 (
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*) | 
	 *                     ownedRelationship_comp+=FeatureConjugation
	 *                 )?
	 *             )
	 *         )? 
	 *         ((ownedFeatureMembership_comp+=ParameterMember ownedFeatureMembership_comp+=ParameterMember*) | ownedFeatureMembership_comp+=FeatureValue)? 
	 *         ownedFeatureMembership_comp+=EmptyReturnParameterMember 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NonFeatureTypeMember | 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember | 
	 *             ownedRelationship_comp+=PackageImport
	 *         )* 
	 *         ownedFeatureMembership_comp+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_BooleanExpression_EmptyReturnParameterPart_FeatureConjugationPart_FeatureDeclaration_FunctionBody_Identification_MultiplicityPart_ParameterList_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, BooleanExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns LiteralBoolean
	 *     ConditionalExpression returns LiteralBoolean
	 *     ConditionalExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     NullCoalescingExpression returns LiteralBoolean
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     ConditionalOrExpression returns LiteralBoolean
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     ConditionalAndExpression returns LiteralBoolean
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     OrExpression returns LiteralBoolean
	 *     OrExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     XorExpression returns LiteralBoolean
	 *     XorExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     AndExpression returns LiteralBoolean
	 *     AndExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     EqualityExpression returns LiteralBoolean
	 *     EqualityExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     ClassificationExpression returns LiteralBoolean
	 *     ClassificationExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     RelationalExpression returns LiteralBoolean
	 *     RelationalExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     AdditiveExpression returns LiteralBoolean
	 *     AdditiveExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     MultiplicativeExpression returns LiteralBoolean
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     ExponentiationExpression returns LiteralBoolean
	 *     ExponentiationExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     UnitsExpression returns LiteralBoolean
	 *     UnitsExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     UnaryExpression returns LiteralBoolean
	 *     SequenceAccessExpression returns LiteralBoolean
	 *     SequenceAccessExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     PrimaryExpression returns LiteralBoolean
	 *     PrimaryExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     BaseExpression returns LiteralBoolean
	 *     SequenceConstructionExpression returns LiteralBoolean
	 *     SequenceConstructionExpression.OperatorExpression_1_2_0_0 returns LiteralBoolean
	 *     SequenceConstructionExpression.OperatorExpression_1_2_1_0 returns LiteralBoolean
	 *     SequenceElementList returns LiteralBoolean
	 *     SequenceElementList.OperatorExpression_1_0 returns LiteralBoolean
	 *     LiteralExpression returns LiteralBoolean
	 *     BooleanLiteralExpression returns LiteralBoolean
	 *
	 * Constraint:
	 *     value=BooleanValue
	 */
	protected void sequence_BooleanLiteralExpression(ISerializationContext context, LiteralBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.LITERAL_BOOLEAN__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.LITERAL_BOOLEAN__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanLiteralExpressionAccess().getValueBooleanValueParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PackagedNonFeatureElement returns Class
	 *     Class returns Class
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         isSufficient?='all'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ((ownedRelationship_comp+=Superclassing ownedRelationship_comp+=Superclassing*) | ownedRelationship_comp+=Conjugation)? 
	 *         ownedFeatureMembership_comp+=MultiplicityMember? 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NonFeatureTypeMember | 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember | 
	 *             ownedImport_comp+=PackageImport
	 *         )*
	 *     )
	 */
	protected void sequence_ClassDeclaration_ClassifierDeclarationCompletion_Identification_SpecializationOrConjugation_TypeBody(ISerializationContext context, org.omg.sysml.lang.sysml.Class semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackagedNonFeatureElement returns DataType
	 *     DataType returns DataType
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         isSufficient?='all'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ((ownedRelationship_comp+=Superclassing ownedRelationship_comp+=Superclassing*) | ownedRelationship_comp+=Conjugation)? 
	 *         ownedFeatureMembership_comp+=MultiplicityMember? 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NonFeatureTypeMember | 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember | 
	 *             ownedImport_comp+=PackageImport
	 *         )*
	 *     )
	 */
	protected void sequence_ClassifierDeclarationCompletion_DataTypeDeclaration_Identification_SpecializationOrConjugation_TypeBody(ISerializationContext context, DataType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackagedNonFeatureElement returns Classifier
	 *     Classifier returns Classifier
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         isSufficient?='all'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ((ownedRelationship_comp+=Superclassing ownedRelationship_comp+=Superclassing*) | ownedRelationship_comp+=Conjugation)? 
	 *         ownedFeatureMembership_comp+=MultiplicityMember? 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NonFeatureTypeMember | 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember | 
	 *             ownedImport_comp+=PackageImport
	 *         )*
	 *     )
	 */
	protected void sequence_ClassifierDeclaration_ClassifierDeclarationCompletion_Identification_SpecializationOrConjugation_TypeBody(ISerializationContext context, Classifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comment returns Comment
	 *     PackagedNonFeatureElement returns Comment
	 *
	 * Constraint:
	 *     (((((humanId=Name name=Name?) | name=Name)? ownedRelationship_comp+=Annotation) | ownedRelationship_comp+=EmptyAnnotation) body=ML_COMMENT)
	 */
	protected void sequence_Comment_Identification(ISerializationContext context, Comment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Conjugation returns Conjugation
	 *
	 * Constraint:
	 *     originalType=[Classifier|QualifiedName]
	 */
	protected void sequence_Conjugation(ISerializationContext context, Conjugation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.CONJUGATION__ORIGINAL_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.CONJUGATION__ORIGINAL_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConjugationAccess().getOriginalTypeClassifierQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.CONJUGATION__ORIGINAL_TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConnectorEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     (memberName=Name? ownedMemberFeature_comp=ConnectorEnd)
	 */
	protected void sequence_ConnectorEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConnectorEnd returns Feature
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=Subset ownedFeatureMembership_comp+=MultiplicityMember?)
	 */
	protected void sequence_ConnectorEnd(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackagedFeatureElement returns Connector
	 *     Connector returns Connector
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         (
	 *             (
	 *                 (isSufficient?='all' ownedRelationship_comp+=FeatureConjugation)? 
	 *                 ownedFeatureMembership_comp+=ConnectorEndMember 
	 *                 ownedFeatureMembership_comp+=ConnectorEndMember 
	 *                 ownedFeatureMembership_comp+=ConnectorEndMember*
	 *             ) | 
	 *             (
	 *                 ((isSufficient?='all' ownedRelationship_comp+=FeatureConjugation) | isSufficient?='all')? 
	 *                 ownedFeatureMembership_comp+=ConnectorEndMember 
	 *                 ownedFeatureMembership_comp+=ConnectorEndMember
	 *             ) | 
	 *             (
	 *                 isSufficient?='all' 
	 *                 ((humanId=Name name=Name?) | name=Name) 
	 *                 (
	 *                     (ownedRelationship_comp+=FeatureConjugation ownedFeatureMembership_comp+=ConnectorEndMember ownedFeatureMembership_comp+=ConnectorEndMember) | 
	 *                     (
	 *                         ownedRelationship_comp+=FeatureConjugation 
	 *                         ownedFeatureMembership_comp+=ConnectorEndMember 
	 *                         ownedFeatureMembership_comp+=ConnectorEndMember 
	 *                         ownedFeatureMembership_comp+=ConnectorEndMember*
	 *                     )
	 *                 )
	 *             ) | 
	 *             (
	 *                 (
	 *                     (
	 *                         isSufficient?='all' 
	 *                         ((humanId=Name name=Name?) | name=Name) 
	 *                         (ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *                     ) | 
	 *                     (
	 *                         (
	 *                             isSufficient?='all' | 
	 *                             (
	 *                                 isSufficient?='all' 
	 *                                 ((humanId=Name name=Name?) | name=Name) 
	 *                                 (ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *                             )
	 *                         )? 
	 *                         (
	 *                             (
	 *                                 (ownedRelationship_comp+=FeatureTyping ownedRelationship_comp+=FeatureTyping*) | 
	 *                                 (ownedRelationship_comp+=Subset ownedRelationship_comp+=Subset*) | 
	 *                                 (ownedRelationship_comp+=Redefinition ownedRelationship_comp+=Redefinition*)
	 *                             ) 
	 *                             (ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)?
	 *                         )+
	 *                     )
	 *                 ) 
	 *                 (
	 *                     (ownedFeatureMembership_comp+=ConnectorEndMember ownedFeatureMembership_comp+=ConnectorEndMember) | 
	 *                     (
	 *                         ownedFeatureMembership_comp+=ConnectorEndMember 
	 *                         ownedFeatureMembership_comp+=ConnectorEndMember 
	 *                         ownedFeatureMembership_comp+=ConnectorEndMember*
	 *                     )
	 *                 )
	 *             )
	 *         ) 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NonFeatureTypeMember | 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember | 
	 *             ownedImport_comp+=PackageImport
	 *         )*
	 *     )
	 */
	protected void sequence_Connector_ConnectorDeclaration_FeatureConjugationPart_FeatureDeclaration_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypedBy_Typings(ISerializationContext context, Connector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DocumentationComment returns Comment
	 *
	 * Constraint:
	 *     (humanId=Name? body=ML_COMMENT)
	 */
	protected void sequence_DocumentationComment(ISerializationContext context, Comment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Documentation returns Comment
	 *
	 * Constraint:
	 *     (humanId=Name? body=DOCUMENTATION_COMMENT)
	 */
	protected void sequence_Documentation(ISerializationContext context, Comment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementAlias returns Membership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixAnnotation* visibility=PackageElementVisibilityIndicator? memberElement=[Element|QualifiedName] memberName=Name?)
	 */
	protected void sequence_ElementAlias_PackageMemberPrefix(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyAnnotation returns Annotation
	 *
	 * Constraint:
	 *     {Annotation}
	 */
	protected void sequence_EmptyAnnotation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=EmptyItemFeature
	 */
	protected void sequence_EmptyItemFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEmptyItemFeatureMemberAccess().getOwnedMemberFeature_compEmptyItemFeatureParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EmptyItemFeature returns ItemFeature
	 *
	 * Constraint:
	 *     {ItemFeature}
	 */
	protected void sequence_EmptyItemFeature(ISerializationContext context, ItemFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyParameter returns Feature
	 *
	 * Constraint:
	 *     {Feature}
	 */
	protected void sequence_EmptyParameter(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyReturnParameterMember returns ReturnParameterMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=EmptyParameter
	 */
	protected void sequence_EmptyReturnParameterMember(ISerializationContext context, ReturnParameterMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEmptyReturnParameterMemberAccess().getOwnedMemberFeature_compEmptyParameterParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PackagedFeatureElement returns Invariant
	 *     Invariant returns Invariant
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         (
	 *             (
	 *                 (
	 *                     isSufficient?='all' | 
	 *                     (
	 *                         isSufficient?='all' 
	 *                         ((humanId=Name name=Name?) | name=Name) 
	 *                         (ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)
	 *                     )
	 *                 )? 
	 *                 (
	 *                     (
	 *                         (ownedRelationship_comp+=FeatureTyping ownedRelationship_comp+=FeatureTyping*) | 
	 *                         (ownedRelationship_comp+=Subset ownedRelationship_comp+=Subset*) | 
	 *                         (ownedRelationship_comp+=Redefinition ownedRelationship_comp+=Redefinition*)
	 *                     ) 
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)
	 *                 )+
	 *             ) | 
	 *             (isSufficient?='all' ownedRelationship_comp+=FeatureConjugation) | 
	 *             (
	 *                 isSufficient?='all' 
	 *                 ((humanId=Name name=Name?) | name=Name) 
	 *                 (
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*) | 
	 *                     ownedRelationship_comp+=FeatureConjugation
	 *                 )?
	 *             )
	 *         )? 
	 *         ((ownedFeatureMembership_comp+=ParameterMember ownedFeatureMembership_comp+=ParameterMember*) | ownedFeatureMembership_comp+=FeatureValue)? 
	 *         ownedFeatureMembership_comp+=EmptyReturnParameterMember 
	 *         ownedFeatureMembership_comp+=TrueLiteralMember 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NonFeatureTypeMember | 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember | 
	 *             ownedRelationship_comp+=PackageImport
	 *         )* 
	 *         ownedFeatureMembership_comp+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_EmptyReturnParameterPart_FeatureConjugationPart_FeatureDeclaration_FunctionBody_Identification_Invariant_InvariantPart_MultiplicityPart_ParameterList_Redefines_Redefinitions_Subsets_Subsettings_TypedBy_Typings_ValuePart(ISerializationContext context, Invariant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackagedNonFeatureElement returns Function
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         isSufficient?='all'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ((ownedRelationship_comp+=Superclassing ownedRelationship_comp+=Superclassing?) | ownedRelationship_comp+=Conjugation)? 
	 *         (ownedFeatureMembership_comp+=ParameterMember ownedFeatureMembership_comp+=ParameterMember*)? 
	 *         (ownedFeatureMembership_comp+=ReturnParameterMember | ownedFeatureMembership_comp+=EmptyReturnParameterMember) 
	 *         ownedFeatureMembership_comp+=FeatureTypeMember? 
	 *         (
	 *             (documentation_comp+=OwnedDocumentation | ownedMembership_comp+=NonFeatureTypeMember | ownedRelationship_comp+=PackageImport)? 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember?
	 *         )* 
	 *         ownedFeatureMembership_comp+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_EmptyReturnParameterPart_FunctionBody_FunctionDeclaration_Identification_ParameterList_ReturnParameterPart_SpecializationOrConjugation(ISerializationContext context, Function semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     Function returns Function
	//
	// Constraint:
	//     (
	//         isAbstract?='abstract'? 
	//         isSufficient?='all'? 
	//         ((humanId=Name name=Name?) | name=Name)? 
	//         ((ownedRelationship_comp+=Superclassing ownedRelationship_comp+=Superclassing*) | ownedRelationship_comp+=Conjugation)? 
	//         (ownedFeatureMembership_comp+=ParameterMember ownedFeatureMembership_comp+=ParameterMember*)? 
	//         (ownedFeatureMembership_comp+=ReturnParameterMember | ownedFeatureMembership_comp+=EmptyReturnParameterMember) 
	//         documentation_comp+=OwnedDocumentation? 
	//         (
	//             (ownedMembership_comp+=NonFeatureTypeMember | ownedFeatureMembership_comp+=FeatureTypeMember | ownedRelationship_comp+=PackageImport)? 
	//             documentation_comp+=OwnedDocumentation?
	//         )* 
	//         ownedFeatureMembership_comp+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_EmptyReturnParameterPart_FunctionBody_FunctionDeclaration_Identification_ParameterList_ReturnParameterPart_SpecializationOrConjugation(ISerializationContext context, Function semanticObject) { }
	
	/**
	 * Contexts:
	 *     PackagedNonFeatureElement returns Predicate
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         isSufficient?='all'? 
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         ((ownedRelationship_comp+=Superclassing ownedRelationship_comp+=Superclassing?) | ownedRelationship_comp+=Conjugation)? 
	 *         (ownedFeatureMembership_comp+=ParameterMember ownedFeatureMembership_comp+=ParameterMember*)? 
	 *         (ownedFeatureMembership_comp+=ReturnParameterMember | ownedFeatureMembership_comp+=EmptyReturnParameterMember) 
	 *         ownedFeatureMembership_comp+=FeatureTypeMember? 
	 *         (
	 *             (documentation_comp+=OwnedDocumentation | ownedMembership_comp+=NonFeatureTypeMember | ownedRelationship_comp+=PackageImport)? 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember?
	 *         )* 
	 *         ownedFeatureMembership_comp+=ResultExpressionMember?
	 *     )
	 */
	protected void sequence_EmptyReturnParameterPart_FunctionBody_Identification_ParameterList_PredicateDeclaration_ReturnParameterPart_SpecializationOrConjugation(ISerializationContext context, Predicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     Predicate returns Predicate
	//
	// Constraint:
	//     (
	//         isAbstract?='abstract'? 
	//         isSufficient?='all'? 
	//         ((humanId=Name name=Name?) | name=Name)? 
	//         ((ownedRelationship_comp+=Superclassing ownedRelationship_comp+=Superclassing*) | ownedRelationship_comp+=Conjugation)? 
	//         (ownedFeatureMembership_comp+=ParameterMember ownedFeatureMembership_comp+=ParameterMember*)? 
	//         (ownedFeatureMembership_comp+=ReturnParameterMember | ownedFeatureMembership_comp+=EmptyReturnParameterMember) 
	//         documentation_comp+=OwnedDocumentation? 
	//         (
	//             (ownedMembership_comp+=NonFeatureTypeMember | ownedFeatureMembership_comp+=FeatureTypeMember | ownedRelationship_comp+=PackageImport)? 
	//             documentation_comp+=OwnedDocumentation?
	//         )* 
	//         ownedFeatureMembership_comp+=ResultExpressionMember?
	//     )
	//
	// protected void sequence_EmptyReturnParameterPart_FunctionBody_Identification_ParameterList_PredicateDeclaration_ReturnParameterPart_SpecializationOrConjugation(ISerializationContext context, Predicate semanticObject) { }
	
	/**
	 * Contexts:
	 *     FeatureTypeMember returns EndFeatureMembership
	 *     EndFeatureMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship_comp+=PrefixAnnotation* 
	 *         visibility=VisibilityIndicator? 
	 *         direction=FeatureDirection? 
	 *         (isComposite?='composite' | isPortion?='portion')? 
	 *         isPort?='port'? 
	 *         ownedMemberFeature_comp=PackagedFeatureElement
	 *     )
	 */
	protected void sequence_EndFeatureMember_FeatureMemberFlags_TypeMemberPrefix(ISerializationContext context, EndFeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpressionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=Expression
	 */
	protected void sequence_ExpressionMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionMemberAccess().getOwnedMemberFeature_compExpressionParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpressionTyping returns FeatureTyping
	 *
	 * Constraint:
	 *     type=[Function|QualifiedName]
	 */
	protected void sequence_ExpressionTyping(ISerializationContext context, FeatureTyping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionTypingAccess().getTypeFunctionQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.FEATURE_TYPING__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExtentExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     ((ownedFeatureMembership_comp+=TypeReferenceMember operator='allInstances') | (operator='all' ownedFeatureMembership_comp+=TypeReferenceMember))
	 */
	protected void sequence_ExtentExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackagedFeatureElement returns Feature
	 *     Feature returns Feature
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         (
	 *             (
	 *                 (
	 *                     isSufficient?='all' | 
	 *                     (
	 *                         isSufficient?='all' 
	 *                         ((humanId=Name name=Name?) | name=Name) 
	 *                         (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'? (isOrdered?='ordered'? isNonunique?='nonunique'?)*)
	 *                     )
	 *                 )? 
	 *                 (
	 *                     (
	 *                         (ownedRelationship_comp+=FeatureTyping ownedRelationship_comp+=FeatureTyping*) | 
	 *                         (ownedRelationship_comp+=Subset ownedRelationship_comp+=Subset*) | 
	 *                         (ownedRelationship_comp+=Redefinition ownedRelationship_comp+=Redefinition*)
	 *                     ) 
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'?)?
	 *                 )+
	 *             ) | 
	 *             (isSufficient?='all' ownedRelationship_comp+=FeatureConjugation) | 
	 *             (
	 *                 isSufficient?='all' 
	 *                 ((humanId=Name name=Name?) | name=Name) 
	 *                 (
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'? (isOrdered?='ordered'? isNonunique?='nonunique'?)*) | 
	 *                     ownedRelationship_comp+=FeatureConjugation
	 *                 )?
	 *             )
	 *         )? 
	 *         ownedFeatureMembership_comp+=FeatureValue? 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NonFeatureTypeMember | 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember | 
	 *             ownedImport_comp+=PackageImport
	 *         )*
	 *     )
	 */
	protected void sequence_FeatureConjugationPart_FeatureDeclaration_FeatureDefinition_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypedBy_Typings_ValuePart(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackagedFeatureElement returns SuccessionItemFlow
	 *     SuccessionItemFlow returns SuccessionItemFlow
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         (
	 *             (
	 *                 (
	 *                     isSufficient?='all' | 
	 *                     (
	 *                         isSufficient?='all' 
	 *                         ((humanId=Name name=Name?) | name=Name) 
	 *                         (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'? (isOrdered?='ordered'? isNonunique?='nonunique'?)*)?
	 *                     )
	 *                 )? 
	 *                 (
	 *                     (
	 *                         (ownedRelationship_comp+=FeatureTyping ownedRelationship_comp+=FeatureTyping*) | 
	 *                         (ownedRelationship_comp+=Subset ownedRelationship_comp+=Subset*) | 
	 *                         (ownedRelationship_comp+=Redefinition ownedRelationship_comp+=Redefinition*)
	 *                     ) 
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'?)?
	 *                 )+ 
	 *                 (ownedFeatureMembership_comp+=ItemFeatureMember | ownedFeatureMembership_comp+=EmptyItemFeatureMember)
	 *             ) | 
	 *             (
	 *                 (isSufficient?='all' ownedRelationship_comp+=FeatureConjugation?)? 
	 *                 (ownedFeatureMembership_comp+=ItemFeatureMember | ownedFeatureMembership_comp+=EmptyItemFeatureMember)
	 *             ) | 
	 *             (
	 *                 isSufficient?='all' 
	 *                 ((humanId=Name name=Name?) | name=Name) 
	 *                 (
	 *                     (
	 *                         (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'? (isOrdered?='ordered'? isNonunique?='nonunique'?)*)? 
	 *                         (ownedFeatureMembership_comp+=ItemFeatureMember | ownedFeatureMembership_comp+=EmptyItemFeatureMember)
	 *                     ) | 
	 *                     (
	 *                         ownedRelationship_comp+=FeatureConjugation? 
	 *                         (ownedFeatureMembership_comp+=ItemFeatureMember | ownedFeatureMembership_comp+=EmptyItemFeatureMember)
	 *                     )
	 *                 )
	 *             ) | 
	 *             (isSufficient?='all'? ownedFeatureMembership_comp+=EmptyItemFeatureMember)
	 *         ) 
	 *         ownedFeatureMembership_comp+=ItemFlowEndMember 
	 *         ownedFeatureMembership_comp+=ItemFlowEndMember 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NonFeatureTypeMember | 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember | 
	 *             ownedImport_comp+=PackageImport
	 *         )*
	 *     )
	 */
	protected void sequence_FeatureConjugationPart_FeatureDeclaration_Identification_ItemFlowDeclaration_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_SuccessionItemFlow_TypeBody_TypedBy_Typings(ISerializationContext context, SuccessionItemFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackagedFeatureElement returns ItemFlow
	 *     ItemFlow returns ItemFlow
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         (
	 *             (
	 *                 (
	 *                     isSufficient?='all' | 
	 *                     (
	 *                         isSufficient?='all' 
	 *                         ((humanId=Name name=Name?) | name=Name) 
	 *                         (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'? (isOrdered?='ordered'? isNonunique?='nonunique'?)*)?
	 *                     )
	 *                 )? 
	 *                 (
	 *                     (
	 *                         (ownedRelationship_comp+=FeatureTyping ownedRelationship_comp+=FeatureTyping*) | 
	 *                         (ownedRelationship_comp+=Subset ownedRelationship_comp+=Subset*) | 
	 *                         (ownedRelationship_comp+=Redefinition ownedRelationship_comp+=Redefinition*)
	 *                     ) 
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'?)?
	 *                 )+ 
	 *                 (ownedFeatureMembership_comp+=ItemFeatureMember | ownedFeatureMembership_comp+=EmptyItemFeatureMember)
	 *             ) | 
	 *             (
	 *                 (isSufficient?='all' ownedRelationship_comp+=FeatureConjugation?)? 
	 *                 (ownedFeatureMembership_comp+=ItemFeatureMember | ownedFeatureMembership_comp+=EmptyItemFeatureMember)
	 *             ) | 
	 *             (
	 *                 isSufficient?='all' 
	 *                 ((humanId=Name name=Name?) | name=Name) 
	 *                 (
	 *                     (
	 *                         (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'? (isOrdered?='ordered'? isNonunique?='nonunique'?)*)? 
	 *                         (ownedFeatureMembership_comp+=ItemFeatureMember | ownedFeatureMembership_comp+=EmptyItemFeatureMember)
	 *                     ) | 
	 *                     (
	 *                         ownedRelationship_comp+=FeatureConjugation? 
	 *                         (ownedFeatureMembership_comp+=ItemFeatureMember | ownedFeatureMembership_comp+=EmptyItemFeatureMember)
	 *                     )
	 *                 )
	 *             ) | 
	 *             (isSufficient?='all'? ownedFeatureMembership_comp+=EmptyItemFeatureMember)
	 *         ) 
	 *         ownedFeatureMembership_comp+=ItemFlowEndMember 
	 *         ownedFeatureMembership_comp+=ItemFlowEndMember 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NonFeatureTypeMember | 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember | 
	 *             ownedImport_comp+=PackageImport
	 *         )*
	 *     )
	 */
	protected void sequence_FeatureConjugationPart_FeatureDeclaration_Identification_ItemFlow_ItemFlowDeclaration_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_TypeBody_TypedBy_Typings(ISerializationContext context, ItemFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackagedFeatureElement returns Succession
	 *     Succession returns Succession
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='abstract'? 
	 *         (
	 *             (
	 *                 (
	 *                     isSufficient?='all' | 
	 *                     (
	 *                         isSufficient?='all' 
	 *                         ((humanId=Name name=Name?) | name=Name) 
	 *                         (ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)
	 *                     )
	 *                 )? 
	 *                 (
	 *                     (
	 *                         (ownedRelationship_comp+=FeatureTyping ownedRelationship_comp+=FeatureTyping*) | 
	 *                         (ownedRelationship_comp+=Subset ownedRelationship_comp+=Subset*) | 
	 *                         (ownedRelationship_comp+=Redefinition ownedRelationship_comp+=Redefinition*)
	 *                     ) 
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*)
	 *                 )+
	 *             ) | 
	 *             (isSufficient?='all' ownedRelationship_comp+=FeatureConjugation) | 
	 *             (
	 *                 isSufficient?='all' 
	 *                 ((humanId=Name name=Name?) | name=Name) 
	 *                 (
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered' | isNonunique?='nonunique')*) | 
	 *                     ownedRelationship_comp+=FeatureConjugation
	 *                 )?
	 *             ) | 
	 *             isSufficient?='all'
	 *         )? 
	 *         ownedFeatureMembership_comp+=ConnectorEndMember 
	 *         ownedFeatureMembership_comp+=ConnectorEndMember 
	 *         (
	 *             documentation_comp+=OwnedDocumentation | 
	 *             ownedMembership_comp+=NonFeatureTypeMember | 
	 *             ownedFeatureMembership_comp+=FeatureTypeMember | 
	 *             ownedImport_comp+=PackageImport
	 *         )*
	 *     )
	 */
	protected void sequence_FeatureConjugationPart_FeatureDeclaration_Identification_MultiplicityPart_Redefines_Redefinitions_Subsets_Subsettings_Succession_SuccessionDeclaration_TypeBody_TypedBy_Typings(ISerializationContext context, Succession semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureConjugation returns Conjugation
	 *
	 * Constraint:
	 *     originalType=[Feature|QualifiedName]
	 */
	protected void sequence_FeatureConjugation(ISerializationContext context, Conjugation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.CONJUGATION__ORIGINAL_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.CONJUGATION__ORIGINAL_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFeatureConjugationAccess().getOriginalTypeFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.CONJUGATION__ORIGINAL_TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FeatureTypeMember returns FeatureMembership
	 *     FeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship_comp+=PrefixAnnotation* 
	 *         visibility=VisibilityIndicator? 
	 *         direction=FeatureDirection? 
	 *         (isComposite?='composite' | isPortion?='portion')? 
	 *         isPort?='port'? 
	 *         (ownedMemberFeature_comp=PackagedFeatureElement | (memberName=Name? memberFeature=[Feature|QualifiedName]))
	 *     )
	 */
	protected void sequence_FeatureMember_FeatureMemberFlags_TypeMemberPrefix(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns FeatureReferenceExpression
	 *     ConditionalExpression returns FeatureReferenceExpression
	 *     ConditionalExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     NullCoalescingExpression returns FeatureReferenceExpression
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     ConditionalOrExpression returns FeatureReferenceExpression
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     ConditionalAndExpression returns FeatureReferenceExpression
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     OrExpression returns FeatureReferenceExpression
	 *     OrExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     XorExpression returns FeatureReferenceExpression
	 *     XorExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     AndExpression returns FeatureReferenceExpression
	 *     AndExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     EqualityExpression returns FeatureReferenceExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     ClassificationExpression returns FeatureReferenceExpression
	 *     ClassificationExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     RelationalExpression returns FeatureReferenceExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     AdditiveExpression returns FeatureReferenceExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     MultiplicativeExpression returns FeatureReferenceExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     ExponentiationExpression returns FeatureReferenceExpression
	 *     ExponentiationExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     UnitsExpression returns FeatureReferenceExpression
	 *     UnitsExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     UnaryExpression returns FeatureReferenceExpression
	 *     SequenceAccessExpression returns FeatureReferenceExpression
	 *     SequenceAccessExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     PrimaryExpression returns FeatureReferenceExpression
	 *     PrimaryExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     BaseExpression returns FeatureReferenceExpression
	 *     FeatureReferenceExpression returns FeatureReferenceExpression
	 *     SequenceConstructionExpression returns FeatureReferenceExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_0_0 returns FeatureReferenceExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_1_0 returns FeatureReferenceExpression
	 *     SequenceElementList returns FeatureReferenceExpression
	 *     SequenceElementList.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *
	 * Constraint:
	 *     ownedFeatureMembership_comp+=FeatureReferenceMember
	 */
	protected void sequence_FeatureReferenceExpression(ISerializationContext context, FeatureReferenceExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureReferenceMember returns ReturnParameterMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=FeatureReference
	 */
	protected void sequence_FeatureReferenceMember(ISerializationContext context, ReturnParameterMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFeatureReferenceMemberAccess().getOwnedMemberFeature_compFeatureReferenceParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FeatureReference returns Feature
	 *
	 * Constraint:
	 *     ownedRelationship_comp+=Subset
	 */
	protected void sequence_FeatureReference(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureTyping returns FeatureTyping
	 *
	 * Constraint:
	 *     type=[Type|QualifiedName]
	 */
	protected void sequence_FeatureTyping(ISerializationContext context, FeatureTyping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFeatureTypingAccess().getTypeTypeQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.FEATURE_TYPING__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FeatureValue returns FeatureValue
	 *
	 * Constraint:
	 *     value_comp=Expression
	 */
	protected void sequence_FeatureValue(ISerializationContext context, FeatureValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_VALUE__VALUE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_VALUE__VALUE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFeatureValueAccess().getValue_compExpressionParserRuleCall_0(), semanticObject.getValue_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Feature
	 *
	 * Constraint:
	 *     (
	 *         isSufficient?='all'? 
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         ((humanId=Name name=Name?) | name=Name) 
	 *                         (ownedFeatureMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)?
	 *                     ) | 
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)
	 *                 ) 
	 *                 (ownedRelationship_comp+=FeatureTyping | ownedRelationship_comp+=Subset | ownedRelationship_comp+=Redefinition)+
	 *             ) | 
	 *             (ownedRelationship_comp+=FeatureTyping | ownedRelationship_comp+=Subset | ownedRelationship_comp+=Redefinition)+
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_ParameterDeclaration_Redefines_Subsets_TypedBy(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StepParameter returns Feature
	 *
	 * Constraint:
	 *     (
	 *         isSufficient?='all'? 
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         ((humanId=Name name=Name?) | name=Name) 
	 *                         (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'? (isOrdered?='ordered'? isNonunique?='nonunique'?)*)?
	 *                     ) | 
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'? (isOrdered?='ordered'? isNonunique?='nonunique'?)*)
	 *                 ) 
	 *                 (ownedRelationship_comp+=FeatureTyping | ownedRelationship_comp+=Subset | ownedRelationship_comp+=Redefinition)+
	 *             ) | 
	 *             (ownedRelationship_comp+=FeatureTyping | ownedRelationship_comp+=Subset | ownedRelationship_comp+=Redefinition)+
	 *         )? 
	 *         ownedFeatureMembership_comp+=FeatureValue?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_ParameterDeclaration_Redefines_Subsets_TypedBy_ValuePart(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns BooleanExpression
	 *
	 * Constraint:
	 *     (
	 *         isSufficient?='all'? 
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         ((humanId=Name name=Name?) | name=Name) 
	 *                         (ownedFeatureMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)?
	 *                     ) | 
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)
	 *                 ) 
	 *                 (ownedRelationship_comp+=FeatureTyping | ownedRelationship_comp+=Subset | ownedRelationship_comp+=Redefinition)+
	 *             ) | 
	 *             (ownedRelationship_comp+=FeatureTyping | ownedRelationship_comp+=Subset | ownedRelationship_comp+=Redefinition)+
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy(ISerializationContext context, BooleanExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Expression
	 *
	 * Constraint:
	 *     (
	 *         isSufficient?='all'? 
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         ((humanId=Name name=Name?) | name=Name) 
	 *                         (ownedFeatureMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)?
	 *                     ) | 
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)
	 *                 ) 
	 *                 (ownedRelationship_comp+=FeatureTyping | ownedRelationship_comp+=Subset | ownedRelationship_comp+=Redefinition)+
	 *             ) | 
	 *             (ownedRelationship_comp+=FeatureTyping | ownedRelationship_comp+=Subset | ownedRelationship_comp+=Redefinition)+
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Step
	 *
	 * Constraint:
	 *     (
	 *         isSufficient?='all'? 
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         ((humanId=Name name=Name?) | name=Name) 
	 *                         (ownedFeatureMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)?
	 *                     ) | 
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember isOrdered?='ordered'? (isNonunique?='nonunique'? isOrdered?='ordered'?)*)
	 *                 ) 
	 *                 (ownedRelationship_comp+=FeatureTyping | ownedRelationship_comp+=Subset | ownedRelationship_comp+=Redefinition)+
	 *             ) | 
	 *             (ownedRelationship_comp+=FeatureTyping | ownedRelationship_comp+=Subset | ownedRelationship_comp+=Redefinition)+
	 *         )?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy(ISerializationContext context, Step semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StepParameter returns BooleanExpression
	 *
	 * Constraint:
	 *     (
	 *         isSufficient?='all'? 
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         ((humanId=Name name=Name?) | name=Name) 
	 *                         (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'? (isOrdered?='ordered'? isNonunique?='nonunique'?)*)?
	 *                     ) | 
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'? (isOrdered?='ordered'? isNonunique?='nonunique'?)*)
	 *                 ) 
	 *                 (ownedRelationship_comp+=FeatureTyping | ownedRelationship_comp+=Subset | ownedRelationship_comp+=Redefinition)+
	 *             ) | 
	 *             (ownedRelationship_comp+=FeatureTyping | ownedRelationship_comp+=Subset | ownedRelationship_comp+=Redefinition)+
	 *         )? 
	 *         ownedFeatureMembership_comp+=FeatureValue?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy_ValuePart(ISerializationContext context, BooleanExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StepParameter returns Expression
	 *
	 * Constraint:
	 *     (
	 *         isSufficient?='all'? 
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         ((humanId=Name name=Name?) | name=Name) 
	 *                         (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'? (isOrdered?='ordered'? isNonunique?='nonunique'?)*)?
	 *                     ) | 
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'? (isOrdered?='ordered'? isNonunique?='nonunique'?)*)
	 *                 ) 
	 *                 (ownedRelationship_comp+=FeatureTyping | ownedRelationship_comp+=Subset | ownedRelationship_comp+=Redefinition)+
	 *             ) | 
	 *             (ownedRelationship_comp+=FeatureTyping | ownedRelationship_comp+=Subset | ownedRelationship_comp+=Redefinition)+
	 *         )? 
	 *         ownedFeatureMembership_comp+=FeatureValue?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy_ValuePart(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StepParameter returns Step
	 *
	 * Constraint:
	 *     (
	 *         isSufficient?='all'? 
	 *         (
	 *             (
	 *                 (
	 *                     (
	 *                         ((humanId=Name name=Name?) | name=Name) 
	 *                         (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'? (isOrdered?='ordered'? isNonunique?='nonunique'?)*)?
	 *                     ) | 
	 *                     (ownedFeatureMembership_comp+=MultiplicityMember isNonunique?='nonunique'? (isOrdered?='ordered'? isNonunique?='nonunique'?)*)
	 *                 ) 
	 *                 (ownedRelationship_comp+=FeatureTyping | ownedRelationship_comp+=Subset | ownedRelationship_comp+=Redefinition)+
	 *             ) | 
	 *             (ownedRelationship_comp+=FeatureTyping | ownedRelationship_comp+=Subset | ownedRelationship_comp+=Redefinition)+
	 *         )? 
	 *         ownedFeatureMembership_comp+=FeatureValue?
	 *     )
	 */
	protected void sequence_Identification_MultiplicityPart_Parameter_ParameterDeclaration_Redefines_Subsets_TypedBy_ValuePart(ISerializationContext context, Step semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Package returns Package
	 *     PackagedNonFeatureElement returns Package
	 *
	 * Constraint:
	 *     (
	 *         ((humanId=Name name=Name?) | name=Name)? 
	 *         (documentation_comp+=OwnedDocumentation | ownedMembership_comp+=PackageMember | ownedImport_comp+=PackageImport)*
	 *     )
	 */
	protected void sequence_Identification_PackageBody(ISerializationContext context, org.omg.sysml.lang.sysml.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TextualRepresentation returns TextualRepresentation
	 *     PackagedNonFeatureElement returns TextualRepresentation
	 *
	 * Constraint:
	 *     (
	 *         ((((humanId=Name name=Name?) | name=Name)? ownedRelationship_comp+=Annotation) | ownedRelationship_comp+=EmptyAnnotation) 
	 *         language=STRING_VALUE 
	 *         body=ML_COMMENT
	 *     )
	 */
	protected void sequence_Identification_TextualRepresentation(ISerializationContext context, TextualRepresentation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnitDocumentation returns Comment
	 *
	 * Constraint:
	 *     ((((humanId=Name name=Name?) | name=Name)? body=ML_COMMENT) | (humanId=Name? body=DOCUMENTATION_COMMENT))
	 */
	protected void sequence_Identification_UnitDocumentation(ISerializationContext context, Comment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns InvocationExpression
	 *     ConditionalExpression returns InvocationExpression
	 *     ConditionalExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     NullCoalescingExpression returns InvocationExpression
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     ConditionalOrExpression returns InvocationExpression
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     ConditionalAndExpression returns InvocationExpression
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     OrExpression returns InvocationExpression
	 *     OrExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     XorExpression returns InvocationExpression
	 *     XorExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     AndExpression returns InvocationExpression
	 *     AndExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     EqualityExpression returns InvocationExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     ClassificationExpression returns InvocationExpression
	 *     ClassificationExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     RelationalExpression returns InvocationExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     AdditiveExpression returns InvocationExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     MultiplicativeExpression returns InvocationExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     ExponentiationExpression returns InvocationExpression
	 *     ExponentiationExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     UnitsExpression returns InvocationExpression
	 *     UnitsExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     UnaryExpression returns InvocationExpression
	 *     SequenceAccessExpression returns InvocationExpression
	 *     SequenceAccessExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     PrimaryExpression returns InvocationExpression
	 *     PrimaryExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     BaseExpression returns InvocationExpression
	 *     InvocationExpression returns InvocationExpression
	 *     SequenceConstructionExpression returns InvocationExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_0_0 returns InvocationExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_1_0 returns InvocationExpression
	 *     SequenceElementList returns InvocationExpression
	 *     SequenceElementList.OperatorExpression_1_0 returns InvocationExpression
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship_comp+=FeatureTyping 
	 *         (
	 *             (ownedFeatureMembership_comp+=ExpressionMember ownedFeatureMembership_comp+=ExpressionMember*) | 
	 *             (ownedFeatureMembership_comp+=NamedExpressionMember ownedFeatureMembership_comp+=NamedExpressionMember*)
	 *         )?
	 *     )
	 */
	protected void sequence_InvocationExpression_NamedTuple_PositionalTuple(ISerializationContext context, InvocationExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (memberName=Name? ownedMemberFeature_comp=ItemFeatureTyping)
	 */
	protected void sequence_ItemFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFeatureTyping returns ItemFeature
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=FeatureTyping ownedFeatureMembership_comp+=MultiplicityMember?)
	 */
	protected void sequence_ItemFeatureTyping(ISerializationContext context, ItemFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowEndMember returns EndFeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=ItemFlowEnd
	 */
	protected void sequence_ItemFlowEndMember(ISerializationContext context, EndFeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getItemFlowEndMemberAccess().getOwnedMemberFeature_compItemFlowEndParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowEnd returns ItemFlowEnd
	 *
	 * Constraint:
	 *     ownedFeatureMembership_comp+=ItemFlowFeatureMember
	 */
	protected void sequence_ItemFlowEnd(ISerializationContext context, ItemFlowEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowFeatureMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=ItemFlowFeature
	 */
	protected void sequence_ItemFlowFeatureMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getItemFlowFeatureMemberAccess().getOwnedMemberFeature_compItemFlowFeatureParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ItemFlowFeature returns ItemFlowFeature
	 *
	 * Constraint:
	 *     ownedRelationship_comp+=Redefinition
	 */
	protected void sequence_ItemFlowFeature(ISerializationContext context, ItemFlowFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultiplicityMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=Multiplicity
	 */
	protected void sequence_MultiplicityMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiplicityMemberAccess().getOwnedMemberFeature_compMultiplicityParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Multiplicity returns MultiplicityRange
	 *
	 * Constraint:
	 *     (ownedFeatureMembership_comp+=NaturalLiteralMember? ownedFeatureMembership_comp+=UnlimitedNaturalLiteralMember)
	 */
	protected void sequence_Multiplicity(ISerializationContext context, MultiplicityRange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NamedExpressionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (memberName=Name ownedMemberFeature_comp=Expression)
	 */
	protected void sequence_NamedExpressionMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.MEMBERSHIP__MEMBER_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.MEMBERSHIP__MEMBER_NAME));
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNamedExpressionMemberAccess().getMemberNameNameParserRuleCall_0_0(), semanticObject.getMemberName());
		feeder.accept(grammarAccess.getNamedExpressionMemberAccess().getOwnedMemberFeature_compExpressionParserRuleCall_2_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns LiteralInteger
	 *     ConditionalExpression returns LiteralInteger
	 *     ConditionalExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     NullCoalescingExpression returns LiteralInteger
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     ConditionalOrExpression returns LiteralInteger
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     ConditionalAndExpression returns LiteralInteger
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     OrExpression returns LiteralInteger
	 *     OrExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     XorExpression returns LiteralInteger
	 *     XorExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     AndExpression returns LiteralInteger
	 *     AndExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     EqualityExpression returns LiteralInteger
	 *     EqualityExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     ClassificationExpression returns LiteralInteger
	 *     ClassificationExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     RelationalExpression returns LiteralInteger
	 *     RelationalExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     AdditiveExpression returns LiteralInteger
	 *     AdditiveExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     MultiplicativeExpression returns LiteralInteger
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     ExponentiationExpression returns LiteralInteger
	 *     ExponentiationExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     UnitsExpression returns LiteralInteger
	 *     UnitsExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     UnaryExpression returns LiteralInteger
	 *     SequenceAccessExpression returns LiteralInteger
	 *     SequenceAccessExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     PrimaryExpression returns LiteralInteger
	 *     PrimaryExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     BaseExpression returns LiteralInteger
	 *     SequenceConstructionExpression returns LiteralInteger
	 *     SequenceConstructionExpression.OperatorExpression_1_2_0_0 returns LiteralInteger
	 *     SequenceConstructionExpression.OperatorExpression_1_2_1_0 returns LiteralInteger
	 *     SequenceElementList returns LiteralInteger
	 *     SequenceElementList.OperatorExpression_1_0 returns LiteralInteger
	 *     LiteralExpression returns LiteralInteger
	 *     NaturalLiteralExpression returns LiteralInteger
	 *     UnlimitedNaturalLiteralExpression returns LiteralInteger
	 *
	 * Constraint:
	 *     value=DECIMAL_VALUE
	 */
	protected void sequence_NaturalLiteralExpression(ISerializationContext context, LiteralInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.LITERAL_INTEGER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.LITERAL_INTEGER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNaturalLiteralExpressionAccess().getValueDECIMAL_VALUETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NaturalLiteralMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=NaturalLiteralExpression
	 */
	protected void sequence_NaturalLiteralMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNaturalLiteralMemberAccess().getOwnedMemberFeature_compNaturalLiteralExpressionParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PackageMember returns Membership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship_comp+=PrefixAnnotation* 
	 *         visibility=PackageElementVisibilityIndicator? 
	 *         (
	 *             ownedMemberElement_comp=PackagedNonFeatureElement | 
	 *             (memberElement=[Element|QualifiedName] memberName=Name?) | 
	 *             ownedMemberElement_comp=PackagedFeatureElement
	 *         )
	 *     )
	 */
	protected void sequence_NonFeatureMemberElement_PackageFeatureMemberElement_PackageMemberPrefix(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonFeatureTypeMember returns Membership
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship_comp+=PrefixAnnotation* 
	 *         visibility=VisibilityIndicator? 
	 *         (ownedMemberElement_comp=PackagedNonFeatureElement | (memberElement=[Element|QualifiedName] memberName=Name?))
	 *     )
	 */
	protected void sequence_NonFeatureMemberElement_TypeMemberPrefix(ISerializationContext context, Membership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns NullExpression
	 *     ConditionalExpression returns NullExpression
	 *     ConditionalExpression.OperatorExpression_1_0 returns NullExpression
	 *     NullCoalescingExpression returns NullExpression
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns NullExpression
	 *     ConditionalOrExpression returns NullExpression
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns NullExpression
	 *     ConditionalAndExpression returns NullExpression
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns NullExpression
	 *     OrExpression returns NullExpression
	 *     OrExpression.OperatorExpression_1_0 returns NullExpression
	 *     XorExpression returns NullExpression
	 *     XorExpression.OperatorExpression_1_0 returns NullExpression
	 *     AndExpression returns NullExpression
	 *     AndExpression.OperatorExpression_1_0 returns NullExpression
	 *     EqualityExpression returns NullExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns NullExpression
	 *     ClassificationExpression returns NullExpression
	 *     ClassificationExpression.OperatorExpression_1_0 returns NullExpression
	 *     RelationalExpression returns NullExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns NullExpression
	 *     AdditiveExpression returns NullExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns NullExpression
	 *     MultiplicativeExpression returns NullExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns NullExpression
	 *     ExponentiationExpression returns NullExpression
	 *     ExponentiationExpression.OperatorExpression_1_0 returns NullExpression
	 *     UnitsExpression returns NullExpression
	 *     UnitsExpression.OperatorExpression_1_0 returns NullExpression
	 *     UnaryExpression returns NullExpression
	 *     SequenceAccessExpression returns NullExpression
	 *     SequenceAccessExpression.OperatorExpression_1_0 returns NullExpression
	 *     PrimaryExpression returns NullExpression
	 *     PrimaryExpression.OperatorExpression_1_0 returns NullExpression
	 *     BaseExpression returns NullExpression
	 *     SequenceConstructionExpression returns NullExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_0_0 returns NullExpression
	 *     SequenceConstructionExpression.OperatorExpression_1_2_1_0 returns NullExpression
	 *     SequenceElementList returns NullExpression
	 *     SequenceElementList.OperatorExpression_1_0 returns NullExpression
	 *     NullExpression returns NullExpression
	 *
	 * Constraint:
	 *     {NullExpression}
	 */
	protected void sequence_NullExpression_SequenceConstructionExpression(ISerializationContext context, NullExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedDocumentation returns Documentation
	 *
	 * Constraint:
	 *     documentingComment_comp=DocumentationComment
	 */
	protected void sequence_OwnedDocumentation(ISerializationContext context, Documentation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.DOCUMENTATION__DOCUMENTING_COMMENT_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.DOCUMENTATION__DOCUMENTING_COMMENT_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedDocumentationAccess().getDocumentingComment_compDocumentationCommentParserRuleCall_0(), semanticObject.getDocumentingComment_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RootPackage returns Package
	 *
	 * Constraint:
	 *     (documentation_comp+=OwnedDocumentation | ownedMembership_comp+=PackageMember | ownedImport_comp+=PackageImport)*
	 */
	protected void sequence_PackageBodyElement_RootPackage(ISerializationContext context, org.omg.sysml.lang.sysml.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackageImport returns Import
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship_comp+=PrefixAnnotation* 
	 *         visibility=PackageElementVisibilityIndicator? 
	 *         (importedPackage=[Package|Name] | importedPackage=[Package|ColonQualifiedName] | importedPackage=[Package|DotQualifiedName])
	 *     )
	 */
	protected void sequence_PackageImport(ISerializationContext context, Import semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     (direction=FeatureDirection? ownedMemberParameter_comp=Parameter)
	 */
	protected void sequence_ParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrefixAnnotation returns Annotation
	 *
	 * Constraint:
	 *     ownedRelatedElement_comp+=Documentation
	 */
	protected void sequence_PrefixAnnotation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns LiteralReal
	 *     ConditionalExpression returns LiteralReal
	 *     ConditionalExpression.OperatorExpression_1_0 returns LiteralReal
	 *     NullCoalescingExpression returns LiteralReal
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns LiteralReal
	 *     ConditionalOrExpression returns LiteralReal
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns LiteralReal
	 *     ConditionalAndExpression returns LiteralReal
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns LiteralReal
	 *     OrExpression returns LiteralReal
	 *     OrExpression.OperatorExpression_1_0 returns LiteralReal
	 *     XorExpression returns LiteralReal
	 *     XorExpression.OperatorExpression_1_0 returns LiteralReal
	 *     AndExpression returns LiteralReal
	 *     AndExpression.OperatorExpression_1_0 returns LiteralReal
	 *     EqualityExpression returns LiteralReal
	 *     EqualityExpression.OperatorExpression_1_0 returns LiteralReal
	 *     ClassificationExpression returns LiteralReal
	 *     ClassificationExpression.OperatorExpression_1_0 returns LiteralReal
	 *     RelationalExpression returns LiteralReal
	 *     RelationalExpression.OperatorExpression_1_0 returns LiteralReal
	 *     AdditiveExpression returns LiteralReal
	 *     AdditiveExpression.OperatorExpression_1_0 returns LiteralReal
	 *     MultiplicativeExpression returns LiteralReal
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns LiteralReal
	 *     ExponentiationExpression returns LiteralReal
	 *     ExponentiationExpression.OperatorExpression_1_0 returns LiteralReal
	 *     UnitsExpression returns LiteralReal
	 *     UnitsExpression.OperatorExpression_1_0 returns LiteralReal
	 *     UnaryExpression returns LiteralReal
	 *     SequenceAccessExpression returns LiteralReal
	 *     SequenceAccessExpression.OperatorExpression_1_0 returns LiteralReal
	 *     PrimaryExpression returns LiteralReal
	 *     PrimaryExpression.OperatorExpression_1_0 returns LiteralReal
	 *     BaseExpression returns LiteralReal
	 *     SequenceConstructionExpression returns LiteralReal
	 *     SequenceConstructionExpression.OperatorExpression_1_2_0_0 returns LiteralReal
	 *     SequenceConstructionExpression.OperatorExpression_1_2_1_0 returns LiteralReal
	 *     SequenceElementList returns LiteralReal
	 *     SequenceElementList.OperatorExpression_1_0 returns LiteralReal
	 *     LiteralExpression returns LiteralReal
	 *     RealLiteralExpression returns LiteralReal
	 *
	 * Constraint:
	 *     value=RealValue
	 */
	protected void sequence_RealLiteralExpression(ISerializationContext context, LiteralReal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.LITERAL_REAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.LITERAL_REAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRealLiteralExpressionAccess().getValueRealValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Redefinition returns Redefinition
	 *
	 * Constraint:
	 *     redefinedFeature=[Feature|QualifiedName]
	 */
	protected void sequence_Redefinition(ISerializationContext context, Redefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRedefinitionAccess().getRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ResultExpressionMember returns ResultExpressionMembership
	 *
	 * Constraint:
	 *     (ownedRelationship_comp+=PrefixAnnotation* visibility=VisibilityIndicator? ownedResultExpression_comp=Expression)
	 */
	protected void sequence_ResultExpressionMember_TypeMemberPrefix(ISerializationContext context, ResultExpressionMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReturnParameterMember returns ReturnParameterMembership
	 *
	 * Constraint:
	 *     ownedMemberParameter_comp=Parameter
	 */
	protected void sequence_ReturnParameterMember(ISerializationContext context, ReturnParameterMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.PARAMETER_MEMBERSHIP__OWNED_MEMBER_PARAMETER_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.PARAMETER_MEMBERSHIP__OWNED_MEMBER_PARAMETER_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReturnParameterMemberAccess().getOwnedMemberParameter_compParameterParserRuleCall_0(), semanticObject.getOwnedMemberParameter_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StepParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     (direction=FeatureDirection? ownedMemberParameter_comp=StepParameter)
	 */
	protected void sequence_StepParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns LiteralString
	 *     ConditionalExpression returns LiteralString
	 *     ConditionalExpression.OperatorExpression_1_0 returns LiteralString
	 *     NullCoalescingExpression returns LiteralString
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns LiteralString
	 *     ConditionalOrExpression returns LiteralString
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns LiteralString
	 *     ConditionalAndExpression returns LiteralString
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns LiteralString
	 *     OrExpression returns LiteralString
	 *     OrExpression.OperatorExpression_1_0 returns LiteralString
	 *     XorExpression returns LiteralString
	 *     XorExpression.OperatorExpression_1_0 returns LiteralString
	 *     AndExpression returns LiteralString
	 *     AndExpression.OperatorExpression_1_0 returns LiteralString
	 *     EqualityExpression returns LiteralString
	 *     EqualityExpression.OperatorExpression_1_0 returns LiteralString
	 *     ClassificationExpression returns LiteralString
	 *     ClassificationExpression.OperatorExpression_1_0 returns LiteralString
	 *     RelationalExpression returns LiteralString
	 *     RelationalExpression.OperatorExpression_1_0 returns LiteralString
	 *     AdditiveExpression returns LiteralString
	 *     AdditiveExpression.OperatorExpression_1_0 returns LiteralString
	 *     MultiplicativeExpression returns LiteralString
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns LiteralString
	 *     ExponentiationExpression returns LiteralString
	 *     ExponentiationExpression.OperatorExpression_1_0 returns LiteralString
	 *     UnitsExpression returns LiteralString
	 *     UnitsExpression.OperatorExpression_1_0 returns LiteralString
	 *     UnaryExpression returns LiteralString
	 *     SequenceAccessExpression returns LiteralString
	 *     SequenceAccessExpression.OperatorExpression_1_0 returns LiteralString
	 *     PrimaryExpression returns LiteralString
	 *     PrimaryExpression.OperatorExpression_1_0 returns LiteralString
	 *     BaseExpression returns LiteralString
	 *     SequenceConstructionExpression returns LiteralString
	 *     SequenceConstructionExpression.OperatorExpression_1_2_0_0 returns LiteralString
	 *     SequenceConstructionExpression.OperatorExpression_1_2_1_0 returns LiteralString
	 *     SequenceElementList returns LiteralString
	 *     SequenceElementList.OperatorExpression_1_0 returns LiteralString
	 *     LiteralExpression returns LiteralString
	 *     StringLiteralExpression returns LiteralString
	 *
	 * Constraint:
	 *     value=STRING_VALUE
	 */
	protected void sequence_StringLiteralExpression(ISerializationContext context, LiteralString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.LITERAL_STRING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.LITERAL_STRING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringLiteralExpressionAccess().getValueSTRING_VALUETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Subset returns Subsetting
	 *
	 * Constraint:
	 *     subsettedFeature=[Feature|QualifiedName]
	 */
	protected void sequence_Subset(ISerializationContext context, Subsetting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.SUBSETTING__SUBSETTED_FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.SUBSETTING__SUBSETTED_FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSubsetAccess().getSubsettedFeatureFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.SUBSETTING__SUBSETTED_FEATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Superclassing returns Superclassing
	 *
	 * Constraint:
	 *     superclass=[Classifier|QualifiedName]
	 */
	protected void sequence_Superclassing(ISerializationContext context, Superclassing semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.SUPERCLASSING__SUPERCLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.SUPERCLASSING__SUPERCLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSuperclassingAccess().getSuperclassClassifierQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.SUPERCLASSING__SUPERCLASS, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TrueLiteralExpression returns LiteralBoolean
	 *
	 * Constraint:
	 *     {LiteralBoolean}
	 */
	protected void sequence_TrueLiteralExpression(ISerializationContext context, LiteralBoolean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TrueLiteralMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=TrueLiteralExpression
	 */
	protected void sequence_TrueLiteralMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTrueLiteralMemberAccess().getOwnedMemberFeature_compTrueLiteralExpressionParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeReferenceMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=TypeReference
	 */
	protected void sequence_TypeReferenceMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeReferenceMemberAccess().getOwnedMemberFeature_compTypeReferenceParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeReference returns Feature
	 *
	 * Constraint:
	 *     ownedRelationship_comp+=FeatureTyping
	 */
	protected void sequence_TypeReference(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnitAnnotation returns Annotation
	 *
	 * Constraint:
	 *     ownedRelatedElement_comp+=UnitDocumentation
	 */
	protected void sequence_UnitAnnotation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns LiteralUnbounded
	 *     ConditionalExpression returns LiteralUnbounded
	 *     ConditionalExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     NullCoalescingExpression returns LiteralUnbounded
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     ConditionalOrExpression returns LiteralUnbounded
	 *     ConditionalOrExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     ConditionalAndExpression returns LiteralUnbounded
	 *     ConditionalAndExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     OrExpression returns LiteralUnbounded
	 *     OrExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     XorExpression returns LiteralUnbounded
	 *     XorExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     AndExpression returns LiteralUnbounded
	 *     AndExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     EqualityExpression returns LiteralUnbounded
	 *     EqualityExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     ClassificationExpression returns LiteralUnbounded
	 *     ClassificationExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     RelationalExpression returns LiteralUnbounded
	 *     RelationalExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     AdditiveExpression returns LiteralUnbounded
	 *     AdditiveExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     MultiplicativeExpression returns LiteralUnbounded
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     ExponentiationExpression returns LiteralUnbounded
	 *     ExponentiationExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     UnitsExpression returns LiteralUnbounded
	 *     UnitsExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     UnaryExpression returns LiteralUnbounded
	 *     SequenceAccessExpression returns LiteralUnbounded
	 *     SequenceAccessExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     PrimaryExpression returns LiteralUnbounded
	 *     PrimaryExpression.OperatorExpression_1_0 returns LiteralUnbounded
	 *     BaseExpression returns LiteralUnbounded
	 *     SequenceConstructionExpression returns LiteralUnbounded
	 *     SequenceConstructionExpression.OperatorExpression_1_2_0_0 returns LiteralUnbounded
	 *     SequenceConstructionExpression.OperatorExpression_1_2_1_0 returns LiteralUnbounded
	 *     SequenceElementList returns LiteralUnbounded
	 *     SequenceElementList.OperatorExpression_1_0 returns LiteralUnbounded
	 *     LiteralExpression returns LiteralUnbounded
	 *     UnlimitedNaturalLiteralExpression returns LiteralUnbounded
	 *
	 * Constraint:
	 *     {LiteralUnbounded}
	 */
	protected void sequence_UnlimitedNaturalLiteralExpression(ISerializationContext context, LiteralUnbounded semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnlimitedNaturalLiteralMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedMemberFeature_comp=UnlimitedNaturalLiteralExpression
	 */
	protected void sequence_UnlimitedNaturalLiteralMember(ISerializationContext context, FeatureMembership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_MEMBERSHIP__OWNED_MEMBER_FEATURE_COMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUnlimitedNaturalLiteralMemberAccess().getOwnedMemberFeature_compUnlimitedNaturalLiteralExpressionParserRuleCall_0(), semanticObject.getOwnedMemberFeature_comp());
		feeder.finish();
	}
	
	
}
