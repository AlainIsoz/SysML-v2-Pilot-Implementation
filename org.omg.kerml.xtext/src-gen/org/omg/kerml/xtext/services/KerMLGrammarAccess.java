/*
 * generated by Xtext 2.20.0
 */
package org.omg.kerml.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KerMLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Unit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnonymousPackageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPackageUnitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClassifierUnitDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cClassUnitParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDataTypeUnitParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAssociationUnitParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cInteractionUnitParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBehaviorUnitParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cFunctionUnitParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cPredicateUnitParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cFeatureUnitParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		///* UNITS */ Unit SysML::Package:
		//	AnonymousPackage
		//	| PackageUnit
		//	| ClassifierUnitDefinition
		//	| ClassUnit
		//	| DataTypeUnit
		//	| AssociationUnit
		//	| InteractionUnit
		//	| BehaviorUnit
		//	| FunctionUnit
		//	| PredicateUnit
		//	| FeatureUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//AnonymousPackage | PackageUnit | ClassifierUnitDefinition | ClassUnit | DataTypeUnit | AssociationUnit | InteractionUnit
		//| BehaviorUnit | FunctionUnit | PredicateUnit | FeatureUnit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AnonymousPackage
		public RuleCall getAnonymousPackageParserRuleCall_0() { return cAnonymousPackageParserRuleCall_0; }
		
		//PackageUnit
		public RuleCall getPackageUnitParserRuleCall_1() { return cPackageUnitParserRuleCall_1; }
		
		//ClassifierUnitDefinition
		public RuleCall getClassifierUnitDefinitionParserRuleCall_2() { return cClassifierUnitDefinitionParserRuleCall_2; }
		
		//ClassUnit
		public RuleCall getClassUnitParserRuleCall_3() { return cClassUnitParserRuleCall_3; }
		
		//DataTypeUnit
		public RuleCall getDataTypeUnitParserRuleCall_4() { return cDataTypeUnitParserRuleCall_4; }
		
		//AssociationUnit
		public RuleCall getAssociationUnitParserRuleCall_5() { return cAssociationUnitParserRuleCall_5; }
		
		//InteractionUnit
		public RuleCall getInteractionUnitParserRuleCall_6() { return cInteractionUnitParserRuleCall_6; }
		
		//BehaviorUnit
		public RuleCall getBehaviorUnitParserRuleCall_7() { return cBehaviorUnitParserRuleCall_7; }
		
		//FunctionUnit
		public RuleCall getFunctionUnitParserRuleCall_8() { return cFunctionUnitParserRuleCall_8; }
		
		//PredicateUnit
		public RuleCall getPredicateUnitParserRuleCall_9() { return cPredicateUnitParserRuleCall_9; }
		
		//FeatureUnit
		public RuleCall getFeatureUnitParserRuleCall_10() { return cFeatureUnitParserRuleCall_10; }
	}
	public class AnonymousPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.AnonymousPackage");
		private final RuleCall cPackageBodyParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnonymousPackage SysML::Package:
		//	PackageBody;
		@Override public ParserRule getRule() { return rule; }
		
		//PackageBody
		public RuleCall getPackageBodyParserRuleCall() { return cPackageBodyParserRuleCall; }
	}
	public class PackageUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PackageUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPackageDefinitionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PackageUnit SysML::Package:
		//	UnitPrefix PackageDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix PackageDefinition
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//PackageDefinition
		public RuleCall getPackageDefinitionParserRuleCall_1() { return cPackageDefinitionParserRuleCall_1; }
	}
	public class ClassifierUnitDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ClassifierUnitDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cClassifierDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cTypeBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ClassifierUnitDefinition SysML::Classifier:
		//	UnitPrefix ClassifierDeclaration TypeBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix ClassifierDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_1() { return cClassifierDeclarationParserRuleCall_1; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_2() { return cTypeBodyParserRuleCall_2; }
	}
	public class ClassUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ClassUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cClassDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cTypeBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ClassUnit SysML::Class:
		//	UnitPrefix ClassDeclaration TypeBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix ClassDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//ClassDeclaration
		public RuleCall getClassDeclarationParserRuleCall_1() { return cClassDeclarationParserRuleCall_1; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_2() { return cTypeBodyParserRuleCall_2; }
	}
	public class DataTypeUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.DataTypeUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDataTypeDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cTypeBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DataTypeUnit SysML::DataType:
		//	UnitPrefix DataTypeDeclaration TypeBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix DataTypeDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//DataTypeDeclaration
		public RuleCall getDataTypeDeclarationParserRuleCall_1() { return cDataTypeDeclarationParserRuleCall_1; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_2() { return cTypeBodyParserRuleCall_2; }
	}
	public class AssociationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.AssociationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAssociationDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cTypeBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//AssociationUnit SysML::Association:
		//	UnitPrefix AssociationDeclaration TypeBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix AssociationDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//AssociationDeclaration
		public RuleCall getAssociationDeclarationParserRuleCall_1() { return cAssociationDeclarationParserRuleCall_1; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_2() { return cTypeBodyParserRuleCall_2; }
	}
	public class InteractionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.InteractionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cInteractionDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cTypeBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//InteractionUnit SysML::Interaction:
		//	UnitPrefix InteractionDeclaration TypeBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix InteractionDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//InteractionDeclaration
		public RuleCall getInteractionDeclarationParserRuleCall_1() { return cInteractionDeclarationParserRuleCall_1; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_2() { return cTypeBodyParserRuleCall_2; }
	}
	public class BehaviorUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BehaviorUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBehaviorDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cBehaviorBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//BehaviorUnit SysML::Behavior:
		//	UnitPrefix BehaviorDeclaration BehaviorBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix BehaviorDeclaration BehaviorBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//BehaviorDeclaration
		public RuleCall getBehaviorDeclarationParserRuleCall_1() { return cBehaviorDeclarationParserRuleCall_1; }
		
		//BehaviorBody
		public RuleCall getBehaviorBodyParserRuleCall_2() { return cBehaviorBodyParserRuleCall_2; }
	}
	public class FunctionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FunctionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cFunctionDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cFunctionBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//FunctionUnit SysML::Function:
		//	UnitPrefix FunctionDeclaration FunctionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix FunctionDeclaration FunctionBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//FunctionDeclaration
		public RuleCall getFunctionDeclarationParserRuleCall_1() { return cFunctionDeclarationParserRuleCall_1; }
		
		//FunctionBody
		public RuleCall getFunctionBodyParserRuleCall_2() { return cFunctionBodyParserRuleCall_2; }
	}
	public class PredicateUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PredicateUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPredicateDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cFunctionBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//PredicateUnit SysML::Predicate:
		//	UnitPrefix PredicateDeclaration FunctionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix PredicateDeclaration FunctionBody
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//PredicateDeclaration
		public RuleCall getPredicateDeclarationParserRuleCall_1() { return cPredicateDeclarationParserRuleCall_1; }
		
		//FunctionBody
		public RuleCall getFunctionBodyParserRuleCall_2() { return cFunctionBodyParserRuleCall_2; }
	}
	public class FeatureUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cFeatureDefinitionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FeatureUnit SysML::Feature:
		//	UnitPrefix FeatureDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitPrefix FeatureDefinition
		public Group getGroup() { return cGroup; }
		
		//UnitPrefix
		public RuleCall getUnitPrefixParserRuleCall_0() { return cUnitPrefixParserRuleCall_0; }
		
		//FeatureDefinition
		public RuleCall getFeatureDefinitionParserRuleCall_1() { return cFeatureDefinitionParserRuleCall_1; }
	}
	public class UnitPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.UnitPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cOwnedImport_compAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cOwnedImport_compPackageImportParserRuleCall_0_0_0 = (RuleCall)cOwnedImport_compAssignment_0_0.eContents().get(0);
		private final Assignment cOwnedMembership_compAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cOwnedMembership_compElementAliasParserRuleCall_0_1_0 = (RuleCall)cOwnedMembership_compAssignment_0_1.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationship_compUnitAnnotationParserRuleCall_1_0 = (RuleCall)cOwnedRelationship_compAssignment_1.eContents().get(0);
		
		//fragment UnitPrefix returns SysML::Package:
		//	(ownedImport_comp+=PackageImport | ownedMembership_comp+=ElementAlias)*
		//	ownedRelationship_comp+=UnitAnnotation*;
		@Override public ParserRule getRule() { return rule; }
		
		//(ownedImport_comp+=PackageImport | ownedMembership_comp+=ElementAlias)* ownedRelationship_comp+=UnitAnnotation*
		public Group getGroup() { return cGroup; }
		
		//(ownedImport_comp+=PackageImport | ownedMembership_comp+=ElementAlias)*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ownedImport_comp+=PackageImport
		public Assignment getOwnedImport_compAssignment_0_0() { return cOwnedImport_compAssignment_0_0; }
		
		//PackageImport
		public RuleCall getOwnedImport_compPackageImportParserRuleCall_0_0_0() { return cOwnedImport_compPackageImportParserRuleCall_0_0_0; }
		
		//ownedMembership_comp+=ElementAlias
		public Assignment getOwnedMembership_compAssignment_0_1() { return cOwnedMembership_compAssignment_0_1; }
		
		//ElementAlias
		public RuleCall getOwnedMembership_compElementAliasParserRuleCall_0_1_0() { return cOwnedMembership_compElementAliasParserRuleCall_0_1_0; }
		
		//ownedRelationship_comp+=UnitAnnotation*
		public Assignment getOwnedRelationship_compAssignment_1() { return cOwnedRelationship_compAssignment_1; }
		
		//UnitAnnotation
		public RuleCall getOwnedRelationship_compUnitAnnotationParserRuleCall_1_0() { return cOwnedRelationship_compUnitAnnotationParserRuleCall_1_0; }
	}
	public class IdentificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Identification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIdKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cHumanIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cHumanIdNameParserRuleCall_0_1_0 = (RuleCall)cHumanIdAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		///* IDENTIFICATION */ fragment Identification returns SysML::Element:
		//	'id' humanId=Name name=Name?
		//	| name=Name;
		@Override public ParserRule getRule() { return rule; }
		
		//'id' humanId=Name name=Name? | name=Name
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'id' humanId=Name name=Name?
		public Group getGroup_0() { return cGroup_0; }
		
		//'id'
		public Keyword getIdKeyword_0_0() { return cIdKeyword_0_0; }
		
		//humanId=Name
		public Assignment getHumanIdAssignment_0_1() { return cHumanIdAssignment_0_1; }
		
		//Name
		public RuleCall getHumanIdNameParserRuleCall_0_1_0() { return cHumanIdNameParserRuleCall_0_1_0; }
		
		//name=Name?
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_0_2_0() { return cNameNameParserRuleCall_0_2_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnnotationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAboutKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAnnotatedElementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cAnnotatedElementElementCrossReference_1_1_0 = (CrossReference)cAnnotatedElementAssignment_1_1.eContents().get(0);
		private final RuleCall cAnnotatedElementElementQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cAnnotatedElementElementCrossReference_1_1_0.eContents().get(1);
		
		///* ANNOTATIONS */ Annotation SysML::Annotation:
		//	{SysML::Annotation} ('about' annotatedElement=[SysML::Element|QualifiedName])?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::Annotation} ('about' annotatedElement=[SysML::Element|QualifiedName])?
		public Group getGroup() { return cGroup; }
		
		//{SysML::Annotation}
		public Action getAnnotationAction_0() { return cAnnotationAction_0; }
		
		//('about' annotatedElement=[SysML::Element|QualifiedName])?
		public Group getGroup_1() { return cGroup_1; }
		
		//'about'
		public Keyword getAboutKeyword_1_0() { return cAboutKeyword_1_0; }
		
		//annotatedElement=[SysML::Element|QualifiedName]
		public Assignment getAnnotatedElementAssignment_1_1() { return cAnnotatedElementAssignment_1_1; }
		
		//[SysML::Element|QualifiedName]
		public CrossReference getAnnotatedElementElementCrossReference_1_1_0() { return cAnnotatedElementElementCrossReference_1_1_0; }
		
		//QualifiedName
		public RuleCall getAnnotatedElementElementQualifiedNameParserRuleCall_1_1_0_1() { return cAnnotatedElementElementQualifiedNameParserRuleCall_1_1_0_1; }
	}
	public class EmptyAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.EmptyAnnotation");
		private final Action cAnnotationAction = (Action)rule.eContents().get(1);
		
		//EmptyAnnotation SysML::Annotation:
		//	{SysML::Annotation};
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::Annotation}
		public Action getAnnotationAction() { return cAnnotationAction; }
	}
	public class PrefixAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PrefixAnnotation");
		private final Assignment cOwnedRelatedElement_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElement_compDocumentationParserRuleCall_0 = (RuleCall)cOwnedRelatedElement_compAssignment.eContents().get(0);
		
		//PrefixAnnotation SysML::Annotation:
		//	ownedRelatedElement_comp+=Documentation;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement_comp+=Documentation
		public Assignment getOwnedRelatedElement_compAssignment() { return cOwnedRelatedElement_compAssignment; }
		
		//Documentation
		public RuleCall getOwnedRelatedElement_compDocumentationParserRuleCall_0() { return cOwnedRelatedElement_compDocumentationParserRuleCall_0; }
	}
	public class UnitAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.UnitAnnotation");
		private final Assignment cOwnedRelatedElement_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElement_compUnitDocumentationParserRuleCall_0 = (RuleCall)cOwnedRelatedElement_compAssignment.eContents().get(0);
		
		//UnitAnnotation SysML::Annotation:
		//	ownedRelatedElement_comp+=UnitDocumentation;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement_comp+=UnitDocumentation
		public Assignment getOwnedRelatedElement_compAssignment() { return cOwnedRelatedElement_compAssignment; }
		
		//UnitDocumentation
		public RuleCall getOwnedRelatedElement_compUnitDocumentationParserRuleCall_0() { return cOwnedRelatedElement_compUnitDocumentationParserRuleCall_0; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cCommentKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cOwnedRelationship_compAnnotationParserRuleCall_0_0_2_0 = (RuleCall)cOwnedRelationship_compAssignment_0_0_2.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cOwnedRelationship_compEmptyAnnotationParserRuleCall_0_1_0 = (RuleCall)cOwnedRelationship_compAssignment_0_1.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyML_COMMENTTerminalRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		///* COMMENTS */ Comment SysML::Comment:
		//	('comment' Identification? ownedRelationship_comp+=Annotation
		//	| ownedRelationship_comp+=EmptyAnnotation) body=ML_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//('comment' Identification? ownedRelationship_comp+=Annotation | ownedRelationship_comp+=EmptyAnnotation) body=ML_COMMENT
		public Group getGroup() { return cGroup; }
		
		//('comment' Identification? ownedRelationship_comp+=Annotation | ownedRelationship_comp+=EmptyAnnotation)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'comment' Identification? ownedRelationship_comp+=Annotation
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'comment'
		public Keyword getCommentKeyword_0_0_0() { return cCommentKeyword_0_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_0_1() { return cIdentificationParserRuleCall_0_0_1; }
		
		//ownedRelationship_comp+=Annotation
		public Assignment getOwnedRelationship_compAssignment_0_0_2() { return cOwnedRelationship_compAssignment_0_0_2; }
		
		//Annotation
		public RuleCall getOwnedRelationship_compAnnotationParserRuleCall_0_0_2_0() { return cOwnedRelationship_compAnnotationParserRuleCall_0_0_2_0; }
		
		//ownedRelationship_comp+=EmptyAnnotation
		public Assignment getOwnedRelationship_compAssignment_0_1() { return cOwnedRelationship_compAssignment_0_1; }
		
		//EmptyAnnotation
		public RuleCall getOwnedRelationship_compEmptyAnnotationParserRuleCall_0_1_0() { return cOwnedRelationship_compEmptyAnnotationParserRuleCall_0_1_0; }
		
		//body=ML_COMMENT
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//ML_COMMENT
		public RuleCall getBodyML_COMMENTTerminalRuleCall_1_0() { return cBodyML_COMMENTTerminalRuleCall_1_0; }
	}
	public class DocumentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Documentation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cDocKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cIdKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cHumanIdAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cHumanIdNameParserRuleCall_0_1_1_0 = (RuleCall)cHumanIdAssignment_0_1_1.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyDOCUMENTATION_COMMENTTerminalRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		///* DOCUMENTATION */ Documentation SysML::Comment:
		//	('doc' ('id' humanId=Name)?)? body=DOCUMENTATION_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//('doc' ('id' humanId=Name)?)? body=DOCUMENTATION_COMMENT
		public Group getGroup() { return cGroup; }
		
		//('doc' ('id' humanId=Name)?)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'doc'
		public Keyword getDocKeyword_0_0() { return cDocKeyword_0_0; }
		
		//('id' humanId=Name)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'id'
		public Keyword getIdKeyword_0_1_0() { return cIdKeyword_0_1_0; }
		
		//humanId=Name
		public Assignment getHumanIdAssignment_0_1_1() { return cHumanIdAssignment_0_1_1; }
		
		//Name
		public RuleCall getHumanIdNameParserRuleCall_0_1_1_0() { return cHumanIdNameParserRuleCall_0_1_1_0; }
		
		//body=DOCUMENTATION_COMMENT
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//DOCUMENTATION_COMMENT
		public RuleCall getBodyDOCUMENTATION_COMMENTTerminalRuleCall_1_0() { return cBodyDOCUMENTATION_COMMENTTerminalRuleCall_1_0; }
	}
	public class UnitDocumentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.UnitDocumentation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Keyword cCommentKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Assignment cBodyAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cBodyML_COMMENTTerminalRuleCall_0_1_0 = (RuleCall)cBodyAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cDocKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cIdKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cHumanIdAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cHumanIdNameParserRuleCall_1_0_1_1_0 = (RuleCall)cHumanIdAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cBodyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBodyDOCUMENTATION_COMMENTTerminalRuleCall_1_1_0 = (RuleCall)cBodyAssignment_1_1.eContents().get(0);
		
		//UnitDocumentation SysML::Comment:
		//	('comment' Identification?)? body=ML_COMMENT
		//	| ('doc' ('id' humanId=Name)?)? body=DOCUMENTATION_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//('comment' Identification?)? body=ML_COMMENT | ('doc' ('id' humanId=Name)?)? body=DOCUMENTATION_COMMENT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('comment' Identification?)? body=ML_COMMENT
		public Group getGroup_0() { return cGroup_0; }
		
		//('comment' Identification?)?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'comment'
		public Keyword getCommentKeyword_0_0_0() { return cCommentKeyword_0_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_0_1() { return cIdentificationParserRuleCall_0_0_1; }
		
		//body=ML_COMMENT
		public Assignment getBodyAssignment_0_1() { return cBodyAssignment_0_1; }
		
		//ML_COMMENT
		public RuleCall getBodyML_COMMENTTerminalRuleCall_0_1_0() { return cBodyML_COMMENTTerminalRuleCall_0_1_0; }
		
		//('doc' ('id' humanId=Name)?)? body=DOCUMENTATION_COMMENT
		public Group getGroup_1() { return cGroup_1; }
		
		//('doc' ('id' humanId=Name)?)?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'doc'
		public Keyword getDocKeyword_1_0_0() { return cDocKeyword_1_0_0; }
		
		//('id' humanId=Name)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'id'
		public Keyword getIdKeyword_1_0_1_0() { return cIdKeyword_1_0_1_0; }
		
		//humanId=Name
		public Assignment getHumanIdAssignment_1_0_1_1() { return cHumanIdAssignment_1_0_1_1; }
		
		//Name
		public RuleCall getHumanIdNameParserRuleCall_1_0_1_1_0() { return cHumanIdNameParserRuleCall_1_0_1_1_0; }
		
		//body=DOCUMENTATION_COMMENT
		public Assignment getBodyAssignment_1_1() { return cBodyAssignment_1_1; }
		
		//DOCUMENTATION_COMMENT
		public RuleCall getBodyDOCUMENTATION_COMMENTTerminalRuleCall_1_1_0() { return cBodyDOCUMENTATION_COMMENTTerminalRuleCall_1_1_0; }
	}
	public class OwnedDocumentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedDocumentation");
		private final Assignment cDocumentingComment_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDocumentingComment_compDocumentationCommentParserRuleCall_0 = (RuleCall)cDocumentingComment_compAssignment.eContents().get(0);
		
		//OwnedDocumentation SysML::Documentation:
		//	documentingComment_comp=DocumentationComment;
		@Override public ParserRule getRule() { return rule; }
		
		//documentingComment_comp=DocumentationComment
		public Assignment getDocumentingComment_compAssignment() { return cDocumentingComment_compAssignment; }
		
		//DocumentationComment
		public RuleCall getDocumentingComment_compDocumentationCommentParserRuleCall_0() { return cDocumentingComment_compDocumentationCommentParserRuleCall_0; }
	}
	public class DocumentationCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.DocumentationComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDocKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIdKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cHumanIdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cHumanIdNameParserRuleCall_1_1_0 = (RuleCall)cHumanIdAssignment_1_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyML_COMMENTTerminalRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//DocumentationComment SysML::Comment:
		//	'doc' ('id' humanId=Name)? body=ML_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//'doc' ('id' humanId=Name)? body=ML_COMMENT
		public Group getGroup() { return cGroup; }
		
		//'doc'
		public Keyword getDocKeyword_0() { return cDocKeyword_0; }
		
		//('id' humanId=Name)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'id'
		public Keyword getIdKeyword_1_0() { return cIdKeyword_1_0; }
		
		//humanId=Name
		public Assignment getHumanIdAssignment_1_1() { return cHumanIdAssignment_1_1; }
		
		//Name
		public RuleCall getHumanIdNameParserRuleCall_1_1_0() { return cHumanIdNameParserRuleCall_1_1_0; }
		
		//body=ML_COMMENT
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//ML_COMMENT
		public RuleCall getBodyML_COMMENTTerminalRuleCall_2_0() { return cBodyML_COMMENTTerminalRuleCall_2_0; }
	}
	public class TextualRepresentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TextualRepresentation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cRepKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cOwnedRelationship_compAnnotationParserRuleCall_0_0_2_0 = (RuleCall)cOwnedRelationship_compAssignment_0_0_2.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cOwnedRelationship_compEmptyAnnotationParserRuleCall_0_1_0 = (RuleCall)cOwnedRelationship_compAssignment_0_1.eContents().get(0);
		private final Keyword cLanguageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLanguageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLanguageSTRING_VALUETerminalRuleCall_2_0 = (RuleCall)cLanguageAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyML_COMMENTTerminalRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		///* TEXTUAL REPRESENTATION */ TextualRepresentation SysML::TextualRepresentation:
		//	('rep' Identification? ownedRelationship_comp+=Annotation
		//	| ownedRelationship_comp+=EmptyAnnotation)
		//	'language' language=STRING_VALUE
		//	body=ML_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//('rep' Identification? ownedRelationship_comp+=Annotation | ownedRelationship_comp+=EmptyAnnotation) 'language'
		//language=STRING_VALUE body=ML_COMMENT
		public Group getGroup() { return cGroup; }
		
		//('rep' Identification? ownedRelationship_comp+=Annotation | ownedRelationship_comp+=EmptyAnnotation)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'rep' Identification? ownedRelationship_comp+=Annotation
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'rep'
		public Keyword getRepKeyword_0_0_0() { return cRepKeyword_0_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_0_1() { return cIdentificationParserRuleCall_0_0_1; }
		
		//ownedRelationship_comp+=Annotation
		public Assignment getOwnedRelationship_compAssignment_0_0_2() { return cOwnedRelationship_compAssignment_0_0_2; }
		
		//Annotation
		public RuleCall getOwnedRelationship_compAnnotationParserRuleCall_0_0_2_0() { return cOwnedRelationship_compAnnotationParserRuleCall_0_0_2_0; }
		
		//ownedRelationship_comp+=EmptyAnnotation
		public Assignment getOwnedRelationship_compAssignment_0_1() { return cOwnedRelationship_compAssignment_0_1; }
		
		//EmptyAnnotation
		public RuleCall getOwnedRelationship_compEmptyAnnotationParserRuleCall_0_1_0() { return cOwnedRelationship_compEmptyAnnotationParserRuleCall_0_1_0; }
		
		//'language'
		public Keyword getLanguageKeyword_1() { return cLanguageKeyword_1; }
		
		//language=STRING_VALUE
		public Assignment getLanguageAssignment_2() { return cLanguageAssignment_2; }
		
		//STRING_VALUE
		public RuleCall getLanguageSTRING_VALUETerminalRuleCall_2_0() { return cLanguageSTRING_VALUETerminalRuleCall_2_0; }
		
		//body=ML_COMMENT
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//ML_COMMENT
		public RuleCall getBodyML_COMMENTTerminalRuleCall_3_0() { return cBodyML_COMMENTTerminalRuleCall_3_0; }
	}
	public class PackageImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PackageImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationship_compPrefixAnnotationParserRuleCall_0_0 = (RuleCall)cOwnedRelationship_compAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityPackageElementVisibilityIndicatorEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Keyword cImportKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cImportedPackageAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final CrossReference cImportedPackagePackageCrossReference_3_0_0_0 = (CrossReference)cImportedPackageAssignment_3_0_0.eContents().get(0);
		private final RuleCall cImportedPackagePackageNameParserRuleCall_3_0_0_0_1 = (RuleCall)cImportedPackagePackageCrossReference_3_0_0_0.eContents().get(1);
		private final Alternatives cAlternatives_3_0_1 = (Alternatives)cGroup_3_0.eContents().get(1);
		private final Keyword cColonColonKeyword_3_0_1_0 = (Keyword)cAlternatives_3_0_1.eContents().get(0);
		private final Keyword cFullStopKeyword_3_0_1_1 = (Keyword)cAlternatives_3_0_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cImportedPackageAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final CrossReference cImportedPackagePackageCrossReference_3_1_0_0 = (CrossReference)cImportedPackageAssignment_3_1_0.eContents().get(0);
		private final RuleCall cImportedPackagePackageColonQualifiedNameParserRuleCall_3_1_0_0_1 = (RuleCall)cImportedPackagePackageCrossReference_3_1_0_0.eContents().get(1);
		private final Keyword cColonColonKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Group cGroup_3_2 = (Group)cAlternatives_3.eContents().get(2);
		private final Assignment cImportedPackageAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final CrossReference cImportedPackagePackageCrossReference_3_2_0_0 = (CrossReference)cImportedPackageAssignment_3_2_0.eContents().get(0);
		private final RuleCall cImportedPackagePackageDotQualifiedNameParserRuleCall_3_2_0_0_1 = (RuleCall)cImportedPackagePackageCrossReference_3_2_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Keyword cAsteriskKeyword_3_2_2 = (Keyword)cGroup_3_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///* IMPORTS */ PackageImport SysML::Import:
		//	ownedRelationship_comp+=PrefixAnnotation*
		//	visibility=PackageElementVisibilityIndicator?
		//	'import' (importedPackage=[SysML::Package|Name] ('::' | '.') '*'
		//	| importedPackage=[SysML::Package|ColonQualifiedName] '::' '*'
		//	| importedPackage=[SysML::Package|DotQualifiedName] '.' '*') ';';
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=PrefixAnnotation* visibility=PackageElementVisibilityIndicator? 'import'
		//(importedPackage=[SysML::Package|Name] ('::' | '.') '*' | importedPackage=[SysML::Package|ColonQualifiedName] '::' '*'
		//| importedPackage=[SysML::Package|DotQualifiedName] '.' '*') ';'
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship_comp+=PrefixAnnotation*
		public Assignment getOwnedRelationship_compAssignment_0() { return cOwnedRelationship_compAssignment_0; }
		
		//PrefixAnnotation
		public RuleCall getOwnedRelationship_compPrefixAnnotationParserRuleCall_0_0() { return cOwnedRelationship_compPrefixAnnotationParserRuleCall_0_0; }
		
		//visibility=PackageElementVisibilityIndicator?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//PackageElementVisibilityIndicator
		public RuleCall getVisibilityPackageElementVisibilityIndicatorEnumRuleCall_1_0() { return cVisibilityPackageElementVisibilityIndicatorEnumRuleCall_1_0; }
		
		//'import'
		public Keyword getImportKeyword_2() { return cImportKeyword_2; }
		
		//(importedPackage=[SysML::Package|Name] ('::' | '.') '*' | importedPackage=[SysML::Package|ColonQualifiedName] '::' '*' |
		//importedPackage=[SysML::Package|DotQualifiedName] '.' '*')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//importedPackage=[SysML::Package|Name] ('::' | '.') '*'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//importedPackage=[SysML::Package|Name]
		public Assignment getImportedPackageAssignment_3_0_0() { return cImportedPackageAssignment_3_0_0; }
		
		//[SysML::Package|Name]
		public CrossReference getImportedPackagePackageCrossReference_3_0_0_0() { return cImportedPackagePackageCrossReference_3_0_0_0; }
		
		//Name
		public RuleCall getImportedPackagePackageNameParserRuleCall_3_0_0_0_1() { return cImportedPackagePackageNameParserRuleCall_3_0_0_0_1; }
		
		//('::' | '.')
		public Alternatives getAlternatives_3_0_1() { return cAlternatives_3_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_3_0_1_0() { return cColonColonKeyword_3_0_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_3_0_1_1() { return cFullStopKeyword_3_0_1_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_3_0_2() { return cAsteriskKeyword_3_0_2; }
		
		//importedPackage=[SysML::Package|ColonQualifiedName] '::' '*'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//importedPackage=[SysML::Package|ColonQualifiedName]
		public Assignment getImportedPackageAssignment_3_1_0() { return cImportedPackageAssignment_3_1_0; }
		
		//[SysML::Package|ColonQualifiedName]
		public CrossReference getImportedPackagePackageCrossReference_3_1_0_0() { return cImportedPackagePackageCrossReference_3_1_0_0; }
		
		//ColonQualifiedName
		public RuleCall getImportedPackagePackageColonQualifiedNameParserRuleCall_3_1_0_0_1() { return cImportedPackagePackageColonQualifiedNameParserRuleCall_3_1_0_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_3_1_1() { return cColonColonKeyword_3_1_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_3_1_2() { return cAsteriskKeyword_3_1_2; }
		
		//importedPackage=[SysML::Package|DotQualifiedName] '.' '*'
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//importedPackage=[SysML::Package|DotQualifiedName]
		public Assignment getImportedPackageAssignment_3_2_0() { return cImportedPackageAssignment_3_2_0; }
		
		//[SysML::Package|DotQualifiedName]
		public CrossReference getImportedPackagePackageCrossReference_3_2_0_0() { return cImportedPackagePackageCrossReference_3_2_0_0; }
		
		//DotQualifiedName
		public RuleCall getImportedPackagePackageDotQualifiedNameParserRuleCall_3_2_0_0_1() { return cImportedPackagePackageDotQualifiedNameParserRuleCall_3_2_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_3_2_1() { return cFullStopKeyword_3_2_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_3_2_2() { return cAsteriskKeyword_3_2_2; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ElementAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ElementAlias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPackageMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cAliasKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cImportKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cMemberElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMemberElementElementCrossReference_2_0 = (CrossReference)cMemberElementAssignment_2.eContents().get(0);
		private final RuleCall cMemberElementElementQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cMemberElementElementCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMemberNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMemberNameNameParserRuleCall_3_1_0 = (RuleCall)cMemberNameAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ElementAlias SysML::Membership:
		//	PackageMemberPrefix ('alias' | 'import') memberElement=[SysML::Element|QualifiedName] ('as' memberName=Name)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//PackageMemberPrefix ('alias' | 'import') memberElement=[SysML::Element|QualifiedName] ('as' memberName=Name)? ';'
		public Group getGroup() { return cGroup; }
		
		//PackageMemberPrefix
		public RuleCall getPackageMemberPrefixParserRuleCall_0() { return cPackageMemberPrefixParserRuleCall_0; }
		
		//('alias' | 'import')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'alias'
		public Keyword getAliasKeyword_1_0() { return cAliasKeyword_1_0; }
		
		//'import'
		public Keyword getImportKeyword_1_1() { return cImportKeyword_1_1; }
		
		//memberElement=[SysML::Element|QualifiedName]
		public Assignment getMemberElementAssignment_2() { return cMemberElementAssignment_2; }
		
		//[SysML::Element|QualifiedName]
		public CrossReference getMemberElementElementCrossReference_2_0() { return cMemberElementElementCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getMemberElementElementQualifiedNameParserRuleCall_2_0_1() { return cMemberElementElementQualifiedNameParserRuleCall_2_0_1; }
		
		//('as' memberName=Name)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'as'
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }
		
		//memberName=Name
		public Assignment getMemberNameAssignment_3_1() { return cMemberNameAssignment_3_1; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_3_1_0() { return cMemberNameNameParserRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Package");
		private final RuleCall cPackageDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* PACKAGES */ Package SysML::Package:
		//	PackageDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//PackageDefinition
		public RuleCall getPackageDefinitionParserRuleCall() { return cPackageDefinitionParserRuleCall; }
	}
	public class PackageDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PackageDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPackageBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment PackageDefinition returns SysML::Package:
		//	'package' Identification? PackageBody;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' Identification? PackageBody
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1() { return cIdentificationParserRuleCall_1; }
		
		//PackageBody
		public RuleCall getPackageBodyParserRuleCall_2() { return cPackageBodyParserRuleCall_2; }
	}
	public class PackageBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PackageBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cDocumentation_compAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cDocumentation_compOwnedDocumentationParserRuleCall_1_1_0_0 = (RuleCall)cDocumentation_compAssignment_1_1_0.eContents().get(0);
		private final Assignment cOwnedMembership_compAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cOwnedMembership_compPackageMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedMembership_compAssignment_1_1_1.eContents().get(0);
		private final Assignment cOwnedImport_compAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cOwnedImport_compPackageImportParserRuleCall_1_1_2_0 = (RuleCall)cOwnedImport_compAssignment_1_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment PackageBody returns SysML::Package:
		//	';'
		//	| '{' (documentation_comp+=OwnedDocumentation
		//	| ownedMembership_comp+=PackageMember
		//	| ownedImport_comp+=PackageImport)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//';' | '{' (documentation_comp+=OwnedDocumentation | ownedMembership_comp+=PackageMember |
		//ownedImport_comp+=PackageImport)* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' (documentation_comp+=OwnedDocumentation | ownedMembership_comp+=PackageMember | ownedImport_comp+=PackageImport)*
		//'}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//(documentation_comp+=OwnedDocumentation | ownedMembership_comp+=PackageMember | ownedImport_comp+=PackageImport)*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//documentation_comp+=OwnedDocumentation
		public Assignment getDocumentation_compAssignment_1_1_0() { return cDocumentation_compAssignment_1_1_0; }
		
		//OwnedDocumentation
		public RuleCall getDocumentation_compOwnedDocumentationParserRuleCall_1_1_0_0() { return cDocumentation_compOwnedDocumentationParserRuleCall_1_1_0_0; }
		
		//ownedMembership_comp+=PackageMember
		public Assignment getOwnedMembership_compAssignment_1_1_1() { return cOwnedMembership_compAssignment_1_1_1; }
		
		//PackageMember
		public RuleCall getOwnedMembership_compPackageMemberParserRuleCall_1_1_1_0() { return cOwnedMembership_compPackageMemberParserRuleCall_1_1_1_0; }
		
		//ownedImport_comp+=PackageImport
		public Assignment getOwnedImport_compAssignment_1_1_2() { return cOwnedImport_compAssignment_1_1_2; }
		
		//PackageImport
		public RuleCall getOwnedImport_compPackageImportParserRuleCall_1_1_2_0() { return cOwnedImport_compPackageImportParserRuleCall_1_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class PackagedNonFeatureElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PackagedNonFeatureElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClassParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDataTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAssociationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cInteractionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBehaviorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFunctionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPredicateParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cCommentParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTextualRepresentationParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//PackagedNonFeatureElement SysML::Element:
		//	Package
		//	| Classifier
		//	| Class
		//	| DataType
		//	| Association
		//	| Interaction
		//	| Behavior
		//	| Function
		//	| Predicate
		//	| Comment
		//	| TextualRepresentation;
		@Override public ParserRule getRule() { return rule; }
		
		//Package | Classifier | Class | DataType | Association | Interaction | Behavior | Function | Predicate | Comment |
		//TextualRepresentation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Package
		public RuleCall getPackageParserRuleCall_0() { return cPackageParserRuleCall_0; }
		
		//Classifier
		public RuleCall getClassifierParserRuleCall_1() { return cClassifierParserRuleCall_1; }
		
		//Class
		public RuleCall getClassParserRuleCall_2() { return cClassParserRuleCall_2; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_3() { return cDataTypeParserRuleCall_3; }
		
		//Association
		public RuleCall getAssociationParserRuleCall_4() { return cAssociationParserRuleCall_4; }
		
		//Interaction
		public RuleCall getInteractionParserRuleCall_5() { return cInteractionParserRuleCall_5; }
		
		//Behavior
		public RuleCall getBehaviorParserRuleCall_6() { return cBehaviorParserRuleCall_6; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_7() { return cFunctionParserRuleCall_7; }
		
		//Predicate
		public RuleCall getPredicateParserRuleCall_8() { return cPredicateParserRuleCall_8; }
		
		//Comment
		public RuleCall getCommentParserRuleCall_9() { return cCommentParserRuleCall_9; }
		
		//TextualRepresentation
		public RuleCall getTextualRepresentationParserRuleCall_10() { return cTextualRepresentationParserRuleCall_10; }
	}
	public class PackagedFeatureElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PackagedFeatureElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStepParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBlockExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInvariantParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConnectorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBindingConnectorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSuccessionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cItemFlowParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSuccessionItemFlowParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//PackagedFeatureElement SysML::Feature:
		//	Feature
		//	| Step
		//	| BlockExpression
		//	| BooleanExpression
		//	| Invariant
		//	| Connector
		//	| BindingConnector
		//	| Succession
		//	| ItemFlow
		//	| SuccessionItemFlow;
		@Override public ParserRule getRule() { return rule; }
		
		//Feature | Step | BlockExpression | BooleanExpression | Invariant | Connector | BindingConnector | Succession | ItemFlow
		//| SuccessionItemFlow
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Feature
		public RuleCall getFeatureParserRuleCall_0() { return cFeatureParserRuleCall_0; }
		
		//Step
		public RuleCall getStepParserRuleCall_1() { return cStepParserRuleCall_1; }
		
		//BlockExpression
		public RuleCall getBlockExpressionParserRuleCall_2() { return cBlockExpressionParserRuleCall_2; }
		
		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_3() { return cBooleanExpressionParserRuleCall_3; }
		
		//Invariant
		public RuleCall getInvariantParserRuleCall_4() { return cInvariantParserRuleCall_4; }
		
		//Connector
		public RuleCall getConnectorParserRuleCall_5() { return cConnectorParserRuleCall_5; }
		
		//BindingConnector
		public RuleCall getBindingConnectorParserRuleCall_6() { return cBindingConnectorParserRuleCall_6; }
		
		//Succession
		public RuleCall getSuccessionParserRuleCall_7() { return cSuccessionParserRuleCall_7; }
		
		//ItemFlow
		public RuleCall getItemFlowParserRuleCall_8() { return cItemFlowParserRuleCall_8; }
		
		//SuccessionItemFlow
		public RuleCall getSuccessionItemFlowParserRuleCall_9() { return cSuccessionItemFlowParserRuleCall_9; }
	}
	public class PackageMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PackageMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPackageMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cNonFeatureMemberElementParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cPackageFeatureMemberElementParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		///* PACKAGE MEMBERSHIPS */ PackageMember SysML::Membership:
		//	PackageMemberPrefix (NonFeatureMemberElement | PackageFeatureMemberElement);
		@Override public ParserRule getRule() { return rule; }
		
		//PackageMemberPrefix (NonFeatureMemberElement | PackageFeatureMemberElement)
		public Group getGroup() { return cGroup; }
		
		//PackageMemberPrefix
		public RuleCall getPackageMemberPrefixParserRuleCall_0() { return cPackageMemberPrefixParserRuleCall_0; }
		
		//(NonFeatureMemberElement | PackageFeatureMemberElement)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//NonFeatureMemberElement
		public RuleCall getNonFeatureMemberElementParserRuleCall_1_0() { return cNonFeatureMemberElementParserRuleCall_1_0; }
		
		//PackageFeatureMemberElement
		public RuleCall getPackageFeatureMemberElementParserRuleCall_1_1() { return cPackageFeatureMemberElementParserRuleCall_1_1; }
	}
	public class PackageMemberPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PackageMemberPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationship_compPrefixAnnotationParserRuleCall_0_0 = (RuleCall)cOwnedRelationship_compAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityPackageElementVisibilityIndicatorEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		
		//fragment PackageMemberPrefix returns SysML::Membership:
		//	ownedRelationship_comp+=PrefixAnnotation*
		//	visibility=PackageElementVisibilityIndicator?;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=PrefixAnnotation* visibility=PackageElementVisibilityIndicator?
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship_comp+=PrefixAnnotation*
		public Assignment getOwnedRelationship_compAssignment_0() { return cOwnedRelationship_compAssignment_0; }
		
		//PrefixAnnotation
		public RuleCall getOwnedRelationship_compPrefixAnnotationParserRuleCall_0_0() { return cOwnedRelationship_compPrefixAnnotationParserRuleCall_0_0; }
		
		//visibility=PackageElementVisibilityIndicator?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//PackageElementVisibilityIndicator
		public RuleCall getVisibilityPackageElementVisibilityIndicatorEnumRuleCall_1_0() { return cVisibilityPackageElementVisibilityIndicatorEnumRuleCall_1_0; }
	}
	public class NonFeatureMemberElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NonFeatureMemberElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOwnedMemberElement_compAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOwnedMemberElement_compPackagedNonFeatureElementParserRuleCall_0_0 = (RuleCall)cOwnedMemberElement_compAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cAliasKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cImportKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cMemberElementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cMemberElementElementCrossReference_1_1_0 = (CrossReference)cMemberElementAssignment_1_1.eContents().get(0);
		private final RuleCall cMemberElementElementQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cMemberElementElementCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cAsKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cMemberNameAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cMemberNameNameParserRuleCall_1_2_1_0 = (RuleCall)cMemberNameAssignment_1_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//fragment NonFeatureMemberElement returns SysML::Membership:
		//	ownedMemberElement_comp=PackagedNonFeatureElement
		//	| ('alias' | 'import') memberElement=[SysML::Element|QualifiedName] ('as' memberName=Name)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberElement_comp=PackagedNonFeatureElement | ('alias' | 'import') memberElement=[SysML::Element|QualifiedName]
		//('as' memberName=Name)? ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ownedMemberElement_comp=PackagedNonFeatureElement
		public Assignment getOwnedMemberElement_compAssignment_0() { return cOwnedMemberElement_compAssignment_0; }
		
		//PackagedNonFeatureElement
		public RuleCall getOwnedMemberElement_compPackagedNonFeatureElementParserRuleCall_0_0() { return cOwnedMemberElement_compPackagedNonFeatureElementParserRuleCall_0_0; }
		
		//('alias' | 'import') memberElement=[SysML::Element|QualifiedName] ('as' memberName=Name)? ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//('alias' | 'import')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'alias'
		public Keyword getAliasKeyword_1_0_0() { return cAliasKeyword_1_0_0; }
		
		//'import'
		public Keyword getImportKeyword_1_0_1() { return cImportKeyword_1_0_1; }
		
		//memberElement=[SysML::Element|QualifiedName]
		public Assignment getMemberElementAssignment_1_1() { return cMemberElementAssignment_1_1; }
		
		//[SysML::Element|QualifiedName]
		public CrossReference getMemberElementElementCrossReference_1_1_0() { return cMemberElementElementCrossReference_1_1_0; }
		
		//QualifiedName
		public RuleCall getMemberElementElementQualifiedNameParserRuleCall_1_1_0_1() { return cMemberElementElementQualifiedNameParserRuleCall_1_1_0_1; }
		
		//('as' memberName=Name)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'as'
		public Keyword getAsKeyword_1_2_0() { return cAsKeyword_1_2_0; }
		
		//memberName=Name
		public Assignment getMemberNameAssignment_1_2_1() { return cMemberNameAssignment_1_2_1; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_1_2_1_0() { return cMemberNameNameParserRuleCall_1_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }
	}
	public class PackageFeatureMemberElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PackageFeatureMemberElement");
		private final Assignment cOwnedMemberElement_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberElement_compPackagedFeatureElementParserRuleCall_0 = (RuleCall)cOwnedMemberElement_compAssignment.eContents().get(0);
		
		//fragment PackageFeatureMemberElement returns SysML::Membership:
		//	ownedMemberElement_comp=PackagedFeatureElement;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberElement_comp=PackagedFeatureElement
		public Assignment getOwnedMemberElement_compAssignment() { return cOwnedMemberElement_compAssignment; }
		
		//PackagedFeatureElement
		public RuleCall getOwnedMemberElement_compPackagedFeatureElementParserRuleCall_0() { return cOwnedMemberElement_compPackagedFeatureElementParserRuleCall_0; }
	}
	public class TypeBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TypeBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cDocumentation_compAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cDocumentation_compOwnedDocumentationParserRuleCall_1_1_0_0 = (RuleCall)cDocumentation_compAssignment_1_1_0.eContents().get(0);
		private final Assignment cOwnedMembership_compAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cOwnedMembership_compNonFeatureTypeMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedMembership_compAssignment_1_1_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compFeatureTypeMemberParserRuleCall_1_1_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_1_2.eContents().get(0);
		private final Assignment cOwnedImport_compAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cOwnedImport_compPackageImportParserRuleCall_1_1_3_0 = (RuleCall)cOwnedImport_compAssignment_1_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		///* TYPES */ fragment TypeBody returns SysML::Type:
		//	';' |
		//	'{' (documentation_comp+=OwnedDocumentation
		//	| ownedMembership_comp+=NonFeatureTypeMember
		//	| ownedFeatureMembership_comp+=FeatureTypeMember
		//	| ownedImport_comp+=PackageImport)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//';' | '{' (documentation_comp+=OwnedDocumentation | ownedMembership_comp+=NonFeatureTypeMember |
		//ownedFeatureMembership_comp+=FeatureTypeMember | ownedImport_comp+=PackageImport)* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' (documentation_comp+=OwnedDocumentation | ownedMembership_comp+=NonFeatureTypeMember |
		//ownedFeatureMembership_comp+=FeatureTypeMember | ownedImport_comp+=PackageImport)* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//(documentation_comp+=OwnedDocumentation | ownedMembership_comp+=NonFeatureTypeMember |
		//ownedFeatureMembership_comp+=FeatureTypeMember | ownedImport_comp+=PackageImport)*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//documentation_comp+=OwnedDocumentation
		public Assignment getDocumentation_compAssignment_1_1_0() { return cDocumentation_compAssignment_1_1_0; }
		
		//OwnedDocumentation
		public RuleCall getDocumentation_compOwnedDocumentationParserRuleCall_1_1_0_0() { return cDocumentation_compOwnedDocumentationParserRuleCall_1_1_0_0; }
		
		//ownedMembership_comp+=NonFeatureTypeMember
		public Assignment getOwnedMembership_compAssignment_1_1_1() { return cOwnedMembership_compAssignment_1_1_1; }
		
		//NonFeatureTypeMember
		public RuleCall getOwnedMembership_compNonFeatureTypeMemberParserRuleCall_1_1_1_0() { return cOwnedMembership_compNonFeatureTypeMemberParserRuleCall_1_1_1_0; }
		
		//ownedFeatureMembership_comp+=FeatureTypeMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_1_2() { return cOwnedFeatureMembership_compAssignment_1_1_2; }
		
		//FeatureTypeMember
		public RuleCall getOwnedFeatureMembership_compFeatureTypeMemberParserRuleCall_1_1_2_0() { return cOwnedFeatureMembership_compFeatureTypeMemberParserRuleCall_1_1_2_0; }
		
		//ownedImport_comp+=PackageImport
		public Assignment getOwnedImport_compAssignment_1_1_3() { return cOwnedImport_compAssignment_1_1_3; }
		
		//PackageImport
		public RuleCall getOwnedImport_compPackageImportParserRuleCall_1_1_3_0() { return cOwnedImport_compPackageImportParserRuleCall_1_1_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class NonFeatureTypeMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NonFeatureTypeMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cNonFeatureMemberElementParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		///* TYPE MEMBERSHIPS */ NonFeatureTypeMember SysML::Membership:
		//	TypeMemberPrefix NonFeatureMemberElement;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeMemberPrefix NonFeatureMemberElement
		public Group getGroup() { return cGroup; }
		
		//TypeMemberPrefix
		public RuleCall getTypeMemberPrefixParserRuleCall_0() { return cTypeMemberPrefixParserRuleCall_0; }
		
		//NonFeatureMemberElement
		public RuleCall getNonFeatureMemberElementParserRuleCall_1() { return cNonFeatureMemberElementParserRuleCall_1; }
	}
	public class FeatureTypeMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureTypeMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEndFeatureMemberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FeatureTypeMember SysML::FeatureMembership:
		//	FeatureMember | EndFeatureMember;
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureMember | EndFeatureMember
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FeatureMember
		public RuleCall getFeatureMemberParserRuleCall_0() { return cFeatureMemberParserRuleCall_0; }
		
		//EndFeatureMember
		public RuleCall getEndFeatureMemberParserRuleCall_1() { return cEndFeatureMemberParserRuleCall_1; }
	}
	public class FeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cFeatureMemberFlagsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cOwnedMemberFeature_compAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cOwnedMemberFeature_compPackagedFeatureElementParserRuleCall_2_0_0 = (RuleCall)cOwnedMemberFeature_compAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cFeatureKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cMemberNameAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMemberNameNameParserRuleCall_2_1_1_0 = (RuleCall)cMemberNameAssignment_2_1_1.eContents().get(0);
		private final Keyword cIsKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Assignment cMemberFeatureAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final CrossReference cMemberFeatureFeatureCrossReference_2_1_3_0 = (CrossReference)cMemberFeatureAssignment_2_1_3.eContents().get(0);
		private final RuleCall cMemberFeatureFeatureQualifiedNameParserRuleCall_2_1_3_0_1 = (RuleCall)cMemberFeatureFeatureCrossReference_2_1_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		
		//FeatureMember SysML::FeatureMembership:
		//	TypeMemberPrefix FeatureMemberFlags (ownedMemberFeature_comp=PackagedFeatureElement
		//	| 'feature'? memberName=Name? 'is' memberFeature=[SysML::Feature|QualifiedName] ';');
		@Override public ParserRule getRule() { return rule; }
		
		//TypeMemberPrefix FeatureMemberFlags (ownedMemberFeature_comp=PackagedFeatureElement | 'feature'? memberName=Name? 'is'
		//memberFeature=[SysML::Feature|QualifiedName] ';')
		public Group getGroup() { return cGroup; }
		
		//TypeMemberPrefix
		public RuleCall getTypeMemberPrefixParserRuleCall_0() { return cTypeMemberPrefixParserRuleCall_0; }
		
		//FeatureMemberFlags
		public RuleCall getFeatureMemberFlagsParserRuleCall_1() { return cFeatureMemberFlagsParserRuleCall_1; }
		
		//(ownedMemberFeature_comp=PackagedFeatureElement | 'feature'? memberName=Name? 'is'
		//memberFeature=[SysML::Feature|QualifiedName] ';')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//ownedMemberFeature_comp=PackagedFeatureElement
		public Assignment getOwnedMemberFeature_compAssignment_2_0() { return cOwnedMemberFeature_compAssignment_2_0; }
		
		//PackagedFeatureElement
		public RuleCall getOwnedMemberFeature_compPackagedFeatureElementParserRuleCall_2_0_0() { return cOwnedMemberFeature_compPackagedFeatureElementParserRuleCall_2_0_0; }
		
		//'feature'? memberName=Name? 'is' memberFeature=[SysML::Feature|QualifiedName] ';'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'feature'?
		public Keyword getFeatureKeyword_2_1_0() { return cFeatureKeyword_2_1_0; }
		
		//memberName=Name?
		public Assignment getMemberNameAssignment_2_1_1() { return cMemberNameAssignment_2_1_1; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_2_1_1_0() { return cMemberNameNameParserRuleCall_2_1_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2_1_2() { return cIsKeyword_2_1_2; }
		
		//memberFeature=[SysML::Feature|QualifiedName]
		public Assignment getMemberFeatureAssignment_2_1_3() { return cMemberFeatureAssignment_2_1_3; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getMemberFeatureFeatureCrossReference_2_1_3_0() { return cMemberFeatureFeatureCrossReference_2_1_3_0; }
		
		//QualifiedName
		public RuleCall getMemberFeatureFeatureQualifiedNameParserRuleCall_2_1_3_0_1() { return cMemberFeatureFeatureQualifiedNameParserRuleCall_2_1_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_4() { return cSemicolonKeyword_2_1_4; }
	}
	public class EndFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.EndFeatureMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cFeatureMemberFlagsParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cOwnedMemberFeature_compAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedMemberFeature_compPackagedFeatureElementParserRuleCall_3_0 = (RuleCall)cOwnedMemberFeature_compAssignment_3.eContents().get(0);
		
		//EndFeatureMember SysML::EndFeatureMembership:
		//	TypeMemberPrefix 'end' FeatureMemberFlags ownedMemberFeature_comp=PackagedFeatureElement;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeMemberPrefix 'end' FeatureMemberFlags ownedMemberFeature_comp=PackagedFeatureElement
		public Group getGroup() { return cGroup; }
		
		//TypeMemberPrefix
		public RuleCall getTypeMemberPrefixParserRuleCall_0() { return cTypeMemberPrefixParserRuleCall_0; }
		
		//'end'
		public Keyword getEndKeyword_1() { return cEndKeyword_1; }
		
		//FeatureMemberFlags
		public RuleCall getFeatureMemberFlagsParserRuleCall_2() { return cFeatureMemberFlagsParserRuleCall_2; }
		
		//ownedMemberFeature_comp=PackagedFeatureElement
		public Assignment getOwnedMemberFeature_compAssignment_3() { return cOwnedMemberFeature_compAssignment_3; }
		
		//PackagedFeatureElement
		public RuleCall getOwnedMemberFeature_compPackagedFeatureElementParserRuleCall_3_0() { return cOwnedMemberFeature_compPackagedFeatureElementParserRuleCall_3_0; }
	}
	public class FeatureMemberFlagsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureMemberFlags");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionFeatureDirectionEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsCompositeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cIsCompositeCompositeKeyword_1_0_0 = (Keyword)cIsCompositeAssignment_1_0.eContents().get(0);
		private final Assignment cIsPortionAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cIsPortionPortionKeyword_1_1_0 = (Keyword)cIsPortionAssignment_1_1.eContents().get(0);
		private final Assignment cIsPortAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsPortPortKeyword_2_0 = (Keyword)cIsPortAssignment_2.eContents().get(0);
		
		//fragment FeatureMemberFlags returns SysML::FeatureMembership:
		//	direction=FeatureDirection? (isComposite?='composite' | isPortion?='portion')? isPort?='port'?;
		@Override public ParserRule getRule() { return rule; }
		
		//direction=FeatureDirection? (isComposite?='composite' | isPortion?='portion')? isPort?='port'?
		public Group getGroup() { return cGroup; }
		
		//direction=FeatureDirection?
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//FeatureDirection
		public RuleCall getDirectionFeatureDirectionEnumRuleCall_0_0() { return cDirectionFeatureDirectionEnumRuleCall_0_0; }
		
		//(isComposite?='composite' | isPortion?='portion')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//isComposite?='composite'
		public Assignment getIsCompositeAssignment_1_0() { return cIsCompositeAssignment_1_0; }
		
		//'composite'
		public Keyword getIsCompositeCompositeKeyword_1_0_0() { return cIsCompositeCompositeKeyword_1_0_0; }
		
		//isPortion?='portion'
		public Assignment getIsPortionAssignment_1_1() { return cIsPortionAssignment_1_1; }
		
		//'portion'
		public Keyword getIsPortionPortionKeyword_1_1_0() { return cIsPortionPortionKeyword_1_1_0; }
		
		//isPort?='port'?
		public Assignment getIsPortAssignment_2() { return cIsPortAssignment_2; }
		
		//'port'
		public Keyword getIsPortPortKeyword_2_0() { return cIsPortPortKeyword_2_0; }
	}
	public class TypeMemberPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TypeMemberPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationship_compPrefixAnnotationParserRuleCall_0_0 = (RuleCall)cOwnedRelationship_compAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityIndicatorEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		
		//fragment TypeMemberPrefix returns SysML::Membership:
		//	ownedRelationship_comp+=PrefixAnnotation*
		//	visibility=VisibilityIndicator?;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=PrefixAnnotation* visibility=VisibilityIndicator?
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship_comp+=PrefixAnnotation*
		public Assignment getOwnedRelationship_compAssignment_0() { return cOwnedRelationship_compAssignment_0; }
		
		//PrefixAnnotation
		public RuleCall getOwnedRelationship_compPrefixAnnotationParserRuleCall_0_0() { return cOwnedRelationship_compPrefixAnnotationParserRuleCall_0_0; }
		
		//visibility=VisibilityIndicator?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//VisibilityIndicator
		public RuleCall getVisibilityVisibilityIndicatorEnumRuleCall_1_0() { return cVisibilityVisibilityIndicatorEnumRuleCall_1_0; }
	}
	public class ClassifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Classifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassifierDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		///* CLASSIFIERS */ Classifier SysML::Classifier:
		//	ClassifierDeclaration TypeBody;
		@Override public ParserRule getRule() { return rule; }
		
		//ClassifierDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_0() { return cClassifierDeclarationParserRuleCall_0; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_1() { return cTypeBodyParserRuleCall_1; }
	}
	public class ClassifierDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ClassifierDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cClassifierKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationCompletionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment ClassifierDeclaration returns SysML::Classifier:
		//	isAbstract?='abstract'? 'classifier' ClassifierDeclarationCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'classifier' ClassifierDeclarationCompletion
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'classifier'
		public Keyword getClassifierKeyword_1() { return cClassifierKeyword_1; }
		
		//ClassifierDeclarationCompletion
		public RuleCall getClassifierDeclarationCompletionParserRuleCall_2() { return cClassifierDeclarationCompletionParserRuleCall_2; }
	}
	public class ClassifierDeclarationCompletionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ClassifierDeclarationCompletion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsSufficientAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsSufficientAllKeyword_0_0 = (Keyword)cIsSufficientAssignment_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSpecializationOrConjugationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cOwnedFeatureMembership_compAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_3.eContents().get(0);
		
		//fragment ClassifierDeclarationCompletion returns SysML::Classifier:
		//	isSufficient?='all'? Identification?
		//	//  ( '<' ownedMember += ClassifierTemplateParameter ( ',' ownedMember += ClassifierTemplateParameter )* '>' )? 
		//	SpecializationOrConjugation?
		//	ownedFeatureMembership_comp+=MultiplicityMember?;
		@Override public ParserRule getRule() { return rule; }
		
		//isSufficient?='all'? Identification? //  ( '<' ownedMember += ClassifierTemplateParameter ( ',' ownedMember += ClassifierTemplateParameter )* '>' )? 
		//SpecializationOrConjugation? ownedFeatureMembership_comp+=MultiplicityMember?
		public Group getGroup() { return cGroup; }
		
		//isSufficient?='all'?
		public Assignment getIsSufficientAssignment_0() { return cIsSufficientAssignment_0; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_0_0() { return cIsSufficientAllKeyword_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1() { return cIdentificationParserRuleCall_1; }
		
		////  ( '<' ownedMember += ClassifierTemplateParameter ( ',' ownedMember += ClassifierTemplateParameter )* '>' )? 
		//SpecializationOrConjugation?
		public RuleCall getSpecializationOrConjugationParserRuleCall_2() { return cSpecializationOrConjugationParserRuleCall_2; }
		
		//ownedFeatureMembership_comp+=MultiplicityMember?
		public Assignment getOwnedFeatureMembership_compAssignment_3() { return cOwnedFeatureMembership_compAssignment_3; }
		
		//MultiplicityMember
		public RuleCall getOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_3_0() { return cOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_3_0; }
	}
	public class SpecializationOrConjugationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.SpecializationOrConjugation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cColonGreaterThanSignKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cSpecializesKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOwnedRelationship_compSuperclassingParserRuleCall_0_1_0 = (RuleCall)cOwnedRelationship_compAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cOwnedRelationship_compSuperclassingParserRuleCall_0_2_1_0 = (RuleCall)cOwnedRelationship_compAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cTildeKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cConjugatesKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelationship_compConjugationParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationship_compAssignment_1_1.eContents().get(0);
		
		//fragment SpecializationOrConjugation returns SysML::Classifier:
		//	(':>' | 'specializes') ownedRelationship_comp+=Superclassing (',' ownedRelationship_comp+=Superclassing)*
		//	| ('~' | 'conjugates') ownedRelationship_comp+=Conjugation;
		@Override public ParserRule getRule() { return rule; }
		
		//(':>' | 'specializes') ownedRelationship_comp+=Superclassing (',' ownedRelationship_comp+=Superclassing)* | ('~' |
		//'conjugates') ownedRelationship_comp+=Conjugation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(':>' | 'specializes') ownedRelationship_comp+=Superclassing (',' ownedRelationship_comp+=Superclassing)*
		public Group getGroup_0() { return cGroup_0; }
		
		//(':>' | 'specializes')
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//':>'
		public Keyword getColonGreaterThanSignKeyword_0_0_0() { return cColonGreaterThanSignKeyword_0_0_0; }
		
		//'specializes'
		public Keyword getSpecializesKeyword_0_0_1() { return cSpecializesKeyword_0_0_1; }
		
		//ownedRelationship_comp+=Superclassing
		public Assignment getOwnedRelationship_compAssignment_0_1() { return cOwnedRelationship_compAssignment_0_1; }
		
		//Superclassing
		public RuleCall getOwnedRelationship_compSuperclassingParserRuleCall_0_1_0() { return cOwnedRelationship_compSuperclassingParserRuleCall_0_1_0; }
		
		//(',' ownedRelationship_comp+=Superclassing)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }
		
		//ownedRelationship_comp+=Superclassing
		public Assignment getOwnedRelationship_compAssignment_0_2_1() { return cOwnedRelationship_compAssignment_0_2_1; }
		
		//Superclassing
		public RuleCall getOwnedRelationship_compSuperclassingParserRuleCall_0_2_1_0() { return cOwnedRelationship_compSuperclassingParserRuleCall_0_2_1_0; }
		
		//('~' | 'conjugates') ownedRelationship_comp+=Conjugation
		public Group getGroup_1() { return cGroup_1; }
		
		//('~' | 'conjugates')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'~'
		public Keyword getTildeKeyword_1_0_0() { return cTildeKeyword_1_0_0; }
		
		//'conjugates'
		public Keyword getConjugatesKeyword_1_0_1() { return cConjugatesKeyword_1_0_1; }
		
		//ownedRelationship_comp+=Conjugation
		public Assignment getOwnedRelationship_compAssignment_1_1() { return cOwnedRelationship_compAssignment_1_1; }
		
		//Conjugation
		public RuleCall getOwnedRelationship_compConjugationParserRuleCall_1_1_0() { return cOwnedRelationship_compConjugationParserRuleCall_1_1_0; }
	}
	public class SuperclassingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Superclassing");
		private final Assignment cSuperclassAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSuperclassClassifierCrossReference_0 = (CrossReference)cSuperclassAssignment.eContents().get(0);
		private final RuleCall cSuperclassClassifierQualifiedNameParserRuleCall_0_1 = (RuleCall)cSuperclassClassifierCrossReference_0.eContents().get(1);
		
		//Superclassing SysML::Superclassing:
		//	superclass=[SysML::Classifier|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//superclass=[SysML::Classifier|QualifiedName]
		public Assignment getSuperclassAssignment() { return cSuperclassAssignment; }
		
		//[SysML::Classifier|QualifiedName]
		public CrossReference getSuperclassClassifierCrossReference_0() { return cSuperclassClassifierCrossReference_0; }
		
		//QualifiedName
		public RuleCall getSuperclassClassifierQualifiedNameParserRuleCall_0_1() { return cSuperclassClassifierQualifiedNameParserRuleCall_0_1; }
	}
	public class ConjugationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Conjugation");
		private final Assignment cOriginalTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cOriginalTypeClassifierCrossReference_0 = (CrossReference)cOriginalTypeAssignment.eContents().get(0);
		private final RuleCall cOriginalTypeClassifierQualifiedNameParserRuleCall_0_1 = (RuleCall)cOriginalTypeClassifierCrossReference_0.eContents().get(1);
		
		//Conjugation SysML::Conjugation:
		//	originalType=[SysML::Classifier|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//originalType=[SysML::Classifier|QualifiedName]
		public Assignment getOriginalTypeAssignment() { return cOriginalTypeAssignment; }
		
		//[SysML::Classifier|QualifiedName]
		public CrossReference getOriginalTypeClassifierCrossReference_0() { return cOriginalTypeClassifierCrossReference_0; }
		
		//QualifiedName
		public RuleCall getOriginalTypeClassifierQualifiedNameParserRuleCall_0_1() { return cOriginalTypeClassifierQualifiedNameParserRuleCall_0_1; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		///* CLASSES */ Class SysML::Class:
		//	ClassDeclaration TypeBody;
		@Override public ParserRule getRule() { return rule; }
		
		//ClassDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//ClassDeclaration
		public RuleCall getClassDeclarationParserRuleCall_0() { return cClassDeclarationParserRuleCall_0; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_1() { return cTypeBodyParserRuleCall_1; }
	}
	public class ClassDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ClassDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationCompletionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment ClassDeclaration returns SysML::Class:
		//	isAbstract?='abstract'? 'class' ClassifierDeclarationCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'class' ClassifierDeclarationCompletion
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//ClassifierDeclarationCompletion
		public RuleCall getClassifierDeclarationCompletionParserRuleCall_2() { return cClassifierDeclarationCompletionParserRuleCall_2; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDataTypeDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		///* DATA TYPES */ DataType SysML::DataType:
		//	DataTypeDeclaration TypeBody;
		@Override public ParserRule getRule() { return rule; }
		
		//DataTypeDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//DataTypeDeclaration
		public RuleCall getDataTypeDeclarationParserRuleCall_0() { return cDataTypeDeclarationParserRuleCall_0; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_1() { return cTypeBodyParserRuleCall_1; }
	}
	public class DataTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.DataTypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cDatatypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationCompletionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment DataTypeDeclaration returns SysML::DataType:
		//	isAbstract?='abstract'? 'datatype' ClassifierDeclarationCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'datatype' ClassifierDeclarationCompletion
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_1() { return cDatatypeKeyword_1; }
		
		//ClassifierDeclarationCompletion
		public RuleCall getClassifierDeclarationCompletionParserRuleCall_2() { return cClassifierDeclarationCompletionParserRuleCall_2; }
	}
	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAssociationDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		///* ASSOCIATIONS */ Association SysML::Association:
		//	AssociationDeclaration TypeBody;
		@Override public ParserRule getRule() { return rule; }
		
		//AssociationDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//AssociationDeclaration
		public RuleCall getAssociationDeclarationParserRuleCall_0() { return cAssociationDeclarationParserRuleCall_0; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_1() { return cTypeBodyParserRuleCall_1; }
	}
	public class AssociationDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.AssociationDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cAssocKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationCompletionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment AssociationDeclaration returns SysML::Association:
		//	isAbstract?='abstract'? 'assoc' ClassifierDeclarationCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'assoc' ClassifierDeclarationCompletion
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'assoc'
		public Keyword getAssocKeyword_1() { return cAssocKeyword_1; }
		
		//ClassifierDeclarationCompletion
		public RuleCall getClassifierDeclarationCompletionParserRuleCall_2() { return cClassifierDeclarationCompletionParserRuleCall_2; }
	}
	public class BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Behavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBehaviorDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBehaviorBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		///* BEHAVIORS */ Behavior SysML::Behavior:
		//	BehaviorDeclaration BehaviorBody;
		@Override public ParserRule getRule() { return rule; }
		
		//BehaviorDeclaration BehaviorBody
		public Group getGroup() { return cGroup; }
		
		//BehaviorDeclaration
		public RuleCall getBehaviorDeclarationParserRuleCall_0() { return cBehaviorDeclarationParserRuleCall_0; }
		
		//BehaviorBody
		public RuleCall getBehaviorBodyParserRuleCall_1() { return cBehaviorBodyParserRuleCall_1; }
	}
	public class BehaviorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BehaviorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cBehaviorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBehaviorDeclarationCompletionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment BehaviorDeclaration returns SysML::Behavior:
		//	isAbstract?='abstract'? 'behavior' BehaviorDeclarationCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'behavior' BehaviorDeclarationCompletion
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'behavior'
		public Keyword getBehaviorKeyword_1() { return cBehaviorKeyword_1; }
		
		//BehaviorDeclarationCompletion
		public RuleCall getBehaviorDeclarationCompletionParserRuleCall_2() { return cBehaviorDeclarationCompletionParserRuleCall_2; }
	}
	public class BehaviorDeclarationCompletionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BehaviorDeclarationCompletion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsSufficientAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsSufficientAllKeyword_0_0 = (Keyword)cIsSufficientAssignment_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSpecializationOrConjugationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cParameterListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//fragment BehaviorDeclarationCompletion returns SysML::Behavior:
		//	isSufficient?='all'? Identification? SpecializationOrConjugation? ParameterList?;
		@Override public ParserRule getRule() { return rule; }
		
		//isSufficient?='all'? Identification? SpecializationOrConjugation? ParameterList?
		public Group getGroup() { return cGroup; }
		
		//isSufficient?='all'?
		public Assignment getIsSufficientAssignment_0() { return cIsSufficientAssignment_0; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_0_0() { return cIsSufficientAllKeyword_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1() { return cIdentificationParserRuleCall_1; }
		
		//SpecializationOrConjugation?
		public RuleCall getSpecializationOrConjugationParserRuleCall_2() { return cSpecializationOrConjugationParserRuleCall_2; }
		
		//ParameterList?
		public RuleCall getParameterListParserRuleCall_3() { return cParameterListParserRuleCall_3; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compParameterMemberParserRuleCall_1_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compParameterMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//fragment ParameterList returns SysML::Type:
		//	'(' (ownedFeatureMembership_comp+=ParameterMember (',' ownedFeatureMembership_comp+=ParameterMember)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (ownedFeatureMembership_comp+=ParameterMember (',' ownedFeatureMembership_comp+=ParameterMember)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(ownedFeatureMembership_comp+=ParameterMember (',' ownedFeatureMembership_comp+=ParameterMember)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//ownedFeatureMembership_comp+=ParameterMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_0() { return cOwnedFeatureMembership_compAssignment_1_0; }
		
		//ParameterMember
		public RuleCall getOwnedFeatureMembership_compParameterMemberParserRuleCall_1_0_0() { return cOwnedFeatureMembership_compParameterMemberParserRuleCall_1_0_0; }
		
		//(',' ownedFeatureMembership_comp+=ParameterMember)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//ownedFeatureMembership_comp+=ParameterMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_1_1() { return cOwnedFeatureMembership_compAssignment_1_1_1; }
		
		//ParameterMember
		public RuleCall getOwnedFeatureMembership_compParameterMemberParserRuleCall_1_1_1_0() { return cOwnedFeatureMembership_compParameterMemberParserRuleCall_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class BehaviorBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BehaviorBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cDocumentation_compAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cDocumentation_compOwnedDocumentationParserRuleCall_1_1_0_0 = (RuleCall)cDocumentation_compAssignment_1_1_0.eContents().get(0);
		private final Assignment cOwnedMembership_compAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cOwnedMembership_compNonFeatureTypeMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedMembership_compAssignment_1_1_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compFeatureTypeMemberParserRuleCall_1_1_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_1_2.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cOwnedRelationship_compPackageImportParserRuleCall_1_1_3_0 = (RuleCall)cOwnedRelationship_compAssignment_1_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment BehaviorBody returns SysML::Type:
		//	';' |
		//	'{' (documentation_comp+=OwnedDocumentation
		//	| ownedMembership_comp+=NonFeatureTypeMember
		//	| ownedFeatureMembership_comp+=FeatureTypeMember
		//	| ownedRelationship_comp+=PackageImport)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//';' | '{' (documentation_comp+=OwnedDocumentation | ownedMembership_comp+=NonFeatureTypeMember |
		//ownedFeatureMembership_comp+=FeatureTypeMember | ownedRelationship_comp+=PackageImport)* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' (documentation_comp+=OwnedDocumentation | ownedMembership_comp+=NonFeatureTypeMember |
		//ownedFeatureMembership_comp+=FeatureTypeMember | ownedRelationship_comp+=PackageImport)* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//(documentation_comp+=OwnedDocumentation | ownedMembership_comp+=NonFeatureTypeMember |
		//ownedFeatureMembership_comp+=FeatureTypeMember | ownedRelationship_comp+=PackageImport)*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//documentation_comp+=OwnedDocumentation
		public Assignment getDocumentation_compAssignment_1_1_0() { return cDocumentation_compAssignment_1_1_0; }
		
		//OwnedDocumentation
		public RuleCall getDocumentation_compOwnedDocumentationParserRuleCall_1_1_0_0() { return cDocumentation_compOwnedDocumentationParserRuleCall_1_1_0_0; }
		
		//ownedMembership_comp+=NonFeatureTypeMember
		public Assignment getOwnedMembership_compAssignment_1_1_1() { return cOwnedMembership_compAssignment_1_1_1; }
		
		//NonFeatureTypeMember
		public RuleCall getOwnedMembership_compNonFeatureTypeMemberParserRuleCall_1_1_1_0() { return cOwnedMembership_compNonFeatureTypeMemberParserRuleCall_1_1_1_0; }
		
		//ownedFeatureMembership_comp+=FeatureTypeMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_1_2() { return cOwnedFeatureMembership_compAssignment_1_1_2; }
		
		//FeatureTypeMember
		public RuleCall getOwnedFeatureMembership_compFeatureTypeMemberParserRuleCall_1_1_2_0() { return cOwnedFeatureMembership_compFeatureTypeMemberParserRuleCall_1_1_2_0; }
		
		//ownedRelationship_comp+=PackageImport
		public Assignment getOwnedRelationship_compAssignment_1_1_3() { return cOwnedRelationship_compAssignment_1_1_3; }
		
		//PackageImport
		public RuleCall getOwnedRelationship_compPackageImportParserRuleCall_1_1_3_0() { return cOwnedRelationship_compPackageImportParserRuleCall_1_1_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class ParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ParameterMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionFeatureDirectionEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cOwnedMemberParameter_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMemberParameter_compParameterParserRuleCall_1_0 = (RuleCall)cOwnedMemberParameter_compAssignment_1.eContents().get(0);
		
		///* BEHAVIOR MEMBERSHIPS */ ParameterMember SysML::ParameterMembership:
		//	direction=FeatureDirection? ownedMemberParameter_comp=Parameter;
		@Override public ParserRule getRule() { return rule; }
		
		//direction=FeatureDirection? ownedMemberParameter_comp=Parameter
		public Group getGroup() { return cGroup; }
		
		//direction=FeatureDirection?
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//FeatureDirection
		public RuleCall getDirectionFeatureDirectionEnumRuleCall_0_0() { return cDirectionFeatureDirectionEnumRuleCall_0_0; }
		
		//ownedMemberParameter_comp=Parameter
		public Assignment getOwnedMemberParameter_compAssignment_1() { return cOwnedMemberParameter_compAssignment_1; }
		
		//Parameter
		public RuleCall getOwnedMemberParameter_compParameterParserRuleCall_1_0() { return cOwnedMemberParameter_compParameterParserRuleCall_1_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFunctionDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cFunctionBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		///* FUNCTIONS */ Function SysML::Function:
		//	FunctionDeclaration FunctionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//FunctionDeclaration FunctionBody
		public Group getGroup() { return cGroup; }
		
		//FunctionDeclaration
		public RuleCall getFunctionDeclarationParserRuleCall_0() { return cFunctionDeclarationParserRuleCall_0; }
		
		//FunctionBody
		public RuleCall getFunctionBodyParserRuleCall_1() { return cFunctionBodyParserRuleCall_1; }
	}
	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsSufficientAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsSufficientAllKeyword_2_0 = (Keyword)cIsSufficientAssignment_2.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cSpecializationOrConjugationParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cParameterPartParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//fragment FunctionDeclaration returns SysML::Function:
		//	isAbstract?='abstract'? 'function' isSufficient?='all'?
		//	Identification? SpecializationOrConjugation? ParameterPart;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'function' isSufficient?='all'? Identification? SpecializationOrConjugation? ParameterPart
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }
		
		//isSufficient?='all'?
		public Assignment getIsSufficientAssignment_2() { return cIsSufficientAssignment_2; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_2_0() { return cIsSufficientAllKeyword_2_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_3() { return cIdentificationParserRuleCall_3; }
		
		//SpecializationOrConjugation?
		public RuleCall getSpecializationOrConjugationParserRuleCall_4() { return cSpecializationOrConjugationParserRuleCall_4; }
		
		//ParameterPart
		public RuleCall getParameterPartParserRuleCall_5() { return cParameterPartParserRuleCall_5; }
	}
	public class ParameterPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ParameterPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cParameterListParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cReturnParameterPartParserRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cEmptyReturnParameterPartParserRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cEmptyReturnParameterPartParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//fragment ParameterPart returns SysML::Type:
		//	ParameterList (ReturnParameterPart | EmptyReturnParameterPart) | EmptyReturnParameterPart;
		@Override public ParserRule getRule() { return rule; }
		
		//ParameterList (ReturnParameterPart | EmptyReturnParameterPart) | EmptyReturnParameterPart
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ParameterList (ReturnParameterPart | EmptyReturnParameterPart)
		public Group getGroup_0() { return cGroup_0; }
		
		//ParameterList
		public RuleCall getParameterListParserRuleCall_0_0() { return cParameterListParserRuleCall_0_0; }
		
		//(ReturnParameterPart | EmptyReturnParameterPart)
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//ReturnParameterPart
		public RuleCall getReturnParameterPartParserRuleCall_0_1_0() { return cReturnParameterPartParserRuleCall_0_1_0; }
		
		//EmptyReturnParameterPart
		public RuleCall getEmptyReturnParameterPartParserRuleCall_0_1_1() { return cEmptyReturnParameterPartParserRuleCall_0_1_1; }
		
		//EmptyReturnParameterPart
		public RuleCall getEmptyReturnParameterPartParserRuleCall_1() { return cEmptyReturnParameterPartParserRuleCall_1; }
	}
	public class ReturnParameterPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ReturnParameterPart");
		private final Assignment cOwnedFeatureMembership_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compReturnParameterMemberParserRuleCall_0 = (RuleCall)cOwnedFeatureMembership_compAssignment.eContents().get(0);
		
		//fragment ReturnParameterPart returns SysML::Type:
		//	ownedFeatureMembership_comp+=ReturnParameterMember;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=ReturnParameterMember
		public Assignment getOwnedFeatureMembership_compAssignment() { return cOwnedFeatureMembership_compAssignment; }
		
		//ReturnParameterMember
		public RuleCall getOwnedFeatureMembership_compReturnParameterMemberParserRuleCall_0() { return cOwnedFeatureMembership_compReturnParameterMemberParserRuleCall_0; }
	}
	public class EmptyReturnParameterPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.EmptyReturnParameterPart");
		private final Assignment cOwnedFeatureMembership_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compEmptyReturnParameterMemberParserRuleCall_0 = (RuleCall)cOwnedFeatureMembership_compAssignment.eContents().get(0);
		
		//fragment EmptyReturnParameterPart returns SysML::Type:
		//	ownedFeatureMembership_comp+=EmptyReturnParameterMember;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=EmptyReturnParameterMember
		public Assignment getOwnedFeatureMembership_compAssignment() { return cOwnedFeatureMembership_compAssignment; }
		
		//EmptyReturnParameterMember
		public RuleCall getOwnedFeatureMembership_compEmptyReturnParameterMemberParserRuleCall_0() { return cOwnedFeatureMembership_compEmptyReturnParameterMemberParserRuleCall_0; }
	}
	public class EmptyParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.EmptyParameter");
		private final Action cFeatureAction = (Action)rule.eContents().get(1);
		
		//EmptyParameter SysML::Feature:
		//	{SysML::Feature};
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::Feature}
		public Action getFeatureAction() { return cFeatureAction; }
	}
	public class FunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FunctionBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cDocumentation_compAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cDocumentation_compOwnedDocumentationParserRuleCall_1_1_0_0 = (RuleCall)cDocumentation_compAssignment_1_1_0.eContents().get(0);
		private final Assignment cOwnedMembership_compAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cOwnedMembership_compNonFeatureTypeMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedMembership_compAssignment_1_1_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compFeatureTypeMemberParserRuleCall_1_1_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_1_2.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cOwnedRelationship_compPackageImportParserRuleCall_1_1_3_0 = (RuleCall)cOwnedRelationship_compAssignment_1_1_3.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compResultExpressionMemberParserRuleCall_1_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//fragment FunctionBody returns SysML::Type:
		//	';'
		//	| '{' (documentation_comp+=OwnedDocumentation
		//	| ownedMembership_comp+=NonFeatureTypeMember
		//	| ownedFeatureMembership_comp+=FeatureTypeMember
		//	| ownedRelationship_comp+=PackageImport)*
		//	ownedFeatureMembership_comp+=ResultExpressionMember?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//';' | '{' (documentation_comp+=OwnedDocumentation | ownedMembership_comp+=NonFeatureTypeMember |
		//ownedFeatureMembership_comp+=FeatureTypeMember | ownedRelationship_comp+=PackageImport)*
		//ownedFeatureMembership_comp+=ResultExpressionMember? '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' (documentation_comp+=OwnedDocumentation | ownedMembership_comp+=NonFeatureTypeMember |
		//ownedFeatureMembership_comp+=FeatureTypeMember | ownedRelationship_comp+=PackageImport)*
		//ownedFeatureMembership_comp+=ResultExpressionMember? '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//(documentation_comp+=OwnedDocumentation | ownedMembership_comp+=NonFeatureTypeMember |
		//ownedFeatureMembership_comp+=FeatureTypeMember | ownedRelationship_comp+=PackageImport)*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//documentation_comp+=OwnedDocumentation
		public Assignment getDocumentation_compAssignment_1_1_0() { return cDocumentation_compAssignment_1_1_0; }
		
		//OwnedDocumentation
		public RuleCall getDocumentation_compOwnedDocumentationParserRuleCall_1_1_0_0() { return cDocumentation_compOwnedDocumentationParserRuleCall_1_1_0_0; }
		
		//ownedMembership_comp+=NonFeatureTypeMember
		public Assignment getOwnedMembership_compAssignment_1_1_1() { return cOwnedMembership_compAssignment_1_1_1; }
		
		//NonFeatureTypeMember
		public RuleCall getOwnedMembership_compNonFeatureTypeMemberParserRuleCall_1_1_1_0() { return cOwnedMembership_compNonFeatureTypeMemberParserRuleCall_1_1_1_0; }
		
		//ownedFeatureMembership_comp+=FeatureTypeMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_1_2() { return cOwnedFeatureMembership_compAssignment_1_1_2; }
		
		//FeatureTypeMember
		public RuleCall getOwnedFeatureMembership_compFeatureTypeMemberParserRuleCall_1_1_2_0() { return cOwnedFeatureMembership_compFeatureTypeMemberParserRuleCall_1_1_2_0; }
		
		//ownedRelationship_comp+=PackageImport
		public Assignment getOwnedRelationship_compAssignment_1_1_3() { return cOwnedRelationship_compAssignment_1_1_3; }
		
		//PackageImport
		public RuleCall getOwnedRelationship_compPackageImportParserRuleCall_1_1_3_0() { return cOwnedRelationship_compPackageImportParserRuleCall_1_1_3_0; }
		
		//ownedFeatureMembership_comp+=ResultExpressionMember?
		public Assignment getOwnedFeatureMembership_compAssignment_1_2() { return cOwnedFeatureMembership_compAssignment_1_2; }
		
		//ResultExpressionMember
		public RuleCall getOwnedFeatureMembership_compResultExpressionMemberParserRuleCall_1_2_0() { return cOwnedFeatureMembership_compResultExpressionMemberParserRuleCall_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class ReturnParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ReturnParameterMember");
		private final Assignment cOwnedMemberParameter_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberParameter_compParameterParserRuleCall_0 = (RuleCall)cOwnedMemberParameter_compAssignment.eContents().get(0);
		
		///* FUNCTION MEMBERSHIPS */ ReturnParameterMember SysML::ReturnParameterMembership:
		//	ownedMemberParameter_comp=Parameter;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberParameter_comp=Parameter
		public Assignment getOwnedMemberParameter_compAssignment() { return cOwnedMemberParameter_compAssignment; }
		
		//Parameter
		public RuleCall getOwnedMemberParameter_compParameterParserRuleCall_0() { return cOwnedMemberParameter_compParameterParserRuleCall_0; }
	}
	public class EmptyReturnParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.EmptyReturnParameterMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compEmptyParameterParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//EmptyReturnParameterMember SysML::ReturnParameterMembership:
		//	ownedMemberFeature_comp=EmptyParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=EmptyParameter
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//EmptyParameter
		public RuleCall getOwnedMemberFeature_compEmptyParameterParserRuleCall_0() { return cOwnedMemberFeature_compEmptyParameterParserRuleCall_0; }
	}
	public class ResultExpressionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ResultExpressionMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedResultExpression_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedResultExpression_compExpressionParserRuleCall_1_0 = (RuleCall)cOwnedResultExpression_compAssignment_1.eContents().get(0);
		
		//ResultExpressionMember SysML::ResultExpressionMembership:
		//	TypeMemberPrefix ownedResultExpression_comp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeMemberPrefix ownedResultExpression_comp=Expression
		public Group getGroup() { return cGroup; }
		
		//TypeMemberPrefix
		public RuleCall getTypeMemberPrefixParserRuleCall_0() { return cTypeMemberPrefixParserRuleCall_0; }
		
		//ownedResultExpression_comp=Expression
		public Assignment getOwnedResultExpression_compAssignment_1() { return cOwnedResultExpression_compAssignment_1; }
		
		//Expression
		public RuleCall getOwnedResultExpression_compExpressionParserRuleCall_1_0() { return cOwnedResultExpression_compExpressionParserRuleCall_1_0; }
	}
	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Predicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPredicateDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cFunctionBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		///* PREDICATES */ Predicate SysML::Predicate:
		//	PredicateDeclaration FunctionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//PredicateDeclaration FunctionBody
		public Group getGroup() { return cGroup; }
		
		//PredicateDeclaration
		public RuleCall getPredicateDeclarationParserRuleCall_0() { return cPredicateDeclarationParserRuleCall_0; }
		
		//FunctionBody
		public RuleCall getFunctionBodyParserRuleCall_1() { return cFunctionBodyParserRuleCall_1; }
	}
	public class PredicateDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PredicateDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cPredicateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsSufficientAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsSufficientAllKeyword_2_0 = (Keyword)cIsSufficientAssignment_2.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cSpecializationOrConjugationParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cParameterPartParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//fragment PredicateDeclaration returns SysML::Predicate:
		//	isAbstract?='abstract'? 'predicate' isSufficient?='all'?
		//	Identification? SpecializationOrConjugation? ParameterPart;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'predicate' isSufficient?='all'? Identification? SpecializationOrConjugation? ParameterPart
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'predicate'
		public Keyword getPredicateKeyword_1() { return cPredicateKeyword_1; }
		
		//isSufficient?='all'?
		public Assignment getIsSufficientAssignment_2() { return cIsSufficientAssignment_2; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_2_0() { return cIsSufficientAllKeyword_2_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_3() { return cIdentificationParserRuleCall_3; }
		
		//SpecializationOrConjugation?
		public RuleCall getSpecializationOrConjugationParserRuleCall_4() { return cSpecializationOrConjugationParserRuleCall_4; }
		
		//ParameterPart
		public RuleCall getParameterPartParserRuleCall_5() { return cParameterPartParserRuleCall_5; }
	}
	public class InteractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Interaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInteractionDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		///* INTERACTIONS */ Interaction SysML::Interaction:
		//	InteractionDeclaration TypeBody;
		@Override public ParserRule getRule() { return rule; }
		
		//InteractionDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//InteractionDeclaration
		public RuleCall getInteractionDeclarationParserRuleCall_0() { return cInteractionDeclarationParserRuleCall_0; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_1() { return cTypeBodyParserRuleCall_1; }
	}
	public class InteractionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.InteractionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cInteractionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBehaviorDeclarationCompletionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment InteractionDeclaration returns SysML::Interaction:
		//	isAbstract?='abstract'? 'interaction' BehaviorDeclarationCompletion;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'interaction' BehaviorDeclarationCompletion
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'interaction'
		public Keyword getInteractionKeyword_1() { return cInteractionKeyword_1; }
		
		//BehaviorDeclarationCompletion
		public RuleCall getBehaviorDeclarationCompletionParserRuleCall_2() { return cBehaviorDeclarationCompletionParserRuleCall_2; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Feature");
		private final RuleCall cFeatureDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* FEATURES */ Feature SysML::Feature:
		//	FeatureDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureDefinition
		public RuleCall getFeatureDefinitionParserRuleCall() { return cFeatureDefinitionParserRuleCall; }
	}
	public class FeatureDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cFeatureKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cFeatureDeclarationParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final RuleCall cFeatureCompletionParserRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFeatureKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cFeatureCompletionParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//fragment FeatureDefinition returns SysML::Feature:
		//	isAbstract?='abstract'? ('feature'? FeatureDeclaration FeatureCompletion
		//	| 'feature' FeatureCompletion);
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? ('feature'? FeatureDeclaration FeatureCompletion | 'feature' FeatureCompletion)
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//('feature'? FeatureDeclaration FeatureCompletion | 'feature' FeatureCompletion)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'feature'? FeatureDeclaration FeatureCompletion
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'feature'?
		public Keyword getFeatureKeyword_1_0_0() { return cFeatureKeyword_1_0_0; }
		
		//FeatureDeclaration
		public RuleCall getFeatureDeclarationParserRuleCall_1_0_1() { return cFeatureDeclarationParserRuleCall_1_0_1; }
		
		//FeatureCompletion
		public RuleCall getFeatureCompletionParserRuleCall_1_0_2() { return cFeatureCompletionParserRuleCall_1_0_2; }
		
		//'feature' FeatureCompletion
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'feature'
		public Keyword getFeatureKeyword_1_1_0() { return cFeatureKeyword_1_1_0; }
		
		//FeatureCompletion
		public RuleCall getFeatureCompletionParserRuleCall_1_1_1() { return cFeatureCompletionParserRuleCall_1_1_1; }
	}
	public class FeatureDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsSufficientAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsSufficientAllKeyword_0_0 = (Keyword)cIsSufficientAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final RuleCall cFeatureSpecializationPartParserRuleCall_1_0_1_0 = (RuleCall)cAlternatives_1_0_1.eContents().get(0);
		private final RuleCall cFeatureConjugationPartParserRuleCall_1_0_1_1 = (RuleCall)cAlternatives_1_0_1.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final RuleCall cSubsettingsParserRuleCall_1_1_0_0 = (RuleCall)cAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cRedefinitionsParserRuleCall_1_1_0_1 = (RuleCall)cAlternatives_1_1_0.eContents().get(1);
		private final RuleCall cFeatureSpecializationPartParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final RuleCall cTypingsParserRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final RuleCall cMultiplicityPartParserRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final RuleCall cFeatureSpecializationParserRuleCall_1_2_2 = (RuleCall)cGroup_1_2.eContents().get(2);
		private final RuleCall cFeatureConjugationPartParserRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		
		//fragment FeatureDeclaration returns SysML::Feature:
		//	isSufficient?='all'? (Identification (FeatureSpecializationPart | FeatureConjugationPart)?
		//	| (Subsettings | Redefinitions) FeatureSpecializationPart?
		//	| Typings MultiplicityPart? FeatureSpecialization*
		//	| FeatureConjugationPart);
		@Override public ParserRule getRule() { return rule; }
		
		//isSufficient?='all'? (Identification (FeatureSpecializationPart | FeatureConjugationPart)? | (Subsettings |
		//Redefinitions) FeatureSpecializationPart? | Typings MultiplicityPart? FeatureSpecialization* | FeatureConjugationPart)
		public Group getGroup() { return cGroup; }
		
		//isSufficient?='all'?
		public Assignment getIsSufficientAssignment_0() { return cIsSufficientAssignment_0; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_0_0() { return cIsSufficientAllKeyword_0_0; }
		
		//(Identification (FeatureSpecializationPart | FeatureConjugationPart)? | (Subsettings | Redefinitions)
		//FeatureSpecializationPart? | Typings MultiplicityPart? FeatureSpecialization* | FeatureConjugationPart)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Identification (FeatureSpecializationPart | FeatureConjugationPart)?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//Identification
		public RuleCall getIdentificationParserRuleCall_1_0_0() { return cIdentificationParserRuleCall_1_0_0; }
		
		//(FeatureSpecializationPart | FeatureConjugationPart)?
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//FeatureSpecializationPart
		public RuleCall getFeatureSpecializationPartParserRuleCall_1_0_1_0() { return cFeatureSpecializationPartParserRuleCall_1_0_1_0; }
		
		//FeatureConjugationPart
		public RuleCall getFeatureConjugationPartParserRuleCall_1_0_1_1() { return cFeatureConjugationPartParserRuleCall_1_0_1_1; }
		
		//(Subsettings | Redefinitions) FeatureSpecializationPart?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//(Subsettings | Redefinitions)
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//Subsettings
		public RuleCall getSubsettingsParserRuleCall_1_1_0_0() { return cSubsettingsParserRuleCall_1_1_0_0; }
		
		//Redefinitions
		public RuleCall getRedefinitionsParserRuleCall_1_1_0_1() { return cRedefinitionsParserRuleCall_1_1_0_1; }
		
		//FeatureSpecializationPart?
		public RuleCall getFeatureSpecializationPartParserRuleCall_1_1_1() { return cFeatureSpecializationPartParserRuleCall_1_1_1; }
		
		//Typings MultiplicityPart? FeatureSpecialization*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//Typings
		public RuleCall getTypingsParserRuleCall_1_2_0() { return cTypingsParserRuleCall_1_2_0; }
		
		//MultiplicityPart?
		public RuleCall getMultiplicityPartParserRuleCall_1_2_1() { return cMultiplicityPartParserRuleCall_1_2_1; }
		
		//FeatureSpecialization*
		public RuleCall getFeatureSpecializationParserRuleCall_1_2_2() { return cFeatureSpecializationParserRuleCall_1_2_2; }
		
		//FeatureConjugationPart
		public RuleCall getFeatureConjugationPartParserRuleCall_1_3() { return cFeatureConjugationPartParserRuleCall_1_3; }
	}
	public class FeatureSpecializationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureSpecializationPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cSubsettingsParserRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cRedefinitionsParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final Group cGroup_0_0_2 = (Group)cAlternatives_0_0.eContents().get(2);
		private final RuleCall cTypingsParserRuleCall_0_0_2_0 = (RuleCall)cGroup_0_0_2.eContents().get(0);
		private final RuleCall cMultiplicityPartParserRuleCall_0_0_2_1 = (RuleCall)cGroup_0_0_2.eContents().get(1);
		private final RuleCall cFeatureSpecializationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cMultiplicityPartParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cFeatureSpecializationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//fragment FeatureSpecializationPart returns SysML::Feature:
		//	(Subsettings | Redefinitions | Typings MultiplicityPart?) FeatureSpecialization*
		//	| MultiplicityPart FeatureSpecialization*;
		@Override public ParserRule getRule() { return rule; }
		
		//(Subsettings | Redefinitions | Typings MultiplicityPart?) FeatureSpecialization* | MultiplicityPart
		//FeatureSpecialization*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(Subsettings | Redefinitions | Typings MultiplicityPart?) FeatureSpecialization*
		public Group getGroup_0() { return cGroup_0; }
		
		//(Subsettings | Redefinitions | Typings MultiplicityPart?)
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//Subsettings
		public RuleCall getSubsettingsParserRuleCall_0_0_0() { return cSubsettingsParserRuleCall_0_0_0; }
		
		//Redefinitions
		public RuleCall getRedefinitionsParserRuleCall_0_0_1() { return cRedefinitionsParserRuleCall_0_0_1; }
		
		//Typings MultiplicityPart?
		public Group getGroup_0_0_2() { return cGroup_0_0_2; }
		
		//Typings
		public RuleCall getTypingsParserRuleCall_0_0_2_0() { return cTypingsParserRuleCall_0_0_2_0; }
		
		//MultiplicityPart?
		public RuleCall getMultiplicityPartParserRuleCall_0_0_2_1() { return cMultiplicityPartParserRuleCall_0_0_2_1; }
		
		//FeatureSpecialization*
		public RuleCall getFeatureSpecializationParserRuleCall_0_1() { return cFeatureSpecializationParserRuleCall_0_1; }
		
		//MultiplicityPart FeatureSpecialization*
		public Group getGroup_1() { return cGroup_1; }
		
		//MultiplicityPart
		public RuleCall getMultiplicityPartParserRuleCall_1_0() { return cMultiplicityPartParserRuleCall_1_0; }
		
		//FeatureSpecialization*
		public RuleCall getFeatureSpecializationParserRuleCall_1_1() { return cFeatureSpecializationParserRuleCall_1_1; }
	}
	public class MultiplicityPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MultiplicityPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cIsOrderedAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cIsOrderedOrderedKeyword_1_0_0 = (Keyword)cIsOrderedAssignment_1_0.eContents().get(0);
		private final Assignment cIsNonuniqueAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cIsNonuniqueNonuniqueKeyword_1_1_0 = (Keyword)cIsNonuniqueAssignment_1_1.eContents().get(0);
		
		//fragment MultiplicityPart returns SysML::Feature:
		//	ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered'? & isNonunique?='nonunique'?);
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered'? & isNonunique?='nonunique'?)
		public Group getGroup() { return cGroup; }
		
		//ownedFeatureMembership_comp+=MultiplicityMember
		public Assignment getOwnedFeatureMembership_compAssignment_0() { return cOwnedFeatureMembership_compAssignment_0; }
		
		//MultiplicityMember
		public RuleCall getOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_0_0() { return cOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_0_0; }
		
		//(isOrdered?='ordered'? & isNonunique?='nonunique'?)
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//isOrdered?='ordered'?
		public Assignment getIsOrderedAssignment_1_0() { return cIsOrderedAssignment_1_0; }
		
		//'ordered'
		public Keyword getIsOrderedOrderedKeyword_1_0_0() { return cIsOrderedOrderedKeyword_1_0_0; }
		
		//isNonunique?='nonunique'?
		public Assignment getIsNonuniqueAssignment_1_1() { return cIsNonuniqueAssignment_1_1; }
		
		//'nonunique'
		public Keyword getIsNonuniqueNonuniqueKeyword_1_1_0() { return cIsNonuniqueNonuniqueKeyword_1_1_0; }
	}
	public class MultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Multiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compNaturalLiteralMemberParserRuleCall_1_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compUnlimitedNaturalLiteralMemberParserRuleCall_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Multiplicity SysML::MultiplicityRange:
		//	'[' (ownedFeatureMembership_comp+=NaturalLiteralMember '..')?
		//	ownedFeatureMembership_comp+=UnlimitedNaturalLiteralMember ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' (ownedFeatureMembership_comp+=NaturalLiteralMember '..')? ownedFeatureMembership_comp+=UnlimitedNaturalLiteralMember
		//']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//(ownedFeatureMembership_comp+=NaturalLiteralMember '..')?
		public Group getGroup_1() { return cGroup_1; }
		
		//ownedFeatureMembership_comp+=NaturalLiteralMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_0() { return cOwnedFeatureMembership_compAssignment_1_0; }
		
		//NaturalLiteralMember
		public RuleCall getOwnedFeatureMembership_compNaturalLiteralMemberParserRuleCall_1_0_0() { return cOwnedFeatureMembership_compNaturalLiteralMemberParserRuleCall_1_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_1() { return cFullStopFullStopKeyword_1_1; }
		
		//ownedFeatureMembership_comp+=UnlimitedNaturalLiteralMember
		public Assignment getOwnedFeatureMembership_compAssignment_2() { return cOwnedFeatureMembership_compAssignment_2; }
		
		//UnlimitedNaturalLiteralMember
		public RuleCall getOwnedFeatureMembership_compUnlimitedNaturalLiteralMemberParserRuleCall_2_0() { return cOwnedFeatureMembership_compUnlimitedNaturalLiteralMemberParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class FeatureSpecializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureSpecialization");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypingsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubsettingsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRedefinitionsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//fragment FeatureSpecialization returns SysML::Feature:
		//	Typings | Subsettings | Redefinitions;
		@Override public ParserRule getRule() { return rule; }
		
		//Typings | Subsettings | Redefinitions
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Typings
		public RuleCall getTypingsParserRuleCall_0() { return cTypingsParserRuleCall_0; }
		
		//Subsettings
		public RuleCall getSubsettingsParserRuleCall_1() { return cSubsettingsParserRuleCall_1; }
		
		//Redefinitions
		public RuleCall getRedefinitionsParserRuleCall_2() { return cRedefinitionsParserRuleCall_2; }
	}
	public class TypingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Typings");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypedByParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelationship_compFeatureTypingParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationship_compAssignment_1_1.eContents().get(0);
		
		//fragment Typings returns SysML::Feature:
		//	TypedBy (',' ownedRelationship_comp+=FeatureTyping)*;
		@Override public ParserRule getRule() { return rule; }
		
		//TypedBy (',' ownedRelationship_comp+=FeatureTyping)*
		public Group getGroup() { return cGroup; }
		
		//TypedBy
		public RuleCall getTypedByParserRuleCall_0() { return cTypedByParserRuleCall_0; }
		
		//(',' ownedRelationship_comp+=FeatureTyping)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ownedRelationship_comp+=FeatureTyping
		public Assignment getOwnedRelationship_compAssignment_1_1() { return cOwnedRelationship_compAssignment_1_1; }
		
		//FeatureTyping
		public RuleCall getOwnedRelationship_compFeatureTypingParserRuleCall_1_1_0() { return cOwnedRelationship_compFeatureTypingParserRuleCall_1_1_0; }
	}
	public class TypedByElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TypedBy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cTypedKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cByKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationship_compFeatureTypingParserRuleCall_1_0 = (RuleCall)cOwnedRelationship_compAssignment_1.eContents().get(0);
		
		//fragment TypedBy returns SysML::Feature:
		//	(':' | 'typed' 'by') ownedRelationship_comp+=FeatureTyping;
		@Override public ParserRule getRule() { return rule; }
		
		//(':' | 'typed' 'by') ownedRelationship_comp+=FeatureTyping
		public Group getGroup() { return cGroup; }
		
		//(':' | 'typed' 'by')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//':'
		public Keyword getColonKeyword_0_0() { return cColonKeyword_0_0; }
		
		//'typed' 'by'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'typed'
		public Keyword getTypedKeyword_0_1_0() { return cTypedKeyword_0_1_0; }
		
		//'by'
		public Keyword getByKeyword_0_1_1() { return cByKeyword_0_1_1; }
		
		//ownedRelationship_comp+=FeatureTyping
		public Assignment getOwnedRelationship_compAssignment_1() { return cOwnedRelationship_compAssignment_1; }
		
		//FeatureTyping
		public RuleCall getOwnedRelationship_compFeatureTypingParserRuleCall_1_0() { return cOwnedRelationship_compFeatureTypingParserRuleCall_1_0; }
	}
	public class FeatureTypingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureTyping");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_0_1 = (RuleCall)cTypeTypeCrossReference_0.eContents().get(1);
		
		//FeatureTyping SysML::FeatureTyping:
		//	type=[SysML::Type|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//type=[SysML::Type|QualifiedName]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[SysML::Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_0() { return cTypeTypeCrossReference_0; }
		
		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_0_1() { return cTypeTypeQualifiedNameParserRuleCall_0_1; }
	}
	public class FeatureConjugationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureConjugationPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTildeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cConjugatesKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationship_compFeatureConjugationParserRuleCall_1_0 = (RuleCall)cOwnedRelationship_compAssignment_1.eContents().get(0);
		
		//fragment FeatureConjugationPart returns SysML::Feature:
		//	('~' | 'conjugates') ownedRelationship_comp+=FeatureConjugation;
		@Override public ParserRule getRule() { return rule; }
		
		//('~' | 'conjugates') ownedRelationship_comp+=FeatureConjugation
		public Group getGroup() { return cGroup; }
		
		//('~' | 'conjugates')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'~'
		public Keyword getTildeKeyword_0_0() { return cTildeKeyword_0_0; }
		
		//'conjugates'
		public Keyword getConjugatesKeyword_0_1() { return cConjugatesKeyword_0_1; }
		
		//ownedRelationship_comp+=FeatureConjugation
		public Assignment getOwnedRelationship_compAssignment_1() { return cOwnedRelationship_compAssignment_1; }
		
		//FeatureConjugation
		public RuleCall getOwnedRelationship_compFeatureConjugationParserRuleCall_1_0() { return cOwnedRelationship_compFeatureConjugationParserRuleCall_1_0; }
	}
	public class FeatureConjugationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureConjugation");
		private final Assignment cOriginalTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cOriginalTypeFeatureCrossReference_0 = (CrossReference)cOriginalTypeAssignment.eContents().get(0);
		private final RuleCall cOriginalTypeFeatureQualifiedNameParserRuleCall_0_1 = (RuleCall)cOriginalTypeFeatureCrossReference_0.eContents().get(1);
		
		//FeatureConjugation SysML::Conjugation:
		//	originalType=[SysML::Feature|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//originalType=[SysML::Feature|QualifiedName]
		public Assignment getOriginalTypeAssignment() { return cOriginalTypeAssignment; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getOriginalTypeFeatureCrossReference_0() { return cOriginalTypeFeatureCrossReference_0; }
		
		//QualifiedName
		public RuleCall getOriginalTypeFeatureQualifiedNameParserRuleCall_0_1() { return cOriginalTypeFeatureQualifiedNameParserRuleCall_0_1; }
	}
	public class FeatureCompletionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureCompletion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValuePartParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fragment FeatureCompletion returns SysML::Feature:
		//	ValuePart? TypeBody;
		@Override public ParserRule getRule() { return rule; }
		
		//ValuePart? TypeBody
		public Group getGroup() { return cGroup; }
		
		//ValuePart?
		public RuleCall getValuePartParserRuleCall_0() { return cValuePartParserRuleCall_0; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_1() { return cTypeBodyParserRuleCall_1; }
	}
	public class ValuePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ValuePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compFeatureValueParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		
		//fragment ValuePart returns SysML::Feature:
		//	'=' ownedFeatureMembership_comp+=FeatureValue;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' ownedFeatureMembership_comp+=FeatureValue
		public Group getGroup() { return cGroup; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//ownedFeatureMembership_comp+=FeatureValue
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//FeatureValue
		public RuleCall getOwnedFeatureMembership_compFeatureValueParserRuleCall_1_0() { return cOwnedFeatureMembership_compFeatureValueParserRuleCall_1_0; }
	}
	public class FeatureValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureValue");
		private final Assignment cValue_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValue_compExpressionParserRuleCall_0 = (RuleCall)cValue_compAssignment.eContents().get(0);
		
		//FeatureValue SysML::FeatureValue:
		//	value_comp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//value_comp=Expression
		public Assignment getValue_compAssignment() { return cValue_compAssignment; }
		
		//Expression
		public RuleCall getValue_compExpressionParserRuleCall_0() { return cValue_compExpressionParserRuleCall_0; }
	}
	public class SubsettingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Subsettings");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubsetsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelationship_compSubsetParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationship_compAssignment_1_1.eContents().get(0);
		
		//fragment Subsettings returns SysML::Feature:
		//	Subsets (',' ownedRelationship_comp+=Subset)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Subsets (',' ownedRelationship_comp+=Subset)*
		public Group getGroup() { return cGroup; }
		
		//Subsets
		public RuleCall getSubsetsParserRuleCall_0() { return cSubsetsParserRuleCall_0; }
		
		//(',' ownedRelationship_comp+=Subset)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ownedRelationship_comp+=Subset
		public Assignment getOwnedRelationship_compAssignment_1_1() { return cOwnedRelationship_compAssignment_1_1; }
		
		//Subset
		public RuleCall getOwnedRelationship_compSubsetParserRuleCall_1_1_0() { return cOwnedRelationship_compSubsetParserRuleCall_1_1_0; }
	}
	public class SubsetsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Subsets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cColonGreaterThanSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSubsetsKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationship_compSubsetParserRuleCall_1_0 = (RuleCall)cOwnedRelationship_compAssignment_1.eContents().get(0);
		
		//fragment Subsets returns SysML::Feature:
		//	(':>' | 'subsets') ownedRelationship_comp+=Subset;
		@Override public ParserRule getRule() { return rule; }
		
		//(':>' | 'subsets') ownedRelationship_comp+=Subset
		public Group getGroup() { return cGroup; }
		
		//(':>' | 'subsets')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//':>'
		public Keyword getColonGreaterThanSignKeyword_0_0() { return cColonGreaterThanSignKeyword_0_0; }
		
		//'subsets'
		public Keyword getSubsetsKeyword_0_1() { return cSubsetsKeyword_0_1; }
		
		//ownedRelationship_comp+=Subset
		public Assignment getOwnedRelationship_compAssignment_1() { return cOwnedRelationship_compAssignment_1; }
		
		//Subset
		public RuleCall getOwnedRelationship_compSubsetParserRuleCall_1_0() { return cOwnedRelationship_compSubsetParserRuleCall_1_0; }
	}
	public class SubsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Subset");
		private final Assignment cSubsettedFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSubsettedFeatureFeatureCrossReference_0 = (CrossReference)cSubsettedFeatureAssignment.eContents().get(0);
		private final RuleCall cSubsettedFeatureFeatureQualifiedNameParserRuleCall_0_1 = (RuleCall)cSubsettedFeatureFeatureCrossReference_0.eContents().get(1);
		
		//Subset SysML::Subsetting:
		//	subsettedFeature=[SysML::Feature|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//subsettedFeature=[SysML::Feature|QualifiedName]
		public Assignment getSubsettedFeatureAssignment() { return cSubsettedFeatureAssignment; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getSubsettedFeatureFeatureCrossReference_0() { return cSubsettedFeatureFeatureCrossReference_0; }
		
		//QualifiedName
		public RuleCall getSubsettedFeatureFeatureQualifiedNameParserRuleCall_0_1() { return cSubsettedFeatureFeatureQualifiedNameParserRuleCall_0_1; }
	}
	public class RedefinitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Redefinitions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRedefinesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedRelationship_compAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelationship_compRedefinitionParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationship_compAssignment_1_1.eContents().get(0);
		
		//fragment Redefinitions returns SysML::Feature:
		//	Redefines (',' ownedRelationship_comp+=Redefinition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Redefines (',' ownedRelationship_comp+=Redefinition)*
		public Group getGroup() { return cGroup; }
		
		//Redefines
		public RuleCall getRedefinesParserRuleCall_0() { return cRedefinesParserRuleCall_0; }
		
		//(',' ownedRelationship_comp+=Redefinition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ownedRelationship_comp+=Redefinition
		public Assignment getOwnedRelationship_compAssignment_1_1() { return cOwnedRelationship_compAssignment_1_1; }
		
		//Redefinition
		public RuleCall getOwnedRelationship_compRedefinitionParserRuleCall_1_1_0() { return cOwnedRelationship_compRedefinitionParserRuleCall_1_1_0; }
	}
	public class RedefinesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Redefines");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cColonGreaterThanSignGreaterThanSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRedefinesKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationship_compRedefinitionParserRuleCall_1_0 = (RuleCall)cOwnedRelationship_compAssignment_1.eContents().get(0);
		
		//fragment Redefines returns SysML::Feature:
		//	(':>>' | 'redefines') ownedRelationship_comp+=Redefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//(':>>' | 'redefines') ownedRelationship_comp+=Redefinition
		public Group getGroup() { return cGroup; }
		
		//(':>>' | 'redefines')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//':>>'
		public Keyword getColonGreaterThanSignGreaterThanSignKeyword_0_0() { return cColonGreaterThanSignGreaterThanSignKeyword_0_0; }
		
		//'redefines'
		public Keyword getRedefinesKeyword_0_1() { return cRedefinesKeyword_0_1; }
		
		//ownedRelationship_comp+=Redefinition
		public Assignment getOwnedRelationship_compAssignment_1() { return cOwnedRelationship_compAssignment_1; }
		
		//Redefinition
		public RuleCall getOwnedRelationship_compRedefinitionParserRuleCall_1_0() { return cOwnedRelationship_compRedefinitionParserRuleCall_1_0; }
	}
	public class RedefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Redefinition");
		private final Assignment cRedefinedFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRedefinedFeatureFeatureCrossReference_0 = (CrossReference)cRedefinedFeatureAssignment.eContents().get(0);
		private final RuleCall cRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1 = (RuleCall)cRedefinedFeatureFeatureCrossReference_0.eContents().get(1);
		
		//Redefinition SysML::Redefinition:
		//	redefinedFeature=[SysML::Feature|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//redefinedFeature=[SysML::Feature|QualifiedName]
		public Assignment getRedefinedFeatureAssignment() { return cRedefinedFeatureAssignment; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getRedefinedFeatureFeatureCrossReference_0() { return cRedefinedFeatureFeatureCrossReference_0; }
		
		//QualifiedName
		public RuleCall getRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1() { return cRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1; }
	}
	public class MultiplicityMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MultiplicityMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compMultiplicityParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		///* FEATURE MEMBERSHIPS */ MultiplicityMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=Multiplicity;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=Multiplicity
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//Multiplicity
		public RuleCall getOwnedMemberFeature_compMultiplicityParserRuleCall_0() { return cOwnedMemberFeature_compMultiplicityParserRuleCall_0; }
	}
	public class NaturalLiteralMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NaturalLiteralMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compNaturalLiteralExpressionParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//NaturalLiteralMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=NaturalLiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=NaturalLiteralExpression
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//NaturalLiteralExpression
		public RuleCall getOwnedMemberFeature_compNaturalLiteralExpressionParserRuleCall_0() { return cOwnedMemberFeature_compNaturalLiteralExpressionParserRuleCall_0; }
	}
	public class UnlimitedNaturalLiteralMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.UnlimitedNaturalLiteralMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compUnlimitedNaturalLiteralExpressionParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//UnlimitedNaturalLiteralMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=UnlimitedNaturalLiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=UnlimitedNaturalLiteralExpression
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//UnlimitedNaturalLiteralExpression
		public RuleCall getOwnedMemberFeature_compUnlimitedNaturalLiteralExpressionParserRuleCall_0() { return cOwnedMemberFeature_compUnlimitedNaturalLiteralExpressionParserRuleCall_0; }
	}
	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Connector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cConnectorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cConnectorDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* CONNECTORS */ Connector SysML::Connector:
		//	isAbstract?='abstract'? 'connector' ConnectorDeclaration TypeBody;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'connector' ConnectorDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'connector'
		public Keyword getConnectorKeyword_1() { return cConnectorKeyword_1; }
		
		//ConnectorDeclaration
		public RuleCall getConnectorDeclarationParserRuleCall_2() { return cConnectorDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class ConnectorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ConnectorDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cFeatureDeclarationParserRuleCall_0_0_0_0 = (RuleCall)cGroup_0_0_0.eContents().get(0);
		private final Keyword cFromKeyword_0_0_0_1 = (Keyword)cGroup_0_0_0.eContents().get(1);
		private final Assignment cIsSufficientAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final Keyword cIsSufficientAllKeyword_0_0_1_0 = (Keyword)cIsSufficientAssignment_0_0_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_0_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0_1.eContents().get(0);
		private final Keyword cToKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cOwnedFeatureMembership_compAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_0_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cFeatureDeclarationParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_4_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_4.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Keyword cCommaKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_5_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//fragment ConnectorDeclaration returns SysML::Connector:
		//	(FeatureDeclaration? 'from' | isSufficient?='all')?
		//	ownedFeatureMembership_comp+=ConnectorEndMember 'to' ownedFeatureMembership_comp+=ConnectorEndMember
		//	| FeatureDeclaration?
		//	'(' ownedFeatureMembership_comp+=ConnectorEndMember ',' ownedFeatureMembership_comp+=ConnectorEndMember (','
		//	ownedFeatureMembership_comp+=ConnectorEndMember)*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//(FeatureDeclaration? 'from' | isSufficient?='all')? ownedFeatureMembership_comp+=ConnectorEndMember 'to'
		//ownedFeatureMembership_comp+=ConnectorEndMember | FeatureDeclaration? '('
		//ownedFeatureMembership_comp+=ConnectorEndMember ',' ownedFeatureMembership_comp+=ConnectorEndMember (','
		//ownedFeatureMembership_comp+=ConnectorEndMember)* ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(FeatureDeclaration? 'from' | isSufficient?='all')? ownedFeatureMembership_comp+=ConnectorEndMember 'to'
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Group getGroup_0() { return cGroup_0; }
		
		//(FeatureDeclaration? 'from' | isSufficient?='all')?
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//FeatureDeclaration? 'from'
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }
		
		//FeatureDeclaration?
		public RuleCall getFeatureDeclarationParserRuleCall_0_0_0_0() { return cFeatureDeclarationParserRuleCall_0_0_0_0; }
		
		//'from'
		public Keyword getFromKeyword_0_0_0_1() { return cFromKeyword_0_0_0_1; }
		
		//isSufficient?='all'
		public Assignment getIsSufficientAssignment_0_0_1() { return cIsSufficientAssignment_0_0_1; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_0_0_1_0() { return cIsSufficientAllKeyword_0_0_1_0; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_0_1() { return cOwnedFeatureMembership_compAssignment_0_1; }
		
		//ConnectorEndMember
		public RuleCall getOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_0_1_0() { return cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_0_1_0; }
		
		//'to'
		public Keyword getToKeyword_0_2() { return cToKeyword_0_2; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_0_3() { return cOwnedFeatureMembership_compAssignment_0_3; }
		
		//ConnectorEndMember
		public RuleCall getOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_0_3_0() { return cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_0_3_0; }
		
		//FeatureDeclaration? '(' ownedFeatureMembership_comp+=ConnectorEndMember ','
		//ownedFeatureMembership_comp+=ConnectorEndMember (',' ownedFeatureMembership_comp+=ConnectorEndMember)* ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//FeatureDeclaration?
		public RuleCall getFeatureDeclarationParserRuleCall_1_0() { return cFeatureDeclarationParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_2() { return cOwnedFeatureMembership_compAssignment_1_2; }
		
		//ConnectorEndMember
		public RuleCall getOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_2_0() { return cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_2_0; }
		
		//','
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_4() { return cOwnedFeatureMembership_compAssignment_1_4; }
		
		//ConnectorEndMember
		public RuleCall getOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_4_0() { return cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_4_0; }
		
		//(',' ownedFeatureMembership_comp+=ConnectorEndMember)*
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//','
		public Keyword getCommaKeyword_1_5_0() { return cCommaKeyword_1_5_0; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_5_1() { return cOwnedFeatureMembership_compAssignment_1_5_1; }
		
		//ConnectorEndMember
		public RuleCall getOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_5_1_0() { return cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }
	}
	public class ConnectorEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ConnectorEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationship_compSubsetParserRuleCall_0_0 = (RuleCall)cOwnedRelationship_compAssignment_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		
		//ConnectorEnd SysML::Feature:
		//	ownedRelationship_comp+=Subset ownedFeatureMembership_comp+=MultiplicityMember?;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=Subset ownedFeatureMembership_comp+=MultiplicityMember?
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship_comp+=Subset
		public Assignment getOwnedRelationship_compAssignment_0() { return cOwnedRelationship_compAssignment_0; }
		
		//Subset
		public RuleCall getOwnedRelationship_compSubsetParserRuleCall_0_0() { return cOwnedRelationship_compSubsetParserRuleCall_0_0; }
		
		//ownedFeatureMembership_comp+=MultiplicityMember?
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//MultiplicityMember
		public RuleCall getOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_1_0; }
	}
	public class ConnectorEndMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ConnectorEndMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cMemberNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cMemberNameNameParserRuleCall_0_0_0 = (RuleCall)cMemberNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOwnedMemberFeature_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compConnectorEndParserRuleCall_1_0 = (RuleCall)cOwnedMemberFeature_compAssignment_1.eContents().get(0);
		
		///* CONNECTOR MEMBERSHIPS */ ConnectorEndMember SysML::EndFeatureMembership:
		//	(memberName=Name '=>')? ownedMemberFeature_comp=ConnectorEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//(memberName=Name '=>')? ownedMemberFeature_comp=ConnectorEnd
		public Group getGroup() { return cGroup; }
		
		//(memberName=Name '=>')?
		public Group getGroup_0() { return cGroup_0; }
		
		//memberName=Name
		public Assignment getMemberNameAssignment_0_0() { return cMemberNameAssignment_0_0; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_0_0_0() { return cMemberNameNameParserRuleCall_0_0_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_0_1() { return cEqualsSignGreaterThanSignKeyword_0_1; }
		
		//ownedMemberFeature_comp=ConnectorEnd
		public Assignment getOwnedMemberFeature_compAssignment_1() { return cOwnedMemberFeature_compAssignment_1; }
		
		//ConnectorEnd
		public RuleCall getOwnedMemberFeature_compConnectorEndParserRuleCall_1_0() { return cOwnedMemberFeature_compConnectorEndParserRuleCall_1_0; }
	}
	public class BindingConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BindingConnector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cBindingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBindingConnectorDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* BINDING CONNECTORS */ BindingConnector SysML::BindingConnector:
		//	isAbstract?='abstract'? 'binding' BindingConnectorDeclaration TypeBody;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'binding' BindingConnectorDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'binding'
		public Keyword getBindingKeyword_1() { return cBindingKeyword_1; }
		
		//BindingConnectorDeclaration
		public RuleCall getBindingConnectorDeclarationParserRuleCall_2() { return cBindingConnectorDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class BindingConnectorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BindingConnectorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cFeatureDeclarationParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cOfKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cIsSufficientAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cIsSufficientAllKeyword_0_1_0 = (Keyword)cIsSufficientAssignment_0_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnedFeatureMembership_compAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_3.eContents().get(0);
		
		//fragment BindingConnectorDeclaration returns SysML::BindingConnector:
		//	(FeatureDeclaration? 'of' | isSufficient?='all')?
		//	ownedFeatureMembership_comp+=ConnectorEndMember '=' ownedFeatureMembership_comp+=ConnectorEndMember;
		@Override public ParserRule getRule() { return rule; }
		
		//(FeatureDeclaration? 'of' | isSufficient?='all')? ownedFeatureMembership_comp+=ConnectorEndMember '='
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Group getGroup() { return cGroup; }
		
		//(FeatureDeclaration? 'of' | isSufficient?='all')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//FeatureDeclaration? 'of'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//FeatureDeclaration?
		public RuleCall getFeatureDeclarationParserRuleCall_0_0_0() { return cFeatureDeclarationParserRuleCall_0_0_0; }
		
		//'of'
		public Keyword getOfKeyword_0_0_1() { return cOfKeyword_0_0_1; }
		
		//isSufficient?='all'
		public Assignment getIsSufficientAssignment_0_1() { return cIsSufficientAssignment_0_1; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_0_1_0() { return cIsSufficientAllKeyword_0_1_0; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//ConnectorEndMember
		public RuleCall getOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_3() { return cOwnedFeatureMembership_compAssignment_3; }
		
		//ConnectorEndMember
		public RuleCall getOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_3_0() { return cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_3_0; }
	}
	public class SuccessionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Succession");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cSuccessionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSuccessionDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* SUCCESSIONS */ Succession SysML::Succession:
		//	isAbstract?='abstract'? 'succession' SuccessionDeclaration TypeBody;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'succession' SuccessionDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'succession'
		public Keyword getSuccessionKeyword_1() { return cSuccessionKeyword_1; }
		
		//SuccessionDeclaration
		public RuleCall getSuccessionDeclarationParserRuleCall_2() { return cSuccessionDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class SuccessionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.SuccessionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cFeatureDeclarationParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cFirstKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cIsSufficientAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cIsSufficientAllKeyword_0_1_0 = (Keyword)cIsSufficientAssignment_0_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnedFeatureMembership_compAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_3.eContents().get(0);
		
		//fragment SuccessionDeclaration returns SysML::Succession:
		//	(FeatureDeclaration? 'first' | isSufficient?='all')?
		//	ownedFeatureMembership_comp+=ConnectorEndMember 'then' ownedFeatureMembership_comp+=ConnectorEndMember;
		@Override public ParserRule getRule() { return rule; }
		
		//(FeatureDeclaration? 'first' | isSufficient?='all')? ownedFeatureMembership_comp+=ConnectorEndMember 'then'
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Group getGroup() { return cGroup; }
		
		//(FeatureDeclaration? 'first' | isSufficient?='all')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//FeatureDeclaration? 'first'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//FeatureDeclaration?
		public RuleCall getFeatureDeclarationParserRuleCall_0_0_0() { return cFeatureDeclarationParserRuleCall_0_0_0; }
		
		//'first'
		public Keyword getFirstKeyword_0_0_1() { return cFirstKeyword_0_0_1; }
		
		//isSufficient?='all'
		public Assignment getIsSufficientAssignment_0_1() { return cIsSufficientAssignment_0_1; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_0_1_0() { return cIsSufficientAllKeyword_0_1_0; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//ConnectorEndMember
		public RuleCall getOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//ownedFeatureMembership_comp+=ConnectorEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_3() { return cOwnedFeatureMembership_compAssignment_3; }
		
		//ConnectorEndMember
		public RuleCall getOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_3_0() { return cOwnedFeatureMembership_compConnectorEndMemberParserRuleCall_3_0; }
	}
	public class ItemFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cStreamKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cItemFlowDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* ITEM FLOWS */ ItemFlow SysML::ItemFlow:
		//	isAbstract?='abstract'? 'stream' ItemFlowDeclaration TypeBody;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'stream' ItemFlowDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'stream'
		public Keyword getStreamKeyword_1() { return cStreamKeyword_1; }
		
		//ItemFlowDeclaration
		public RuleCall getItemFlowDeclarationParserRuleCall_2() { return cItemFlowDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class SuccessionItemFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.SuccessionItemFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cFlowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cItemFlowDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//SuccessionItemFlow SysML::SuccessionItemFlow:
		//	isAbstract?='abstract'? 'flow' ItemFlowDeclaration TypeBody;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'flow' ItemFlowDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'flow'
		public Keyword getFlowKeyword_1() { return cFlowKeyword_1; }
		
		//ItemFlowDeclaration
		public RuleCall getItemFlowDeclarationParserRuleCall_2() { return cItemFlowDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class ItemFlowDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFlowDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cFeatureDeclarationParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_0_1 = (Alternatives)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_0_1_0 = (Group)cAlternatives_0_0_1.eContents().get(0);
		private final Keyword cOfKeyword_0_0_1_0_0 = (Keyword)cGroup_0_0_1_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_0_0_1_0_1 = (Assignment)cGroup_0_0_1_0.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compItemFeatureMemberParserRuleCall_0_0_1_0_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0_0_1_0_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_0_0_1_1 = (Assignment)cAlternatives_0_0_1.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compEmptyItemFeatureMemberParserRuleCall_0_0_1_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0_0_1_1.eContents().get(0);
		private final Keyword cFromKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cIsSufficientAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cIsSufficientAllKeyword_0_1_0_0 = (Keyword)cIsSufficientAssignment_0_1_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compEmptyItemFeatureMemberParserRuleCall_0_1_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0_1_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compItemFlowEndMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnedFeatureMembership_compAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compItemFlowEndMemberParserRuleCall_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_3.eContents().get(0);
		
		//fragment ItemFlowDeclaration returns SysML::ItemFlow:
		//	(FeatureDeclaration? ('of' ownedFeatureMembership_comp+=ItemFeatureMember
		//	| ownedFeatureMembership_comp+=EmptyItemFeatureMember) 'from'
		//	| isSufficient?='all'? ownedFeatureMembership_comp+=EmptyItemFeatureMember)
		//	ownedFeatureMembership_comp+=ItemFlowEndMember 'to' ownedFeatureMembership_comp+=ItemFlowEndMember;
		@Override public ParserRule getRule() { return rule; }
		
		//(FeatureDeclaration? ('of' ownedFeatureMembership_comp+=ItemFeatureMember |
		//ownedFeatureMembership_comp+=EmptyItemFeatureMember) 'from' | isSufficient?='all'?
		//ownedFeatureMembership_comp+=EmptyItemFeatureMember) ownedFeatureMembership_comp+=ItemFlowEndMember 'to'
		//ownedFeatureMembership_comp+=ItemFlowEndMember
		public Group getGroup() { return cGroup; }
		
		//(FeatureDeclaration? ('of' ownedFeatureMembership_comp+=ItemFeatureMember |
		//ownedFeatureMembership_comp+=EmptyItemFeatureMember) 'from' | isSufficient?='all'?
		//ownedFeatureMembership_comp+=EmptyItemFeatureMember)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//FeatureDeclaration? ('of' ownedFeatureMembership_comp+=ItemFeatureMember |
		//ownedFeatureMembership_comp+=EmptyItemFeatureMember) 'from'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//FeatureDeclaration?
		public RuleCall getFeatureDeclarationParserRuleCall_0_0_0() { return cFeatureDeclarationParserRuleCall_0_0_0; }
		
		//('of' ownedFeatureMembership_comp+=ItemFeatureMember | ownedFeatureMembership_comp+=EmptyItemFeatureMember)
		public Alternatives getAlternatives_0_0_1() { return cAlternatives_0_0_1; }
		
		//'of' ownedFeatureMembership_comp+=ItemFeatureMember
		public Group getGroup_0_0_1_0() { return cGroup_0_0_1_0; }
		
		//'of'
		public Keyword getOfKeyword_0_0_1_0_0() { return cOfKeyword_0_0_1_0_0; }
		
		//ownedFeatureMembership_comp+=ItemFeatureMember
		public Assignment getOwnedFeatureMembership_compAssignment_0_0_1_0_1() { return cOwnedFeatureMembership_compAssignment_0_0_1_0_1; }
		
		//ItemFeatureMember
		public RuleCall getOwnedFeatureMembership_compItemFeatureMemberParserRuleCall_0_0_1_0_1_0() { return cOwnedFeatureMembership_compItemFeatureMemberParserRuleCall_0_0_1_0_1_0; }
		
		//ownedFeatureMembership_comp+=EmptyItemFeatureMember
		public Assignment getOwnedFeatureMembership_compAssignment_0_0_1_1() { return cOwnedFeatureMembership_compAssignment_0_0_1_1; }
		
		//EmptyItemFeatureMember
		public RuleCall getOwnedFeatureMembership_compEmptyItemFeatureMemberParserRuleCall_0_0_1_1_0() { return cOwnedFeatureMembership_compEmptyItemFeatureMemberParserRuleCall_0_0_1_1_0; }
		
		//'from'
		public Keyword getFromKeyword_0_0_2() { return cFromKeyword_0_0_2; }
		
		//isSufficient?='all'? ownedFeatureMembership_comp+=EmptyItemFeatureMember
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//isSufficient?='all'?
		public Assignment getIsSufficientAssignment_0_1_0() { return cIsSufficientAssignment_0_1_0; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_0_1_0_0() { return cIsSufficientAllKeyword_0_1_0_0; }
		
		//ownedFeatureMembership_comp+=EmptyItemFeatureMember
		public Assignment getOwnedFeatureMembership_compAssignment_0_1_1() { return cOwnedFeatureMembership_compAssignment_0_1_1; }
		
		//EmptyItemFeatureMember
		public RuleCall getOwnedFeatureMembership_compEmptyItemFeatureMemberParserRuleCall_0_1_1_0() { return cOwnedFeatureMembership_compEmptyItemFeatureMemberParserRuleCall_0_1_1_0; }
		
		//ownedFeatureMembership_comp+=ItemFlowEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//ItemFlowEndMember
		public RuleCall getOwnedFeatureMembership_compItemFlowEndMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compItemFlowEndMemberParserRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//ownedFeatureMembership_comp+=ItemFlowEndMember
		public Assignment getOwnedFeatureMembership_compAssignment_3() { return cOwnedFeatureMembership_compAssignment_3; }
		
		//ItemFlowEndMember
		public RuleCall getOwnedFeatureMembership_compItemFlowEndMemberParserRuleCall_3_0() { return cOwnedFeatureMembership_compItemFlowEndMemberParserRuleCall_3_0; }
	}
	public class ItemFeatureTypingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFeatureTyping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationship_compFeatureTypingParserRuleCall_0_0 = (RuleCall)cOwnedRelationship_compAssignment_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1.eContents().get(0);
		
		//ItemFeatureTyping SysML::ItemFeature:
		//	ownedRelationship_comp+=FeatureTyping ownedFeatureMembership_comp+=MultiplicityMember?;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=FeatureTyping ownedFeatureMembership_comp+=MultiplicityMember?
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship_comp+=FeatureTyping
		public Assignment getOwnedRelationship_compAssignment_0() { return cOwnedRelationship_compAssignment_0; }
		
		//FeatureTyping
		public RuleCall getOwnedRelationship_compFeatureTypingParserRuleCall_0_0() { return cOwnedRelationship_compFeatureTypingParserRuleCall_0_0; }
		
		//ownedFeatureMembership_comp+=MultiplicityMember?
		public Assignment getOwnedFeatureMembership_compAssignment_1() { return cOwnedFeatureMembership_compAssignment_1; }
		
		//MultiplicityMember
		public RuleCall getOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_1_0() { return cOwnedFeatureMembership_compMultiplicityMemberParserRuleCall_1_0; }
	}
	public class EmptyItemFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.EmptyItemFeature");
		private final Action cItemFeatureAction = (Action)rule.eContents().get(1);
		
		//EmptyItemFeature SysML::ItemFeature:
		//	{SysML::ItemFeature};
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::ItemFeature}
		public Action getItemFeatureAction() { return cItemFeatureAction; }
	}
	public class ItemFlowEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFlowEnd");
		private final Assignment cOwnedFeatureMembership_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compItemFlowFeatureMemberParserRuleCall_0 = (RuleCall)cOwnedFeatureMembership_compAssignment.eContents().get(0);
		
		//ItemFlowEnd SysML::ItemFlowEnd:
		//	ownedFeatureMembership_comp+=ItemFlowFeatureMember;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=ItemFlowFeatureMember
		public Assignment getOwnedFeatureMembership_compAssignment() { return cOwnedFeatureMembership_compAssignment; }
		
		//ItemFlowFeatureMember
		public RuleCall getOwnedFeatureMembership_compItemFlowFeatureMemberParserRuleCall_0() { return cOwnedFeatureMembership_compItemFlowFeatureMemberParserRuleCall_0; }
	}
	public class ItemFlowFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFlowFeature");
		private final Assignment cOwnedRelationship_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationship_compRedefinitionParserRuleCall_0 = (RuleCall)cOwnedRelationship_compAssignment.eContents().get(0);
		
		//ItemFlowFeature SysML::ItemFlowFeature:
		//	ownedRelationship_comp+=Redefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=Redefinition
		public Assignment getOwnedRelationship_compAssignment() { return cOwnedRelationship_compAssignment; }
		
		//Redefinition
		public RuleCall getOwnedRelationship_compRedefinitionParserRuleCall_0() { return cOwnedRelationship_compRedefinitionParserRuleCall_0; }
	}
	public class ItemFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFeatureMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cMemberNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cMemberNameNameParserRuleCall_0_0_0 = (RuleCall)cMemberNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOwnedMemberFeature_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compItemFeatureTypingParserRuleCall_1_0 = (RuleCall)cOwnedMemberFeature_compAssignment_1.eContents().get(0);
		
		///* ITEM FLOW MEMBERSHIPS */ ItemFeatureMember SysML::FeatureMembership:
		//	(memberName=Name ':')? ownedMemberFeature_comp=ItemFeatureTyping;
		@Override public ParserRule getRule() { return rule; }
		
		//(memberName=Name ':')? ownedMemberFeature_comp=ItemFeatureTyping
		public Group getGroup() { return cGroup; }
		
		//(memberName=Name ':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//memberName=Name
		public Assignment getMemberNameAssignment_0_0() { return cMemberNameAssignment_0_0; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_0_0_0() { return cMemberNameNameParserRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//ownedMemberFeature_comp=ItemFeatureTyping
		public Assignment getOwnedMemberFeature_compAssignment_1() { return cOwnedMemberFeature_compAssignment_1; }
		
		//ItemFeatureTyping
		public RuleCall getOwnedMemberFeature_compItemFeatureTypingParserRuleCall_1_0() { return cOwnedMemberFeature_compItemFeatureTypingParserRuleCall_1_0; }
	}
	public class ItemFlowEndMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFlowEndMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compItemFlowEndParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//ItemFlowEndMember SysML::EndFeatureMembership:
		//	ownedMemberFeature_comp=ItemFlowEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=ItemFlowEnd
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//ItemFlowEnd
		public RuleCall getOwnedMemberFeature_compItemFlowEndParserRuleCall_0() { return cOwnedMemberFeature_compItemFlowEndParserRuleCall_0; }
	}
	public class ItemFlowFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFlowFeatureMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compItemFlowFeatureParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//ItemFlowFeatureMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=ItemFlowFeature;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=ItemFlowFeature
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//ItemFlowFeature
		public RuleCall getOwnedMemberFeature_compItemFlowFeatureParserRuleCall_0() { return cOwnedMemberFeature_compItemFlowFeatureParserRuleCall_0; }
	}
	public class EmptyItemFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.EmptyItemFeatureMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compEmptyItemFeatureParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//EmptyItemFeatureMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=EmptyItemFeature;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=EmptyItemFeature
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//EmptyItemFeature
		public RuleCall getOwnedMemberFeature_compEmptyItemFeatureParserRuleCall_0() { return cOwnedMemberFeature_compEmptyItemFeatureParserRuleCall_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFeatureKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cParameterDeclarationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStepAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cStepKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cParameterDeclarationParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cExprKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cParameterDeclarationParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBooleanExpressionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cBoolKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cParameterDeclarationParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		///* PARAMETERS */ Parameter SysML::Feature:
		//	'feature'? ParameterDeclaration
		//	| {SysML::Step} 'step' ParameterDeclaration
		//	| {SysML::Expression} 'expr' ParameterDeclaration
		//	| {SysML::BooleanExpression} 'bool' ParameterDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//'feature'? ParameterDeclaration | {SysML::Step} 'step' ParameterDeclaration | {SysML::Expression} 'expr'
		//ParameterDeclaration | {SysML::BooleanExpression} 'bool' ParameterDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'feature'? ParameterDeclaration
		public Group getGroup_0() { return cGroup_0; }
		
		//'feature'?
		public Keyword getFeatureKeyword_0_0() { return cFeatureKeyword_0_0; }
		
		//ParameterDeclaration
		public RuleCall getParameterDeclarationParserRuleCall_0_1() { return cParameterDeclarationParserRuleCall_0_1; }
		
		//{SysML::Step} 'step' ParameterDeclaration
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::Step}
		public Action getStepAction_1_0() { return cStepAction_1_0; }
		
		//'step'
		public Keyword getStepKeyword_1_1() { return cStepKeyword_1_1; }
		
		//ParameterDeclaration
		public RuleCall getParameterDeclarationParserRuleCall_1_2() { return cParameterDeclarationParserRuleCall_1_2; }
		
		//{SysML::Expression} 'expr' ParameterDeclaration
		public Group getGroup_2() { return cGroup_2; }
		
		//{SysML::Expression}
		public Action getExpressionAction_2_0() { return cExpressionAction_2_0; }
		
		//'expr'
		public Keyword getExprKeyword_2_1() { return cExprKeyword_2_1; }
		
		//ParameterDeclaration
		public RuleCall getParameterDeclarationParserRuleCall_2_2() { return cParameterDeclarationParserRuleCall_2_2; }
		
		//{SysML::BooleanExpression} 'bool' ParameterDeclaration
		public Group getGroup_3() { return cGroup_3; }
		
		//{SysML::BooleanExpression}
		public Action getBooleanExpressionAction_3_0() { return cBooleanExpressionAction_3_0; }
		
		//'bool'
		public Keyword getBoolKeyword_3_1() { return cBoolKeyword_3_1; }
		
		//ParameterDeclaration
		public RuleCall getParameterDeclarationParserRuleCall_3_2() { return cParameterDeclarationParserRuleCall_3_2; }
	}
	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsSufficientAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsSufficientAllKeyword_0_0 = (Keyword)cIsSufficientAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cParameterSpecializationPartParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final RuleCall cParameterSpecializationPartParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//fragment ParameterDeclaration returns SysML::Feature:
		//	isSufficient?='all'? (Identification ParameterSpecializationPart?
		//	| ParameterSpecializationPart);
		@Override public ParserRule getRule() { return rule; }
		
		//isSufficient?='all'? (Identification ParameterSpecializationPart? | ParameterSpecializationPart)
		public Group getGroup() { return cGroup; }
		
		//isSufficient?='all'?
		public Assignment getIsSufficientAssignment_0() { return cIsSufficientAssignment_0; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_0_0() { return cIsSufficientAllKeyword_0_0; }
		
		//(Identification ParameterSpecializationPart? | ParameterSpecializationPart)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Identification ParameterSpecializationPart?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//Identification
		public RuleCall getIdentificationParserRuleCall_1_0_0() { return cIdentificationParserRuleCall_1_0_0; }
		
		//ParameterSpecializationPart?
		public RuleCall getParameterSpecializationPartParserRuleCall_1_0_1() { return cParameterSpecializationPartParserRuleCall_1_0_1; }
		
		//ParameterSpecializationPart
		public RuleCall getParameterSpecializationPartParserRuleCall_1_1() { return cParameterSpecializationPartParserRuleCall_1_1; }
	}
	public class ParameterSpecializationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ParameterSpecializationPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cSubsetsParserRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cRedefinesParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final Group cGroup_0_0_2 = (Group)cAlternatives_0_0.eContents().get(2);
		private final RuleCall cTypedByParserRuleCall_0_0_2_0 = (RuleCall)cGroup_0_0_2.eContents().get(0);
		private final RuleCall cMultiplicityPartParserRuleCall_0_0_2_1 = (RuleCall)cGroup_0_0_2.eContents().get(1);
		private final RuleCall cParameterSpecializationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cMultiplicityPartParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cParameterSpecializationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//fragment ParameterSpecializationPart returns SysML::Feature:
		//	(Subsets | Redefines | TypedBy MultiplicityPart?) ParameterSpecialization*
		//	| MultiplicityPart ParameterSpecialization*;
		@Override public ParserRule getRule() { return rule; }
		
		//(Subsets | Redefines | TypedBy MultiplicityPart?) ParameterSpecialization* | MultiplicityPart ParameterSpecialization*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(Subsets | Redefines | TypedBy MultiplicityPart?) ParameterSpecialization*
		public Group getGroup_0() { return cGroup_0; }
		
		//(Subsets | Redefines | TypedBy MultiplicityPart?)
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//Subsets
		public RuleCall getSubsetsParserRuleCall_0_0_0() { return cSubsetsParserRuleCall_0_0_0; }
		
		//Redefines
		public RuleCall getRedefinesParserRuleCall_0_0_1() { return cRedefinesParserRuleCall_0_0_1; }
		
		//TypedBy MultiplicityPart?
		public Group getGroup_0_0_2() { return cGroup_0_0_2; }
		
		//TypedBy
		public RuleCall getTypedByParserRuleCall_0_0_2_0() { return cTypedByParserRuleCall_0_0_2_0; }
		
		//MultiplicityPart?
		public RuleCall getMultiplicityPartParserRuleCall_0_0_2_1() { return cMultiplicityPartParserRuleCall_0_0_2_1; }
		
		//ParameterSpecialization*
		public RuleCall getParameterSpecializationParserRuleCall_0_1() { return cParameterSpecializationParserRuleCall_0_1; }
		
		//MultiplicityPart ParameterSpecialization*
		public Group getGroup_1() { return cGroup_1; }
		
		//MultiplicityPart
		public RuleCall getMultiplicityPartParserRuleCall_1_0() { return cMultiplicityPartParserRuleCall_1_0; }
		
		//ParameterSpecialization*
		public RuleCall getParameterSpecializationParserRuleCall_1_1() { return cParameterSpecializationParserRuleCall_1_1; }
	}
	public class ParameterSpecializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ParameterSpecialization");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypedByParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubsetsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRedefinesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//fragment ParameterSpecialization returns SysML::Feature:
		//	TypedBy | Subsets | Redefines;
		@Override public ParserRule getRule() { return rule; }
		
		//TypedBy | Subsets | Redefines
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypedBy
		public RuleCall getTypedByParserRuleCall_0() { return cTypedByParserRuleCall_0; }
		
		//Subsets
		public RuleCall getSubsetsParserRuleCall_1() { return cSubsetsParserRuleCall_1; }
		
		//Redefines
		public RuleCall getRedefinesParserRuleCall_2() { return cRedefinesParserRuleCall_2; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Step");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cStepKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStepDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cBehaviorBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* STEPS */ Step SysML::Step:
		//	isAbstract?='abstract'? 'step' StepDeclaration BehaviorBody;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'step' StepDeclaration BehaviorBody
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'step'
		public Keyword getStepKeyword_1() { return cStepKeyword_1; }
		
		//StepDeclaration
		public RuleCall getStepDeclarationParserRuleCall_2() { return cStepDeclarationParserRuleCall_2; }
		
		//BehaviorBody
		public RuleCall getBehaviorBodyParserRuleCall_3() { return cBehaviorBodyParserRuleCall_3; }
	}
	public class StepDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.StepDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeatureDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cValuePartParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cStepParameterListParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//fragment StepDeclaration returns SysML::Step:
		//	FeatureDeclaration? (ValuePart | StepParameterList)?;
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureDeclaration? (ValuePart | StepParameterList)?
		public Group getGroup() { return cGroup; }
		
		//FeatureDeclaration?
		public RuleCall getFeatureDeclarationParserRuleCall_0() { return cFeatureDeclarationParserRuleCall_0; }
		
		//(ValuePart | StepParameterList)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ValuePart
		public RuleCall getValuePartParserRuleCall_1_0() { return cValuePartParserRuleCall_1_0; }
		
		//StepParameterList
		public RuleCall getStepParameterListParserRuleCall_1_1() { return cStepParameterListParserRuleCall_1_1; }
	}
	public class StepParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.StepParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compStepParameterMemberParserRuleCall_1_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compStepParameterMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//fragment StepParameterList returns SysML::Step:
		//	'(' (ownedFeatureMembership_comp+=StepParameterMember (',' ownedFeatureMembership_comp+=StepParameterMember)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (ownedFeatureMembership_comp+=StepParameterMember (',' ownedFeatureMembership_comp+=StepParameterMember)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(ownedFeatureMembership_comp+=StepParameterMember (',' ownedFeatureMembership_comp+=StepParameterMember)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//ownedFeatureMembership_comp+=StepParameterMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_0() { return cOwnedFeatureMembership_compAssignment_1_0; }
		
		//StepParameterMember
		public RuleCall getOwnedFeatureMembership_compStepParameterMemberParserRuleCall_1_0_0() { return cOwnedFeatureMembership_compStepParameterMemberParserRuleCall_1_0_0; }
		
		//(',' ownedFeatureMembership_comp+=StepParameterMember)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//ownedFeatureMembership_comp+=StepParameterMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_1_1() { return cOwnedFeatureMembership_compAssignment_1_1_1; }
		
		//StepParameterMember
		public RuleCall getOwnedFeatureMembership_compStepParameterMemberParserRuleCall_1_1_1_0() { return cOwnedFeatureMembership_compStepParameterMemberParserRuleCall_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class StepParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.StepParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParameterParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cValuePartParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//StepParameter SysML::Feature:
		//	Parameter ValuePart?;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameter ValuePart?
		public Group getGroup() { return cGroup; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_0() { return cParameterParserRuleCall_0; }
		
		//ValuePart?
		public RuleCall getValuePartParserRuleCall_1() { return cValuePartParserRuleCall_1; }
	}
	public class StepParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.StepParameterMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionFeatureDirectionEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cOwnedMemberParameter_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMemberParameter_compStepParameterParserRuleCall_1_0 = (RuleCall)cOwnedMemberParameter_compAssignment_1.eContents().get(0);
		
		///* STEP MEMBERSHIPS */ StepParameterMember SysML::ParameterMembership:
		//	direction=FeatureDirection? ownedMemberParameter_comp=StepParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//direction=FeatureDirection? ownedMemberParameter_comp=StepParameter
		public Group getGroup() { return cGroup; }
		
		//direction=FeatureDirection?
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//FeatureDirection
		public RuleCall getDirectionFeatureDirectionEnumRuleCall_0_0() { return cDirectionFeatureDirectionEnumRuleCall_0_0; }
		
		//ownedMemberParameter_comp=StepParameter
		public Assignment getOwnedMemberParameter_compAssignment_1() { return cOwnedMemberParameter_compAssignment_1; }
		
		//StepParameter
		public RuleCall getOwnedMemberParameter_compStepParameterParserRuleCall_1_0() { return cOwnedMemberParameter_compStepParameterParserRuleCall_1_0; }
	}
	public class InvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Invariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cInvKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBooleanExpressionDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cInvariantPartParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cFunctionBodyParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		///* INVARIANTS */ Invariant SysML::Invariant:
		//	isAbstract?='abstract'? 'inv' BooleanExpressionDeclaration InvariantPart FunctionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'inv' BooleanExpressionDeclaration InvariantPart FunctionBody
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'inv'
		public Keyword getInvKeyword_1() { return cInvKeyword_1; }
		
		//BooleanExpressionDeclaration
		public RuleCall getBooleanExpressionDeclarationParserRuleCall_2() { return cBooleanExpressionDeclarationParserRuleCall_2; }
		
		//InvariantPart
		public RuleCall getInvariantPartParserRuleCall_3() { return cInvariantPartParserRuleCall_3; }
		
		//FunctionBody
		public RuleCall getFunctionBodyParserRuleCall_4() { return cFunctionBodyParserRuleCall_4; }
	}
	public class InvariantPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.InvariantPart");
		private final Assignment cOwnedFeatureMembership_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compTrueLiteralMemberParserRuleCall_0 = (RuleCall)cOwnedFeatureMembership_compAssignment.eContents().get(0);
		
		//fragment InvariantPart returns SysML::Invariant:
		//	ownedFeatureMembership_comp+=TrueLiteralMember;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=TrueLiteralMember
		public Assignment getOwnedFeatureMembership_compAssignment() { return cOwnedFeatureMembership_compAssignment; }
		
		//TrueLiteralMember
		public RuleCall getOwnedFeatureMembership_compTrueLiteralMemberParserRuleCall_0() { return cOwnedFeatureMembership_compTrueLiteralMemberParserRuleCall_0; }
	}
	public class TrueLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TrueLiteralExpression");
		private final Action cLiteralBooleanAction = (Action)rule.eContents().get(1);
		
		//TrueLiteralExpression SysML::LiteralBoolean:
		//	{SysML::LiteralBoolean};
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::LiteralBoolean}
		public Action getLiteralBooleanAction() { return cLiteralBooleanAction; }
	}
	public class TrueLiteralMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TrueLiteralMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compTrueLiteralExpressionParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		///* INVARIANT MEMBERSHIPS */ TrueLiteralMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=TrueLiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=TrueLiteralExpression
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//TrueLiteralExpression
		public RuleCall getOwnedMemberFeature_compTrueLiteralExpressionParserRuleCall_0() { return cOwnedMemberFeature_compTrueLiteralExpressionParserRuleCall_0; }
	}
	public class BlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cExprKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cFunctionBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* EXPRESSIONS */ // Block Expressions
		//BlockExpression SysML::BlockExpression:
		//	isAbstract?='abstract'? 'expr' ExpressionDeclaration FunctionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'expr' ExpressionDeclaration FunctionBody
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'expr'
		public Keyword getExprKeyword_1() { return cExprKeyword_1; }
		
		//ExpressionDeclaration
		public RuleCall getExpressionDeclarationParserRuleCall_2() { return cExpressionDeclarationParserRuleCall_2; }
		
		//FunctionBody
		public RuleCall getFunctionBodyParserRuleCall_3() { return cFunctionBodyParserRuleCall_3; }
	}
	public class ExpressionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ExpressionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeatureDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cValuePartParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cParameterListParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final RuleCall cReturnParameterPartParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//fragment ExpressionDeclaration returns SysML::Expression:
		//	FeatureDeclaration? (ValuePart | ParameterList ReturnParameterPart?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureDeclaration? (ValuePart | ParameterList ReturnParameterPart?)?
		public Group getGroup() { return cGroup; }
		
		//FeatureDeclaration?
		public RuleCall getFeatureDeclarationParserRuleCall_0() { return cFeatureDeclarationParserRuleCall_0; }
		
		//(ValuePart | ParameterList ReturnParameterPart?)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ValuePart
		public RuleCall getValuePartParserRuleCall_1_0() { return cValuePartParserRuleCall_1_0; }
		
		//ParameterList ReturnParameterPart?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//ParameterList
		public RuleCall getParameterListParserRuleCall_1_1_0() { return cParameterListParserRuleCall_1_1_0; }
		
		//ReturnParameterPart?
		public RuleCall getReturnParameterPartParserRuleCall_1_1_1() { return cReturnParameterPartParserRuleCall_1_1_1; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBooleanExpressionDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cFunctionBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//// Boolean Expressions
		//BooleanExpression SysML::BooleanExpression:
		//	isAbstract?='abstract'? 'bool' BooleanExpressionDeclaration FunctionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'bool' BooleanExpressionDeclaration FunctionBody
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'bool'
		public Keyword getBoolKeyword_1() { return cBoolKeyword_1; }
		
		//BooleanExpressionDeclaration
		public RuleCall getBooleanExpressionDeclarationParserRuleCall_2() { return cBooleanExpressionDeclarationParserRuleCall_2; }
		
		//FunctionBody
		public RuleCall getFunctionBodyParserRuleCall_3() { return cFunctionBodyParserRuleCall_3; }
	}
	public class BooleanExpressionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BooleanExpressionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeatureDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cValuePartParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cParameterListParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cEmptyReturnParameterPartParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment BooleanExpressionDeclaration returns SysML::Expression:
		//	FeatureDeclaration? (ValuePart | ParameterList)? EmptyReturnParameterPart;
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureDeclaration? (ValuePart | ParameterList)? EmptyReturnParameterPart
		public Group getGroup() { return cGroup; }
		
		//FeatureDeclaration?
		public RuleCall getFeatureDeclarationParserRuleCall_0() { return cFeatureDeclarationParserRuleCall_0; }
		
		//(ValuePart | ParameterList)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ValuePart
		public RuleCall getValuePartParserRuleCall_1_0() { return cValuePartParserRuleCall_1_0; }
		
		//ParameterList
		public RuleCall getParameterListParserRuleCall_1_1() { return cParameterListParserRuleCall_1_1; }
		
		//EmptyReturnParameterPart
		public RuleCall getEmptyReturnParameterPartParserRuleCall_2() { return cEmptyReturnParameterPartParserRuleCall_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Expression");
		private final RuleCall cConditionalExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Expressions
		//Expression SysML::Expression:
		//	ConditionalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionalExpression
		public RuleCall getConditionalExpressionParserRuleCall() { return cConditionalExpressionParserRuleCall; }
	}
	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNullCoalescingExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorConditionalTestOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cOperand_compAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cOperand_compConditionalExpressionParserRuleCall_1_4_0 = (RuleCall)cOperand_compAssignment_1_4.eContents().get(0);
		
		//// Conditional Test Expressions
		//ConditionalExpression SysML::Expression:
		//	NullCoalescingExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalTestOperator
		//	operand_comp+=Expression ':' operand_comp+=ConditionalExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//NullCoalescingExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalTestOperator
		//operand_comp+=Expression ':' operand_comp+=ConditionalExpression)?
		public Group getGroup() { return cGroup; }
		
		//NullCoalescingExpression
		public RuleCall getNullCoalescingExpressionParserRuleCall_0() { return cNullCoalescingExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalTestOperator operand_comp+=Expression ':'
		//operand_comp+=ConditionalExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=ConditionalTestOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ConditionalTestOperator
		public RuleCall getOperatorConditionalTestOperatorParserRuleCall_1_1_0() { return cOperatorConditionalTestOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=Expression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//Expression
		public RuleCall getOperand_compExpressionParserRuleCall_1_2_0() { return cOperand_compExpressionParserRuleCall_1_2_0; }
		
		//':'
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }
		
		//operand_comp+=ConditionalExpression
		public Assignment getOperand_compAssignment_1_4() { return cOperand_compAssignment_1_4; }
		
		//ConditionalExpression
		public RuleCall getOperand_compConditionalExpressionParserRuleCall_1_4_0() { return cOperand_compConditionalExpressionParserRuleCall_1_4_0; }
	}
	public class ConditionalTestOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ConditionalTestOperator");
		private final Keyword cQuestionMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//ConditionalTestOperator:
		//	'?';
		@Override public ParserRule getRule() { return rule; }
		
		//'?'
		public Keyword getQuestionMarkKeyword() { return cQuestionMarkKeyword; }
	}
	public class NullCoalescingExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NullCoalescingExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionalOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorNullCoalescingOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compConditionalOrExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//// Null Coalescing Expressions
		//NullCoalescingExpression SysML::Expression:
		//	ConditionalOrExpression ({SysML::OperatorExpression.operand_comp+=current} operator=NullCoalescingOperator
		//	operand_comp+=ConditionalOrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionalOrExpression ({SysML::OperatorExpression.operand_comp+=current} operator=NullCoalescingOperator
		//operand_comp+=ConditionalOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//ConditionalOrExpression
		public RuleCall getConditionalOrExpressionParserRuleCall_0() { return cConditionalOrExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=NullCoalescingOperator
		//operand_comp+=ConditionalOrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=NullCoalescingOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//NullCoalescingOperator
		public RuleCall getOperatorNullCoalescingOperatorParserRuleCall_1_1_0() { return cOperatorNullCoalescingOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=ConditionalOrExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//ConditionalOrExpression
		public RuleCall getOperand_compConditionalOrExpressionParserRuleCall_1_2_0() { return cOperand_compConditionalOrExpressionParserRuleCall_1_2_0; }
	}
	public class NullCoalescingOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NullCoalescingOperator");
		private final Keyword cQuestionMarkQuestionMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//NullCoalescingOperator:
		//	'??';
		@Override public ParserRule getRule() { return rule; }
		
		//'??'
		public Keyword getQuestionMarkQuestionMarkKeyword() { return cQuestionMarkQuestionMarkKeyword; }
	}
	public class ConditionalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ConditionalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorConditionalOrOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compConditionalAndExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//// Conditional Logical Expressions
		//ConditionalOrExpression SysML::Expression:
		//	ConditionalAndExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalOrOperator
		//	operand_comp+=ConditionalAndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionalAndExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalOrOperator
		//operand_comp+=ConditionalAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//ConditionalAndExpression
		public RuleCall getConditionalAndExpressionParserRuleCall_0() { return cConditionalAndExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalOrOperator
		//operand_comp+=ConditionalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=ConditionalOrOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ConditionalOrOperator
		public RuleCall getOperatorConditionalOrOperatorParserRuleCall_1_1_0() { return cOperatorConditionalOrOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=ConditionalAndExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//ConditionalAndExpression
		public RuleCall getOperand_compConditionalAndExpressionParserRuleCall_1_2_0() { return cOperand_compConditionalAndExpressionParserRuleCall_1_2_0; }
	}
	public class ConditionalOrOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ConditionalOrOperator");
		private final Keyword cVerticalLineVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//ConditionalOrOperator:
		//	'||';
		@Override public ParserRule getRule() { return rule; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword() { return cVerticalLineVerticalLineKeyword; }
	}
	public class ConditionalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ConditionalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorConditionalAndOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compOrExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//ConditionalAndExpression SysML::Expression:
		//	OrExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalAndOperator
		//	operand_comp+=OrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalAndOperator
		//operand_comp+=OrExpression)*
		public Group getGroup() { return cGroup; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_0() { return cOrExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalAndOperator operand_comp+=OrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=ConditionalAndOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ConditionalAndOperator
		public RuleCall getOperatorConditionalAndOperatorParserRuleCall_1_1_0() { return cOperatorConditionalAndOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=OrExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//OrExpression
		public RuleCall getOperand_compOrExpressionParserRuleCall_1_2_0() { return cOperand_compOrExpressionParserRuleCall_1_2_0; }
	}
	public class ConditionalAndOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ConditionalAndOperator");
		private final Keyword cAmpersandAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//ConditionalAndOperator:
		//	'&&';
		@Override public ParserRule getRule() { return rule; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword() { return cAmpersandAmpersandKeyword; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorOrOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compXorExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//// Logical Expressions
		//OrExpression SysML::Expression:
		//	XorExpression ({SysML::OperatorExpression.operand_comp+=current} operator=OrOperator operand_comp+=XorExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XorExpression ({SysML::OperatorExpression.operand_comp+=current} operator=OrOperator operand_comp+=XorExpression)*
		public Group getGroup() { return cGroup; }
		
		//XorExpression
		public RuleCall getXorExpressionParserRuleCall_0() { return cXorExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=OrOperator operand_comp+=XorExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=OrOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//OrOperator
		public RuleCall getOperatorOrOperatorParserRuleCall_1_1_0() { return cOperatorOrOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=XorExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//XorExpression
		public RuleCall getOperand_compXorExpressionParserRuleCall_1_2_0() { return cOperand_compXorExpressionParserRuleCall_1_2_0; }
	}
	public class OrOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OrOperator");
		private final Keyword cVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//OrOperator:
		//	'|';
		@Override public ParserRule getRule() { return rule; }
		
		//'|'
		public Keyword getVerticalLineKeyword() { return cVerticalLineKeyword; }
	}
	public class XorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.XorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorXorOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compAndExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//XorExpression SysML::Expression:
		//	AndExpression ({SysML::OperatorExpression.operand_comp+=current} operator=XorOperator operand_comp+=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({SysML::OperatorExpression.operand_comp+=current} operator=XorOperator operand_comp+=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=XorOperator operand_comp+=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=XorOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//XorOperator
		public RuleCall getOperatorXorOperatorParserRuleCall_1_1_0() { return cOperatorXorOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=AndExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//AndExpression
		public RuleCall getOperand_compAndExpressionParserRuleCall_1_2_0() { return cOperand_compAndExpressionParserRuleCall_1_2_0; }
	}
	public class XorOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.XorOperator");
		private final Keyword cCircumflexAccentKeyword = (Keyword)rule.eContents().get(1);
		
		//XorOperator:
		//	'^';
		@Override public ParserRule getRule() { return rule; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword() { return cCircumflexAccentKeyword; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAndOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//AndExpression SysML::Expression:
		//	EqualityExpression ({SysML::OperatorExpression.operand_comp+=current} operator=AndOperator
		//	operand_comp+=EqualityExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityExpression ({SysML::OperatorExpression.operand_comp+=current} operator=AndOperator
		//operand_comp+=EqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=AndOperator operand_comp+=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=AndOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AndOperator
		public RuleCall getOperatorAndOperatorParserRuleCall_1_1_0() { return cOperatorAndOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=EqualityExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//EqualityExpression
		public RuleCall getOperand_compEqualityExpressionParserRuleCall_1_2_0() { return cOperand_compEqualityExpressionParserRuleCall_1_2_0; }
	}
	public class AndOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.AndOperator");
		private final Keyword cAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//AndOperator:
		//	'&';
		@Override public ParserRule getRule() { return rule; }
		
		//'&'
		public Keyword getAmpersandKeyword() { return cAmpersandKeyword; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassificationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEqualityOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compClassificationExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//// Equality Expressions
		//EqualityExpression SysML::Expression:
		//	ClassificationExpression ({SysML::OperatorExpression.operand_comp+=current} operator=EqualityOperator
		//	operand_comp+=ClassificationExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ClassificationExpression ({SysML::OperatorExpression.operand_comp+=current} operator=EqualityOperator
		//operand_comp+=ClassificationExpression)*
		public Group getGroup() { return cGroup; }
		
		//ClassificationExpression
		public RuleCall getClassificationExpressionParserRuleCall_0() { return cClassificationExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=EqualityOperator operand_comp+=ClassificationExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=EqualityOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//EqualityOperator
		public RuleCall getOperatorEqualityOperatorParserRuleCall_1_1_0() { return cOperatorEqualityOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=ClassificationExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//ClassificationExpression
		public RuleCall getOperand_compClassificationExpressionParserRuleCall_1_2_0() { return cOperand_compClassificationExpressionParserRuleCall_1_2_0; }
	}
	public class EqualityOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.EqualityOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EqualityOperator:
		//	'==' | '!=';
		@Override public ParserRule getRule() { return rule; }
		
		//'==' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}
	public class ClassificationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ClassificationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorClassificationOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOwnedFeatureMembership_compTypeReferenceMemberParserRuleCall_1_2_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_2.eContents().get(0);
		
		//// Classification Expressions
		//ClassificationExpression SysML::Expression:
		//	RelationalExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ClassificationOperator
		//	ownedFeatureMembership_comp+=TypeReferenceMember)?;
		@Override public ParserRule getRule() { return rule; }
		
		//RelationalExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ClassificationOperator
		//ownedFeatureMembership_comp+=TypeReferenceMember)?
		public Group getGroup() { return cGroup; }
		
		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=ClassificationOperator
		//ownedFeatureMembership_comp+=TypeReferenceMember)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=ClassificationOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ClassificationOperator
		public RuleCall getOperatorClassificationOperatorParserRuleCall_1_1_0() { return cOperatorClassificationOperatorParserRuleCall_1_1_0; }
		
		//ownedFeatureMembership_comp+=TypeReferenceMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_2() { return cOwnedFeatureMembership_compAssignment_1_2; }
		
		//TypeReferenceMember
		public RuleCall getOwnedFeatureMembership_compTypeReferenceMemberParserRuleCall_1_2_0() { return cOwnedFeatureMembership_compTypeReferenceMemberParserRuleCall_1_2_0; }
	}
	public class ClassificationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ClassificationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cInstanceofKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHastypeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIstypeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ClassificationOperator:
		//	'instanceof' | 'hastype' | 'istype';
		@Override public ParserRule getRule() { return rule; }
		
		//'instanceof' | 'hastype' | 'istype'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'instanceof'
		public Keyword getInstanceofKeyword_0() { return cInstanceofKeyword_0; }
		
		//'hastype'
		public Keyword getHastypeKeyword_1() { return cHastypeKeyword_1; }
		
		//'istype'
		public Keyword getIstypeKeyword_2() { return cIstypeKeyword_2; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorRelationalOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//// Relational Expressions
		//RelationalExpression SysML::Expression:
		//	AdditiveExpression ({SysML::OperatorExpression.operand_comp+=current} operator=RelationalOperator
		//	operand_comp+=AdditiveExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditiveExpression ({SysML::OperatorExpression.operand_comp+=current} operator=RelationalOperator
		//operand_comp+=AdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=RelationalOperator operand_comp+=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=RelationalOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorParserRuleCall_1_1_0() { return cOperatorRelationalOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=AdditiveExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//AdditiveExpression
		public RuleCall getOperand_compAdditiveExpressionParserRuleCall_1_2_0() { return cOperand_compAdditiveExpressionParserRuleCall_1_2_0; }
	}
	public class RelationalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//RelationalOperator:
		//	'<' | '>' | '<=' | '>=';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' | '>' | '<=' | '>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAdditiveOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//// Arithmetic Expressions
		//AdditiveExpression SysML::Expression:
		//	MultiplicativeExpression ({SysML::OperatorExpression.operand_comp+=current} operator=AdditiveOperator
		//	operand_comp+=MultiplicativeExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicativeExpression ({SysML::OperatorExpression.operand_comp+=current} operator=AdditiveOperator
		//operand_comp+=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=AdditiveOperator operand_comp+=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=AdditiveOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AdditiveOperator
		public RuleCall getOperatorAdditiveOperatorParserRuleCall_1_1_0() { return cOperatorAdditiveOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=MultiplicativeExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//MultiplicativeExpression
		public RuleCall getOperand_compMultiplicativeExpressionParserRuleCall_1_2_0() { return cOperand_compMultiplicativeExpressionParserRuleCall_1_2_0; }
	}
	public class AdditiveOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AdditiveOperator:
		//	'+' | '-';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExponentiationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorMultiplicativeOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compExponentiationExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression SysML::Expression:
		//	ExponentiationExpression ({SysML::OperatorExpression.operand_comp+=current} operator=MultiplicativeOperator
		//	operand_comp+=ExponentiationExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ExponentiationExpression ({SysML::OperatorExpression.operand_comp+=current} operator=MultiplicativeOperator
		//operand_comp+=ExponentiationExpression)*
		public Group getGroup() { return cGroup; }
		
		//ExponentiationExpression
		public RuleCall getExponentiationExpressionParserRuleCall_0() { return cExponentiationExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=MultiplicativeOperator
		//operand_comp+=ExponentiationExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=MultiplicativeOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//MultiplicativeOperator
		public RuleCall getOperatorMultiplicativeOperatorParserRuleCall_1_1_0() { return cOperatorMultiplicativeOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=ExponentiationExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//ExponentiationExpression
		public RuleCall getOperand_compExponentiationExpressionParserRuleCall_1_2_0() { return cOperand_compExponentiationExpressionParserRuleCall_1_2_0; }
	}
	public class MultiplicativeOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MultiplicativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//MultiplicativeOperator:
		//	'*' | '/';
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
	}
	public class ExponentiationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ExponentiationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitsExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorExponentiationOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compUnitsExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//ExponentiationExpression SysML::Expression:
		//	UnitsExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ExponentiationOperator
		//	operand_comp+=UnitsExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitsExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ExponentiationOperator
		//operand_comp+=UnitsExpression)*
		public Group getGroup() { return cGroup; }
		
		//UnitsExpression
		public RuleCall getUnitsExpressionParserRuleCall_0() { return cUnitsExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=ExponentiationOperator operand_comp+=UnitsExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=ExponentiationOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ExponentiationOperator
		public RuleCall getOperatorExponentiationOperatorParserRuleCall_1_1_0() { return cOperatorExponentiationOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=UnitsExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//UnitsExpression
		public RuleCall getOperand_compUnitsExpressionParserRuleCall_1_2_0() { return cOperand_compUnitsExpressionParserRuleCall_1_2_0; }
	}
	public class ExponentiationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ExponentiationOperator");
		private final Keyword cAsteriskAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//ExponentiationOperator:
		//	'**';
		@Override public ParserRule getRule() { return rule; }
		
		//'**'
		public Keyword getAsteriskAsteriskKeyword() { return cAsteriskAsteriskKeyword; }
	}
	public class UnitsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.UnitsExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorCommercialAtKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cOperand_compAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOperand_compExpressionParserRuleCall_1_3_0 = (RuleCall)cOperand_compAssignment_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//// Units Expressions
		//UnitsExpression SysML::Expression:
		//	UnaryExpression ({SysML::OperatorExpression.operand_comp+=current} operator='@' '[' operand_comp+=Expression ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression ({SysML::OperatorExpression.operand_comp+=current} operator='@' '[' operand_comp+=Expression ']')?
		public Group getGroup() { return cGroup; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator='@' '[' operand_comp+=Expression ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator='@'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'@'
		public Keyword getOperatorCommercialAtKeyword_1_1_0() { return cOperatorCommercialAtKeyword_1_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_2() { return cLeftSquareBracketKeyword_1_2; }
		
		//operand_comp+=Expression
		public Assignment getOperand_compAssignment_1_3() { return cOperand_compAssignment_1_3; }
		
		//Expression
		public RuleCall getOperand_compExpressionParserRuleCall_1_3_0() { return cOperand_compExpressionParserRuleCall_1_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSequenceAccessExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOperatorExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorUnaryOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compSequenceAccessExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//// Unary Expressions
		//UnaryExpression SysML::Expression:
		//	SequenceAccessExpression | {SysML::OperatorExpression} operator=UnaryOperator operand_comp+=SequenceAccessExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//SequenceAccessExpression | {SysML::OperatorExpression} operator=UnaryOperator operand_comp+=SequenceAccessExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SequenceAccessExpression
		public RuleCall getSequenceAccessExpressionParserRuleCall_0() { return cSequenceAccessExpressionParserRuleCall_0; }
		
		//{SysML::OperatorExpression} operator=UnaryOperator operand_comp+=SequenceAccessExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression}
		public Action getOperatorExpressionAction_1_0() { return cOperatorExpressionAction_1_0; }
		
		//operator=UnaryOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//UnaryOperator
		public RuleCall getOperatorUnaryOperatorParserRuleCall_1_1_0() { return cOperatorUnaryOperatorParserRuleCall_1_1_0; }
		
		//operand_comp+=SequenceAccessExpression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//SequenceAccessExpression
		public RuleCall getOperand_compSequenceAccessExpressionParserRuleCall_1_2_0() { return cOperand_compSequenceAccessExpressionParserRuleCall_1_2_0; }
	}
	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTildeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//UnaryOperator:
		//	'+' | '-' | '!' | '~';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '!' | '~'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
		
		//'~'
		public Keyword getTildeKeyword_3() { return cTildeKeyword_3; }
	}
	public class SequenceAccessExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.SequenceAccessExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorLeftSquareBracketKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//SequenceAccessExpression SysML::Expression:
		//	PrimaryExpression ({SysML::OperatorExpression.operand_comp+=current} operator='[' operand_comp+=Expression ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression ({SysML::OperatorExpression.operand_comp+=current} operator='[' operand_comp+=Expression ']')?
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator='[' operand_comp+=Expression ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator='['
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'['
		public Keyword getOperatorLeftSquareBracketKeyword_1_1_0() { return cOperatorLeftSquareBracketKeyword_1_1_0; }
		
		//operand_comp+=Expression
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//Expression
		public RuleCall getOperand_compExpressionParserRuleCall_1_2_0() { return cOperand_compExpressionParserRuleCall_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PrimaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBaseExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperatorNameParserRuleCall_1_2_0 = (RuleCall)cOperatorAssignment_1_2.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compBodyMemberParserRuleCall_1_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_3.eContents().get(0);
		
		//// Primary Expressions
		//PrimaryExpression SysML::Expression:
		//	BaseExpression ({SysML::OperatorExpression.operand_comp+=current} '->'
		//	operator=Name ownedFeatureMembership_comp+=BodyMember+)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BaseExpression ({SysML::OperatorExpression.operand_comp+=current} '->' operator=Name
		//ownedFeatureMembership_comp+=BodyMember+)*
		public Group getGroup() { return cGroup; }
		
		//BaseExpression
		public RuleCall getBaseExpressionParserRuleCall_0() { return cBaseExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} '->' operator=Name ownedFeatureMembership_comp+=BodyMember+)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1() { return cHyphenMinusGreaterThanSignKeyword_1_1; }
		
		//operator=Name
		public Assignment getOperatorAssignment_1_2() { return cOperatorAssignment_1_2; }
		
		//Name
		public RuleCall getOperatorNameParserRuleCall_1_2_0() { return cOperatorNameParserRuleCall_1_2_0; }
		
		//ownedFeatureMembership_comp+=BodyMember+
		public Assignment getOwnedFeatureMembership_compAssignment_1_3() { return cOwnedFeatureMembership_compAssignment_1_3; }
		
		//BodyMember
		public RuleCall getOwnedFeatureMembership_compBodyMemberParserRuleCall_1_3_0() { return cOwnedFeatureMembership_compBodyMemberParserRuleCall_1_3_0; }
	}
	public class BodyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BodyExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compBodyParameterMemberParserRuleCall_0_0_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0_0_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compBodyParameterMemberParserRuleCall_0_0_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cOwnedFeatureMembership_compAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cOwnedFeatureMembership_compResultExpressionMemberParserRuleCall_0_0_3_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_0_4 = (Keyword)cGroup_0_0.eContents().get(4);
		private final Assignment cOwnedRelationship_compAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedRelationship_compExpressionTypingParserRuleCall_1_0 = (RuleCall)cOwnedRelationship_compAssignment_1.eContents().get(0);
		
		//BodyExpression SysML::BlockExpression:
		//	=> (ownedFeatureMembership_comp+=BodyParameterMember ownedFeatureMembership_comp+=BodyParameterMember*
		//	'(' ownedFeatureMembership_comp+=ResultExpressionMember ')') | ownedRelationship_comp+=ExpressionTyping;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (ownedFeatureMembership_comp+=BodyParameterMember ownedFeatureMembership_comp+=BodyParameterMember* '('
		//ownedFeatureMembership_comp+=ResultExpressionMember ')') | ownedRelationship_comp+=ExpressionTyping
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (ownedFeatureMembership_comp+=BodyParameterMember ownedFeatureMembership_comp+=BodyParameterMember* '('
		//ownedFeatureMembership_comp+=ResultExpressionMember ')')
		public Group getGroup_0() { return cGroup_0; }
		
		//(ownedFeatureMembership_comp+=BodyParameterMember ownedFeatureMembership_comp+=BodyParameterMember* '('
		//ownedFeatureMembership_comp+=ResultExpressionMember ')')
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//ownedFeatureMembership_comp+=BodyParameterMember
		public Assignment getOwnedFeatureMembership_compAssignment_0_0_0() { return cOwnedFeatureMembership_compAssignment_0_0_0; }
		
		//BodyParameterMember
		public RuleCall getOwnedFeatureMembership_compBodyParameterMemberParserRuleCall_0_0_0_0() { return cOwnedFeatureMembership_compBodyParameterMemberParserRuleCall_0_0_0_0; }
		
		//ownedFeatureMembership_comp+=BodyParameterMember*
		public Assignment getOwnedFeatureMembership_compAssignment_0_0_1() { return cOwnedFeatureMembership_compAssignment_0_0_1; }
		
		//BodyParameterMember
		public RuleCall getOwnedFeatureMembership_compBodyParameterMemberParserRuleCall_0_0_1_0() { return cOwnedFeatureMembership_compBodyParameterMemberParserRuleCall_0_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0_2() { return cLeftParenthesisKeyword_0_0_2; }
		
		//ownedFeatureMembership_comp+=ResultExpressionMember
		public Assignment getOwnedFeatureMembership_compAssignment_0_0_3() { return cOwnedFeatureMembership_compAssignment_0_0_3; }
		
		//ResultExpressionMember
		public RuleCall getOwnedFeatureMembership_compResultExpressionMemberParserRuleCall_0_0_3_0() { return cOwnedFeatureMembership_compResultExpressionMemberParserRuleCall_0_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_0_4() { return cRightParenthesisKeyword_0_0_4; }
		
		//ownedRelationship_comp+=ExpressionTyping
		public Assignment getOwnedRelationship_compAssignment_1() { return cOwnedRelationship_compAssignment_1; }
		
		//ExpressionTyping
		public RuleCall getOwnedRelationship_compExpressionTypingParserRuleCall_1_0() { return cOwnedRelationship_compExpressionTypingParserRuleCall_1_0; }
	}
	public class BodyParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BodyParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypedByParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cMultiplicityPartParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cMultiplicityPartParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final RuleCall cTypedByParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//BodyParameter SysML::Feature:
		//	{SysML::Feature} (TypedBy MultiplicityPart? | MultiplicityPart TypedBy?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::Feature} (TypedBy MultiplicityPart? | MultiplicityPart TypedBy?)?
		public Group getGroup() { return cGroup; }
		
		//{SysML::Feature}
		public Action getFeatureAction_0() { return cFeatureAction_0; }
		
		//(TypedBy MultiplicityPart? | MultiplicityPart TypedBy?)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//TypedBy MultiplicityPart?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//TypedBy
		public RuleCall getTypedByParserRuleCall_1_0_0() { return cTypedByParserRuleCall_1_0_0; }
		
		//MultiplicityPart?
		public RuleCall getMultiplicityPartParserRuleCall_1_0_1() { return cMultiplicityPartParserRuleCall_1_0_1; }
		
		//MultiplicityPart TypedBy?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//MultiplicityPart
		public RuleCall getMultiplicityPartParserRuleCall_1_1_0() { return cMultiplicityPartParserRuleCall_1_1_0; }
		
		//TypedBy?
		public RuleCall getTypedByParserRuleCall_1_1_1() { return cTypedByParserRuleCall_1_1_1; }
	}
	public class ExpressionTypingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ExpressionTyping");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeFunctionCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeFunctionQualifiedNameParserRuleCall_0_1 = (RuleCall)cTypeFunctionCrossReference_0.eContents().get(1);
		
		//ExpressionTyping SysML::FeatureTyping:
		//	type=[SysML::Function|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//type=[SysML::Function|QualifiedName]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[SysML::Function|QualifiedName]
		public CrossReference getTypeFunctionCrossReference_0() { return cTypeFunctionCrossReference_0; }
		
		//QualifiedName
		public RuleCall getTypeFunctionQualifiedNameParserRuleCall_0_1() { return cTypeFunctionQualifiedNameParserRuleCall_0_1; }
	}
	public class BaseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BaseExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNullExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFeatureReferenceExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInvocationExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExtentExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSequenceConstructionExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//// Base Expressions
		//BaseExpression SysML::Expression:
		//	NullExpression
		//	| LiteralExpression
		//	| FeatureReferenceExpression
		//	| InvocationExpression
		//	| ExtentExpression
		//	| SequenceConstructionExpression
		//	| '(' Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//NullExpression | LiteralExpression | FeatureReferenceExpression | InvocationExpression | ExtentExpression |
		//SequenceConstructionExpression | '(' Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NullExpression
		public RuleCall getNullExpressionParserRuleCall_0() { return cNullExpressionParserRuleCall_0; }
		
		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall_1() { return cLiteralExpressionParserRuleCall_1; }
		
		//FeatureReferenceExpression
		public RuleCall getFeatureReferenceExpressionParserRuleCall_2() { return cFeatureReferenceExpressionParserRuleCall_2; }
		
		//InvocationExpression
		public RuleCall getInvocationExpressionParserRuleCall_3() { return cInvocationExpressionParserRuleCall_3; }
		
		//ExtentExpression
		public RuleCall getExtentExpressionParserRuleCall_4() { return cExtentExpressionParserRuleCall_4; }
		
		//SequenceConstructionExpression
		public RuleCall getSequenceConstructionExpressionParserRuleCall_5() { return cSequenceConstructionExpressionParserRuleCall_5; }
		
		//'(' Expression ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_6_1() { return cExpressionParserRuleCall_6_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }
	}
	public class FeatureReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureReferenceExpression");
		private final Assignment cOwnedFeatureMembership_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compFeatureReferenceMemberParserRuleCall_0 = (RuleCall)cOwnedFeatureMembership_compAssignment.eContents().get(0);
		
		//FeatureReferenceExpression SysML::FeatureReferenceExpression:
		//	ownedFeatureMembership_comp+=FeatureReferenceMember;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=FeatureReferenceMember
		public Assignment getOwnedFeatureMembership_compAssignment() { return cOwnedFeatureMembership_compAssignment; }
		
		//FeatureReferenceMember
		public RuleCall getOwnedFeatureMembership_compFeatureReferenceMemberParserRuleCall_0() { return cOwnedFeatureMembership_compFeatureReferenceMemberParserRuleCall_0; }
	}
	public class FeatureReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureReference");
		private final Assignment cOwnedRelationship_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationship_compSubsetParserRuleCall_0 = (RuleCall)cOwnedRelationship_compAssignment.eContents().get(0);
		
		//FeatureReference SysML::Feature:
		//	ownedRelationship_comp+=Subset;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=Subset
		public Assignment getOwnedRelationship_compAssignment() { return cOwnedRelationship_compAssignment; }
		
		//Subset
		public RuleCall getOwnedRelationship_compSubsetParserRuleCall_0() { return cOwnedRelationship_compSubsetParserRuleCall_0; }
	}
	public class InvocationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.InvocationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationship_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationship_compFeatureTypingParserRuleCall_0_0 = (RuleCall)cOwnedRelationship_compAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTupleParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InvocationExpression SysML::InvocationExpression:
		//	ownedRelationship_comp+=FeatureTyping '(' Tuple? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=FeatureTyping '(' Tuple? ')'
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship_comp+=FeatureTyping
		public Assignment getOwnedRelationship_compAssignment_0() { return cOwnedRelationship_compAssignment_0; }
		
		//FeatureTyping
		public RuleCall getOwnedRelationship_compFeatureTypingParserRuleCall_0_0() { return cOwnedRelationship_compFeatureTypingParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Tuple?
		public RuleCall getTupleParserRuleCall_2() { return cTupleParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class TupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Tuple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPositionalTupleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNamedTupleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//fragment Tuple returns SysML::Expression:
		//	PositionalTuple | NamedTuple;
		@Override public ParserRule getRule() { return rule; }
		
		//PositionalTuple | NamedTuple
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PositionalTuple
		public RuleCall getPositionalTupleParserRuleCall_0() { return cPositionalTupleParserRuleCall_0; }
		
		//NamedTuple
		public RuleCall getNamedTupleParserRuleCall_1() { return cNamedTupleParserRuleCall_1; }
	}
	public class PositionalTupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PositionalTuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compExpressionMemberParserRuleCall_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compExpressionMemberParserRuleCall_1_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_1.eContents().get(0);
		
		//fragment PositionalTuple returns SysML::Expression:
		//	ownedFeatureMembership_comp+=ExpressionMember (',' ownedFeatureMembership_comp+=ExpressionMember)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=ExpressionMember (',' ownedFeatureMembership_comp+=ExpressionMember)*
		public Group getGroup() { return cGroup; }
		
		//ownedFeatureMembership_comp+=ExpressionMember
		public Assignment getOwnedFeatureMembership_compAssignment_0() { return cOwnedFeatureMembership_compAssignment_0; }
		
		//ExpressionMember
		public RuleCall getOwnedFeatureMembership_compExpressionMemberParserRuleCall_0_0() { return cOwnedFeatureMembership_compExpressionMemberParserRuleCall_0_0; }
		
		//(',' ownedFeatureMembership_comp+=ExpressionMember)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ownedFeatureMembership_comp+=ExpressionMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_1() { return cOwnedFeatureMembership_compAssignment_1_1; }
		
		//ExpressionMember
		public RuleCall getOwnedFeatureMembership_compExpressionMemberParserRuleCall_1_1_0() { return cOwnedFeatureMembership_compExpressionMemberParserRuleCall_1_1_0; }
	}
	public class NamedTupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NamedTuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedFeatureMembership_compAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compNamedExpressionMemberParserRuleCall_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compNamedExpressionMemberParserRuleCall_1_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_1.eContents().get(0);
		
		//fragment NamedTuple returns SysML::Expression:
		//	ownedFeatureMembership_comp+=NamedExpressionMember (',' ownedFeatureMembership_comp+=NamedExpressionMember)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=NamedExpressionMember (',' ownedFeatureMembership_comp+=NamedExpressionMember)*
		public Group getGroup() { return cGroup; }
		
		//ownedFeatureMembership_comp+=NamedExpressionMember
		public Assignment getOwnedFeatureMembership_compAssignment_0() { return cOwnedFeatureMembership_compAssignment_0; }
		
		//NamedExpressionMember
		public RuleCall getOwnedFeatureMembership_compNamedExpressionMemberParserRuleCall_0_0() { return cOwnedFeatureMembership_compNamedExpressionMemberParserRuleCall_0_0; }
		
		//(',' ownedFeatureMembership_comp+=NamedExpressionMember)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ownedFeatureMembership_comp+=NamedExpressionMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_1() { return cOwnedFeatureMembership_compAssignment_1_1; }
		
		//NamedExpressionMember
		public RuleCall getOwnedFeatureMembership_compNamedExpressionMemberParserRuleCall_1_1_0() { return cOwnedFeatureMembership_compNamedExpressionMemberParserRuleCall_1_1_0; }
	}
	public class ExtentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ExtentExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOwnedFeatureMembership_compTypeReferenceMemberParserRuleCall_0_0_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOperatorAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final Keyword cOperatorAllInstancesKeyword_0_2_0 = (Keyword)cOperatorAssignment_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperatorAllKeyword_1_0_0 = (Keyword)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cOwnedFeatureMembership_compAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedFeatureMembership_compTypeReferenceMemberParserRuleCall_1_1_0 = (RuleCall)cOwnedFeatureMembership_compAssignment_1_1.eContents().get(0);
		
		//ExtentExpression SysML::OperatorExpression:
		//	ownedFeatureMembership_comp+=TypeReferenceMember '.' operator='allInstances' '(' ')'
		//	| operator='all' ownedFeatureMembership_comp+=TypeReferenceMember;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedFeatureMembership_comp+=TypeReferenceMember '.' operator='allInstances' '(' ')' | operator='all'
		//ownedFeatureMembership_comp+=TypeReferenceMember
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ownedFeatureMembership_comp+=TypeReferenceMember '.' operator='allInstances' '(' ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//ownedFeatureMembership_comp+=TypeReferenceMember
		public Assignment getOwnedFeatureMembership_compAssignment_0_0() { return cOwnedFeatureMembership_compAssignment_0_0; }
		
		//TypeReferenceMember
		public RuleCall getOwnedFeatureMembership_compTypeReferenceMemberParserRuleCall_0_0_0() { return cOwnedFeatureMembership_compTypeReferenceMemberParserRuleCall_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//operator='allInstances'
		public Assignment getOperatorAssignment_0_2() { return cOperatorAssignment_0_2; }
		
		//'allInstances'
		public Keyword getOperatorAllInstancesKeyword_0_2_0() { return cOperatorAllInstancesKeyword_0_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_3() { return cLeftParenthesisKeyword_0_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//operator='all' ownedFeatureMembership_comp+=TypeReferenceMember
		public Group getGroup_1() { return cGroup_1; }
		
		//operator='all'
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }
		
		//'all'
		public Keyword getOperatorAllKeyword_1_0_0() { return cOperatorAllKeyword_1_0_0; }
		
		//ownedFeatureMembership_comp+=TypeReferenceMember
		public Assignment getOwnedFeatureMembership_compAssignment_1_1() { return cOwnedFeatureMembership_compAssignment_1_1; }
		
		//TypeReferenceMember
		public RuleCall getOwnedFeatureMembership_compTypeReferenceMemberParserRuleCall_1_1_0() { return cOwnedFeatureMembership_compTypeReferenceMemberParserRuleCall_1_1_0; }
	}
	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TypeReference");
		private final Assignment cOwnedRelationship_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationship_compFeatureTypingParserRuleCall_0 = (RuleCall)cOwnedRelationship_compAssignment.eContents().get(0);
		
		//TypeReference SysML::Feature:
		//	ownedRelationship_comp+=FeatureTyping;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship_comp+=FeatureTyping
		public Assignment getOwnedRelationship_compAssignment() { return cOwnedRelationship_compAssignment; }
		
		//FeatureTyping
		public RuleCall getOwnedRelationship_compFeatureTypingParserRuleCall_0() { return cOwnedRelationship_compFeatureTypingParserRuleCall_0; }
	}
	public class SequenceConstructionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.SequenceConstructionExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNullExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cAlternatives_1_2.eContents().get(0);
		private final Action cOperatorExpressionOperand_compAction_1_2_0_0 = (Action)cGroup_1_2_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_2_0_1 = (Assignment)cGroup_1_2_0.eContents().get(1);
		private final Keyword cOperatorCommaKeyword_1_2_0_1_0 = (Keyword)cOperatorAssignment_1_2_0_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2_0_2 = (Assignment)cGroup_1_2_0.eContents().get(2);
		private final RuleCall cOperand_compSequenceElementListParserRuleCall_1_2_0_2_0 = (RuleCall)cOperand_compAssignment_1_2_0_2.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cAlternatives_1_2.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_2_1_0 = (Action)cGroup_1_2_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final Keyword cOperatorFullStopFullStopKeyword_1_2_1_1_0 = (Keyword)cOperatorAssignment_1_2_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2_1_2 = (Assignment)cGroup_1_2_1.eContents().get(2);
		private final RuleCall cOperand_compExpressionParserRuleCall_1_2_1_2_0 = (RuleCall)cOperand_compAssignment_1_2_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//SequenceConstructionExpression SysML::Expression:
		//	{SysML::NullExpression} '{' '}'
		//	| '{' Expression ({SysML::OperatorExpression.operand_comp+=current} operator=',' operand_comp+=SequenceElementList
		//	| {SysML::OperatorExpression.operand_comp+=current} operator='..' operand_comp+=Expression)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::NullExpression} '{' '}' | '{' Expression ({SysML::OperatorExpression.operand_comp+=current} operator=','
		//operand_comp+=SequenceElementList | {SysML::OperatorExpression.operand_comp+=current} operator='..'
		//operand_comp+=Expression)? '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SysML::NullExpression} '{' '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//{SysML::NullExpression}
		public Action getNullExpressionAction_0_0() { return cNullExpressionAction_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_2() { return cRightCurlyBracketKeyword_0_2; }
		
		//'{' Expression ({SysML::OperatorExpression.operand_comp+=current} operator=',' operand_comp+=SequenceElementList |
		//{SysML::OperatorExpression.operand_comp+=current} operator='..' operand_comp+=Expression)? '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=',' operand_comp+=SequenceElementList |
		//{SysML::OperatorExpression.operand_comp+=current} operator='..' operand_comp+=Expression)?
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }
		
		//{SysML::OperatorExpression.operand_comp+=current} operator=',' operand_comp+=SequenceElementList
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_2_0_0() { return cOperatorExpressionOperand_compAction_1_2_0_0; }
		
		//operator=','
		public Assignment getOperatorAssignment_1_2_0_1() { return cOperatorAssignment_1_2_0_1; }
		
		//','
		public Keyword getOperatorCommaKeyword_1_2_0_1_0() { return cOperatorCommaKeyword_1_2_0_1_0; }
		
		//operand_comp+=SequenceElementList
		public Assignment getOperand_compAssignment_1_2_0_2() { return cOperand_compAssignment_1_2_0_2; }
		
		//SequenceElementList
		public RuleCall getOperand_compSequenceElementListParserRuleCall_1_2_0_2_0() { return cOperand_compSequenceElementListParserRuleCall_1_2_0_2_0; }
		
		//{SysML::OperatorExpression.operand_comp+=current} operator='..' operand_comp+=Expression
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_2_1_0() { return cOperatorExpressionOperand_compAction_1_2_1_0; }
		
		//operator='..'
		public Assignment getOperatorAssignment_1_2_1_1() { return cOperatorAssignment_1_2_1_1; }
		
		//'..'
		public Keyword getOperatorFullStopFullStopKeyword_1_2_1_1_0() { return cOperatorFullStopFullStopKeyword_1_2_1_1_0; }
		
		//operand_comp+=Expression
		public Assignment getOperand_compAssignment_1_2_1_2() { return cOperand_compAssignment_1_2_1_2; }
		
		//Expression
		public RuleCall getOperand_compExpressionParserRuleCall_1_2_1_2_0() { return cOperand_compExpressionParserRuleCall_1_2_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class SequenceElementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.SequenceElementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperand_compAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorCommaKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand_compAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand_compSequenceElementListParserRuleCall_1_2_0 = (RuleCall)cOperand_compAssignment_1_2.eContents().get(0);
		
		//SequenceElementList SysML::Expression:
		//	Expression ({SysML::OperatorExpression.operand_comp+=current} operator=',' operand_comp+=SequenceElementList)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression ({SysML::OperatorExpression.operand_comp+=current} operator=',' operand_comp+=SequenceElementList)?
		public Group getGroup() { return cGroup; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//({SysML::OperatorExpression.operand_comp+=current} operator=',' operand_comp+=SequenceElementList)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand_comp+=current}
		public Action getOperatorExpressionOperand_compAction_1_0() { return cOperatorExpressionOperand_compAction_1_0; }
		
		//operator=','
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//','
		public Keyword getOperatorCommaKeyword_1_1_0() { return cOperatorCommaKeyword_1_1_0; }
		
		//operand_comp+=SequenceElementList
		public Assignment getOperand_compAssignment_1_2() { return cOperand_compAssignment_1_2; }
		
		//SequenceElementList
		public RuleCall getOperand_compSequenceElementListParserRuleCall_1_2_0() { return cOperand_compSequenceElementListParserRuleCall_1_2_0; }
	}
	public class NullExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NullExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullExpression SysML::NullExpression:
		//	{SysML::NullExpression} 'null';
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::NullExpression} 'null'
		public Group getGroup() { return cGroup; }
		
		//{SysML::NullExpression}
		public Action getNullExpressionAction_0() { return cNullExpressionAction_0; }
		
		//'null'
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}
	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.LiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRealLiteralExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnlimitedNaturalLiteralExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// Literal Expressions
		//LiteralExpression SysML::LiteralExpression:
		//	BooleanLiteralExpression | StringLiteralExpression | RealLiteralExpression | UnlimitedNaturalLiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanLiteralExpression | StringLiteralExpression | RealLiteralExpression | UnlimitedNaturalLiteralExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanLiteralExpression
		public RuleCall getBooleanLiteralExpressionParserRuleCall_0() { return cBooleanLiteralExpressionParserRuleCall_0; }
		
		//StringLiteralExpression
		public RuleCall getStringLiteralExpressionParserRuleCall_1() { return cStringLiteralExpressionParserRuleCall_1; }
		
		//RealLiteralExpression
		public RuleCall getRealLiteralExpressionParserRuleCall_2() { return cRealLiteralExpressionParserRuleCall_2; }
		
		//UnlimitedNaturalLiteralExpression
		public RuleCall getUnlimitedNaturalLiteralExpressionParserRuleCall_3() { return cUnlimitedNaturalLiteralExpressionParserRuleCall_3; }
	}
	public class BooleanLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BooleanLiteralExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanLiteralExpression SysML::LiteralBoolean:
		//	value=BooleanValue;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BooleanValue
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BooleanValue
		public RuleCall getValueBooleanValueParserRuleCall_0() { return cValueBooleanValueParserRuleCall_0; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BooleanValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BooleanValue Ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class StringLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.StringLiteralExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRING_VALUETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteralExpression SysML::LiteralString:
		//	value=STRING_VALUE;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING_VALUE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING_VALUE
		public RuleCall getValueSTRING_VALUETerminalRuleCall_0() { return cValueSTRING_VALUETerminalRuleCall_0; }
	}
	public class RealLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.RealLiteralExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueRealValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//RealLiteralExpression SysML::LiteralReal:
		//	value=RealValue;
		@Override public ParserRule getRule() { return rule; }
		
		//value=RealValue
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//RealValue
		public RuleCall getValueRealValueParserRuleCall_0() { return cValueRealValueParserRuleCall_0; }
	}
	public class RealValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.RealValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDECIMAL_VALUETerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final RuleCall cDECIMAL_VALUETerminalRuleCall_0_2_0 = (RuleCall)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cEXP_VALUETerminalRuleCall_0_2_1 = (RuleCall)cAlternatives_0_2.eContents().get(1);
		private final RuleCall cEXP_VALUETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RealValue Ecore::EDouble:
		//	DECIMAL_VALUE? '.' (DECIMAL_VALUE | EXP_VALUE) | EXP_VALUE;
		@Override public ParserRule getRule() { return rule; }
		
		//DECIMAL_VALUE? '.' (DECIMAL_VALUE | EXP_VALUE) | EXP_VALUE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DECIMAL_VALUE? '.' (DECIMAL_VALUE | EXP_VALUE)
		public Group getGroup_0() { return cGroup_0; }
		
		//DECIMAL_VALUE?
		public RuleCall getDECIMAL_VALUETerminalRuleCall_0_0() { return cDECIMAL_VALUETerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//(DECIMAL_VALUE | EXP_VALUE)
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//DECIMAL_VALUE
		public RuleCall getDECIMAL_VALUETerminalRuleCall_0_2_0() { return cDECIMAL_VALUETerminalRuleCall_0_2_0; }
		
		//EXP_VALUE
		public RuleCall getEXP_VALUETerminalRuleCall_0_2_1() { return cEXP_VALUETerminalRuleCall_0_2_1; }
		
		//EXP_VALUE
		public RuleCall getEXP_VALUETerminalRuleCall_1() { return cEXP_VALUETerminalRuleCall_1; }
	}
	public class NaturalLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NaturalLiteralExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDECIMAL_VALUETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NaturalLiteralExpression SysML::LiteralInteger:
		//	value=DECIMAL_VALUE;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DECIMAL_VALUE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DECIMAL_VALUE
		public RuleCall getValueDECIMAL_VALUETerminalRuleCall_0() { return cValueDECIMAL_VALUETerminalRuleCall_0; }
	}
	public class UnlimitedNaturalLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.UnlimitedNaturalLiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNaturalLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLiteralUnboundedAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//UnlimitedNaturalLiteralExpression SysML::LiteralExpression:
		//	NaturalLiteralExpression | {SysML::LiteralUnbounded} '*';
		@Override public ParserRule getRule() { return rule; }
		
		//NaturalLiteralExpression | {SysML::LiteralUnbounded} '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NaturalLiteralExpression
		public RuleCall getNaturalLiteralExpressionParserRuleCall_0() { return cNaturalLiteralExpressionParserRuleCall_0; }
		
		//{SysML::LiteralUnbounded} '*'
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::LiteralUnbounded}
		public Action getLiteralUnboundedAction_1_0() { return cLiteralUnboundedAction_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}
	public class ExpressionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ExpressionMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compExpressionParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		///* EXPRESSION MEMBERSHIPS */ ExpressionMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=Expression
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//Expression
		public RuleCall getOwnedMemberFeature_compExpressionParserRuleCall_0() { return cOwnedMemberFeature_compExpressionParserRuleCall_0; }
	}
	public class FeatureReferenceMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureReferenceMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compFeatureReferenceParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//FeatureReferenceMember SysML::ReturnParameterMembership:
		//	ownedMemberFeature_comp=FeatureReference;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=FeatureReference
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//FeatureReference
		public RuleCall getOwnedMemberFeature_compFeatureReferenceParserRuleCall_0() { return cOwnedMemberFeature_compFeatureReferenceParserRuleCall_0; }
	}
	public class TypeReferenceMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TypeReferenceMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compTypeReferenceParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//TypeReferenceMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=TypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=TypeReference
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//TypeReference
		public RuleCall getOwnedMemberFeature_compTypeReferenceParserRuleCall_0() { return cOwnedMemberFeature_compTypeReferenceParserRuleCall_0; }
	}
	public class NamedExpressionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NamedExpressionMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMemberNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMemberNameNameParserRuleCall_0_0 = (RuleCall)cMemberNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedMemberFeature_compAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedMemberFeature_compExpressionParserRuleCall_2_0 = (RuleCall)cOwnedMemberFeature_compAssignment_2.eContents().get(0);
		
		//NamedExpressionMember SysML::FeatureMembership:
		//	memberName=Name '=>' ownedMemberFeature_comp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//memberName=Name '=>' ownedMemberFeature_comp=Expression
		public Group getGroup() { return cGroup; }
		
		//memberName=Name
		public Assignment getMemberNameAssignment_0() { return cMemberNameAssignment_0; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_0_0() { return cMemberNameNameParserRuleCall_0_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//ownedMemberFeature_comp=Expression
		public Assignment getOwnedMemberFeature_compAssignment_2() { return cOwnedMemberFeature_compAssignment_2; }
		
		//Expression
		public RuleCall getOwnedMemberFeature_compExpressionParserRuleCall_2_0() { return cOwnedMemberFeature_compExpressionParserRuleCall_2_0; }
	}
	public class BodyMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BodyMember");
		private final Assignment cOwnedMemberFeature_compAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedMemberFeature_compBodyExpressionParserRuleCall_0 = (RuleCall)cOwnedMemberFeature_compAssignment.eContents().get(0);
		
		//BodyMember SysML::FeatureMembership:
		//	ownedMemberFeature_comp=BodyExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedMemberFeature_comp=BodyExpression
		public Assignment getOwnedMemberFeature_compAssignment() { return cOwnedMemberFeature_compAssignment; }
		
		//BodyExpression
		public RuleCall getOwnedMemberFeature_compBodyExpressionParserRuleCall_0() { return cOwnedMemberFeature_compBodyExpressionParserRuleCall_0; }
	}
	public class BodyParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BodyParameterMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMemberNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMemberNameNameParserRuleCall_0_0 = (RuleCall)cMemberNameAssignment_0.eContents().get(0);
		private final Assignment cOwnedMemberParameter_compAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMemberParameter_compBodyParameterParserRuleCall_1_0 = (RuleCall)cOwnedMemberParameter_compAssignment_1.eContents().get(0);
		
		//BodyParameterMember SysML::ParameterMembership:
		//	memberName=Name ownedMemberParameter_comp=BodyParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//memberName=Name ownedMemberParameter_comp=BodyParameter
		public Group getGroup() { return cGroup; }
		
		//memberName=Name
		public Assignment getMemberNameAssignment_0() { return cMemberNameAssignment_0; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_0_0() { return cMemberNameNameParserRuleCall_0_0; }
		
		//ownedMemberParameter_comp=BodyParameter
		public Assignment getOwnedMemberParameter_compAssignment_1() { return cOwnedMemberParameter_compAssignment_1; }
		
		//BodyParameter
		public RuleCall getOwnedMemberParameter_compBodyParameterParserRuleCall_1_0() { return cOwnedMemberParameter_compBodyParameterParserRuleCall_1_0; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUNRESTRICTED_NAMETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* NAMES */ Name:
		//	ID | UNRESTRICTED_NAME;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | UNRESTRICTED_NAME
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//UNRESTRICTED_NAME
		public RuleCall getUNRESTRICTED_NAMETerminalRuleCall_1() { return cUNRESTRICTED_NAMETerminalRuleCall_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.QualifiedName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColonQualifiedNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDotQualifiedNameParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//QualifiedName:
		//	Name | ColonQualifiedName | DotQualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//Name | ColonQualifiedName | DotQualifiedName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//ColonQualifiedName
		public RuleCall getColonQualifiedNameParserRuleCall_1() { return cColonQualifiedNameParserRuleCall_1; }
		
		//DotQualifiedName
		public RuleCall getDotQualifiedNameParserRuleCall_2() { return cDotQualifiedNameParserRuleCall_2; }
	}
	public class ColonQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ColonQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ColonQualifiedName:
		//	Name ('::' Name)+;
		@Override public ParserRule getRule() { return rule; }
		
		//Name ('::' Name)+
		public Group getGroup() { return cGroup; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//('::' Name)+
		public Group getGroup_1() { return cGroup_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }
		
		//Name
		public RuleCall getNameParserRuleCall_1_1() { return cNameParserRuleCall_1_1; }
	}
	public class DotQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.DotQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//DotQualifiedName:
		//	Name ('.' Name)+;
		@Override public ParserRule getRule() { return rule; }
		
		//Name ('.' Name)+
		public Group getGroup() { return cGroup; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//('.' Name)+
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//Name
		public RuleCall getNameParserRuleCall_1_1() { return cNameParserRuleCall_1_1; }
	}
	
	public class PackageElementVisibilityIndicatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PackageElementVisibilityIndicator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_0 = (Keyword)cPrivateEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum PackageElementVisibilityIndicator returns SysML::VisibilityKind:
		//	public | private;
		public EnumRule getRule() { return rule; }
		
		//public | private
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }
		
		//'public'
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }
		
		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_1() { return cPrivateEnumLiteralDeclaration_1; }
		
		//'private'
		public Keyword getPrivatePrivateKeyword_1_0() { return cPrivatePrivateKeyword_1_0; }
	}
	public class VisibilityIndicatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.VisibilityIndicator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_0 = (Keyword)cPrivateEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cProtectedProtectedKeyword_2_0 = (Keyword)cProtectedEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPackageEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPackagePackagedKeyword_3_0 = (Keyword)cPackageEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum VisibilityIndicator returns SysML::VisibilityKind:
		//	public | private | protected | package='packaged';
		public EnumRule getRule() { return rule; }
		
		//public | private | protected | package='packaged'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }
		
		//'public'
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }
		
		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_1() { return cPrivateEnumLiteralDeclaration_1; }
		
		//'private'
		public Keyword getPrivatePrivateKeyword_1_0() { return cPrivatePrivateKeyword_1_0; }
		
		//protected
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_2() { return cProtectedEnumLiteralDeclaration_2; }
		
		//'protected'
		public Keyword getProtectedProtectedKeyword_2_0() { return cProtectedProtectedKeyword_2_0; }
		
		//package='packaged'
		public EnumLiteralDeclaration getPackageEnumLiteralDeclaration_3() { return cPackageEnumLiteralDeclaration_3; }
		
		//'packaged'
		public Keyword getPackagePackagedKeyword_3_0() { return cPackagePackagedKeyword_3_0; }
	}
	public class FeatureDirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInInKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOutOutKeyword_1_0 = (Keyword)cOutEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInoutEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInoutInoutKeyword_2_0 = (Keyword)cInoutEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum FeatureDirection returns SysML::FeatureDirectionKind:
		//	in | out | inout;
		public EnumRule getRule() { return rule; }
		
		//in | out | inout
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }
		
		//'in'
		public Keyword getInInKeyword_0_0() { return cInInKeyword_0_0; }
		
		//out
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration_1() { return cOutEnumLiteralDeclaration_1; }
		
		//'out'
		public Keyword getOutOutKeyword_1_0() { return cOutOutKeyword_1_0; }
		
		//inout
		public EnumLiteralDeclaration getInoutEnumLiteralDeclaration_2() { return cInoutEnumLiteralDeclaration_2; }
		
		//'inout'
		public Keyword getInoutInoutKeyword_2_0() { return cInoutInoutKeyword_2_0; }
	}
	
	private final UnitElements pUnit;
	private final AnonymousPackageElements pAnonymousPackage;
	private final PackageUnitElements pPackageUnit;
	private final ClassifierUnitDefinitionElements pClassifierUnitDefinition;
	private final ClassUnitElements pClassUnit;
	private final DataTypeUnitElements pDataTypeUnit;
	private final AssociationUnitElements pAssociationUnit;
	private final InteractionUnitElements pInteractionUnit;
	private final BehaviorUnitElements pBehaviorUnit;
	private final FunctionUnitElements pFunctionUnit;
	private final PredicateUnitElements pPredicateUnit;
	private final FeatureUnitElements pFeatureUnit;
	private final UnitPrefixElements pUnitPrefix;
	private final IdentificationElements pIdentification;
	private final PackageElementVisibilityIndicatorElements ePackageElementVisibilityIndicator;
	private final VisibilityIndicatorElements eVisibilityIndicator;
	private final AnnotationElements pAnnotation;
	private final EmptyAnnotationElements pEmptyAnnotation;
	private final PrefixAnnotationElements pPrefixAnnotation;
	private final UnitAnnotationElements pUnitAnnotation;
	private final CommentElements pComment;
	private final DocumentationElements pDocumentation;
	private final UnitDocumentationElements pUnitDocumentation;
	private final OwnedDocumentationElements pOwnedDocumentation;
	private final DocumentationCommentElements pDocumentationComment;
	private final TextualRepresentationElements pTextualRepresentation;
	private final PackageImportElements pPackageImport;
	private final ElementAliasElements pElementAlias;
	private final PackageElements pPackage;
	private final PackageDefinitionElements pPackageDefinition;
	private final PackageBodyElements pPackageBody;
	private final PackagedNonFeatureElementElements pPackagedNonFeatureElement;
	private final PackagedFeatureElementElements pPackagedFeatureElement;
	private final PackageMemberElements pPackageMember;
	private final PackageMemberPrefixElements pPackageMemberPrefix;
	private final NonFeatureMemberElementElements pNonFeatureMemberElement;
	private final PackageFeatureMemberElementElements pPackageFeatureMemberElement;
	private final TypeBodyElements pTypeBody;
	private final NonFeatureTypeMemberElements pNonFeatureTypeMember;
	private final FeatureTypeMemberElements pFeatureTypeMember;
	private final FeatureMemberElements pFeatureMember;
	private final EndFeatureMemberElements pEndFeatureMember;
	private final FeatureMemberFlagsElements pFeatureMemberFlags;
	private final FeatureDirectionElements eFeatureDirection;
	private final TypeMemberPrefixElements pTypeMemberPrefix;
	private final ClassifierElements pClassifier;
	private final ClassifierDeclarationElements pClassifierDeclaration;
	private final ClassifierDeclarationCompletionElements pClassifierDeclarationCompletion;
	private final SpecializationOrConjugationElements pSpecializationOrConjugation;
	private final SuperclassingElements pSuperclassing;
	private final ConjugationElements pConjugation;
	private final ClassElements pClass;
	private final ClassDeclarationElements pClassDeclaration;
	private final DataTypeElements pDataType;
	private final DataTypeDeclarationElements pDataTypeDeclaration;
	private final AssociationElements pAssociation;
	private final AssociationDeclarationElements pAssociationDeclaration;
	private final BehaviorElements pBehavior;
	private final BehaviorDeclarationElements pBehaviorDeclaration;
	private final BehaviorDeclarationCompletionElements pBehaviorDeclarationCompletion;
	private final ParameterListElements pParameterList;
	private final BehaviorBodyElements pBehaviorBody;
	private final ParameterMemberElements pParameterMember;
	private final FunctionElements pFunction;
	private final FunctionDeclarationElements pFunctionDeclaration;
	private final ParameterPartElements pParameterPart;
	private final ReturnParameterPartElements pReturnParameterPart;
	private final EmptyReturnParameterPartElements pEmptyReturnParameterPart;
	private final EmptyParameterElements pEmptyParameter;
	private final FunctionBodyElements pFunctionBody;
	private final ReturnParameterMemberElements pReturnParameterMember;
	private final EmptyReturnParameterMemberElements pEmptyReturnParameterMember;
	private final ResultExpressionMemberElements pResultExpressionMember;
	private final PredicateElements pPredicate;
	private final PredicateDeclarationElements pPredicateDeclaration;
	private final InteractionElements pInteraction;
	private final InteractionDeclarationElements pInteractionDeclaration;
	private final FeatureElements pFeature;
	private final FeatureDefinitionElements pFeatureDefinition;
	private final FeatureDeclarationElements pFeatureDeclaration;
	private final FeatureSpecializationPartElements pFeatureSpecializationPart;
	private final MultiplicityPartElements pMultiplicityPart;
	private final MultiplicityElements pMultiplicity;
	private final FeatureSpecializationElements pFeatureSpecialization;
	private final TypingsElements pTypings;
	private final TypedByElements pTypedBy;
	private final FeatureTypingElements pFeatureTyping;
	private final FeatureConjugationPartElements pFeatureConjugationPart;
	private final FeatureConjugationElements pFeatureConjugation;
	private final FeatureCompletionElements pFeatureCompletion;
	private final ValuePartElements pValuePart;
	private final FeatureValueElements pFeatureValue;
	private final SubsettingsElements pSubsettings;
	private final SubsetsElements pSubsets;
	private final SubsetElements pSubset;
	private final RedefinitionsElements pRedefinitions;
	private final RedefinesElements pRedefines;
	private final RedefinitionElements pRedefinition;
	private final MultiplicityMemberElements pMultiplicityMember;
	private final NaturalLiteralMemberElements pNaturalLiteralMember;
	private final UnlimitedNaturalLiteralMemberElements pUnlimitedNaturalLiteralMember;
	private final ConnectorElements pConnector;
	private final ConnectorDeclarationElements pConnectorDeclaration;
	private final ConnectorEndElements pConnectorEnd;
	private final ConnectorEndMemberElements pConnectorEndMember;
	private final BindingConnectorElements pBindingConnector;
	private final BindingConnectorDeclarationElements pBindingConnectorDeclaration;
	private final SuccessionElements pSuccession;
	private final SuccessionDeclarationElements pSuccessionDeclaration;
	private final ItemFlowElements pItemFlow;
	private final SuccessionItemFlowElements pSuccessionItemFlow;
	private final ItemFlowDeclarationElements pItemFlowDeclaration;
	private final ItemFeatureTypingElements pItemFeatureTyping;
	private final EmptyItemFeatureElements pEmptyItemFeature;
	private final ItemFlowEndElements pItemFlowEnd;
	private final ItemFlowFeatureElements pItemFlowFeature;
	private final ItemFeatureMemberElements pItemFeatureMember;
	private final ItemFlowEndMemberElements pItemFlowEndMember;
	private final ItemFlowFeatureMemberElements pItemFlowFeatureMember;
	private final EmptyItemFeatureMemberElements pEmptyItemFeatureMember;
	private final ParameterElements pParameter;
	private final ParameterDeclarationElements pParameterDeclaration;
	private final ParameterSpecializationPartElements pParameterSpecializationPart;
	private final ParameterSpecializationElements pParameterSpecialization;
	private final StepElements pStep;
	private final StepDeclarationElements pStepDeclaration;
	private final StepParameterListElements pStepParameterList;
	private final StepParameterElements pStepParameter;
	private final StepParameterMemberElements pStepParameterMember;
	private final InvariantElements pInvariant;
	private final InvariantPartElements pInvariantPart;
	private final TrueLiteralExpressionElements pTrueLiteralExpression;
	private final TrueLiteralMemberElements pTrueLiteralMember;
	private final BlockExpressionElements pBlockExpression;
	private final ExpressionDeclarationElements pExpressionDeclaration;
	private final BooleanExpressionElements pBooleanExpression;
	private final BooleanExpressionDeclarationElements pBooleanExpressionDeclaration;
	private final ExpressionElements pExpression;
	private final ConditionalExpressionElements pConditionalExpression;
	private final ConditionalTestOperatorElements pConditionalTestOperator;
	private final NullCoalescingExpressionElements pNullCoalescingExpression;
	private final NullCoalescingOperatorElements pNullCoalescingOperator;
	private final ConditionalOrExpressionElements pConditionalOrExpression;
	private final ConditionalOrOperatorElements pConditionalOrOperator;
	private final ConditionalAndExpressionElements pConditionalAndExpression;
	private final ConditionalAndOperatorElements pConditionalAndOperator;
	private final OrExpressionElements pOrExpression;
	private final OrOperatorElements pOrOperator;
	private final XorExpressionElements pXorExpression;
	private final XorOperatorElements pXorOperator;
	private final AndExpressionElements pAndExpression;
	private final AndOperatorElements pAndOperator;
	private final EqualityExpressionElements pEqualityExpression;
	private final EqualityOperatorElements pEqualityOperator;
	private final ClassificationExpressionElements pClassificationExpression;
	private final ClassificationOperatorElements pClassificationOperator;
	private final RelationalExpressionElements pRelationalExpression;
	private final RelationalOperatorElements pRelationalOperator;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final AdditiveOperatorElements pAdditiveOperator;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final MultiplicativeOperatorElements pMultiplicativeOperator;
	private final ExponentiationExpressionElements pExponentiationExpression;
	private final ExponentiationOperatorElements pExponentiationOperator;
	private final UnitsExpressionElements pUnitsExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final UnaryOperatorElements pUnaryOperator;
	private final SequenceAccessExpressionElements pSequenceAccessExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final BodyExpressionElements pBodyExpression;
	private final BodyParameterElements pBodyParameter;
	private final ExpressionTypingElements pExpressionTyping;
	private final BaseExpressionElements pBaseExpression;
	private final FeatureReferenceExpressionElements pFeatureReferenceExpression;
	private final FeatureReferenceElements pFeatureReference;
	private final InvocationExpressionElements pInvocationExpression;
	private final TupleElements pTuple;
	private final PositionalTupleElements pPositionalTuple;
	private final NamedTupleElements pNamedTuple;
	private final ExtentExpressionElements pExtentExpression;
	private final TypeReferenceElements pTypeReference;
	private final SequenceConstructionExpressionElements pSequenceConstructionExpression;
	private final SequenceElementListElements pSequenceElementList;
	private final NullExpressionElements pNullExpression;
	private final LiteralExpressionElements pLiteralExpression;
	private final BooleanLiteralExpressionElements pBooleanLiteralExpression;
	private final BooleanValueElements pBooleanValue;
	private final StringLiteralExpressionElements pStringLiteralExpression;
	private final RealLiteralExpressionElements pRealLiteralExpression;
	private final RealValueElements pRealValue;
	private final NaturalLiteralExpressionElements pNaturalLiteralExpression;
	private final UnlimitedNaturalLiteralExpressionElements pUnlimitedNaturalLiteralExpression;
	private final ExpressionMemberElements pExpressionMember;
	private final FeatureReferenceMemberElements pFeatureReferenceMember;
	private final TypeReferenceMemberElements pTypeReferenceMember;
	private final NamedExpressionMemberElements pNamedExpressionMember;
	private final BodyMemberElements pBodyMember;
	private final BodyParameterMemberElements pBodyParameterMember;
	private final NameElements pName;
	private final QualifiedNameElements pQualifiedName;
	private final ColonQualifiedNameElements pColonQualifiedName;
	private final DotQualifiedNameElements pDotQualifiedName;
	private final TerminalRule tDECIMAL_VALUE;
	private final TerminalRule tEXP_VALUE;
	private final TerminalRule tID;
	private final TerminalRule tUNRESTRICTED_NAME;
	private final TerminalRule tSTRING_VALUE;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tDOCUMENTATION_COMMENT;
	private final TerminalRule tML_NOTE;
	private final TerminalRule tSL_NOTE;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public KerMLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pUnit = new UnitElements();
		this.pAnonymousPackage = new AnonymousPackageElements();
		this.pPackageUnit = new PackageUnitElements();
		this.pClassifierUnitDefinition = new ClassifierUnitDefinitionElements();
		this.pClassUnit = new ClassUnitElements();
		this.pDataTypeUnit = new DataTypeUnitElements();
		this.pAssociationUnit = new AssociationUnitElements();
		this.pInteractionUnit = new InteractionUnitElements();
		this.pBehaviorUnit = new BehaviorUnitElements();
		this.pFunctionUnit = new FunctionUnitElements();
		this.pPredicateUnit = new PredicateUnitElements();
		this.pFeatureUnit = new FeatureUnitElements();
		this.pUnitPrefix = new UnitPrefixElements();
		this.pIdentification = new IdentificationElements();
		this.ePackageElementVisibilityIndicator = new PackageElementVisibilityIndicatorElements();
		this.eVisibilityIndicator = new VisibilityIndicatorElements();
		this.pAnnotation = new AnnotationElements();
		this.pEmptyAnnotation = new EmptyAnnotationElements();
		this.pPrefixAnnotation = new PrefixAnnotationElements();
		this.pUnitAnnotation = new UnitAnnotationElements();
		this.pComment = new CommentElements();
		this.pDocumentation = new DocumentationElements();
		this.pUnitDocumentation = new UnitDocumentationElements();
		this.pOwnedDocumentation = new OwnedDocumentationElements();
		this.pDocumentationComment = new DocumentationCommentElements();
		this.pTextualRepresentation = new TextualRepresentationElements();
		this.pPackageImport = new PackageImportElements();
		this.pElementAlias = new ElementAliasElements();
		this.pPackage = new PackageElements();
		this.pPackageDefinition = new PackageDefinitionElements();
		this.pPackageBody = new PackageBodyElements();
		this.pPackagedNonFeatureElement = new PackagedNonFeatureElementElements();
		this.pPackagedFeatureElement = new PackagedFeatureElementElements();
		this.pPackageMember = new PackageMemberElements();
		this.pPackageMemberPrefix = new PackageMemberPrefixElements();
		this.pNonFeatureMemberElement = new NonFeatureMemberElementElements();
		this.pPackageFeatureMemberElement = new PackageFeatureMemberElementElements();
		this.pTypeBody = new TypeBodyElements();
		this.pNonFeatureTypeMember = new NonFeatureTypeMemberElements();
		this.pFeatureTypeMember = new FeatureTypeMemberElements();
		this.pFeatureMember = new FeatureMemberElements();
		this.pEndFeatureMember = new EndFeatureMemberElements();
		this.pFeatureMemberFlags = new FeatureMemberFlagsElements();
		this.eFeatureDirection = new FeatureDirectionElements();
		this.pTypeMemberPrefix = new TypeMemberPrefixElements();
		this.pClassifier = new ClassifierElements();
		this.pClassifierDeclaration = new ClassifierDeclarationElements();
		this.pClassifierDeclarationCompletion = new ClassifierDeclarationCompletionElements();
		this.pSpecializationOrConjugation = new SpecializationOrConjugationElements();
		this.pSuperclassing = new SuperclassingElements();
		this.pConjugation = new ConjugationElements();
		this.pClass = new ClassElements();
		this.pClassDeclaration = new ClassDeclarationElements();
		this.pDataType = new DataTypeElements();
		this.pDataTypeDeclaration = new DataTypeDeclarationElements();
		this.pAssociation = new AssociationElements();
		this.pAssociationDeclaration = new AssociationDeclarationElements();
		this.pBehavior = new BehaviorElements();
		this.pBehaviorDeclaration = new BehaviorDeclarationElements();
		this.pBehaviorDeclarationCompletion = new BehaviorDeclarationCompletionElements();
		this.pParameterList = new ParameterListElements();
		this.pBehaviorBody = new BehaviorBodyElements();
		this.pParameterMember = new ParameterMemberElements();
		this.pFunction = new FunctionElements();
		this.pFunctionDeclaration = new FunctionDeclarationElements();
		this.pParameterPart = new ParameterPartElements();
		this.pReturnParameterPart = new ReturnParameterPartElements();
		this.pEmptyReturnParameterPart = new EmptyReturnParameterPartElements();
		this.pEmptyParameter = new EmptyParameterElements();
		this.pFunctionBody = new FunctionBodyElements();
		this.pReturnParameterMember = new ReturnParameterMemberElements();
		this.pEmptyReturnParameterMember = new EmptyReturnParameterMemberElements();
		this.pResultExpressionMember = new ResultExpressionMemberElements();
		this.pPredicate = new PredicateElements();
		this.pPredicateDeclaration = new PredicateDeclarationElements();
		this.pInteraction = new InteractionElements();
		this.pInteractionDeclaration = new InteractionDeclarationElements();
		this.pFeature = new FeatureElements();
		this.pFeatureDefinition = new FeatureDefinitionElements();
		this.pFeatureDeclaration = new FeatureDeclarationElements();
		this.pFeatureSpecializationPart = new FeatureSpecializationPartElements();
		this.pMultiplicityPart = new MultiplicityPartElements();
		this.pMultiplicity = new MultiplicityElements();
		this.pFeatureSpecialization = new FeatureSpecializationElements();
		this.pTypings = new TypingsElements();
		this.pTypedBy = new TypedByElements();
		this.pFeatureTyping = new FeatureTypingElements();
		this.pFeatureConjugationPart = new FeatureConjugationPartElements();
		this.pFeatureConjugation = new FeatureConjugationElements();
		this.pFeatureCompletion = new FeatureCompletionElements();
		this.pValuePart = new ValuePartElements();
		this.pFeatureValue = new FeatureValueElements();
		this.pSubsettings = new SubsettingsElements();
		this.pSubsets = new SubsetsElements();
		this.pSubset = new SubsetElements();
		this.pRedefinitions = new RedefinitionsElements();
		this.pRedefines = new RedefinesElements();
		this.pRedefinition = new RedefinitionElements();
		this.pMultiplicityMember = new MultiplicityMemberElements();
		this.pNaturalLiteralMember = new NaturalLiteralMemberElements();
		this.pUnlimitedNaturalLiteralMember = new UnlimitedNaturalLiteralMemberElements();
		this.pConnector = new ConnectorElements();
		this.pConnectorDeclaration = new ConnectorDeclarationElements();
		this.pConnectorEnd = new ConnectorEndElements();
		this.pConnectorEndMember = new ConnectorEndMemberElements();
		this.pBindingConnector = new BindingConnectorElements();
		this.pBindingConnectorDeclaration = new BindingConnectorDeclarationElements();
		this.pSuccession = new SuccessionElements();
		this.pSuccessionDeclaration = new SuccessionDeclarationElements();
		this.pItemFlow = new ItemFlowElements();
		this.pSuccessionItemFlow = new SuccessionItemFlowElements();
		this.pItemFlowDeclaration = new ItemFlowDeclarationElements();
		this.pItemFeatureTyping = new ItemFeatureTypingElements();
		this.pEmptyItemFeature = new EmptyItemFeatureElements();
		this.pItemFlowEnd = new ItemFlowEndElements();
		this.pItemFlowFeature = new ItemFlowFeatureElements();
		this.pItemFeatureMember = new ItemFeatureMemberElements();
		this.pItemFlowEndMember = new ItemFlowEndMemberElements();
		this.pItemFlowFeatureMember = new ItemFlowFeatureMemberElements();
		this.pEmptyItemFeatureMember = new EmptyItemFeatureMemberElements();
		this.pParameter = new ParameterElements();
		this.pParameterDeclaration = new ParameterDeclarationElements();
		this.pParameterSpecializationPart = new ParameterSpecializationPartElements();
		this.pParameterSpecialization = new ParameterSpecializationElements();
		this.pStep = new StepElements();
		this.pStepDeclaration = new StepDeclarationElements();
		this.pStepParameterList = new StepParameterListElements();
		this.pStepParameter = new StepParameterElements();
		this.pStepParameterMember = new StepParameterMemberElements();
		this.pInvariant = new InvariantElements();
		this.pInvariantPart = new InvariantPartElements();
		this.pTrueLiteralExpression = new TrueLiteralExpressionElements();
		this.pTrueLiteralMember = new TrueLiteralMemberElements();
		this.pBlockExpression = new BlockExpressionElements();
		this.pExpressionDeclaration = new ExpressionDeclarationElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pBooleanExpressionDeclaration = new BooleanExpressionDeclarationElements();
		this.pExpression = new ExpressionElements();
		this.pConditionalExpression = new ConditionalExpressionElements();
		this.pConditionalTestOperator = new ConditionalTestOperatorElements();
		this.pNullCoalescingExpression = new NullCoalescingExpressionElements();
		this.pNullCoalescingOperator = new NullCoalescingOperatorElements();
		this.pConditionalOrExpression = new ConditionalOrExpressionElements();
		this.pConditionalOrOperator = new ConditionalOrOperatorElements();
		this.pConditionalAndExpression = new ConditionalAndExpressionElements();
		this.pConditionalAndOperator = new ConditionalAndOperatorElements();
		this.pOrExpression = new OrExpressionElements();
		this.pOrOperator = new OrOperatorElements();
		this.pXorExpression = new XorExpressionElements();
		this.pXorOperator = new XorOperatorElements();
		this.pAndExpression = new AndExpressionElements();
		this.pAndOperator = new AndOperatorElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pEqualityOperator = new EqualityOperatorElements();
		this.pClassificationExpression = new ClassificationExpressionElements();
		this.pClassificationOperator = new ClassificationOperatorElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pRelationalOperator = new RelationalOperatorElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pAdditiveOperator = new AdditiveOperatorElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pMultiplicativeOperator = new MultiplicativeOperatorElements();
		this.pExponentiationExpression = new ExponentiationExpressionElements();
		this.pExponentiationOperator = new ExponentiationOperatorElements();
		this.pUnitsExpression = new UnitsExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pUnaryOperator = new UnaryOperatorElements();
		this.pSequenceAccessExpression = new SequenceAccessExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pBodyExpression = new BodyExpressionElements();
		this.pBodyParameter = new BodyParameterElements();
		this.pExpressionTyping = new ExpressionTypingElements();
		this.pBaseExpression = new BaseExpressionElements();
		this.pFeatureReferenceExpression = new FeatureReferenceExpressionElements();
		this.pFeatureReference = new FeatureReferenceElements();
		this.pInvocationExpression = new InvocationExpressionElements();
		this.pTuple = new TupleElements();
		this.pPositionalTuple = new PositionalTupleElements();
		this.pNamedTuple = new NamedTupleElements();
		this.pExtentExpression = new ExtentExpressionElements();
		this.pTypeReference = new TypeReferenceElements();
		this.pSequenceConstructionExpression = new SequenceConstructionExpressionElements();
		this.pSequenceElementList = new SequenceElementListElements();
		this.pNullExpression = new NullExpressionElements();
		this.pLiteralExpression = new LiteralExpressionElements();
		this.pBooleanLiteralExpression = new BooleanLiteralExpressionElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pStringLiteralExpression = new StringLiteralExpressionElements();
		this.pRealLiteralExpression = new RealLiteralExpressionElements();
		this.pRealValue = new RealValueElements();
		this.pNaturalLiteralExpression = new NaturalLiteralExpressionElements();
		this.pUnlimitedNaturalLiteralExpression = new UnlimitedNaturalLiteralExpressionElements();
		this.pExpressionMember = new ExpressionMemberElements();
		this.pFeatureReferenceMember = new FeatureReferenceMemberElements();
		this.pTypeReferenceMember = new TypeReferenceMemberElements();
		this.pNamedExpressionMember = new NamedExpressionMemberElements();
		this.pBodyMember = new BodyMemberElements();
		this.pBodyParameterMember = new BodyParameterMemberElements();
		this.pName = new NameElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pColonQualifiedName = new ColonQualifiedNameElements();
		this.pDotQualifiedName = new DotQualifiedNameElements();
		this.tDECIMAL_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.DECIMAL_VALUE");
		this.tEXP_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.EXP_VALUE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ID");
		this.tUNRESTRICTED_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.UNRESTRICTED_NAME");
		this.tSTRING_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.STRING_VALUE");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ML_COMMENT");
		this.tDOCUMENTATION_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.DOCUMENTATION_COMMENT");
		this.tML_NOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ML_NOTE");
		this.tSL_NOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.SL_NOTE");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.omg.kerml.xtext.KerML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	///* UNITS */ Unit SysML::Package:
	//	AnonymousPackage
	//	| PackageUnit
	//	| ClassifierUnitDefinition
	//	| ClassUnit
	//	| DataTypeUnit
	//	| AssociationUnit
	//	| InteractionUnit
	//	| BehaviorUnit
	//	| FunctionUnit
	//	| PredicateUnit
	//	| FeatureUnit;
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//AnonymousPackage SysML::Package:
	//	PackageBody;
	public AnonymousPackageElements getAnonymousPackageAccess() {
		return pAnonymousPackage;
	}
	
	public ParserRule getAnonymousPackageRule() {
		return getAnonymousPackageAccess().getRule();
	}
	
	//PackageUnit SysML::Package:
	//	UnitPrefix PackageDefinition;
	public PackageUnitElements getPackageUnitAccess() {
		return pPackageUnit;
	}
	
	public ParserRule getPackageUnitRule() {
		return getPackageUnitAccess().getRule();
	}
	
	//ClassifierUnitDefinition SysML::Classifier:
	//	UnitPrefix ClassifierDeclaration TypeBody;
	public ClassifierUnitDefinitionElements getClassifierUnitDefinitionAccess() {
		return pClassifierUnitDefinition;
	}
	
	public ParserRule getClassifierUnitDefinitionRule() {
		return getClassifierUnitDefinitionAccess().getRule();
	}
	
	//ClassUnit SysML::Class:
	//	UnitPrefix ClassDeclaration TypeBody;
	public ClassUnitElements getClassUnitAccess() {
		return pClassUnit;
	}
	
	public ParserRule getClassUnitRule() {
		return getClassUnitAccess().getRule();
	}
	
	//DataTypeUnit SysML::DataType:
	//	UnitPrefix DataTypeDeclaration TypeBody;
	public DataTypeUnitElements getDataTypeUnitAccess() {
		return pDataTypeUnit;
	}
	
	public ParserRule getDataTypeUnitRule() {
		return getDataTypeUnitAccess().getRule();
	}
	
	//AssociationUnit SysML::Association:
	//	UnitPrefix AssociationDeclaration TypeBody;
	public AssociationUnitElements getAssociationUnitAccess() {
		return pAssociationUnit;
	}
	
	public ParserRule getAssociationUnitRule() {
		return getAssociationUnitAccess().getRule();
	}
	
	//InteractionUnit SysML::Interaction:
	//	UnitPrefix InteractionDeclaration TypeBody;
	public InteractionUnitElements getInteractionUnitAccess() {
		return pInteractionUnit;
	}
	
	public ParserRule getInteractionUnitRule() {
		return getInteractionUnitAccess().getRule();
	}
	
	//BehaviorUnit SysML::Behavior:
	//	UnitPrefix BehaviorDeclaration BehaviorBody;
	public BehaviorUnitElements getBehaviorUnitAccess() {
		return pBehaviorUnit;
	}
	
	public ParserRule getBehaviorUnitRule() {
		return getBehaviorUnitAccess().getRule();
	}
	
	//FunctionUnit SysML::Function:
	//	UnitPrefix FunctionDeclaration FunctionBody;
	public FunctionUnitElements getFunctionUnitAccess() {
		return pFunctionUnit;
	}
	
	public ParserRule getFunctionUnitRule() {
		return getFunctionUnitAccess().getRule();
	}
	
	//PredicateUnit SysML::Predicate:
	//	UnitPrefix PredicateDeclaration FunctionBody;
	public PredicateUnitElements getPredicateUnitAccess() {
		return pPredicateUnit;
	}
	
	public ParserRule getPredicateUnitRule() {
		return getPredicateUnitAccess().getRule();
	}
	
	//FeatureUnit SysML::Feature:
	//	UnitPrefix FeatureDefinition;
	public FeatureUnitElements getFeatureUnitAccess() {
		return pFeatureUnit;
	}
	
	public ParserRule getFeatureUnitRule() {
		return getFeatureUnitAccess().getRule();
	}
	
	//fragment UnitPrefix returns SysML::Package:
	//	(ownedImport_comp+=PackageImport | ownedMembership_comp+=ElementAlias)*
	//	ownedRelationship_comp+=UnitAnnotation*;
	public UnitPrefixElements getUnitPrefixAccess() {
		return pUnitPrefix;
	}
	
	public ParserRule getUnitPrefixRule() {
		return getUnitPrefixAccess().getRule();
	}
	
	///* IDENTIFICATION */ fragment Identification returns SysML::Element:
	//	'id' humanId=Name name=Name?
	//	| name=Name;
	public IdentificationElements getIdentificationAccess() {
		return pIdentification;
	}
	
	public ParserRule getIdentificationRule() {
		return getIdentificationAccess().getRule();
	}
	
	//enum PackageElementVisibilityIndicator returns SysML::VisibilityKind:
	//	public | private;
	public PackageElementVisibilityIndicatorElements getPackageElementVisibilityIndicatorAccess() {
		return ePackageElementVisibilityIndicator;
	}
	
	public EnumRule getPackageElementVisibilityIndicatorRule() {
		return getPackageElementVisibilityIndicatorAccess().getRule();
	}
	
	//enum VisibilityIndicator returns SysML::VisibilityKind:
	//	public | private | protected | package='packaged';
	public VisibilityIndicatorElements getVisibilityIndicatorAccess() {
		return eVisibilityIndicator;
	}
	
	public EnumRule getVisibilityIndicatorRule() {
		return getVisibilityIndicatorAccess().getRule();
	}
	
	///* ANNOTATIONS */ Annotation SysML::Annotation:
	//	{SysML::Annotation} ('about' annotatedElement=[SysML::Element|QualifiedName])?;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//EmptyAnnotation SysML::Annotation:
	//	{SysML::Annotation};
	public EmptyAnnotationElements getEmptyAnnotationAccess() {
		return pEmptyAnnotation;
	}
	
	public ParserRule getEmptyAnnotationRule() {
		return getEmptyAnnotationAccess().getRule();
	}
	
	//PrefixAnnotation SysML::Annotation:
	//	ownedRelatedElement_comp+=Documentation;
	public PrefixAnnotationElements getPrefixAnnotationAccess() {
		return pPrefixAnnotation;
	}
	
	public ParserRule getPrefixAnnotationRule() {
		return getPrefixAnnotationAccess().getRule();
	}
	
	//UnitAnnotation SysML::Annotation:
	//	ownedRelatedElement_comp+=UnitDocumentation;
	public UnitAnnotationElements getUnitAnnotationAccess() {
		return pUnitAnnotation;
	}
	
	public ParserRule getUnitAnnotationRule() {
		return getUnitAnnotationAccess().getRule();
	}
	
	///* COMMENTS */ Comment SysML::Comment:
	//	('comment' Identification? ownedRelationship_comp+=Annotation
	//	| ownedRelationship_comp+=EmptyAnnotation) body=ML_COMMENT;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	///* DOCUMENTATION */ Documentation SysML::Comment:
	//	('doc' ('id' humanId=Name)?)? body=DOCUMENTATION_COMMENT;
	public DocumentationElements getDocumentationAccess() {
		return pDocumentation;
	}
	
	public ParserRule getDocumentationRule() {
		return getDocumentationAccess().getRule();
	}
	
	//UnitDocumentation SysML::Comment:
	//	('comment' Identification?)? body=ML_COMMENT
	//	| ('doc' ('id' humanId=Name)?)? body=DOCUMENTATION_COMMENT;
	public UnitDocumentationElements getUnitDocumentationAccess() {
		return pUnitDocumentation;
	}
	
	public ParserRule getUnitDocumentationRule() {
		return getUnitDocumentationAccess().getRule();
	}
	
	//OwnedDocumentation SysML::Documentation:
	//	documentingComment_comp=DocumentationComment;
	public OwnedDocumentationElements getOwnedDocumentationAccess() {
		return pOwnedDocumentation;
	}
	
	public ParserRule getOwnedDocumentationRule() {
		return getOwnedDocumentationAccess().getRule();
	}
	
	//DocumentationComment SysML::Comment:
	//	'doc' ('id' humanId=Name)? body=ML_COMMENT;
	public DocumentationCommentElements getDocumentationCommentAccess() {
		return pDocumentationComment;
	}
	
	public ParserRule getDocumentationCommentRule() {
		return getDocumentationCommentAccess().getRule();
	}
	
	///* TEXTUAL REPRESENTATION */ TextualRepresentation SysML::TextualRepresentation:
	//	('rep' Identification? ownedRelationship_comp+=Annotation
	//	| ownedRelationship_comp+=EmptyAnnotation)
	//	'language' language=STRING_VALUE
	//	body=ML_COMMENT;
	public TextualRepresentationElements getTextualRepresentationAccess() {
		return pTextualRepresentation;
	}
	
	public ParserRule getTextualRepresentationRule() {
		return getTextualRepresentationAccess().getRule();
	}
	
	///* IMPORTS */ PackageImport SysML::Import:
	//	ownedRelationship_comp+=PrefixAnnotation*
	//	visibility=PackageElementVisibilityIndicator?
	//	'import' (importedPackage=[SysML::Package|Name] ('::' | '.') '*'
	//	| importedPackage=[SysML::Package|ColonQualifiedName] '::' '*'
	//	| importedPackage=[SysML::Package|DotQualifiedName] '.' '*') ';';
	public PackageImportElements getPackageImportAccess() {
		return pPackageImport;
	}
	
	public ParserRule getPackageImportRule() {
		return getPackageImportAccess().getRule();
	}
	
	//ElementAlias SysML::Membership:
	//	PackageMemberPrefix ('alias' | 'import') memberElement=[SysML::Element|QualifiedName] ('as' memberName=Name)? ';';
	public ElementAliasElements getElementAliasAccess() {
		return pElementAlias;
	}
	
	public ParserRule getElementAliasRule() {
		return getElementAliasAccess().getRule();
	}
	
	///* PACKAGES */ Package SysML::Package:
	//	PackageDefinition;
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//fragment PackageDefinition returns SysML::Package:
	//	'package' Identification? PackageBody;
	public PackageDefinitionElements getPackageDefinitionAccess() {
		return pPackageDefinition;
	}
	
	public ParserRule getPackageDefinitionRule() {
		return getPackageDefinitionAccess().getRule();
	}
	
	//fragment PackageBody returns SysML::Package:
	//	';'
	//	| '{' (documentation_comp+=OwnedDocumentation
	//	| ownedMembership_comp+=PackageMember
	//	| ownedImport_comp+=PackageImport)* '}';
	public PackageBodyElements getPackageBodyAccess() {
		return pPackageBody;
	}
	
	public ParserRule getPackageBodyRule() {
		return getPackageBodyAccess().getRule();
	}
	
	//PackagedNonFeatureElement SysML::Element:
	//	Package
	//	| Classifier
	//	| Class
	//	| DataType
	//	| Association
	//	| Interaction
	//	| Behavior
	//	| Function
	//	| Predicate
	//	| Comment
	//	| TextualRepresentation;
	public PackagedNonFeatureElementElements getPackagedNonFeatureElementAccess() {
		return pPackagedNonFeatureElement;
	}
	
	public ParserRule getPackagedNonFeatureElementRule() {
		return getPackagedNonFeatureElementAccess().getRule();
	}
	
	//PackagedFeatureElement SysML::Feature:
	//	Feature
	//	| Step
	//	| BlockExpression
	//	| BooleanExpression
	//	| Invariant
	//	| Connector
	//	| BindingConnector
	//	| Succession
	//	| ItemFlow
	//	| SuccessionItemFlow;
	public PackagedFeatureElementElements getPackagedFeatureElementAccess() {
		return pPackagedFeatureElement;
	}
	
	public ParserRule getPackagedFeatureElementRule() {
		return getPackagedFeatureElementAccess().getRule();
	}
	
	///* PACKAGE MEMBERSHIPS */ PackageMember SysML::Membership:
	//	PackageMemberPrefix (NonFeatureMemberElement | PackageFeatureMemberElement);
	public PackageMemberElements getPackageMemberAccess() {
		return pPackageMember;
	}
	
	public ParserRule getPackageMemberRule() {
		return getPackageMemberAccess().getRule();
	}
	
	//fragment PackageMemberPrefix returns SysML::Membership:
	//	ownedRelationship_comp+=PrefixAnnotation*
	//	visibility=PackageElementVisibilityIndicator?;
	public PackageMemberPrefixElements getPackageMemberPrefixAccess() {
		return pPackageMemberPrefix;
	}
	
	public ParserRule getPackageMemberPrefixRule() {
		return getPackageMemberPrefixAccess().getRule();
	}
	
	//fragment NonFeatureMemberElement returns SysML::Membership:
	//	ownedMemberElement_comp=PackagedNonFeatureElement
	//	| ('alias' | 'import') memberElement=[SysML::Element|QualifiedName] ('as' memberName=Name)? ';';
	public NonFeatureMemberElementElements getNonFeatureMemberElementAccess() {
		return pNonFeatureMemberElement;
	}
	
	public ParserRule getNonFeatureMemberElementRule() {
		return getNonFeatureMemberElementAccess().getRule();
	}
	
	//fragment PackageFeatureMemberElement returns SysML::Membership:
	//	ownedMemberElement_comp=PackagedFeatureElement;
	public PackageFeatureMemberElementElements getPackageFeatureMemberElementAccess() {
		return pPackageFeatureMemberElement;
	}
	
	public ParserRule getPackageFeatureMemberElementRule() {
		return getPackageFeatureMemberElementAccess().getRule();
	}
	
	///* TYPES */ fragment TypeBody returns SysML::Type:
	//	';' |
	//	'{' (documentation_comp+=OwnedDocumentation
	//	| ownedMembership_comp+=NonFeatureTypeMember
	//	| ownedFeatureMembership_comp+=FeatureTypeMember
	//	| ownedImport_comp+=PackageImport)* '}';
	public TypeBodyElements getTypeBodyAccess() {
		return pTypeBody;
	}
	
	public ParserRule getTypeBodyRule() {
		return getTypeBodyAccess().getRule();
	}
	
	///* TYPE MEMBERSHIPS */ NonFeatureTypeMember SysML::Membership:
	//	TypeMemberPrefix NonFeatureMemberElement;
	public NonFeatureTypeMemberElements getNonFeatureTypeMemberAccess() {
		return pNonFeatureTypeMember;
	}
	
	public ParserRule getNonFeatureTypeMemberRule() {
		return getNonFeatureTypeMemberAccess().getRule();
	}
	
	//FeatureTypeMember SysML::FeatureMembership:
	//	FeatureMember | EndFeatureMember;
	public FeatureTypeMemberElements getFeatureTypeMemberAccess() {
		return pFeatureTypeMember;
	}
	
	public ParserRule getFeatureTypeMemberRule() {
		return getFeatureTypeMemberAccess().getRule();
	}
	
	//FeatureMember SysML::FeatureMembership:
	//	TypeMemberPrefix FeatureMemberFlags (ownedMemberFeature_comp=PackagedFeatureElement
	//	| 'feature'? memberName=Name? 'is' memberFeature=[SysML::Feature|QualifiedName] ';');
	public FeatureMemberElements getFeatureMemberAccess() {
		return pFeatureMember;
	}
	
	public ParserRule getFeatureMemberRule() {
		return getFeatureMemberAccess().getRule();
	}
	
	//EndFeatureMember SysML::EndFeatureMembership:
	//	TypeMemberPrefix 'end' FeatureMemberFlags ownedMemberFeature_comp=PackagedFeatureElement;
	public EndFeatureMemberElements getEndFeatureMemberAccess() {
		return pEndFeatureMember;
	}
	
	public ParserRule getEndFeatureMemberRule() {
		return getEndFeatureMemberAccess().getRule();
	}
	
	//fragment FeatureMemberFlags returns SysML::FeatureMembership:
	//	direction=FeatureDirection? (isComposite?='composite' | isPortion?='portion')? isPort?='port'?;
	public FeatureMemberFlagsElements getFeatureMemberFlagsAccess() {
		return pFeatureMemberFlags;
	}
	
	public ParserRule getFeatureMemberFlagsRule() {
		return getFeatureMemberFlagsAccess().getRule();
	}
	
	//enum FeatureDirection returns SysML::FeatureDirectionKind:
	//	in | out | inout;
	public FeatureDirectionElements getFeatureDirectionAccess() {
		return eFeatureDirection;
	}
	
	public EnumRule getFeatureDirectionRule() {
		return getFeatureDirectionAccess().getRule();
	}
	
	//fragment TypeMemberPrefix returns SysML::Membership:
	//	ownedRelationship_comp+=PrefixAnnotation*
	//	visibility=VisibilityIndicator?;
	public TypeMemberPrefixElements getTypeMemberPrefixAccess() {
		return pTypeMemberPrefix;
	}
	
	public ParserRule getTypeMemberPrefixRule() {
		return getTypeMemberPrefixAccess().getRule();
	}
	
	///* CLASSIFIERS */ Classifier SysML::Classifier:
	//	ClassifierDeclaration TypeBody;
	public ClassifierElements getClassifierAccess() {
		return pClassifier;
	}
	
	public ParserRule getClassifierRule() {
		return getClassifierAccess().getRule();
	}
	
	//fragment ClassifierDeclaration returns SysML::Classifier:
	//	isAbstract?='abstract'? 'classifier' ClassifierDeclarationCompletion;
	public ClassifierDeclarationElements getClassifierDeclarationAccess() {
		return pClassifierDeclaration;
	}
	
	public ParserRule getClassifierDeclarationRule() {
		return getClassifierDeclarationAccess().getRule();
	}
	
	//fragment ClassifierDeclarationCompletion returns SysML::Classifier:
	//	isSufficient?='all'? Identification?
	//	//  ( '<' ownedMember += ClassifierTemplateParameter ( ',' ownedMember += ClassifierTemplateParameter )* '>' )? 
	//	SpecializationOrConjugation?
	//	ownedFeatureMembership_comp+=MultiplicityMember?;
	public ClassifierDeclarationCompletionElements getClassifierDeclarationCompletionAccess() {
		return pClassifierDeclarationCompletion;
	}
	
	public ParserRule getClassifierDeclarationCompletionRule() {
		return getClassifierDeclarationCompletionAccess().getRule();
	}
	
	//fragment SpecializationOrConjugation returns SysML::Classifier:
	//	(':>' | 'specializes') ownedRelationship_comp+=Superclassing (',' ownedRelationship_comp+=Superclassing)*
	//	| ('~' | 'conjugates') ownedRelationship_comp+=Conjugation;
	public SpecializationOrConjugationElements getSpecializationOrConjugationAccess() {
		return pSpecializationOrConjugation;
	}
	
	public ParserRule getSpecializationOrConjugationRule() {
		return getSpecializationOrConjugationAccess().getRule();
	}
	
	//Superclassing SysML::Superclassing:
	//	superclass=[SysML::Classifier|QualifiedName];
	public SuperclassingElements getSuperclassingAccess() {
		return pSuperclassing;
	}
	
	public ParserRule getSuperclassingRule() {
		return getSuperclassingAccess().getRule();
	}
	
	//Conjugation SysML::Conjugation:
	//	originalType=[SysML::Classifier|QualifiedName];
	public ConjugationElements getConjugationAccess() {
		return pConjugation;
	}
	
	public ParserRule getConjugationRule() {
		return getConjugationAccess().getRule();
	}
	
	///* CLASSES */ Class SysML::Class:
	//	ClassDeclaration TypeBody;
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//fragment ClassDeclaration returns SysML::Class:
	//	isAbstract?='abstract'? 'class' ClassifierDeclarationCompletion;
	public ClassDeclarationElements getClassDeclarationAccess() {
		return pClassDeclaration;
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}
	
	///* DATA TYPES */ DataType SysML::DataType:
	//	DataTypeDeclaration TypeBody;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//fragment DataTypeDeclaration returns SysML::DataType:
	//	isAbstract?='abstract'? 'datatype' ClassifierDeclarationCompletion;
	public DataTypeDeclarationElements getDataTypeDeclarationAccess() {
		return pDataTypeDeclaration;
	}
	
	public ParserRule getDataTypeDeclarationRule() {
		return getDataTypeDeclarationAccess().getRule();
	}
	
	///* ASSOCIATIONS */ Association SysML::Association:
	//	AssociationDeclaration TypeBody;
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}
	
	//fragment AssociationDeclaration returns SysML::Association:
	//	isAbstract?='abstract'? 'assoc' ClassifierDeclarationCompletion;
	public AssociationDeclarationElements getAssociationDeclarationAccess() {
		return pAssociationDeclaration;
	}
	
	public ParserRule getAssociationDeclarationRule() {
		return getAssociationDeclarationAccess().getRule();
	}
	
	///* BEHAVIORS */ Behavior SysML::Behavior:
	//	BehaviorDeclaration BehaviorBody;
	public BehaviorElements getBehaviorAccess() {
		return pBehavior;
	}
	
	public ParserRule getBehaviorRule() {
		return getBehaviorAccess().getRule();
	}
	
	//fragment BehaviorDeclaration returns SysML::Behavior:
	//	isAbstract?='abstract'? 'behavior' BehaviorDeclarationCompletion;
	public BehaviorDeclarationElements getBehaviorDeclarationAccess() {
		return pBehaviorDeclaration;
	}
	
	public ParserRule getBehaviorDeclarationRule() {
		return getBehaviorDeclarationAccess().getRule();
	}
	
	//fragment BehaviorDeclarationCompletion returns SysML::Behavior:
	//	isSufficient?='all'? Identification? SpecializationOrConjugation? ParameterList?;
	public BehaviorDeclarationCompletionElements getBehaviorDeclarationCompletionAccess() {
		return pBehaviorDeclarationCompletion;
	}
	
	public ParserRule getBehaviorDeclarationCompletionRule() {
		return getBehaviorDeclarationCompletionAccess().getRule();
	}
	
	//fragment ParameterList returns SysML::Type:
	//	'(' (ownedFeatureMembership_comp+=ParameterMember (',' ownedFeatureMembership_comp+=ParameterMember)*)? ')';
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//fragment BehaviorBody returns SysML::Type:
	//	';' |
	//	'{' (documentation_comp+=OwnedDocumentation
	//	| ownedMembership_comp+=NonFeatureTypeMember
	//	| ownedFeatureMembership_comp+=FeatureTypeMember
	//	| ownedRelationship_comp+=PackageImport)* '}';
	public BehaviorBodyElements getBehaviorBodyAccess() {
		return pBehaviorBody;
	}
	
	public ParserRule getBehaviorBodyRule() {
		return getBehaviorBodyAccess().getRule();
	}
	
	///* BEHAVIOR MEMBERSHIPS */ ParameterMember SysML::ParameterMembership:
	//	direction=FeatureDirection? ownedMemberParameter_comp=Parameter;
	public ParameterMemberElements getParameterMemberAccess() {
		return pParameterMember;
	}
	
	public ParserRule getParameterMemberRule() {
		return getParameterMemberAccess().getRule();
	}
	
	///* FUNCTIONS */ Function SysML::Function:
	//	FunctionDeclaration FunctionBody;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//fragment FunctionDeclaration returns SysML::Function:
	//	isAbstract?='abstract'? 'function' isSufficient?='all'?
	//	Identification? SpecializationOrConjugation? ParameterPart;
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return pFunctionDeclaration;
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}
	
	//fragment ParameterPart returns SysML::Type:
	//	ParameterList (ReturnParameterPart | EmptyReturnParameterPart) | EmptyReturnParameterPart;
	public ParameterPartElements getParameterPartAccess() {
		return pParameterPart;
	}
	
	public ParserRule getParameterPartRule() {
		return getParameterPartAccess().getRule();
	}
	
	//fragment ReturnParameterPart returns SysML::Type:
	//	ownedFeatureMembership_comp+=ReturnParameterMember;
	public ReturnParameterPartElements getReturnParameterPartAccess() {
		return pReturnParameterPart;
	}
	
	public ParserRule getReturnParameterPartRule() {
		return getReturnParameterPartAccess().getRule();
	}
	
	//fragment EmptyReturnParameterPart returns SysML::Type:
	//	ownedFeatureMembership_comp+=EmptyReturnParameterMember;
	public EmptyReturnParameterPartElements getEmptyReturnParameterPartAccess() {
		return pEmptyReturnParameterPart;
	}
	
	public ParserRule getEmptyReturnParameterPartRule() {
		return getEmptyReturnParameterPartAccess().getRule();
	}
	
	//EmptyParameter SysML::Feature:
	//	{SysML::Feature};
	public EmptyParameterElements getEmptyParameterAccess() {
		return pEmptyParameter;
	}
	
	public ParserRule getEmptyParameterRule() {
		return getEmptyParameterAccess().getRule();
	}
	
	//fragment FunctionBody returns SysML::Type:
	//	';'
	//	| '{' (documentation_comp+=OwnedDocumentation
	//	| ownedMembership_comp+=NonFeatureTypeMember
	//	| ownedFeatureMembership_comp+=FeatureTypeMember
	//	| ownedRelationship_comp+=PackageImport)*
	//	ownedFeatureMembership_comp+=ResultExpressionMember?
	//	'}';
	public FunctionBodyElements getFunctionBodyAccess() {
		return pFunctionBody;
	}
	
	public ParserRule getFunctionBodyRule() {
		return getFunctionBodyAccess().getRule();
	}
	
	///* FUNCTION MEMBERSHIPS */ ReturnParameterMember SysML::ReturnParameterMembership:
	//	ownedMemberParameter_comp=Parameter;
	public ReturnParameterMemberElements getReturnParameterMemberAccess() {
		return pReturnParameterMember;
	}
	
	public ParserRule getReturnParameterMemberRule() {
		return getReturnParameterMemberAccess().getRule();
	}
	
	//EmptyReturnParameterMember SysML::ReturnParameterMembership:
	//	ownedMemberFeature_comp=EmptyParameter;
	public EmptyReturnParameterMemberElements getEmptyReturnParameterMemberAccess() {
		return pEmptyReturnParameterMember;
	}
	
	public ParserRule getEmptyReturnParameterMemberRule() {
		return getEmptyReturnParameterMemberAccess().getRule();
	}
	
	//ResultExpressionMember SysML::ResultExpressionMembership:
	//	TypeMemberPrefix ownedResultExpression_comp=Expression;
	public ResultExpressionMemberElements getResultExpressionMemberAccess() {
		return pResultExpressionMember;
	}
	
	public ParserRule getResultExpressionMemberRule() {
		return getResultExpressionMemberAccess().getRule();
	}
	
	///* PREDICATES */ Predicate SysML::Predicate:
	//	PredicateDeclaration FunctionBody;
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	//fragment PredicateDeclaration returns SysML::Predicate:
	//	isAbstract?='abstract'? 'predicate' isSufficient?='all'?
	//	Identification? SpecializationOrConjugation? ParameterPart;
	public PredicateDeclarationElements getPredicateDeclarationAccess() {
		return pPredicateDeclaration;
	}
	
	public ParserRule getPredicateDeclarationRule() {
		return getPredicateDeclarationAccess().getRule();
	}
	
	///* INTERACTIONS */ Interaction SysML::Interaction:
	//	InteractionDeclaration TypeBody;
	public InteractionElements getInteractionAccess() {
		return pInteraction;
	}
	
	public ParserRule getInteractionRule() {
		return getInteractionAccess().getRule();
	}
	
	//fragment InteractionDeclaration returns SysML::Interaction:
	//	isAbstract?='abstract'? 'interaction' BehaviorDeclarationCompletion;
	public InteractionDeclarationElements getInteractionDeclarationAccess() {
		return pInteractionDeclaration;
	}
	
	public ParserRule getInteractionDeclarationRule() {
		return getInteractionDeclarationAccess().getRule();
	}
	
	///* FEATURES */ Feature SysML::Feature:
	//	FeatureDefinition;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//fragment FeatureDefinition returns SysML::Feature:
	//	isAbstract?='abstract'? ('feature'? FeatureDeclaration FeatureCompletion
	//	| 'feature' FeatureCompletion);
	public FeatureDefinitionElements getFeatureDefinitionAccess() {
		return pFeatureDefinition;
	}
	
	public ParserRule getFeatureDefinitionRule() {
		return getFeatureDefinitionAccess().getRule();
	}
	
	//fragment FeatureDeclaration returns SysML::Feature:
	//	isSufficient?='all'? (Identification (FeatureSpecializationPart | FeatureConjugationPart)?
	//	| (Subsettings | Redefinitions) FeatureSpecializationPart?
	//	| Typings MultiplicityPart? FeatureSpecialization*
	//	| FeatureConjugationPart);
	public FeatureDeclarationElements getFeatureDeclarationAccess() {
		return pFeatureDeclaration;
	}
	
	public ParserRule getFeatureDeclarationRule() {
		return getFeatureDeclarationAccess().getRule();
	}
	
	//fragment FeatureSpecializationPart returns SysML::Feature:
	//	(Subsettings | Redefinitions | Typings MultiplicityPart?) FeatureSpecialization*
	//	| MultiplicityPart FeatureSpecialization*;
	public FeatureSpecializationPartElements getFeatureSpecializationPartAccess() {
		return pFeatureSpecializationPart;
	}
	
	public ParserRule getFeatureSpecializationPartRule() {
		return getFeatureSpecializationPartAccess().getRule();
	}
	
	//fragment MultiplicityPart returns SysML::Feature:
	//	ownedFeatureMembership_comp+=MultiplicityMember (isOrdered?='ordered'? & isNonunique?='nonunique'?);
	public MultiplicityPartElements getMultiplicityPartAccess() {
		return pMultiplicityPart;
	}
	
	public ParserRule getMultiplicityPartRule() {
		return getMultiplicityPartAccess().getRule();
	}
	
	//Multiplicity SysML::MultiplicityRange:
	//	'[' (ownedFeatureMembership_comp+=NaturalLiteralMember '..')?
	//	ownedFeatureMembership_comp+=UnlimitedNaturalLiteralMember ']';
	public MultiplicityElements getMultiplicityAccess() {
		return pMultiplicity;
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}
	
	//fragment FeatureSpecialization returns SysML::Feature:
	//	Typings | Subsettings | Redefinitions;
	public FeatureSpecializationElements getFeatureSpecializationAccess() {
		return pFeatureSpecialization;
	}
	
	public ParserRule getFeatureSpecializationRule() {
		return getFeatureSpecializationAccess().getRule();
	}
	
	//fragment Typings returns SysML::Feature:
	//	TypedBy (',' ownedRelationship_comp+=FeatureTyping)*;
	public TypingsElements getTypingsAccess() {
		return pTypings;
	}
	
	public ParserRule getTypingsRule() {
		return getTypingsAccess().getRule();
	}
	
	//fragment TypedBy returns SysML::Feature:
	//	(':' | 'typed' 'by') ownedRelationship_comp+=FeatureTyping;
	public TypedByElements getTypedByAccess() {
		return pTypedBy;
	}
	
	public ParserRule getTypedByRule() {
		return getTypedByAccess().getRule();
	}
	
	//FeatureTyping SysML::FeatureTyping:
	//	type=[SysML::Type|QualifiedName];
	public FeatureTypingElements getFeatureTypingAccess() {
		return pFeatureTyping;
	}
	
	public ParserRule getFeatureTypingRule() {
		return getFeatureTypingAccess().getRule();
	}
	
	//fragment FeatureConjugationPart returns SysML::Feature:
	//	('~' | 'conjugates') ownedRelationship_comp+=FeatureConjugation;
	public FeatureConjugationPartElements getFeatureConjugationPartAccess() {
		return pFeatureConjugationPart;
	}
	
	public ParserRule getFeatureConjugationPartRule() {
		return getFeatureConjugationPartAccess().getRule();
	}
	
	//FeatureConjugation SysML::Conjugation:
	//	originalType=[SysML::Feature|QualifiedName];
	public FeatureConjugationElements getFeatureConjugationAccess() {
		return pFeatureConjugation;
	}
	
	public ParserRule getFeatureConjugationRule() {
		return getFeatureConjugationAccess().getRule();
	}
	
	//fragment FeatureCompletion returns SysML::Feature:
	//	ValuePart? TypeBody;
	public FeatureCompletionElements getFeatureCompletionAccess() {
		return pFeatureCompletion;
	}
	
	public ParserRule getFeatureCompletionRule() {
		return getFeatureCompletionAccess().getRule();
	}
	
	//fragment ValuePart returns SysML::Feature:
	//	'=' ownedFeatureMembership_comp+=FeatureValue;
	public ValuePartElements getValuePartAccess() {
		return pValuePart;
	}
	
	public ParserRule getValuePartRule() {
		return getValuePartAccess().getRule();
	}
	
	//FeatureValue SysML::FeatureValue:
	//	value_comp=Expression;
	public FeatureValueElements getFeatureValueAccess() {
		return pFeatureValue;
	}
	
	public ParserRule getFeatureValueRule() {
		return getFeatureValueAccess().getRule();
	}
	
	//fragment Subsettings returns SysML::Feature:
	//	Subsets (',' ownedRelationship_comp+=Subset)*;
	public SubsettingsElements getSubsettingsAccess() {
		return pSubsettings;
	}
	
	public ParserRule getSubsettingsRule() {
		return getSubsettingsAccess().getRule();
	}
	
	//fragment Subsets returns SysML::Feature:
	//	(':>' | 'subsets') ownedRelationship_comp+=Subset;
	public SubsetsElements getSubsetsAccess() {
		return pSubsets;
	}
	
	public ParserRule getSubsetsRule() {
		return getSubsetsAccess().getRule();
	}
	
	//Subset SysML::Subsetting:
	//	subsettedFeature=[SysML::Feature|QualifiedName];
	public SubsetElements getSubsetAccess() {
		return pSubset;
	}
	
	public ParserRule getSubsetRule() {
		return getSubsetAccess().getRule();
	}
	
	//fragment Redefinitions returns SysML::Feature:
	//	Redefines (',' ownedRelationship_comp+=Redefinition)*;
	public RedefinitionsElements getRedefinitionsAccess() {
		return pRedefinitions;
	}
	
	public ParserRule getRedefinitionsRule() {
		return getRedefinitionsAccess().getRule();
	}
	
	//fragment Redefines returns SysML::Feature:
	//	(':>>' | 'redefines') ownedRelationship_comp+=Redefinition;
	public RedefinesElements getRedefinesAccess() {
		return pRedefines;
	}
	
	public ParserRule getRedefinesRule() {
		return getRedefinesAccess().getRule();
	}
	
	//Redefinition SysML::Redefinition:
	//	redefinedFeature=[SysML::Feature|QualifiedName];
	public RedefinitionElements getRedefinitionAccess() {
		return pRedefinition;
	}
	
	public ParserRule getRedefinitionRule() {
		return getRedefinitionAccess().getRule();
	}
	
	///* FEATURE MEMBERSHIPS */ MultiplicityMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=Multiplicity;
	public MultiplicityMemberElements getMultiplicityMemberAccess() {
		return pMultiplicityMember;
	}
	
	public ParserRule getMultiplicityMemberRule() {
		return getMultiplicityMemberAccess().getRule();
	}
	
	//NaturalLiteralMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=NaturalLiteralExpression;
	public NaturalLiteralMemberElements getNaturalLiteralMemberAccess() {
		return pNaturalLiteralMember;
	}
	
	public ParserRule getNaturalLiteralMemberRule() {
		return getNaturalLiteralMemberAccess().getRule();
	}
	
	//UnlimitedNaturalLiteralMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=UnlimitedNaturalLiteralExpression;
	public UnlimitedNaturalLiteralMemberElements getUnlimitedNaturalLiteralMemberAccess() {
		return pUnlimitedNaturalLiteralMember;
	}
	
	public ParserRule getUnlimitedNaturalLiteralMemberRule() {
		return getUnlimitedNaturalLiteralMemberAccess().getRule();
	}
	
	///* CONNECTORS */ Connector SysML::Connector:
	//	isAbstract?='abstract'? 'connector' ConnectorDeclaration TypeBody;
	public ConnectorElements getConnectorAccess() {
		return pConnector;
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}
	
	//fragment ConnectorDeclaration returns SysML::Connector:
	//	(FeatureDeclaration? 'from' | isSufficient?='all')?
	//	ownedFeatureMembership_comp+=ConnectorEndMember 'to' ownedFeatureMembership_comp+=ConnectorEndMember
	//	| FeatureDeclaration?
	//	'(' ownedFeatureMembership_comp+=ConnectorEndMember ',' ownedFeatureMembership_comp+=ConnectorEndMember (','
	//	ownedFeatureMembership_comp+=ConnectorEndMember)*
	//	')';
	public ConnectorDeclarationElements getConnectorDeclarationAccess() {
		return pConnectorDeclaration;
	}
	
	public ParserRule getConnectorDeclarationRule() {
		return getConnectorDeclarationAccess().getRule();
	}
	
	//ConnectorEnd SysML::Feature:
	//	ownedRelationship_comp+=Subset ownedFeatureMembership_comp+=MultiplicityMember?;
	public ConnectorEndElements getConnectorEndAccess() {
		return pConnectorEnd;
	}
	
	public ParserRule getConnectorEndRule() {
		return getConnectorEndAccess().getRule();
	}
	
	///* CONNECTOR MEMBERSHIPS */ ConnectorEndMember SysML::EndFeatureMembership:
	//	(memberName=Name '=>')? ownedMemberFeature_comp=ConnectorEnd;
	public ConnectorEndMemberElements getConnectorEndMemberAccess() {
		return pConnectorEndMember;
	}
	
	public ParserRule getConnectorEndMemberRule() {
		return getConnectorEndMemberAccess().getRule();
	}
	
	///* BINDING CONNECTORS */ BindingConnector SysML::BindingConnector:
	//	isAbstract?='abstract'? 'binding' BindingConnectorDeclaration TypeBody;
	public BindingConnectorElements getBindingConnectorAccess() {
		return pBindingConnector;
	}
	
	public ParserRule getBindingConnectorRule() {
		return getBindingConnectorAccess().getRule();
	}
	
	//fragment BindingConnectorDeclaration returns SysML::BindingConnector:
	//	(FeatureDeclaration? 'of' | isSufficient?='all')?
	//	ownedFeatureMembership_comp+=ConnectorEndMember '=' ownedFeatureMembership_comp+=ConnectorEndMember;
	public BindingConnectorDeclarationElements getBindingConnectorDeclarationAccess() {
		return pBindingConnectorDeclaration;
	}
	
	public ParserRule getBindingConnectorDeclarationRule() {
		return getBindingConnectorDeclarationAccess().getRule();
	}
	
	///* SUCCESSIONS */ Succession SysML::Succession:
	//	isAbstract?='abstract'? 'succession' SuccessionDeclaration TypeBody;
	public SuccessionElements getSuccessionAccess() {
		return pSuccession;
	}
	
	public ParserRule getSuccessionRule() {
		return getSuccessionAccess().getRule();
	}
	
	//fragment SuccessionDeclaration returns SysML::Succession:
	//	(FeatureDeclaration? 'first' | isSufficient?='all')?
	//	ownedFeatureMembership_comp+=ConnectorEndMember 'then' ownedFeatureMembership_comp+=ConnectorEndMember;
	public SuccessionDeclarationElements getSuccessionDeclarationAccess() {
		return pSuccessionDeclaration;
	}
	
	public ParserRule getSuccessionDeclarationRule() {
		return getSuccessionDeclarationAccess().getRule();
	}
	
	///* ITEM FLOWS */ ItemFlow SysML::ItemFlow:
	//	isAbstract?='abstract'? 'stream' ItemFlowDeclaration TypeBody;
	public ItemFlowElements getItemFlowAccess() {
		return pItemFlow;
	}
	
	public ParserRule getItemFlowRule() {
		return getItemFlowAccess().getRule();
	}
	
	//SuccessionItemFlow SysML::SuccessionItemFlow:
	//	isAbstract?='abstract'? 'flow' ItemFlowDeclaration TypeBody;
	public SuccessionItemFlowElements getSuccessionItemFlowAccess() {
		return pSuccessionItemFlow;
	}
	
	public ParserRule getSuccessionItemFlowRule() {
		return getSuccessionItemFlowAccess().getRule();
	}
	
	//fragment ItemFlowDeclaration returns SysML::ItemFlow:
	//	(FeatureDeclaration? ('of' ownedFeatureMembership_comp+=ItemFeatureMember
	//	| ownedFeatureMembership_comp+=EmptyItemFeatureMember) 'from'
	//	| isSufficient?='all'? ownedFeatureMembership_comp+=EmptyItemFeatureMember)
	//	ownedFeatureMembership_comp+=ItemFlowEndMember 'to' ownedFeatureMembership_comp+=ItemFlowEndMember;
	public ItemFlowDeclarationElements getItemFlowDeclarationAccess() {
		return pItemFlowDeclaration;
	}
	
	public ParserRule getItemFlowDeclarationRule() {
		return getItemFlowDeclarationAccess().getRule();
	}
	
	//ItemFeatureTyping SysML::ItemFeature:
	//	ownedRelationship_comp+=FeatureTyping ownedFeatureMembership_comp+=MultiplicityMember?;
	public ItemFeatureTypingElements getItemFeatureTypingAccess() {
		return pItemFeatureTyping;
	}
	
	public ParserRule getItemFeatureTypingRule() {
		return getItemFeatureTypingAccess().getRule();
	}
	
	//EmptyItemFeature SysML::ItemFeature:
	//	{SysML::ItemFeature};
	public EmptyItemFeatureElements getEmptyItemFeatureAccess() {
		return pEmptyItemFeature;
	}
	
	public ParserRule getEmptyItemFeatureRule() {
		return getEmptyItemFeatureAccess().getRule();
	}
	
	//ItemFlowEnd SysML::ItemFlowEnd:
	//	ownedFeatureMembership_comp+=ItemFlowFeatureMember;
	public ItemFlowEndElements getItemFlowEndAccess() {
		return pItemFlowEnd;
	}
	
	public ParserRule getItemFlowEndRule() {
		return getItemFlowEndAccess().getRule();
	}
	
	//ItemFlowFeature SysML::ItemFlowFeature:
	//	ownedRelationship_comp+=Redefinition;
	public ItemFlowFeatureElements getItemFlowFeatureAccess() {
		return pItemFlowFeature;
	}
	
	public ParserRule getItemFlowFeatureRule() {
		return getItemFlowFeatureAccess().getRule();
	}
	
	///* ITEM FLOW MEMBERSHIPS */ ItemFeatureMember SysML::FeatureMembership:
	//	(memberName=Name ':')? ownedMemberFeature_comp=ItemFeatureTyping;
	public ItemFeatureMemberElements getItemFeatureMemberAccess() {
		return pItemFeatureMember;
	}
	
	public ParserRule getItemFeatureMemberRule() {
		return getItemFeatureMemberAccess().getRule();
	}
	
	//ItemFlowEndMember SysML::EndFeatureMembership:
	//	ownedMemberFeature_comp=ItemFlowEnd;
	public ItemFlowEndMemberElements getItemFlowEndMemberAccess() {
		return pItemFlowEndMember;
	}
	
	public ParserRule getItemFlowEndMemberRule() {
		return getItemFlowEndMemberAccess().getRule();
	}
	
	//ItemFlowFeatureMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=ItemFlowFeature;
	public ItemFlowFeatureMemberElements getItemFlowFeatureMemberAccess() {
		return pItemFlowFeatureMember;
	}
	
	public ParserRule getItemFlowFeatureMemberRule() {
		return getItemFlowFeatureMemberAccess().getRule();
	}
	
	//EmptyItemFeatureMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=EmptyItemFeature;
	public EmptyItemFeatureMemberElements getEmptyItemFeatureMemberAccess() {
		return pEmptyItemFeatureMember;
	}
	
	public ParserRule getEmptyItemFeatureMemberRule() {
		return getEmptyItemFeatureMemberAccess().getRule();
	}
	
	///* PARAMETERS */ Parameter SysML::Feature:
	//	'feature'? ParameterDeclaration
	//	| {SysML::Step} 'step' ParameterDeclaration
	//	| {SysML::Expression} 'expr' ParameterDeclaration
	//	| {SysML::BooleanExpression} 'bool' ParameterDeclaration;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//fragment ParameterDeclaration returns SysML::Feature:
	//	isSufficient?='all'? (Identification ParameterSpecializationPart?
	//	| ParameterSpecializationPart);
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return pParameterDeclaration;
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}
	
	//fragment ParameterSpecializationPart returns SysML::Feature:
	//	(Subsets | Redefines | TypedBy MultiplicityPart?) ParameterSpecialization*
	//	| MultiplicityPart ParameterSpecialization*;
	public ParameterSpecializationPartElements getParameterSpecializationPartAccess() {
		return pParameterSpecializationPart;
	}
	
	public ParserRule getParameterSpecializationPartRule() {
		return getParameterSpecializationPartAccess().getRule();
	}
	
	//fragment ParameterSpecialization returns SysML::Feature:
	//	TypedBy | Subsets | Redefines;
	public ParameterSpecializationElements getParameterSpecializationAccess() {
		return pParameterSpecialization;
	}
	
	public ParserRule getParameterSpecializationRule() {
		return getParameterSpecializationAccess().getRule();
	}
	
	///* STEPS */ Step SysML::Step:
	//	isAbstract?='abstract'? 'step' StepDeclaration BehaviorBody;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//fragment StepDeclaration returns SysML::Step:
	//	FeatureDeclaration? (ValuePart | StepParameterList)?;
	public StepDeclarationElements getStepDeclarationAccess() {
		return pStepDeclaration;
	}
	
	public ParserRule getStepDeclarationRule() {
		return getStepDeclarationAccess().getRule();
	}
	
	//fragment StepParameterList returns SysML::Step:
	//	'(' (ownedFeatureMembership_comp+=StepParameterMember (',' ownedFeatureMembership_comp+=StepParameterMember)*)? ')';
	public StepParameterListElements getStepParameterListAccess() {
		return pStepParameterList;
	}
	
	public ParserRule getStepParameterListRule() {
		return getStepParameterListAccess().getRule();
	}
	
	//StepParameter SysML::Feature:
	//	Parameter ValuePart?;
	public StepParameterElements getStepParameterAccess() {
		return pStepParameter;
	}
	
	public ParserRule getStepParameterRule() {
		return getStepParameterAccess().getRule();
	}
	
	///* STEP MEMBERSHIPS */ StepParameterMember SysML::ParameterMembership:
	//	direction=FeatureDirection? ownedMemberParameter_comp=StepParameter;
	public StepParameterMemberElements getStepParameterMemberAccess() {
		return pStepParameterMember;
	}
	
	public ParserRule getStepParameterMemberRule() {
		return getStepParameterMemberAccess().getRule();
	}
	
	///* INVARIANTS */ Invariant SysML::Invariant:
	//	isAbstract?='abstract'? 'inv' BooleanExpressionDeclaration InvariantPart FunctionBody;
	public InvariantElements getInvariantAccess() {
		return pInvariant;
	}
	
	public ParserRule getInvariantRule() {
		return getInvariantAccess().getRule();
	}
	
	//fragment InvariantPart returns SysML::Invariant:
	//	ownedFeatureMembership_comp+=TrueLiteralMember;
	public InvariantPartElements getInvariantPartAccess() {
		return pInvariantPart;
	}
	
	public ParserRule getInvariantPartRule() {
		return getInvariantPartAccess().getRule();
	}
	
	//TrueLiteralExpression SysML::LiteralBoolean:
	//	{SysML::LiteralBoolean};
	public TrueLiteralExpressionElements getTrueLiteralExpressionAccess() {
		return pTrueLiteralExpression;
	}
	
	public ParserRule getTrueLiteralExpressionRule() {
		return getTrueLiteralExpressionAccess().getRule();
	}
	
	///* INVARIANT MEMBERSHIPS */ TrueLiteralMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=TrueLiteralExpression;
	public TrueLiteralMemberElements getTrueLiteralMemberAccess() {
		return pTrueLiteralMember;
	}
	
	public ParserRule getTrueLiteralMemberRule() {
		return getTrueLiteralMemberAccess().getRule();
	}
	
	///* EXPRESSIONS */ // Block Expressions
	//BlockExpression SysML::BlockExpression:
	//	isAbstract?='abstract'? 'expr' ExpressionDeclaration FunctionBody;
	public BlockExpressionElements getBlockExpressionAccess() {
		return pBlockExpression;
	}
	
	public ParserRule getBlockExpressionRule() {
		return getBlockExpressionAccess().getRule();
	}
	
	//fragment ExpressionDeclaration returns SysML::Expression:
	//	FeatureDeclaration? (ValuePart | ParameterList ReturnParameterPart?)?;
	public ExpressionDeclarationElements getExpressionDeclarationAccess() {
		return pExpressionDeclaration;
	}
	
	public ParserRule getExpressionDeclarationRule() {
		return getExpressionDeclarationAccess().getRule();
	}
	
	//// Boolean Expressions
	//BooleanExpression SysML::BooleanExpression:
	//	isAbstract?='abstract'? 'bool' BooleanExpressionDeclaration FunctionBody;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//fragment BooleanExpressionDeclaration returns SysML::Expression:
	//	FeatureDeclaration? (ValuePart | ParameterList)? EmptyReturnParameterPart;
	public BooleanExpressionDeclarationElements getBooleanExpressionDeclarationAccess() {
		return pBooleanExpressionDeclaration;
	}
	
	public ParserRule getBooleanExpressionDeclarationRule() {
		return getBooleanExpressionDeclarationAccess().getRule();
	}
	
	//// Expressions
	//Expression SysML::Expression:
	//	ConditionalExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//// Conditional Test Expressions
	//ConditionalExpression SysML::Expression:
	//	NullCoalescingExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalTestOperator
	//	operand_comp+=Expression ':' operand_comp+=ConditionalExpression)?;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return pConditionalExpression;
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	//ConditionalTestOperator:
	//	'?';
	public ConditionalTestOperatorElements getConditionalTestOperatorAccess() {
		return pConditionalTestOperator;
	}
	
	public ParserRule getConditionalTestOperatorRule() {
		return getConditionalTestOperatorAccess().getRule();
	}
	
	//// Null Coalescing Expressions
	//NullCoalescingExpression SysML::Expression:
	//	ConditionalOrExpression ({SysML::OperatorExpression.operand_comp+=current} operator=NullCoalescingOperator
	//	operand_comp+=ConditionalOrExpression)*;
	public NullCoalescingExpressionElements getNullCoalescingExpressionAccess() {
		return pNullCoalescingExpression;
	}
	
	public ParserRule getNullCoalescingExpressionRule() {
		return getNullCoalescingExpressionAccess().getRule();
	}
	
	//NullCoalescingOperator:
	//	'??';
	public NullCoalescingOperatorElements getNullCoalescingOperatorAccess() {
		return pNullCoalescingOperator;
	}
	
	public ParserRule getNullCoalescingOperatorRule() {
		return getNullCoalescingOperatorAccess().getRule();
	}
	
	//// Conditional Logical Expressions
	//ConditionalOrExpression SysML::Expression:
	//	ConditionalAndExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalOrOperator
	//	operand_comp+=ConditionalAndExpression)*;
	public ConditionalOrExpressionElements getConditionalOrExpressionAccess() {
		return pConditionalOrExpression;
	}
	
	public ParserRule getConditionalOrExpressionRule() {
		return getConditionalOrExpressionAccess().getRule();
	}
	
	//ConditionalOrOperator:
	//	'||';
	public ConditionalOrOperatorElements getConditionalOrOperatorAccess() {
		return pConditionalOrOperator;
	}
	
	public ParserRule getConditionalOrOperatorRule() {
		return getConditionalOrOperatorAccess().getRule();
	}
	
	//ConditionalAndExpression SysML::Expression:
	//	OrExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ConditionalAndOperator
	//	operand_comp+=OrExpression)*;
	public ConditionalAndExpressionElements getConditionalAndExpressionAccess() {
		return pConditionalAndExpression;
	}
	
	public ParserRule getConditionalAndExpressionRule() {
		return getConditionalAndExpressionAccess().getRule();
	}
	
	//ConditionalAndOperator:
	//	'&&';
	public ConditionalAndOperatorElements getConditionalAndOperatorAccess() {
		return pConditionalAndOperator;
	}
	
	public ParserRule getConditionalAndOperatorRule() {
		return getConditionalAndOperatorAccess().getRule();
	}
	
	//// Logical Expressions
	//OrExpression SysML::Expression:
	//	XorExpression ({SysML::OperatorExpression.operand_comp+=current} operator=OrOperator operand_comp+=XorExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//OrOperator:
	//	'|';
	public OrOperatorElements getOrOperatorAccess() {
		return pOrOperator;
	}
	
	public ParserRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}
	
	//XorExpression SysML::Expression:
	//	AndExpression ({SysML::OperatorExpression.operand_comp+=current} operator=XorOperator operand_comp+=AndExpression)*;
	public XorExpressionElements getXorExpressionAccess() {
		return pXorExpression;
	}
	
	public ParserRule getXorExpressionRule() {
		return getXorExpressionAccess().getRule();
	}
	
	//XorOperator:
	//	'^';
	public XorOperatorElements getXorOperatorAccess() {
		return pXorOperator;
	}
	
	public ParserRule getXorOperatorRule() {
		return getXorOperatorAccess().getRule();
	}
	
	//AndExpression SysML::Expression:
	//	EqualityExpression ({SysML::OperatorExpression.operand_comp+=current} operator=AndOperator
	//	operand_comp+=EqualityExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//AndOperator:
	//	'&';
	public AndOperatorElements getAndOperatorAccess() {
		return pAndOperator;
	}
	
	public ParserRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}
	
	//// Equality Expressions
	//EqualityExpression SysML::Expression:
	//	ClassificationExpression ({SysML::OperatorExpression.operand_comp+=current} operator=EqualityOperator
	//	operand_comp+=ClassificationExpression)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//EqualityOperator:
	//	'==' | '!=';
	public EqualityOperatorElements getEqualityOperatorAccess() {
		return pEqualityOperator;
	}
	
	public ParserRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}
	
	//// Classification Expressions
	//ClassificationExpression SysML::Expression:
	//	RelationalExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ClassificationOperator
	//	ownedFeatureMembership_comp+=TypeReferenceMember)?;
	public ClassificationExpressionElements getClassificationExpressionAccess() {
		return pClassificationExpression;
	}
	
	public ParserRule getClassificationExpressionRule() {
		return getClassificationExpressionAccess().getRule();
	}
	
	//ClassificationOperator:
	//	'instanceof' | 'hastype' | 'istype';
	public ClassificationOperatorElements getClassificationOperatorAccess() {
		return pClassificationOperator;
	}
	
	public ParserRule getClassificationOperatorRule() {
		return getClassificationOperatorAccess().getRule();
	}
	
	//// Relational Expressions
	//RelationalExpression SysML::Expression:
	//	AdditiveExpression ({SysML::OperatorExpression.operand_comp+=current} operator=RelationalOperator
	//	operand_comp+=AdditiveExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//RelationalOperator:
	//	'<' | '>' | '<=' | '>=';
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return pRelationalOperator;
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}
	
	//// Arithmetic Expressions
	//AdditiveExpression SysML::Expression:
	//	MultiplicativeExpression ({SysML::OperatorExpression.operand_comp+=current} operator=AdditiveOperator
	//	operand_comp+=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//AdditiveOperator:
	//	'+' | '-';
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return pAdditiveOperator;
	}
	
	public ParserRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}
	
	//MultiplicativeExpression SysML::Expression:
	//	ExponentiationExpression ({SysML::OperatorExpression.operand_comp+=current} operator=MultiplicativeOperator
	//	operand_comp+=ExponentiationExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//MultiplicativeOperator:
	//	'*' | '/';
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return pMultiplicativeOperator;
	}
	
	public ParserRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}
	
	//ExponentiationExpression SysML::Expression:
	//	UnitsExpression ({SysML::OperatorExpression.operand_comp+=current} operator=ExponentiationOperator
	//	operand_comp+=UnitsExpression)*;
	public ExponentiationExpressionElements getExponentiationExpressionAccess() {
		return pExponentiationExpression;
	}
	
	public ParserRule getExponentiationExpressionRule() {
		return getExponentiationExpressionAccess().getRule();
	}
	
	//ExponentiationOperator:
	//	'**';
	public ExponentiationOperatorElements getExponentiationOperatorAccess() {
		return pExponentiationOperator;
	}
	
	public ParserRule getExponentiationOperatorRule() {
		return getExponentiationOperatorAccess().getRule();
	}
	
	//// Units Expressions
	//UnitsExpression SysML::Expression:
	//	UnaryExpression ({SysML::OperatorExpression.operand_comp+=current} operator='@' '[' operand_comp+=Expression ']')?;
	public UnitsExpressionElements getUnitsExpressionAccess() {
		return pUnitsExpression;
	}
	
	public ParserRule getUnitsExpressionRule() {
		return getUnitsExpressionAccess().getRule();
	}
	
	//// Unary Expressions
	//UnaryExpression SysML::Expression:
	//	SequenceAccessExpression | {SysML::OperatorExpression} operator=UnaryOperator operand_comp+=SequenceAccessExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//UnaryOperator:
	//	'+' | '-' | '!' | '~';
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return pUnaryOperator;
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//SequenceAccessExpression SysML::Expression:
	//	PrimaryExpression ({SysML::OperatorExpression.operand_comp+=current} operator='[' operand_comp+=Expression ']')?;
	public SequenceAccessExpressionElements getSequenceAccessExpressionAccess() {
		return pSequenceAccessExpression;
	}
	
	public ParserRule getSequenceAccessExpressionRule() {
		return getSequenceAccessExpressionAccess().getRule();
	}
	
	//// Primary Expressions
	//PrimaryExpression SysML::Expression:
	//	BaseExpression ({SysML::OperatorExpression.operand_comp+=current} '->'
	//	operator=Name ownedFeatureMembership_comp+=BodyMember+)*;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//BodyExpression SysML::BlockExpression:
	//	=> (ownedFeatureMembership_comp+=BodyParameterMember ownedFeatureMembership_comp+=BodyParameterMember*
	//	'(' ownedFeatureMembership_comp+=ResultExpressionMember ')') | ownedRelationship_comp+=ExpressionTyping;
	public BodyExpressionElements getBodyExpressionAccess() {
		return pBodyExpression;
	}
	
	public ParserRule getBodyExpressionRule() {
		return getBodyExpressionAccess().getRule();
	}
	
	//BodyParameter SysML::Feature:
	//	{SysML::Feature} (TypedBy MultiplicityPart? | MultiplicityPart TypedBy?)?;
	public BodyParameterElements getBodyParameterAccess() {
		return pBodyParameter;
	}
	
	public ParserRule getBodyParameterRule() {
		return getBodyParameterAccess().getRule();
	}
	
	//ExpressionTyping SysML::FeatureTyping:
	//	type=[SysML::Function|QualifiedName];
	public ExpressionTypingElements getExpressionTypingAccess() {
		return pExpressionTyping;
	}
	
	public ParserRule getExpressionTypingRule() {
		return getExpressionTypingAccess().getRule();
	}
	
	//// Base Expressions
	//BaseExpression SysML::Expression:
	//	NullExpression
	//	| LiteralExpression
	//	| FeatureReferenceExpression
	//	| InvocationExpression
	//	| ExtentExpression
	//	| SequenceConstructionExpression
	//	| '(' Expression ')';
	public BaseExpressionElements getBaseExpressionAccess() {
		return pBaseExpression;
	}
	
	public ParserRule getBaseExpressionRule() {
		return getBaseExpressionAccess().getRule();
	}
	
	//FeatureReferenceExpression SysML::FeatureReferenceExpression:
	//	ownedFeatureMembership_comp+=FeatureReferenceMember;
	public FeatureReferenceExpressionElements getFeatureReferenceExpressionAccess() {
		return pFeatureReferenceExpression;
	}
	
	public ParserRule getFeatureReferenceExpressionRule() {
		return getFeatureReferenceExpressionAccess().getRule();
	}
	
	//FeatureReference SysML::Feature:
	//	ownedRelationship_comp+=Subset;
	public FeatureReferenceElements getFeatureReferenceAccess() {
		return pFeatureReference;
	}
	
	public ParserRule getFeatureReferenceRule() {
		return getFeatureReferenceAccess().getRule();
	}
	
	//InvocationExpression SysML::InvocationExpression:
	//	ownedRelationship_comp+=FeatureTyping '(' Tuple? ')';
	public InvocationExpressionElements getInvocationExpressionAccess() {
		return pInvocationExpression;
	}
	
	public ParserRule getInvocationExpressionRule() {
		return getInvocationExpressionAccess().getRule();
	}
	
	//fragment Tuple returns SysML::Expression:
	//	PositionalTuple | NamedTuple;
	public TupleElements getTupleAccess() {
		return pTuple;
	}
	
	public ParserRule getTupleRule() {
		return getTupleAccess().getRule();
	}
	
	//fragment PositionalTuple returns SysML::Expression:
	//	ownedFeatureMembership_comp+=ExpressionMember (',' ownedFeatureMembership_comp+=ExpressionMember)*;
	public PositionalTupleElements getPositionalTupleAccess() {
		return pPositionalTuple;
	}
	
	public ParserRule getPositionalTupleRule() {
		return getPositionalTupleAccess().getRule();
	}
	
	//fragment NamedTuple returns SysML::Expression:
	//	ownedFeatureMembership_comp+=NamedExpressionMember (',' ownedFeatureMembership_comp+=NamedExpressionMember)*;
	public NamedTupleElements getNamedTupleAccess() {
		return pNamedTuple;
	}
	
	public ParserRule getNamedTupleRule() {
		return getNamedTupleAccess().getRule();
	}
	
	//ExtentExpression SysML::OperatorExpression:
	//	ownedFeatureMembership_comp+=TypeReferenceMember '.' operator='allInstances' '(' ')'
	//	| operator='all' ownedFeatureMembership_comp+=TypeReferenceMember;
	public ExtentExpressionElements getExtentExpressionAccess() {
		return pExtentExpression;
	}
	
	public ParserRule getExtentExpressionRule() {
		return getExtentExpressionAccess().getRule();
	}
	
	//TypeReference SysML::Feature:
	//	ownedRelationship_comp+=FeatureTyping;
	public TypeReferenceElements getTypeReferenceAccess() {
		return pTypeReference;
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}
	
	//SequenceConstructionExpression SysML::Expression:
	//	{SysML::NullExpression} '{' '}'
	//	| '{' Expression ({SysML::OperatorExpression.operand_comp+=current} operator=',' operand_comp+=SequenceElementList
	//	| {SysML::OperatorExpression.operand_comp+=current} operator='..' operand_comp+=Expression)?
	//	'}';
	public SequenceConstructionExpressionElements getSequenceConstructionExpressionAccess() {
		return pSequenceConstructionExpression;
	}
	
	public ParserRule getSequenceConstructionExpressionRule() {
		return getSequenceConstructionExpressionAccess().getRule();
	}
	
	//SequenceElementList SysML::Expression:
	//	Expression ({SysML::OperatorExpression.operand_comp+=current} operator=',' operand_comp+=SequenceElementList)?;
	public SequenceElementListElements getSequenceElementListAccess() {
		return pSequenceElementList;
	}
	
	public ParserRule getSequenceElementListRule() {
		return getSequenceElementListAccess().getRule();
	}
	
	//NullExpression SysML::NullExpression:
	//	{SysML::NullExpression} 'null';
	public NullExpressionElements getNullExpressionAccess() {
		return pNullExpression;
	}
	
	public ParserRule getNullExpressionRule() {
		return getNullExpressionAccess().getRule();
	}
	
	//// Literal Expressions
	//LiteralExpression SysML::LiteralExpression:
	//	BooleanLiteralExpression | StringLiteralExpression | RealLiteralExpression | UnlimitedNaturalLiteralExpression;
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return pLiteralExpression;
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//BooleanLiteralExpression SysML::LiteralBoolean:
	//	value=BooleanValue;
	public BooleanLiteralExpressionElements getBooleanLiteralExpressionAccess() {
		return pBooleanLiteralExpression;
	}
	
	public ParserRule getBooleanLiteralExpressionRule() {
		return getBooleanLiteralExpressionAccess().getRule();
	}
	
	//BooleanValue Ecore::EBoolean:
	//	'true' | 'false';
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//StringLiteralExpression SysML::LiteralString:
	//	value=STRING_VALUE;
	public StringLiteralExpressionElements getStringLiteralExpressionAccess() {
		return pStringLiteralExpression;
	}
	
	public ParserRule getStringLiteralExpressionRule() {
		return getStringLiteralExpressionAccess().getRule();
	}
	
	//RealLiteralExpression SysML::LiteralReal:
	//	value=RealValue;
	public RealLiteralExpressionElements getRealLiteralExpressionAccess() {
		return pRealLiteralExpression;
	}
	
	public ParserRule getRealLiteralExpressionRule() {
		return getRealLiteralExpressionAccess().getRule();
	}
	
	//RealValue Ecore::EDouble:
	//	DECIMAL_VALUE? '.' (DECIMAL_VALUE | EXP_VALUE) | EXP_VALUE;
	public RealValueElements getRealValueAccess() {
		return pRealValue;
	}
	
	public ParserRule getRealValueRule() {
		return getRealValueAccess().getRule();
	}
	
	//NaturalLiteralExpression SysML::LiteralInteger:
	//	value=DECIMAL_VALUE;
	public NaturalLiteralExpressionElements getNaturalLiteralExpressionAccess() {
		return pNaturalLiteralExpression;
	}
	
	public ParserRule getNaturalLiteralExpressionRule() {
		return getNaturalLiteralExpressionAccess().getRule();
	}
	
	//UnlimitedNaturalLiteralExpression SysML::LiteralExpression:
	//	NaturalLiteralExpression | {SysML::LiteralUnbounded} '*';
	public UnlimitedNaturalLiteralExpressionElements getUnlimitedNaturalLiteralExpressionAccess() {
		return pUnlimitedNaturalLiteralExpression;
	}
	
	public ParserRule getUnlimitedNaturalLiteralExpressionRule() {
		return getUnlimitedNaturalLiteralExpressionAccess().getRule();
	}
	
	///* EXPRESSION MEMBERSHIPS */ ExpressionMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=Expression;
	public ExpressionMemberElements getExpressionMemberAccess() {
		return pExpressionMember;
	}
	
	public ParserRule getExpressionMemberRule() {
		return getExpressionMemberAccess().getRule();
	}
	
	//FeatureReferenceMember SysML::ReturnParameterMembership:
	//	ownedMemberFeature_comp=FeatureReference;
	public FeatureReferenceMemberElements getFeatureReferenceMemberAccess() {
		return pFeatureReferenceMember;
	}
	
	public ParserRule getFeatureReferenceMemberRule() {
		return getFeatureReferenceMemberAccess().getRule();
	}
	
	//TypeReferenceMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=TypeReference;
	public TypeReferenceMemberElements getTypeReferenceMemberAccess() {
		return pTypeReferenceMember;
	}
	
	public ParserRule getTypeReferenceMemberRule() {
		return getTypeReferenceMemberAccess().getRule();
	}
	
	//NamedExpressionMember SysML::FeatureMembership:
	//	memberName=Name '=>' ownedMemberFeature_comp=Expression;
	public NamedExpressionMemberElements getNamedExpressionMemberAccess() {
		return pNamedExpressionMember;
	}
	
	public ParserRule getNamedExpressionMemberRule() {
		return getNamedExpressionMemberAccess().getRule();
	}
	
	//BodyMember SysML::FeatureMembership:
	//	ownedMemberFeature_comp=BodyExpression;
	public BodyMemberElements getBodyMemberAccess() {
		return pBodyMember;
	}
	
	public ParserRule getBodyMemberRule() {
		return getBodyMemberAccess().getRule();
	}
	
	//BodyParameterMember SysML::ParameterMembership:
	//	memberName=Name ownedMemberParameter_comp=BodyParameter;
	public BodyParameterMemberElements getBodyParameterMemberAccess() {
		return pBodyParameterMember;
	}
	
	public ParserRule getBodyParameterMemberRule() {
		return getBodyParameterMemberAccess().getRule();
	}
	
	///* NAMES */ Name:
	//	ID | UNRESTRICTED_NAME;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//QualifiedName:
	//	Name | ColonQualifiedName | DotQualifiedName;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//ColonQualifiedName:
	//	Name ('::' Name)+;
	public ColonQualifiedNameElements getColonQualifiedNameAccess() {
		return pColonQualifiedName;
	}
	
	public ParserRule getColonQualifiedNameRule() {
		return getColonQualifiedNameAccess().getRule();
	}
	
	//DotQualifiedName:
	//	Name ('.' Name)+;
	public DotQualifiedNameElements getDotQualifiedNameAccess() {
		return pDotQualifiedName;
	}
	
	public ParserRule getDotQualifiedNameRule() {
		return getDotQualifiedNameAccess().getRule();
	}
	
	//terminal DECIMAL_VALUE returns Ecore::EInt:
	//	'0'..'9' '0'..'9'*;
	public TerminalRule getDECIMAL_VALUERule() {
		return tDECIMAL_VALUE;
	}
	
	//terminal EXP_VALUE:
	//	DECIMAL_VALUE ('e' | 'E') ('+' | '-')? DECIMAL_VALUE;
	public TerminalRule getEXP_VALUERule() {
		return tEXP_VALUE;
	}
	
	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal UNRESTRICTED_NAME:
	//	'\'' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '\''))* '\'';
	public TerminalRule getUNRESTRICTED_NAMERule() {
		return tUNRESTRICTED_NAME;
	}
	
	//terminal STRING_VALUE:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRING_VALUERule() {
		return tSTRING_VALUE;
	}
	
	//terminal ML_COMMENT:
	//	'/*' !'*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal DOCUMENTATION_COMMENT:
	//	'/**'->'*/';
	public TerminalRule getDOCUMENTATION_COMMENTRule() {
		return tDOCUMENTATION_COMMENT;
	}
	
	//terminal ML_NOTE:
	//	'//*'->'*/';
	public TerminalRule getML_NOTERule() {
		return tML_NOTE;
	}
	
	//terminal SL_NOTE:
	//	'//' (!('\n' | '\r') !('\n' | '\r')*)? ('\r'? '\n')?;
	public TerminalRule getSL_NOTERule() {
		return tSL_NOTE;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
