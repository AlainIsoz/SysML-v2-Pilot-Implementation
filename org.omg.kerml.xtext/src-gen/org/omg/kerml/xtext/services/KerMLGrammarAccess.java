/*
 * generated by Xtext 2.25.0
 */
package org.omg.kerml.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.omg.kerml.expressions.xtext.services.KerMLExpressionsGrammarAccess;

@Singleton
public class KerMLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RootNamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.RootNamespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNamespaceAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cNamespaceBodyElementParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		///* ROOT NAMESPACE */
		//RootNamespace returns SysML::Namespace :
		//    {SysML::Namespace}NamespaceBodyElement*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::Namespace}NamespaceBodyElement*
		public Group getGroup() { return cGroup; }
		
		//{SysML::Namespace}
		public Action getNamespaceAction_0() { return cNamespaceAction_0; }
		
		//NamespaceBodyElement*
		public RuleCall getNamespaceBodyElementParserRuleCall_1() { return cNamespaceBodyElementParserRuleCall_1; }
	}
	public class IdentificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Identification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIdKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cHumanIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cHumanIdNameParserRuleCall_0_1_0 = (RuleCall)cHumanIdAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		///* ELEMENTS */
		///* Elements */
		//fragment Identification returns SysML::Element :
		//      'id' humanId = Name ( name = Name )?
		//    | name = Name
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  'id' humanId = Name ( name = Name )?
		//| name = Name
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'id' humanId = Name ( name = Name )?
		public Group getGroup_0() { return cGroup_0; }
		
		//'id'
		public Keyword getIdKeyword_0_0() { return cIdKeyword_0_0; }
		
		//humanId = Name
		public Assignment getHumanIdAssignment_0_1() { return cHumanIdAssignment_0_1; }
		
		//Name
		public RuleCall getHumanIdNameParserRuleCall_0_1_0() { return cHumanIdNameParserRuleCall_0_1_0; }
		
		//( name = Name )?
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_0_2_0() { return cNameNameParserRuleCall_0_2_0; }
		
		//name = Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cElementBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Element returns SysML::Element :
		//    'element' Identification? ElementBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'element' Identification? ElementBody
		public Group getGroup() { return cGroup; }
		
		//'element'
		public Keyword getElementKeyword_0() { return cElementKeyword_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1() { return cIdentificationParserRuleCall_1; }
		
		//ElementBody
		public RuleCall getElementBodyParserRuleCall_2() { return cElementBodyParserRuleCall_2; }
	}
	public class ElementBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ElementBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cOwnedElementParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment ElementBody returns SysML::Element :
		//    ';' | '{' OwnedElement* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//';' | '{' OwnedElement* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' OwnedElement* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//OwnedElement*
		public RuleCall getOwnedElementParserRuleCall_1_1() { return cOwnedElementParserRuleCall_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class OwnedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOwnedRelationshipOwnedRelationshipParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedDocumentationParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOwnedRelationshipOwnedTextualRepresentationAnnotationParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cOwnedRelationshipOwnedAnnotatingFeatureAnnotationParserRuleCall_3_0 = (RuleCall)cOwnedRelationshipAssignment_3.eContents().get(0);
		
		//fragment OwnedElement returns SysML::Element :
		//      ownedRelationship += OwnedRelationship
		//    | ownedRelationship += OwnedDocumentation
		//    | ownedRelationship += OwnedTextualRepresentationAnnotation
		//    | ownedRelationship += OwnedAnnotatingFeatureAnnotation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ownedRelationship += OwnedRelationship
		//| ownedRelationship += OwnedDocumentation
		//| ownedRelationship += OwnedTextualRepresentationAnnotation
		//| ownedRelationship += OwnedAnnotatingFeatureAnnotation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ownedRelationship += OwnedRelationship
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//OwnedRelationship
		public RuleCall getOwnedRelationshipOwnedRelationshipParserRuleCall_0_0() { return cOwnedRelationshipOwnedRelationshipParserRuleCall_0_0; }
		
		//ownedRelationship += OwnedDocumentation
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//OwnedDocumentation
		public RuleCall getOwnedRelationshipOwnedDocumentationParserRuleCall_1_0() { return cOwnedRelationshipOwnedDocumentationParserRuleCall_1_0; }
		
		//ownedRelationship += OwnedTextualRepresentationAnnotation
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//OwnedTextualRepresentationAnnotation
		public RuleCall getOwnedRelationshipOwnedTextualRepresentationAnnotationParserRuleCall_2_0() { return cOwnedRelationshipOwnedTextualRepresentationAnnotationParserRuleCall_2_0; }
		
		//ownedRelationship += OwnedAnnotatingFeatureAnnotation
		public Assignment getOwnedRelationshipAssignment_3() { return cOwnedRelationshipAssignment_3; }
		
		//OwnedAnnotatingFeatureAnnotation
		public RuleCall getOwnedRelationshipOwnedAnnotatingFeatureAnnotationParserRuleCall_3_0() { return cOwnedRelationshipOwnedAnnotatingFeatureAnnotationParserRuleCall_3_0; }
	}
	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Relationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationshipKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cRelationshipRelatedElementsParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cRelationshipBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* Relationships */
		//Relationship returns SysML::Relationship :
		//    'relationship' Identification?
		//    RelationshipRelatedElements
		//    RelationshipBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'relationship' Identification?
		//RelationshipRelatedElements
		//RelationshipBody
		public Group getGroup() { return cGroup; }
		
		//'relationship'
		public Keyword getRelationshipKeyword_0() { return cRelationshipKeyword_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1() { return cIdentificationParserRuleCall_1; }
		
		//RelationshipRelatedElements
		public RuleCall getRelationshipRelatedElementsParserRuleCall_2() { return cRelationshipRelatedElementsParserRuleCall_2; }
		
		//RelationshipBody
		public RuleCall getRelationshipBodyParserRuleCall_3() { return cRelationshipBodyParserRuleCall_3; }
	}
	public class OwnedRelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedRelationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationshipKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cRelationshipTargetListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cRelationshipBodyParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//OwnedRelationship returns SysML::Relationship :
		//    'relationship' Identification?
		//    'to' RelationshipTargetList
		//    RelationshipBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'relationship' Identification?
		//'to' RelationshipTargetList
		//RelationshipBody
		public Group getGroup() { return cGroup; }
		
		//'relationship'
		public Keyword getRelationshipKeyword_0() { return cRelationshipKeyword_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1() { return cIdentificationParserRuleCall_1; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//RelationshipTargetList
		public RuleCall getRelationshipTargetListParserRuleCall_3() { return cRelationshipTargetListParserRuleCall_3; }
		
		//RelationshipBody
		public RuleCall getRelationshipBodyParserRuleCall_4() { return cRelationshipBodyParserRuleCall_4; }
	}
	public class RelationshipRelatedElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.RelationshipRelatedElements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFromKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cRelationshipSourceListParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cToKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final RuleCall cRelationshipTargetListParserRuleCall_0_2_1 = (RuleCall)cGroup_0_2.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cToKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cRelationshipTargetListParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//fragment RelationshipRelatedElements returns SysML::Relationship :
		//      'from' RelationshipSourceList ( 'to' RelationshipTargetList )?
		//    | 'to' RelationshipTargetList
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  'from' RelationshipSourceList ( 'to' RelationshipTargetList )?
		//| 'to' RelationshipTargetList
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'from' RelationshipSourceList ( 'to' RelationshipTargetList )?
		public Group getGroup_0() { return cGroup_0; }
		
		//'from'
		public Keyword getFromKeyword_0_0() { return cFromKeyword_0_0; }
		
		//RelationshipSourceList
		public RuleCall getRelationshipSourceListParserRuleCall_0_1() { return cRelationshipSourceListParserRuleCall_0_1; }
		
		//( 'to' RelationshipTargetList )?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'to'
		public Keyword getToKeyword_0_2_0() { return cToKeyword_0_2_0; }
		
		//RelationshipTargetList
		public RuleCall getRelationshipTargetListParserRuleCall_0_2_1() { return cRelationshipTargetListParserRuleCall_0_2_1; }
		
		//'to' RelationshipTargetList
		public Group getGroup_1() { return cGroup_1; }
		
		//'to'
		public Keyword getToKeyword_1_0() { return cToKeyword_1_0; }
		
		//RelationshipTargetList
		public RuleCall getRelationshipTargetListParserRuleCall_1_1() { return cRelationshipTargetListParserRuleCall_1_1; }
	}
	public class RelationshipSourceListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.RelationshipSourceList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationshipSourceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cRelationshipSourceParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//fragment RelationshipSourceList returns SysML::Relationship :
		//    RelationshipSource ( ',' RelationshipSource )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RelationshipSource ( ',' RelationshipSource )*
		public Group getGroup() { return cGroup; }
		
		//RelationshipSource
		public RuleCall getRelationshipSourceParserRuleCall_0() { return cRelationshipSourceParserRuleCall_0; }
		
		//( ',' RelationshipSource )*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//RelationshipSource
		public RuleCall getRelationshipSourceParserRuleCall_1_1() { return cRelationshipSourceParserRuleCall_1_1; }
	}
	public class RelationshipSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.RelationshipSource");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceElementCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceElementQualifiedNameParserRuleCall_0_1 = (RuleCall)cSourceElementCrossReference_0.eContents().get(1);
		
		//fragment RelationshipSource returns SysML::Relationship :
		//    source += [SysML::Element | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//source += [SysML::Element | QualifiedName]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[SysML::Element | QualifiedName]
		public CrossReference getSourceElementCrossReference_0() { return cSourceElementCrossReference_0; }
		
		//QualifiedName
		public RuleCall getSourceElementQualifiedNameParserRuleCall_0_1() { return cSourceElementQualifiedNameParserRuleCall_0_1; }
	}
	public class RelationshipTargetListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.RelationshipTargetList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationshipTargetParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cRelationshipTargetParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//fragment RelationshipTargetList returns SysML::Relationship :
		//    RelationshipTarget ( ',' RelationshipTarget )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RelationshipTarget ( ',' RelationshipTarget )*
		public Group getGroup() { return cGroup; }
		
		//RelationshipTarget
		public RuleCall getRelationshipTargetParserRuleCall_0() { return cRelationshipTargetParserRuleCall_0; }
		
		//( ',' RelationshipTarget )*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//RelationshipTarget
		public RuleCall getRelationshipTargetParserRuleCall_1_1() { return cRelationshipTargetParserRuleCall_1_1; }
	}
	public class RelationshipTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.RelationshipTarget");
		private final Assignment cTargetAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTargetElementCrossReference_0 = (CrossReference)cTargetAssignment.eContents().get(0);
		private final RuleCall cTargetElementQualifiedNameParserRuleCall_0_1 = (RuleCall)cTargetElementCrossReference_0.eContents().get(1);
		
		//fragment RelationshipTarget returns SysML::Relationship :
		//    target += [SysML::Element | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//target += [SysML::Element | QualifiedName]
		public Assignment getTargetAssignment() { return cTargetAssignment; }
		
		//[SysML::Element | QualifiedName]
		public CrossReference getTargetElementCrossReference_0() { return cTargetElementCrossReference_0; }
		
		//QualifiedName
		public RuleCall getTargetElementQualifiedNameParserRuleCall_0_1() { return cTargetElementQualifiedNameParserRuleCall_0_1; }
	}
	public class RelationshipBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.RelationshipBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cRelationshipOwnedElementParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment RelationshipBody returns SysML::Relationship :
		//    ';' | '{' RelationshipOwnedElement* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//';' | '{' RelationshipOwnedElement* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' RelationshipOwnedElement* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//RelationshipOwnedElement*
		public RuleCall getRelationshipOwnedElementParserRuleCall_1_1() { return cRelationshipOwnedElementParserRuleCall_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class RelationshipOwnedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.RelationshipOwnedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOwnedRelatedElementOwnedRelatedElementParserRuleCall_0_0 = (RuleCall)cOwnedRelatedElementAssignment_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedDocumentationParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOwnedRelationshipOwnedTextualRepresentationAnnotationParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		
		//fragment RelationshipOwnedElement returns SysML::Relationship:
		//      ownedRelatedElement += OwnedRelatedElement
		//    | ownedRelationship += OwnedDocumentation
		//    | ownedRelationship += OwnedTextualRepresentationAnnotation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ownedRelatedElement += OwnedRelatedElement
		//| ownedRelationship += OwnedDocumentation
		//| ownedRelationship += OwnedTextualRepresentationAnnotation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ownedRelatedElement += OwnedRelatedElement
		public Assignment getOwnedRelatedElementAssignment_0() { return cOwnedRelatedElementAssignment_0; }
		
		//OwnedRelatedElement
		public RuleCall getOwnedRelatedElementOwnedRelatedElementParserRuleCall_0_0() { return cOwnedRelatedElementOwnedRelatedElementParserRuleCall_0_0; }
		
		//ownedRelationship += OwnedDocumentation
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//OwnedDocumentation
		public RuleCall getOwnedRelationshipOwnedDocumentationParserRuleCall_1_0() { return cOwnedRelationshipOwnedDocumentationParserRuleCall_1_0; }
		
		//ownedRelationship += OwnedTextualRepresentationAnnotation
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//OwnedTextualRepresentationAnnotation
		public RuleCall getOwnedRelationshipOwnedTextualRepresentationAnnotationParserRuleCall_2_0() { return cOwnedRelationshipOwnedTextualRepresentationAnnotationParserRuleCall_2_0; }
	}
	public class OwnedRelatedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedRelatedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cElementKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cHumanIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cHumanIdNameParserRuleCall_0_1_0 = (RuleCall)cHumanIdAssignment_0_1.eContents().get(0);
		private final RuleCall cElementBodyParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cOwnedRelatedRelationshipParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OwnedRelatedElement returns SysML::Element :
		//      'element' ( humanId = Name )? ElementBody
		//    | OwnedRelatedRelationship
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  'element' ( humanId = Name )? ElementBody
		//| OwnedRelatedRelationship
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'element' ( humanId = Name )? ElementBody
		public Group getGroup_0() { return cGroup_0; }
		
		//'element'
		public Keyword getElementKeyword_0_0() { return cElementKeyword_0_0; }
		
		//( humanId = Name )?
		public Assignment getHumanIdAssignment_0_1() { return cHumanIdAssignment_0_1; }
		
		//Name
		public RuleCall getHumanIdNameParserRuleCall_0_1_0() { return cHumanIdNameParserRuleCall_0_1_0; }
		
		//ElementBody
		public RuleCall getElementBodyParserRuleCall_0_2() { return cElementBodyParserRuleCall_0_2; }
		
		//OwnedRelatedRelationship
		public RuleCall getOwnedRelatedRelationshipParserRuleCall_1() { return cOwnedRelatedRelationshipParserRuleCall_1; }
	}
	public class OwnedRelatedRelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedRelatedRelationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationshipKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHumanIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHumanIdNameParserRuleCall_1_0 = (RuleCall)cHumanIdAssignment_1.eContents().get(0);
		private final RuleCall cRelationshipBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//OwnedRelatedRelationship returns SysML::Relationship :
		//    'relationship' ( humanId = Name )? RelationshipBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'relationship' ( humanId = Name )? RelationshipBody
		public Group getGroup() { return cGroup; }
		
		//'relationship'
		public Keyword getRelationshipKeyword_0() { return cRelationshipKeyword_0; }
		
		//( humanId = Name )?
		public Assignment getHumanIdAssignment_1() { return cHumanIdAssignment_1; }
		
		//Name
		public RuleCall getHumanIdNameParserRuleCall_1_0() { return cHumanIdNameParserRuleCall_1_0; }
		
		//RelationshipBody
		public RuleCall getRelationshipBodyParserRuleCall_2() { return cRelationshipBodyParserRuleCall_2; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cCommentKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Keyword cAboutKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cOwnedRelationshipAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cOwnedRelationshipAnnotationParserRuleCall_0_0_3_0 = (RuleCall)cOwnedRelationshipAssignment_0_0_3.eContents().get(0);
		private final Group cGroup_0_0_4 = (Group)cGroup_0_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_0_4_0 = (Keyword)cGroup_0_0_4.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_0_4_1 = (Assignment)cGroup_0_0_4.eContents().get(1);
		private final RuleCall cOwnedRelationshipAnnotationParserRuleCall_0_0_4_1_0 = (RuleCall)cOwnedRelationshipAssignment_0_0_4_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cGroup_0_1.eContents().get(0);
		private final Keyword cCommentKeyword_0_1_0_0 = (Keyword)cGroup_0_1_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_1_0_1 = (RuleCall)cGroup_0_1_0.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipEmptyAnnotationParserRuleCall_0_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_0_1_1.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyREGULAR_COMMENTTerminalRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		///* ANNOTATIONS */
		///* Comments */
		//Comment returns SysML::Comment :
		//    ( 'comment' Identification? 'about' ownedRelationship += Annotation
		//      ( ',' ownedRelationship += Annotation )*
		//    | ( 'comment' Identification? )? ownedRelationship += EmptyAnnotation
		//    )
		//    body = REGULAR_COMMENT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'comment' Identification? 'about' ownedRelationship += Annotation
		//  ( ',' ownedRelationship += Annotation )*
		//| ( 'comment' Identification? )? ownedRelationship += EmptyAnnotation
		//)
		//body = REGULAR_COMMENT
		public Group getGroup() { return cGroup; }
		
		//( 'comment' Identification? 'about' ownedRelationship += Annotation
		//  ( ',' ownedRelationship += Annotation )*
		//| ( 'comment' Identification? )? ownedRelationship += EmptyAnnotation
		//)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'comment' Identification? 'about' ownedRelationship += Annotation
		//     ( ',' ownedRelationship += Annotation )*
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'comment'
		public Keyword getCommentKeyword_0_0_0() { return cCommentKeyword_0_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_0_1() { return cIdentificationParserRuleCall_0_0_1; }
		
		//'about'
		public Keyword getAboutKeyword_0_0_2() { return cAboutKeyword_0_0_2; }
		
		//ownedRelationship += Annotation
		public Assignment getOwnedRelationshipAssignment_0_0_3() { return cOwnedRelationshipAssignment_0_0_3; }
		
		//Annotation
		public RuleCall getOwnedRelationshipAnnotationParserRuleCall_0_0_3_0() { return cOwnedRelationshipAnnotationParserRuleCall_0_0_3_0; }
		
		//( ',' ownedRelationship += Annotation )*
		public Group getGroup_0_0_4() { return cGroup_0_0_4; }
		
		//','
		public Keyword getCommaKeyword_0_0_4_0() { return cCommaKeyword_0_0_4_0; }
		
		//ownedRelationship += Annotation
		public Assignment getOwnedRelationshipAssignment_0_0_4_1() { return cOwnedRelationshipAssignment_0_0_4_1; }
		
		//Annotation
		public RuleCall getOwnedRelationshipAnnotationParserRuleCall_0_0_4_1_0() { return cOwnedRelationshipAnnotationParserRuleCall_0_0_4_1_0; }
		
		//( 'comment' Identification? )? ownedRelationship += EmptyAnnotation
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//( 'comment' Identification? )?
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }
		
		//'comment'
		public Keyword getCommentKeyword_0_1_0_0() { return cCommentKeyword_0_1_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_1_0_1() { return cIdentificationParserRuleCall_0_1_0_1; }
		
		//ownedRelationship += EmptyAnnotation
		public Assignment getOwnedRelationshipAssignment_0_1_1() { return cOwnedRelationshipAssignment_0_1_1; }
		
		//EmptyAnnotation
		public RuleCall getOwnedRelationshipEmptyAnnotationParserRuleCall_0_1_1_0() { return cOwnedRelationshipEmptyAnnotationParserRuleCall_0_1_1_0; }
		
		//body = REGULAR_COMMENT
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//REGULAR_COMMENT
		public RuleCall getBodyREGULAR_COMMENTTerminalRuleCall_1_0() { return cBodyREGULAR_COMMENTTerminalRuleCall_1_0; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Annotation");
		private final Assignment cAnnotatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cAnnotatedElementElementCrossReference_0 = (CrossReference)cAnnotatedElementAssignment.eContents().get(0);
		private final RuleCall cAnnotatedElementElementQualifiedNameParserRuleCall_0_1 = (RuleCall)cAnnotatedElementElementCrossReference_0.eContents().get(1);
		
		//Annotation returns SysML::Annotation :
		//    annotatedElement = [SysML::Element|QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//annotatedElement = [SysML::Element|QualifiedName]
		public Assignment getAnnotatedElementAssignment() { return cAnnotatedElementAssignment; }
		
		//[SysML::Element|QualifiedName]
		public CrossReference getAnnotatedElementElementCrossReference_0() { return cAnnotatedElementElementCrossReference_0; }
		
		//QualifiedName
		public RuleCall getAnnotatedElementElementQualifiedNameParserRuleCall_0_1() { return cAnnotatedElementElementQualifiedNameParserRuleCall_0_1; }
	}
	public class EmptyAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.EmptyAnnotation");
		private final Action cAnnotationAction = (Action)rule.eContents().get(1);
		
		//EmptyAnnotation returns SysML::Annotation :
		//    {SysML::Annotation}
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::Annotation}
		public Action getAnnotationAction() { return cAnnotationAction; }
	}
	public class OwnedDocumentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedDocumentation");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementDocumentationCommentParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		///* Documentation */
		//OwnedDocumentation returns SysML::Documentation :
		//    ownedRelatedElement += DocumentationComment // documentingComment = DocumentationComment
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += DocumentationComment
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//DocumentationComment
		public RuleCall getOwnedRelatedElementDocumentationCommentParserRuleCall_0() { return cOwnedRelatedElementDocumentationCommentParserRuleCall_0; }
	}
	public class DocumentationCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.DocumentationComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDocKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIdKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cHumanIdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cHumanIdNameParserRuleCall_1_1_0 = (RuleCall)cHumanIdAssignment_1_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyREGULAR_COMMENTTerminalRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//DocumentationComment returns SysML::Comment :
		//    'doc' ( 'id' humanId = Name )? body = REGULAR_COMMENT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'doc' ( 'id' humanId = Name )? body = REGULAR_COMMENT
		public Group getGroup() { return cGroup; }
		
		//'doc'
		public Keyword getDocKeyword_0() { return cDocKeyword_0; }
		
		//( 'id' humanId = Name )?
		public Group getGroup_1() { return cGroup_1; }
		
		//'id'
		public Keyword getIdKeyword_1_0() { return cIdKeyword_1_0; }
		
		//humanId = Name
		public Assignment getHumanIdAssignment_1_1() { return cHumanIdAssignment_1_1; }
		
		//Name
		public RuleCall getHumanIdNameParserRuleCall_1_1_0() { return cHumanIdNameParserRuleCall_1_1_0; }
		
		//body = REGULAR_COMMENT
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//REGULAR_COMMENT
		public RuleCall getBodyREGULAR_COMMENTTerminalRuleCall_2_0() { return cBodyREGULAR_COMMENTTerminalRuleCall_2_0; }
	}
	public class PrefixDocumentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PrefixDocumentation");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementPrefixDocumentationCommentParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//PrefixDocumentation returns SysML::Annotation :
		//    ownedRelatedElement += PrefixDocumentationComment
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += PrefixDocumentationComment
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//PrefixDocumentationComment
		public RuleCall getOwnedRelatedElementPrefixDocumentationCommentParserRuleCall_0() { return cOwnedRelatedElementPrefixDocumentationCommentParserRuleCall_0; }
	}
	public class PrefixDocumentationCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PrefixDocumentationComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cDocKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cIdKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cHumanIdAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cHumanIdNameParserRuleCall_0_1_1_0 = (RuleCall)cHumanIdAssignment_0_1_1.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyDOCUMENTATION_COMMENTTerminalRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//PrefixDocumentationComment returns SysML::Comment :
		//    ( 'doc' ( 'id' humanId = Name )? )? body = DOCUMENTATION_COMMENT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'doc' ( 'id' humanId = Name )? )? body = DOCUMENTATION_COMMENT
		public Group getGroup() { return cGroup; }
		
		//( 'doc' ( 'id' humanId = Name )? )?
		public Group getGroup_0() { return cGroup_0; }
		
		//'doc'
		public Keyword getDocKeyword_0_0() { return cDocKeyword_0_0; }
		
		//( 'id' humanId = Name )?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'id'
		public Keyword getIdKeyword_0_1_0() { return cIdKeyword_0_1_0; }
		
		//humanId = Name
		public Assignment getHumanIdAssignment_0_1_1() { return cHumanIdAssignment_0_1_1; }
		
		//Name
		public RuleCall getHumanIdNameParserRuleCall_0_1_1_0() { return cHumanIdNameParserRuleCall_0_1_1_0; }
		
		//body = DOCUMENTATION_COMMENT
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//DOCUMENTATION_COMMENT
		public RuleCall getBodyDOCUMENTATION_COMMENTTerminalRuleCall_1_0() { return cBodyDOCUMENTATION_COMMENTTerminalRuleCall_1_0; }
	}
	public class OwnedTextualRepresentationAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedTextualRepresentationAnnotation");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedTextualRepresentationParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		///* Textual Representation */
		//OwnedTextualRepresentationAnnotation returns SysML::Annotation :
		//    ownedRelatedElement += OwnedTextualRepresentation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += OwnedTextualRepresentation
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//OwnedTextualRepresentation
		public RuleCall getOwnedRelatedElementOwnedTextualRepresentationParserRuleCall_0() { return cOwnedRelatedElementOwnedTextualRepresentationParserRuleCall_0; }
	}
	public class OwnedTextualRepresentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedTextualRepresentation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cRepKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cHumanIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cHumanIdNameParserRuleCall_0_1_0 = (RuleCall)cHumanIdAssignment_0_1.eContents().get(0);
		private final Keyword cLanguageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLanguageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLanguageSTRING_VALUETerminalRuleCall_2_0 = (RuleCall)cLanguageAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyREGULAR_COMMENTTerminalRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOwnedRelationshipEmptyAnnotationParserRuleCall_4_0 = (RuleCall)cOwnedRelationshipAssignment_4.eContents().get(0);
		
		//OwnedTextualRepresentation returns SysML::TextualRepresentation :
		//    ( 'rep' ( humanId = Name )? )?
		//    'language' language = STRING_VALUE body = REGULAR_COMMENT
		//    ownedRelationship += EmptyAnnotation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'rep' ( humanId = Name )? )?
		//'language' language = STRING_VALUE body = REGULAR_COMMENT
		//ownedRelationship += EmptyAnnotation
		public Group getGroup() { return cGroup; }
		
		//( 'rep' ( humanId = Name )? )?
		public Group getGroup_0() { return cGroup_0; }
		
		//'rep'
		public Keyword getRepKeyword_0_0() { return cRepKeyword_0_0; }
		
		//( humanId = Name )?
		public Assignment getHumanIdAssignment_0_1() { return cHumanIdAssignment_0_1; }
		
		//Name
		public RuleCall getHumanIdNameParserRuleCall_0_1_0() { return cHumanIdNameParserRuleCall_0_1_0; }
		
		//'language'
		public Keyword getLanguageKeyword_1() { return cLanguageKeyword_1; }
		
		//language = STRING_VALUE
		public Assignment getLanguageAssignment_2() { return cLanguageAssignment_2; }
		
		//STRING_VALUE
		public RuleCall getLanguageSTRING_VALUETerminalRuleCall_2_0() { return cLanguageSTRING_VALUETerminalRuleCall_2_0; }
		
		//body = REGULAR_COMMENT
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//REGULAR_COMMENT
		public RuleCall getBodyREGULAR_COMMENTTerminalRuleCall_3_0() { return cBodyREGULAR_COMMENTTerminalRuleCall_3_0; }
		
		//ownedRelationship += EmptyAnnotation
		public Assignment getOwnedRelationshipAssignment_4() { return cOwnedRelationshipAssignment_4; }
		
		//EmptyAnnotation
		public RuleCall getOwnedRelationshipEmptyAnnotationParserRuleCall_4_0() { return cOwnedRelationshipEmptyAnnotationParserRuleCall_4_0; }
	}
	public class TextualRepresentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TextualRepresentation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cRepKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Keyword cAboutKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cOwnedRelationshipAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cOwnedRelationshipAnnotationParserRuleCall_0_0_3_0 = (RuleCall)cOwnedRelationshipAssignment_0_0_3.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cGroup_0_1.eContents().get(0);
		private final Keyword cRepKeyword_0_1_0_0 = (Keyword)cGroup_0_1_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_1_0_1 = (RuleCall)cGroup_0_1_0.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipEmptyAnnotationParserRuleCall_0_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_0_1_1.eContents().get(0);
		private final Keyword cLanguageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLanguageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLanguageSTRING_VALUETerminalRuleCall_2_0 = (RuleCall)cLanguageAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyREGULAR_COMMENTTerminalRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//TextualRepresentation returns SysML::TextualRepresentation :
		//    ( 'rep' Identification? 'about' ownedRelationship += Annotation
		//    | ( 'rep' Identification? )? ownedRelationship += EmptyAnnotation
		//    )
		//    'language' language = STRING_VALUE
		//    body = REGULAR_COMMENT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'rep' Identification? 'about' ownedRelationship += Annotation
		//| ( 'rep' Identification? )? ownedRelationship += EmptyAnnotation
		//)
		//'language' language = STRING_VALUE
		//body = REGULAR_COMMENT
		public Group getGroup() { return cGroup; }
		
		//( 'rep' Identification? 'about' ownedRelationship += Annotation
		//| ( 'rep' Identification? )? ownedRelationship += EmptyAnnotation
		//)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'rep' Identification? 'about' ownedRelationship += Annotation
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'rep'
		public Keyword getRepKeyword_0_0_0() { return cRepKeyword_0_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_0_1() { return cIdentificationParserRuleCall_0_0_1; }
		
		//'about'
		public Keyword getAboutKeyword_0_0_2() { return cAboutKeyword_0_0_2; }
		
		//ownedRelationship += Annotation
		public Assignment getOwnedRelationshipAssignment_0_0_3() { return cOwnedRelationshipAssignment_0_0_3; }
		
		//Annotation
		public RuleCall getOwnedRelationshipAnnotationParserRuleCall_0_0_3_0() { return cOwnedRelationshipAnnotationParserRuleCall_0_0_3_0; }
		
		//( 'rep' Identification? )? ownedRelationship += EmptyAnnotation
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//( 'rep' Identification? )?
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }
		
		//'rep'
		public Keyword getRepKeyword_0_1_0_0() { return cRepKeyword_0_1_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_1_0_1() { return cIdentificationParserRuleCall_0_1_0_1; }
		
		//ownedRelationship += EmptyAnnotation
		public Assignment getOwnedRelationshipAssignment_0_1_1() { return cOwnedRelationshipAssignment_0_1_1; }
		
		//EmptyAnnotation
		public RuleCall getOwnedRelationshipEmptyAnnotationParserRuleCall_0_1_1_0() { return cOwnedRelationshipEmptyAnnotationParserRuleCall_0_1_1_0; }
		
		//'language'
		public Keyword getLanguageKeyword_1() { return cLanguageKeyword_1; }
		
		//language = STRING_VALUE
		public Assignment getLanguageAssignment_2() { return cLanguageAssignment_2; }
		
		//STRING_VALUE
		public RuleCall getLanguageSTRING_VALUETerminalRuleCall_2_0() { return cLanguageSTRING_VALUETerminalRuleCall_2_0; }
		
		//body = REGULAR_COMMENT
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//REGULAR_COMMENT
		public RuleCall getBodyREGULAR_COMMENTTerminalRuleCall_3_0() { return cBodyREGULAR_COMMENTTerminalRuleCall_3_0; }
	}
	public class OwnedAnnotatingFeatureAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedAnnotatingFeatureAnnotation");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedAnnotatingFeatureParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		///* Annotating Features */
		//OwnedAnnotatingFeatureAnnotation returns SysML::Annotation :
		//    ownedRelatedElement += OwnedAnnotatingFeature
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += OwnedAnnotatingFeature
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//OwnedAnnotatingFeature
		public RuleCall getOwnedRelatedElementOwnedAnnotatingFeatureParserRuleCall_0() { return cOwnedRelatedElementOwnedAnnotatingFeatureParserRuleCall_0; }
	}
	public class OwnedAnnotatingFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedAnnotatingFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetadataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cHumanIdAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cHumanIdNameParserRuleCall_1_0_0 = (RuleCall)cHumanIdAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cColonKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Keyword cTypedKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Keyword cByKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelationshipMetadataTypingParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedRelationshipEmptyAnnotationParserRuleCall_3_0 = (RuleCall)cOwnedRelationshipAssignment_3.eContents().get(0);
		private final RuleCall cAnnotatingFeatureBodyParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//OwnedAnnotatingFeature returns SysML::AnnotatingFeature :
		//    'metadata' ( humanId = Name ( ':' | 'typed' 'by' ) )? ownedRelationship += MetadataTyping
		//    ownedRelationship += EmptyAnnotation
		//    AnnotatingFeatureBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'metadata' ( humanId = Name ( ':' | 'typed' 'by' ) )? ownedRelationship += MetadataTyping
		//ownedRelationship += EmptyAnnotation
		//AnnotatingFeatureBody
		public Group getGroup() { return cGroup; }
		
		//'metadata'
		public Keyword getMetadataKeyword_0() { return cMetadataKeyword_0; }
		
		//( humanId = Name ( ':' | 'typed' 'by' ) )?
		public Group getGroup_1() { return cGroup_1; }
		
		//humanId = Name
		public Assignment getHumanIdAssignment_1_0() { return cHumanIdAssignment_1_0; }
		
		//Name
		public RuleCall getHumanIdNameParserRuleCall_1_0_0() { return cHumanIdNameParserRuleCall_1_0_0; }
		
		//( ':' | 'typed' 'by' )
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//':'
		public Keyword getColonKeyword_1_1_0() { return cColonKeyword_1_1_0; }
		
		//'typed' 'by'
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//'typed'
		public Keyword getTypedKeyword_1_1_1_0() { return cTypedKeyword_1_1_1_0; }
		
		//'by'
		public Keyword getByKeyword_1_1_1_1() { return cByKeyword_1_1_1_1; }
		
		//ownedRelationship += MetadataTyping
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//MetadataTyping
		public RuleCall getOwnedRelationshipMetadataTypingParserRuleCall_2_0() { return cOwnedRelationshipMetadataTypingParserRuleCall_2_0; }
		
		//ownedRelationship += EmptyAnnotation
		public Assignment getOwnedRelationshipAssignment_3() { return cOwnedRelationshipAssignment_3; }
		
		//EmptyAnnotation
		public RuleCall getOwnedRelationshipEmptyAnnotationParserRuleCall_3_0() { return cOwnedRelationshipEmptyAnnotationParserRuleCall_3_0; }
		
		//AnnotatingFeatureBody
		public RuleCall getAnnotatingFeatureBodyParserRuleCall_4() { return cAnnotatingFeatureBodyParserRuleCall_4; }
	}
	public class AnnotatingFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.AnnotatingFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cMetadataKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cAnnotatingFeatureDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cAboutKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cOwnedRelationshipAnnotationParserRuleCall_2_0_1_0 = (RuleCall)cOwnedRelationshipAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cCommaKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cOwnedRelationshipAnnotationParserRuleCall_2_0_2_1_0 = (RuleCall)cOwnedRelationshipAssignment_2_0_2_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cOwnedRelationshipEmptyAnnotationParserRuleCall_2_1_0 = (RuleCall)cOwnedRelationshipAssignment_2_1.eContents().get(0);
		private final RuleCall cAnnotatingFeatureBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//AnnotatingFeature returns SysML::AnnotatingFeature :
		//    ( '@' | 'metadata' ) AnnotatingFeatureDeclaration
		//    ( 'about' ownedRelationship += Annotation ( ',' ownedRelationship += Annotation )*
		//    | ownedRelationship += EmptyAnnotation
		//    )
		//    AnnotatingFeatureBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( '@' | 'metadata' ) AnnotatingFeatureDeclaration
		//( 'about' ownedRelationship += Annotation ( ',' ownedRelationship += Annotation )*
		//| ownedRelationship += EmptyAnnotation
		//)
		//AnnotatingFeatureBody
		public Group getGroup() { return cGroup; }
		
		//( '@' | 'metadata' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0_0() { return cCommercialAtKeyword_0_0; }
		
		//'metadata'
		public Keyword getMetadataKeyword_0_1() { return cMetadataKeyword_0_1; }
		
		//AnnotatingFeatureDeclaration
		public RuleCall getAnnotatingFeatureDeclarationParserRuleCall_1() { return cAnnotatingFeatureDeclarationParserRuleCall_1; }
		
		//( 'about' ownedRelationship += Annotation ( ',' ownedRelationship += Annotation )*
		//| ownedRelationship += EmptyAnnotation
		//)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'about' ownedRelationship += Annotation ( ',' ownedRelationship += Annotation )*
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'about'
		public Keyword getAboutKeyword_2_0_0() { return cAboutKeyword_2_0_0; }
		
		//ownedRelationship += Annotation
		public Assignment getOwnedRelationshipAssignment_2_0_1() { return cOwnedRelationshipAssignment_2_0_1; }
		
		//Annotation
		public RuleCall getOwnedRelationshipAnnotationParserRuleCall_2_0_1_0() { return cOwnedRelationshipAnnotationParserRuleCall_2_0_1_0; }
		
		//( ',' ownedRelationship += Annotation )*
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }
		
		//','
		public Keyword getCommaKeyword_2_0_2_0() { return cCommaKeyword_2_0_2_0; }
		
		//ownedRelationship += Annotation
		public Assignment getOwnedRelationshipAssignment_2_0_2_1() { return cOwnedRelationshipAssignment_2_0_2_1; }
		
		//Annotation
		public RuleCall getOwnedRelationshipAnnotationParserRuleCall_2_0_2_1_0() { return cOwnedRelationshipAnnotationParserRuleCall_2_0_2_1_0; }
		
		//ownedRelationship += EmptyAnnotation
		public Assignment getOwnedRelationshipAssignment_2_1() { return cOwnedRelationshipAssignment_2_1; }
		
		//EmptyAnnotation
		public RuleCall getOwnedRelationshipEmptyAnnotationParserRuleCall_2_1_0() { return cOwnedRelationshipEmptyAnnotationParserRuleCall_2_1_0; }
		
		//AnnotatingFeatureBody
		public RuleCall getAnnotatingFeatureBodyParserRuleCall_3() { return cAnnotatingFeatureBodyParserRuleCall_3; }
	}
	public class AnnotatingFeatureDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.AnnotatingFeatureDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cColonKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cAlternatives_0_1.eContents().get(1);
		private final Keyword cTypedKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Keyword cByKeyword_0_1_1_1 = (Keyword)cGroup_0_1_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipMetadataTypingParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		//fragment AnnotatingFeatureDeclaration returns SysML::AnnotatingFeature :
		//    ( Identification ( ':' | 'typed' 'by' ) )? ownedRelationship += MetadataTyping
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( Identification ( ':' | 'typed' 'by' ) )? ownedRelationship += MetadataTyping
		public Group getGroup() { return cGroup; }
		
		//( Identification ( ':' | 'typed' 'by' ) )?
		public Group getGroup_0() { return cGroup_0; }
		
		//Identification
		public RuleCall getIdentificationParserRuleCall_0_0() { return cIdentificationParserRuleCall_0_0; }
		
		//( ':' | 'typed' 'by' )
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//':'
		public Keyword getColonKeyword_0_1_0() { return cColonKeyword_0_1_0; }
		
		//'typed' 'by'
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//'typed'
		public Keyword getTypedKeyword_0_1_1_0() { return cTypedKeyword_0_1_1_0; }
		
		//'by'
		public Keyword getByKeyword_0_1_1_1() { return cByKeyword_0_1_1_1; }
		
		//ownedRelationship += MetadataTyping
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//MetadataTyping
		public RuleCall getOwnedRelationshipMetadataTypingParserRuleCall_1_0() { return cOwnedRelationshipMetadataTypingParserRuleCall_1_0; }
	}
	public class MetadataTypingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MetadataTyping");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeDataTypeCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeDataTypeQualifiedNameParserRuleCall_0_1 = (RuleCall)cTypeDataTypeCrossReference_0.eContents().get(1);
		
		//MetadataTyping returns SysML::FeatureTyping :
		//    type = [SysML::DataType | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = [SysML::DataType | QualifiedName]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[SysML::DataType | QualifiedName]
		public CrossReference getTypeDataTypeCrossReference_0() { return cTypeDataTypeCrossReference_0; }
		
		//QualifiedName
		public RuleCall getTypeDataTypeQualifiedNameParserRuleCall_0_1() { return cTypeDataTypeQualifiedNameParserRuleCall_0_1; }
	}
	public class AnnotatingFeatureBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.AnnotatingFeatureBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipMetadataFeatureMemberParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment AnnotatingFeatureBody returns SysML::AnnotatingFeature :
		//    ';' | '{' ( ownedRelationship += MetadataFeatureMember )* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//';' | '{' ( ownedRelationship += MetadataFeatureMember )* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' ( ownedRelationship += MetadataFeatureMember )* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//( ownedRelationship += MetadataFeatureMember )*
		public Assignment getOwnedRelationshipAssignment_1_1() { return cOwnedRelationshipAssignment_1_1; }
		
		//MetadataFeatureMember
		public RuleCall getOwnedRelationshipMetadataFeatureMemberParserRuleCall_1_1_0() { return cOwnedRelationshipMetadataFeatureMemberParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class MetadataFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MetadataFeatureMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementMetadataFeatureParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//MetadataFeatureMember returns SysML::FeatureMembership :
		//    ownedRelatedElement += MetadataFeature // ownedMemberFeature = MetadataFeature
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += MetadataFeature
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//MetadataFeature
		public RuleCall getOwnedRelatedElementMetadataFeatureParserRuleCall_0() { return cOwnedRelatedElementMetadataFeatureParserRuleCall_0; }
	}
	public class MetadataFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MetadataFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cColonGreaterThanSignGreaterThanSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cRedefinesKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelationshipOwnedRedefinitionParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOwnedRelationshipAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOwnedRelationshipMetadataFeatureValueParserRuleCall_4_0 = (RuleCall)cOwnedRelationshipAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MetadataFeature returns SysML::MetadataFeature :
		//    'feature'? ( ':>>' | 'redefines')? ownedRelationship += OwnedRedefinition
		//    '=' ownedRelationship += MetadataFeatureValue ';' // metadataFeatureValue = MetadataFeatureValue ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'feature'? ( ':>>' | 'redefines')? ownedRelationship += OwnedRedefinition
		//'=' ownedRelationship += MetadataFeatureValue ';'
		public Group getGroup() { return cGroup; }
		
		//'feature'?
		public Keyword getFeatureKeyword_0() { return cFeatureKeyword_0; }
		
		//( ':>>' | 'redefines')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//':>>'
		public Keyword getColonGreaterThanSignGreaterThanSignKeyword_1_0() { return cColonGreaterThanSignGreaterThanSignKeyword_1_0; }
		
		//'redefines'
		public Keyword getRedefinesKeyword_1_1() { return cRedefinesKeyword_1_1; }
		
		//ownedRelationship += OwnedRedefinition
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//OwnedRedefinition
		public RuleCall getOwnedRelationshipOwnedRedefinitionParserRuleCall_2_0() { return cOwnedRelationshipOwnedRedefinitionParserRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//ownedRelationship += MetadataFeatureValue
		public Assignment getOwnedRelationshipAssignment_4() { return cOwnedRelationshipAssignment_4; }
		
		//MetadataFeatureValue
		public RuleCall getOwnedRelationshipMetadataFeatureValueParserRuleCall_4_0() { return cOwnedRelationshipMetadataFeatureValueParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class MetadataFeatureValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MetadataFeatureValue");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedExpressionParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//MetadataFeatureValue returns SysML::MetadataFeatureValue :
		//    ownedRelatedElement += OwnedExpression // metadataValue = OwnedExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += OwnedExpression
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//OwnedExpression
		public RuleCall getOwnedRelatedElementOwnedExpressionParserRuleCall_0() { return cOwnedRelatedElementOwnedExpressionParserRuleCall_0; }
	}
	public class NamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Namespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNamespaceDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cNamespaceBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		///* NAMESPACES */
		//Namespace returns SysML::Namespace :
		//    NamespaceDeclaration NamespaceBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NamespaceDeclaration NamespaceBody
		public Group getGroup() { return cGroup; }
		
		//NamespaceDeclaration
		public RuleCall getNamespaceDeclarationParserRuleCall_0() { return cNamespaceDeclarationParserRuleCall_0; }
		
		//NamespaceBody
		public RuleCall getNamespaceBodyParserRuleCall_1() { return cNamespaceBodyParserRuleCall_1; }
	}
	public class NamespaceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NamespaceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fragment NamespaceDeclaration returns SysML::Namespace :
		//    'namespace' Identification?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'namespace' Identification?
		public Group getGroup() { return cGroup; }
		
		//'namespace'
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1() { return cIdentificationParserRuleCall_1; }
	}
	public class NamespaceBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NamespaceBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cOwnedRelationshipOwnedDocumentationParserRuleCall_1_1_0_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipNamespaceMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cOwnedRelationshipAliasMemberParserRuleCall_1_1_2_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cOwnedRelationshipImportParserRuleCall_1_1_3_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment NamespaceBody returns SysML::Namespace :
		//      ';'
		//    | '{' ( // Note: PackageBodyElement is expanded here to avoid
		//            // infinite loops in the incremental parser.
		//            ownedRelationship += OwnedDocumentation
		//          | ownedRelationship += NamespaceMember
		//          | ownedRelationship += AliasMember
		//          | ownedRelationship += Import )*
		//      '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ';'
		//| '{' ( // Note: PackageBodyElement is expanded here to avoid
		//        // infinite loops in the incremental parser.
		//        ownedRelationship += OwnedDocumentation
		//      | ownedRelationship += NamespaceMember
		//      | ownedRelationship += AliasMember
		//      | ownedRelationship += Import )*
		//  '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' ( // Note: PackageBodyElement is expanded here to avoid
		//           // infinite loops in the incremental parser.
		//           ownedRelationship += OwnedDocumentation
		//         | ownedRelationship += NamespaceMember
		//         | ownedRelationship += AliasMember
		//         | ownedRelationship += Import )*
		//     '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//( // Note: PackageBodyElement is expanded here to avoid
		//           // infinite loops in the incremental parser.
		//           ownedRelationship += OwnedDocumentation
		//         | ownedRelationship += NamespaceMember
		//         | ownedRelationship += AliasMember
		//         | ownedRelationship += Import )*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//// Note: PackageBodyElement is expanded here to avoid
		//           // infinite loops in the incremental parser.
		//           ownedRelationship += OwnedDocumentation
		public Assignment getOwnedRelationshipAssignment_1_1_0() { return cOwnedRelationshipAssignment_1_1_0; }
		
		//OwnedDocumentation
		public RuleCall getOwnedRelationshipOwnedDocumentationParserRuleCall_1_1_0_0() { return cOwnedRelationshipOwnedDocumentationParserRuleCall_1_1_0_0; }
		
		//ownedRelationship += NamespaceMember
		public Assignment getOwnedRelationshipAssignment_1_1_1() { return cOwnedRelationshipAssignment_1_1_1; }
		
		//NamespaceMember
		public RuleCall getOwnedRelationshipNamespaceMemberParserRuleCall_1_1_1_0() { return cOwnedRelationshipNamespaceMemberParserRuleCall_1_1_1_0; }
		
		//ownedRelationship += AliasMember
		public Assignment getOwnedRelationshipAssignment_1_1_2() { return cOwnedRelationshipAssignment_1_1_2; }
		
		//AliasMember
		public RuleCall getOwnedRelationshipAliasMemberParserRuleCall_1_1_2_0() { return cOwnedRelationshipAliasMemberParserRuleCall_1_1_2_0; }
		
		//ownedRelationship += Import
		public Assignment getOwnedRelationshipAssignment_1_1_3() { return cOwnedRelationshipAssignment_1_1_3; }
		
		//Import
		public RuleCall getOwnedRelationshipImportParserRuleCall_1_1_3_0() { return cOwnedRelationshipImportParserRuleCall_1_1_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class NamespaceBodyElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NamespaceBodyElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOwnedRelationshipOwnedDocumentationParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOwnedRelationshipNamespaceMemberParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOwnedRelationshipAliasMemberParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cOwnedRelationshipImportParserRuleCall_3_0 = (RuleCall)cOwnedRelationshipAssignment_3.eContents().get(0);
		
		///* Namespace Bodies */
		//fragment NamespaceBodyElement returns SysML::Namespace :
		//      ownedRelationship += OwnedDocumentation
		//    | ownedRelationship += NamespaceMember
		//    | ownedRelationship += AliasMember
		//    | ownedRelationship += Import
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ownedRelationship += OwnedDocumentation
		//| ownedRelationship += NamespaceMember
		//| ownedRelationship += AliasMember
		//| ownedRelationship += Import
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ownedRelationship += OwnedDocumentation
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//OwnedDocumentation
		public RuleCall getOwnedRelationshipOwnedDocumentationParserRuleCall_0_0() { return cOwnedRelationshipOwnedDocumentationParserRuleCall_0_0; }
		
		//ownedRelationship += NamespaceMember
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//NamespaceMember
		public RuleCall getOwnedRelationshipNamespaceMemberParserRuleCall_1_0() { return cOwnedRelationshipNamespaceMemberParserRuleCall_1_0; }
		
		//ownedRelationship += AliasMember
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//AliasMember
		public RuleCall getOwnedRelationshipAliasMemberParserRuleCall_2_0() { return cOwnedRelationshipAliasMemberParserRuleCall_2_0; }
		
		//ownedRelationship += Import
		public Assignment getOwnedRelationshipAssignment_3() { return cOwnedRelationshipAssignment_3; }
		
		//Import
		public RuleCall getOwnedRelationshipImportParserRuleCall_3_0() { return cOwnedRelationshipImportParserRuleCall_3_0; }
	}
	public class MemberPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MemberPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationshipPrefixDocumentationParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityIndicatorEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		
		//fragment MemberPrefix returns SysML::Membership :
		//    ( ownedRelationship += PrefixDocumentation )*
		//    ( visibility = VisibilityIndicator )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( ownedRelationship += PrefixDocumentation )*
		//( visibility = VisibilityIndicator )?
		public Group getGroup() { return cGroup; }
		
		//( ownedRelationship += PrefixDocumentation )*
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//PrefixDocumentation
		public RuleCall getOwnedRelationshipPrefixDocumentationParserRuleCall_0_0() { return cOwnedRelationshipPrefixDocumentationParserRuleCall_0_0; }
		
		//( visibility = VisibilityIndicator )?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//VisibilityIndicator
		public RuleCall getVisibilityVisibilityIndicatorEnumRuleCall_1_0() { return cVisibilityVisibilityIndicatorEnumRuleCall_1_0; }
	}
	public class NamespaceMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NamespaceMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cOwnedRelatedElementNonFeatureElementParserRuleCall_1_0_0 = (RuleCall)cOwnedRelatedElementAssignment_1_0.eContents().get(0);
		private final Assignment cOwnedRelatedElementAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cOwnedRelatedElementFeatureElementParserRuleCall_1_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1_1.eContents().get(0);
		
		//NamespaceMember returns SysML::Membership :
		//    MemberPrefix
		//    ( ownedRelatedElement += NonFeatureElement // ownedMemberElement = NonFeatureElement
		//    | ownedRelatedElement += FeatureElement // ownedMemberElement = NonFeatureElement
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MemberPrefix
		//( ownedRelatedElement += NonFeatureElement // ownedMemberElement = NonFeatureElement
		//| ownedRelatedElement += FeatureElement // ownedMemberElement = NonFeatureElement
		//)
		public Group getGroup() { return cGroup; }
		
		//MemberPrefix
		public RuleCall getMemberPrefixParserRuleCall_0() { return cMemberPrefixParserRuleCall_0; }
		
		//( ownedRelatedElement += NonFeatureElement // ownedMemberElement = NonFeatureElement
		//| ownedRelatedElement += FeatureElement // ownedMemberElement = NonFeatureElement
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ownedRelatedElement += NonFeatureElement
		public Assignment getOwnedRelatedElementAssignment_1_0() { return cOwnedRelatedElementAssignment_1_0; }
		
		//NonFeatureElement
		public RuleCall getOwnedRelatedElementNonFeatureElementParserRuleCall_1_0_0() { return cOwnedRelatedElementNonFeatureElementParserRuleCall_1_0_0; }
		
		//ownedRelatedElement += FeatureElement
		public Assignment getOwnedRelatedElementAssignment_1_1() { return cOwnedRelatedElementAssignment_1_1; }
		
		//FeatureElement
		public RuleCall getOwnedRelatedElementFeatureElementParserRuleCall_1_1_0() { return cOwnedRelatedElementFeatureElementParserRuleCall_1_1_0; }
	}
	public class AliasMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.AliasMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cAliasKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMemberNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMemberNameNameParserRuleCall_2_0 = (RuleCall)cMemberNameAssignment_2.eContents().get(0);
		private final Keyword cForKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMemberElementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cMemberElementElementCrossReference_4_0 = (CrossReference)cMemberElementAssignment_4.eContents().get(0);
		private final RuleCall cMemberElementElementQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cMemberElementElementCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AliasMember returns SysML::Membership :
		//    MemberPrefix
		//    'alias' memberName = Name 'for' memberElement = [SysML::Element|QualifiedName] ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MemberPrefix
		//'alias' memberName = Name 'for' memberElement = [SysML::Element|QualifiedName] ';'
		public Group getGroup() { return cGroup; }
		
		//MemberPrefix
		public RuleCall getMemberPrefixParserRuleCall_0() { return cMemberPrefixParserRuleCall_0; }
		
		//'alias'
		public Keyword getAliasKeyword_1() { return cAliasKeyword_1; }
		
		//memberName = Name
		public Assignment getMemberNameAssignment_2() { return cMemberNameAssignment_2; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_2_0() { return cMemberNameNameParserRuleCall_2_0; }
		
		//'for'
		public Keyword getForKeyword_3() { return cForKeyword_3; }
		
		//memberElement = [SysML::Element|QualifiedName]
		public Assignment getMemberElementAssignment_4() { return cMemberElementAssignment_4; }
		
		//[SysML::Element|QualifiedName]
		public CrossReference getMemberElementElementCrossReference_4_0() { return cMemberElementElementCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getMemberElementElementQualifiedNameParserRuleCall_4_0_1() { return cMemberElementElementQualifiedNameParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationshipPrefixDocumentationParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityIndicatorEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Keyword cImportKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIsImportAllAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cIsImportAllAllKeyword_3_0 = (Keyword)cIsImportAllAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final RuleCall cImportedNamespaceParserRuleCall_4_0 = (RuleCall)cAlternatives_4.eContents().get(0);
		private final RuleCall cImportedFilterPackageParserRuleCall_4_1 = (RuleCall)cAlternatives_4.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Import returns SysML::Import :
		//    ( ownedRelationship += PrefixDocumentation )*
		//    ( visibility = VisibilityIndicator )?
		//    'import' ( isImportAll ?= 'all' )?
		//    ( ImportedNamespace | ImportedFilterPackage ) ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( ownedRelationship += PrefixDocumentation )*
		//( visibility = VisibilityIndicator )?
		//'import' ( isImportAll ?= 'all' )?
		//( ImportedNamespace | ImportedFilterPackage ) ';'
		public Group getGroup() { return cGroup; }
		
		//( ownedRelationship += PrefixDocumentation )*
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//PrefixDocumentation
		public RuleCall getOwnedRelationshipPrefixDocumentationParserRuleCall_0_0() { return cOwnedRelationshipPrefixDocumentationParserRuleCall_0_0; }
		
		//( visibility = VisibilityIndicator )?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//VisibilityIndicator
		public RuleCall getVisibilityVisibilityIndicatorEnumRuleCall_1_0() { return cVisibilityVisibilityIndicatorEnumRuleCall_1_0; }
		
		//'import'
		public Keyword getImportKeyword_2() { return cImportKeyword_2; }
		
		//( isImportAll ?= 'all' )?
		public Assignment getIsImportAllAssignment_3() { return cIsImportAllAssignment_3; }
		
		//'all'
		public Keyword getIsImportAllAllKeyword_3_0() { return cIsImportAllAllKeyword_3_0; }
		
		//( ImportedNamespace | ImportedFilterPackage )
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//ImportedNamespace
		public RuleCall getImportedNamespaceParserRuleCall_4_0() { return cImportedNamespaceParserRuleCall_4_0; }
		
		//ImportedFilterPackage
		public RuleCall getImportedFilterPackageParserRuleCall_4_1() { return cImportedFilterPackageParserRuleCall_4_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ImportedNamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ImportedNamespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cImportedNamespaceNamespaceCrossReference_0_0 = (CrossReference)cImportedNamespaceAssignment_0.eContents().get(0);
		private final RuleCall cImportedNamespaceNamespaceQualificationParserRuleCall_0_0_1 = (RuleCall)cImportedNamespaceNamespaceCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cImportedMemberNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cImportedMemberNameNameParserRuleCall_1_0_0 = (RuleCall)cImportedMemberNameAssignment_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIsRecursiveAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cIsRecursiveAsteriskAsteriskKeyword_2_1_0 = (Keyword)cIsRecursiveAssignment_2_1.eContents().get(0);
		
		//fragment ImportedNamespace returns SysML::Import :
		//    ( importedNamespace = [SysML::Namespace|Qualification] )?
		//    ( importedMemberName = Name | '*' )
		//    ( '::' isRecursive ?= '**' )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( importedNamespace = [SysML::Namespace|Qualification] )?
		//( importedMemberName = Name | '*' )
		//( '::' isRecursive ?= '**' )?
		public Group getGroup() { return cGroup; }
		
		//( importedNamespace = [SysML::Namespace|Qualification] )?
		public Assignment getImportedNamespaceAssignment_0() { return cImportedNamespaceAssignment_0; }
		
		//[SysML::Namespace|Qualification]
		public CrossReference getImportedNamespaceNamespaceCrossReference_0_0() { return cImportedNamespaceNamespaceCrossReference_0_0; }
		
		//Qualification
		public RuleCall getImportedNamespaceNamespaceQualificationParserRuleCall_0_0_1() { return cImportedNamespaceNamespaceQualificationParserRuleCall_0_0_1; }
		
		//( importedMemberName = Name | '*' )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//importedMemberName = Name
		public Assignment getImportedMemberNameAssignment_1_0() { return cImportedMemberNameAssignment_1_0; }
		
		//Name
		public RuleCall getImportedMemberNameNameParserRuleCall_1_0_0() { return cImportedMemberNameNameParserRuleCall_1_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
		
		//( '::' isRecursive ?= '**' )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'::'
		public Keyword getColonColonKeyword_2_0() { return cColonColonKeyword_2_0; }
		
		//isRecursive ?= '**'
		public Assignment getIsRecursiveAssignment_2_1() { return cIsRecursiveAssignment_2_1; }
		
		//'**'
		public Keyword getIsRecursiveAsteriskAsteriskKeyword_2_1_0() { return cIsRecursiveAsteriskAsteriskKeyword_2_1_0; }
	}
	public class ImportedFilterPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ImportedFilterPackage");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementFilterPackageParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//fragment ImportedFilterPackage returns SysML::Import :
		//    ownedRelatedElement += FilterPackage
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += FilterPackage
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//FilterPackage
		public RuleCall getOwnedRelatedElementFilterPackageParserRuleCall_0() { return cOwnedRelatedElementFilterPackageParserRuleCall_0; }
	}
	public class FilterPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FilterPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationshipFilterPackageImportParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipFilterPackageMemberParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		//FilterPackage returns SysML::Package :
		//    ownedRelationship += FilterPackageImport
		//    ( ownedRelationship += FilterPackageMember )+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += FilterPackageImport
		//( ownedRelationship += FilterPackageMember )+
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship += FilterPackageImport
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//FilterPackageImport
		public RuleCall getOwnedRelationshipFilterPackageImportParserRuleCall_0_0() { return cOwnedRelationshipFilterPackageImportParserRuleCall_0_0; }
		
		//( ownedRelationship += FilterPackageMember )+
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//FilterPackageMember
		public RuleCall getOwnedRelationshipFilterPackageMemberParserRuleCall_1_0() { return cOwnedRelationshipFilterPackageMemberParserRuleCall_1_0; }
	}
	public class FilterPackageImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FilterPackageImport");
		private final RuleCall cImportedNamespaceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FilterPackageImport returns SysML::Import :
		//    ImportedNamespace
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ImportedNamespace
		public RuleCall getImportedNamespaceParserRuleCall() { return cImportedNamespaceParserRuleCall; }
	}
	public class FilterPackageMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FilterPackageMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityFilterPackageMemberVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedExpressionParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FilterPackageMember returns SysML::ElementFilterMembership :
		//    visibility = FilterPackageMemberVisibility ownedRelatedElement += OwnedExpression ']' // condition = OwnedExpression ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility = FilterPackageMemberVisibility ownedRelatedElement += OwnedExpression ']'
		public Group getGroup() { return cGroup; }
		
		//visibility = FilterPackageMemberVisibility
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//FilterPackageMemberVisibility
		public RuleCall getVisibilityFilterPackageMemberVisibilityEnumRuleCall_0_0() { return cVisibilityFilterPackageMemberVisibilityEnumRuleCall_0_0; }
		
		//ownedRelatedElement += OwnedExpression
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//OwnedExpression
		public RuleCall getOwnedRelatedElementOwnedExpressionParserRuleCall_1_0() { return cOwnedRelatedElementOwnedExpressionParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class NonFeatureElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NonFeatureElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationshipParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCommentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTextualRepresentationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAnnotatingFeatureParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNamespaceParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPackageParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cClassifierParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cClassParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cStructureParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cDataTypeParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cAssociationParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cAssociationStructureParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cInteractionParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cBehaviorParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cFunctionParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cPredicateParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cSpecializationParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cConjugationParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cFeatureTypingParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cSubclassificationParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cSubsettingParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cRedefinitionParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cTypeFeaturingParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		
		///* Namespace Elements */
		//NonFeatureElement returns SysML::Element :
		//      Element
		//    | Relationship
		//    | Comment
		//    | TextualRepresentation
		//    | AnnotatingFeature
		//    | Namespace
		//    | Package
		//    | Type
		//    | Classifier
		//    | Class
		//    | Structure
		//    | DataType
		//    | Association
		//    | AssociationStructure
		//    | Interaction
		//    | Behavior
		//    | Function
		//    | Predicate
		//    | Specialization
		//    | Conjugation
		//    | FeatureTyping
		//    | Subclassification
		//    | Subsetting
		//    | Redefinition
		//    | TypeFeaturing
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  Element
		//| Relationship
		//| Comment
		//| TextualRepresentation
		//| AnnotatingFeature
		//| Namespace
		//| Package
		//| Type
		//| Classifier
		//| Class
		//| Structure
		//| DataType
		//| Association
		//| AssociationStructure
		//| Interaction
		//| Behavior
		//| Function
		//| Predicate
		//| Specialization
		//| Conjugation
		//| FeatureTyping
		//| Subclassification
		//| Subsetting
		//| Redefinition
		//| TypeFeaturing
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Element
		public RuleCall getElementParserRuleCall_0() { return cElementParserRuleCall_0; }
		
		//Relationship
		public RuleCall getRelationshipParserRuleCall_1() { return cRelationshipParserRuleCall_1; }
		
		//Comment
		public RuleCall getCommentParserRuleCall_2() { return cCommentParserRuleCall_2; }
		
		//TextualRepresentation
		public RuleCall getTextualRepresentationParserRuleCall_3() { return cTextualRepresentationParserRuleCall_3; }
		
		//AnnotatingFeature
		public RuleCall getAnnotatingFeatureParserRuleCall_4() { return cAnnotatingFeatureParserRuleCall_4; }
		
		//Namespace
		public RuleCall getNamespaceParserRuleCall_5() { return cNamespaceParserRuleCall_5; }
		
		//Package
		public RuleCall getPackageParserRuleCall_6() { return cPackageParserRuleCall_6; }
		
		//Type
		public RuleCall getTypeParserRuleCall_7() { return cTypeParserRuleCall_7; }
		
		//Classifier
		public RuleCall getClassifierParserRuleCall_8() { return cClassifierParserRuleCall_8; }
		
		//Class
		public RuleCall getClassParserRuleCall_9() { return cClassParserRuleCall_9; }
		
		//Structure
		public RuleCall getStructureParserRuleCall_10() { return cStructureParserRuleCall_10; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_11() { return cDataTypeParserRuleCall_11; }
		
		//Association
		public RuleCall getAssociationParserRuleCall_12() { return cAssociationParserRuleCall_12; }
		
		//AssociationStructure
		public RuleCall getAssociationStructureParserRuleCall_13() { return cAssociationStructureParserRuleCall_13; }
		
		//Interaction
		public RuleCall getInteractionParserRuleCall_14() { return cInteractionParserRuleCall_14; }
		
		//Behavior
		public RuleCall getBehaviorParserRuleCall_15() { return cBehaviorParserRuleCall_15; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_16() { return cFunctionParserRuleCall_16; }
		
		//Predicate
		public RuleCall getPredicateParserRuleCall_17() { return cPredicateParserRuleCall_17; }
		
		//Specialization
		public RuleCall getSpecializationParserRuleCall_18() { return cSpecializationParserRuleCall_18; }
		
		//Conjugation
		public RuleCall getConjugationParserRuleCall_19() { return cConjugationParserRuleCall_19; }
		
		//FeatureTyping
		public RuleCall getFeatureTypingParserRuleCall_20() { return cFeatureTypingParserRuleCall_20; }
		
		//Subclassification
		public RuleCall getSubclassificationParserRuleCall_21() { return cSubclassificationParserRuleCall_21; }
		
		//Subsetting
		public RuleCall getSubsettingParserRuleCall_22() { return cSubsettingParserRuleCall_22; }
		
		//Redefinition
		public RuleCall getRedefinitionParserRuleCall_23() { return cRedefinitionParserRuleCall_23; }
		
		//TypeFeaturing
		public RuleCall getTypeFeaturingParserRuleCall_24() { return cTypeFeaturingParserRuleCall_24; }
	}
	public class FeatureElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStepParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInvariantParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConnectorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBindingConnectorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSuccessionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cItemFlowParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSuccessionItemFlowParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//FeatureElement returns SysML::Feature :
		//      Feature
		//    | Step
		//    | Expression
		//    | BooleanExpression
		//    | Invariant
		//    | Connector
		//    | BindingConnector
		//    | Succession
		//    | ItemFlow
		//    | SuccessionItemFlow
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  Feature
		//| Step
		//| Expression
		//| BooleanExpression
		//| Invariant
		//| Connector
		//| BindingConnector
		//| Succession
		//| ItemFlow
		//| SuccessionItemFlow
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Feature
		public RuleCall getFeatureParserRuleCall_0() { return cFeatureParserRuleCall_0; }
		
		//Step
		public RuleCall getStepParserRuleCall_1() { return cStepParserRuleCall_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
		
		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_3() { return cBooleanExpressionParserRuleCall_3; }
		
		//Invariant
		public RuleCall getInvariantParserRuleCall_4() { return cInvariantParserRuleCall_4; }
		
		//Connector
		public RuleCall getConnectorParserRuleCall_5() { return cConnectorParserRuleCall_5; }
		
		//BindingConnector
		public RuleCall getBindingConnectorParserRuleCall_6() { return cBindingConnectorParserRuleCall_6; }
		
		//Succession
		public RuleCall getSuccessionParserRuleCall_7() { return cSuccessionParserRuleCall_7; }
		
		//ItemFlow
		public RuleCall getItemFlowParserRuleCall_8() { return cItemFlowParserRuleCall_8; }
		
		//SuccessionItemFlow
		public RuleCall getSuccessionItemFlowParserRuleCall_9() { return cSuccessionItemFlowParserRuleCall_9; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPackageDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPackageBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		///* PACKAGES */
		//Package returns SysML::Package :
		//    PackageDeclaration PackageBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PackageDeclaration PackageBody
		public Group getGroup() { return cGroup; }
		
		//PackageDeclaration
		public RuleCall getPackageDeclarationParserRuleCall_0() { return cPackageDeclarationParserRuleCall_0; }
		
		//PackageBody
		public RuleCall getPackageBodyParserRuleCall_1() { return cPackageBodyParserRuleCall_1; }
	}
	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fragment PackageDeclaration returns SysML::Package :
		//    'package' Identification?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' Identification?
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1() { return cIdentificationParserRuleCall_1; }
	}
	public class PackageBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PackageBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cOwnedRelationshipOwnedDocumentationParserRuleCall_1_1_0_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipNamespaceMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cOwnedRelationshipElementFilterMemberParserRuleCall_1_1_2_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cOwnedRelationshipAliasMemberParserRuleCall_1_1_3_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_3.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_4 = (Assignment)cAlternatives_1_1.eContents().get(4);
		private final RuleCall cOwnedRelationshipImportParserRuleCall_1_1_4_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment PackageBody returns SysML::Namespace :
		//      ';'
		//    | '{' ( // Note: PackageBodyElement is expanded here to avoid
		//            // infinite loops in the incremental parser.
		//            ownedRelationship += OwnedDocumentation
		//          | ownedRelationship += NamespaceMember
		//          | ownedRelationship += ElementFilterMember
		//          | ownedRelationship += AliasMember
		//          | ownedRelationship += Import )*
		//      '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ';'
		//| '{' ( // Note: PackageBodyElement is expanded here to avoid
		//        // infinite loops in the incremental parser.
		//        ownedRelationship += OwnedDocumentation
		//      | ownedRelationship += NamespaceMember
		//      | ownedRelationship += ElementFilterMember
		//      | ownedRelationship += AliasMember
		//      | ownedRelationship += Import )*
		//  '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' ( // Note: PackageBodyElement is expanded here to avoid
		//           // infinite loops in the incremental parser.
		//           ownedRelationship += OwnedDocumentation
		//         | ownedRelationship += NamespaceMember
		//         | ownedRelationship += ElementFilterMember
		//         | ownedRelationship += AliasMember
		//         | ownedRelationship += Import )*
		//     '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//( // Note: PackageBodyElement is expanded here to avoid
		//           // infinite loops in the incremental parser.
		//           ownedRelationship += OwnedDocumentation
		//         | ownedRelationship += NamespaceMember
		//         | ownedRelationship += ElementFilterMember
		//         | ownedRelationship += AliasMember
		//         | ownedRelationship += Import )*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//// Note: PackageBodyElement is expanded here to avoid
		//           // infinite loops in the incremental parser.
		//           ownedRelationship += OwnedDocumentation
		public Assignment getOwnedRelationshipAssignment_1_1_0() { return cOwnedRelationshipAssignment_1_1_0; }
		
		//OwnedDocumentation
		public RuleCall getOwnedRelationshipOwnedDocumentationParserRuleCall_1_1_0_0() { return cOwnedRelationshipOwnedDocumentationParserRuleCall_1_1_0_0; }
		
		//ownedRelationship += NamespaceMember
		public Assignment getOwnedRelationshipAssignment_1_1_1() { return cOwnedRelationshipAssignment_1_1_1; }
		
		//NamespaceMember
		public RuleCall getOwnedRelationshipNamespaceMemberParserRuleCall_1_1_1_0() { return cOwnedRelationshipNamespaceMemberParserRuleCall_1_1_1_0; }
		
		//ownedRelationship += ElementFilterMember
		public Assignment getOwnedRelationshipAssignment_1_1_2() { return cOwnedRelationshipAssignment_1_1_2; }
		
		//ElementFilterMember
		public RuleCall getOwnedRelationshipElementFilterMemberParserRuleCall_1_1_2_0() { return cOwnedRelationshipElementFilterMemberParserRuleCall_1_1_2_0; }
		
		//ownedRelationship += AliasMember
		public Assignment getOwnedRelationshipAssignment_1_1_3() { return cOwnedRelationshipAssignment_1_1_3; }
		
		//AliasMember
		public RuleCall getOwnedRelationshipAliasMemberParserRuleCall_1_1_3_0() { return cOwnedRelationshipAliasMemberParserRuleCall_1_1_3_0; }
		
		//ownedRelationship += Import
		public Assignment getOwnedRelationshipAssignment_1_1_4() { return cOwnedRelationshipAssignment_1_1_4; }
		
		//Import
		public RuleCall getOwnedRelationshipImportParserRuleCall_1_1_4_0() { return cOwnedRelationshipImportParserRuleCall_1_1_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class ElementFilterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ElementFilterMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFilterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelatedElementOwnedExpressionParserRuleCall_2_0 = (RuleCall)cOwnedRelatedElementAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ElementFilterMember returns SysML::ElementFilterMembership :
		//    MemberPrefix
		//    'filter' ownedRelatedElement += OwnedExpression ';' // condition = OwnedExpression ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MemberPrefix
		//'filter' ownedRelatedElement += OwnedExpression ';'
		public Group getGroup() { return cGroup; }
		
		//MemberPrefix
		public RuleCall getMemberPrefixParserRuleCall_0() { return cMemberPrefixParserRuleCall_0; }
		
		//'filter'
		public Keyword getFilterKeyword_1() { return cFilterKeyword_1; }
		
		//ownedRelatedElement += OwnedExpression
		public Assignment getOwnedRelatedElementAssignment_2() { return cOwnedRelatedElementAssignment_2; }
		
		//OwnedExpression
		public RuleCall getOwnedRelatedElementOwnedExpressionParserRuleCall_2_0() { return cOwnedRelatedElementOwnedExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* TYPES */
		///* Types */
		//Type returns SysML::Type :
		//    ( isAbstract ?= 'abstract' )? 'type'
		//    TypeDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( isAbstract ?= 'abstract' )? 'type'
		//TypeDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//( isAbstract ?= 'abstract' )?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'type'
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//TypeDeclaration
		public RuleCall getTypeDeclarationParserRuleCall_2() { return cTypeDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsSufficientAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsSufficientAllKeyword_0_0 = (Keyword)cIsSufficientAssignment_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelationshipMultiplicityMemberParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cSpecializationPartParserRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cConjugationPartParserRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//fragment TypeDeclaration returns SysML::Type :
		//    ( isSufficient ?= 'all' )? Identification?
		//    ( ownedRelationship += MultiplicityMember )?
		//    ( SpecializationPart | ConjugationPart )+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( isSufficient ?= 'all' )? Identification?
		//( ownedRelationship += MultiplicityMember )?
		//( SpecializationPart | ConjugationPart )+
		public Group getGroup() { return cGroup; }
		
		//( isSufficient ?= 'all' )?
		public Assignment getIsSufficientAssignment_0() { return cIsSufficientAssignment_0; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_0_0() { return cIsSufficientAllKeyword_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1() { return cIdentificationParserRuleCall_1; }
		
		//( ownedRelationship += MultiplicityMember )?
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//MultiplicityMember
		public RuleCall getOwnedRelationshipMultiplicityMemberParserRuleCall_2_0() { return cOwnedRelationshipMultiplicityMemberParserRuleCall_2_0; }
		
		//( SpecializationPart | ConjugationPart )+
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//SpecializationPart
		public RuleCall getSpecializationPartParserRuleCall_3_0() { return cSpecializationPartParserRuleCall_3_0; }
		
		//ConjugationPart
		public RuleCall getConjugationPartParserRuleCall_3_1() { return cConjugationPartParserRuleCall_3_1; }
	}
	public class SpecializationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.SpecializationPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cColonGreaterThanSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSpecializesKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedSpecializationParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedSpecializationParserRuleCall_2_1_0 = (RuleCall)cOwnedRelationshipAssignment_2_1.eContents().get(0);
		
		//fragment SpecializationPart returns SysML::Type :
		//      ( ':>' | 'specializes' ) ownedRelationship += OwnedSpecialization
		//      ( ',' ownedRelationship += OwnedSpecialization )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( ':>' | 'specializes' ) ownedRelationship += OwnedSpecialization
		//( ',' ownedRelationship += OwnedSpecialization )*
		public Group getGroup() { return cGroup; }
		
		//( ':>' | 'specializes' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//':>'
		public Keyword getColonGreaterThanSignKeyword_0_0() { return cColonGreaterThanSignKeyword_0_0; }
		
		//'specializes'
		public Keyword getSpecializesKeyword_0_1() { return cSpecializesKeyword_0_1; }
		
		//ownedRelationship += OwnedSpecialization
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//OwnedSpecialization
		public RuleCall getOwnedRelationshipOwnedSpecializationParserRuleCall_1_0() { return cOwnedRelationshipOwnedSpecializationParserRuleCall_1_0; }
		
		//( ',' ownedRelationship += OwnedSpecialization )*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//ownedRelationship += OwnedSpecialization
		public Assignment getOwnedRelationshipAssignment_2_1() { return cOwnedRelationshipAssignment_2_1; }
		
		//OwnedSpecialization
		public RuleCall getOwnedRelationshipOwnedSpecializationParserRuleCall_2_1_0() { return cOwnedRelationshipOwnedSpecializationParserRuleCall_2_1_0; }
	}
	public class ConjugationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ConjugationPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTildeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cConjugatesKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedConjugationParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		//fragment ConjugationPart returns SysML::Type :
		//    ( '~' | 'conjugates' ) ownedRelationship += OwnedConjugation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( '~' | 'conjugates' ) ownedRelationship += OwnedConjugation
		public Group getGroup() { return cGroup; }
		
		//( '~' | 'conjugates' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'~'
		public Keyword getTildeKeyword_0_0() { return cTildeKeyword_0_0; }
		
		//'conjugates'
		public Keyword getConjugatesKeyword_0_1() { return cConjugatesKeyword_0_1; }
		
		//ownedRelationship += OwnedConjugation
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//OwnedConjugation
		public RuleCall getOwnedRelationshipOwnedConjugationParserRuleCall_1_0() { return cOwnedRelationshipOwnedConjugationParserRuleCall_1_0; }
	}
	public class MultiplicityMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MultiplicityMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementMultiplicityParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//MultiplicityMember returns SysML::Membership :
		//    ownedRelatedElement += Multiplicity // ownedMemberElement = Multiplicity
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += Multiplicity
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//Multiplicity
		public RuleCall getOwnedRelatedElementMultiplicityParserRuleCall_0() { return cOwnedRelatedElementMultiplicityParserRuleCall_0; }
	}
	public class TypeBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TypeBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cOwnedRelationshipOwnedDocumentationParserRuleCall_1_1_0_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipNonFeatureMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cOwnedRelationshipFeatureMemberParserRuleCall_1_1_2_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cOwnedRelationshipAliasMemberParserRuleCall_1_1_3_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_3.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_4 = (Assignment)cAlternatives_1_1.eContents().get(4);
		private final RuleCall cOwnedRelationshipImportParserRuleCall_1_1_4_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment TypeBody returns SysML::Type :
		//    ';' |
		//    '{' ( ownedRelationship += OwnedDocumentation
		//        | ownedRelationship += NonFeatureMember
		//        | ownedRelationship += FeatureMember
		//        | ownedRelationship += AliasMember
		//        | ownedRelationship += Import
		//    )* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//';' |
		//'{' ( ownedRelationship += OwnedDocumentation
		//    | ownedRelationship += NonFeatureMember
		//    | ownedRelationship += FeatureMember
		//    | ownedRelationship += AliasMember
		//    | ownedRelationship += Import
		//)* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' ( ownedRelationship += OwnedDocumentation
		//    | ownedRelationship += NonFeatureMember
		//    | ownedRelationship += FeatureMember
		//    | ownedRelationship += AliasMember
		//    | ownedRelationship += Import
		//)* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//( ownedRelationship += OwnedDocumentation
		//       | ownedRelationship += NonFeatureMember
		//       | ownedRelationship += FeatureMember
		//       | ownedRelationship += AliasMember
		//       | ownedRelationship += Import
		//   )*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//ownedRelationship += OwnedDocumentation
		public Assignment getOwnedRelationshipAssignment_1_1_0() { return cOwnedRelationshipAssignment_1_1_0; }
		
		//OwnedDocumentation
		public RuleCall getOwnedRelationshipOwnedDocumentationParserRuleCall_1_1_0_0() { return cOwnedRelationshipOwnedDocumentationParserRuleCall_1_1_0_0; }
		
		//ownedRelationship += NonFeatureMember
		public Assignment getOwnedRelationshipAssignment_1_1_1() { return cOwnedRelationshipAssignment_1_1_1; }
		
		//NonFeatureMember
		public RuleCall getOwnedRelationshipNonFeatureMemberParserRuleCall_1_1_1_0() { return cOwnedRelationshipNonFeatureMemberParserRuleCall_1_1_1_0; }
		
		//ownedRelationship += FeatureMember
		public Assignment getOwnedRelationshipAssignment_1_1_2() { return cOwnedRelationshipAssignment_1_1_2; }
		
		//FeatureMember
		public RuleCall getOwnedRelationshipFeatureMemberParserRuleCall_1_1_2_0() { return cOwnedRelationshipFeatureMemberParserRuleCall_1_1_2_0; }
		
		//ownedRelationship += AliasMember
		public Assignment getOwnedRelationshipAssignment_1_1_3() { return cOwnedRelationshipAssignment_1_1_3; }
		
		//AliasMember
		public RuleCall getOwnedRelationshipAliasMemberParserRuleCall_1_1_3_0() { return cOwnedRelationshipAliasMemberParserRuleCall_1_1_3_0; }
		
		//ownedRelationship += Import
		public Assignment getOwnedRelationshipAssignment_1_1_4() { return cOwnedRelationshipAssignment_1_1_4; }
		
		//Import
		public RuleCall getOwnedRelationshipImportParserRuleCall_1_1_4_0() { return cOwnedRelationshipImportParserRuleCall_1_1_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class NonFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NonFeatureMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelatedElementNonFeatureElementParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//NonFeatureMember returns SysML::Membership :
		//    MemberPrefix ownedRelatedElement += NonFeatureElement // ownedMemberElement = NonFeatureElement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MemberPrefix ownedRelatedElement += NonFeatureElement
		public Group getGroup() { return cGroup; }
		
		//MemberPrefix
		public RuleCall getMemberPrefixParserRuleCall_0() { return cMemberPrefixParserRuleCall_0; }
		
		//ownedRelatedElement += NonFeatureElement
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//NonFeatureElement
		public RuleCall getOwnedRelatedElementNonFeatureElementParserRuleCall_1_0() { return cOwnedRelatedElementNonFeatureElementParserRuleCall_1_0; }
	}
	public class FeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cOwnedRelatedElementFeatureElementParserRuleCall_1_0_0 = (RuleCall)cOwnedRelatedElementAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFeatureKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cMemberNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cMemberNameNameParserRuleCall_1_1_1_0 = (RuleCall)cMemberNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cIsKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cMemberFeatureAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final CrossReference cMemberFeatureFeatureCrossReference_1_1_3_0 = (CrossReference)cMemberFeatureAssignment_1_1_3.eContents().get(0);
		private final RuleCall cMemberFeatureFeatureQualifiedNameParserRuleCall_1_1_3_0_1 = (RuleCall)cMemberFeatureFeatureCrossReference_1_1_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		
		///* Feature Membership */
		//FeatureMember returns SysML::FeatureMembership :
		//    MemberPrefix
		//    ( ownedRelatedElement += FeatureElement // ownedMemberFeature = FeatureElement
		//    | 'feature'? ( memberName = Name )? 'is' memberFeature = [SysML::Feature|QualifiedName] ';'
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MemberPrefix
		//( ownedRelatedElement += FeatureElement // ownedMemberFeature = FeatureElement
		//| 'feature'? ( memberName = Name )? 'is' memberFeature = [SysML::Feature|QualifiedName] ';'
		//)
		public Group getGroup() { return cGroup; }
		
		//MemberPrefix
		public RuleCall getMemberPrefixParserRuleCall_0() { return cMemberPrefixParserRuleCall_0; }
		
		//( ownedRelatedElement += FeatureElement // ownedMemberFeature = FeatureElement
		//| 'feature'? ( memberName = Name )? 'is' memberFeature = [SysML::Feature|QualifiedName] ';'
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ownedRelatedElement += FeatureElement
		public Assignment getOwnedRelatedElementAssignment_1_0() { return cOwnedRelatedElementAssignment_1_0; }
		
		//FeatureElement
		public RuleCall getOwnedRelatedElementFeatureElementParserRuleCall_1_0_0() { return cOwnedRelatedElementFeatureElementParserRuleCall_1_0_0; }
		
		//'feature'? ( memberName = Name )? 'is' memberFeature = [SysML::Feature|QualifiedName] ';'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'feature'?
		public Keyword getFeatureKeyword_1_1_0() { return cFeatureKeyword_1_1_0; }
		
		//( memberName = Name )?
		public Assignment getMemberNameAssignment_1_1_1() { return cMemberNameAssignment_1_1_1; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_1_1_1_0() { return cMemberNameNameParserRuleCall_1_1_1_0; }
		
		//'is'
		public Keyword getIsKeyword_1_1_2() { return cIsKeyword_1_1_2; }
		
		//memberFeature = [SysML::Feature|QualifiedName]
		public Assignment getMemberFeatureAssignment_1_1_3() { return cMemberFeatureAssignment_1_1_3; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getMemberFeatureFeatureCrossReference_1_1_3_0() { return cMemberFeatureFeatureCrossReference_1_1_3_0; }
		
		//QualifiedName
		public RuleCall getMemberFeatureFeatureQualifiedNameParserRuleCall_1_1_3_0_1() { return cMemberFeatureFeatureQualifiedNameParserRuleCall_1_1_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1_4() { return cSemicolonKeyword_1_1_4; }
	}
	public class SpecializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Specialization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cSpecializationKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cSubtypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSpecificAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSpecificTypeCrossReference_2_0 = (CrossReference)cSpecificAssignment_2.eContents().get(0);
		private final RuleCall cSpecificTypeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cSpecificTypeCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cColonGreaterThanSignKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cSpecializesKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cGeneralAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cGeneralTypeCrossReference_4_0 = (CrossReference)cGeneralAssignment_4.eContents().get(0);
		private final RuleCall cGeneralTypeQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cGeneralTypeCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///* Specialization */
		//Specialization returns SysML::Specialization :
		//    ( 'specialization' Identification? )?
		//    'subtype' specific = [SysML::Type | QualifiedName]
		//    ( ':>' | 'specializes') general = [SysML::Type | QualifiedName] ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'specialization' Identification? )?
		//'subtype' specific = [SysML::Type | QualifiedName]
		//( ':>' | 'specializes') general = [SysML::Type | QualifiedName] ';'
		public Group getGroup() { return cGroup; }
		
		//( 'specialization' Identification? )?
		public Group getGroup_0() { return cGroup_0; }
		
		//'specialization'
		public Keyword getSpecializationKeyword_0_0() { return cSpecializationKeyword_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_1() { return cIdentificationParserRuleCall_0_1; }
		
		//'subtype'
		public Keyword getSubtypeKeyword_1() { return cSubtypeKeyword_1; }
		
		//specific = [SysML::Type | QualifiedName]
		public Assignment getSpecificAssignment_2() { return cSpecificAssignment_2; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getSpecificTypeCrossReference_2_0() { return cSpecificTypeCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getSpecificTypeQualifiedNameParserRuleCall_2_0_1() { return cSpecificTypeQualifiedNameParserRuleCall_2_0_1; }
		
		//( ':>' | 'specializes')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//':>'
		public Keyword getColonGreaterThanSignKeyword_3_0() { return cColonGreaterThanSignKeyword_3_0; }
		
		//'specializes'
		public Keyword getSpecializesKeyword_3_1() { return cSpecializesKeyword_3_1; }
		
		//general = [SysML::Type | QualifiedName]
		public Assignment getGeneralAssignment_4() { return cGeneralAssignment_4; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getGeneralTypeCrossReference_4_0() { return cGeneralTypeCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getGeneralTypeQualifiedNameParserRuleCall_4_0_1() { return cGeneralTypeQualifiedNameParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class OwnedSpecializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedSpecialization");
		private final Assignment cGeneralAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cGeneralTypeCrossReference_0 = (CrossReference)cGeneralAssignment.eContents().get(0);
		private final RuleCall cGeneralTypeQualifiedNameParserRuleCall_0_1 = (RuleCall)cGeneralTypeCrossReference_0.eContents().get(1);
		
		//OwnedSpecialization returns SysML::Specialization :
		//    general = [SysML::Type | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//general = [SysML::Type | QualifiedName]
		public Assignment getGeneralAssignment() { return cGeneralAssignment; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getGeneralTypeCrossReference_0() { return cGeneralTypeCrossReference_0; }
		
		//QualifiedName
		public RuleCall getGeneralTypeQualifiedNameParserRuleCall_0_1() { return cGeneralTypeQualifiedNameParserRuleCall_0_1; }
	}
	public class ConjugationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Conjugation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConjugationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConjugatedTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cConjugatedTypeTypeCrossReference_3_0 = (CrossReference)cConjugatedTypeAssignment_3.eContents().get(0);
		private final RuleCall cConjugatedTypeTypeQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cConjugatedTypeTypeCrossReference_3_0.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cTildeKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cConjugatesKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Assignment cOriginalTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cOriginalTypeTypeCrossReference_5_0 = (CrossReference)cOriginalTypeAssignment_5.eContents().get(0);
		private final RuleCall cOriginalTypeTypeQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cOriginalTypeTypeCrossReference_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///* Conjugation */
		//Conjugation returns SysML::Conjugation :
		//    'conjugation' Identification?
		//    'type' conjugatedType = [SysML::Type | QualifiedName]
		//    ( '~' | 'conjugates') originalType = [SysML::Type | QualifiedName] ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'conjugation' Identification?
		//'type' conjugatedType = [SysML::Type | QualifiedName]
		//( '~' | 'conjugates') originalType = [SysML::Type | QualifiedName] ';'
		public Group getGroup() { return cGroup; }
		
		//'conjugation'
		public Keyword getConjugationKeyword_0() { return cConjugationKeyword_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1() { return cIdentificationParserRuleCall_1; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//conjugatedType = [SysML::Type | QualifiedName]
		public Assignment getConjugatedTypeAssignment_3() { return cConjugatedTypeAssignment_3; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getConjugatedTypeTypeCrossReference_3_0() { return cConjugatedTypeTypeCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getConjugatedTypeTypeQualifiedNameParserRuleCall_3_0_1() { return cConjugatedTypeTypeQualifiedNameParserRuleCall_3_0_1; }
		
		//( '~' | 'conjugates')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'~'
		public Keyword getTildeKeyword_4_0() { return cTildeKeyword_4_0; }
		
		//'conjugates'
		public Keyword getConjugatesKeyword_4_1() { return cConjugatesKeyword_4_1; }
		
		//originalType = [SysML::Type | QualifiedName]
		public Assignment getOriginalTypeAssignment_5() { return cOriginalTypeAssignment_5; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getOriginalTypeTypeCrossReference_5_0() { return cOriginalTypeTypeCrossReference_5_0; }
		
		//QualifiedName
		public RuleCall getOriginalTypeTypeQualifiedNameParserRuleCall_5_0_1() { return cOriginalTypeTypeQualifiedNameParserRuleCall_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class OwnedConjugationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedConjugation");
		private final Assignment cOriginalTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cOriginalTypeTypeCrossReference_0 = (CrossReference)cOriginalTypeAssignment.eContents().get(0);
		private final RuleCall cOriginalTypeTypeQualifiedNameParserRuleCall_0_1 = (RuleCall)cOriginalTypeTypeCrossReference_0.eContents().get(1);
		
		//OwnedConjugation returns SysML::Conjugation :
		//    originalType = [SysML::Type | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//originalType = [SysML::Type | QualifiedName]
		public Assignment getOriginalTypeAssignment() { return cOriginalTypeAssignment; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getOriginalTypeTypeCrossReference_0() { return cOriginalTypeTypeCrossReference_0; }
		
		//QualifiedName
		public RuleCall getOriginalTypeTypeQualifiedNameParserRuleCall_0_1() { return cOriginalTypeTypeQualifiedNameParserRuleCall_0_1; }
	}
	public class ClassifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Classifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cClassifierKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* CLASSIFIERS */
		///* Classifiers */
		//Classifier returns SysML::Classifier :
		//    ( isAbstract ?= 'abstract' )? 'classifier'
		//    ClassifierDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( isAbstract ?= 'abstract' )? 'classifier'
		//ClassifierDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//( isAbstract ?= 'abstract' )?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'classifier'
		public Keyword getClassifierKeyword_1() { return cClassifierKeyword_1; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_2() { return cClassifierDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class ClassifierDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ClassifierDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsSufficientAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsSufficientAllKeyword_0_0 = (Keyword)cIsSufficientAssignment_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelationshipMultiplicityMemberParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cSuperclassingPartParserRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cClassifierConjugationPartParserRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//fragment ClassifierDeclaration returns SysML::Classifier :
		//    (isSufficient ?= 'all' )? Identification?
		//    ( ownedRelationship += MultiplicityMember )?
		//    ( SuperclassingPart | ClassifierConjugationPart )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(isSufficient ?= 'all' )? Identification?
		//( ownedRelationship += MultiplicityMember )?
		//( SuperclassingPart | ClassifierConjugationPart )?
		public Group getGroup() { return cGroup; }
		
		//(isSufficient ?= 'all' )?
		public Assignment getIsSufficientAssignment_0() { return cIsSufficientAssignment_0; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_0_0() { return cIsSufficientAllKeyword_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1() { return cIdentificationParserRuleCall_1; }
		
		//( ownedRelationship += MultiplicityMember )?
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//MultiplicityMember
		public RuleCall getOwnedRelationshipMultiplicityMemberParserRuleCall_2_0() { return cOwnedRelationshipMultiplicityMemberParserRuleCall_2_0; }
		
		//( SuperclassingPart | ClassifierConjugationPart )?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//SuperclassingPart
		public RuleCall getSuperclassingPartParserRuleCall_3_0() { return cSuperclassingPartParserRuleCall_3_0; }
		
		//ClassifierConjugationPart
		public RuleCall getClassifierConjugationPartParserRuleCall_3_1() { return cClassifierConjugationPartParserRuleCall_3_1; }
	}
	public class SuperclassingPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.SuperclassingPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cColonGreaterThanSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSpecializesKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedsubclassificationParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedsubclassificationParserRuleCall_2_1_0 = (RuleCall)cOwnedRelationshipAssignment_2_1.eContents().get(0);
		
		//fragment SuperclassingPart returns SysML::Classifier :
		//    ( ':>' | 'specializes' ) ownedRelationship += Ownedsubclassification
		//    ( ',' ownedRelationship += Ownedsubclassification )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( ':>' | 'specializes' ) ownedRelationship += Ownedsubclassification
		//( ',' ownedRelationship += Ownedsubclassification )*
		public Group getGroup() { return cGroup; }
		
		//( ':>' | 'specializes' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//':>'
		public Keyword getColonGreaterThanSignKeyword_0_0() { return cColonGreaterThanSignKeyword_0_0; }
		
		//'specializes'
		public Keyword getSpecializesKeyword_0_1() { return cSpecializesKeyword_0_1; }
		
		//ownedRelationship += Ownedsubclassification
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//Ownedsubclassification
		public RuleCall getOwnedRelationshipOwnedsubclassificationParserRuleCall_1_0() { return cOwnedRelationshipOwnedsubclassificationParserRuleCall_1_0; }
		
		//( ',' ownedRelationship += Ownedsubclassification )*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//ownedRelationship += Ownedsubclassification
		public Assignment getOwnedRelationshipAssignment_2_1() { return cOwnedRelationshipAssignment_2_1; }
		
		//Ownedsubclassification
		public RuleCall getOwnedRelationshipOwnedsubclassificationParserRuleCall_2_1_0() { return cOwnedRelationshipOwnedsubclassificationParserRuleCall_2_1_0; }
	}
	public class ClassifierConjugationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ClassifierConjugationPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTildeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cConjugatesKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipClassifierConjugationParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		//fragment ClassifierConjugationPart returns SysML::Classifier :
		//    ( '~' | 'conjugates' ) ownedRelationship += ClassifierConjugation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( '~' | 'conjugates' ) ownedRelationship += ClassifierConjugation
		public Group getGroup() { return cGroup; }
		
		//( '~' | 'conjugates' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'~'
		public Keyword getTildeKeyword_0_0() { return cTildeKeyword_0_0; }
		
		//'conjugates'
		public Keyword getConjugatesKeyword_0_1() { return cConjugatesKeyword_0_1; }
		
		//ownedRelationship += ClassifierConjugation
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//ClassifierConjugation
		public RuleCall getOwnedRelationshipClassifierConjugationParserRuleCall_1_0() { return cOwnedRelationshipClassifierConjugationParserRuleCall_1_0; }
	}
	public class SubclassificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Subclassification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cSpecializationKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cSubclassifierKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSubclassifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSubclassifierClassifierCrossReference_2_0 = (CrossReference)cSubclassifierAssignment_2.eContents().get(0);
		private final RuleCall cSubclassifierClassifierQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cSubclassifierClassifierCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cColonGreaterThanSignKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cSpecializesKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cSuperclassifierAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSuperclassifierClassifierCrossReference_4_0 = (CrossReference)cSuperclassifierAssignment_4.eContents().get(0);
		private final RuleCall cSuperclassifierClassifierQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cSuperclassifierClassifierCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///* Superclassing */
		//Subclassification returns SysML::Subclassification :
		//    ( 'specialization' Identification? )?
		//    'subclassifier' subclassifier = [SysML::Classifier | QualifiedName]
		//    ( ':>' | 'specializes') superclassifier = [SysML::Classifier | QualifiedName] ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'specialization' Identification? )?
		//'subclassifier' subclassifier = [SysML::Classifier | QualifiedName]
		//( ':>' | 'specializes') superclassifier = [SysML::Classifier | QualifiedName] ';'
		public Group getGroup() { return cGroup; }
		
		//( 'specialization' Identification? )?
		public Group getGroup_0() { return cGroup_0; }
		
		//'specialization'
		public Keyword getSpecializationKeyword_0_0() { return cSpecializationKeyword_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_1() { return cIdentificationParserRuleCall_0_1; }
		
		//'subclassifier'
		public Keyword getSubclassifierKeyword_1() { return cSubclassifierKeyword_1; }
		
		//subclassifier = [SysML::Classifier | QualifiedName]
		public Assignment getSubclassifierAssignment_2() { return cSubclassifierAssignment_2; }
		
		//[SysML::Classifier | QualifiedName]
		public CrossReference getSubclassifierClassifierCrossReference_2_0() { return cSubclassifierClassifierCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getSubclassifierClassifierQualifiedNameParserRuleCall_2_0_1() { return cSubclassifierClassifierQualifiedNameParserRuleCall_2_0_1; }
		
		//( ':>' | 'specializes')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//':>'
		public Keyword getColonGreaterThanSignKeyword_3_0() { return cColonGreaterThanSignKeyword_3_0; }
		
		//'specializes'
		public Keyword getSpecializesKeyword_3_1() { return cSpecializesKeyword_3_1; }
		
		//superclassifier = [SysML::Classifier | QualifiedName]
		public Assignment getSuperclassifierAssignment_4() { return cSuperclassifierAssignment_4; }
		
		//[SysML::Classifier | QualifiedName]
		public CrossReference getSuperclassifierClassifierCrossReference_4_0() { return cSuperclassifierClassifierCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getSuperclassifierClassifierQualifiedNameParserRuleCall_4_0_1() { return cSuperclassifierClassifierQualifiedNameParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class OwnedsubclassificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Ownedsubclassification");
		private final Assignment cSuperclassifierAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSuperclassifierClassifierCrossReference_0 = (CrossReference)cSuperclassifierAssignment.eContents().get(0);
		private final RuleCall cSuperclassifierClassifierQualifiedNameParserRuleCall_0_1 = (RuleCall)cSuperclassifierClassifierCrossReference_0.eContents().get(1);
		
		//Ownedsubclassification returns SysML::Subclassification :
		//    superclassifier = [SysML::Classifier | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//superclassifier = [SysML::Classifier | QualifiedName]
		public Assignment getSuperclassifierAssignment() { return cSuperclassifierAssignment; }
		
		//[SysML::Classifier | QualifiedName]
		public CrossReference getSuperclassifierClassifierCrossReference_0() { return cSuperclassifierClassifierCrossReference_0; }
		
		//QualifiedName
		public RuleCall getSuperclassifierClassifierQualifiedNameParserRuleCall_0_1() { return cSuperclassifierClassifierQualifiedNameParserRuleCall_0_1; }
	}
	public class ClassifierConjugationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ClassifierConjugation");
		private final Assignment cOriginalTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cOriginalTypeClassifierCrossReference_0 = (CrossReference)cOriginalTypeAssignment.eContents().get(0);
		private final RuleCall cOriginalTypeClassifierQualifiedNameParserRuleCall_0_1 = (RuleCall)cOriginalTypeClassifierCrossReference_0.eContents().get(1);
		
		///* Classifier Conjugation */
		//ClassifierConjugation returns SysML::Conjugation :
		//    originalType = [SysML::Classifier | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//originalType = [SysML::Classifier | QualifiedName]
		public Assignment getOriginalTypeAssignment() { return cOriginalTypeAssignment; }
		
		//[SysML::Classifier | QualifiedName]
		public CrossReference getOriginalTypeClassifierCrossReference_0() { return cOriginalTypeClassifierCrossReference_0; }
		
		//QualifiedName
		public RuleCall getOriginalTypeClassifierQualifiedNameParserRuleCall_0_1() { return cOriginalTypeClassifierQualifiedNameParserRuleCall_0_1; }
	}
	public class FeaturePrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeaturePrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionFeatureDirectionEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cIsAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsAbstractAbstractKeyword_1_0 = (Keyword)cIsAbstractAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIsCompositeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cIsCompositeCompositeKeyword_2_0_0 = (Keyword)cIsCompositeAssignment_2_0.eContents().get(0);
		private final Assignment cIsPortionAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cIsPortionPortionKeyword_2_1_0 = (Keyword)cIsPortionAssignment_2_1.eContents().get(0);
		private final Assignment cIsEndAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cIsEndEndKeyword_3_0 = (Keyword)cIsEndAssignment_3.eContents().get(0);
		
		///* FEATURES */
		///* Features */
		//fragment FeaturePrefix returns SysML::Feature :
		//    ( direction = FeatureDirection )?
		//    ( isAbstract ?= 'abstract' )?
		//    ( isComposite ?= 'composite' | isPortion ?= 'portion' )?
		//    ( isEnd ?= 'end' )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( direction = FeatureDirection )?
		//( isAbstract ?= 'abstract' )?
		//( isComposite ?= 'composite' | isPortion ?= 'portion' )?
		//( isEnd ?= 'end' )?
		public Group getGroup() { return cGroup; }
		
		//( direction = FeatureDirection )?
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//FeatureDirection
		public RuleCall getDirectionFeatureDirectionEnumRuleCall_0_0() { return cDirectionFeatureDirectionEnumRuleCall_0_0; }
		
		//( isAbstract ?= 'abstract' )?
		public Assignment getIsAbstractAssignment_1() { return cIsAbstractAssignment_1; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_1_0() { return cIsAbstractAbstractKeyword_1_0; }
		
		//( isComposite ?= 'composite' | isPortion ?= 'portion' )?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//isComposite ?= 'composite'
		public Assignment getIsCompositeAssignment_2_0() { return cIsCompositeAssignment_2_0; }
		
		//'composite'
		public Keyword getIsCompositeCompositeKeyword_2_0_0() { return cIsCompositeCompositeKeyword_2_0_0; }
		
		//isPortion ?= 'portion'
		public Assignment getIsPortionAssignment_2_1() { return cIsPortionAssignment_2_1; }
		
		//'portion'
		public Keyword getIsPortionPortionKeyword_2_1_0() { return cIsPortionPortionKeyword_2_1_0; }
		
		//( isEnd ?= 'end' )?
		public Assignment getIsEndAssignment_3() { return cIsEndAssignment_3; }
		
		//'end'
		public Keyword getIsEndEndKeyword_3_0() { return cIsEndEndKeyword_3_0; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeaturePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cFeatureKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cFeatureDeclarationParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Keyword cFeatureKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cValuePartParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Feature returns SysML::Feature :
		//    FeaturePrefix
		//    ( 'feature'? FeatureDeclaration | 'feature' )
		//    ValuePart? TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeaturePrefix
		//( 'feature'? FeatureDeclaration | 'feature' )
		//ValuePart? TypeBody
		public Group getGroup() { return cGroup; }
		
		//FeaturePrefix
		public RuleCall getFeaturePrefixParserRuleCall_0() { return cFeaturePrefixParserRuleCall_0; }
		
		//( 'feature'? FeatureDeclaration | 'feature' )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'feature'? FeatureDeclaration
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'feature'?
		public Keyword getFeatureKeyword_1_0_0() { return cFeatureKeyword_1_0_0; }
		
		//FeatureDeclaration
		public RuleCall getFeatureDeclarationParserRuleCall_1_0_1() { return cFeatureDeclarationParserRuleCall_1_0_1; }
		
		//'feature'
		public Keyword getFeatureKeyword_1_1() { return cFeatureKeyword_1_1; }
		
		//ValuePart?
		public RuleCall getValuePartParserRuleCall_2() { return cValuePartParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class FeatureDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsSufficientAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsSufficientAllKeyword_0_0 = (Keyword)cIsSufficientAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final RuleCall cFeatureSpecializationPartParserRuleCall_1_0_1_0 = (RuleCall)cAlternatives_1_0_1.eContents().get(0);
		private final RuleCall cFeatureConjugationPartParserRuleCall_1_0_1_1 = (RuleCall)cAlternatives_1_0_1.eContents().get(1);
		private final RuleCall cFeatureSpecializationPartParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cFeatureConjugationPartParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cTypeFeaturingPartParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//fragment FeatureDeclaration returns SysML::Feature :
		//    ( isSufficient ?= 'all' )?
		//    ( Identification ( FeatureSpecializationPart | FeatureConjugationPart )?
		//    | FeatureSpecializationPart
		//    | FeatureConjugationPart
		//    ) TypeFeaturingPart?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( isSufficient ?= 'all' )?
		//( Identification ( FeatureSpecializationPart | FeatureConjugationPart )?
		//| FeatureSpecializationPart
		//| FeatureConjugationPart
		//) TypeFeaturingPart?
		public Group getGroup() { return cGroup; }
		
		//( isSufficient ?= 'all' )?
		public Assignment getIsSufficientAssignment_0() { return cIsSufficientAssignment_0; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_0_0() { return cIsSufficientAllKeyword_0_0; }
		
		//( Identification ( FeatureSpecializationPart | FeatureConjugationPart )?
		//| FeatureSpecializationPart
		//| FeatureConjugationPart
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Identification ( FeatureSpecializationPart | FeatureConjugationPart )?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//Identification
		public RuleCall getIdentificationParserRuleCall_1_0_0() { return cIdentificationParserRuleCall_1_0_0; }
		
		//( FeatureSpecializationPart | FeatureConjugationPart )?
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//FeatureSpecializationPart
		public RuleCall getFeatureSpecializationPartParserRuleCall_1_0_1_0() { return cFeatureSpecializationPartParserRuleCall_1_0_1_0; }
		
		//FeatureConjugationPart
		public RuleCall getFeatureConjugationPartParserRuleCall_1_0_1_1() { return cFeatureConjugationPartParserRuleCall_1_0_1_1; }
		
		//FeatureSpecializationPart
		public RuleCall getFeatureSpecializationPartParserRuleCall_1_1() { return cFeatureSpecializationPartParserRuleCall_1_1; }
		
		//FeatureConjugationPart
		public RuleCall getFeatureConjugationPartParserRuleCall_1_2() { return cFeatureConjugationPartParserRuleCall_1_2; }
		
		//TypeFeaturingPart?
		public RuleCall getTypeFeaturingPartParserRuleCall_2() { return cTypeFeaturingPartParserRuleCall_2; }
	}
	public class TypeFeaturingPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TypeFeaturingPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeaturedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelationshipOwnedTypeFeaturingParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedTypeFeaturingParserRuleCall_3_1_0 = (RuleCall)cOwnedRelationshipAssignment_3_1.eContents().get(0);
		
		//fragment TypeFeaturingPart returns SysML::Feature :
		//    'featured' 'by' ownedRelationship += OwnedTypeFeaturing
		//    ( ',' ownedRelationship += OwnedTypeFeaturing )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'featured' 'by' ownedRelationship += OwnedTypeFeaturing
		//( ',' ownedRelationship += OwnedTypeFeaturing )*
		public Group getGroup() { return cGroup; }
		
		//'featured'
		public Keyword getFeaturedKeyword_0() { return cFeaturedKeyword_0; }
		
		//'by'
		public Keyword getByKeyword_1() { return cByKeyword_1; }
		
		//ownedRelationship += OwnedTypeFeaturing
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//OwnedTypeFeaturing
		public RuleCall getOwnedRelationshipOwnedTypeFeaturingParserRuleCall_2_0() { return cOwnedRelationshipOwnedTypeFeaturingParserRuleCall_2_0; }
		
		//( ',' ownedRelationship += OwnedTypeFeaturing )*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//ownedRelationship += OwnedTypeFeaturing
		public Assignment getOwnedRelationshipAssignment_3_1() { return cOwnedRelationshipAssignment_3_1; }
		
		//OwnedTypeFeaturing
		public RuleCall getOwnedRelationshipOwnedTypeFeaturingParserRuleCall_3_1_0() { return cOwnedRelationshipOwnedTypeFeaturingParserRuleCall_3_1_0; }
	}
	public class FeatureSpecializationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureSpecializationPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureSpecializationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cMultiplicityPartParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cFeatureSpecializationParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cMultiplicityPartParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cFeatureSpecializationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//fragment FeatureSpecializationPart returns SysML::Feature :
		//      ( -> FeatureSpecialization )+ MultiplicityPart? FeatureSpecialization*
		//    | MultiplicityPart FeatureSpecialization*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ( -> FeatureSpecialization )+ MultiplicityPart? FeatureSpecialization*
		//| MultiplicityPart FeatureSpecialization*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//( -> FeatureSpecialization )+ MultiplicityPart? FeatureSpecialization*
		public Group getGroup_0() { return cGroup_0; }
		
		//( -> FeatureSpecialization )+
		public RuleCall getFeatureSpecializationParserRuleCall_0_0() { return cFeatureSpecializationParserRuleCall_0_0; }
		
		//MultiplicityPart?
		public RuleCall getMultiplicityPartParserRuleCall_0_1() { return cMultiplicityPartParserRuleCall_0_1; }
		
		//FeatureSpecialization*
		public RuleCall getFeatureSpecializationParserRuleCall_0_2() { return cFeatureSpecializationParserRuleCall_0_2; }
		
		//MultiplicityPart FeatureSpecialization*
		public Group getGroup_1() { return cGroup_1; }
		
		//MultiplicityPart
		public RuleCall getMultiplicityPartParserRuleCall_1_0() { return cMultiplicityPartParserRuleCall_1_0; }
		
		//FeatureSpecialization*
		public RuleCall getFeatureSpecializationParserRuleCall_1_1() { return cFeatureSpecializationParserRuleCall_1_1; }
	}
	public class MultiplicityPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MultiplicityPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationshipMultiplicityMemberParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cIsOrderedAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cIsOrderedOrderedKeyword_1_0_0_0 = (Keyword)cIsOrderedAssignment_1_0_0.eContents().get(0);
		private final Assignment cIsNonuniqueAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cIsNonuniqueNonuniqueKeyword_1_0_1_0 = (Keyword)cIsNonuniqueAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cIsNonuniqueAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cIsNonuniqueNonuniqueKeyword_1_1_0_0 = (Keyword)cIsNonuniqueAssignment_1_1_0.eContents().get(0);
		private final Assignment cIsOrderedAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cIsOrderedOrderedKeyword_1_1_1_0 = (Keyword)cIsOrderedAssignment_1_1_1.eContents().get(0);
		
		//fragment MultiplicityPart returns SysML::Feature :
		//    ownedRelationship += MultiplicityMember
		//    // NOTE: Can't use "&" here because of use of predication elsewhere.
		//    ( isOrdered ?= 'ordered' isNonunique ?= 'nonunique'?
		//    | isNonunique ?= 'nonunique' isOrdered ?= 'ordered'?
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += MultiplicityMember
		//// NOTE: Can't use "&" here because of use of predication elsewhere.
		//( isOrdered ?= 'ordered' isNonunique ?= 'nonunique'?
		//| isNonunique ?= 'nonunique' isOrdered ?= 'ordered'?
		//)?
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship += MultiplicityMember
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//MultiplicityMember
		public RuleCall getOwnedRelationshipMultiplicityMemberParserRuleCall_0_0() { return cOwnedRelationshipMultiplicityMemberParserRuleCall_0_0; }
		
		//// NOTE: Can't use "&" here because of use of predication elsewhere.
		//( isOrdered ?= 'ordered' isNonunique ?= 'nonunique'?
		//| isNonunique ?= 'nonunique' isOrdered ?= 'ordered'?
		//)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//isOrdered ?= 'ordered' isNonunique ?= 'nonunique'?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//isOrdered ?= 'ordered'
		public Assignment getIsOrderedAssignment_1_0_0() { return cIsOrderedAssignment_1_0_0; }
		
		//'ordered'
		public Keyword getIsOrderedOrderedKeyword_1_0_0_0() { return cIsOrderedOrderedKeyword_1_0_0_0; }
		
		//isNonunique ?= 'nonunique'?
		public Assignment getIsNonuniqueAssignment_1_0_1() { return cIsNonuniqueAssignment_1_0_1; }
		
		//'nonunique'
		public Keyword getIsNonuniqueNonuniqueKeyword_1_0_1_0() { return cIsNonuniqueNonuniqueKeyword_1_0_1_0; }
		
		//isNonunique ?= 'nonunique' isOrdered ?= 'ordered'?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//isNonunique ?= 'nonunique'
		public Assignment getIsNonuniqueAssignment_1_1_0() { return cIsNonuniqueAssignment_1_1_0; }
		
		//'nonunique'
		public Keyword getIsNonuniqueNonuniqueKeyword_1_1_0_0() { return cIsNonuniqueNonuniqueKeyword_1_1_0_0; }
		
		//isOrdered ?= 'ordered'?
		public Assignment getIsOrderedAssignment_1_1_1() { return cIsOrderedAssignment_1_1_1; }
		
		//'ordered'
		public Keyword getIsOrderedOrderedKeyword_1_1_1_0() { return cIsOrderedOrderedKeyword_1_1_1_0; }
	}
	public class FeatureSpecializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureSpecialization");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypingsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubsettingsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRedefinitionsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//fragment FeatureSpecialization returns SysML::Feature :
		//    Typings | Subsettings | Redefinitions
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Typings | Subsettings | Redefinitions
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Typings
		public RuleCall getTypingsParserRuleCall_0() { return cTypingsParserRuleCall_0; }
		
		//Subsettings
		public RuleCall getSubsettingsParserRuleCall_1() { return cSubsettingsParserRuleCall_1; }
		
		//Redefinitions
		public RuleCall getRedefinitionsParserRuleCall_2() { return cRedefinitionsParserRuleCall_2; }
	}
	public class TypingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Typings");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypedByParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedFeatureTypingParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1.eContents().get(0);
		
		//fragment Typings returns SysML::Feature :
		//    TypedBy ( ',' ownedRelationship += OwnedFeatureTyping )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypedBy ( ',' ownedRelationship += OwnedFeatureTyping )*
		public Group getGroup() { return cGroup; }
		
		//TypedBy
		public RuleCall getTypedByParserRuleCall_0() { return cTypedByParserRuleCall_0; }
		
		//( ',' ownedRelationship += OwnedFeatureTyping )*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ownedRelationship += OwnedFeatureTyping
		public Assignment getOwnedRelationshipAssignment_1_1() { return cOwnedRelationshipAssignment_1_1; }
		
		//OwnedFeatureTyping
		public RuleCall getOwnedRelationshipOwnedFeatureTypingParserRuleCall_1_1_0() { return cOwnedRelationshipOwnedFeatureTypingParserRuleCall_1_1_0; }
	}
	public class TypedByElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TypedBy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cTypedKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cByKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedFeatureTypingParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		//fragment TypedBy returns SysML::Feature :
		//    ( ':' | 'typed' 'by' ) ownedRelationship += OwnedFeatureTyping
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( ':' | 'typed' 'by' ) ownedRelationship += OwnedFeatureTyping
		public Group getGroup() { return cGroup; }
		
		//( ':' | 'typed' 'by' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//':'
		public Keyword getColonKeyword_0_0() { return cColonKeyword_0_0; }
		
		//'typed' 'by'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'typed'
		public Keyword getTypedKeyword_0_1_0() { return cTypedKeyword_0_1_0; }
		
		//'by'
		public Keyword getByKeyword_0_1_1() { return cByKeyword_0_1_1; }
		
		//ownedRelationship += OwnedFeatureTyping
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//OwnedFeatureTyping
		public RuleCall getOwnedRelationshipOwnedFeatureTypingParserRuleCall_1_0() { return cOwnedRelationshipOwnedFeatureTypingParserRuleCall_1_0; }
	}
	public class SubsettingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Subsettings");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubsetsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedSubsettingParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1.eContents().get(0);
		
		//fragment Subsettings returns SysML::Feature :
		//    Subsets ( ',' ownedRelationship += OwnedSubsetting )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Subsets ( ',' ownedRelationship += OwnedSubsetting )*
		public Group getGroup() { return cGroup; }
		
		//Subsets
		public RuleCall getSubsetsParserRuleCall_0() { return cSubsetsParserRuleCall_0; }
		
		//( ',' ownedRelationship += OwnedSubsetting )*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ownedRelationship += OwnedSubsetting
		public Assignment getOwnedRelationshipAssignment_1_1() { return cOwnedRelationshipAssignment_1_1; }
		
		//OwnedSubsetting
		public RuleCall getOwnedRelationshipOwnedSubsettingParserRuleCall_1_1_0() { return cOwnedRelationshipOwnedSubsettingParserRuleCall_1_1_0; }
	}
	public class SubsetsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Subsets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cColonGreaterThanSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSubsetsKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedSubsettingParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		//fragment Subsets returns SysML::Feature :
		//    ( ':>' | 'subsets' ) ownedRelationship += OwnedSubsetting
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( ':>' | 'subsets' ) ownedRelationship += OwnedSubsetting
		public Group getGroup() { return cGroup; }
		
		//( ':>' | 'subsets' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//':>'
		public Keyword getColonGreaterThanSignKeyword_0_0() { return cColonGreaterThanSignKeyword_0_0; }
		
		//'subsets'
		public Keyword getSubsetsKeyword_0_1() { return cSubsetsKeyword_0_1; }
		
		//ownedRelationship += OwnedSubsetting
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//OwnedSubsetting
		public RuleCall getOwnedRelationshipOwnedSubsettingParserRuleCall_1_0() { return cOwnedRelationshipOwnedSubsettingParserRuleCall_1_0; }
	}
	public class RedefinitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Redefinitions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRedefinesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedRedefinitionParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1.eContents().get(0);
		
		//fragment Redefinitions returns SysML::Feature :
		//    Redefines ( ',' ownedRelationship += OwnedRedefinition )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Redefines ( ',' ownedRelationship += OwnedRedefinition )*
		public Group getGroup() { return cGroup; }
		
		//Redefines
		public RuleCall getRedefinesParserRuleCall_0() { return cRedefinesParserRuleCall_0; }
		
		//( ',' ownedRelationship += OwnedRedefinition )*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ownedRelationship += OwnedRedefinition
		public Assignment getOwnedRelationshipAssignment_1_1() { return cOwnedRelationshipAssignment_1_1; }
		
		//OwnedRedefinition
		public RuleCall getOwnedRelationshipOwnedRedefinitionParserRuleCall_1_1_0() { return cOwnedRelationshipOwnedRedefinitionParserRuleCall_1_1_0; }
	}
	public class RedefinesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Redefines");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cColonGreaterThanSignGreaterThanSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRedefinesKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedRedefinitionParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		//fragment Redefines returns SysML::Feature :
		//    ( ':>>' | 'redefines' ) ownedRelationship += OwnedRedefinition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( ':>>' | 'redefines' ) ownedRelationship += OwnedRedefinition
		public Group getGroup() { return cGroup; }
		
		//( ':>>' | 'redefines' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//':>>'
		public Keyword getColonGreaterThanSignGreaterThanSignKeyword_0_0() { return cColonGreaterThanSignGreaterThanSignKeyword_0_0; }
		
		//'redefines'
		public Keyword getRedefinesKeyword_0_1() { return cRedefinesKeyword_0_1; }
		
		//ownedRelationship += OwnedRedefinition
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//OwnedRedefinition
		public RuleCall getOwnedRelationshipOwnedRedefinitionParserRuleCall_1_0() { return cOwnedRelationshipOwnedRedefinitionParserRuleCall_1_0; }
	}
	public class TypeFeaturingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.TypeFeaturing");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeaturingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cIdentificationParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cOfKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFeatureOfTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFeatureOfTypeFeatureCrossReference_2_0 = (CrossReference)cFeatureOfTypeAssignment_2.eContents().get(0);
		private final RuleCall cFeatureOfTypeFeatureQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cFeatureOfTypeFeatureCrossReference_2_0.eContents().get(1);
		private final Keyword cByKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturingTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cFeaturingTypeFeatureCrossReference_4_0 = (CrossReference)cFeaturingTypeAssignment_4.eContents().get(0);
		private final RuleCall cFeaturingTypeFeatureQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cFeaturingTypeFeatureCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///* Type Featuring */
		//TypeFeaturing returns SysML::TypeFeaturing :
		//    'featuring' ( Identification? 'of')?
		//    featureOfType = [SysML::Feature | QualifiedName]
		//    'by' featuringType = [SysML::Feature | QualifiedName] ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'featuring' ( Identification? 'of')?
		//featureOfType = [SysML::Feature | QualifiedName]
		//'by' featuringType = [SysML::Feature | QualifiedName] ';'
		public Group getGroup() { return cGroup; }
		
		//'featuring'
		public Keyword getFeaturingKeyword_0() { return cFeaturingKeyword_0; }
		
		//( Identification? 'of')?
		public Group getGroup_1() { return cGroup_1; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_1_0() { return cIdentificationParserRuleCall_1_0; }
		
		//'of'
		public Keyword getOfKeyword_1_1() { return cOfKeyword_1_1; }
		
		//featureOfType = [SysML::Feature | QualifiedName]
		public Assignment getFeatureOfTypeAssignment_2() { return cFeatureOfTypeAssignment_2; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getFeatureOfTypeFeatureCrossReference_2_0() { return cFeatureOfTypeFeatureCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getFeatureOfTypeFeatureQualifiedNameParserRuleCall_2_0_1() { return cFeatureOfTypeFeatureQualifiedNameParserRuleCall_2_0_1; }
		
		//'by'
		public Keyword getByKeyword_3() { return cByKeyword_3; }
		
		//featuringType = [SysML::Feature | QualifiedName]
		public Assignment getFeaturingTypeAssignment_4() { return cFeaturingTypeAssignment_4; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getFeaturingTypeFeatureCrossReference_4_0() { return cFeaturingTypeFeatureCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getFeaturingTypeFeatureQualifiedNameParserRuleCall_4_0_1() { return cFeaturingTypeFeatureQualifiedNameParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class OwnedTypeFeaturingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedTypeFeaturing");
		private final Assignment cFeaturingTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFeaturingTypeTypeCrossReference_0 = (CrossReference)cFeaturingTypeAssignment.eContents().get(0);
		private final RuleCall cFeaturingTypeTypeQualifiedNameParserRuleCall_0_1 = (RuleCall)cFeaturingTypeTypeCrossReference_0.eContents().get(1);
		
		//OwnedTypeFeaturing returns SysML::TypeFeaturing :
		//    featuringType = [SysML::Type | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//featuringType = [SysML::Type | QualifiedName]
		public Assignment getFeaturingTypeAssignment() { return cFeaturingTypeAssignment; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getFeaturingTypeTypeCrossReference_0() { return cFeaturingTypeTypeCrossReference_0; }
		
		//QualifiedName
		public RuleCall getFeaturingTypeTypeQualifiedNameParserRuleCall_0_1() { return cFeaturingTypeTypeQualifiedNameParserRuleCall_0_1; }
	}
	public class FeatureTypingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureTyping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cGeneralizationKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cTypingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypedFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypedFeatureFeatureCrossReference_2_0 = (CrossReference)cTypedFeatureAssignment_2.eContents().get(0);
		private final RuleCall cTypedFeatureFeatureQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypedFeatureFeatureCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cTypedKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cByKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeFeatureCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeFeatureQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cTypeFeatureCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///* Feature Typing */
		//FeatureTyping returns SysML::FeatureTyping :
		//    ( 'generalization' Identification? )?
		//    'typing' typedFeature = [SysML::Feature | QualifiedName]
		//    (':' | 'typed' 'by') type = [SysML::Feature | QualifiedName] ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'generalization' Identification? )?
		//'typing' typedFeature = [SysML::Feature | QualifiedName]
		//(':' | 'typed' 'by') type = [SysML::Feature | QualifiedName] ';'
		public Group getGroup() { return cGroup; }
		
		//( 'generalization' Identification? )?
		public Group getGroup_0() { return cGroup_0; }
		
		//'generalization'
		public Keyword getGeneralizationKeyword_0_0() { return cGeneralizationKeyword_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_1() { return cIdentificationParserRuleCall_0_1; }
		
		//'typing'
		public Keyword getTypingKeyword_1() { return cTypingKeyword_1; }
		
		//typedFeature = [SysML::Feature | QualifiedName]
		public Assignment getTypedFeatureAssignment_2() { return cTypedFeatureAssignment_2; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getTypedFeatureFeatureCrossReference_2_0() { return cTypedFeatureFeatureCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getTypedFeatureFeatureQualifiedNameParserRuleCall_2_0_1() { return cTypedFeatureFeatureQualifiedNameParserRuleCall_2_0_1; }
		
		//(':' | 'typed' 'by')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//'typed' 'by'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'typed'
		public Keyword getTypedKeyword_3_1_0() { return cTypedKeyword_3_1_0; }
		
		//'by'
		public Keyword getByKeyword_3_1_1() { return cByKeyword_3_1_1; }
		
		//type = [SysML::Feature | QualifiedName]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getTypeFeatureCrossReference_4_0() { return cTypeFeatureCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getTypeFeatureQualifiedNameParserRuleCall_4_0_1() { return cTypeFeatureQualifiedNameParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class OwnedFeatureTypingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedFeatureTyping");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_0_1 = (RuleCall)cTypeTypeCrossReference_0.eContents().get(1);
		
		//@Override
		//OwnedFeatureTyping returns SysML::FeatureTyping :
		//    type = [SysML::Type | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = [SysML::Type | QualifiedName]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getTypeTypeCrossReference_0() { return cTypeTypeCrossReference_0; }
		
		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_0_1() { return cTypeTypeQualifiedNameParserRuleCall_0_1; }
	}
	public class SubsettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Subsetting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cSpecializationKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cSubsetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSubsettingFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSubsettingFeatureFeatureCrossReference_2_0 = (CrossReference)cSubsettingFeatureAssignment_2.eContents().get(0);
		private final RuleCall cSubsettingFeatureFeatureQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cSubsettingFeatureFeatureCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cColonGreaterThanSignKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cSubsetsKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cSubsettedFeatureAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSubsettedFeatureFeatureCrossReference_4_0 = (CrossReference)cSubsettedFeatureAssignment_4.eContents().get(0);
		private final RuleCall cSubsettedFeatureFeatureQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cSubsettedFeatureFeatureCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///* Subsetting */
		//Subsetting returns SysML::Subsetting :
		//    ( 'specialization' Identification? )?
		//    'subset' subsettingFeature = [SysML::Feature | QualifiedName]
		//    ( ':>' | 'subsets' ) subsettedFeature = [SysML::Feature | QualifiedName] ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'specialization' Identification? )?
		//'subset' subsettingFeature = [SysML::Feature | QualifiedName]
		//( ':>' | 'subsets' ) subsettedFeature = [SysML::Feature | QualifiedName] ';'
		public Group getGroup() { return cGroup; }
		
		//( 'specialization' Identification? )?
		public Group getGroup_0() { return cGroup_0; }
		
		//'specialization'
		public Keyword getSpecializationKeyword_0_0() { return cSpecializationKeyword_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_1() { return cIdentificationParserRuleCall_0_1; }
		
		//'subset'
		public Keyword getSubsetKeyword_1() { return cSubsetKeyword_1; }
		
		//subsettingFeature = [SysML::Feature | QualifiedName]
		public Assignment getSubsettingFeatureAssignment_2() { return cSubsettingFeatureAssignment_2; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getSubsettingFeatureFeatureCrossReference_2_0() { return cSubsettingFeatureFeatureCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getSubsettingFeatureFeatureQualifiedNameParserRuleCall_2_0_1() { return cSubsettingFeatureFeatureQualifiedNameParserRuleCall_2_0_1; }
		
		//( ':>' | 'subsets' )
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//':>'
		public Keyword getColonGreaterThanSignKeyword_3_0() { return cColonGreaterThanSignKeyword_3_0; }
		
		//'subsets'
		public Keyword getSubsetsKeyword_3_1() { return cSubsetsKeyword_3_1; }
		
		//subsettedFeature = [SysML::Feature | QualifiedName]
		public Assignment getSubsettedFeatureAssignment_4() { return cSubsettedFeatureAssignment_4; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getSubsettedFeatureFeatureCrossReference_4_0() { return cSubsettedFeatureFeatureCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getSubsettedFeatureFeatureQualifiedNameParserRuleCall_4_0_1() { return cSubsettedFeatureFeatureQualifiedNameParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class OwnedSubsettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedSubsetting");
		private final Assignment cSubsettedFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSubsettedFeatureFeatureCrossReference_0 = (CrossReference)cSubsettedFeatureAssignment.eContents().get(0);
		private final RuleCall cSubsettedFeatureFeatureQualifiedNameParserRuleCall_0_1 = (RuleCall)cSubsettedFeatureFeatureCrossReference_0.eContents().get(1);
		
		//OwnedSubsetting returns SysML::Subsetting:
		//    subsettedFeature = [SysML::Feature|QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//subsettedFeature = [SysML::Feature|QualifiedName]
		public Assignment getSubsettedFeatureAssignment() { return cSubsettedFeatureAssignment; }
		
		//[SysML::Feature|QualifiedName]
		public CrossReference getSubsettedFeatureFeatureCrossReference_0() { return cSubsettedFeatureFeatureCrossReference_0; }
		
		//QualifiedName
		public RuleCall getSubsettedFeatureFeatureQualifiedNameParserRuleCall_0_1() { return cSubsettedFeatureFeatureQualifiedNameParserRuleCall_0_1; }
	}
	public class RedefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Redefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cSpecializationKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRedefinitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRedefiningFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRedefiningFeatureFeatureCrossReference_2_0 = (CrossReference)cRedefiningFeatureAssignment_2.eContents().get(0);
		private final RuleCall cRedefiningFeatureFeatureQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cRedefiningFeatureFeatureCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cColonGreaterThanSignGreaterThanSignKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cRedefinesKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cRedefinedFeatureAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRedefinedFeatureFeatureCrossReference_4_0 = (CrossReference)cRedefinedFeatureAssignment_4.eContents().get(0);
		private final RuleCall cRedefinedFeatureFeatureQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cRedefinedFeatureFeatureCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///* Redefinition */
		//Redefinition returns SysML::Redefinition :
		//    ( 'specialization' Identification? )?
		//    'redefinition' redefiningFeature = [SysML::Feature | QualifiedName]
		//    ( ':>>' | 'redefines' ) redefinedFeature = [SysML::Feature | QualifiedName] ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'specialization' Identification? )?
		//'redefinition' redefiningFeature = [SysML::Feature | QualifiedName]
		//( ':>>' | 'redefines' ) redefinedFeature = [SysML::Feature | QualifiedName] ';'
		public Group getGroup() { return cGroup; }
		
		//( 'specialization' Identification? )?
		public Group getGroup_0() { return cGroup_0; }
		
		//'specialization'
		public Keyword getSpecializationKeyword_0_0() { return cSpecializationKeyword_0_0; }
		
		//Identification?
		public RuleCall getIdentificationParserRuleCall_0_1() { return cIdentificationParserRuleCall_0_1; }
		
		//'redefinition'
		public Keyword getRedefinitionKeyword_1() { return cRedefinitionKeyword_1; }
		
		//redefiningFeature = [SysML::Feature | QualifiedName]
		public Assignment getRedefiningFeatureAssignment_2() { return cRedefiningFeatureAssignment_2; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getRedefiningFeatureFeatureCrossReference_2_0() { return cRedefiningFeatureFeatureCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getRedefiningFeatureFeatureQualifiedNameParserRuleCall_2_0_1() { return cRedefiningFeatureFeatureQualifiedNameParserRuleCall_2_0_1; }
		
		//( ':>>' | 'redefines' )
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//':>>'
		public Keyword getColonGreaterThanSignGreaterThanSignKeyword_3_0() { return cColonGreaterThanSignGreaterThanSignKeyword_3_0; }
		
		//'redefines'
		public Keyword getRedefinesKeyword_3_1() { return cRedefinesKeyword_3_1; }
		
		//redefinedFeature = [SysML::Feature | QualifiedName]
		public Assignment getRedefinedFeatureAssignment_4() { return cRedefinedFeatureAssignment_4; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getRedefinedFeatureFeatureCrossReference_4_0() { return cRedefinedFeatureFeatureCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getRedefinedFeatureFeatureQualifiedNameParserRuleCall_4_0_1() { return cRedefinedFeatureFeatureQualifiedNameParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class OwnedRedefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.OwnedRedefinition");
		private final Assignment cRedefinedFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRedefinedFeatureFeatureCrossReference_0 = (CrossReference)cRedefinedFeatureAssignment.eContents().get(0);
		private final RuleCall cRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1 = (RuleCall)cRedefinedFeatureFeatureCrossReference_0.eContents().get(1);
		
		//OwnedRedefinition returns SysML::Redefinition:
		//    redefinedFeature = [SysML::Feature | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//redefinedFeature = [SysML::Feature | QualifiedName]
		public Assignment getRedefinedFeatureAssignment() { return cRedefinedFeatureAssignment; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getRedefinedFeatureFeatureCrossReference_0() { return cRedefinedFeatureFeatureCrossReference_0; }
		
		//QualifiedName
		public RuleCall getRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1() { return cRedefinedFeatureFeatureQualifiedNameParserRuleCall_0_1; }
	}
	public class FeatureConjugationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureConjugationPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTildeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cConjugatesKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipFeatureConjugationParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		///* Feature Conjugation */
		//fragment FeatureConjugationPart returns SysML::Feature :
		//    ( '~' | 'conjugates' ) ownedRelationship += FeatureConjugation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( '~' | 'conjugates' ) ownedRelationship += FeatureConjugation
		public Group getGroup() { return cGroup; }
		
		//( '~' | 'conjugates' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'~'
		public Keyword getTildeKeyword_0_0() { return cTildeKeyword_0_0; }
		
		//'conjugates'
		public Keyword getConjugatesKeyword_0_1() { return cConjugatesKeyword_0_1; }
		
		//ownedRelationship += FeatureConjugation
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//FeatureConjugation
		public RuleCall getOwnedRelationshipFeatureConjugationParserRuleCall_1_0() { return cOwnedRelationshipFeatureConjugationParserRuleCall_1_0; }
	}
	public class FeatureConjugationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureConjugation");
		private final Assignment cOriginalTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cOriginalTypeFeatureCrossReference_0 = (CrossReference)cOriginalTypeAssignment.eContents().get(0);
		private final RuleCall cOriginalTypeFeatureQualifiedNameParserRuleCall_0_1 = (RuleCall)cOriginalTypeFeatureCrossReference_0.eContents().get(1);
		
		//FeatureConjugation returns SysML::Conjugation :
		//    originalType = [SysML::Feature | QualifiedName ]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//originalType = [SysML::Feature | QualifiedName ]
		public Assignment getOriginalTypeAssignment() { return cOriginalTypeAssignment; }
		
		//[SysML::Feature | QualifiedName ]
		public CrossReference getOriginalTypeFeatureCrossReference_0() { return cOriginalTypeFeatureCrossReference_0; }
		
		//QualifiedName
		public RuleCall getOriginalTypeFeatureQualifiedNameParserRuleCall_0_1() { return cOriginalTypeFeatureQualifiedNameParserRuleCall_0_1; }
	}
	public class ValuePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ValuePart");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipFeatureValueParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		///* FEATURE VALUES */
		//fragment ValuePart returns SysML::Feature :
		//    ownedRelationship += FeatureValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += FeatureValue
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//FeatureValue
		public RuleCall getOwnedRelationshipFeatureValueParserRuleCall_0() { return cOwnedRelationshipFeatureValueParserRuleCall_0; }
	}
	public class FeatureValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cIsDefaultAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cIsDefaultDefaultKeyword_0_1_0_0 = (Keyword)cIsDefaultAssignment_0_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedExpressionParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//FeatureValue returns SysML::FeatureValue :
		//    ( '=' | isDefault ?= 'default' '='? )
		//    ownedRelatedElement += OwnedExpression // value = OwnedExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( '=' | isDefault ?= 'default' '='? )
		//ownedRelatedElement += OwnedExpression
		public Group getGroup() { return cGroup; }
		
		//( '=' | isDefault ?= 'default' '='? )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_0() { return cEqualsSignKeyword_0_0; }
		
		//isDefault ?= 'default' '='?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//isDefault ?= 'default'
		public Assignment getIsDefaultAssignment_0_1_0() { return cIsDefaultAssignment_0_1_0; }
		
		//'default'
		public Keyword getIsDefaultDefaultKeyword_0_1_0_0() { return cIsDefaultDefaultKeyword_0_1_0_0; }
		
		//'='?
		public Keyword getEqualsSignKeyword_0_1_1() { return cEqualsSignKeyword_0_1_1; }
		
		//ownedRelatedElement += OwnedExpression
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//OwnedExpression
		public RuleCall getOwnedRelatedElementOwnedExpressionParserRuleCall_1_0() { return cOwnedRelatedElementOwnedExpressionParserRuleCall_1_0; }
	}
	public class MultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Multiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipMultiplicityExpressionMemberParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedRelationshipMultiplicityExpressionMemberParserRuleCall_2_1_0 = (RuleCall)cOwnedRelationshipAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///* MULTIPLICITIES */
		//Multiplicity returns SysML::MultiplicityRange :
		//    // TODO: Allow general expressions for bounds. (Causes LL parsing issues.)
		//    '[' ownedRelationship += MultiplicityExpressionMember
		//          ( '..' ownedRelationship += MultiplicityExpressionMember )? ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// TODO: Allow general expressions for bounds. (Causes LL parsing issues.)
		//'[' ownedRelationship += MultiplicityExpressionMember
		//      ( '..' ownedRelationship += MultiplicityExpressionMember )? ']'
		public Group getGroup() { return cGroup; }
		
		//// TODO: Allow general expressions for bounds. (Causes LL parsing issues.)
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//ownedRelationship += MultiplicityExpressionMember
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//MultiplicityExpressionMember
		public RuleCall getOwnedRelationshipMultiplicityExpressionMemberParserRuleCall_1_0() { return cOwnedRelationshipMultiplicityExpressionMemberParserRuleCall_1_0; }
		
		//( '..' ownedRelationship += MultiplicityExpressionMember )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_2_0() { return cFullStopFullStopKeyword_2_0; }
		
		//ownedRelationship += MultiplicityExpressionMember
		public Assignment getOwnedRelationshipAssignment_2_1() { return cOwnedRelationshipAssignment_2_1; }
		
		//MultiplicityExpressionMember
		public RuleCall getOwnedRelationshipMultiplicityExpressionMemberParserRuleCall_2_1_0() { return cOwnedRelationshipMultiplicityExpressionMemberParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class MultiplicityExpressionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.MultiplicityExpressionMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOwnedRelatedElementAlternatives_0 = (Alternatives)cOwnedRelatedElementAssignment.eContents().get(0);
		private final RuleCall cOwnedRelatedElementLiteralExpressionParserRuleCall_0_0 = (RuleCall)cOwnedRelatedElementAlternatives_0.eContents().get(0);
		private final RuleCall cOwnedRelatedElementFeatureReferenceExpressionParserRuleCall_0_1 = (RuleCall)cOwnedRelatedElementAlternatives_0.eContents().get(1);
		
		//MultiplicityExpressionMember returns SysML::Membership :
		//    ownedRelatedElement += ( LiteralExpression | FeatureReferenceExpression ) // ownedMemberElement = ( LiteralExpression | FeatureReferenceExpression )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += ( LiteralExpression | FeatureReferenceExpression )
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//( LiteralExpression | FeatureReferenceExpression )
		public Alternatives getOwnedRelatedElementAlternatives_0() { return cOwnedRelatedElementAlternatives_0; }
		
		//LiteralExpression
		public RuleCall getOwnedRelatedElementLiteralExpressionParserRuleCall_0_0() { return cOwnedRelatedElementLiteralExpressionParserRuleCall_0_0; }
		
		//FeatureReferenceExpression
		public RuleCall getOwnedRelatedElementFeatureReferenceExpressionParserRuleCall_0_1() { return cOwnedRelatedElementFeatureReferenceExpressionParserRuleCall_0_1; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cDatatypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* CLASSIFICATION */
		///* Data Types */
		//DataType returns SysML::DataType :
		//    ( isAbstract ?= 'abstract' )? 'datatype'
		//    ClassifierDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( isAbstract ?= 'abstract' )? 'datatype'
		//ClassifierDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//( isAbstract ?= 'abstract' )?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_1() { return cDatatypeKeyword_1; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_2() { return cClassifierDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* Classes */
		//Class returns SysML::Class :
		//    ( isAbstract ?= 'abstract' )? 'class'
		//    ClassifierDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( isAbstract ?= 'abstract' )? 'class'
		//ClassifierDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//( isAbstract ?= 'abstract' )?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_2() { return cClassifierDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class StructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Structure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cStructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* STRUCTURES */
		//Structure returns SysML::Structure :
		//    ( isAbstract ?= 'abstract' )? 'struct'
		//    ClassifierDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( isAbstract ?= 'abstract' )? 'struct'
		//ClassifierDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//( isAbstract ?= 'abstract' )?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'struct'
		public Keyword getStructKeyword_1() { return cStructKeyword_1; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_2() { return cClassifierDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cAssocKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cClassifierDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* ASSOCIATIONS */
		//Association returns SysML::Association :
		//    ( isAbstract ?= 'abstract' )? 'assoc'
		//    ClassifierDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( isAbstract ?= 'abstract' )? 'assoc'
		//ClassifierDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//( isAbstract ?= 'abstract' )?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'assoc'
		public Keyword getAssocKeyword_1() { return cAssocKeyword_1; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_2() { return cClassifierDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class AssociationStructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.AssociationStructure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cAssocKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStructKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cClassifierDeclarationParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cTypeBodyParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//AssociationStructure returns SysML::AssociationStructure :
		//    ( isAbstract ?= 'abstract' )? 'assoc' 'struct'
		//    ClassifierDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( isAbstract ?= 'abstract' )? 'assoc' 'struct'
		//ClassifierDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//( isAbstract ?= 'abstract' )?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'assoc'
		public Keyword getAssocKeyword_1() { return cAssocKeyword_1; }
		
		//'struct'
		public Keyword getStructKeyword_2() { return cStructKeyword_2; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_3() { return cClassifierDeclarationParserRuleCall_3; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_4() { return cTypeBodyParserRuleCall_4; }
	}
	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Connector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeaturePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cConnectorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cConnectorDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* CONNECTORS */
		///* Connectors */
		//Connector returns SysML::Connector :
		//    FeaturePrefix 'connector'
		//    ConnectorDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeaturePrefix 'connector'
		//ConnectorDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//FeaturePrefix
		public RuleCall getFeaturePrefixParserRuleCall_0() { return cFeaturePrefixParserRuleCall_0; }
		
		//'connector'
		public Keyword getConnectorKeyword_1() { return cConnectorKeyword_1; }
		
		//ConnectorDeclaration
		public RuleCall getConnectorDeclarationParserRuleCall_2() { return cConnectorDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class ConnectorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ConnectorDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBinaryConnectorDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNaryConnectorDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//fragment ConnectorDeclaration returns SysML::Connector :
		//    BinaryConnectorDeclaration | NaryConnectorDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BinaryConnectorDeclaration | NaryConnectorDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BinaryConnectorDeclaration
		public RuleCall getBinaryConnectorDeclarationParserRuleCall_0() { return cBinaryConnectorDeclarationParserRuleCall_0; }
		
		//NaryConnectorDeclaration
		public RuleCall getNaryConnectorDeclarationParserRuleCall_1() { return cNaryConnectorDeclarationParserRuleCall_1; }
	}
	public class BinaryConnectorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BinaryConnectorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cFeatureDeclarationParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cFromKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cIsSufficientAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cIsSufficientAllKeyword_0_1_0_0 = (Keyword)cIsSufficientAssignment_0_1_0.eContents().get(0);
		private final Keyword cFromKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnedRelationshipAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_3_0 = (RuleCall)cOwnedRelationshipAssignment_3.eContents().get(0);
		
		//fragment BinaryConnectorDeclaration returns SysML::Connector :
		//    ( FeatureDeclaration? 'from' | isSufficient ?= 'all' 'from'? )?
		//    ownedRelationship += ConnectorEndMember 'to'
		//    ownedRelationship += ConnectorEndMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( FeatureDeclaration? 'from' | isSufficient ?= 'all' 'from'? )?
		//ownedRelationship += ConnectorEndMember 'to'
		//ownedRelationship += ConnectorEndMember
		public Group getGroup() { return cGroup; }
		
		//( FeatureDeclaration? 'from' | isSufficient ?= 'all' 'from'? )?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//FeatureDeclaration? 'from'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//FeatureDeclaration?
		public RuleCall getFeatureDeclarationParserRuleCall_0_0_0() { return cFeatureDeclarationParserRuleCall_0_0_0; }
		
		//'from'
		public Keyword getFromKeyword_0_0_1() { return cFromKeyword_0_0_1; }
		
		//isSufficient ?= 'all' 'from'?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//isSufficient ?= 'all'
		public Assignment getIsSufficientAssignment_0_1_0() { return cIsSufficientAssignment_0_1_0; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_0_1_0_0() { return cIsSufficientAllKeyword_0_1_0_0; }
		
		//'from'?
		public Keyword getFromKeyword_0_1_1() { return cFromKeyword_0_1_1; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_1_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_3() { return cOwnedRelationshipAssignment_3; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_3_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_3_0; }
	}
	public class NaryConnectorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.NaryConnectorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeatureDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOwnedRelationshipAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_4_0 = (RuleCall)cOwnedRelationshipAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_5_1_0 = (RuleCall)cOwnedRelationshipAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//fragment NaryConnectorDeclaration returns SysML::Connector :
		//    FeatureDeclaration?
		//    '(' ownedRelationship += ConnectorEndMember ','
		//        ownedRelationship += ConnectorEndMember
		//        ( ',' ownedRelationship += ConnectorEndMember )* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureDeclaration?
		//'(' ownedRelationship += ConnectorEndMember ','
		//    ownedRelationship += ConnectorEndMember
		//    ( ',' ownedRelationship += ConnectorEndMember )* ')'
		public Group getGroup() { return cGroup; }
		
		//FeatureDeclaration?
		public RuleCall getFeatureDeclarationParserRuleCall_0() { return cFeatureDeclarationParserRuleCall_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_2_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_4() { return cOwnedRelationshipAssignment_4; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_4_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_4_0; }
		
		//( ',' ownedRelationship += ConnectorEndMember )*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_5_1() { return cOwnedRelationshipAssignment_5_1; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_5_1_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ConnectorEndMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ConnectorEndMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cMemberNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cMemberNameNameParserRuleCall_0_0_0 = (RuleCall)cMemberNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelatedElementConnectorEndParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//ConnectorEndMember returns SysML::EndFeatureMembership :
		//    ( memberName = Name '=>' )? ownedRelatedElement += ConnectorEnd // ownedMemberFeature = ConnectorEnd
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( memberName = Name '=>' )? ownedRelatedElement += ConnectorEnd
		public Group getGroup() { return cGroup; }
		
		//( memberName = Name '=>' )?
		public Group getGroup_0() { return cGroup_0; }
		
		//memberName = Name
		public Assignment getMemberNameAssignment_0_0() { return cMemberNameAssignment_0_0; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_0_0_0() { return cMemberNameNameParserRuleCall_0_0_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_0_1() { return cEqualsSignGreaterThanSignKeyword_0_1; }
		
		//ownedRelatedElement += ConnectorEnd
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//ConnectorEnd
		public RuleCall getOwnedRelatedElementConnectorEndParserRuleCall_1_0() { return cOwnedRelatedElementConnectorEndParserRuleCall_1_0; }
	}
	public class ConnectorEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ConnectorEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOwnedRelationshipAlternatives_0_0 = (Alternatives)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final RuleCall cOwnedRelationshipOwnedSubsettingParserRuleCall_0_0_0 = (RuleCall)cOwnedRelationshipAlternatives_0_0.eContents().get(0);
		private final RuleCall cOwnedRelationshipFeaturePathExpressionMemberParserRuleCall_0_0_1 = (RuleCall)cOwnedRelationshipAlternatives_0_0.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipMultiplicityMemberParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		
		//ConnectorEnd returns SysML::Feature :
		//    ownedRelationship += ( OwnedSubsetting | FeaturePathExpressionMember )
		//    ( ownedRelationship += MultiplicityMember )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += ( OwnedSubsetting | FeaturePathExpressionMember )
		//( ownedRelationship += MultiplicityMember )?
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship += ( OwnedSubsetting | FeaturePathExpressionMember )
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//( OwnedSubsetting | FeaturePathExpressionMember )
		public Alternatives getOwnedRelationshipAlternatives_0_0() { return cOwnedRelationshipAlternatives_0_0; }
		
		//OwnedSubsetting
		public RuleCall getOwnedRelationshipOwnedSubsettingParserRuleCall_0_0_0() { return cOwnedRelationshipOwnedSubsettingParserRuleCall_0_0_0; }
		
		//FeaturePathExpressionMember
		public RuleCall getOwnedRelationshipFeaturePathExpressionMemberParserRuleCall_0_0_1() { return cOwnedRelationshipFeaturePathExpressionMemberParserRuleCall_0_0_1; }
		
		//( ownedRelationship += MultiplicityMember )?
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//MultiplicityMember
		public RuleCall getOwnedRelationshipMultiplicityMemberParserRuleCall_1_0() { return cOwnedRelationshipMultiplicityMemberParserRuleCall_1_0; }
	}
	public class FeaturePathExpressionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeaturePathExpressionMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementFeaturePathExpressionParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//FeaturePathExpressionMember returns SysML::FeatureMembership :
		//    ownedRelatedElement += FeaturePathExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += FeaturePathExpression
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//FeaturePathExpression
		public RuleCall getOwnedRelatedElementFeaturePathExpressionParserRuleCall_0() { return cOwnedRelatedElementFeaturePathExpressionParserRuleCall_0; }
	}
	public class FeaturePathExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeaturePathExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeatureReferenceExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPathStepExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandFeatureReferenceExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//FeaturePathExpression returns SysML::Expression :
		//    FeatureReferenceExpression
		//    ( {SysML::PathStepExpression.operand += current}
		//      '.' operand += FeatureReferenceExpression )+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureReferenceExpression
		//( {SysML::PathStepExpression.operand += current}
		//  '.' operand += FeatureReferenceExpression )+
		public Group getGroup() { return cGroup; }
		
		//FeatureReferenceExpression
		public RuleCall getFeatureReferenceExpressionParserRuleCall_0() { return cFeatureReferenceExpressionParserRuleCall_0; }
		
		//( {SysML::PathStepExpression.operand += current}
		//  '.' operand += FeatureReferenceExpression )+
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::PathStepExpression.operand += current}
		public Action getPathStepExpressionOperandAction_1_0() { return cPathStepExpressionOperandAction_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//operand += FeatureReferenceExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//FeatureReferenceExpression
		public RuleCall getOperandFeatureReferenceExpressionParserRuleCall_1_2_0() { return cOperandFeatureReferenceExpressionParserRuleCall_1_2_0; }
	}
	public class BindingConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BindingConnector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeaturePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cBindingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBindingConnectorDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* Binding Connectors */
		//BindingConnector returns SysML::BindingConnector :
		//    FeaturePrefix 'binding'
		//    BindingConnectorDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeaturePrefix 'binding'
		//BindingConnectorDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//FeaturePrefix
		public RuleCall getFeaturePrefixParserRuleCall_0() { return cFeaturePrefixParserRuleCall_0; }
		
		//'binding'
		public Keyword getBindingKeyword_1() { return cBindingKeyword_1; }
		
		//BindingConnectorDeclaration
		public RuleCall getBindingConnectorDeclarationParserRuleCall_2() { return cBindingConnectorDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class BindingConnectorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BindingConnectorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cFeatureDeclarationParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cOfKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cIsSufficientAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cIsSufficientAllKeyword_0_1_0_0 = (Keyword)cIsSufficientAssignment_0_1_0.eContents().get(0);
		private final Keyword cOfKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnedRelationshipAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_3_0 = (RuleCall)cOwnedRelationshipAssignment_3.eContents().get(0);
		
		//fragment BindingConnectorDeclaration returns SysML::BindingConnector :
		//    ( FeatureDeclaration? 'of' | isSufficient ?= 'all' 'of'? )?
		//    ownedRelationship += ConnectorEndMember '='
		//    ownedRelationship += ConnectorEndMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( FeatureDeclaration? 'of' | isSufficient ?= 'all' 'of'? )?
		//ownedRelationship += ConnectorEndMember '='
		//ownedRelationship += ConnectorEndMember
		public Group getGroup() { return cGroup; }
		
		//( FeatureDeclaration? 'of' | isSufficient ?= 'all' 'of'? )?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//FeatureDeclaration? 'of'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//FeatureDeclaration?
		public RuleCall getFeatureDeclarationParserRuleCall_0_0_0() { return cFeatureDeclarationParserRuleCall_0_0_0; }
		
		//'of'
		public Keyword getOfKeyword_0_0_1() { return cOfKeyword_0_0_1; }
		
		//isSufficient ?= 'all' 'of'?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//isSufficient ?= 'all'
		public Assignment getIsSufficientAssignment_0_1_0() { return cIsSufficientAssignment_0_1_0; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_0_1_0_0() { return cIsSufficientAllKeyword_0_1_0_0; }
		
		//'of'?
		public Keyword getOfKeyword_0_1_1() { return cOfKeyword_0_1_1; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_1_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_3() { return cOwnedRelationshipAssignment_3; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_3_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_3_0; }
	}
	public class SuccessionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Succession");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeaturePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSuccessionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSuccessionDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTypeBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* Successions */
		//Succession returns SysML::Succession :
		//    FeaturePrefix 'succession'
		//    SuccessionDeclaration TypeBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeaturePrefix 'succession'
		//SuccessionDeclaration TypeBody
		public Group getGroup() { return cGroup; }
		
		//FeaturePrefix
		public RuleCall getFeaturePrefixParserRuleCall_0() { return cFeaturePrefixParserRuleCall_0; }
		
		//'succession'
		public Keyword getSuccessionKeyword_1() { return cSuccessionKeyword_1; }
		
		//SuccessionDeclaration
		public RuleCall getSuccessionDeclarationParserRuleCall_2() { return cSuccessionDeclarationParserRuleCall_2; }
		
		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_3() { return cTypeBodyParserRuleCall_3; }
	}
	public class SuccessionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.SuccessionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cFeatureDeclarationParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cFirstKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cIsSufficientAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cIsSufficientAllKeyword_0_1_0_0 = (Keyword)cIsSufficientAssignment_0_1_0.eContents().get(0);
		private final Keyword cFirstKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnedRelationshipAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedRelationshipConnectorEndMemberParserRuleCall_3_0 = (RuleCall)cOwnedRelationshipAssignment_3.eContents().get(0);
		
		//fragment SuccessionDeclaration returns SysML::Succession :
		//    ( FeatureDeclaration? 'first' | isSufficient ?= 'all' 'first'? )?
		//    ownedRelationship += ConnectorEndMember 'then'
		//    ownedRelationship += ConnectorEndMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( FeatureDeclaration? 'first' | isSufficient ?= 'all' 'first'? )?
		//ownedRelationship += ConnectorEndMember 'then'
		//ownedRelationship += ConnectorEndMember
		public Group getGroup() { return cGroup; }
		
		//( FeatureDeclaration? 'first' | isSufficient ?= 'all' 'first'? )?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//FeatureDeclaration? 'first'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//FeatureDeclaration?
		public RuleCall getFeatureDeclarationParserRuleCall_0_0_0() { return cFeatureDeclarationParserRuleCall_0_0_0; }
		
		//'first'
		public Keyword getFirstKeyword_0_0_1() { return cFirstKeyword_0_0_1; }
		
		//isSufficient ?= 'all' 'first'?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//isSufficient ?= 'all'
		public Assignment getIsSufficientAssignment_0_1_0() { return cIsSufficientAssignment_0_1_0; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_0_1_0_0() { return cIsSufficientAllKeyword_0_1_0_0; }
		
		//'first'?
		public Keyword getFirstKeyword_0_1_1() { return cFirstKeyword_0_1_1; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_1_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//ownedRelationship += ConnectorEndMember
		public Assignment getOwnedRelationshipAssignment_3() { return cOwnedRelationshipAssignment_3; }
		
		//ConnectorEndMember
		public RuleCall getOwnedRelationshipConnectorEndMemberParserRuleCall_3_0() { return cOwnedRelationshipConnectorEndMemberParserRuleCall_3_0; }
	}
	public class BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Behavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cBehaviorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBehaviorDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cBehaviorBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* BEHAVIORS */
		///* Behaviors */
		//Behavior returns SysML::Behavior :
		//    ( isAbstract ?= 'abstract')? 'behavior'
		//    BehaviorDeclaration BehaviorBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( isAbstract ?= 'abstract')? 'behavior'
		//BehaviorDeclaration BehaviorBody
		public Group getGroup() { return cGroup; }
		
		//( isAbstract ?= 'abstract')?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'behavior'
		public Keyword getBehaviorKeyword_1() { return cBehaviorKeyword_1; }
		
		//BehaviorDeclaration
		public RuleCall getBehaviorDeclarationParserRuleCall_2() { return cBehaviorDeclarationParserRuleCall_2; }
		
		//BehaviorBody
		public RuleCall getBehaviorBodyParserRuleCall_3() { return cBehaviorBodyParserRuleCall_3; }
	}
	public class BehaviorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BehaviorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassifierDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cParameterListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fragment BehaviorDeclaration returns SysML::Behavior :
		//    ClassifierDeclaration ParameterList?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ClassifierDeclaration ParameterList?
		public Group getGroup() { return cGroup; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_0() { return cClassifierDeclarationParserRuleCall_0; }
		
		//ParameterList?
		public RuleCall getParameterListParserRuleCall_1() { return cParameterListParserRuleCall_1; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOwnedRelationshipParameterMemberParserRuleCall_1_0_0 = (RuleCall)cOwnedRelationshipAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipParameterMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//fragment ParameterList returns SysML::Type :
		//    '(' ( ownedRelationship += ParameterMember
		//        ( ',' ownedRelationship += ParameterMember )* )? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' ( ownedRelationship += ParameterMember
		//    ( ',' ownedRelationship += ParameterMember )* )? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//( ownedRelationship += ParameterMember
		//       ( ',' ownedRelationship += ParameterMember )* )?
		public Group getGroup_1() { return cGroup_1; }
		
		//ownedRelationship += ParameterMember
		public Assignment getOwnedRelationshipAssignment_1_0() { return cOwnedRelationshipAssignment_1_0; }
		
		//ParameterMember
		public RuleCall getOwnedRelationshipParameterMemberParserRuleCall_1_0_0() { return cOwnedRelationshipParameterMemberParserRuleCall_1_0_0; }
		
		//( ',' ownedRelationship += ParameterMember )*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//ownedRelationship += ParameterMember
		public Assignment getOwnedRelationshipAssignment_1_1_1() { return cOwnedRelationshipAssignment_1_1_1; }
		
		//ParameterMember
		public RuleCall getOwnedRelationshipParameterMemberParserRuleCall_1_1_1_0() { return cOwnedRelationshipParameterMemberParserRuleCall_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ParameterMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementParameterParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//ParameterMember returns SysML::ParameterMembership :
		//    ownedRelatedElement += Parameter // ownedMemberParameter = Parameter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += Parameter
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//Parameter
		public RuleCall getOwnedRelatedElementParameterParserRuleCall_0() { return cOwnedRelatedElementParameterParserRuleCall_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDirectionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDirectionFeatureDirectionEnumRuleCall_0_0_0 = (RuleCall)cDirectionAssignment_0_0.eContents().get(0);
		private final Keyword cFeatureKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cParameterDeclarationParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStepAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cDirectionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDirectionFeatureDirectionEnumRuleCall_1_1_0 = (RuleCall)cDirectionAssignment_1_1.eContents().get(0);
		private final Keyword cStepKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cParameterDeclarationParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cDirectionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDirectionFeatureDirectionEnumRuleCall_2_1_0 = (RuleCall)cDirectionAssignment_2_1.eContents().get(0);
		private final Keyword cExprKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cParameterDeclarationParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBooleanExpressionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cDirectionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDirectionFeatureDirectionEnumRuleCall_3_1_0 = (RuleCall)cDirectionAssignment_3_1.eContents().get(0);
		private final Keyword cBoolKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final RuleCall cParameterDeclarationParserRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		
		//Parameter returns SysML::Feature :
		//      ( direction = FeatureDirection )? 'feature'? ParameterDeclaration
		//    | {SysML::Step} ( direction = FeatureDirection )? 'step' ParameterDeclaration
		//    | {SysML::Expression} ( direction = FeatureDirection )? 'expr' ParameterDeclaration
		//    | {SysML::BooleanExpression} ( direction = FeatureDirection )? 'bool' ParameterDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ( direction = FeatureDirection )? 'feature'? ParameterDeclaration
		//| {SysML::Step} ( direction = FeatureDirection )? 'step' ParameterDeclaration
		//| {SysML::Expression} ( direction = FeatureDirection )? 'expr' ParameterDeclaration
		//| {SysML::BooleanExpression} ( direction = FeatureDirection )? 'bool' ParameterDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//( direction = FeatureDirection )? 'feature'? ParameterDeclaration
		public Group getGroup_0() { return cGroup_0; }
		
		//( direction = FeatureDirection )?
		public Assignment getDirectionAssignment_0_0() { return cDirectionAssignment_0_0; }
		
		//FeatureDirection
		public RuleCall getDirectionFeatureDirectionEnumRuleCall_0_0_0() { return cDirectionFeatureDirectionEnumRuleCall_0_0_0; }
		
		//'feature'?
		public Keyword getFeatureKeyword_0_1() { return cFeatureKeyword_0_1; }
		
		//ParameterDeclaration
		public RuleCall getParameterDeclarationParserRuleCall_0_2() { return cParameterDeclarationParserRuleCall_0_2; }
		
		//{SysML::Step} ( direction = FeatureDirection )? 'step' ParameterDeclaration
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::Step}
		public Action getStepAction_1_0() { return cStepAction_1_0; }
		
		//( direction = FeatureDirection )?
		public Assignment getDirectionAssignment_1_1() { return cDirectionAssignment_1_1; }
		
		//FeatureDirection
		public RuleCall getDirectionFeatureDirectionEnumRuleCall_1_1_0() { return cDirectionFeatureDirectionEnumRuleCall_1_1_0; }
		
		//'step'
		public Keyword getStepKeyword_1_2() { return cStepKeyword_1_2; }
		
		//ParameterDeclaration
		public RuleCall getParameterDeclarationParserRuleCall_1_3() { return cParameterDeclarationParserRuleCall_1_3; }
		
		//{SysML::Expression} ( direction = FeatureDirection )? 'expr' ParameterDeclaration
		public Group getGroup_2() { return cGroup_2; }
		
		//{SysML::Expression}
		public Action getExpressionAction_2_0() { return cExpressionAction_2_0; }
		
		//( direction = FeatureDirection )?
		public Assignment getDirectionAssignment_2_1() { return cDirectionAssignment_2_1; }
		
		//FeatureDirection
		public RuleCall getDirectionFeatureDirectionEnumRuleCall_2_1_0() { return cDirectionFeatureDirectionEnumRuleCall_2_1_0; }
		
		//'expr'
		public Keyword getExprKeyword_2_2() { return cExprKeyword_2_2; }
		
		//ParameterDeclaration
		public RuleCall getParameterDeclarationParserRuleCall_2_3() { return cParameterDeclarationParserRuleCall_2_3; }
		
		//{SysML::BooleanExpression} ( direction = FeatureDirection )? 'bool' ParameterDeclaration
		public Group getGroup_3() { return cGroup_3; }
		
		//{SysML::BooleanExpression}
		public Action getBooleanExpressionAction_3_0() { return cBooleanExpressionAction_3_0; }
		
		//( direction = FeatureDirection )?
		public Assignment getDirectionAssignment_3_1() { return cDirectionAssignment_3_1; }
		
		//FeatureDirection
		public RuleCall getDirectionFeatureDirectionEnumRuleCall_3_1_0() { return cDirectionFeatureDirectionEnumRuleCall_3_1_0; }
		
		//'bool'
		public Keyword getBoolKeyword_3_2() { return cBoolKeyword_3_2; }
		
		//ParameterDeclaration
		public RuleCall getParameterDeclarationParserRuleCall_3_3() { return cParameterDeclarationParserRuleCall_3_3; }
	}
	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsSufficientAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsSufficientAllKeyword_0_0 = (Keyword)cIsSufficientAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cIdentificationParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cParameterSpecializationPartParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final RuleCall cParameterSpecializationPartParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//fragment ParameterDeclaration returns SysML::Feature :
		//    ( isSufficient ?= 'all' )?
		//    ( Identification ParameterSpecializationPart?
		//    | ParameterSpecializationPart
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( isSufficient ?= 'all' )?
		//( Identification ParameterSpecializationPart?
		//| ParameterSpecializationPart
		//)
		public Group getGroup() { return cGroup; }
		
		//( isSufficient ?= 'all' )?
		public Assignment getIsSufficientAssignment_0() { return cIsSufficientAssignment_0; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_0_0() { return cIsSufficientAllKeyword_0_0; }
		
		//( Identification ParameterSpecializationPart?
		//| ParameterSpecializationPart
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Identification ParameterSpecializationPart?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//Identification
		public RuleCall getIdentificationParserRuleCall_1_0_0() { return cIdentificationParserRuleCall_1_0_0; }
		
		//ParameterSpecializationPart?
		public RuleCall getParameterSpecializationPartParserRuleCall_1_0_1() { return cParameterSpecializationPartParserRuleCall_1_0_1; }
		
		//ParameterSpecializationPart
		public RuleCall getParameterSpecializationPartParserRuleCall_1_1() { return cParameterSpecializationPartParserRuleCall_1_1; }
	}
	public class ParameterSpecializationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ParameterSpecializationPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cParameterSpecializationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cMultiplicityPartParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cParameterSpecializationParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cMultiplicityPartParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cParameterSpecializationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//fragment ParameterSpecializationPart returns SysML::Feature :
		//      ( -> ParameterSpecialization )+ MultiplicityPart? ParameterSpecialization*
		//    | MultiplicityPart ParameterSpecialization*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ( -> ParameterSpecialization )+ MultiplicityPart? ParameterSpecialization*
		//| MultiplicityPart ParameterSpecialization*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//( -> ParameterSpecialization )+ MultiplicityPart? ParameterSpecialization*
		public Group getGroup_0() { return cGroup_0; }
		
		//( -> ParameterSpecialization )+
		public RuleCall getParameterSpecializationParserRuleCall_0_0() { return cParameterSpecializationParserRuleCall_0_0; }
		
		//MultiplicityPart?
		public RuleCall getMultiplicityPartParserRuleCall_0_1() { return cMultiplicityPartParserRuleCall_0_1; }
		
		//ParameterSpecialization*
		public RuleCall getParameterSpecializationParserRuleCall_0_2() { return cParameterSpecializationParserRuleCall_0_2; }
		
		//MultiplicityPart ParameterSpecialization*
		public Group getGroup_1() { return cGroup_1; }
		
		//MultiplicityPart
		public RuleCall getMultiplicityPartParserRuleCall_1_0() { return cMultiplicityPartParserRuleCall_1_0; }
		
		//ParameterSpecialization*
		public RuleCall getParameterSpecializationParserRuleCall_1_1() { return cParameterSpecializationParserRuleCall_1_1; }
	}
	public class ParameterSpecializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ParameterSpecialization");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypedByParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubsetsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRedefinesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//fragment ParameterSpecialization returns SysML::Feature :
		//    TypedBy | Subsets | Redefines
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypedBy | Subsets | Redefines
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypedBy
		public RuleCall getTypedByParserRuleCall_0() { return cTypedByParserRuleCall_0; }
		
		//Subsets
		public RuleCall getSubsetsParserRuleCall_1() { return cSubsetsParserRuleCall_1; }
		
		//Redefines
		public RuleCall getRedefinesParserRuleCall_2() { return cRedefinesParserRuleCall_2; }
	}
	public class BehaviorBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BehaviorBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cOwnedRelationshipOwnedDocumentationParserRuleCall_1_1_0_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipNonFeatureMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cOwnedRelationshipFeatureMemberParserRuleCall_1_1_2_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cOwnedRelationshipImportParserRuleCall_1_1_3_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fragment BehaviorBody returns SysML::Type :
		//    ';' |
		//    '{' ( ownedRelationship += OwnedDocumentation
		//        | ownedRelationship += NonFeatureMember
		//        | ownedRelationship += FeatureMember
		//        | ownedRelationship += Import
		//    )* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//';' |
		//'{' ( ownedRelationship += OwnedDocumentation
		//    | ownedRelationship += NonFeatureMember
		//    | ownedRelationship += FeatureMember
		//    | ownedRelationship += Import
		//)* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' ( ownedRelationship += OwnedDocumentation
		//    | ownedRelationship += NonFeatureMember
		//    | ownedRelationship += FeatureMember
		//    | ownedRelationship += Import
		//)* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//( ownedRelationship += OwnedDocumentation
		//       | ownedRelationship += NonFeatureMember
		//       | ownedRelationship += FeatureMember
		//       | ownedRelationship += Import
		//   )*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//ownedRelationship += OwnedDocumentation
		public Assignment getOwnedRelationshipAssignment_1_1_0() { return cOwnedRelationshipAssignment_1_1_0; }
		
		//OwnedDocumentation
		public RuleCall getOwnedRelationshipOwnedDocumentationParserRuleCall_1_1_0_0() { return cOwnedRelationshipOwnedDocumentationParserRuleCall_1_1_0_0; }
		
		//ownedRelationship += NonFeatureMember
		public Assignment getOwnedRelationshipAssignment_1_1_1() { return cOwnedRelationshipAssignment_1_1_1; }
		
		//NonFeatureMember
		public RuleCall getOwnedRelationshipNonFeatureMemberParserRuleCall_1_1_1_0() { return cOwnedRelationshipNonFeatureMemberParserRuleCall_1_1_1_0; }
		
		//ownedRelationship += FeatureMember
		public Assignment getOwnedRelationshipAssignment_1_1_2() { return cOwnedRelationshipAssignment_1_1_2; }
		
		//FeatureMember
		public RuleCall getOwnedRelationshipFeatureMemberParserRuleCall_1_1_2_0() { return cOwnedRelationshipFeatureMemberParserRuleCall_1_1_2_0; }
		
		//ownedRelationship += Import
		public Assignment getOwnedRelationshipAssignment_1_1_3() { return cOwnedRelationshipAssignment_1_1_3; }
		
		//Import
		public RuleCall getOwnedRelationshipImportParserRuleCall_1_1_3_0() { return cOwnedRelationshipImportParserRuleCall_1_1_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Step");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeaturePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cStepKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStepDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cBehaviorBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* Steps */
		//Step returns SysML::Step :
		//    FeaturePrefix 'step'
		//    StepDeclaration BehaviorBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeaturePrefix 'step'
		//StepDeclaration BehaviorBody
		public Group getGroup() { return cGroup; }
		
		//FeaturePrefix
		public RuleCall getFeaturePrefixParserRuleCall_0() { return cFeaturePrefixParserRuleCall_0; }
		
		//'step'
		public Keyword getStepKeyword_1() { return cStepKeyword_1; }
		
		//StepDeclaration
		public RuleCall getStepDeclarationParserRuleCall_2() { return cStepDeclarationParserRuleCall_2; }
		
		//BehaviorBody
		public RuleCall getBehaviorBodyParserRuleCall_3() { return cBehaviorBodyParserRuleCall_3; }
	}
	public class StepDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.StepDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeatureDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cValuePartParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cStepParameterListParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//fragment StepDeclaration returns SysML::Step :
		//    FeatureDeclaration? ( ValuePart | StepParameterList )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureDeclaration? ( ValuePart | StepParameterList )?
		public Group getGroup() { return cGroup; }
		
		//FeatureDeclaration?
		public RuleCall getFeatureDeclarationParserRuleCall_0() { return cFeatureDeclarationParserRuleCall_0; }
		
		//( ValuePart | StepParameterList )?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ValuePart
		public RuleCall getValuePartParserRuleCall_1_0() { return cValuePartParserRuleCall_1_0; }
		
		//StepParameterList
		public RuleCall getStepParameterListParserRuleCall_1_1() { return cStepParameterListParserRuleCall_1_1; }
	}
	public class StepParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.StepParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOwnedRelationshipStepParameterMemberParserRuleCall_1_0_0 = (RuleCall)cOwnedRelationshipAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipStepParameterMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//fragment StepParameterList returns SysML::Step :
		//    '(' ( ownedRelationship += StepParameterMember
		//        ( ',' ownedRelationship += StepParameterMember )* )? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' ( ownedRelationship += StepParameterMember
		//    ( ',' ownedRelationship += StepParameterMember )* )? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//( ownedRelationship += StepParameterMember
		//       ( ',' ownedRelationship += StepParameterMember )* )?
		public Group getGroup_1() { return cGroup_1; }
		
		//ownedRelationship += StepParameterMember
		public Assignment getOwnedRelationshipAssignment_1_0() { return cOwnedRelationshipAssignment_1_0; }
		
		//StepParameterMember
		public RuleCall getOwnedRelationshipStepParameterMemberParserRuleCall_1_0_0() { return cOwnedRelationshipStepParameterMemberParserRuleCall_1_0_0; }
		
		//( ',' ownedRelationship += StepParameterMember )*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//ownedRelationship += StepParameterMember
		public Assignment getOwnedRelationshipAssignment_1_1_1() { return cOwnedRelationshipAssignment_1_1_1; }
		
		//StepParameterMember
		public RuleCall getOwnedRelationshipStepParameterMemberParserRuleCall_1_1_1_0() { return cOwnedRelationshipStepParameterMemberParserRuleCall_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class StepParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.StepParameterMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementStepParameterParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//StepParameterMember returns SysML::ParameterMembership :
		//    ownedRelatedElement += StepParameter // ownedMemberParameter = StepParameter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += StepParameter
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//StepParameter
		public RuleCall getOwnedRelatedElementStepParameterParserRuleCall_0() { return cOwnedRelatedElementStepParameterParserRuleCall_0; }
	}
	public class StepParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.StepParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParameterParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cValuePartParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//StepParameter returns SysML::Feature :
		//    Parameter ValuePart?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameter ValuePart?
		public Group getGroup() { return cGroup; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_0() { return cParameterParserRuleCall_0; }
		
		//ValuePart?
		public RuleCall getValuePartParserRuleCall_1() { return cValuePartParserRuleCall_1; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cFunctionDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cFunctionBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* FUNCTIONS */
		///* Functions */
		//Function returns SysML::Function :
		//    ( isAbstract ?= 'abstract' )? 'function'
		//    FunctionDeclaration FunctionBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( isAbstract ?= 'abstract' )? 'function'
		//FunctionDeclaration FunctionBody
		public Group getGroup() { return cGroup; }
		
		//( isAbstract ?= 'abstract' )?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }
		
		//FunctionDeclaration
		public RuleCall getFunctionDeclarationParserRuleCall_2() { return cFunctionDeclarationParserRuleCall_2; }
		
		//FunctionBody
		public RuleCall getFunctionBodyParserRuleCall_3() { return cFunctionBodyParserRuleCall_3; }
	}
	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassifierDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cParameterPartParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fragment FunctionDeclaration returns SysML::Function :
		//    ClassifierDeclaration ParameterPart
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ClassifierDeclaration ParameterPart
		public Group getGroup() { return cGroup; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_0() { return cClassifierDeclarationParserRuleCall_0; }
		
		//ParameterPart
		public RuleCall getParameterPartParserRuleCall_1() { return cParameterPartParserRuleCall_1; }
	}
	public class ParameterPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ParameterPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cParameterListParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cReturnParameterPartParserRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cEmptyReturnParameterPartParserRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cEmptyReturnParameterPartParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//fragment ParameterPart returns SysML::Type :
		//      ParameterList ( ReturnParameterPart | EmptyReturnParameterPart )
		//    | EmptyReturnParameterPart
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ParameterList ( ReturnParameterPart | EmptyReturnParameterPart )
		//| EmptyReturnParameterPart
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ParameterList ( ReturnParameterPart | EmptyReturnParameterPart )
		public Group getGroup_0() { return cGroup_0; }
		
		//ParameterList
		public RuleCall getParameterListParserRuleCall_0_0() { return cParameterListParserRuleCall_0_0; }
		
		//( ReturnParameterPart | EmptyReturnParameterPart )
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//ReturnParameterPart
		public RuleCall getReturnParameterPartParserRuleCall_0_1_0() { return cReturnParameterPartParserRuleCall_0_1_0; }
		
		//EmptyReturnParameterPart
		public RuleCall getEmptyReturnParameterPartParserRuleCall_0_1_1() { return cEmptyReturnParameterPartParserRuleCall_0_1_1; }
		
		//EmptyReturnParameterPart
		public RuleCall getEmptyReturnParameterPartParserRuleCall_1() { return cEmptyReturnParameterPartParserRuleCall_1; }
	}
	public class ReturnParameterPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ReturnParameterPart");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipReturnParameterMemberParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		//fragment ReturnParameterPart returns SysML::Type :
		//    ownedRelationship += ReturnParameterMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += ReturnParameterMember
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//ReturnParameterMember
		public RuleCall getOwnedRelationshipReturnParameterMemberParserRuleCall_0() { return cOwnedRelationshipReturnParameterMemberParserRuleCall_0; }
	}
	public class ReturnParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ReturnParameterMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementParameterParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//ReturnParameterMember returns SysML::ReturnParameterMembership :
		//    ownedRelatedElement += Parameter // ownedMemberParameter = Parameter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += Parameter
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//Parameter
		public RuleCall getOwnedRelatedElementParameterParserRuleCall_0() { return cOwnedRelatedElementParameterParserRuleCall_0; }
	}
	public class EmptyReturnParameterPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.EmptyReturnParameterPart");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipEmptyReturnParameterMemberParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		//fragment EmptyReturnParameterPart returns SysML::Type :
		//    ownedRelationship += EmptyReturnParameterMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += EmptyReturnParameterMember
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//EmptyReturnParameterMember
		public RuleCall getOwnedRelationshipEmptyReturnParameterMemberParserRuleCall_0() { return cOwnedRelationshipEmptyReturnParameterMemberParserRuleCall_0; }
	}
	public class EmptyReturnParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.EmptyReturnParameterMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementEmptyParameterParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//EmptyReturnParameterMember returns SysML::ReturnParameterMembership :
		//    ownedRelatedElement += EmptyParameter // ownedMemberFeature = EmptyParameter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += EmptyParameter
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//EmptyParameter
		public RuleCall getOwnedRelatedElementEmptyParameterParserRuleCall_0() { return cOwnedRelatedElementEmptyParameterParserRuleCall_0; }
	}
	public class EmptyParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.EmptyParameter");
		private final Action cFeatureAction = (Action)rule.eContents().get(1);
		
		//EmptyParameter returns SysML::Feature :
		//    {SysML::Feature}
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::Feature}
		public Action getFeatureAction() { return cFeatureAction; }
	}
	public class FunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FunctionBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cOwnedRelationshipOwnedDocumentationParserRuleCall_1_1_0_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipNonFeatureMemberParserRuleCall_1_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cOwnedRelationshipFeatureMemberParserRuleCall_1_1_2_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cOwnedRelationshipImportParserRuleCall_1_1_3_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_3.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOwnedRelationshipResultExpressionMemberParserRuleCall_1_2_0 = (RuleCall)cOwnedRelationshipAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//fragment FunctionBody returns SysML::Type :
		//      ';'
		//    | '{' ( ownedRelationship += OwnedDocumentation
		//          | ownedRelationship += NonFeatureMember
		//          | ownedRelationship += FeatureMember
		//          | ownedRelationship += Import
		//          )*
		//          ( ownedRelationship += ResultExpressionMember )?
		//      '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ';'
		//| '{' ( ownedRelationship += OwnedDocumentation
		//      | ownedRelationship += NonFeatureMember
		//      | ownedRelationship += FeatureMember
		//      | ownedRelationship += Import
		//      )*
		//      ( ownedRelationship += ResultExpressionMember )?
		//  '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'{' ( ownedRelationship += OwnedDocumentation
		//         | ownedRelationship += NonFeatureMember
		//         | ownedRelationship += FeatureMember
		//         | ownedRelationship += Import
		//         )*
		//         ( ownedRelationship += ResultExpressionMember )?
		//     '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//( ownedRelationship += OwnedDocumentation
		//         | ownedRelationship += NonFeatureMember
		//         | ownedRelationship += FeatureMember
		//         | ownedRelationship += Import
		//         )*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//ownedRelationship += OwnedDocumentation
		public Assignment getOwnedRelationshipAssignment_1_1_0() { return cOwnedRelationshipAssignment_1_1_0; }
		
		//OwnedDocumentation
		public RuleCall getOwnedRelationshipOwnedDocumentationParserRuleCall_1_1_0_0() { return cOwnedRelationshipOwnedDocumentationParserRuleCall_1_1_0_0; }
		
		//ownedRelationship += NonFeatureMember
		public Assignment getOwnedRelationshipAssignment_1_1_1() { return cOwnedRelationshipAssignment_1_1_1; }
		
		//NonFeatureMember
		public RuleCall getOwnedRelationshipNonFeatureMemberParserRuleCall_1_1_1_0() { return cOwnedRelationshipNonFeatureMemberParserRuleCall_1_1_1_0; }
		
		//ownedRelationship += FeatureMember
		public Assignment getOwnedRelationshipAssignment_1_1_2() { return cOwnedRelationshipAssignment_1_1_2; }
		
		//FeatureMember
		public RuleCall getOwnedRelationshipFeatureMemberParserRuleCall_1_1_2_0() { return cOwnedRelationshipFeatureMemberParserRuleCall_1_1_2_0; }
		
		//ownedRelationship += Import
		public Assignment getOwnedRelationshipAssignment_1_1_3() { return cOwnedRelationshipAssignment_1_1_3; }
		
		//Import
		public RuleCall getOwnedRelationshipImportParserRuleCall_1_1_3_0() { return cOwnedRelationshipImportParserRuleCall_1_1_3_0; }
		
		//( ownedRelationship += ResultExpressionMember )?
		public Assignment getOwnedRelationshipAssignment_1_2() { return cOwnedRelationshipAssignment_1_2; }
		
		//ResultExpressionMember
		public RuleCall getOwnedRelationshipResultExpressionMemberParserRuleCall_1_2_0() { return cOwnedRelationshipResultExpressionMemberParserRuleCall_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class ResultExpressionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ResultExpressionMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMemberPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedExpressionParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//@Override
		//ResultExpressionMember returns SysML::ResultExpressionMembership :
		//    MemberPrefix ownedRelatedElement += OwnedExpression // ownedResultExpression = OwnedExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MemberPrefix ownedRelatedElement += OwnedExpression
		public Group getGroup() { return cGroup; }
		
		//MemberPrefix
		public RuleCall getMemberPrefixParserRuleCall_0() { return cMemberPrefixParserRuleCall_0; }
		
		//ownedRelatedElement += OwnedExpression
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//OwnedExpression
		public RuleCall getOwnedRelatedElementOwnedExpressionParserRuleCall_1_0() { return cOwnedRelatedElementOwnedExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeaturePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cExprKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cFunctionBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* Expressions */
		//Expression returns SysML::Expression :
		//    FeaturePrefix 'expr'
		//    ExpressionDeclaration FunctionBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeaturePrefix 'expr'
		//ExpressionDeclaration FunctionBody
		public Group getGroup() { return cGroup; }
		
		//FeaturePrefix
		public RuleCall getFeaturePrefixParserRuleCall_0() { return cFeaturePrefixParserRuleCall_0; }
		
		//'expr'
		public Keyword getExprKeyword_1() { return cExprKeyword_1; }
		
		//ExpressionDeclaration
		public RuleCall getExpressionDeclarationParserRuleCall_2() { return cExpressionDeclarationParserRuleCall_2; }
		
		//FunctionBody
		public RuleCall getFunctionBodyParserRuleCall_3() { return cFunctionBodyParserRuleCall_3; }
	}
	public class ExpressionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ExpressionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeatureDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cValuePartParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cStepParameterListParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final RuleCall cReturnParameterPartParserRuleCall_1_1_1_0 = (RuleCall)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cEmptyReturnParameterPartParserRuleCall_1_1_1_1 = (RuleCall)cAlternatives_1_1_1.eContents().get(1);
		
		//fragment ExpressionDeclaration returns SysML::Expression :
		//    FeatureDeclaration?
		//    ( ValuePart | StepParameterList ( ReturnParameterPart | EmptyReturnParameterPart ) )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureDeclaration?
		//( ValuePart | StepParameterList ( ReturnParameterPart | EmptyReturnParameterPart ) )?
		public Group getGroup() { return cGroup; }
		
		//FeatureDeclaration?
		public RuleCall getFeatureDeclarationParserRuleCall_0() { return cFeatureDeclarationParserRuleCall_0; }
		
		//( ValuePart | StepParameterList ( ReturnParameterPart | EmptyReturnParameterPart ) )?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ValuePart
		public RuleCall getValuePartParserRuleCall_1_0() { return cValuePartParserRuleCall_1_0; }
		
		//StepParameterList ( ReturnParameterPart | EmptyReturnParameterPart )
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//StepParameterList
		public RuleCall getStepParameterListParserRuleCall_1_1_0() { return cStepParameterListParserRuleCall_1_1_0; }
		
		//( ReturnParameterPart | EmptyReturnParameterPart )
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//ReturnParameterPart
		public RuleCall getReturnParameterPartParserRuleCall_1_1_1_0() { return cReturnParameterPartParserRuleCall_1_1_1_0; }
		
		//EmptyReturnParameterPart
		public RuleCall getEmptyReturnParameterPartParserRuleCall_1_1_1_1() { return cEmptyReturnParameterPartParserRuleCall_1_1_1_1; }
	}
	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Predicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cPredicateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cPredicateDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cFunctionBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* Predicates */
		//Predicate returns SysML::Predicate :
		//    ( isAbstract ?= 'abstract' )? 'predicate'
		//    PredicateDeclaration FunctionBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( isAbstract ?= 'abstract' )? 'predicate'
		//PredicateDeclaration FunctionBody
		public Group getGroup() { return cGroup; }
		
		//( isAbstract ?= 'abstract' )?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'predicate'
		public Keyword getPredicateKeyword_1() { return cPredicateKeyword_1; }
		
		//PredicateDeclaration
		public RuleCall getPredicateDeclarationParserRuleCall_2() { return cPredicateDeclarationParserRuleCall_2; }
		
		//FunctionBody
		public RuleCall getFunctionBodyParserRuleCall_3() { return cFunctionBodyParserRuleCall_3; }
	}
	public class PredicateDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.PredicateDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassifierDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cParameterPartParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fragment PredicateDeclaration returns SysML::Predicate :
		//    ClassifierDeclaration ParameterPart
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ClassifierDeclaration ParameterPart
		public Group getGroup() { return cGroup; }
		
		//ClassifierDeclaration
		public RuleCall getClassifierDeclarationParserRuleCall_0() { return cClassifierDeclarationParserRuleCall_0; }
		
		//ParameterPart
		public RuleCall getParameterPartParserRuleCall_1() { return cParameterPartParserRuleCall_1; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.BooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeaturePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cFunctionBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* Boolean Expressions */
		//BooleanExpression returns SysML::BooleanExpression :
		//    FeaturePrefix 'bool'
		//    ExpressionDeclaration FunctionBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeaturePrefix 'bool'
		//ExpressionDeclaration FunctionBody
		public Group getGroup() { return cGroup; }
		
		//FeaturePrefix
		public RuleCall getFeaturePrefixParserRuleCall_0() { return cFeaturePrefixParserRuleCall_0; }
		
		//'bool'
		public Keyword getBoolKeyword_1() { return cBoolKeyword_1; }
		
		//ExpressionDeclaration
		public RuleCall getExpressionDeclarationParserRuleCall_2() { return cExpressionDeclarationParserRuleCall_2; }
		
		//FunctionBody
		public RuleCall getFunctionBodyParserRuleCall_3() { return cFunctionBodyParserRuleCall_3; }
	}
	public class InvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Invariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeaturePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cInvKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cTrueKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Assignment cIsNegatedAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cIsNegatedFalseKeyword_2_1_0 = (Keyword)cIsNegatedAssignment_2_1.eContents().get(0);
		private final RuleCall cExpressionDeclarationParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cFunctionBodyParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		///* Invariants */
		//Invariant returns SysML::Invariant :
		//    FeaturePrefix 'inv' ( 'true' | isNegated ?= 'false' )?
		//    ExpressionDeclaration FunctionBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeaturePrefix 'inv' ( 'true' | isNegated ?= 'false' )?
		//ExpressionDeclaration FunctionBody
		public Group getGroup() { return cGroup; }
		
		//FeaturePrefix
		public RuleCall getFeaturePrefixParserRuleCall_0() { return cFeaturePrefixParserRuleCall_0; }
		
		//'inv'
		public Keyword getInvKeyword_1() { return cInvKeyword_1; }
		
		//( 'true' | isNegated ?= 'false' )?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'true'
		public Keyword getTrueKeyword_2_0() { return cTrueKeyword_2_0; }
		
		//isNegated ?= 'false'
		public Assignment getIsNegatedAssignment_2_1() { return cIsNegatedAssignment_2_1; }
		
		//'false'
		public Keyword getIsNegatedFalseKeyword_2_1_0() { return cIsNegatedFalseKeyword_2_1_0; }
		
		//ExpressionDeclaration
		public RuleCall getExpressionDeclarationParserRuleCall_3() { return cExpressionDeclarationParserRuleCall_3; }
		
		//FunctionBody
		public RuleCall getFunctionBodyParserRuleCall_4() { return cFunctionBodyParserRuleCall_4; }
	}
	public class InteractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.Interaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cInteractionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBehaviorDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cBehaviorBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* INTERACTIONS */
		///* Interactions */
		//Interaction returns SysML::Interaction :
		//    ( isAbstract ?= 'abstract' )? 'interaction'
		//    BehaviorDeclaration BehaviorBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( isAbstract ?= 'abstract' )? 'interaction'
		//BehaviorDeclaration BehaviorBody
		public Group getGroup() { return cGroup; }
		
		//( isAbstract ?= 'abstract' )?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'interaction'
		public Keyword getInteractionKeyword_1() { return cInteractionKeyword_1; }
		
		//BehaviorDeclaration
		public RuleCall getBehaviorDeclarationParserRuleCall_2() { return cBehaviorDeclarationParserRuleCall_2; }
		
		//BehaviorBody
		public RuleCall getBehaviorBodyParserRuleCall_3() { return cBehaviorBodyParserRuleCall_3; }
	}
	public class ItemFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeaturePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cStreamKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cItemFlowDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cBehaviorBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///* Item Flows */
		//ItemFlow returns SysML::ItemFlow :
		//    FeaturePrefix 'stream'
		//    ItemFlowDeclaration BehaviorBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeaturePrefix 'stream'
		//ItemFlowDeclaration BehaviorBody
		public Group getGroup() { return cGroup; }
		
		//FeaturePrefix
		public RuleCall getFeaturePrefixParserRuleCall_0() { return cFeaturePrefixParserRuleCall_0; }
		
		//'stream'
		public Keyword getStreamKeyword_1() { return cStreamKeyword_1; }
		
		//ItemFlowDeclaration
		public RuleCall getItemFlowDeclarationParserRuleCall_2() { return cItemFlowDeclarationParserRuleCall_2; }
		
		//BehaviorBody
		public RuleCall getBehaviorBodyParserRuleCall_3() { return cBehaviorBodyParserRuleCall_3; }
	}
	public class SuccessionItemFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.SuccessionItemFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeaturePrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFlowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cItemFlowDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cBehaviorBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//SuccessionItemFlow returns SysML::SuccessionItemFlow :
		//    FeaturePrefix 'flow' ItemFlowDeclaration BehaviorBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeaturePrefix 'flow' ItemFlowDeclaration BehaviorBody
		public Group getGroup() { return cGroup; }
		
		//FeaturePrefix
		public RuleCall getFeaturePrefixParserRuleCall_0() { return cFeaturePrefixParserRuleCall_0; }
		
		//'flow'
		public Keyword getFlowKeyword_1() { return cFlowKeyword_1; }
		
		//ItemFlowDeclaration
		public RuleCall getItemFlowDeclarationParserRuleCall_2() { return cItemFlowDeclarationParserRuleCall_2; }
		
		//BehaviorBody
		public RuleCall getBehaviorBodyParserRuleCall_3() { return cBehaviorBodyParserRuleCall_3; }
	}
	public class ItemFlowDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFlowDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cFeatureDeclarationParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_0_1 = (Alternatives)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_0_1_0 = (Group)cAlternatives_0_0_1.eContents().get(0);
		private final Keyword cOfKeyword_0_0_1_0_0 = (Keyword)cGroup_0_0_1_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_0_1_0_1 = (Assignment)cGroup_0_0_1_0.eContents().get(1);
		private final RuleCall cOwnedRelationshipItemFeatureMemberParserRuleCall_0_0_1_0_1_0 = (RuleCall)cOwnedRelationshipAssignment_0_0_1_0_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_0_1_1 = (Assignment)cAlternatives_0_0_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipEmptyItemFeatureMemberParserRuleCall_0_0_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_0_0_1_1.eContents().get(0);
		private final Keyword cFromKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cIsSufficientAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cIsSufficientAllKeyword_0_1_0_0 = (Keyword)cIsSufficientAssignment_0_1_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipEmptyItemFeatureMemberParserRuleCall_0_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_0_1_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelationshipItemFlowEndMemberParserRuleCall_1_0 = (RuleCall)cOwnedRelationshipAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnedRelationshipAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedRelationshipItemFlowEndMemberParserRuleCall_3_0 = (RuleCall)cOwnedRelationshipAssignment_3.eContents().get(0);
		
		//fragment ItemFlowDeclaration returns SysML::ItemFlow :
		//    ( FeatureDeclaration?
		//      ( 'of'  ownedRelationship += ItemFeatureMember
		//      | ownedRelationship += EmptyItemFeatureMember
		//      ) 'from'
		//    | ( isSufficient ?= 'all' )? ownedRelationship += EmptyItemFeatureMember
		//    )
		//    ownedRelationship += ItemFlowEndMember 'to'
		//    ownedRelationship += ItemFlowEndMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( FeatureDeclaration?
		//  ( 'of'  ownedRelationship += ItemFeatureMember
		//  | ownedRelationship += EmptyItemFeatureMember
		//  ) 'from'
		//| ( isSufficient ?= 'all' )? ownedRelationship += EmptyItemFeatureMember
		//)
		//ownedRelationship += ItemFlowEndMember 'to'
		//ownedRelationship += ItemFlowEndMember
		public Group getGroup() { return cGroup; }
		
		//( FeatureDeclaration?
		//  ( 'of'  ownedRelationship += ItemFeatureMember
		//  | ownedRelationship += EmptyItemFeatureMember
		//  ) 'from'
		//| ( isSufficient ?= 'all' )? ownedRelationship += EmptyItemFeatureMember
		//)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//FeatureDeclaration?
		//     ( 'of'  ownedRelationship += ItemFeatureMember
		//     | ownedRelationship += EmptyItemFeatureMember
		//     ) 'from'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//FeatureDeclaration?
		public RuleCall getFeatureDeclarationParserRuleCall_0_0_0() { return cFeatureDeclarationParserRuleCall_0_0_0; }
		
		//( 'of'  ownedRelationship += ItemFeatureMember
		//| ownedRelationship += EmptyItemFeatureMember
		//)
		public Alternatives getAlternatives_0_0_1() { return cAlternatives_0_0_1; }
		
		//'of'  ownedRelationship += ItemFeatureMember
		public Group getGroup_0_0_1_0() { return cGroup_0_0_1_0; }
		
		//'of'
		public Keyword getOfKeyword_0_0_1_0_0() { return cOfKeyword_0_0_1_0_0; }
		
		//ownedRelationship += ItemFeatureMember
		public Assignment getOwnedRelationshipAssignment_0_0_1_0_1() { return cOwnedRelationshipAssignment_0_0_1_0_1; }
		
		//ItemFeatureMember
		public RuleCall getOwnedRelationshipItemFeatureMemberParserRuleCall_0_0_1_0_1_0() { return cOwnedRelationshipItemFeatureMemberParserRuleCall_0_0_1_0_1_0; }
		
		//ownedRelationship += EmptyItemFeatureMember
		public Assignment getOwnedRelationshipAssignment_0_0_1_1() { return cOwnedRelationshipAssignment_0_0_1_1; }
		
		//EmptyItemFeatureMember
		public RuleCall getOwnedRelationshipEmptyItemFeatureMemberParserRuleCall_0_0_1_1_0() { return cOwnedRelationshipEmptyItemFeatureMemberParserRuleCall_0_0_1_1_0; }
		
		//'from'
		public Keyword getFromKeyword_0_0_2() { return cFromKeyword_0_0_2; }
		
		//( isSufficient ?= 'all' )? ownedRelationship += EmptyItemFeatureMember
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//( isSufficient ?= 'all' )?
		public Assignment getIsSufficientAssignment_0_1_0() { return cIsSufficientAssignment_0_1_0; }
		
		//'all'
		public Keyword getIsSufficientAllKeyword_0_1_0_0() { return cIsSufficientAllKeyword_0_1_0_0; }
		
		//ownedRelationship += EmptyItemFeatureMember
		public Assignment getOwnedRelationshipAssignment_0_1_1() { return cOwnedRelationshipAssignment_0_1_1; }
		
		//EmptyItemFeatureMember
		public RuleCall getOwnedRelationshipEmptyItemFeatureMemberParserRuleCall_0_1_1_0() { return cOwnedRelationshipEmptyItemFeatureMemberParserRuleCall_0_1_1_0; }
		
		//ownedRelationship += ItemFlowEndMember
		public Assignment getOwnedRelationshipAssignment_1() { return cOwnedRelationshipAssignment_1; }
		
		//ItemFlowEndMember
		public RuleCall getOwnedRelationshipItemFlowEndMemberParserRuleCall_1_0() { return cOwnedRelationshipItemFlowEndMemberParserRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//ownedRelationship += ItemFlowEndMember
		public Assignment getOwnedRelationshipAssignment_3() { return cOwnedRelationshipAssignment_3; }
		
		//ItemFlowEndMember
		public RuleCall getOwnedRelationshipItemFlowEndMemberParserRuleCall_3_0() { return cOwnedRelationshipItemFlowEndMemberParserRuleCall_3_0; }
	}
	public class ItemFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFeatureMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cMemberNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cMemberNameNameParserRuleCall_0_0_0 = (RuleCall)cMemberNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedRelatedElementItemFeatureParserRuleCall_1_0 = (RuleCall)cOwnedRelatedElementAssignment_1.eContents().get(0);
		
		//ItemFeatureMember returns SysML::FeatureMembership :
		//    ( memberName = Name ':' )? ownedRelatedElement += ItemFeature // ownedMemberFeature = ItemFeature
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( memberName = Name ':' )? ownedRelatedElement += ItemFeature
		public Group getGroup() { return cGroup; }
		
		//( memberName = Name ':' )?
		public Group getGroup_0() { return cGroup_0; }
		
		//memberName = Name
		public Assignment getMemberNameAssignment_0_0() { return cMemberNameAssignment_0_0; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_0_0_0() { return cMemberNameNameParserRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//ownedRelatedElement += ItemFeature
		public Assignment getOwnedRelatedElementAssignment_1() { return cOwnedRelatedElementAssignment_1; }
		
		//ItemFeature
		public RuleCall getOwnedRelatedElementItemFeatureParserRuleCall_1_0() { return cOwnedRelatedElementItemFeatureParserRuleCall_1_0; }
	}
	public class ItemFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOwnedRelationshipOwnedFeatureTypingParserRuleCall_0_0_0 = (RuleCall)cOwnedRelationshipAssignment_0_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOwnedRelationshipMultiplicityMemberParserRuleCall_0_1_0 = (RuleCall)cOwnedRelationshipAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOwnedRelationshipMultiplicityMemberParserRuleCall_1_0_0 = (RuleCall)cOwnedRelationshipAssignment_1_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedFeatureTypingParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1.eContents().get(0);
		
		//ItemFeature returns SysML::ItemFeature :
		//      ownedRelationship += OwnedFeatureTyping
		//      ( ownedRelationship += MultiplicityMember )?
		//    | ownedRelationship += MultiplicityMember
		//      ( ownedRelationship += OwnedFeatureTyping )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ownedRelationship += OwnedFeatureTyping
		//  ( ownedRelationship += MultiplicityMember )?
		//| ownedRelationship += MultiplicityMember
		//  ( ownedRelationship += OwnedFeatureTyping )?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ownedRelationship += OwnedFeatureTyping
		//( ownedRelationship += MultiplicityMember )?
		public Group getGroup_0() { return cGroup_0; }
		
		//ownedRelationship += OwnedFeatureTyping
		public Assignment getOwnedRelationshipAssignment_0_0() { return cOwnedRelationshipAssignment_0_0; }
		
		//OwnedFeatureTyping
		public RuleCall getOwnedRelationshipOwnedFeatureTypingParserRuleCall_0_0_0() { return cOwnedRelationshipOwnedFeatureTypingParserRuleCall_0_0_0; }
		
		//( ownedRelationship += MultiplicityMember )?
		public Assignment getOwnedRelationshipAssignment_0_1() { return cOwnedRelationshipAssignment_0_1; }
		
		//MultiplicityMember
		public RuleCall getOwnedRelationshipMultiplicityMemberParserRuleCall_0_1_0() { return cOwnedRelationshipMultiplicityMemberParserRuleCall_0_1_0; }
		
		//ownedRelationship += MultiplicityMember
		//     ( ownedRelationship += OwnedFeatureTyping )?
		public Group getGroup_1() { return cGroup_1; }
		
		//ownedRelationship += MultiplicityMember
		public Assignment getOwnedRelationshipAssignment_1_0() { return cOwnedRelationshipAssignment_1_0; }
		
		//MultiplicityMember
		public RuleCall getOwnedRelationshipMultiplicityMemberParserRuleCall_1_0_0() { return cOwnedRelationshipMultiplicityMemberParserRuleCall_1_0_0; }
		
		//( ownedRelationship += OwnedFeatureTyping )?
		public Assignment getOwnedRelationshipAssignment_1_1() { return cOwnedRelationshipAssignment_1_1; }
		
		//OwnedFeatureTyping
		public RuleCall getOwnedRelationshipOwnedFeatureTypingParserRuleCall_1_1_0() { return cOwnedRelationshipOwnedFeatureTypingParserRuleCall_1_1_0; }
	}
	public class EmptyItemFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.EmptyItemFeatureMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementEmptyItemFeatureParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//EmptyItemFeatureMember returns SysML::FeatureMembership :
		//    ownedRelatedElement += EmptyItemFeature // ownedMemberFeature = EmptyItemFeature
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += EmptyItemFeature
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//EmptyItemFeature
		public RuleCall getOwnedRelatedElementEmptyItemFeatureParserRuleCall_0() { return cOwnedRelatedElementEmptyItemFeatureParserRuleCall_0; }
	}
	public class EmptyItemFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.EmptyItemFeature");
		private final Action cItemFeatureAction = (Action)rule.eContents().get(1);
		
		//EmptyItemFeature returns SysML::ItemFeature :
		//    {SysML::ItemFeature}
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::ItemFeature}
		public Action getItemFeatureAction() { return cItemFeatureAction; }
	}
	public class ItemFlowEndMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFlowEndMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementItemFlowEndParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//ItemFlowEndMember returns SysML::EndFeatureMembership :
		//    ownedRelatedElement += ItemFlowEnd // ownedMemberFeature = ItemFlowEnd
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += ItemFlowEnd
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//ItemFlowEnd
		public RuleCall getOwnedRelatedElementItemFlowEndParserRuleCall_0() { return cOwnedRelatedElementItemFlowEndParserRuleCall_0; }
	}
	public class ItemFlowEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFlowEnd");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipItemFlowFeatureMemberParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		//ItemFlowEnd returns SysML::ItemFlowEnd :
		//    ownedRelationship += ItemFlowFeatureMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += ItemFlowFeatureMember
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//ItemFlowFeatureMember
		public RuleCall getOwnedRelationshipItemFlowFeatureMemberParserRuleCall_0() { return cOwnedRelationshipItemFlowFeatureMemberParserRuleCall_0; }
	}
	public class ItemFlowFeatureMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFlowFeatureMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementItemFlowFeatureParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//ItemFlowFeatureMember returns SysML::FeatureMembership :
		//    ownedRelatedElement += ItemFlowFeature // ownedMemberFeature = ItemFlowFeature
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += ItemFlowFeature
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//ItemFlowFeature
		public RuleCall getOwnedRelatedElementItemFlowFeatureParserRuleCall_0() { return cOwnedRelatedElementItemFlowFeatureParserRuleCall_0; }
	}
	public class ItemFlowFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ItemFlowFeature");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOwnedRelationshipAlternatives_0 = (Alternatives)cOwnedRelationshipAssignment.eContents().get(0);
		private final RuleCall cOwnedRelationshipOwnedRedefinitionParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAlternatives_0.eContents().get(0);
		private final RuleCall cOwnedRelationshipFeaturePathExpressionMemberParserRuleCall_0_1 = (RuleCall)cOwnedRelationshipAlternatives_0.eContents().get(1);
		
		//ItemFlowFeature returns SysML::ItemFlowFeature :
		//    ownedRelationship += ( OwnedRedefinition | FeaturePathExpressionMember )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += ( OwnedRedefinition | FeaturePathExpressionMember )
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//( OwnedRedefinition | FeaturePathExpressionMember )
		public Alternatives getOwnedRelationshipAlternatives_0() { return cOwnedRelationshipAlternatives_0; }
		
		//OwnedRedefinition
		public RuleCall getOwnedRelationshipOwnedRedefinitionParserRuleCall_0_0() { return cOwnedRelationshipOwnedRedefinitionParserRuleCall_0_0; }
		
		//FeaturePathExpressionMember
		public RuleCall getOwnedRelationshipFeaturePathExpressionMemberParserRuleCall_0_1() { return cOwnedRelationshipFeaturePathExpressionMemberParserRuleCall_0_1; }
	}
	public class ExpressionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.ExpressionBody");
		private final RuleCall cFunctionBodyParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* EXPRESSIONS */
		//@Override
		//ExpressionBody returns SysML::Expression :
		//    FunctionBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FunctionBody
		public RuleCall getFunctionBodyParserRuleCall() { return cFunctionBodyParserRuleCall; }
	}
	
	public class FilterPackageMemberVisibilityElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FilterPackageMemberVisibility");
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPrivateLeftSquareBracketKeyword_0 = (Keyword)cPrivateEnumLiteralDeclaration.eContents().get(0);
		
		//enum FilterPackageMemberVisibility returns SysML::VisibilityKind :
		//    private = '['
		//;
		public EnumRule getRule() { return rule; }
		
		//private = '['
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration() { return cPrivateEnumLiteralDeclaration; }
		
		//'['
		public Keyword getPrivateLeftSquareBracketKeyword_0() { return cPrivateLeftSquareBracketKeyword_0; }
	}
	public class VisibilityIndicatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.VisibilityIndicator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_0 = (Keyword)cPrivateEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cProtectedProtectedKeyword_2_0 = (Keyword)cProtectedEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum VisibilityIndicator returns SysML::VisibilityKind :
		//    public = 'public' | private = 'private' | protected = 'protected'
		//;
		public EnumRule getRule() { return rule; }
		
		//public = 'public' | private = 'private' | protected = 'protected'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//public = 'public'
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }
		
		//'public'
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }
		
		//private = 'private'
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_1() { return cPrivateEnumLiteralDeclaration_1; }
		
		//'private'
		public Keyword getPrivatePrivateKeyword_1_0() { return cPrivatePrivateKeyword_1_0; }
		
		//protected = 'protected'
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_2() { return cProtectedEnumLiteralDeclaration_2; }
		
		//'protected'
		public Keyword getProtectedProtectedKeyword_2_0() { return cProtectedProtectedKeyword_2_0; }
	}
	public class FeatureDirectionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.xtext.KerML.FeatureDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInInKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOutOutKeyword_1_0 = (Keyword)cOutEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInoutEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInoutInoutKeyword_2_0 = (Keyword)cInoutEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum FeatureDirection returns SysML::FeatureDirectionKind:
		//    in = 'in' | out = 'out' | inout = 'inout'
		//;
		public EnumRule getRule() { return rule; }
		
		//in = 'in' | out = 'out' | inout = 'inout'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//in = 'in'
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }
		
		//'in'
		public Keyword getInInKeyword_0_0() { return cInInKeyword_0_0; }
		
		//out = 'out'
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration_1() { return cOutEnumLiteralDeclaration_1; }
		
		//'out'
		public Keyword getOutOutKeyword_1_0() { return cOutOutKeyword_1_0; }
		
		//inout = 'inout'
		public EnumLiteralDeclaration getInoutEnumLiteralDeclaration_2() { return cInoutEnumLiteralDeclaration_2; }
		
		//'inout'
		public Keyword getInoutInoutKeyword_2_0() { return cInoutInoutKeyword_2_0; }
	}
	
	private final RootNamespaceElements pRootNamespace;
	private final IdentificationElements pIdentification;
	private final ElementElements pElement;
	private final ElementBodyElements pElementBody;
	private final OwnedElementElements pOwnedElement;
	private final RelationshipElements pRelationship;
	private final OwnedRelationshipElements pOwnedRelationship;
	private final RelationshipRelatedElementsElements pRelationshipRelatedElements;
	private final RelationshipSourceListElements pRelationshipSourceList;
	private final RelationshipSourceElements pRelationshipSource;
	private final RelationshipTargetListElements pRelationshipTargetList;
	private final RelationshipTargetElements pRelationshipTarget;
	private final RelationshipBodyElements pRelationshipBody;
	private final RelationshipOwnedElementElements pRelationshipOwnedElement;
	private final OwnedRelatedElementElements pOwnedRelatedElement;
	private final OwnedRelatedRelationshipElements pOwnedRelatedRelationship;
	private final CommentElements pComment;
	private final AnnotationElements pAnnotation;
	private final EmptyAnnotationElements pEmptyAnnotation;
	private final OwnedDocumentationElements pOwnedDocumentation;
	private final DocumentationCommentElements pDocumentationComment;
	private final PrefixDocumentationElements pPrefixDocumentation;
	private final PrefixDocumentationCommentElements pPrefixDocumentationComment;
	private final OwnedTextualRepresentationAnnotationElements pOwnedTextualRepresentationAnnotation;
	private final OwnedTextualRepresentationElements pOwnedTextualRepresentation;
	private final TextualRepresentationElements pTextualRepresentation;
	private final OwnedAnnotatingFeatureAnnotationElements pOwnedAnnotatingFeatureAnnotation;
	private final OwnedAnnotatingFeatureElements pOwnedAnnotatingFeature;
	private final AnnotatingFeatureElements pAnnotatingFeature;
	private final AnnotatingFeatureDeclarationElements pAnnotatingFeatureDeclaration;
	private final MetadataTypingElements pMetadataTyping;
	private final AnnotatingFeatureBodyElements pAnnotatingFeatureBody;
	private final MetadataFeatureMemberElements pMetadataFeatureMember;
	private final MetadataFeatureElements pMetadataFeature;
	private final MetadataFeatureValueElements pMetadataFeatureValue;
	private final NamespaceElements pNamespace;
	private final NamespaceDeclarationElements pNamespaceDeclaration;
	private final NamespaceBodyElements pNamespaceBody;
	private final NamespaceBodyElementElements pNamespaceBodyElement;
	private final MemberPrefixElements pMemberPrefix;
	private final NamespaceMemberElements pNamespaceMember;
	private final AliasMemberElements pAliasMember;
	private final ImportElements pImport;
	private final ImportedNamespaceElements pImportedNamespace;
	private final ImportedFilterPackageElements pImportedFilterPackage;
	private final FilterPackageElements pFilterPackage;
	private final FilterPackageImportElements pFilterPackageImport;
	private final FilterPackageMemberElements pFilterPackageMember;
	private final FilterPackageMemberVisibilityElements eFilterPackageMemberVisibility;
	private final VisibilityIndicatorElements eVisibilityIndicator;
	private final NonFeatureElementElements pNonFeatureElement;
	private final FeatureElementElements pFeatureElement;
	private final PackageElements pPackage;
	private final PackageDeclarationElements pPackageDeclaration;
	private final PackageBodyElements pPackageBody;
	private final ElementFilterMemberElements pElementFilterMember;
	private final TypeElements pType;
	private final TypeDeclarationElements pTypeDeclaration;
	private final SpecializationPartElements pSpecializationPart;
	private final ConjugationPartElements pConjugationPart;
	private final MultiplicityMemberElements pMultiplicityMember;
	private final TypeBodyElements pTypeBody;
	private final NonFeatureMemberElements pNonFeatureMember;
	private final FeatureMemberElements pFeatureMember;
	private final SpecializationElements pSpecialization;
	private final OwnedSpecializationElements pOwnedSpecialization;
	private final ConjugationElements pConjugation;
	private final OwnedConjugationElements pOwnedConjugation;
	private final ClassifierElements pClassifier;
	private final ClassifierDeclarationElements pClassifierDeclaration;
	private final SuperclassingPartElements pSuperclassingPart;
	private final ClassifierConjugationPartElements pClassifierConjugationPart;
	private final SubclassificationElements pSubclassification;
	private final OwnedsubclassificationElements pOwnedsubclassification;
	private final ClassifierConjugationElements pClassifierConjugation;
	private final FeaturePrefixElements pFeaturePrefix;
	private final FeatureDirectionElements eFeatureDirection;
	private final FeatureElements pFeature;
	private final FeatureDeclarationElements pFeatureDeclaration;
	private final TypeFeaturingPartElements pTypeFeaturingPart;
	private final FeatureSpecializationPartElements pFeatureSpecializationPart;
	private final MultiplicityPartElements pMultiplicityPart;
	private final FeatureSpecializationElements pFeatureSpecialization;
	private final TypingsElements pTypings;
	private final TypedByElements pTypedBy;
	private final SubsettingsElements pSubsettings;
	private final SubsetsElements pSubsets;
	private final RedefinitionsElements pRedefinitions;
	private final RedefinesElements pRedefines;
	private final TypeFeaturingElements pTypeFeaturing;
	private final OwnedTypeFeaturingElements pOwnedTypeFeaturing;
	private final FeatureTypingElements pFeatureTyping;
	private final OwnedFeatureTypingElements pOwnedFeatureTyping;
	private final SubsettingElements pSubsetting;
	private final OwnedSubsettingElements pOwnedSubsetting;
	private final RedefinitionElements pRedefinition;
	private final OwnedRedefinitionElements pOwnedRedefinition;
	private final FeatureConjugationPartElements pFeatureConjugationPart;
	private final FeatureConjugationElements pFeatureConjugation;
	private final ValuePartElements pValuePart;
	private final FeatureValueElements pFeatureValue;
	private final MultiplicityElements pMultiplicity;
	private final MultiplicityExpressionMemberElements pMultiplicityExpressionMember;
	private final DataTypeElements pDataType;
	private final ClassElements pClass;
	private final StructureElements pStructure;
	private final AssociationElements pAssociation;
	private final AssociationStructureElements pAssociationStructure;
	private final ConnectorElements pConnector;
	private final ConnectorDeclarationElements pConnectorDeclaration;
	private final BinaryConnectorDeclarationElements pBinaryConnectorDeclaration;
	private final NaryConnectorDeclarationElements pNaryConnectorDeclaration;
	private final ConnectorEndMemberElements pConnectorEndMember;
	private final ConnectorEndElements pConnectorEnd;
	private final FeaturePathExpressionMemberElements pFeaturePathExpressionMember;
	private final FeaturePathExpressionElements pFeaturePathExpression;
	private final BindingConnectorElements pBindingConnector;
	private final BindingConnectorDeclarationElements pBindingConnectorDeclaration;
	private final SuccessionElements pSuccession;
	private final SuccessionDeclarationElements pSuccessionDeclaration;
	private final BehaviorElements pBehavior;
	private final BehaviorDeclarationElements pBehaviorDeclaration;
	private final ParameterListElements pParameterList;
	private final ParameterMemberElements pParameterMember;
	private final ParameterElements pParameter;
	private final ParameterDeclarationElements pParameterDeclaration;
	private final ParameterSpecializationPartElements pParameterSpecializationPart;
	private final ParameterSpecializationElements pParameterSpecialization;
	private final BehaviorBodyElements pBehaviorBody;
	private final StepElements pStep;
	private final StepDeclarationElements pStepDeclaration;
	private final StepParameterListElements pStepParameterList;
	private final StepParameterMemberElements pStepParameterMember;
	private final StepParameterElements pStepParameter;
	private final FunctionElements pFunction;
	private final FunctionDeclarationElements pFunctionDeclaration;
	private final ParameterPartElements pParameterPart;
	private final ReturnParameterPartElements pReturnParameterPart;
	private final ReturnParameterMemberElements pReturnParameterMember;
	private final EmptyReturnParameterPartElements pEmptyReturnParameterPart;
	private final EmptyReturnParameterMemberElements pEmptyReturnParameterMember;
	private final EmptyParameterElements pEmptyParameter;
	private final FunctionBodyElements pFunctionBody;
	private final ResultExpressionMemberElements pResultExpressionMember;
	private final ExpressionElements pExpression;
	private final ExpressionDeclarationElements pExpressionDeclaration;
	private final PredicateElements pPredicate;
	private final PredicateDeclarationElements pPredicateDeclaration;
	private final BooleanExpressionElements pBooleanExpression;
	private final InvariantElements pInvariant;
	private final InteractionElements pInteraction;
	private final ItemFlowElements pItemFlow;
	private final SuccessionItemFlowElements pSuccessionItemFlow;
	private final ItemFlowDeclarationElements pItemFlowDeclaration;
	private final ItemFeatureMemberElements pItemFeatureMember;
	private final ItemFeatureElements pItemFeature;
	private final EmptyItemFeatureMemberElements pEmptyItemFeatureMember;
	private final EmptyItemFeatureElements pEmptyItemFeature;
	private final ItemFlowEndMemberElements pItemFlowEndMember;
	private final ItemFlowEndElements pItemFlowEnd;
	private final ItemFlowFeatureMemberElements pItemFlowFeatureMember;
	private final ItemFlowFeatureElements pItemFlowFeature;
	private final ExpressionBodyElements pExpressionBody;
	
	private final Grammar grammar;
	
	private final KerMLExpressionsGrammarAccess gaKerMLExpressions;

	@Inject
	public KerMLGrammarAccess(GrammarProvider grammarProvider,
			KerMLExpressionsGrammarAccess gaKerMLExpressions) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaKerMLExpressions = gaKerMLExpressions;
		this.pRootNamespace = new RootNamespaceElements();
		this.pIdentification = new IdentificationElements();
		this.pElement = new ElementElements();
		this.pElementBody = new ElementBodyElements();
		this.pOwnedElement = new OwnedElementElements();
		this.pRelationship = new RelationshipElements();
		this.pOwnedRelationship = new OwnedRelationshipElements();
		this.pRelationshipRelatedElements = new RelationshipRelatedElementsElements();
		this.pRelationshipSourceList = new RelationshipSourceListElements();
		this.pRelationshipSource = new RelationshipSourceElements();
		this.pRelationshipTargetList = new RelationshipTargetListElements();
		this.pRelationshipTarget = new RelationshipTargetElements();
		this.pRelationshipBody = new RelationshipBodyElements();
		this.pRelationshipOwnedElement = new RelationshipOwnedElementElements();
		this.pOwnedRelatedElement = new OwnedRelatedElementElements();
		this.pOwnedRelatedRelationship = new OwnedRelatedRelationshipElements();
		this.pComment = new CommentElements();
		this.pAnnotation = new AnnotationElements();
		this.pEmptyAnnotation = new EmptyAnnotationElements();
		this.pOwnedDocumentation = new OwnedDocumentationElements();
		this.pDocumentationComment = new DocumentationCommentElements();
		this.pPrefixDocumentation = new PrefixDocumentationElements();
		this.pPrefixDocumentationComment = new PrefixDocumentationCommentElements();
		this.pOwnedTextualRepresentationAnnotation = new OwnedTextualRepresentationAnnotationElements();
		this.pOwnedTextualRepresentation = new OwnedTextualRepresentationElements();
		this.pTextualRepresentation = new TextualRepresentationElements();
		this.pOwnedAnnotatingFeatureAnnotation = new OwnedAnnotatingFeatureAnnotationElements();
		this.pOwnedAnnotatingFeature = new OwnedAnnotatingFeatureElements();
		this.pAnnotatingFeature = new AnnotatingFeatureElements();
		this.pAnnotatingFeatureDeclaration = new AnnotatingFeatureDeclarationElements();
		this.pMetadataTyping = new MetadataTypingElements();
		this.pAnnotatingFeatureBody = new AnnotatingFeatureBodyElements();
		this.pMetadataFeatureMember = new MetadataFeatureMemberElements();
		this.pMetadataFeature = new MetadataFeatureElements();
		this.pMetadataFeatureValue = new MetadataFeatureValueElements();
		this.pNamespace = new NamespaceElements();
		this.pNamespaceDeclaration = new NamespaceDeclarationElements();
		this.pNamespaceBody = new NamespaceBodyElements();
		this.pNamespaceBodyElement = new NamespaceBodyElementElements();
		this.pMemberPrefix = new MemberPrefixElements();
		this.pNamespaceMember = new NamespaceMemberElements();
		this.pAliasMember = new AliasMemberElements();
		this.pImport = new ImportElements();
		this.pImportedNamespace = new ImportedNamespaceElements();
		this.pImportedFilterPackage = new ImportedFilterPackageElements();
		this.pFilterPackage = new FilterPackageElements();
		this.pFilterPackageImport = new FilterPackageImportElements();
		this.pFilterPackageMember = new FilterPackageMemberElements();
		this.eFilterPackageMemberVisibility = new FilterPackageMemberVisibilityElements();
		this.eVisibilityIndicator = new VisibilityIndicatorElements();
		this.pNonFeatureElement = new NonFeatureElementElements();
		this.pFeatureElement = new FeatureElementElements();
		this.pPackage = new PackageElements();
		this.pPackageDeclaration = new PackageDeclarationElements();
		this.pPackageBody = new PackageBodyElements();
		this.pElementFilterMember = new ElementFilterMemberElements();
		this.pType = new TypeElements();
		this.pTypeDeclaration = new TypeDeclarationElements();
		this.pSpecializationPart = new SpecializationPartElements();
		this.pConjugationPart = new ConjugationPartElements();
		this.pMultiplicityMember = new MultiplicityMemberElements();
		this.pTypeBody = new TypeBodyElements();
		this.pNonFeatureMember = new NonFeatureMemberElements();
		this.pFeatureMember = new FeatureMemberElements();
		this.pSpecialization = new SpecializationElements();
		this.pOwnedSpecialization = new OwnedSpecializationElements();
		this.pConjugation = new ConjugationElements();
		this.pOwnedConjugation = new OwnedConjugationElements();
		this.pClassifier = new ClassifierElements();
		this.pClassifierDeclaration = new ClassifierDeclarationElements();
		this.pSuperclassingPart = new SuperclassingPartElements();
		this.pClassifierConjugationPart = new ClassifierConjugationPartElements();
		this.pSubclassification = new SubclassificationElements();
		this.pOwnedsubclassification = new OwnedsubclassificationElements();
		this.pClassifierConjugation = new ClassifierConjugationElements();
		this.pFeaturePrefix = new FeaturePrefixElements();
		this.eFeatureDirection = new FeatureDirectionElements();
		this.pFeature = new FeatureElements();
		this.pFeatureDeclaration = new FeatureDeclarationElements();
		this.pTypeFeaturingPart = new TypeFeaturingPartElements();
		this.pFeatureSpecializationPart = new FeatureSpecializationPartElements();
		this.pMultiplicityPart = new MultiplicityPartElements();
		this.pFeatureSpecialization = new FeatureSpecializationElements();
		this.pTypings = new TypingsElements();
		this.pTypedBy = new TypedByElements();
		this.pSubsettings = new SubsettingsElements();
		this.pSubsets = new SubsetsElements();
		this.pRedefinitions = new RedefinitionsElements();
		this.pRedefines = new RedefinesElements();
		this.pTypeFeaturing = new TypeFeaturingElements();
		this.pOwnedTypeFeaturing = new OwnedTypeFeaturingElements();
		this.pFeatureTyping = new FeatureTypingElements();
		this.pOwnedFeatureTyping = new OwnedFeatureTypingElements();
		this.pSubsetting = new SubsettingElements();
		this.pOwnedSubsetting = new OwnedSubsettingElements();
		this.pRedefinition = new RedefinitionElements();
		this.pOwnedRedefinition = new OwnedRedefinitionElements();
		this.pFeatureConjugationPart = new FeatureConjugationPartElements();
		this.pFeatureConjugation = new FeatureConjugationElements();
		this.pValuePart = new ValuePartElements();
		this.pFeatureValue = new FeatureValueElements();
		this.pMultiplicity = new MultiplicityElements();
		this.pMultiplicityExpressionMember = new MultiplicityExpressionMemberElements();
		this.pDataType = new DataTypeElements();
		this.pClass = new ClassElements();
		this.pStructure = new StructureElements();
		this.pAssociation = new AssociationElements();
		this.pAssociationStructure = new AssociationStructureElements();
		this.pConnector = new ConnectorElements();
		this.pConnectorDeclaration = new ConnectorDeclarationElements();
		this.pBinaryConnectorDeclaration = new BinaryConnectorDeclarationElements();
		this.pNaryConnectorDeclaration = new NaryConnectorDeclarationElements();
		this.pConnectorEndMember = new ConnectorEndMemberElements();
		this.pConnectorEnd = new ConnectorEndElements();
		this.pFeaturePathExpressionMember = new FeaturePathExpressionMemberElements();
		this.pFeaturePathExpression = new FeaturePathExpressionElements();
		this.pBindingConnector = new BindingConnectorElements();
		this.pBindingConnectorDeclaration = new BindingConnectorDeclarationElements();
		this.pSuccession = new SuccessionElements();
		this.pSuccessionDeclaration = new SuccessionDeclarationElements();
		this.pBehavior = new BehaviorElements();
		this.pBehaviorDeclaration = new BehaviorDeclarationElements();
		this.pParameterList = new ParameterListElements();
		this.pParameterMember = new ParameterMemberElements();
		this.pParameter = new ParameterElements();
		this.pParameterDeclaration = new ParameterDeclarationElements();
		this.pParameterSpecializationPart = new ParameterSpecializationPartElements();
		this.pParameterSpecialization = new ParameterSpecializationElements();
		this.pBehaviorBody = new BehaviorBodyElements();
		this.pStep = new StepElements();
		this.pStepDeclaration = new StepDeclarationElements();
		this.pStepParameterList = new StepParameterListElements();
		this.pStepParameterMember = new StepParameterMemberElements();
		this.pStepParameter = new StepParameterElements();
		this.pFunction = new FunctionElements();
		this.pFunctionDeclaration = new FunctionDeclarationElements();
		this.pParameterPart = new ParameterPartElements();
		this.pReturnParameterPart = new ReturnParameterPartElements();
		this.pReturnParameterMember = new ReturnParameterMemberElements();
		this.pEmptyReturnParameterPart = new EmptyReturnParameterPartElements();
		this.pEmptyReturnParameterMember = new EmptyReturnParameterMemberElements();
		this.pEmptyParameter = new EmptyParameterElements();
		this.pFunctionBody = new FunctionBodyElements();
		this.pResultExpressionMember = new ResultExpressionMemberElements();
		this.pExpression = new ExpressionElements();
		this.pExpressionDeclaration = new ExpressionDeclarationElements();
		this.pPredicate = new PredicateElements();
		this.pPredicateDeclaration = new PredicateDeclarationElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pInvariant = new InvariantElements();
		this.pInteraction = new InteractionElements();
		this.pItemFlow = new ItemFlowElements();
		this.pSuccessionItemFlow = new SuccessionItemFlowElements();
		this.pItemFlowDeclaration = new ItemFlowDeclarationElements();
		this.pItemFeatureMember = new ItemFeatureMemberElements();
		this.pItemFeature = new ItemFeatureElements();
		this.pEmptyItemFeatureMember = new EmptyItemFeatureMemberElements();
		this.pEmptyItemFeature = new EmptyItemFeatureElements();
		this.pItemFlowEndMember = new ItemFlowEndMemberElements();
		this.pItemFlowEnd = new ItemFlowEndElements();
		this.pItemFlowFeatureMember = new ItemFlowFeatureMemberElements();
		this.pItemFlowFeature = new ItemFlowFeatureElements();
		this.pExpressionBody = new ExpressionBodyElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.omg.kerml.xtext.KerML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public KerMLExpressionsGrammarAccess getKerMLExpressionsGrammarAccess() {
		return gaKerMLExpressions;
	}

	
	///* ROOT NAMESPACE */
	//RootNamespace returns SysML::Namespace :
	//    {SysML::Namespace}NamespaceBodyElement*
	//;
	public RootNamespaceElements getRootNamespaceAccess() {
		return pRootNamespace;
	}
	
	public ParserRule getRootNamespaceRule() {
		return getRootNamespaceAccess().getRule();
	}
	
	///* ELEMENTS */
	///* Elements */
	//fragment Identification returns SysML::Element :
	//      'id' humanId = Name ( name = Name )?
	//    | name = Name
	//;
	public IdentificationElements getIdentificationAccess() {
		return pIdentification;
	}
	
	public ParserRule getIdentificationRule() {
		return getIdentificationAccess().getRule();
	}
	
	//Element returns SysML::Element :
	//    'element' Identification? ElementBody
	//;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//fragment ElementBody returns SysML::Element :
	//    ';' | '{' OwnedElement* '}'
	//;
	public ElementBodyElements getElementBodyAccess() {
		return pElementBody;
	}
	
	public ParserRule getElementBodyRule() {
		return getElementBodyAccess().getRule();
	}
	
	//fragment OwnedElement returns SysML::Element :
	//      ownedRelationship += OwnedRelationship
	//    | ownedRelationship += OwnedDocumentation
	//    | ownedRelationship += OwnedTextualRepresentationAnnotation
	//    | ownedRelationship += OwnedAnnotatingFeatureAnnotation
	//;
	public OwnedElementElements getOwnedElementAccess() {
		return pOwnedElement;
	}
	
	public ParserRule getOwnedElementRule() {
		return getOwnedElementAccess().getRule();
	}
	
	///* Relationships */
	//Relationship returns SysML::Relationship :
	//    'relationship' Identification?
	//    RelationshipRelatedElements
	//    RelationshipBody
	//;
	public RelationshipElements getRelationshipAccess() {
		return pRelationship;
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}
	
	//OwnedRelationship returns SysML::Relationship :
	//    'relationship' Identification?
	//    'to' RelationshipTargetList
	//    RelationshipBody
	//;
	public OwnedRelationshipElements getOwnedRelationshipAccess() {
		return pOwnedRelationship;
	}
	
	public ParserRule getOwnedRelationshipRule() {
		return getOwnedRelationshipAccess().getRule();
	}
	
	//fragment RelationshipRelatedElements returns SysML::Relationship :
	//      'from' RelationshipSourceList ( 'to' RelationshipTargetList )?
	//    | 'to' RelationshipTargetList
	//;
	public RelationshipRelatedElementsElements getRelationshipRelatedElementsAccess() {
		return pRelationshipRelatedElements;
	}
	
	public ParserRule getRelationshipRelatedElementsRule() {
		return getRelationshipRelatedElementsAccess().getRule();
	}
	
	//fragment RelationshipSourceList returns SysML::Relationship :
	//    RelationshipSource ( ',' RelationshipSource )*
	//;
	public RelationshipSourceListElements getRelationshipSourceListAccess() {
		return pRelationshipSourceList;
	}
	
	public ParserRule getRelationshipSourceListRule() {
		return getRelationshipSourceListAccess().getRule();
	}
	
	//fragment RelationshipSource returns SysML::Relationship :
	//    source += [SysML::Element | QualifiedName]
	//;
	public RelationshipSourceElements getRelationshipSourceAccess() {
		return pRelationshipSource;
	}
	
	public ParserRule getRelationshipSourceRule() {
		return getRelationshipSourceAccess().getRule();
	}
	
	//fragment RelationshipTargetList returns SysML::Relationship :
	//    RelationshipTarget ( ',' RelationshipTarget )*
	//;
	public RelationshipTargetListElements getRelationshipTargetListAccess() {
		return pRelationshipTargetList;
	}
	
	public ParserRule getRelationshipTargetListRule() {
		return getRelationshipTargetListAccess().getRule();
	}
	
	//fragment RelationshipTarget returns SysML::Relationship :
	//    target += [SysML::Element | QualifiedName]
	//;
	public RelationshipTargetElements getRelationshipTargetAccess() {
		return pRelationshipTarget;
	}
	
	public ParserRule getRelationshipTargetRule() {
		return getRelationshipTargetAccess().getRule();
	}
	
	//fragment RelationshipBody returns SysML::Relationship :
	//    ';' | '{' RelationshipOwnedElement* '}'
	//;
	public RelationshipBodyElements getRelationshipBodyAccess() {
		return pRelationshipBody;
	}
	
	public ParserRule getRelationshipBodyRule() {
		return getRelationshipBodyAccess().getRule();
	}
	
	//fragment RelationshipOwnedElement returns SysML::Relationship:
	//      ownedRelatedElement += OwnedRelatedElement
	//    | ownedRelationship += OwnedDocumentation
	//    | ownedRelationship += OwnedTextualRepresentationAnnotation
	//;
	public RelationshipOwnedElementElements getRelationshipOwnedElementAccess() {
		return pRelationshipOwnedElement;
	}
	
	public ParserRule getRelationshipOwnedElementRule() {
		return getRelationshipOwnedElementAccess().getRule();
	}
	
	//OwnedRelatedElement returns SysML::Element :
	//      'element' ( humanId = Name )? ElementBody
	//    | OwnedRelatedRelationship
	//;
	public OwnedRelatedElementElements getOwnedRelatedElementAccess() {
		return pOwnedRelatedElement;
	}
	
	public ParserRule getOwnedRelatedElementRule() {
		return getOwnedRelatedElementAccess().getRule();
	}
	
	//OwnedRelatedRelationship returns SysML::Relationship :
	//    'relationship' ( humanId = Name )? RelationshipBody
	//;
	public OwnedRelatedRelationshipElements getOwnedRelatedRelationshipAccess() {
		return pOwnedRelatedRelationship;
	}
	
	public ParserRule getOwnedRelatedRelationshipRule() {
		return getOwnedRelatedRelationshipAccess().getRule();
	}
	
	///* ANNOTATIONS */
	///* Comments */
	//Comment returns SysML::Comment :
	//    ( 'comment' Identification? 'about' ownedRelationship += Annotation
	//      ( ',' ownedRelationship += Annotation )*
	//    | ( 'comment' Identification? )? ownedRelationship += EmptyAnnotation
	//    )
	//    body = REGULAR_COMMENT
	//;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//Annotation returns SysML::Annotation :
	//    annotatedElement = [SysML::Element|QualifiedName]
	//;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//EmptyAnnotation returns SysML::Annotation :
	//    {SysML::Annotation}
	//;
	public EmptyAnnotationElements getEmptyAnnotationAccess() {
		return pEmptyAnnotation;
	}
	
	public ParserRule getEmptyAnnotationRule() {
		return getEmptyAnnotationAccess().getRule();
	}
	
	///* Documentation */
	//OwnedDocumentation returns SysML::Documentation :
	//    ownedRelatedElement += DocumentationComment // documentingComment = DocumentationComment
	//;
	public OwnedDocumentationElements getOwnedDocumentationAccess() {
		return pOwnedDocumentation;
	}
	
	public ParserRule getOwnedDocumentationRule() {
		return getOwnedDocumentationAccess().getRule();
	}
	
	//DocumentationComment returns SysML::Comment :
	//    'doc' ( 'id' humanId = Name )? body = REGULAR_COMMENT
	//;
	public DocumentationCommentElements getDocumentationCommentAccess() {
		return pDocumentationComment;
	}
	
	public ParserRule getDocumentationCommentRule() {
		return getDocumentationCommentAccess().getRule();
	}
	
	//PrefixDocumentation returns SysML::Annotation :
	//    ownedRelatedElement += PrefixDocumentationComment
	//;
	public PrefixDocumentationElements getPrefixDocumentationAccess() {
		return pPrefixDocumentation;
	}
	
	public ParserRule getPrefixDocumentationRule() {
		return getPrefixDocumentationAccess().getRule();
	}
	
	//PrefixDocumentationComment returns SysML::Comment :
	//    ( 'doc' ( 'id' humanId = Name )? )? body = DOCUMENTATION_COMMENT
	//;
	public PrefixDocumentationCommentElements getPrefixDocumentationCommentAccess() {
		return pPrefixDocumentationComment;
	}
	
	public ParserRule getPrefixDocumentationCommentRule() {
		return getPrefixDocumentationCommentAccess().getRule();
	}
	
	///* Textual Representation */
	//OwnedTextualRepresentationAnnotation returns SysML::Annotation :
	//    ownedRelatedElement += OwnedTextualRepresentation
	//;
	public OwnedTextualRepresentationAnnotationElements getOwnedTextualRepresentationAnnotationAccess() {
		return pOwnedTextualRepresentationAnnotation;
	}
	
	public ParserRule getOwnedTextualRepresentationAnnotationRule() {
		return getOwnedTextualRepresentationAnnotationAccess().getRule();
	}
	
	//OwnedTextualRepresentation returns SysML::TextualRepresentation :
	//    ( 'rep' ( humanId = Name )? )?
	//    'language' language = STRING_VALUE body = REGULAR_COMMENT
	//    ownedRelationship += EmptyAnnotation
	//;
	public OwnedTextualRepresentationElements getOwnedTextualRepresentationAccess() {
		return pOwnedTextualRepresentation;
	}
	
	public ParserRule getOwnedTextualRepresentationRule() {
		return getOwnedTextualRepresentationAccess().getRule();
	}
	
	//TextualRepresentation returns SysML::TextualRepresentation :
	//    ( 'rep' Identification? 'about' ownedRelationship += Annotation
	//    | ( 'rep' Identification? )? ownedRelationship += EmptyAnnotation
	//    )
	//    'language' language = STRING_VALUE
	//    body = REGULAR_COMMENT
	//;
	public TextualRepresentationElements getTextualRepresentationAccess() {
		return pTextualRepresentation;
	}
	
	public ParserRule getTextualRepresentationRule() {
		return getTextualRepresentationAccess().getRule();
	}
	
	///* Annotating Features */
	//OwnedAnnotatingFeatureAnnotation returns SysML::Annotation :
	//    ownedRelatedElement += OwnedAnnotatingFeature
	//;
	public OwnedAnnotatingFeatureAnnotationElements getOwnedAnnotatingFeatureAnnotationAccess() {
		return pOwnedAnnotatingFeatureAnnotation;
	}
	
	public ParserRule getOwnedAnnotatingFeatureAnnotationRule() {
		return getOwnedAnnotatingFeatureAnnotationAccess().getRule();
	}
	
	//OwnedAnnotatingFeature returns SysML::AnnotatingFeature :
	//    'metadata' ( humanId = Name ( ':' | 'typed' 'by' ) )? ownedRelationship += MetadataTyping
	//    ownedRelationship += EmptyAnnotation
	//    AnnotatingFeatureBody
	//;
	public OwnedAnnotatingFeatureElements getOwnedAnnotatingFeatureAccess() {
		return pOwnedAnnotatingFeature;
	}
	
	public ParserRule getOwnedAnnotatingFeatureRule() {
		return getOwnedAnnotatingFeatureAccess().getRule();
	}
	
	//AnnotatingFeature returns SysML::AnnotatingFeature :
	//    ( '@' | 'metadata' ) AnnotatingFeatureDeclaration
	//    ( 'about' ownedRelationship += Annotation ( ',' ownedRelationship += Annotation )*
	//    | ownedRelationship += EmptyAnnotation
	//    )
	//    AnnotatingFeatureBody
	//;
	public AnnotatingFeatureElements getAnnotatingFeatureAccess() {
		return pAnnotatingFeature;
	}
	
	public ParserRule getAnnotatingFeatureRule() {
		return getAnnotatingFeatureAccess().getRule();
	}
	
	//fragment AnnotatingFeatureDeclaration returns SysML::AnnotatingFeature :
	//    ( Identification ( ':' | 'typed' 'by' ) )? ownedRelationship += MetadataTyping
	//;
	public AnnotatingFeatureDeclarationElements getAnnotatingFeatureDeclarationAccess() {
		return pAnnotatingFeatureDeclaration;
	}
	
	public ParserRule getAnnotatingFeatureDeclarationRule() {
		return getAnnotatingFeatureDeclarationAccess().getRule();
	}
	
	//MetadataTyping returns SysML::FeatureTyping :
	//    type = [SysML::DataType | QualifiedName]
	//;
	public MetadataTypingElements getMetadataTypingAccess() {
		return pMetadataTyping;
	}
	
	public ParserRule getMetadataTypingRule() {
		return getMetadataTypingAccess().getRule();
	}
	
	//fragment AnnotatingFeatureBody returns SysML::AnnotatingFeature :
	//    ';' | '{' ( ownedRelationship += MetadataFeatureMember )* '}'
	//;
	public AnnotatingFeatureBodyElements getAnnotatingFeatureBodyAccess() {
		return pAnnotatingFeatureBody;
	}
	
	public ParserRule getAnnotatingFeatureBodyRule() {
		return getAnnotatingFeatureBodyAccess().getRule();
	}
	
	//MetadataFeatureMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += MetadataFeature // ownedMemberFeature = MetadataFeature
	//;
	public MetadataFeatureMemberElements getMetadataFeatureMemberAccess() {
		return pMetadataFeatureMember;
	}
	
	public ParserRule getMetadataFeatureMemberRule() {
		return getMetadataFeatureMemberAccess().getRule();
	}
	
	//MetadataFeature returns SysML::MetadataFeature :
	//    'feature'? ( ':>>' | 'redefines')? ownedRelationship += OwnedRedefinition
	//    '=' ownedRelationship += MetadataFeatureValue ';' // metadataFeatureValue = MetadataFeatureValue ';'
	//;
	public MetadataFeatureElements getMetadataFeatureAccess() {
		return pMetadataFeature;
	}
	
	public ParserRule getMetadataFeatureRule() {
		return getMetadataFeatureAccess().getRule();
	}
	
	//MetadataFeatureValue returns SysML::MetadataFeatureValue :
	//    ownedRelatedElement += OwnedExpression // metadataValue = OwnedExpression
	//;
	public MetadataFeatureValueElements getMetadataFeatureValueAccess() {
		return pMetadataFeatureValue;
	}
	
	public ParserRule getMetadataFeatureValueRule() {
		return getMetadataFeatureValueAccess().getRule();
	}
	
	///* NAMESPACES */
	//Namespace returns SysML::Namespace :
	//    NamespaceDeclaration NamespaceBody
	//;
	public NamespaceElements getNamespaceAccess() {
		return pNamespace;
	}
	
	public ParserRule getNamespaceRule() {
		return getNamespaceAccess().getRule();
	}
	
	//fragment NamespaceDeclaration returns SysML::Namespace :
	//    'namespace' Identification?
	//;
	public NamespaceDeclarationElements getNamespaceDeclarationAccess() {
		return pNamespaceDeclaration;
	}
	
	public ParserRule getNamespaceDeclarationRule() {
		return getNamespaceDeclarationAccess().getRule();
	}
	
	//fragment NamespaceBody returns SysML::Namespace :
	//      ';'
	//    | '{' ( // Note: PackageBodyElement is expanded here to avoid
	//            // infinite loops in the incremental parser.
	//            ownedRelationship += OwnedDocumentation
	//          | ownedRelationship += NamespaceMember
	//          | ownedRelationship += AliasMember
	//          | ownedRelationship += Import )*
	//      '}'
	//;
	public NamespaceBodyElements getNamespaceBodyAccess() {
		return pNamespaceBody;
	}
	
	public ParserRule getNamespaceBodyRule() {
		return getNamespaceBodyAccess().getRule();
	}
	
	///* Namespace Bodies */
	//fragment NamespaceBodyElement returns SysML::Namespace :
	//      ownedRelationship += OwnedDocumentation
	//    | ownedRelationship += NamespaceMember
	//    | ownedRelationship += AliasMember
	//    | ownedRelationship += Import
	//;
	public NamespaceBodyElementElements getNamespaceBodyElementAccess() {
		return pNamespaceBodyElement;
	}
	
	public ParserRule getNamespaceBodyElementRule() {
		return getNamespaceBodyElementAccess().getRule();
	}
	
	//fragment MemberPrefix returns SysML::Membership :
	//    ( ownedRelationship += PrefixDocumentation )*
	//    ( visibility = VisibilityIndicator )?
	//;
	public MemberPrefixElements getMemberPrefixAccess() {
		return pMemberPrefix;
	}
	
	public ParserRule getMemberPrefixRule() {
		return getMemberPrefixAccess().getRule();
	}
	
	//NamespaceMember returns SysML::Membership :
	//    MemberPrefix
	//    ( ownedRelatedElement += NonFeatureElement // ownedMemberElement = NonFeatureElement
	//    | ownedRelatedElement += FeatureElement // ownedMemberElement = NonFeatureElement
	//    )
	//;
	public NamespaceMemberElements getNamespaceMemberAccess() {
		return pNamespaceMember;
	}
	
	public ParserRule getNamespaceMemberRule() {
		return getNamespaceMemberAccess().getRule();
	}
	
	//AliasMember returns SysML::Membership :
	//    MemberPrefix
	//    'alias' memberName = Name 'for' memberElement = [SysML::Element|QualifiedName] ';'
	//;
	public AliasMemberElements getAliasMemberAccess() {
		return pAliasMember;
	}
	
	public ParserRule getAliasMemberRule() {
		return getAliasMemberAccess().getRule();
	}
	
	//Import returns SysML::Import :
	//    ( ownedRelationship += PrefixDocumentation )*
	//    ( visibility = VisibilityIndicator )?
	//    'import' ( isImportAll ?= 'all' )?
	//    ( ImportedNamespace | ImportedFilterPackage ) ';'
	//;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//fragment ImportedNamespace returns SysML::Import :
	//    ( importedNamespace = [SysML::Namespace|Qualification] )?
	//    ( importedMemberName = Name | '*' )
	//    ( '::' isRecursive ?= '**' )?
	//;
	public ImportedNamespaceElements getImportedNamespaceAccess() {
		return pImportedNamespace;
	}
	
	public ParserRule getImportedNamespaceRule() {
		return getImportedNamespaceAccess().getRule();
	}
	
	//fragment ImportedFilterPackage returns SysML::Import :
	//    ownedRelatedElement += FilterPackage
	//;
	public ImportedFilterPackageElements getImportedFilterPackageAccess() {
		return pImportedFilterPackage;
	}
	
	public ParserRule getImportedFilterPackageRule() {
		return getImportedFilterPackageAccess().getRule();
	}
	
	//FilterPackage returns SysML::Package :
	//    ownedRelationship += FilterPackageImport
	//    ( ownedRelationship += FilterPackageMember )+
	//;
	public FilterPackageElements getFilterPackageAccess() {
		return pFilterPackage;
	}
	
	public ParserRule getFilterPackageRule() {
		return getFilterPackageAccess().getRule();
	}
	
	//FilterPackageImport returns SysML::Import :
	//    ImportedNamespace
	//;
	public FilterPackageImportElements getFilterPackageImportAccess() {
		return pFilterPackageImport;
	}
	
	public ParserRule getFilterPackageImportRule() {
		return getFilterPackageImportAccess().getRule();
	}
	
	//FilterPackageMember returns SysML::ElementFilterMembership :
	//    visibility = FilterPackageMemberVisibility ownedRelatedElement += OwnedExpression ']' // condition = OwnedExpression ']'
	//;
	public FilterPackageMemberElements getFilterPackageMemberAccess() {
		return pFilterPackageMember;
	}
	
	public ParserRule getFilterPackageMemberRule() {
		return getFilterPackageMemberAccess().getRule();
	}
	
	//enum FilterPackageMemberVisibility returns SysML::VisibilityKind :
	//    private = '['
	//;
	public FilterPackageMemberVisibilityElements getFilterPackageMemberVisibilityAccess() {
		return eFilterPackageMemberVisibility;
	}
	
	public EnumRule getFilterPackageMemberVisibilityRule() {
		return getFilterPackageMemberVisibilityAccess().getRule();
	}
	
	//enum VisibilityIndicator returns SysML::VisibilityKind :
	//    public = 'public' | private = 'private' | protected = 'protected'
	//;
	public VisibilityIndicatorElements getVisibilityIndicatorAccess() {
		return eVisibilityIndicator;
	}
	
	public EnumRule getVisibilityIndicatorRule() {
		return getVisibilityIndicatorAccess().getRule();
	}
	
	///* Namespace Elements */
	//NonFeatureElement returns SysML::Element :
	//      Element
	//    | Relationship
	//    | Comment
	//    | TextualRepresentation
	//    | AnnotatingFeature
	//    | Namespace
	//    | Package
	//    | Type
	//    | Classifier
	//    | Class
	//    | Structure
	//    | DataType
	//    | Association
	//    | AssociationStructure
	//    | Interaction
	//    | Behavior
	//    | Function
	//    | Predicate
	//    | Specialization
	//    | Conjugation
	//    | FeatureTyping
	//    | Subclassification
	//    | Subsetting
	//    | Redefinition
	//    | TypeFeaturing
	//;
	public NonFeatureElementElements getNonFeatureElementAccess() {
		return pNonFeatureElement;
	}
	
	public ParserRule getNonFeatureElementRule() {
		return getNonFeatureElementAccess().getRule();
	}
	
	//FeatureElement returns SysML::Feature :
	//      Feature
	//    | Step
	//    | Expression
	//    | BooleanExpression
	//    | Invariant
	//    | Connector
	//    | BindingConnector
	//    | Succession
	//    | ItemFlow
	//    | SuccessionItemFlow
	//;
	public FeatureElementElements getFeatureElementAccess() {
		return pFeatureElement;
	}
	
	public ParserRule getFeatureElementRule() {
		return getFeatureElementAccess().getRule();
	}
	
	///* PACKAGES */
	//Package returns SysML::Package :
	//    PackageDeclaration PackageBody
	//;
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//fragment PackageDeclaration returns SysML::Package :
	//    'package' Identification?
	//;
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return pPackageDeclaration;
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}
	
	//fragment PackageBody returns SysML::Namespace :
	//      ';'
	//    | '{' ( // Note: PackageBodyElement is expanded here to avoid
	//            // infinite loops in the incremental parser.
	//            ownedRelationship += OwnedDocumentation
	//          | ownedRelationship += NamespaceMember
	//          | ownedRelationship += ElementFilterMember
	//          | ownedRelationship += AliasMember
	//          | ownedRelationship += Import )*
	//      '}'
	//;
	public PackageBodyElements getPackageBodyAccess() {
		return pPackageBody;
	}
	
	public ParserRule getPackageBodyRule() {
		return getPackageBodyAccess().getRule();
	}
	
	//ElementFilterMember returns SysML::ElementFilterMembership :
	//    MemberPrefix
	//    'filter' ownedRelatedElement += OwnedExpression ';' // condition = OwnedExpression ';'
	//;
	public ElementFilterMemberElements getElementFilterMemberAccess() {
		return pElementFilterMember;
	}
	
	public ParserRule getElementFilterMemberRule() {
		return getElementFilterMemberAccess().getRule();
	}
	
	///* TYPES */
	///* Types */
	//Type returns SysML::Type :
	//    ( isAbstract ?= 'abstract' )? 'type'
	//    TypeDeclaration TypeBody
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//fragment TypeDeclaration returns SysML::Type :
	//    ( isSufficient ?= 'all' )? Identification?
	//    ( ownedRelationship += MultiplicityMember )?
	//    ( SpecializationPart | ConjugationPart )+
	//;
	public TypeDeclarationElements getTypeDeclarationAccess() {
		return pTypeDeclaration;
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}
	
	//fragment SpecializationPart returns SysML::Type :
	//      ( ':>' | 'specializes' ) ownedRelationship += OwnedSpecialization
	//      ( ',' ownedRelationship += OwnedSpecialization )*
	//;
	public SpecializationPartElements getSpecializationPartAccess() {
		return pSpecializationPart;
	}
	
	public ParserRule getSpecializationPartRule() {
		return getSpecializationPartAccess().getRule();
	}
	
	//fragment ConjugationPart returns SysML::Type :
	//    ( '~' | 'conjugates' ) ownedRelationship += OwnedConjugation
	//;
	public ConjugationPartElements getConjugationPartAccess() {
		return pConjugationPart;
	}
	
	public ParserRule getConjugationPartRule() {
		return getConjugationPartAccess().getRule();
	}
	
	//MultiplicityMember returns SysML::Membership :
	//    ownedRelatedElement += Multiplicity // ownedMemberElement = Multiplicity
	//;
	public MultiplicityMemberElements getMultiplicityMemberAccess() {
		return pMultiplicityMember;
	}
	
	public ParserRule getMultiplicityMemberRule() {
		return getMultiplicityMemberAccess().getRule();
	}
	
	//fragment TypeBody returns SysML::Type :
	//    ';' |
	//    '{' ( ownedRelationship += OwnedDocumentation
	//        | ownedRelationship += NonFeatureMember
	//        | ownedRelationship += FeatureMember
	//        | ownedRelationship += AliasMember
	//        | ownedRelationship += Import
	//    )* '}'
	//;
	public TypeBodyElements getTypeBodyAccess() {
		return pTypeBody;
	}
	
	public ParserRule getTypeBodyRule() {
		return getTypeBodyAccess().getRule();
	}
	
	//NonFeatureMember returns SysML::Membership :
	//    MemberPrefix ownedRelatedElement += NonFeatureElement // ownedMemberElement = NonFeatureElement
	//;
	public NonFeatureMemberElements getNonFeatureMemberAccess() {
		return pNonFeatureMember;
	}
	
	public ParserRule getNonFeatureMemberRule() {
		return getNonFeatureMemberAccess().getRule();
	}
	
	///* Feature Membership */
	//FeatureMember returns SysML::FeatureMembership :
	//    MemberPrefix
	//    ( ownedRelatedElement += FeatureElement // ownedMemberFeature = FeatureElement
	//    | 'feature'? ( memberName = Name )? 'is' memberFeature = [SysML::Feature|QualifiedName] ';'
	//    )
	//;
	public FeatureMemberElements getFeatureMemberAccess() {
		return pFeatureMember;
	}
	
	public ParserRule getFeatureMemberRule() {
		return getFeatureMemberAccess().getRule();
	}
	
	///* Specialization */
	//Specialization returns SysML::Specialization :
	//    ( 'specialization' Identification? )?
	//    'subtype' specific = [SysML::Type | QualifiedName]
	//    ( ':>' | 'specializes') general = [SysML::Type | QualifiedName] ';'
	//;
	public SpecializationElements getSpecializationAccess() {
		return pSpecialization;
	}
	
	public ParserRule getSpecializationRule() {
		return getSpecializationAccess().getRule();
	}
	
	//OwnedSpecialization returns SysML::Specialization :
	//    general = [SysML::Type | QualifiedName]
	//;
	public OwnedSpecializationElements getOwnedSpecializationAccess() {
		return pOwnedSpecialization;
	}
	
	public ParserRule getOwnedSpecializationRule() {
		return getOwnedSpecializationAccess().getRule();
	}
	
	///* Conjugation */
	//Conjugation returns SysML::Conjugation :
	//    'conjugation' Identification?
	//    'type' conjugatedType = [SysML::Type | QualifiedName]
	//    ( '~' | 'conjugates') originalType = [SysML::Type | QualifiedName] ';'
	//;
	public ConjugationElements getConjugationAccess() {
		return pConjugation;
	}
	
	public ParserRule getConjugationRule() {
		return getConjugationAccess().getRule();
	}
	
	//OwnedConjugation returns SysML::Conjugation :
	//    originalType = [SysML::Type | QualifiedName]
	//;
	public OwnedConjugationElements getOwnedConjugationAccess() {
		return pOwnedConjugation;
	}
	
	public ParserRule getOwnedConjugationRule() {
		return getOwnedConjugationAccess().getRule();
	}
	
	///* CLASSIFIERS */
	///* Classifiers */
	//Classifier returns SysML::Classifier :
	//    ( isAbstract ?= 'abstract' )? 'classifier'
	//    ClassifierDeclaration TypeBody
	//;
	public ClassifierElements getClassifierAccess() {
		return pClassifier;
	}
	
	public ParserRule getClassifierRule() {
		return getClassifierAccess().getRule();
	}
	
	//fragment ClassifierDeclaration returns SysML::Classifier :
	//    (isSufficient ?= 'all' )? Identification?
	//    ( ownedRelationship += MultiplicityMember )?
	//    ( SuperclassingPart | ClassifierConjugationPart )?
	//;
	public ClassifierDeclarationElements getClassifierDeclarationAccess() {
		return pClassifierDeclaration;
	}
	
	public ParserRule getClassifierDeclarationRule() {
		return getClassifierDeclarationAccess().getRule();
	}
	
	//fragment SuperclassingPart returns SysML::Classifier :
	//    ( ':>' | 'specializes' ) ownedRelationship += Ownedsubclassification
	//    ( ',' ownedRelationship += Ownedsubclassification )*
	//;
	public SuperclassingPartElements getSuperclassingPartAccess() {
		return pSuperclassingPart;
	}
	
	public ParserRule getSuperclassingPartRule() {
		return getSuperclassingPartAccess().getRule();
	}
	
	//fragment ClassifierConjugationPart returns SysML::Classifier :
	//    ( '~' | 'conjugates' ) ownedRelationship += ClassifierConjugation
	//;
	public ClassifierConjugationPartElements getClassifierConjugationPartAccess() {
		return pClassifierConjugationPart;
	}
	
	public ParserRule getClassifierConjugationPartRule() {
		return getClassifierConjugationPartAccess().getRule();
	}
	
	///* Superclassing */
	//Subclassification returns SysML::Subclassification :
	//    ( 'specialization' Identification? )?
	//    'subclassifier' subclassifier = [SysML::Classifier | QualifiedName]
	//    ( ':>' | 'specializes') superclassifier = [SysML::Classifier | QualifiedName] ';'
	//;
	public SubclassificationElements getSubclassificationAccess() {
		return pSubclassification;
	}
	
	public ParserRule getSubclassificationRule() {
		return getSubclassificationAccess().getRule();
	}
	
	//Ownedsubclassification returns SysML::Subclassification :
	//    superclassifier = [SysML::Classifier | QualifiedName]
	//;
	public OwnedsubclassificationElements getOwnedsubclassificationAccess() {
		return pOwnedsubclassification;
	}
	
	public ParserRule getOwnedsubclassificationRule() {
		return getOwnedsubclassificationAccess().getRule();
	}
	
	///* Classifier Conjugation */
	//ClassifierConjugation returns SysML::Conjugation :
	//    originalType = [SysML::Classifier | QualifiedName]
	//;
	public ClassifierConjugationElements getClassifierConjugationAccess() {
		return pClassifierConjugation;
	}
	
	public ParserRule getClassifierConjugationRule() {
		return getClassifierConjugationAccess().getRule();
	}
	
	///* FEATURES */
	///* Features */
	//fragment FeaturePrefix returns SysML::Feature :
	//    ( direction = FeatureDirection )?
	//    ( isAbstract ?= 'abstract' )?
	//    ( isComposite ?= 'composite' | isPortion ?= 'portion' )?
	//    ( isEnd ?= 'end' )?
	//;
	public FeaturePrefixElements getFeaturePrefixAccess() {
		return pFeaturePrefix;
	}
	
	public ParserRule getFeaturePrefixRule() {
		return getFeaturePrefixAccess().getRule();
	}
	
	//enum FeatureDirection returns SysML::FeatureDirectionKind:
	//    in = 'in' | out = 'out' | inout = 'inout'
	//;
	public FeatureDirectionElements getFeatureDirectionAccess() {
		return eFeatureDirection;
	}
	
	public EnumRule getFeatureDirectionRule() {
		return getFeatureDirectionAccess().getRule();
	}
	
	//Feature returns SysML::Feature :
	//    FeaturePrefix
	//    ( 'feature'? FeatureDeclaration | 'feature' )
	//    ValuePart? TypeBody
	//;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//fragment FeatureDeclaration returns SysML::Feature :
	//    ( isSufficient ?= 'all' )?
	//    ( Identification ( FeatureSpecializationPart | FeatureConjugationPart )?
	//    | FeatureSpecializationPart
	//    | FeatureConjugationPart
	//    ) TypeFeaturingPart?
	//;
	public FeatureDeclarationElements getFeatureDeclarationAccess() {
		return pFeatureDeclaration;
	}
	
	public ParserRule getFeatureDeclarationRule() {
		return getFeatureDeclarationAccess().getRule();
	}
	
	//fragment TypeFeaturingPart returns SysML::Feature :
	//    'featured' 'by' ownedRelationship += OwnedTypeFeaturing
	//    ( ',' ownedRelationship += OwnedTypeFeaturing )*
	//;
	public TypeFeaturingPartElements getTypeFeaturingPartAccess() {
		return pTypeFeaturingPart;
	}
	
	public ParserRule getTypeFeaturingPartRule() {
		return getTypeFeaturingPartAccess().getRule();
	}
	
	//fragment FeatureSpecializationPart returns SysML::Feature :
	//      ( -> FeatureSpecialization )+ MultiplicityPart? FeatureSpecialization*
	//    | MultiplicityPart FeatureSpecialization*
	//;
	public FeatureSpecializationPartElements getFeatureSpecializationPartAccess() {
		return pFeatureSpecializationPart;
	}
	
	public ParserRule getFeatureSpecializationPartRule() {
		return getFeatureSpecializationPartAccess().getRule();
	}
	
	//fragment MultiplicityPart returns SysML::Feature :
	//    ownedRelationship += MultiplicityMember
	//    // NOTE: Can't use "&" here because of use of predication elsewhere.
	//    ( isOrdered ?= 'ordered' isNonunique ?= 'nonunique'?
	//    | isNonunique ?= 'nonunique' isOrdered ?= 'ordered'?
	//    )?
	//;
	public MultiplicityPartElements getMultiplicityPartAccess() {
		return pMultiplicityPart;
	}
	
	public ParserRule getMultiplicityPartRule() {
		return getMultiplicityPartAccess().getRule();
	}
	
	//fragment FeatureSpecialization returns SysML::Feature :
	//    Typings | Subsettings | Redefinitions
	//;
	public FeatureSpecializationElements getFeatureSpecializationAccess() {
		return pFeatureSpecialization;
	}
	
	public ParserRule getFeatureSpecializationRule() {
		return getFeatureSpecializationAccess().getRule();
	}
	
	//fragment Typings returns SysML::Feature :
	//    TypedBy ( ',' ownedRelationship += OwnedFeatureTyping )*
	//;
	public TypingsElements getTypingsAccess() {
		return pTypings;
	}
	
	public ParserRule getTypingsRule() {
		return getTypingsAccess().getRule();
	}
	
	//fragment TypedBy returns SysML::Feature :
	//    ( ':' | 'typed' 'by' ) ownedRelationship += OwnedFeatureTyping
	//;
	public TypedByElements getTypedByAccess() {
		return pTypedBy;
	}
	
	public ParserRule getTypedByRule() {
		return getTypedByAccess().getRule();
	}
	
	//fragment Subsettings returns SysML::Feature :
	//    Subsets ( ',' ownedRelationship += OwnedSubsetting )*
	//;
	public SubsettingsElements getSubsettingsAccess() {
		return pSubsettings;
	}
	
	public ParserRule getSubsettingsRule() {
		return getSubsettingsAccess().getRule();
	}
	
	//fragment Subsets returns SysML::Feature :
	//    ( ':>' | 'subsets' ) ownedRelationship += OwnedSubsetting
	//;
	public SubsetsElements getSubsetsAccess() {
		return pSubsets;
	}
	
	public ParserRule getSubsetsRule() {
		return getSubsetsAccess().getRule();
	}
	
	//fragment Redefinitions returns SysML::Feature :
	//    Redefines ( ',' ownedRelationship += OwnedRedefinition )*
	//;
	public RedefinitionsElements getRedefinitionsAccess() {
		return pRedefinitions;
	}
	
	public ParserRule getRedefinitionsRule() {
		return getRedefinitionsAccess().getRule();
	}
	
	//fragment Redefines returns SysML::Feature :
	//    ( ':>>' | 'redefines' ) ownedRelationship += OwnedRedefinition
	//;
	public RedefinesElements getRedefinesAccess() {
		return pRedefines;
	}
	
	public ParserRule getRedefinesRule() {
		return getRedefinesAccess().getRule();
	}
	
	///* Type Featuring */
	//TypeFeaturing returns SysML::TypeFeaturing :
	//    'featuring' ( Identification? 'of')?
	//    featureOfType = [SysML::Feature | QualifiedName]
	//    'by' featuringType = [SysML::Feature | QualifiedName] ';'
	//;
	public TypeFeaturingElements getTypeFeaturingAccess() {
		return pTypeFeaturing;
	}
	
	public ParserRule getTypeFeaturingRule() {
		return getTypeFeaturingAccess().getRule();
	}
	
	//OwnedTypeFeaturing returns SysML::TypeFeaturing :
	//    featuringType = [SysML::Type | QualifiedName]
	//;
	public OwnedTypeFeaturingElements getOwnedTypeFeaturingAccess() {
		return pOwnedTypeFeaturing;
	}
	
	public ParserRule getOwnedTypeFeaturingRule() {
		return getOwnedTypeFeaturingAccess().getRule();
	}
	
	///* Feature Typing */
	//FeatureTyping returns SysML::FeatureTyping :
	//    ( 'generalization' Identification? )?
	//    'typing' typedFeature = [SysML::Feature | QualifiedName]
	//    (':' | 'typed' 'by') type = [SysML::Feature | QualifiedName] ';'
	//;
	public FeatureTypingElements getFeatureTypingAccess() {
		return pFeatureTyping;
	}
	
	public ParserRule getFeatureTypingRule() {
		return getFeatureTypingAccess().getRule();
	}
	
	//@Override
	//OwnedFeatureTyping returns SysML::FeatureTyping :
	//    type = [SysML::Type | QualifiedName]
	//;
	public OwnedFeatureTypingElements getOwnedFeatureTypingAccess() {
		return pOwnedFeatureTyping;
	}
	
	public ParserRule getOwnedFeatureTypingRule() {
		return getOwnedFeatureTypingAccess().getRule();
	}
	
	///* Subsetting */
	//Subsetting returns SysML::Subsetting :
	//    ( 'specialization' Identification? )?
	//    'subset' subsettingFeature = [SysML::Feature | QualifiedName]
	//    ( ':>' | 'subsets' ) subsettedFeature = [SysML::Feature | QualifiedName] ';'
	//;
	public SubsettingElements getSubsettingAccess() {
		return pSubsetting;
	}
	
	public ParserRule getSubsettingRule() {
		return getSubsettingAccess().getRule();
	}
	
	//OwnedSubsetting returns SysML::Subsetting:
	//    subsettedFeature = [SysML::Feature|QualifiedName]
	//;
	public OwnedSubsettingElements getOwnedSubsettingAccess() {
		return pOwnedSubsetting;
	}
	
	public ParserRule getOwnedSubsettingRule() {
		return getOwnedSubsettingAccess().getRule();
	}
	
	///* Redefinition */
	//Redefinition returns SysML::Redefinition :
	//    ( 'specialization' Identification? )?
	//    'redefinition' redefiningFeature = [SysML::Feature | QualifiedName]
	//    ( ':>>' | 'redefines' ) redefinedFeature = [SysML::Feature | QualifiedName] ';'
	//;
	public RedefinitionElements getRedefinitionAccess() {
		return pRedefinition;
	}
	
	public ParserRule getRedefinitionRule() {
		return getRedefinitionAccess().getRule();
	}
	
	//OwnedRedefinition returns SysML::Redefinition:
	//    redefinedFeature = [SysML::Feature | QualifiedName]
	//;
	public OwnedRedefinitionElements getOwnedRedefinitionAccess() {
		return pOwnedRedefinition;
	}
	
	public ParserRule getOwnedRedefinitionRule() {
		return getOwnedRedefinitionAccess().getRule();
	}
	
	///* Feature Conjugation */
	//fragment FeatureConjugationPart returns SysML::Feature :
	//    ( '~' | 'conjugates' ) ownedRelationship += FeatureConjugation
	//;
	public FeatureConjugationPartElements getFeatureConjugationPartAccess() {
		return pFeatureConjugationPart;
	}
	
	public ParserRule getFeatureConjugationPartRule() {
		return getFeatureConjugationPartAccess().getRule();
	}
	
	//FeatureConjugation returns SysML::Conjugation :
	//    originalType = [SysML::Feature | QualifiedName ]
	//;
	public FeatureConjugationElements getFeatureConjugationAccess() {
		return pFeatureConjugation;
	}
	
	public ParserRule getFeatureConjugationRule() {
		return getFeatureConjugationAccess().getRule();
	}
	
	///* FEATURE VALUES */
	//fragment ValuePart returns SysML::Feature :
	//    ownedRelationship += FeatureValue
	//;
	public ValuePartElements getValuePartAccess() {
		return pValuePart;
	}
	
	public ParserRule getValuePartRule() {
		return getValuePartAccess().getRule();
	}
	
	//FeatureValue returns SysML::FeatureValue :
	//    ( '=' | isDefault ?= 'default' '='? )
	//    ownedRelatedElement += OwnedExpression // value = OwnedExpression
	//;
	public FeatureValueElements getFeatureValueAccess() {
		return pFeatureValue;
	}
	
	public ParserRule getFeatureValueRule() {
		return getFeatureValueAccess().getRule();
	}
	
	///* MULTIPLICITIES */
	//Multiplicity returns SysML::MultiplicityRange :
	//    // TODO: Allow general expressions for bounds. (Causes LL parsing issues.)
	//    '[' ownedRelationship += MultiplicityExpressionMember
	//          ( '..' ownedRelationship += MultiplicityExpressionMember )? ']'
	//;
	public MultiplicityElements getMultiplicityAccess() {
		return pMultiplicity;
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}
	
	//MultiplicityExpressionMember returns SysML::Membership :
	//    ownedRelatedElement += ( LiteralExpression | FeatureReferenceExpression ) // ownedMemberElement = ( LiteralExpression | FeatureReferenceExpression )
	//;
	public MultiplicityExpressionMemberElements getMultiplicityExpressionMemberAccess() {
		return pMultiplicityExpressionMember;
	}
	
	public ParserRule getMultiplicityExpressionMemberRule() {
		return getMultiplicityExpressionMemberAccess().getRule();
	}
	
	///* CLASSIFICATION */
	///* Data Types */
	//DataType returns SysML::DataType :
	//    ( isAbstract ?= 'abstract' )? 'datatype'
	//    ClassifierDeclaration TypeBody
	//;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	///* Classes */
	//Class returns SysML::Class :
	//    ( isAbstract ?= 'abstract' )? 'class'
	//    ClassifierDeclaration TypeBody
	//;
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	///* STRUCTURES */
	//Structure returns SysML::Structure :
	//    ( isAbstract ?= 'abstract' )? 'struct'
	//    ClassifierDeclaration TypeBody
	//;
	public StructureElements getStructureAccess() {
		return pStructure;
	}
	
	public ParserRule getStructureRule() {
		return getStructureAccess().getRule();
	}
	
	///* ASSOCIATIONS */
	//Association returns SysML::Association :
	//    ( isAbstract ?= 'abstract' )? 'assoc'
	//    ClassifierDeclaration TypeBody
	//;
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}
	
	//AssociationStructure returns SysML::AssociationStructure :
	//    ( isAbstract ?= 'abstract' )? 'assoc' 'struct'
	//    ClassifierDeclaration TypeBody
	//;
	public AssociationStructureElements getAssociationStructureAccess() {
		return pAssociationStructure;
	}
	
	public ParserRule getAssociationStructureRule() {
		return getAssociationStructureAccess().getRule();
	}
	
	///* CONNECTORS */
	///* Connectors */
	//Connector returns SysML::Connector :
	//    FeaturePrefix 'connector'
	//    ConnectorDeclaration TypeBody
	//;
	public ConnectorElements getConnectorAccess() {
		return pConnector;
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}
	
	//fragment ConnectorDeclaration returns SysML::Connector :
	//    BinaryConnectorDeclaration | NaryConnectorDeclaration
	//;
	public ConnectorDeclarationElements getConnectorDeclarationAccess() {
		return pConnectorDeclaration;
	}
	
	public ParserRule getConnectorDeclarationRule() {
		return getConnectorDeclarationAccess().getRule();
	}
	
	//fragment BinaryConnectorDeclaration returns SysML::Connector :
	//    ( FeatureDeclaration? 'from' | isSufficient ?= 'all' 'from'? )?
	//    ownedRelationship += ConnectorEndMember 'to'
	//    ownedRelationship += ConnectorEndMember
	//;
	public BinaryConnectorDeclarationElements getBinaryConnectorDeclarationAccess() {
		return pBinaryConnectorDeclaration;
	}
	
	public ParserRule getBinaryConnectorDeclarationRule() {
		return getBinaryConnectorDeclarationAccess().getRule();
	}
	
	//fragment NaryConnectorDeclaration returns SysML::Connector :
	//    FeatureDeclaration?
	//    '(' ownedRelationship += ConnectorEndMember ','
	//        ownedRelationship += ConnectorEndMember
	//        ( ',' ownedRelationship += ConnectorEndMember )* ')'
	//;
	public NaryConnectorDeclarationElements getNaryConnectorDeclarationAccess() {
		return pNaryConnectorDeclaration;
	}
	
	public ParserRule getNaryConnectorDeclarationRule() {
		return getNaryConnectorDeclarationAccess().getRule();
	}
	
	//ConnectorEndMember returns SysML::EndFeatureMembership :
	//    ( memberName = Name '=>' )? ownedRelatedElement += ConnectorEnd // ownedMemberFeature = ConnectorEnd
	//;
	public ConnectorEndMemberElements getConnectorEndMemberAccess() {
		return pConnectorEndMember;
	}
	
	public ParserRule getConnectorEndMemberRule() {
		return getConnectorEndMemberAccess().getRule();
	}
	
	//ConnectorEnd returns SysML::Feature :
	//    ownedRelationship += ( OwnedSubsetting | FeaturePathExpressionMember )
	//    ( ownedRelationship += MultiplicityMember )?
	//;
	public ConnectorEndElements getConnectorEndAccess() {
		return pConnectorEnd;
	}
	
	public ParserRule getConnectorEndRule() {
		return getConnectorEndAccess().getRule();
	}
	
	//FeaturePathExpressionMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += FeaturePathExpression
	//;
	public FeaturePathExpressionMemberElements getFeaturePathExpressionMemberAccess() {
		return pFeaturePathExpressionMember;
	}
	
	public ParserRule getFeaturePathExpressionMemberRule() {
		return getFeaturePathExpressionMemberAccess().getRule();
	}
	
	//FeaturePathExpression returns SysML::Expression :
	//    FeatureReferenceExpression
	//    ( {SysML::PathStepExpression.operand += current}
	//      '.' operand += FeatureReferenceExpression )+
	//;
	public FeaturePathExpressionElements getFeaturePathExpressionAccess() {
		return pFeaturePathExpression;
	}
	
	public ParserRule getFeaturePathExpressionRule() {
		return getFeaturePathExpressionAccess().getRule();
	}
	
	///* Binding Connectors */
	//BindingConnector returns SysML::BindingConnector :
	//    FeaturePrefix 'binding'
	//    BindingConnectorDeclaration TypeBody
	//;
	public BindingConnectorElements getBindingConnectorAccess() {
		return pBindingConnector;
	}
	
	public ParserRule getBindingConnectorRule() {
		return getBindingConnectorAccess().getRule();
	}
	
	//fragment BindingConnectorDeclaration returns SysML::BindingConnector :
	//    ( FeatureDeclaration? 'of' | isSufficient ?= 'all' 'of'? )?
	//    ownedRelationship += ConnectorEndMember '='
	//    ownedRelationship += ConnectorEndMember
	//;
	public BindingConnectorDeclarationElements getBindingConnectorDeclarationAccess() {
		return pBindingConnectorDeclaration;
	}
	
	public ParserRule getBindingConnectorDeclarationRule() {
		return getBindingConnectorDeclarationAccess().getRule();
	}
	
	///* Successions */
	//Succession returns SysML::Succession :
	//    FeaturePrefix 'succession'
	//    SuccessionDeclaration TypeBody
	//;
	public SuccessionElements getSuccessionAccess() {
		return pSuccession;
	}
	
	public ParserRule getSuccessionRule() {
		return getSuccessionAccess().getRule();
	}
	
	//fragment SuccessionDeclaration returns SysML::Succession :
	//    ( FeatureDeclaration? 'first' | isSufficient ?= 'all' 'first'? )?
	//    ownedRelationship += ConnectorEndMember 'then'
	//    ownedRelationship += ConnectorEndMember
	//;
	public SuccessionDeclarationElements getSuccessionDeclarationAccess() {
		return pSuccessionDeclaration;
	}
	
	public ParserRule getSuccessionDeclarationRule() {
		return getSuccessionDeclarationAccess().getRule();
	}
	
	///* BEHAVIORS */
	///* Behaviors */
	//Behavior returns SysML::Behavior :
	//    ( isAbstract ?= 'abstract')? 'behavior'
	//    BehaviorDeclaration BehaviorBody
	//;
	public BehaviorElements getBehaviorAccess() {
		return pBehavior;
	}
	
	public ParserRule getBehaviorRule() {
		return getBehaviorAccess().getRule();
	}
	
	//fragment BehaviorDeclaration returns SysML::Behavior :
	//    ClassifierDeclaration ParameterList?
	//;
	public BehaviorDeclarationElements getBehaviorDeclarationAccess() {
		return pBehaviorDeclaration;
	}
	
	public ParserRule getBehaviorDeclarationRule() {
		return getBehaviorDeclarationAccess().getRule();
	}
	
	//fragment ParameterList returns SysML::Type :
	//    '(' ( ownedRelationship += ParameterMember
	//        ( ',' ownedRelationship += ParameterMember )* )? ')'
	//;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//ParameterMember returns SysML::ParameterMembership :
	//    ownedRelatedElement += Parameter // ownedMemberParameter = Parameter
	//;
	public ParameterMemberElements getParameterMemberAccess() {
		return pParameterMember;
	}
	
	public ParserRule getParameterMemberRule() {
		return getParameterMemberAccess().getRule();
	}
	
	//Parameter returns SysML::Feature :
	//      ( direction = FeatureDirection )? 'feature'? ParameterDeclaration
	//    | {SysML::Step} ( direction = FeatureDirection )? 'step' ParameterDeclaration
	//    | {SysML::Expression} ( direction = FeatureDirection )? 'expr' ParameterDeclaration
	//    | {SysML::BooleanExpression} ( direction = FeatureDirection )? 'bool' ParameterDeclaration
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//fragment ParameterDeclaration returns SysML::Feature :
	//    ( isSufficient ?= 'all' )?
	//    ( Identification ParameterSpecializationPart?
	//    | ParameterSpecializationPart
	//    )
	//;
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return pParameterDeclaration;
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}
	
	//fragment ParameterSpecializationPart returns SysML::Feature :
	//      ( -> ParameterSpecialization )+ MultiplicityPart? ParameterSpecialization*
	//    | MultiplicityPart ParameterSpecialization*
	//;
	public ParameterSpecializationPartElements getParameterSpecializationPartAccess() {
		return pParameterSpecializationPart;
	}
	
	public ParserRule getParameterSpecializationPartRule() {
		return getParameterSpecializationPartAccess().getRule();
	}
	
	//fragment ParameterSpecialization returns SysML::Feature :
	//    TypedBy | Subsets | Redefines
	//;
	public ParameterSpecializationElements getParameterSpecializationAccess() {
		return pParameterSpecialization;
	}
	
	public ParserRule getParameterSpecializationRule() {
		return getParameterSpecializationAccess().getRule();
	}
	
	//fragment BehaviorBody returns SysML::Type :
	//    ';' |
	//    '{' ( ownedRelationship += OwnedDocumentation
	//        | ownedRelationship += NonFeatureMember
	//        | ownedRelationship += FeatureMember
	//        | ownedRelationship += Import
	//    )* '}'
	//;
	public BehaviorBodyElements getBehaviorBodyAccess() {
		return pBehaviorBody;
	}
	
	public ParserRule getBehaviorBodyRule() {
		return getBehaviorBodyAccess().getRule();
	}
	
	///* Steps */
	//Step returns SysML::Step :
	//    FeaturePrefix 'step'
	//    StepDeclaration BehaviorBody
	//;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//fragment StepDeclaration returns SysML::Step :
	//    FeatureDeclaration? ( ValuePart | StepParameterList )?
	//;
	public StepDeclarationElements getStepDeclarationAccess() {
		return pStepDeclaration;
	}
	
	public ParserRule getStepDeclarationRule() {
		return getStepDeclarationAccess().getRule();
	}
	
	//fragment StepParameterList returns SysML::Step :
	//    '(' ( ownedRelationship += StepParameterMember
	//        ( ',' ownedRelationship += StepParameterMember )* )? ')'
	//;
	public StepParameterListElements getStepParameterListAccess() {
		return pStepParameterList;
	}
	
	public ParserRule getStepParameterListRule() {
		return getStepParameterListAccess().getRule();
	}
	
	//StepParameterMember returns SysML::ParameterMembership :
	//    ownedRelatedElement += StepParameter // ownedMemberParameter = StepParameter
	//;
	public StepParameterMemberElements getStepParameterMemberAccess() {
		return pStepParameterMember;
	}
	
	public ParserRule getStepParameterMemberRule() {
		return getStepParameterMemberAccess().getRule();
	}
	
	//StepParameter returns SysML::Feature :
	//    Parameter ValuePart?
	//;
	public StepParameterElements getStepParameterAccess() {
		return pStepParameter;
	}
	
	public ParserRule getStepParameterRule() {
		return getStepParameterAccess().getRule();
	}
	
	///* FUNCTIONS */
	///* Functions */
	//Function returns SysML::Function :
	//    ( isAbstract ?= 'abstract' )? 'function'
	//    FunctionDeclaration FunctionBody
	//;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//fragment FunctionDeclaration returns SysML::Function :
	//    ClassifierDeclaration ParameterPart
	//;
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return pFunctionDeclaration;
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}
	
	//fragment ParameterPart returns SysML::Type :
	//      ParameterList ( ReturnParameterPart | EmptyReturnParameterPart )
	//    | EmptyReturnParameterPart
	//;
	public ParameterPartElements getParameterPartAccess() {
		return pParameterPart;
	}
	
	public ParserRule getParameterPartRule() {
		return getParameterPartAccess().getRule();
	}
	
	//fragment ReturnParameterPart returns SysML::Type :
	//    ownedRelationship += ReturnParameterMember
	//;
	public ReturnParameterPartElements getReturnParameterPartAccess() {
		return pReturnParameterPart;
	}
	
	public ParserRule getReturnParameterPartRule() {
		return getReturnParameterPartAccess().getRule();
	}
	
	//ReturnParameterMember returns SysML::ReturnParameterMembership :
	//    ownedRelatedElement += Parameter // ownedMemberParameter = Parameter
	//;
	public ReturnParameterMemberElements getReturnParameterMemberAccess() {
		return pReturnParameterMember;
	}
	
	public ParserRule getReturnParameterMemberRule() {
		return getReturnParameterMemberAccess().getRule();
	}
	
	//fragment EmptyReturnParameterPart returns SysML::Type :
	//    ownedRelationship += EmptyReturnParameterMember
	//;
	public EmptyReturnParameterPartElements getEmptyReturnParameterPartAccess() {
		return pEmptyReturnParameterPart;
	}
	
	public ParserRule getEmptyReturnParameterPartRule() {
		return getEmptyReturnParameterPartAccess().getRule();
	}
	
	//EmptyReturnParameterMember returns SysML::ReturnParameterMembership :
	//    ownedRelatedElement += EmptyParameter // ownedMemberFeature = EmptyParameter
	//;
	public EmptyReturnParameterMemberElements getEmptyReturnParameterMemberAccess() {
		return pEmptyReturnParameterMember;
	}
	
	public ParserRule getEmptyReturnParameterMemberRule() {
		return getEmptyReturnParameterMemberAccess().getRule();
	}
	
	//EmptyParameter returns SysML::Feature :
	//    {SysML::Feature}
	//;
	public EmptyParameterElements getEmptyParameterAccess() {
		return pEmptyParameter;
	}
	
	public ParserRule getEmptyParameterRule() {
		return getEmptyParameterAccess().getRule();
	}
	
	//fragment FunctionBody returns SysML::Type :
	//      ';'
	//    | '{' ( ownedRelationship += OwnedDocumentation
	//          | ownedRelationship += NonFeatureMember
	//          | ownedRelationship += FeatureMember
	//          | ownedRelationship += Import
	//          )*
	//          ( ownedRelationship += ResultExpressionMember )?
	//      '}'
	//;
	public FunctionBodyElements getFunctionBodyAccess() {
		return pFunctionBody;
	}
	
	public ParserRule getFunctionBodyRule() {
		return getFunctionBodyAccess().getRule();
	}
	
	//@Override
	//ResultExpressionMember returns SysML::ResultExpressionMembership :
	//    MemberPrefix ownedRelatedElement += OwnedExpression // ownedResultExpression = OwnedExpression
	//;
	public ResultExpressionMemberElements getResultExpressionMemberAccess() {
		return pResultExpressionMember;
	}
	
	public ParserRule getResultExpressionMemberRule() {
		return getResultExpressionMemberAccess().getRule();
	}
	
	///* Expressions */
	//Expression returns SysML::Expression :
	//    FeaturePrefix 'expr'
	//    ExpressionDeclaration FunctionBody
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//fragment ExpressionDeclaration returns SysML::Expression :
	//    FeatureDeclaration?
	//    ( ValuePart | StepParameterList ( ReturnParameterPart | EmptyReturnParameterPart ) )?
	//;
	public ExpressionDeclarationElements getExpressionDeclarationAccess() {
		return pExpressionDeclaration;
	}
	
	public ParserRule getExpressionDeclarationRule() {
		return getExpressionDeclarationAccess().getRule();
	}
	
	///* Predicates */
	//Predicate returns SysML::Predicate :
	//    ( isAbstract ?= 'abstract' )? 'predicate'
	//    PredicateDeclaration FunctionBody
	//;
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	//fragment PredicateDeclaration returns SysML::Predicate :
	//    ClassifierDeclaration ParameterPart
	//;
	public PredicateDeclarationElements getPredicateDeclarationAccess() {
		return pPredicateDeclaration;
	}
	
	public ParserRule getPredicateDeclarationRule() {
		return getPredicateDeclarationAccess().getRule();
	}
	
	///* Boolean Expressions */
	//BooleanExpression returns SysML::BooleanExpression :
	//    FeaturePrefix 'bool'
	//    ExpressionDeclaration FunctionBody
	//;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	///* Invariants */
	//Invariant returns SysML::Invariant :
	//    FeaturePrefix 'inv' ( 'true' | isNegated ?= 'false' )?
	//    ExpressionDeclaration FunctionBody
	//;
	public InvariantElements getInvariantAccess() {
		return pInvariant;
	}
	
	public ParserRule getInvariantRule() {
		return getInvariantAccess().getRule();
	}
	
	///* INTERACTIONS */
	///* Interactions */
	//Interaction returns SysML::Interaction :
	//    ( isAbstract ?= 'abstract' )? 'interaction'
	//    BehaviorDeclaration BehaviorBody
	//;
	public InteractionElements getInteractionAccess() {
		return pInteraction;
	}
	
	public ParserRule getInteractionRule() {
		return getInteractionAccess().getRule();
	}
	
	///* Item Flows */
	//ItemFlow returns SysML::ItemFlow :
	//    FeaturePrefix 'stream'
	//    ItemFlowDeclaration BehaviorBody
	//;
	public ItemFlowElements getItemFlowAccess() {
		return pItemFlow;
	}
	
	public ParserRule getItemFlowRule() {
		return getItemFlowAccess().getRule();
	}
	
	//SuccessionItemFlow returns SysML::SuccessionItemFlow :
	//    FeaturePrefix 'flow' ItemFlowDeclaration BehaviorBody
	//;
	public SuccessionItemFlowElements getSuccessionItemFlowAccess() {
		return pSuccessionItemFlow;
	}
	
	public ParserRule getSuccessionItemFlowRule() {
		return getSuccessionItemFlowAccess().getRule();
	}
	
	//fragment ItemFlowDeclaration returns SysML::ItemFlow :
	//    ( FeatureDeclaration?
	//      ( 'of'  ownedRelationship += ItemFeatureMember
	//      | ownedRelationship += EmptyItemFeatureMember
	//      ) 'from'
	//    | ( isSufficient ?= 'all' )? ownedRelationship += EmptyItemFeatureMember
	//    )
	//    ownedRelationship += ItemFlowEndMember 'to'
	//    ownedRelationship += ItemFlowEndMember
	//;
	public ItemFlowDeclarationElements getItemFlowDeclarationAccess() {
		return pItemFlowDeclaration;
	}
	
	public ParserRule getItemFlowDeclarationRule() {
		return getItemFlowDeclarationAccess().getRule();
	}
	
	//ItemFeatureMember returns SysML::FeatureMembership :
	//    ( memberName = Name ':' )? ownedRelatedElement += ItemFeature // ownedMemberFeature = ItemFeature
	//;
	public ItemFeatureMemberElements getItemFeatureMemberAccess() {
		return pItemFeatureMember;
	}
	
	public ParserRule getItemFeatureMemberRule() {
		return getItemFeatureMemberAccess().getRule();
	}
	
	//ItemFeature returns SysML::ItemFeature :
	//      ownedRelationship += OwnedFeatureTyping
	//      ( ownedRelationship += MultiplicityMember )?
	//    | ownedRelationship += MultiplicityMember
	//      ( ownedRelationship += OwnedFeatureTyping )?
	//;
	public ItemFeatureElements getItemFeatureAccess() {
		return pItemFeature;
	}
	
	public ParserRule getItemFeatureRule() {
		return getItemFeatureAccess().getRule();
	}
	
	//EmptyItemFeatureMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += EmptyItemFeature // ownedMemberFeature = EmptyItemFeature
	//;
	public EmptyItemFeatureMemberElements getEmptyItemFeatureMemberAccess() {
		return pEmptyItemFeatureMember;
	}
	
	public ParserRule getEmptyItemFeatureMemberRule() {
		return getEmptyItemFeatureMemberAccess().getRule();
	}
	
	//EmptyItemFeature returns SysML::ItemFeature :
	//    {SysML::ItemFeature}
	//;
	public EmptyItemFeatureElements getEmptyItemFeatureAccess() {
		return pEmptyItemFeature;
	}
	
	public ParserRule getEmptyItemFeatureRule() {
		return getEmptyItemFeatureAccess().getRule();
	}
	
	//ItemFlowEndMember returns SysML::EndFeatureMembership :
	//    ownedRelatedElement += ItemFlowEnd // ownedMemberFeature = ItemFlowEnd
	//;
	public ItemFlowEndMemberElements getItemFlowEndMemberAccess() {
		return pItemFlowEndMember;
	}
	
	public ParserRule getItemFlowEndMemberRule() {
		return getItemFlowEndMemberAccess().getRule();
	}
	
	//ItemFlowEnd returns SysML::ItemFlowEnd :
	//    ownedRelationship += ItemFlowFeatureMember
	//;
	public ItemFlowEndElements getItemFlowEndAccess() {
		return pItemFlowEnd;
	}
	
	public ParserRule getItemFlowEndRule() {
		return getItemFlowEndAccess().getRule();
	}
	
	//ItemFlowFeatureMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += ItemFlowFeature // ownedMemberFeature = ItemFlowFeature
	//;
	public ItemFlowFeatureMemberElements getItemFlowFeatureMemberAccess() {
		return pItemFlowFeatureMember;
	}
	
	public ParserRule getItemFlowFeatureMemberRule() {
		return getItemFlowFeatureMemberAccess().getRule();
	}
	
	//ItemFlowFeature returns SysML::ItemFlowFeature :
	//    ownedRelationship += ( OwnedRedefinition | FeaturePathExpressionMember )
	//;
	public ItemFlowFeatureElements getItemFlowFeatureAccess() {
		return pItemFlowFeature;
	}
	
	public ParserRule getItemFlowFeatureRule() {
		return getItemFlowFeatureAccess().getRule();
	}
	
	///* EXPRESSIONS */
	//@Override
	//ExpressionBody returns SysML::Expression :
	//    FunctionBody
	//;
	public ExpressionBodyElements getExpressionBodyAccess() {
		return pExpressionBody;
	}
	
	public ParserRule getExpressionBodyRule() {
		return getExpressionBodyAccess().getRule();
	}
	
	///* EXPRESSIONS */
	///* Operator Expressions */
	//OwnedExpressionMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += OwnedExpression // ownedMemberFeature = OwnedExpression
	//;
	public KerMLExpressionsGrammarAccess.OwnedExpressionMemberElements getOwnedExpressionMemberAccess() {
		return gaKerMLExpressions.getOwnedExpressionMemberAccess();
	}
	
	public ParserRule getOwnedExpressionMemberRule() {
		return getOwnedExpressionMemberAccess().getRule();
	}
	
	//OwnedExpression returns SysML::Expression :
	//     ConditionalExpression
	//;
	public KerMLExpressionsGrammarAccess.OwnedExpressionElements getOwnedExpressionAccess() {
		return gaKerMLExpressions.getOwnedExpressionAccess();
	}
	
	public ParserRule getOwnedExpressionRule() {
		return getOwnedExpressionAccess().getRule();
	}
	
	//// Conditional Test Expressions
	//ConditionalExpression returns SysML::Expression :
	//      NullCoalescingExpression ( {SysML::OperatorExpression.operand += current}
	//          operator = ConditionalOperator operand += OwnedExpression ':' operand += ConditionalExpression
	//      )?
	//    | {SysML::OperatorExpression} 'if' operand += NullCoalescingExpression
	//          operator = ConditionalOperator operand += OwnedExpression 'else' operand += ConditionalExpression
	//;
	public KerMLExpressionsGrammarAccess.ConditionalExpressionElements getConditionalExpressionAccess() {
		return gaKerMLExpressions.getConditionalExpressionAccess();
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	//ConditionalOperator :
	//    '?'
	//;
	public KerMLExpressionsGrammarAccess.ConditionalOperatorElements getConditionalOperatorAccess() {
		return gaKerMLExpressions.getConditionalOperatorAccess();
	}
	
	public ParserRule getConditionalOperatorRule() {
		return getConditionalOperatorAccess().getRule();
	}
	
	//// Null Coalescing Expressions
	//NullCoalescingExpression returns SysML::Expression :
	//    ImpliesExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = NullCoalescingOperator operand += ImpliesExpression )*
	//;
	public KerMLExpressionsGrammarAccess.NullCoalescingExpressionElements getNullCoalescingExpressionAccess() {
		return gaKerMLExpressions.getNullCoalescingExpressionAccess();
	}
	
	public ParserRule getNullCoalescingExpressionRule() {
		return getNullCoalescingExpressionAccess().getRule();
	}
	
	//NullCoalescingOperator :
	//    '??'
	//;
	public KerMLExpressionsGrammarAccess.NullCoalescingOperatorElements getNullCoalescingOperatorAccess() {
		return gaKerMLExpressions.getNullCoalescingOperatorAccess();
	}
	
	public ParserRule getNullCoalescingOperatorRule() {
		return getNullCoalescingOperatorAccess().getRule();
	}
	
	//// Logical Expressions
	//ImpliesExpression returns SysML::Expression :
	//    OrExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = ImpliesOperator operand += OrExpression )*
	//;
	public KerMLExpressionsGrammarAccess.ImpliesExpressionElements getImpliesExpressionAccess() {
		return gaKerMLExpressions.getImpliesExpressionAccess();
	}
	
	public ParserRule getImpliesExpressionRule() {
		return getImpliesExpressionAccess().getRule();
	}
	
	//ImpliesOperator :
	//    'implies'
	//;
	public KerMLExpressionsGrammarAccess.ImpliesOperatorElements getImpliesOperatorAccess() {
		return gaKerMLExpressions.getImpliesOperatorAccess();
	}
	
	public ParserRule getImpliesOperatorRule() {
		return getImpliesOperatorAccess().getRule();
	}
	
	//OrExpression returns SysML::Expression :
	//    XorExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = OrOperator operand += XorExpression )*
	//;
	public KerMLExpressionsGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaKerMLExpressions.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//OrOperator :
	//    '|' | '||' | 'or'
	//;
	public KerMLExpressionsGrammarAccess.OrOperatorElements getOrOperatorAccess() {
		return gaKerMLExpressions.getOrOperatorAccess();
	}
	
	public ParserRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}
	
	//XorExpression returns SysML::Expression :
	//    AndExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = XorOperator operand += AndExpression )*
	//;
	public KerMLExpressionsGrammarAccess.XorExpressionElements getXorExpressionAccess() {
		return gaKerMLExpressions.getXorExpressionAccess();
	}
	
	public ParserRule getXorExpressionRule() {
		return getXorExpressionAccess().getRule();
	}
	
	//XorOperator :
	//    '^^' | 'xor'
	//;
	public KerMLExpressionsGrammarAccess.XorOperatorElements getXorOperatorAccess() {
		return gaKerMLExpressions.getXorOperatorAccess();
	}
	
	public ParserRule getXorOperatorRule() {
		return getXorOperatorAccess().getRule();
	}
	
	//AndExpression returns SysML::Expression :
	//    EqualityExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = AndOperator operand += EqualityExpression )*
	//;
	public KerMLExpressionsGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaKerMLExpressions.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//AndOperator :
	//    '&' | '&&' | 'and'
	//;
	public KerMLExpressionsGrammarAccess.AndOperatorElements getAndOperatorAccess() {
		return gaKerMLExpressions.getAndOperatorAccess();
	}
	
	public ParserRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}
	
	//// Equality Expressions
	//EqualityExpression returns SysML::Expression :
	//    ClassificationExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = EqualityOperator operand += ClassificationExpression )*
	//;
	public KerMLExpressionsGrammarAccess.EqualityExpressionElements getEqualityExpressionAccess() {
		return gaKerMLExpressions.getEqualityExpressionAccess();
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//EqualityOperator :
	//    '==' | '!='
	//;
	public KerMLExpressionsGrammarAccess.EqualityOperatorElements getEqualityOperatorAccess() {
		return gaKerMLExpressions.getEqualityOperatorAccess();
	}
	
	public ParserRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}
	
	//// Classification Expressions
	//ClassificationExpression returns SysML::Expression :
	//      RelationalExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = ClassificationOperator ownedRelationship += TypeReferenceMember )?
	//    | {SysML::OperatorExpression} operand += SelfReferenceExpression
	//        operator = ClassificationOperator ownedRelationship += TypeReferenceMember
	//;
	public KerMLExpressionsGrammarAccess.ClassificationExpressionElements getClassificationExpressionAccess() {
		return gaKerMLExpressions.getClassificationExpressionAccess();
	}
	
	public ParserRule getClassificationExpressionRule() {
		return getClassificationExpressionAccess().getRule();
	}
	
	//ClassificationOperator :
	//    'instanceof' | 'hastype' | 'istype' | '@' | 'as'
	//;
	public KerMLExpressionsGrammarAccess.ClassificationOperatorElements getClassificationOperatorAccess() {
		return gaKerMLExpressions.getClassificationOperatorAccess();
	}
	
	public ParserRule getClassificationOperatorRule() {
		return getClassificationOperatorAccess().getRule();
	}
	
	//TypeReferenceMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += TypeReference
	//    // ownedMemberFeature = TypeReference
	//;
	public KerMLExpressionsGrammarAccess.TypeReferenceMemberElements getTypeReferenceMemberAccess() {
		return gaKerMLExpressions.getTypeReferenceMemberAccess();
	}
	
	public ParserRule getTypeReferenceMemberRule() {
		return getTypeReferenceMemberAccess().getRule();
	}
	
	//TypeReference returns SysML::Feature :
	//    ownedRelationship += OwnedFeatureTyping
	//;
	public KerMLExpressionsGrammarAccess.TypeReferenceElements getTypeReferenceAccess() {
		return gaKerMLExpressions.getTypeReferenceAccess();
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}
	
	//SelfReferenceExpression returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += SelfReferenceMember
	//;
	public KerMLExpressionsGrammarAccess.SelfReferenceExpressionElements getSelfReferenceExpressionAccess() {
		return gaKerMLExpressions.getSelfReferenceExpressionAccess();
	}
	
	public ParserRule getSelfReferenceExpressionRule() {
		return getSelfReferenceExpressionAccess().getRule();
	}
	
	//SelfReferenceMember returns SysML::ReturnParameterMembership :
	//    ownedRelatedElement += EmptyFeature // ownedMemberFeature = EmptyFeature
	//;
	public KerMLExpressionsGrammarAccess.SelfReferenceMemberElements getSelfReferenceMemberAccess() {
		return gaKerMLExpressions.getSelfReferenceMemberAccess();
	}
	
	public ParserRule getSelfReferenceMemberRule() {
		return getSelfReferenceMemberAccess().getRule();
	}
	
	//EmptyFeature returns SysML::Feature :
	//    {SysML::Feature}
	//;
	public KerMLExpressionsGrammarAccess.EmptyFeatureElements getEmptyFeatureAccess() {
		return gaKerMLExpressions.getEmptyFeatureAccess();
	}
	
	public ParserRule getEmptyFeatureRule() {
		return getEmptyFeatureAccess().getRule();
	}
	
	//// Relational Expressions
	//RelationalExpression returns SysML::Expression :
	//    RangeExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = RelationalOperator operand += RangeExpression )*
	//;
	public KerMLExpressionsGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaKerMLExpressions.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//RelationalOperator :
	//    '<' | '>' | '<=' | '>='
	//;
	public KerMLExpressionsGrammarAccess.RelationalOperatorElements getRelationalOperatorAccess() {
		return gaKerMLExpressions.getRelationalOperatorAccess();
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}
	
	//// Range Expressions
	//RangeExpression returns SysML::Expression :
	//    AdditiveExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = '..' operand += AdditiveExpression )?
	//;
	public KerMLExpressionsGrammarAccess.RangeExpressionElements getRangeExpressionAccess() {
		return gaKerMLExpressions.getRangeExpressionAccess();
	}
	
	public ParserRule getRangeExpressionRule() {
		return getRangeExpressionAccess().getRule();
	}
	
	//// Arithmetic Expressions
	//AdditiveExpression returns SysML::Expression :
	//    MultiplicativeExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = AdditiveOperator operand += MultiplicativeExpression )*
	//;
	public KerMLExpressionsGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaKerMLExpressions.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//AdditiveOperator :
	//    '+' | '-'
	//;
	public KerMLExpressionsGrammarAccess.AdditiveOperatorElements getAdditiveOperatorAccess() {
		return gaKerMLExpressions.getAdditiveOperatorAccess();
	}
	
	public ParserRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}
	
	//MultiplicativeExpression returns SysML::Expression :
	//    ExponentiationExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = MultiplicativeOperator operand += ExponentiationExpression )*
	//;
	public KerMLExpressionsGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaKerMLExpressions.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//MultiplicativeOperator :
	//    '*' | '/' | '%'
	//;
	public KerMLExpressionsGrammarAccess.MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return gaKerMLExpressions.getMultiplicativeOperatorAccess();
	}
	
	public ParserRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}
	
	//ExponentiationExpression returns SysML::Expression :
	//    UnitsExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = ExponentiationOperator operand += UnitsExpression )*
	//;
	public KerMLExpressionsGrammarAccess.ExponentiationExpressionElements getExponentiationExpressionAccess() {
		return gaKerMLExpressions.getExponentiationExpressionAccess();
	}
	
	public ParserRule getExponentiationExpressionRule() {
		return getExponentiationExpressionAccess().getRule();
	}
	
	//ExponentiationOperator :
	//    '**' | '^'
	//;
	public KerMLExpressionsGrammarAccess.ExponentiationOperatorElements getExponentiationOperatorAccess() {
		return gaKerMLExpressions.getExponentiationOperatorAccess();
	}
	
	public ParserRule getExponentiationOperatorRule() {
		return getExponentiationOperatorAccess().getRule();
	}
	
	//// Units Expressions (Deprecated)
	//UnitsExpression returns SysML::Expression :
	//    UnaryExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = '@[' operand += OwnedExpression ']' )?
	//;
	public KerMLExpressionsGrammarAccess.UnitsExpressionElements getUnitsExpressionAccess() {
		return gaKerMLExpressions.getUnitsExpressionAccess();
	}
	
	public ParserRule getUnitsExpressionRule() {
		return getUnitsExpressionAccess().getRule();
	}
	
	//// Unary Expressions
	//UnaryExpression returns SysML::Expression:
	//      {SysML::OperatorExpression} operator = UnaryOperator operand += ExtentExpression
	//    | ExtentExpression
	//;
	public KerMLExpressionsGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaKerMLExpressions.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//UnaryOperator :
	//    '+' | '-' | '!' | '~' | 'not'
	//;
	public KerMLExpressionsGrammarAccess.UnaryOperatorElements getUnaryOperatorAccess() {
		return gaKerMLExpressions.getUnaryOperatorAccess();
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//// Extent Expressions
	//ExtentExpression returns SysML::Expression :
	//      {SysML::OperatorExpression} operator = 'all' ownedRelationship += TypeReferenceMember
	//    | PrimaryExpression
	//;
	public KerMLExpressionsGrammarAccess.ExtentExpressionElements getExtentExpressionAccess() {
		return gaKerMLExpressions.getExtentExpressionAccess();
	}
	
	public ParserRule getExtentExpressionRule() {
		return getExtentExpressionAccess().getRule();
	}
	
	///* Primary Expressions */
	//PrimaryExpression returns SysML::Expression :
	//    BaseExpression
	//    ( {SysML::OperatorExpression.operand += current}
	//      operator = '[' operand += SequenceExpression ']'
	//    | {SysML::OperatorExpression.operand += current} '->'
	//      ownedRelationship += OwnedFeatureTyping
	//      ( ownedRelationship += ExpressionBodyMember
	//      | ownedRelationship += FunctionReferenceMember
	//      | ArgumentList
	//      )
	//    | {SysML::PathStepExpression.operand += current} '.'
	//      operand += FeatureReferenceExpression
	//    | {SysML::PathSelectExpression.operand += current} '.'
	//      ownedRelationship += ExpressionBodyMember
	//    )*
	//;
	public KerMLExpressionsGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaKerMLExpressions.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//ExpressionBodyMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += ExpressionBody // ownedMemberFeature = BodyExpression
	//;
	public KerMLExpressionsGrammarAccess.ExpressionBodyMemberElements getExpressionBodyMemberAccess() {
		return gaKerMLExpressions.getExpressionBodyMemberAccess();
	}
	
	public ParserRule getExpressionBodyMemberRule() {
		return getExpressionBodyMemberAccess().getRule();
	}
	
	//FunctionReferenceMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += FunctionReference // ownedMemberFeature = FunctionReference
	//;
	public KerMLExpressionsGrammarAccess.FunctionReferenceMemberElements getFunctionReferenceMemberAccess() {
		return gaKerMLExpressions.getFunctionReferenceMemberAccess();
	}
	
	public ParserRule getFunctionReferenceMemberRule() {
		return getFunctionReferenceMemberAccess().getRule();
	}
	
	//FunctionReference returns SysML::Expression :
	//    ownedRelationship += OwnedFeatureTyping
	//;
	public KerMLExpressionsGrammarAccess.FunctionReferenceElements getFunctionReferenceAccess() {
		return gaKerMLExpressions.getFunctionReferenceAccess();
	}
	
	public ParserRule getFunctionReferenceRule() {
		return getFunctionReferenceAccess().getRule();
	}
	
	///* Base Expressions */
	//BaseExpression returns SysML::Expression :
	//      NullExpression
	//    | LiteralExpression
	//    | FeatureReferenceExpression
	//    | InvocationExpression
	//    | ExpressionBody
	//    | '(' SequenceExpression ')'
	//;
	public KerMLExpressionsGrammarAccess.BaseExpressionElements getBaseExpressionAccess() {
		return gaKerMLExpressions.getBaseExpressionAccess();
	}
	
	public ParserRule getBaseExpressionRule() {
		return getBaseExpressionAccess().getRule();
	}
	
	//BodyParameterMember returns SysML::ParameterMembership :
	//    'in' memberName = Name ownedRelatedElement += BodyParameter // ownedMemberParameter = BodyParameter
	//;
	public KerMLExpressionsGrammarAccess.BodyParameterMemberElements getBodyParameterMemberAccess() {
		return gaKerMLExpressions.getBodyParameterMemberAccess();
	}
	
	public ParserRule getBodyParameterMemberRule() {
		return getBodyParameterMemberAccess().getRule();
	}
	
	//BodyParameter returns SysML::Feature :
	//    {SysML::Feature}
	//;
	public KerMLExpressionsGrammarAccess.BodyParameterElements getBodyParameterAccess() {
		return gaKerMLExpressions.getBodyParameterAccess();
	}
	
	public ParserRule getBodyParameterRule() {
		return getBodyParameterAccess().getRule();
	}
	
	//// Sequence Expressions
	//SequenceExpression returns SysML::Expression :
	//    OwnedExpression
	//    ( ','
	//    | {SysML::OperatorExpression.operand += current} operator = ','
	//      operand += SequenceExpression
	//    )?
	//;
	public KerMLExpressionsGrammarAccess.SequenceExpressionElements getSequenceExpressionAccess() {
		return gaKerMLExpressions.getSequenceExpressionAccess();
	}
	
	public ParserRule getSequenceExpressionRule() {
		return getSequenceExpressionAccess().getRule();
	}
	
	//// Feature Reference Expressions
	//FeatureReferenceExpression returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += FeatureReferenceMember
	//;
	public KerMLExpressionsGrammarAccess.FeatureReferenceExpressionElements getFeatureReferenceExpressionAccess() {
		return gaKerMLExpressions.getFeatureReferenceExpressionAccess();
	}
	
	public ParserRule getFeatureReferenceExpressionRule() {
		return getFeatureReferenceExpressionAccess().getRule();
	}
	
	//FeatureReferenceMember returns SysML::Membership :
	//    memberElement = [SysML::Feature | QualifiedName]
	//;
	public KerMLExpressionsGrammarAccess.FeatureReferenceMemberElements getFeatureReferenceMemberAccess() {
		return gaKerMLExpressions.getFeatureReferenceMemberAccess();
	}
	
	public ParserRule getFeatureReferenceMemberRule() {
		return getFeatureReferenceMemberAccess().getRule();
	}
	
	//// Invocation Expressions
	//InvocationExpression returns SysML::InvocationExpression :
	//    ownedRelationship += OwnedFeatureTyping ArgumentList
	//;
	public KerMLExpressionsGrammarAccess.InvocationExpressionElements getInvocationExpressionAccess() {
		return gaKerMLExpressions.getInvocationExpressionAccess();
	}
	
	public ParserRule getInvocationExpressionRule() {
		return getInvocationExpressionAccess().getRule();
	}
	
	//fragment ArgumentList returns SysML::Expression :
	//    '(' ( PositionalArgumentList | NamedArgumentList )? ')'
	//;
	public KerMLExpressionsGrammarAccess.ArgumentListElements getArgumentListAccess() {
		return gaKerMLExpressions.getArgumentListAccess();
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}
	
	//fragment PositionalArgumentList returns SysML::Expression :
	//    ownedRelationship += OwnedExpressionMember
	//    ( ',' ownedRelationship += OwnedExpressionMember )*
	//;
	public KerMLExpressionsGrammarAccess.PositionalArgumentListElements getPositionalArgumentListAccess() {
		return gaKerMLExpressions.getPositionalArgumentListAccess();
	}
	
	public ParserRule getPositionalArgumentListRule() {
		return getPositionalArgumentListAccess().getRule();
	}
	
	//fragment NamedArgumentList returns SysML::Expression :
	//    ownedRelationship += NamedExpressionMember
	//    ( ',' ownedRelationship += NamedExpressionMember )*
	//;
	public KerMLExpressionsGrammarAccess.NamedArgumentListElements getNamedArgumentListAccess() {
		return gaKerMLExpressions.getNamedArgumentListAccess();
	}
	
	public ParserRule getNamedArgumentListRule() {
		return getNamedArgumentListAccess().getRule();
	}
	
	//NamedExpressionMember returns SysML::FeatureMembership :
	//    memberName = Name '=>' ownedRelatedElement += OwnedExpression // ownedMemberFeature = OwnedExpression
	//;
	public KerMLExpressionsGrammarAccess.NamedExpressionMemberElements getNamedExpressionMemberAccess() {
		return gaKerMLExpressions.getNamedExpressionMemberAccess();
	}
	
	public ParserRule getNamedExpressionMemberRule() {
		return getNamedExpressionMemberAccess().getRule();
	}
	
	//// Null Expressions
	//NullExpression returns SysML::NullExpression :
	//    {SysML::NullExpression} ( 'null' | '(' ')' )
	//;
	public KerMLExpressionsGrammarAccess.NullExpressionElements getNullExpressionAccess() {
		return gaKerMLExpressions.getNullExpressionAccess();
	}
	
	public ParserRule getNullExpressionRule() {
		return getNullExpressionAccess().getRule();
	}
	
	///* Literal Expressions */
	//LiteralExpression returns SysML::LiteralExpression :
	//      LiteralBoolean
	//    | LiteralString
	//    | LiteralInteger
	//    | LiteralReal
	//    | LiteralInfinity
	//;
	public KerMLExpressionsGrammarAccess.LiteralExpressionElements getLiteralExpressionAccess() {
		return gaKerMLExpressions.getLiteralExpressionAccess();
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//LiteralBoolean returns SysML::LiteralBoolean :
	//    value = BooleanValue
	//;
	public KerMLExpressionsGrammarAccess.LiteralBooleanElements getLiteralBooleanAccess() {
		return gaKerMLExpressions.getLiteralBooleanAccess();
	}
	
	public ParserRule getLiteralBooleanRule() {
		return getLiteralBooleanAccess().getRule();
	}
	
	//BooleanValue returns Ecore::EBoolean :
	//    'true' | 'false'
	//;
	public KerMLExpressionsGrammarAccess.BooleanValueElements getBooleanValueAccess() {
		return gaKerMLExpressions.getBooleanValueAccess();
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//LiteralString returns SysML::LiteralString :
	//    value = STRING_VALUE
	//;
	public KerMLExpressionsGrammarAccess.LiteralStringElements getLiteralStringAccess() {
		return gaKerMLExpressions.getLiteralStringAccess();
	}
	
	public ParserRule getLiteralStringRule() {
		return getLiteralStringAccess().getRule();
	}
	
	//LiteralInteger returns SysML::LiteralInteger:
	//    value = DECIMAL_VALUE
	//;
	public KerMLExpressionsGrammarAccess.LiteralIntegerElements getLiteralIntegerAccess() {
		return gaKerMLExpressions.getLiteralIntegerAccess();
	}
	
	public ParserRule getLiteralIntegerRule() {
		return getLiteralIntegerAccess().getRule();
	}
	
	//LiteralReal returns SysML::LiteralRational:
	//    value = RealValue
	//;
	public KerMLExpressionsGrammarAccess.LiteralRealElements getLiteralRealAccess() {
		return gaKerMLExpressions.getLiteralRealAccess();
	}
	
	public ParserRule getLiteralRealRule() {
		return getLiteralRealAccess().getRule();
	}
	
	//RealValue returns Ecore::EDouble:
	//    DECIMAL_VALUE? '.' ( DECIMAL_VALUE | EXP_VALUE ) | EXP_VALUE
	//;
	public KerMLExpressionsGrammarAccess.RealValueElements getRealValueAccess() {
		return gaKerMLExpressions.getRealValueAccess();
	}
	
	public ParserRule getRealValueRule() {
		return getRealValueAccess().getRule();
	}
	
	//LiteralInfinity returns SysML::LiteralInfinity :
	//    {SysML::LiteralInfinity} '*'
	//;
	public KerMLExpressionsGrammarAccess.LiteralInfinityElements getLiteralInfinityAccess() {
		return gaKerMLExpressions.getLiteralInfinityAccess();
	}
	
	public ParserRule getLiteralInfinityRule() {
		return getLiteralInfinityAccess().getRule();
	}
	
	///* NAMES */
	//Name:
	//    ID | UNRESTRICTED_NAME
	//;
	public KerMLExpressionsGrammarAccess.NameElements getNameAccess() {
		return gaKerMLExpressions.getNameAccess();
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//Qualification :
	//    ( Name '::' )+
	//;
	public KerMLExpressionsGrammarAccess.QualificationElements getQualificationAccess() {
		return gaKerMLExpressions.getQualificationAccess();
	}
	
	public ParserRule getQualificationRule() {
		return getQualificationAccess().getRule();
	}
	
	//QualifiedName:
	//    Qualification? Name
	//;
	public KerMLExpressionsGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaKerMLExpressions.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	///* TERMINALS */
	//terminal DECIMAL_VALUE returns Ecore::EInt:
	//    '0'..'9' ('0'..'9')*;
	public TerminalRule getDECIMAL_VALUERule() {
		return gaKerMLExpressions.getDECIMAL_VALUERule();
	}
	
	//terminal EXP_VALUE:
	//    DECIMAL_VALUE ('e' | 'E') ('+' | '-')? DECIMAL_VALUE;
	public TerminalRule getEXP_VALUERule() {
		return gaKerMLExpressions.getEXP_VALUERule();
	}
	
	//terminal ID:
	//    ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaKerMLExpressions.getIDRule();
	}
	
	//terminal UNRESTRICTED_NAME returns Ecore::EString:
	//    '\'' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '\''))* '\'';
	public TerminalRule getUNRESTRICTED_NAMERule() {
		return gaKerMLExpressions.getUNRESTRICTED_NAMERule();
	}
	
	//terminal STRING_VALUE returns Ecore::EString:
	//    '"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRING_VALUERule() {
		return gaKerMLExpressions.getSTRING_VALUERule();
	}
	
	//terminal REGULAR_COMMENT:
	//    '/*' !('*') ->'*/';
	public TerminalRule getREGULAR_COMMENTRule() {
		return gaKerMLExpressions.getREGULAR_COMMENTRule();
	}
	
	//terminal DOCUMENTATION_COMMENT:
	//    '/**'->'*/';
	public TerminalRule getDOCUMENTATION_COMMENTRule() {
		return gaKerMLExpressions.getDOCUMENTATION_COMMENTRule();
	}
	
	//terminal ML_NOTE:
	//    '//*'->'*/';
	public TerminalRule getML_NOTERule() {
		return gaKerMLExpressions.getML_NOTERule();
	}
	
	//terminal SL_NOTE:
	//    '//' (!('\n' | '\r') !('\n' | '\r')*)? ('\r'? '\n')?;
	public TerminalRule getSL_NOTERule() {
		return gaKerMLExpressions.getSL_NOTERule();
	}
	
	//terminal WS:
	//    (' ' | '\t' | '\r' | '\n')+;
	public TerminalRule getWSRule() {
		return gaKerMLExpressions.getWSRule();
	}
}
