/*
 * generated by Xtext 2.25.0
 */
grammar InternalKerMLExpressions;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.omg.kerml.expressions.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.omg.kerml.expressions.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.omg.kerml.expressions.xtext.services.KerMLExpressionsGrammarAccess;

}
@parser::members {
	private KerMLExpressionsGrammarAccess grammarAccess;

	public void setGrammarAccess(KerMLExpressionsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleOwnedExpressionMember
entryRuleOwnedExpressionMember
:
{ before(grammarAccess.getOwnedExpressionMemberRule()); }
	 ruleOwnedExpressionMember
{ after(grammarAccess.getOwnedExpressionMemberRule()); } 
	 EOF 
;

// Rule OwnedExpressionMember
ruleOwnedExpressionMember 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOwnedExpressionMemberAccess().getOwnedRelatedElementAssignment()); }
		(rule__OwnedExpressionMember__OwnedRelatedElementAssignment)
		{ after(grammarAccess.getOwnedExpressionMemberAccess().getOwnedRelatedElementAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOwnedExpression
entryRuleOwnedExpression
:
{ before(grammarAccess.getOwnedExpressionRule()); }
	 ruleOwnedExpression
{ after(grammarAccess.getOwnedExpressionRule()); } 
	 EOF 
;

// Rule OwnedExpression
ruleOwnedExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOwnedExpressionAccess().getConditionalExpressionParserRuleCall()); }
		ruleConditionalExpression
		{ after(grammarAccess.getOwnedExpressionAccess().getConditionalExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression
:
{ before(grammarAccess.getConditionalExpressionRule()); }
	 ruleConditionalExpression
{ after(grammarAccess.getConditionalExpressionRule()); } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getAlternatives()); }
		(rule__ConditionalExpression__Alternatives)
		{ after(grammarAccess.getConditionalExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionalOperator
entryRuleConditionalOperator
:
{ before(grammarAccess.getConditionalOperatorRule()); }
	 ruleConditionalOperator
{ after(grammarAccess.getConditionalOperatorRule()); } 
	 EOF 
;

// Rule ConditionalOperator
ruleConditionalOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalOperatorAccess().getQuestionMarkKeyword()); }
		'?'
		{ after(grammarAccess.getConditionalOperatorAccess().getQuestionMarkKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNullCoalescingExpression
entryRuleNullCoalescingExpression
:
{ before(grammarAccess.getNullCoalescingExpressionRule()); }
	 ruleNullCoalescingExpression
{ after(grammarAccess.getNullCoalescingExpressionRule()); } 
	 EOF 
;

// Rule NullCoalescingExpression
ruleNullCoalescingExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNullCoalescingExpressionAccess().getGroup()); }
		(rule__NullCoalescingExpression__Group__0)
		{ after(grammarAccess.getNullCoalescingExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNullCoalescingOperator
entryRuleNullCoalescingOperator
:
{ before(grammarAccess.getNullCoalescingOperatorRule()); }
	 ruleNullCoalescingOperator
{ after(grammarAccess.getNullCoalescingOperatorRule()); } 
	 EOF 
;

// Rule NullCoalescingOperator
ruleNullCoalescingOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNullCoalescingOperatorAccess().getQuestionMarkQuestionMarkKeyword()); }
		'??'
		{ after(grammarAccess.getNullCoalescingOperatorAccess().getQuestionMarkQuestionMarkKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImpliesExpression
entryRuleImpliesExpression
:
{ before(grammarAccess.getImpliesExpressionRule()); }
	 ruleImpliesExpression
{ after(grammarAccess.getImpliesExpressionRule()); } 
	 EOF 
;

// Rule ImpliesExpression
ruleImpliesExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImpliesExpressionAccess().getGroup()); }
		(rule__ImpliesExpression__Group__0)
		{ after(grammarAccess.getImpliesExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImpliesOperator
entryRuleImpliesOperator
:
{ before(grammarAccess.getImpliesOperatorRule()); }
	 ruleImpliesOperator
{ after(grammarAccess.getImpliesOperatorRule()); } 
	 EOF 
;

// Rule ImpliesOperator
ruleImpliesOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImpliesOperatorAccess().getImpliesKeyword()); }
		'implies'
		{ after(grammarAccess.getImpliesOperatorAccess().getImpliesKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrExpression
entryRuleOrExpression
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
		(rule__OrExpression__Group__0)
		{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrOperator
entryRuleOrOperator
:
{ before(grammarAccess.getOrOperatorRule()); }
	 ruleOrOperator
{ after(grammarAccess.getOrOperatorRule()); } 
	 EOF 
;

// Rule OrOperator
ruleOrOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrOperatorAccess().getAlternatives()); }
		(rule__OrOperator__Alternatives)
		{ after(grammarAccess.getOrOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXorExpression
entryRuleXorExpression
:
{ before(grammarAccess.getXorExpressionRule()); }
	 ruleXorExpression
{ after(grammarAccess.getXorExpressionRule()); } 
	 EOF 
;

// Rule XorExpression
ruleXorExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXorExpressionAccess().getGroup()); }
		(rule__XorExpression__Group__0)
		{ after(grammarAccess.getXorExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXorOperator
entryRuleXorOperator
:
{ before(grammarAccess.getXorOperatorRule()); }
	 ruleXorOperator
{ after(grammarAccess.getXorOperatorRule()); } 
	 EOF 
;

// Rule XorOperator
ruleXorOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXorOperatorAccess().getAlternatives()); }
		(rule__XorOperator__Alternatives)
		{ after(grammarAccess.getXorOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpression
entryRuleAndExpression
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
		(rule__AndExpression__Group__0)
		{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndOperator
entryRuleAndOperator
:
{ before(grammarAccess.getAndOperatorRule()); }
	 ruleAndOperator
{ after(grammarAccess.getAndOperatorRule()); } 
	 EOF 
;

// Rule AndOperator
ruleAndOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndOperatorAccess().getAlternatives()); }
		(rule__AndOperator__Alternatives)
		{ after(grammarAccess.getAndOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
		(rule__EqualityExpression__Group__0)
		{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEqualityOperator
entryRuleEqualityOperator
:
{ before(grammarAccess.getEqualityOperatorRule()); }
	 ruleEqualityOperator
{ after(grammarAccess.getEqualityOperatorRule()); } 
	 EOF 
;

// Rule EqualityOperator
ruleEqualityOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualityOperatorAccess().getAlternatives()); }
		(rule__EqualityOperator__Alternatives)
		{ after(grammarAccess.getEqualityOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClassificationExpression
entryRuleClassificationExpression
:
{ before(grammarAccess.getClassificationExpressionRule()); }
	 ruleClassificationExpression
{ after(grammarAccess.getClassificationExpressionRule()); } 
	 EOF 
;

// Rule ClassificationExpression
ruleClassificationExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassificationExpressionAccess().getAlternatives()); }
		(rule__ClassificationExpression__Alternatives)
		{ after(grammarAccess.getClassificationExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClassificationOperator
entryRuleClassificationOperator
:
{ before(grammarAccess.getClassificationOperatorRule()); }
	 ruleClassificationOperator
{ after(grammarAccess.getClassificationOperatorRule()); } 
	 EOF 
;

// Rule ClassificationOperator
ruleClassificationOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassificationOperatorAccess().getAlternatives()); }
		(rule__ClassificationOperator__Alternatives)
		{ after(grammarAccess.getClassificationOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeReferenceMember
entryRuleTypeReferenceMember
:
{ before(grammarAccess.getTypeReferenceMemberRule()); }
	 ruleTypeReferenceMember
{ after(grammarAccess.getTypeReferenceMemberRule()); } 
	 EOF 
;

// Rule TypeReferenceMember
ruleTypeReferenceMember 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeReferenceMemberAccess().getOwnedRelatedElementAssignment()); }
		(rule__TypeReferenceMember__OwnedRelatedElementAssignment)
		{ after(grammarAccess.getTypeReferenceMemberAccess().getOwnedRelatedElementAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeReference
entryRuleTypeReference
:
{ before(grammarAccess.getTypeReferenceRule()); }
	 ruleTypeReference
{ after(grammarAccess.getTypeReferenceRule()); } 
	 EOF 
;

// Rule TypeReference
ruleTypeReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeReferenceAccess().getOwnedRelationshipAssignment()); }
		(rule__TypeReference__OwnedRelationshipAssignment)
		{ after(grammarAccess.getTypeReferenceAccess().getOwnedRelationshipAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOwnedFeatureTyping
entryRuleOwnedFeatureTyping
:
{ before(grammarAccess.getOwnedFeatureTypingRule()); }
	 ruleOwnedFeatureTyping
{ after(grammarAccess.getOwnedFeatureTypingRule()); } 
	 EOF 
;

// Rule OwnedFeatureTyping
ruleOwnedFeatureTyping 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOwnedFeatureTypingAccess().getTypeAssignment()); }
		(rule__OwnedFeatureTyping__TypeAssignment)
		{ after(grammarAccess.getOwnedFeatureTypingAccess().getTypeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelfReferenceExpression
entryRuleSelfReferenceExpression
:
{ before(grammarAccess.getSelfReferenceExpressionRule()); }
	 ruleSelfReferenceExpression
{ after(grammarAccess.getSelfReferenceExpressionRule()); } 
	 EOF 
;

// Rule SelfReferenceExpression
ruleSelfReferenceExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelfReferenceExpressionAccess().getOwnedRelationshipAssignment()); }
		(rule__SelfReferenceExpression__OwnedRelationshipAssignment)
		{ after(grammarAccess.getSelfReferenceExpressionAccess().getOwnedRelationshipAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelfReferenceMember
entryRuleSelfReferenceMember
:
{ before(grammarAccess.getSelfReferenceMemberRule()); }
	 ruleSelfReferenceMember
{ after(grammarAccess.getSelfReferenceMemberRule()); } 
	 EOF 
;

// Rule SelfReferenceMember
ruleSelfReferenceMember 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelfReferenceMemberAccess().getOwnedRelatedElementAssignment()); }
		(rule__SelfReferenceMember__OwnedRelatedElementAssignment)
		{ after(grammarAccess.getSelfReferenceMemberAccess().getOwnedRelatedElementAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEmptyFeature
entryRuleEmptyFeature
:
{ before(grammarAccess.getEmptyFeatureRule()); }
	 ruleEmptyFeature
{ after(grammarAccess.getEmptyFeatureRule()); } 
	 EOF 
;

// Rule EmptyFeature
ruleEmptyFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEmptyFeatureAccess().getFeatureAction()); }
		()
		{ after(grammarAccess.getEmptyFeatureAccess().getFeatureAction()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
		(rule__RelationalExpression__Group__0)
		{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationalOperator
entryRuleRelationalOperator
:
{ before(grammarAccess.getRelationalOperatorRule()); }
	 ruleRelationalOperator
{ after(grammarAccess.getRelationalOperatorRule()); } 
	 EOF 
;

// Rule RelationalOperator
ruleRelationalOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
		(rule__RelationalOperator__Alternatives)
		{ after(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRangeExpression
entryRuleRangeExpression
:
{ before(grammarAccess.getRangeExpressionRule()); }
	 ruleRangeExpression
{ after(grammarAccess.getRangeExpressionRule()); } 
	 EOF 
;

// Rule RangeExpression
ruleRangeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRangeExpressionAccess().getGroup()); }
		(rule__RangeExpression__Group__0)
		{ after(grammarAccess.getRangeExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
		(rule__AdditiveExpression__Group__0)
		{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdditiveOperator
entryRuleAdditiveOperator
:
{ before(grammarAccess.getAdditiveOperatorRule()); }
	 ruleAdditiveOperator
{ after(grammarAccess.getAdditiveOperatorRule()); } 
	 EOF 
;

// Rule AdditiveOperator
ruleAdditiveOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
		(rule__AdditiveOperator__Alternatives)
		{ after(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
		(rule__MultiplicativeExpression__Group__0)
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicativeOperator
entryRuleMultiplicativeOperator
:
{ before(grammarAccess.getMultiplicativeOperatorRule()); }
	 ruleMultiplicativeOperator
{ after(grammarAccess.getMultiplicativeOperatorRule()); } 
	 EOF 
;

// Rule MultiplicativeOperator
ruleMultiplicativeOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
		(rule__MultiplicativeOperator__Alternatives)
		{ after(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExponentiationExpression
entryRuleExponentiationExpression
:
{ before(grammarAccess.getExponentiationExpressionRule()); }
	 ruleExponentiationExpression
{ after(grammarAccess.getExponentiationExpressionRule()); } 
	 EOF 
;

// Rule ExponentiationExpression
ruleExponentiationExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExponentiationExpressionAccess().getGroup()); }
		(rule__ExponentiationExpression__Group__0)
		{ after(grammarAccess.getExponentiationExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExponentiationOperator
entryRuleExponentiationOperator
:
{ before(grammarAccess.getExponentiationOperatorRule()); }
	 ruleExponentiationOperator
{ after(grammarAccess.getExponentiationOperatorRule()); } 
	 EOF 
;

// Rule ExponentiationOperator
ruleExponentiationOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExponentiationOperatorAccess().getAlternatives()); }
		(rule__ExponentiationOperator__Alternatives)
		{ after(grammarAccess.getExponentiationOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnitsExpression
entryRuleUnitsExpression
:
{ before(grammarAccess.getUnitsExpressionRule()); }
	 ruleUnitsExpression
{ after(grammarAccess.getUnitsExpressionRule()); } 
	 EOF 
;

// Rule UnitsExpression
ruleUnitsExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnitsExpressionAccess().getGroup()); }
		(rule__UnitsExpression__Group__0)
		{ after(grammarAccess.getUnitsExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
		(rule__UnaryExpression__Alternatives)
		{ after(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator
:
{ before(grammarAccess.getUnaryOperatorRule()); }
	 ruleUnaryOperator
{ after(grammarAccess.getUnaryOperatorRule()); } 
	 EOF 
;

// Rule UnaryOperator
ruleUnaryOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
		(rule__UnaryOperator__Alternatives)
		{ after(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExtentExpression
entryRuleExtentExpression
:
{ before(grammarAccess.getExtentExpressionRule()); }
	 ruleExtentExpression
{ after(grammarAccess.getExtentExpressionRule()); } 
	 EOF 
;

// Rule ExtentExpression
ruleExtentExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExtentExpressionAccess().getAlternatives()); }
		(rule__ExtentExpression__Alternatives)
		{ after(grammarAccess.getExtentExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup()); }
		(rule__PrimaryExpression__Group__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpressionBodyMember
entryRuleExpressionBodyMember
:
{ before(grammarAccess.getExpressionBodyMemberRule()); }
	 ruleExpressionBodyMember
{ after(grammarAccess.getExpressionBodyMemberRule()); } 
	 EOF 
;

// Rule ExpressionBodyMember
ruleExpressionBodyMember 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionBodyMemberAccess().getOwnedRelatedElementAssignment()); }
		(rule__ExpressionBodyMember__OwnedRelatedElementAssignment)
		{ after(grammarAccess.getExpressionBodyMemberAccess().getOwnedRelatedElementAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionReferenceMember
entryRuleFunctionReferenceMember
:
{ before(grammarAccess.getFunctionReferenceMemberRule()); }
	 ruleFunctionReferenceMember
{ after(grammarAccess.getFunctionReferenceMemberRule()); } 
	 EOF 
;

// Rule FunctionReferenceMember
ruleFunctionReferenceMember 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionReferenceMemberAccess().getOwnedRelatedElementAssignment()); }
		(rule__FunctionReferenceMember__OwnedRelatedElementAssignment)
		{ after(grammarAccess.getFunctionReferenceMemberAccess().getOwnedRelatedElementAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionReference
entryRuleFunctionReference
:
{ before(grammarAccess.getFunctionReferenceRule()); }
	 ruleFunctionReference
{ after(grammarAccess.getFunctionReferenceRule()); } 
	 EOF 
;

// Rule FunctionReference
ruleFunctionReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionReferenceAccess().getOwnedRelationshipAssignment()); }
		(rule__FunctionReference__OwnedRelationshipAssignment)
		{ after(grammarAccess.getFunctionReferenceAccess().getOwnedRelationshipAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBaseExpression
entryRuleBaseExpression
:
{ before(grammarAccess.getBaseExpressionRule()); }
	 ruleBaseExpression
{ after(grammarAccess.getBaseExpressionRule()); } 
	 EOF 
;

// Rule BaseExpression
ruleBaseExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBaseExpressionAccess().getAlternatives()); }
		(rule__BaseExpression__Alternatives)
		{ after(grammarAccess.getBaseExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpressionBody
entryRuleExpressionBody
:
{ before(grammarAccess.getExpressionBodyRule()); }
	 ruleExpressionBody
{ after(grammarAccess.getExpressionBodyRule()); } 
	 EOF 
;

// Rule ExpressionBody
ruleExpressionBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionBodyAccess().getGroup()); }
		(rule__ExpressionBody__Group__0)
		{ after(grammarAccess.getExpressionBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleResultExpressionMember
entryRuleResultExpressionMember
:
{ before(grammarAccess.getResultExpressionMemberRule()); }
	 ruleResultExpressionMember
{ after(grammarAccess.getResultExpressionMemberRule()); } 
	 EOF 
;

// Rule ResultExpressionMember
ruleResultExpressionMember 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getResultExpressionMemberAccess().getOwnedRelatedElementAssignment()); }
		(rule__ResultExpressionMember__OwnedRelatedElementAssignment)
		{ after(grammarAccess.getResultExpressionMemberAccess().getOwnedRelatedElementAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBodyParameterMember
entryRuleBodyParameterMember
:
{ before(grammarAccess.getBodyParameterMemberRule()); }
	 ruleBodyParameterMember
{ after(grammarAccess.getBodyParameterMemberRule()); } 
	 EOF 
;

// Rule BodyParameterMember
ruleBodyParameterMember 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBodyParameterMemberAccess().getGroup()); }
		(rule__BodyParameterMember__Group__0)
		{ after(grammarAccess.getBodyParameterMemberAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBodyParameter
entryRuleBodyParameter
:
{ before(grammarAccess.getBodyParameterRule()); }
	 ruleBodyParameter
{ after(grammarAccess.getBodyParameterRule()); } 
	 EOF 
;

// Rule BodyParameter
ruleBodyParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBodyParameterAccess().getFeatureAction()); }
		()
		{ after(grammarAccess.getBodyParameterAccess().getFeatureAction()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSequenceExpression
entryRuleSequenceExpression
:
{ before(grammarAccess.getSequenceExpressionRule()); }
	 ruleSequenceExpression
{ after(grammarAccess.getSequenceExpressionRule()); } 
	 EOF 
;

// Rule SequenceExpression
ruleSequenceExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSequenceExpressionAccess().getGroup()); }
		(rule__SequenceExpression__Group__0)
		{ after(grammarAccess.getSequenceExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeatureReferenceExpression
entryRuleFeatureReferenceExpression
:
{ before(grammarAccess.getFeatureReferenceExpressionRule()); }
	 ruleFeatureReferenceExpression
{ after(grammarAccess.getFeatureReferenceExpressionRule()); } 
	 EOF 
;

// Rule FeatureReferenceExpression
ruleFeatureReferenceExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureReferenceExpressionAccess().getOwnedRelationshipAssignment()); }
		(rule__FeatureReferenceExpression__OwnedRelationshipAssignment)
		{ after(grammarAccess.getFeatureReferenceExpressionAccess().getOwnedRelationshipAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeatureReferenceMember
entryRuleFeatureReferenceMember
:
{ before(grammarAccess.getFeatureReferenceMemberRule()); }
	 ruleFeatureReferenceMember
{ after(grammarAccess.getFeatureReferenceMemberRule()); } 
	 EOF 
;

// Rule FeatureReferenceMember
ruleFeatureReferenceMember 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureReferenceMemberAccess().getMemberElementAssignment()); }
		(rule__FeatureReferenceMember__MemberElementAssignment)
		{ after(grammarAccess.getFeatureReferenceMemberAccess().getMemberElementAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInvocationExpression
entryRuleInvocationExpression
:
{ before(grammarAccess.getInvocationExpressionRule()); }
	 ruleInvocationExpression
{ after(grammarAccess.getInvocationExpressionRule()); } 
	 EOF 
;

// Rule InvocationExpression
ruleInvocationExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInvocationExpressionAccess().getGroup()); }
		(rule__InvocationExpression__Group__0)
		{ after(grammarAccess.getInvocationExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}


// Rule ArgumentList
ruleArgumentList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArgumentListAccess().getGroup()); }
		(rule__ArgumentList__Group__0)
		{ after(grammarAccess.getArgumentListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}


// Rule PositionalArgumentList
rulePositionalArgumentList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPositionalArgumentListAccess().getGroup()); }
		(rule__PositionalArgumentList__Group__0)
		{ after(grammarAccess.getPositionalArgumentListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}


// Rule NamedArgumentList
ruleNamedArgumentList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNamedArgumentListAccess().getGroup()); }
		(rule__NamedArgumentList__Group__0)
		{ after(grammarAccess.getNamedArgumentListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNamedExpressionMember
entryRuleNamedExpressionMember
:
{ before(grammarAccess.getNamedExpressionMemberRule()); }
	 ruleNamedExpressionMember
{ after(grammarAccess.getNamedExpressionMemberRule()); } 
	 EOF 
;

// Rule NamedExpressionMember
ruleNamedExpressionMember 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNamedExpressionMemberAccess().getGroup()); }
		(rule__NamedExpressionMember__Group__0)
		{ after(grammarAccess.getNamedExpressionMemberAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNullExpression
entryRuleNullExpression
:
{ before(grammarAccess.getNullExpressionRule()); }
	 ruleNullExpression
{ after(grammarAccess.getNullExpressionRule()); } 
	 EOF 
;

// Rule NullExpression
ruleNullExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNullExpressionAccess().getGroup()); }
		(rule__NullExpression__Group__0)
		{ after(grammarAccess.getNullExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression
:
{ before(grammarAccess.getLiteralExpressionRule()); }
	 ruleLiteralExpression
{ after(grammarAccess.getLiteralExpressionRule()); } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
		(rule__LiteralExpression__Alternatives)
		{ after(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteralBoolean
entryRuleLiteralBoolean
:
{ before(grammarAccess.getLiteralBooleanRule()); }
	 ruleLiteralBoolean
{ after(grammarAccess.getLiteralBooleanRule()); } 
	 EOF 
;

// Rule LiteralBoolean
ruleLiteralBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralBooleanAccess().getValueAssignment()); }
		(rule__LiteralBoolean__ValueAssignment)
		{ after(grammarAccess.getLiteralBooleanAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanValue
entryRuleBooleanValue
:
{ before(grammarAccess.getBooleanValueRule()); }
	 ruleBooleanValue
{ after(grammarAccess.getBooleanValueRule()); } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanValueAccess().getAlternatives()); }
		(rule__BooleanValue__Alternatives)
		{ after(grammarAccess.getBooleanValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteralString
entryRuleLiteralString
:
{ before(grammarAccess.getLiteralStringRule()); }
	 ruleLiteralString
{ after(grammarAccess.getLiteralStringRule()); } 
	 EOF 
;

// Rule LiteralString
ruleLiteralString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralStringAccess().getValueAssignment()); }
		(rule__LiteralString__ValueAssignment)
		{ after(grammarAccess.getLiteralStringAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteralInteger
entryRuleLiteralInteger
:
{ before(grammarAccess.getLiteralIntegerRule()); }
	 ruleLiteralInteger
{ after(grammarAccess.getLiteralIntegerRule()); } 
	 EOF 
;

// Rule LiteralInteger
ruleLiteralInteger 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralIntegerAccess().getValueAssignment()); }
		(rule__LiteralInteger__ValueAssignment)
		{ after(grammarAccess.getLiteralIntegerAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteralReal
entryRuleLiteralReal
:
{ before(grammarAccess.getLiteralRealRule()); }
	 ruleLiteralReal
{ after(grammarAccess.getLiteralRealRule()); } 
	 EOF 
;

// Rule LiteralReal
ruleLiteralReal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralRealAccess().getValueAssignment()); }
		(rule__LiteralReal__ValueAssignment)
		{ after(grammarAccess.getLiteralRealAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRealValue
entryRuleRealValue
:
{ before(grammarAccess.getRealValueRule()); }
	 ruleRealValue
{ after(grammarAccess.getRealValueRule()); } 
	 EOF 
;

// Rule RealValue
ruleRealValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRealValueAccess().getAlternatives()); }
		(rule__RealValue__Alternatives)
		{ after(grammarAccess.getRealValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteralInfinity
entryRuleLiteralInfinity
:
{ before(grammarAccess.getLiteralInfinityRule()); }
	 ruleLiteralInfinity
{ after(grammarAccess.getLiteralInfinityRule()); } 
	 EOF 
;

// Rule LiteralInfinity
ruleLiteralInfinity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralInfinityAccess().getGroup()); }
		(rule__LiteralInfinity__Group__0)
		{ after(grammarAccess.getLiteralInfinityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleName
entryRuleName
:
{ before(grammarAccess.getNameRule()); }
	 ruleName
{ after(grammarAccess.getNameRule()); } 
	 EOF 
;

// Rule Name
ruleName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNameAccess().getAlternatives()); }
		(rule__Name__Alternatives)
		{ after(grammarAccess.getNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualification
entryRuleQualification
:
{ before(grammarAccess.getQualificationRule()); }
	 ruleQualification
{ after(grammarAccess.getQualificationRule()); } 
	 EOF 
;

// Rule Qualification
ruleQualification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getQualificationAccess().getGroup()); }
			(rule__Qualification__Group__0)
			{ after(grammarAccess.getQualificationAccess().getGroup()); }
		)
		(
			{ before(grammarAccess.getQualificationAccess().getGroup()); }
			(rule__Qualification__Group__0)*
			{ after(grammarAccess.getQualificationAccess().getGroup()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getGroup_0()); }
		(rule__ConditionalExpression__Group_0__0)
		{ after(grammarAccess.getConditionalExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getGroup_1()); }
		(rule__ConditionalExpression__Group_1__0)
		{ after(grammarAccess.getConditionalExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrOperatorAccess().getVerticalLineKeyword_0()); }
		'|'
		{ after(grammarAccess.getOrOperatorAccess().getVerticalLineKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOrOperatorAccess().getVerticalLineVerticalLineKeyword_1()); }
		'||'
		{ after(grammarAccess.getOrOperatorAccess().getVerticalLineVerticalLineKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getOrOperatorAccess().getOrKeyword_2()); }
		'or'
		{ after(grammarAccess.getOrOperatorAccess().getOrKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXorOperatorAccess().getCircumflexAccentCircumflexAccentKeyword_0()); }
		'^^'
		{ after(grammarAccess.getXorOperatorAccess().getCircumflexAccentCircumflexAccentKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getXorOperatorAccess().getXorKeyword_1()); }
		'xor'
		{ after(grammarAccess.getXorOperatorAccess().getXorKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndOperatorAccess().getAmpersandKeyword_0()); }
		'&'
		{ after(grammarAccess.getAndOperatorAccess().getAmpersandKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getAndOperatorAccess().getAmpersandAmpersandKeyword_1()); }
		'&&'
		{ after(grammarAccess.getAndOperatorAccess().getAmpersandAmpersandKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getAndOperatorAccess().getAndKeyword_2()); }
		'and'
		{ after(grammarAccess.getAndOperatorAccess().getAndKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityOperatorAccess().getEqualsSignEqualsSignKeyword_0()); }
		'=='
		{ after(grammarAccess.getEqualityOperatorAccess().getEqualsSignEqualsSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getEqualityOperatorAccess().getExclamationMarkEqualsSignKeyword_1()); }
		'!='
		{ after(grammarAccess.getEqualityOperatorAccess().getExclamationMarkEqualsSignKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassificationExpressionAccess().getGroup_0()); }
		(rule__ClassificationExpression__Group_0__0)
		{ after(grammarAccess.getClassificationExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getClassificationExpressionAccess().getGroup_1()); }
		(rule__ClassificationExpression__Group_1__0)
		{ after(grammarAccess.getClassificationExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassificationOperatorAccess().getInstanceofKeyword_0()); }
		'instanceof'
		{ after(grammarAccess.getClassificationOperatorAccess().getInstanceofKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getClassificationOperatorAccess().getHastypeKeyword_1()); }
		'hastype'
		{ after(grammarAccess.getClassificationOperatorAccess().getHastypeKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getClassificationOperatorAccess().getIstypeKeyword_2()); }
		'istype'
		{ after(grammarAccess.getClassificationOperatorAccess().getIstypeKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getClassificationOperatorAccess().getCommercialAtKeyword_3()); }
		'@'
		{ after(grammarAccess.getClassificationOperatorAccess().getCommercialAtKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getClassificationOperatorAccess().getAsKeyword_4()); }
		'as'
		{ after(grammarAccess.getClassificationOperatorAccess().getAsKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0()); }
		'<'
		{ after(grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1()); }
		'>'
		{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2()); }
		'<='
		{ after(grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3()); }
		'>='
		{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveOperatorAccess().getPlusSignKeyword_0()); }
		'+'
		{ after(grammarAccess.getAdditiveOperatorAccess().getPlusSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditiveOperatorAccess().getHyphenMinusKeyword_1()); }
		'-'
		{ after(grammarAccess.getAdditiveOperatorAccess().getHyphenMinusKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeOperatorAccess().getAsteriskKeyword_0()); }
		'*'
		{ after(grammarAccess.getMultiplicativeOperatorAccess().getAsteriskKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeOperatorAccess().getSolidusKeyword_1()); }
		'/'
		{ after(grammarAccess.getMultiplicativeOperatorAccess().getSolidusKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeOperatorAccess().getPercentSignKeyword_2()); }
		'%'
		{ after(grammarAccess.getMultiplicativeOperatorAccess().getPercentSignKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentiationOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExponentiationOperatorAccess().getAsteriskAsteriskKeyword_0()); }
		'**'
		{ after(grammarAccess.getExponentiationOperatorAccess().getAsteriskAsteriskKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getExponentiationOperatorAccess().getCircumflexAccentKeyword_1()); }
		'^'
		{ after(grammarAccess.getExponentiationOperatorAccess().getCircumflexAccentKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
		(rule__UnaryExpression__Group_0__0)
		{ after(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getExtentExpressionParserRuleCall_1()); }
		ruleExtentExpression
		{ after(grammarAccess.getUnaryExpressionAccess().getExtentExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getPlusSignKeyword_0()); }
		'+'
		{ after(grammarAccess.getUnaryOperatorAccess().getPlusSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getHyphenMinusKeyword_1()); }
		'-'
		{ after(grammarAccess.getUnaryOperatorAccess().getHyphenMinusKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getExclamationMarkKeyword_2()); }
		'!'
		{ after(grammarAccess.getUnaryOperatorAccess().getExclamationMarkKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getTildeKeyword_3()); }
		'~'
		{ after(grammarAccess.getUnaryOperatorAccess().getTildeKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getNotKeyword_4()); }
		'not'
		{ after(grammarAccess.getUnaryOperatorAccess().getNotKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtentExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtentExpressionAccess().getGroup_0()); }
		(rule__ExtentExpression__Group_0__0)
		{ after(grammarAccess.getExtentExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getExtentExpressionAccess().getPrimaryExpressionParserRuleCall_1()); }
		rulePrimaryExpression
		{ after(grammarAccess.getExtentExpressionAccess().getPrimaryExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1_0()); }
		(rule__PrimaryExpression__Group_1_0__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1_1()); }
		(rule__PrimaryExpression__Group_1_1__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1_2()); }
		(rule__PrimaryExpression__Group_1_2__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1_3()); }
		(rule__PrimaryExpression__Group_1_3__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives_1_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getOwnedRelationshipAssignment_1_1_3_0()); }
		(rule__PrimaryExpression__OwnedRelationshipAssignment_1_1_3_0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getOwnedRelationshipAssignment_1_1_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getOwnedRelationshipAssignment_1_1_3_1()); }
		(rule__PrimaryExpression__OwnedRelationshipAssignment_1_1_3_1)
		{ after(grammarAccess.getPrimaryExpressionAccess().getOwnedRelationshipAssignment_1_1_3_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getArgumentListParserRuleCall_1_1_3_2()); }
		ruleArgumentList
		{ after(grammarAccess.getPrimaryExpressionAccess().getArgumentListParserRuleCall_1_1_3_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBaseExpressionAccess().getNullExpressionParserRuleCall_0()); }
		ruleNullExpression
		{ after(grammarAccess.getBaseExpressionAccess().getNullExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBaseExpressionAccess().getLiteralExpressionParserRuleCall_1()); }
		ruleLiteralExpression
		{ after(grammarAccess.getBaseExpressionAccess().getLiteralExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getBaseExpressionAccess().getFeatureReferenceExpressionParserRuleCall_2()); }
		ruleFeatureReferenceExpression
		{ after(grammarAccess.getBaseExpressionAccess().getFeatureReferenceExpressionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getBaseExpressionAccess().getInvocationExpressionParserRuleCall_3()); }
		ruleInvocationExpression
		{ after(grammarAccess.getBaseExpressionAccess().getInvocationExpressionParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getBaseExpressionAccess().getExpressionBodyParserRuleCall_4()); }
		ruleExpressionBody
		{ after(grammarAccess.getBaseExpressionAccess().getExpressionBodyParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getBaseExpressionAccess().getGroup_5()); }
		(rule__BaseExpression__Group_5__0)
		{ after(grammarAccess.getBaseExpressionAccess().getGroup_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceExpression__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSequenceExpressionAccess().getCommaKeyword_1_0()); }
		','
		{ after(grammarAccess.getSequenceExpressionAccess().getCommaKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getSequenceExpressionAccess().getGroup_1_1()); }
		(rule__SequenceExpression__Group_1_1__0)
		{ after(grammarAccess.getSequenceExpressionAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArgumentListAccess().getPositionalArgumentListParserRuleCall_1_0()); }
		rulePositionalArgumentList
		{ after(grammarAccess.getArgumentListAccess().getPositionalArgumentListParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getArgumentListAccess().getNamedArgumentListParserRuleCall_1_1()); }
		ruleNamedArgumentList
		{ after(grammarAccess.getArgumentListAccess().getNamedArgumentListParserRuleCall_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullExpression__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNullExpressionAccess().getNullKeyword_1_0()); }
		'null'
		{ after(grammarAccess.getNullExpressionAccess().getNullKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getNullExpressionAccess().getGroup_1_1()); }
		(rule__NullExpression__Group_1_1__0)
		{ after(grammarAccess.getNullExpressionAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getLiteralBooleanParserRuleCall_0()); }
		ruleLiteralBoolean
		{ after(grammarAccess.getLiteralExpressionAccess().getLiteralBooleanParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getLiteralStringParserRuleCall_1()); }
		ruleLiteralString
		{ after(grammarAccess.getLiteralExpressionAccess().getLiteralStringParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getLiteralIntegerParserRuleCall_2()); }
		ruleLiteralInteger
		{ after(grammarAccess.getLiteralExpressionAccess().getLiteralIntegerParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getLiteralRealParserRuleCall_3()); }
		ruleLiteralReal
		{ after(grammarAccess.getLiteralExpressionAccess().getLiteralRealParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getLiteralInfinityParserRuleCall_4()); }
		ruleLiteralInfinity
		{ after(grammarAccess.getLiteralExpressionAccess().getLiteralInfinityParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanValueAccess().getTrueKeyword_0()); }
		'true'
		{ after(grammarAccess.getBooleanValueAccess().getTrueKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanValueAccess().getFalseKeyword_1()); }
		'false'
		{ after(grammarAccess.getBooleanValueAccess().getFalseKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRealValueAccess().getGroup_0()); }
		(rule__RealValue__Group_0__0)
		{ after(grammarAccess.getRealValueAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getRealValueAccess().getEXP_VALUETerminalRuleCall_1()); }
		RULE_EXP_VALUE
		{ after(grammarAccess.getRealValueAccess().getEXP_VALUETerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealValue__Alternatives_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRealValueAccess().getDECIMAL_VALUETerminalRuleCall_0_2_0()); }
		RULE_DECIMAL_VALUE
		{ after(grammarAccess.getRealValueAccess().getDECIMAL_VALUETerminalRuleCall_0_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getRealValueAccess().getEXP_VALUETerminalRuleCall_0_2_1()); }
		RULE_EXP_VALUE
		{ after(grammarAccess.getRealValueAccess().getEXP_VALUETerminalRuleCall_0_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNameAccess().getIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getNameAccess().getIDTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNameAccess().getUNRESTRICTED_NAMETerminalRuleCall_1()); }
		RULE_UNRESTRICTED_NAME
		{ after(grammarAccess.getNameAccess().getUNRESTRICTED_NAMETerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_0__0__Impl
	rule__ConditionalExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getNullCoalescingExpressionParserRuleCall_0_0()); }
	ruleNullCoalescingExpression
	{ after(grammarAccess.getConditionalExpressionAccess().getNullCoalescingExpressionParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getGroup_0_1()); }
	(rule__ConditionalExpression__Group_0_1__0)?
	{ after(grammarAccess.getConditionalExpressionAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_0_1__0__Impl
	rule__ConditionalExpression__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getOperatorExpressionOperandAction_0_1_0()); }
	()
	{ after(grammarAccess.getConditionalExpressionAccess().getOperatorExpressionOperandAction_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_0_1__1__Impl
	rule__ConditionalExpression__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getOperatorAssignment_0_1_1()); }
	(rule__ConditionalExpression__OperatorAssignment_0_1_1)
	{ after(grammarAccess.getConditionalExpressionAccess().getOperatorAssignment_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_0_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_0_1__2__Impl
	rule__ConditionalExpression__Group_0_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_0_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getOperandAssignment_0_1_2()); }
	(rule__ConditionalExpression__OperandAssignment_0_1_2)
	{ after(grammarAccess.getConditionalExpressionAccess().getOperandAssignment_0_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_0_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_0_1__3__Impl
	rule__ConditionalExpression__Group_0_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_0_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getColonKeyword_0_1_3()); }
	':'
	{ after(grammarAccess.getConditionalExpressionAccess().getColonKeyword_0_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_0_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_0_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_0_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getOperandAssignment_0_1_4()); }
	(rule__ConditionalExpression__OperandAssignment_0_1_4)
	{ after(grammarAccess.getConditionalExpressionAccess().getOperandAssignment_0_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_1__0__Impl
	rule__ConditionalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getOperatorExpressionAction_1_0()); }
	()
	{ after(grammarAccess.getConditionalExpressionAccess().getOperatorExpressionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_1__1__Impl
	rule__ConditionalExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getIfKeyword_1_1()); }
	'if'
	{ after(grammarAccess.getConditionalExpressionAccess().getIfKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_1__2__Impl
	rule__ConditionalExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getOperandAssignment_1_2()); }
	(rule__ConditionalExpression__OperandAssignment_1_2)
	{ after(grammarAccess.getConditionalExpressionAccess().getOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_1__3__Impl
	rule__ConditionalExpression__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getOperatorAssignment_1_3()); }
	(rule__ConditionalExpression__OperatorAssignment_1_3)
	{ after(grammarAccess.getConditionalExpressionAccess().getOperatorAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_1__4__Impl
	rule__ConditionalExpression__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getOperandAssignment_1_4()); }
	(rule__ConditionalExpression__OperandAssignment_1_4)
	{ after(grammarAccess.getConditionalExpressionAccess().getOperandAssignment_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_1__5__Impl
	rule__ConditionalExpression__Group_1__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getElseKeyword_1_5()); }
	'else'
	{ after(grammarAccess.getConditionalExpressionAccess().getElseKeyword_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_1__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getOperandAssignment_1_6()); }
	(rule__ConditionalExpression__OperandAssignment_1_6)
	{ after(grammarAccess.getConditionalExpressionAccess().getOperandAssignment_1_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NullCoalescingExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullCoalescingExpression__Group__0__Impl
	rule__NullCoalescingExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullCoalescingExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullCoalescingExpressionAccess().getImpliesExpressionParserRuleCall_0()); }
	ruleImpliesExpression
	{ after(grammarAccess.getNullCoalescingExpressionAccess().getImpliesExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullCoalescingExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullCoalescingExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullCoalescingExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullCoalescingExpressionAccess().getGroup_1()); }
	(rule__NullCoalescingExpression__Group_1__0)*
	{ after(grammarAccess.getNullCoalescingExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NullCoalescingExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullCoalescingExpression__Group_1__0__Impl
	rule__NullCoalescingExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullCoalescingExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullCoalescingExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
	()
	{ after(grammarAccess.getNullCoalescingExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullCoalescingExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullCoalescingExpression__Group_1__1__Impl
	rule__NullCoalescingExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NullCoalescingExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullCoalescingExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__NullCoalescingExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getNullCoalescingExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullCoalescingExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullCoalescingExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullCoalescingExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullCoalescingExpressionAccess().getOperandAssignment_1_2()); }
	(rule__NullCoalescingExpression__OperandAssignment_1_2)
	{ after(grammarAccess.getNullCoalescingExpressionAccess().getOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImpliesExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImpliesExpression__Group__0__Impl
	rule__ImpliesExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesExpressionAccess().getOrExpressionParserRuleCall_0()); }
	ruleOrExpression
	{ after(grammarAccess.getImpliesExpressionAccess().getOrExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImpliesExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesExpressionAccess().getGroup_1()); }
	(rule__ImpliesExpression__Group_1__0)*
	{ after(grammarAccess.getImpliesExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImpliesExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImpliesExpression__Group_1__0__Impl
	rule__ImpliesExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
	()
	{ after(grammarAccess.getImpliesExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImpliesExpression__Group_1__1__Impl
	rule__ImpliesExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__ImpliesExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getImpliesExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImpliesExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesExpressionAccess().getOperandAssignment_1_2()); }
	(rule__ImpliesExpression__OperandAssignment_1_2)
	{ after(grammarAccess.getImpliesExpressionAccess().getOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getXorExpressionParserRuleCall_0()); }
	ruleXorExpression
	{ after(grammarAccess.getOrExpressionAccess().getXorExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
	(rule__OrExpression__Group_1__0)*
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
	()
	{ after(grammarAccess.getOrExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__OrExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOperandAssignment_1_2()); }
	(rule__OrExpression__OperandAssignment_1_2)
	{ after(grammarAccess.getOrExpressionAccess().getOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group__0__Impl
	rule__XorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
	{ after(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getGroup_1()); }
	(rule__XorExpression__Group_1__0)*
	{ after(grammarAccess.getXorExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1__0__Impl
	rule__XorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
	()
	{ after(grammarAccess.getXorExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1__1__Impl
	rule__XorExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__XorExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getXorExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getOperandAssignment_1_2()); }
	(rule__XorExpression__OperandAssignment_1_2)
	{ after(grammarAccess.getXorExpressionAccess().getOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
	ruleEqualityExpression
	{ after(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
	(rule__AndExpression__Group_1__0)*
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
	()
	{ after(grammarAccess.getAndExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__AndExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getOperandAssignment_1_2()); }
	(rule__AndExpression__OperandAssignment_1_2)
	{ after(grammarAccess.getAndExpressionAccess().getOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group__0__Impl
	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getClassificationExpressionParserRuleCall_0()); }
	ruleClassificationExpression
	{ after(grammarAccess.getEqualityExpressionAccess().getClassificationExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
	(rule__EqualityExpression__Group_1__0)*
	{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group_1__0__Impl
	rule__EqualityExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
	()
	{ after(grammarAccess.getEqualityExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group_1__1__Impl
	rule__EqualityExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__EqualityExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getEqualityExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getOperandAssignment_1_2()); }
	(rule__EqualityExpression__OperandAssignment_1_2)
	{ after(grammarAccess.getEqualityExpressionAccess().getOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClassificationExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassificationExpression__Group_0__0__Impl
	rule__ClassificationExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassificationExpressionAccess().getRelationalExpressionParserRuleCall_0_0()); }
	ruleRelationalExpression
	{ after(grammarAccess.getClassificationExpressionAccess().getRelationalExpressionParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassificationExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassificationExpressionAccess().getGroup_0_1()); }
	(rule__ClassificationExpression__Group_0_1__0)?
	{ after(grammarAccess.getClassificationExpressionAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClassificationExpression__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassificationExpression__Group_0_1__0__Impl
	rule__ClassificationExpression__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationExpression__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassificationExpressionAccess().getOperatorExpressionOperandAction_0_1_0()); }
	()
	{ after(grammarAccess.getClassificationExpressionAccess().getOperatorExpressionOperandAction_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationExpression__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassificationExpression__Group_0_1__1__Impl
	rule__ClassificationExpression__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationExpression__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassificationExpressionAccess().getOperatorAssignment_0_1_1()); }
	(rule__ClassificationExpression__OperatorAssignment_0_1_1)
	{ after(grammarAccess.getClassificationExpressionAccess().getOperatorAssignment_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationExpression__Group_0_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassificationExpression__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationExpression__Group_0_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassificationExpressionAccess().getOwnedRelationshipAssignment_0_1_2()); }
	(rule__ClassificationExpression__OwnedRelationshipAssignment_0_1_2)
	{ after(grammarAccess.getClassificationExpressionAccess().getOwnedRelationshipAssignment_0_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClassificationExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassificationExpression__Group_1__0__Impl
	rule__ClassificationExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassificationExpressionAccess().getOperatorExpressionAction_1_0()); }
	()
	{ after(grammarAccess.getClassificationExpressionAccess().getOperatorExpressionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassificationExpression__Group_1__1__Impl
	rule__ClassificationExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassificationExpressionAccess().getOperandAssignment_1_1()); }
	(rule__ClassificationExpression__OperandAssignment_1_1)
	{ after(grammarAccess.getClassificationExpressionAccess().getOperandAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassificationExpression__Group_1__2__Impl
	rule__ClassificationExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassificationExpressionAccess().getOperatorAssignment_1_2()); }
	(rule__ClassificationExpression__OperatorAssignment_1_2)
	{ after(grammarAccess.getClassificationExpressionAccess().getOperatorAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationExpression__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassificationExpression__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationExpression__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassificationExpressionAccess().getOwnedRelationshipAssignment_1_3()); }
	(rule__ClassificationExpression__OwnedRelationshipAssignment_1_3)
	{ after(grammarAccess.getClassificationExpressionAccess().getOwnedRelationshipAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getRangeExpressionParserRuleCall_0()); }
	ruleRangeExpression
	{ after(grammarAccess.getRelationalExpressionAccess().getRangeExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
	(rule__RelationalExpression__Group_1__0)*
	{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group_1__0__Impl
	rule__RelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
	()
	{ after(grammarAccess.getRelationalExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group_1__1__Impl
	rule__RelationalExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__RelationalExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getOperandAssignment_1_2()); }
	(rule__RelationalExpression__OperandAssignment_1_2)
	{ after(grammarAccess.getRelationalExpressionAccess().getOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeExpression__Group__0__Impl
	rule__RangeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
	ruleAdditiveExpression
	{ after(grammarAccess.getRangeExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeExpressionAccess().getGroup_1()); }
	(rule__RangeExpression__Group_1__0)?
	{ after(grammarAccess.getRangeExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeExpression__Group_1__0__Impl
	rule__RangeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
	()
	{ after(grammarAccess.getRangeExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeExpression__Group_1__1__Impl
	rule__RangeExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__RangeExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getRangeExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeExpressionAccess().getOperandAssignment_1_2()); }
	(rule__RangeExpression__OperandAssignment_1_2)
	{ after(grammarAccess.getRangeExpressionAccess().getOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
	ruleMultiplicativeExpression
	{ after(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
	(rule__AdditiveExpression__Group_1__0)*
	{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1__0__Impl
	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
	()
	{ after(grammarAccess.getAdditiveExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1__1__Impl
	rule__AdditiveExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__AdditiveExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getAdditiveExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getOperandAssignment_1_2()); }
	(rule__AdditiveExpression__OperandAssignment_1_2)
	{ after(grammarAccess.getAdditiveExpressionAccess().getOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getExponentiationExpressionParserRuleCall_0()); }
	ruleExponentiationExpression
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getExponentiationExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
	(rule__MultiplicativeExpression__Group_1__0)*
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__0__Impl
	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__1__Impl
	rule__MultiplicativeExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__MultiplicativeExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperandAssignment_1_2()); }
	(rule__MultiplicativeExpression__OperandAssignment_1_2)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExponentiationExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExponentiationExpression__Group__0__Impl
	rule__ExponentiationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentiationExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentiationExpressionAccess().getUnitsExpressionParserRuleCall_0()); }
	ruleUnitsExpression
	{ after(grammarAccess.getExponentiationExpressionAccess().getUnitsExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentiationExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExponentiationExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentiationExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentiationExpressionAccess().getGroup_1()); }
	(rule__ExponentiationExpression__Group_1__0)*
	{ after(grammarAccess.getExponentiationExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExponentiationExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExponentiationExpression__Group_1__0__Impl
	rule__ExponentiationExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentiationExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentiationExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
	()
	{ after(grammarAccess.getExponentiationExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentiationExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExponentiationExpression__Group_1__1__Impl
	rule__ExponentiationExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentiationExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentiationExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__ExponentiationExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getExponentiationExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentiationExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExponentiationExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentiationExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentiationExpressionAccess().getOperandAssignment_1_2()); }
	(rule__ExponentiationExpression__OperandAssignment_1_2)
	{ after(grammarAccess.getExponentiationExpressionAccess().getOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnitsExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnitsExpression__Group__0__Impl
	rule__UnitsExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitsExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnitsExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
	ruleUnaryExpression
	{ after(grammarAccess.getUnitsExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitsExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnitsExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitsExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnitsExpressionAccess().getGroup_1()); }
	(rule__UnitsExpression__Group_1__0)?
	{ after(grammarAccess.getUnitsExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnitsExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnitsExpression__Group_1__0__Impl
	rule__UnitsExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitsExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnitsExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
	()
	{ after(grammarAccess.getUnitsExpressionAccess().getOperatorExpressionOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitsExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnitsExpression__Group_1__1__Impl
	rule__UnitsExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitsExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnitsExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__UnitsExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getUnitsExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitsExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnitsExpression__Group_1__2__Impl
	rule__UnitsExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitsExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnitsExpressionAccess().getOperandAssignment_1_2()); }
	(rule__UnitsExpression__OperandAssignment_1_2)
	{ after(grammarAccess.getUnitsExpressionAccess().getOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitsExpression__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnitsExpression__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitsExpression__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnitsExpressionAccess().getRightSquareBracketKeyword_1_3()); }
	']'
	{ after(grammarAccess.getUnitsExpressionAccess().getRightSquareBracketKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_0__0__Impl
	rule__UnaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getOperatorExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getUnaryExpressionAccess().getOperatorExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_0__1__Impl
	rule__UnaryExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getOperatorAssignment_0_1()); }
	(rule__UnaryExpression__OperatorAssignment_0_1)
	{ after(grammarAccess.getUnaryExpressionAccess().getOperatorAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_0_2()); }
	(rule__UnaryExpression__OperandAssignment_0_2)
	{ after(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExtentExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExtentExpression__Group_0__0__Impl
	rule__ExtentExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtentExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtentExpressionAccess().getOperatorExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getExtentExpressionAccess().getOperatorExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtentExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExtentExpression__Group_0__1__Impl
	rule__ExtentExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtentExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtentExpressionAccess().getOperatorAssignment_0_1()); }
	(rule__ExtentExpression__OperatorAssignment_0_1)
	{ after(grammarAccess.getExtentExpressionAccess().getOperatorAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtentExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExtentExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtentExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtentExpressionAccess().getOwnedRelationshipAssignment_0_2()); }
	(rule__ExtentExpression__OwnedRelationshipAssignment_0_2)
	{ after(grammarAccess.getExtentExpressionAccess().getOwnedRelationshipAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group__0__Impl
	rule__PrimaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getBaseExpressionParserRuleCall_0()); }
	ruleBaseExpression
	{ after(grammarAccess.getPrimaryExpressionAccess().getBaseExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives_1()); }
	(rule__PrimaryExpression__Alternatives_1)*
	{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1_0__0__Impl
	rule__PrimaryExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_1_0_0()); }
	()
	{ after(grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1_0__1__Impl
	rule__PrimaryExpression__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getOperatorAssignment_1_0_1()); }
	(rule__PrimaryExpression__OperatorAssignment_1_0_1)
	{ after(grammarAccess.getPrimaryExpressionAccess().getOperatorAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1_0__2__Impl
	rule__PrimaryExpression__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getOperandAssignment_1_0_2()); }
	(rule__PrimaryExpression__OperandAssignment_1_0_2)
	{ after(grammarAccess.getPrimaryExpressionAccess().getOperandAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getRightSquareBracketKeyword_1_0_3()); }
	']'
	{ after(grammarAccess.getPrimaryExpressionAccess().getRightSquareBracketKeyword_1_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1_1__0__Impl
	rule__PrimaryExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_1_1_0()); }
	()
	{ after(grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1_1__1__Impl
	rule__PrimaryExpression__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_1_1()); }
	'->'
	{ after(grammarAccess.getPrimaryExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1_1__2__Impl
	rule__PrimaryExpression__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getOwnedRelationshipAssignment_1_1_2()); }
	(rule__PrimaryExpression__OwnedRelationshipAssignment_1_1_2)
	{ after(grammarAccess.getPrimaryExpressionAccess().getOwnedRelationshipAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives_1_1_3()); }
	(rule__PrimaryExpression__Alternatives_1_1_3)
	{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives_1_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1_2__0__Impl
	rule__PrimaryExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getPathStepExpressionOperandAction_1_2_0()); }
	()
	{ after(grammarAccess.getPrimaryExpressionAccess().getPathStepExpressionOperandAction_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1_2__1__Impl
	rule__PrimaryExpression__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getFullStopKeyword_1_2_1()); }
	'.'
	{ after(grammarAccess.getPrimaryExpressionAccess().getFullStopKeyword_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getOperandAssignment_1_2_2()); }
	(rule__PrimaryExpression__OperandAssignment_1_2_2)
	{ after(grammarAccess.getPrimaryExpressionAccess().getOperandAssignment_1_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1_3__0__Impl
	rule__PrimaryExpression__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getPathSelectExpressionOperandAction_1_3_0()); }
	()
	{ after(grammarAccess.getPrimaryExpressionAccess().getPathSelectExpressionOperandAction_1_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1_3__1__Impl
	rule__PrimaryExpression__Group_1_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getFullStopKeyword_1_3_1()); }
	'.'
	{ after(grammarAccess.getPrimaryExpressionAccess().getFullStopKeyword_1_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getOwnedRelationshipAssignment_1_3_2()); }
	(rule__PrimaryExpression__OwnedRelationshipAssignment_1_3_2)
	{ after(grammarAccess.getPrimaryExpressionAccess().getOwnedRelationshipAssignment_1_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BaseExpression__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseExpression__Group_5__0__Impl
	rule__BaseExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpression__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseExpressionAccess().getLeftParenthesisKeyword_5_0()); }
	'('
	{ after(grammarAccess.getBaseExpressionAccess().getLeftParenthesisKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpression__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseExpression__Group_5__1__Impl
	rule__BaseExpression__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpression__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseExpressionAccess().getSequenceExpressionParserRuleCall_5_1()); }
	ruleSequenceExpression
	{ after(grammarAccess.getBaseExpressionAccess().getSequenceExpressionParserRuleCall_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpression__Group_5__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseExpression__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpression__Group_5__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseExpressionAccess().getRightParenthesisKeyword_5_2()); }
	')'
	{ after(grammarAccess.getBaseExpressionAccess().getRightParenthesisKeyword_5_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionBody__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionBody__Group__0__Impl
	rule__ExpressionBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionBody__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionBodyAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getExpressionBodyAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionBody__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionBody__Group__1__Impl
	rule__ExpressionBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionBody__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionBodyAccess().getGroup_1()); }
	(rule__ExpressionBody__Group_1__0)*
	{ after(grammarAccess.getExpressionBodyAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionBody__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionBody__Group__2__Impl
	rule__ExpressionBody__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionBody__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionBodyAccess().getOwnedRelationshipAssignment_2()); }
	(rule__ExpressionBody__OwnedRelationshipAssignment_2)
	{ after(grammarAccess.getExpressionBodyAccess().getOwnedRelationshipAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionBody__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionBody__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionBody__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionBodyAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getExpressionBodyAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionBody__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionBody__Group_1__0__Impl
	rule__ExpressionBody__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionBody__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionBodyAccess().getOwnedRelationshipAssignment_1_0()); }
	(rule__ExpressionBody__OwnedRelationshipAssignment_1_0)
	{ after(grammarAccess.getExpressionBodyAccess().getOwnedRelationshipAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionBody__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionBody__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionBody__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionBodyAccess().getSemicolonKeyword_1_1()); }
	';'
	{ after(grammarAccess.getExpressionBodyAccess().getSemicolonKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BodyParameterMember__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BodyParameterMember__Group__0__Impl
	rule__BodyParameterMember__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BodyParameterMember__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyParameterMemberAccess().getInKeyword_0()); }
	'in'
	{ after(grammarAccess.getBodyParameterMemberAccess().getInKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BodyParameterMember__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BodyParameterMember__Group__1__Impl
	rule__BodyParameterMember__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BodyParameterMember__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyParameterMemberAccess().getMemberNameAssignment_1()); }
	(rule__BodyParameterMember__MemberNameAssignment_1)
	{ after(grammarAccess.getBodyParameterMemberAccess().getMemberNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BodyParameterMember__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BodyParameterMember__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BodyParameterMember__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyParameterMemberAccess().getOwnedRelatedElementAssignment_2()); }
	(rule__BodyParameterMember__OwnedRelatedElementAssignment_2)
	{ after(grammarAccess.getBodyParameterMemberAccess().getOwnedRelatedElementAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SequenceExpression__Group__0__Impl
	rule__SequenceExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSequenceExpressionAccess().getOwnedExpressionParserRuleCall_0()); }
	ruleOwnedExpression
	{ after(grammarAccess.getSequenceExpressionAccess().getOwnedExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SequenceExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSequenceExpressionAccess().getAlternatives_1()); }
	(rule__SequenceExpression__Alternatives_1)?
	{ after(grammarAccess.getSequenceExpressionAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceExpression__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SequenceExpression__Group_1_1__0__Impl
	rule__SequenceExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceExpression__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSequenceExpressionAccess().getOperatorExpressionOperandAction_1_1_0()); }
	()
	{ after(grammarAccess.getSequenceExpressionAccess().getOperatorExpressionOperandAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceExpression__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SequenceExpression__Group_1_1__1__Impl
	rule__SequenceExpression__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceExpression__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSequenceExpressionAccess().getOperatorAssignment_1_1_1()); }
	(rule__SequenceExpression__OperatorAssignment_1_1_1)
	{ after(grammarAccess.getSequenceExpressionAccess().getOperatorAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceExpression__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SequenceExpression__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceExpression__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSequenceExpressionAccess().getOperandAssignment_1_1_2()); }
	(rule__SequenceExpression__OperandAssignment_1_1_2)
	{ after(grammarAccess.getSequenceExpressionAccess().getOperandAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InvocationExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvocationExpression__Group__0__Impl
	rule__InvocationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InvocationExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvocationExpressionAccess().getOwnedRelationshipAssignment_0()); }
	(rule__InvocationExpression__OwnedRelationshipAssignment_0)
	{ after(grammarAccess.getInvocationExpressionAccess().getOwnedRelationshipAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvocationExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvocationExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InvocationExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvocationExpressionAccess().getArgumentListParserRuleCall_1()); }
	ruleArgumentList
	{ after(grammarAccess.getInvocationExpressionAccess().getArgumentListParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArgumentList__Group__0__Impl
	rule__ArgumentList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentListAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getArgumentListAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArgumentList__Group__1__Impl
	rule__ArgumentList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentListAccess().getAlternatives_1()); }
	(rule__ArgumentList__Alternatives_1)?
	{ after(grammarAccess.getArgumentListAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArgumentList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentListAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getArgumentListAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositionalArgumentList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositionalArgumentList__Group__0__Impl
	rule__PositionalArgumentList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositionalArgumentList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositionalArgumentListAccess().getOwnedRelationshipAssignment_0()); }
	(rule__PositionalArgumentList__OwnedRelationshipAssignment_0)
	{ after(grammarAccess.getPositionalArgumentListAccess().getOwnedRelationshipAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositionalArgumentList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositionalArgumentList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositionalArgumentList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositionalArgumentListAccess().getGroup_1()); }
	(rule__PositionalArgumentList__Group_1__0)*
	{ after(grammarAccess.getPositionalArgumentListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositionalArgumentList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositionalArgumentList__Group_1__0__Impl
	rule__PositionalArgumentList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositionalArgumentList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositionalArgumentListAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getPositionalArgumentListAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositionalArgumentList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositionalArgumentList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositionalArgumentList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositionalArgumentListAccess().getOwnedRelationshipAssignment_1_1()); }
	(rule__PositionalArgumentList__OwnedRelationshipAssignment_1_1)
	{ after(grammarAccess.getPositionalArgumentListAccess().getOwnedRelationshipAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NamedArgumentList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NamedArgumentList__Group__0__Impl
	rule__NamedArgumentList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgumentList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamedArgumentListAccess().getOwnedRelationshipAssignment_0()); }
	(rule__NamedArgumentList__OwnedRelationshipAssignment_0)
	{ after(grammarAccess.getNamedArgumentListAccess().getOwnedRelationshipAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgumentList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NamedArgumentList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgumentList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamedArgumentListAccess().getGroup_1()); }
	(rule__NamedArgumentList__Group_1__0)*
	{ after(grammarAccess.getNamedArgumentListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NamedArgumentList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NamedArgumentList__Group_1__0__Impl
	rule__NamedArgumentList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgumentList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamedArgumentListAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getNamedArgumentListAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgumentList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NamedArgumentList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgumentList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamedArgumentListAccess().getOwnedRelationshipAssignment_1_1()); }
	(rule__NamedArgumentList__OwnedRelationshipAssignment_1_1)
	{ after(grammarAccess.getNamedArgumentListAccess().getOwnedRelationshipAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NamedExpressionMember__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NamedExpressionMember__Group__0__Impl
	rule__NamedExpressionMember__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedExpressionMember__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamedExpressionMemberAccess().getMemberNameAssignment_0()); }
	(rule__NamedExpressionMember__MemberNameAssignment_0)
	{ after(grammarAccess.getNamedExpressionMemberAccess().getMemberNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedExpressionMember__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NamedExpressionMember__Group__1__Impl
	rule__NamedExpressionMember__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedExpressionMember__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamedExpressionMemberAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getNamedExpressionMemberAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedExpressionMember__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NamedExpressionMember__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedExpressionMember__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamedExpressionMemberAccess().getOwnedRelatedElementAssignment_2()); }
	(rule__NamedExpressionMember__OwnedRelatedElementAssignment_2)
	{ after(grammarAccess.getNamedExpressionMemberAccess().getOwnedRelatedElementAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NullExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullExpression__Group__0__Impl
	rule__NullExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullExpressionAccess().getNullExpressionAction_0()); }
	()
	{ after(grammarAccess.getNullExpressionAccess().getNullExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullExpressionAccess().getAlternatives_1()); }
	(rule__NullExpression__Alternatives_1)
	{ after(grammarAccess.getNullExpressionAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NullExpression__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullExpression__Group_1_1__0__Impl
	rule__NullExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullExpression__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullExpressionAccess().getLeftParenthesisKeyword_1_1_0()); }
	'('
	{ after(grammarAccess.getNullExpressionAccess().getLeftParenthesisKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullExpression__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullExpression__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullExpressionAccess().getRightParenthesisKeyword_1_1_1()); }
	')'
	{ after(grammarAccess.getNullExpressionAccess().getRightParenthesisKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RealValue__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RealValue__Group_0__0__Impl
	rule__RealValue__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealValue__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealValueAccess().getDECIMAL_VALUETerminalRuleCall_0_0()); }
	(RULE_DECIMAL_VALUE)?
	{ after(grammarAccess.getRealValueAccess().getDECIMAL_VALUETerminalRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealValue__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RealValue__Group_0__1__Impl
	rule__RealValue__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RealValue__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealValueAccess().getFullStopKeyword_0_1()); }
	'.'
	{ after(grammarAccess.getRealValueAccess().getFullStopKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealValue__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RealValue__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealValue__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealValueAccess().getAlternatives_0_2()); }
	(rule__RealValue__Alternatives_0_2)
	{ after(grammarAccess.getRealValueAccess().getAlternatives_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralInfinity__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralInfinity__Group__0__Impl
	rule__LiteralInfinity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralInfinity__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralInfinityAccess().getLiteralInfinityAction_0()); }
	()
	{ after(grammarAccess.getLiteralInfinityAccess().getLiteralInfinityAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralInfinity__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralInfinity__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralInfinity__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralInfinityAccess().getAsteriskKeyword_1()); }
	'*'
	{ after(grammarAccess.getLiteralInfinityAccess().getAsteriskKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Qualification__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Qualification__Group__0__Impl
	rule__Qualification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Qualification__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualificationAccess().getNameParserRuleCall_0()); }
	ruleName
	{ after(grammarAccess.getQualificationAccess().getNameParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Qualification__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Qualification__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Qualification__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualificationAccess().getColonColonKeyword_1()); }
	'::'
	{ after(grammarAccess.getQualificationAccess().getColonColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getQualificationParserRuleCall_0()); }
	(ruleQualification)?
	{ after(grammarAccess.getQualifiedNameAccess().getQualificationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getNameParserRuleCall_1()); }
	ruleName
	{ after(grammarAccess.getQualifiedNameAccess().getNameParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OwnedExpressionMember__OwnedRelatedElementAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOwnedExpressionMemberAccess().getOwnedRelatedElementOwnedExpressionParserRuleCall_0()); }
		ruleOwnedExpression
		{ after(grammarAccess.getOwnedExpressionMemberAccess().getOwnedRelatedElementOwnedExpressionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__OperatorAssignment_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getOperatorConditionalOperatorParserRuleCall_0_1_1_0()); }
		ruleConditionalOperator
		{ after(grammarAccess.getConditionalExpressionAccess().getOperatorConditionalOperatorParserRuleCall_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__OperandAssignment_0_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getOperandOwnedExpressionParserRuleCall_0_1_2_0()); }
		ruleOwnedExpression
		{ after(grammarAccess.getConditionalExpressionAccess().getOperandOwnedExpressionParserRuleCall_0_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__OperandAssignment_0_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getOperandConditionalExpressionParserRuleCall_0_1_4_0()); }
		ruleConditionalExpression
		{ after(grammarAccess.getConditionalExpressionAccess().getOperandConditionalExpressionParserRuleCall_0_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__OperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getOperandNullCoalescingExpressionParserRuleCall_1_2_0()); }
		ruleNullCoalescingExpression
		{ after(grammarAccess.getConditionalExpressionAccess().getOperandNullCoalescingExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__OperatorAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getOperatorConditionalOperatorParserRuleCall_1_3_0()); }
		ruleConditionalOperator
		{ after(grammarAccess.getConditionalExpressionAccess().getOperatorConditionalOperatorParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__OperandAssignment_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getOperandOwnedExpressionParserRuleCall_1_4_0()); }
		ruleOwnedExpression
		{ after(grammarAccess.getConditionalExpressionAccess().getOperandOwnedExpressionParserRuleCall_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__OperandAssignment_1_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getOperandConditionalExpressionParserRuleCall_1_6_0()); }
		ruleConditionalExpression
		{ after(grammarAccess.getConditionalExpressionAccess().getOperandConditionalExpressionParserRuleCall_1_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullCoalescingExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNullCoalescingExpressionAccess().getOperatorNullCoalescingOperatorParserRuleCall_1_1_0()); }
		ruleNullCoalescingOperator
		{ after(grammarAccess.getNullCoalescingExpressionAccess().getOperatorNullCoalescingOperatorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullCoalescingExpression__OperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNullCoalescingExpressionAccess().getOperandImpliesExpressionParserRuleCall_1_2_0()); }
		ruleImpliesExpression
		{ after(grammarAccess.getNullCoalescingExpressionAccess().getOperandImpliesExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImpliesExpressionAccess().getOperatorImpliesOperatorParserRuleCall_1_1_0()); }
		ruleImpliesOperator
		{ after(grammarAccess.getImpliesExpressionAccess().getOperatorImpliesOperatorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__OperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImpliesExpressionAccess().getOperandOrExpressionParserRuleCall_1_2_0()); }
		ruleOrExpression
		{ after(grammarAccess.getImpliesExpressionAccess().getOperandOrExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getOperatorOrOperatorParserRuleCall_1_1_0()); }
		ruleOrOperator
		{ after(grammarAccess.getOrExpressionAccess().getOperatorOrOperatorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getOperandXorExpressionParserRuleCall_1_2_0()); }
		ruleXorExpression
		{ after(grammarAccess.getOrExpressionAccess().getOperandXorExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXorExpressionAccess().getOperatorXorOperatorParserRuleCall_1_1_0()); }
		ruleXorOperator
		{ after(grammarAccess.getXorExpressionAccess().getOperatorXorOperatorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__OperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXorExpressionAccess().getOperandAndExpressionParserRuleCall_1_2_0()); }
		ruleAndExpression
		{ after(grammarAccess.getXorExpressionAccess().getOperandAndExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getOperatorAndOperatorParserRuleCall_1_1_0()); }
		ruleAndOperator
		{ after(grammarAccess.getAndExpressionAccess().getOperatorAndOperatorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getOperandEqualityExpressionParserRuleCall_1_2_0()); }
		ruleEqualityExpression
		{ after(grammarAccess.getAndExpressionAccess().getOperandEqualityExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityExpressionAccess().getOperatorEqualityOperatorParserRuleCall_1_1_0()); }
		ruleEqualityOperator
		{ after(grammarAccess.getEqualityExpressionAccess().getOperatorEqualityOperatorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityExpressionAccess().getOperandClassificationExpressionParserRuleCall_1_2_0()); }
		ruleClassificationExpression
		{ after(grammarAccess.getEqualityExpressionAccess().getOperandClassificationExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationExpression__OperatorAssignment_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassificationExpressionAccess().getOperatorClassificationOperatorParserRuleCall_0_1_1_0()); }
		ruleClassificationOperator
		{ after(grammarAccess.getClassificationExpressionAccess().getOperatorClassificationOperatorParserRuleCall_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationExpression__OwnedRelationshipAssignment_0_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassificationExpressionAccess().getOwnedRelationshipTypeReferenceMemberParserRuleCall_0_1_2_0()); }
		ruleTypeReferenceMember
		{ after(grammarAccess.getClassificationExpressionAccess().getOwnedRelationshipTypeReferenceMemberParserRuleCall_0_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationExpression__OperandAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassificationExpressionAccess().getOperandSelfReferenceExpressionParserRuleCall_1_1_0()); }
		ruleSelfReferenceExpression
		{ after(grammarAccess.getClassificationExpressionAccess().getOperandSelfReferenceExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationExpression__OperatorAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassificationExpressionAccess().getOperatorClassificationOperatorParserRuleCall_1_2_0()); }
		ruleClassificationOperator
		{ after(grammarAccess.getClassificationExpressionAccess().getOperatorClassificationOperatorParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassificationExpression__OwnedRelationshipAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassificationExpressionAccess().getOwnedRelationshipTypeReferenceMemberParserRuleCall_1_3_0()); }
		ruleTypeReferenceMember
		{ after(grammarAccess.getClassificationExpressionAccess().getOwnedRelationshipTypeReferenceMemberParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReferenceMember__OwnedRelatedElementAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeReferenceMemberAccess().getOwnedRelatedElementTypeReferenceParserRuleCall_0()); }
		ruleTypeReference
		{ after(grammarAccess.getTypeReferenceMemberAccess().getOwnedRelatedElementTypeReferenceParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__OwnedRelationshipAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeReferenceAccess().getOwnedRelationshipOwnedFeatureTypingParserRuleCall_0()); }
		ruleOwnedFeatureTyping
		{ after(grammarAccess.getTypeReferenceAccess().getOwnedRelationshipOwnedFeatureTypingParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OwnedFeatureTyping__TypeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOwnedFeatureTypingAccess().getTypeTypeCrossReference_0()); }
		(
			{ before(grammarAccess.getOwnedFeatureTypingAccess().getTypeTypeQualifiedNameParserRuleCall_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getOwnedFeatureTypingAccess().getTypeTypeQualifiedNameParserRuleCall_0_1()); }
		)
		{ after(grammarAccess.getOwnedFeatureTypingAccess().getTypeTypeCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelfReferenceExpression__OwnedRelationshipAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelfReferenceExpressionAccess().getOwnedRelationshipSelfReferenceMemberParserRuleCall_0()); }
		ruleSelfReferenceMember
		{ after(grammarAccess.getSelfReferenceExpressionAccess().getOwnedRelationshipSelfReferenceMemberParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelfReferenceMember__OwnedRelatedElementAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelfReferenceMemberAccess().getOwnedRelatedElementEmptyFeatureParserRuleCall_0()); }
		ruleEmptyFeature
		{ after(grammarAccess.getSelfReferenceMemberAccess().getOwnedRelatedElementEmptyFeatureParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalExpressionAccess().getOperatorRelationalOperatorParserRuleCall_1_1_0()); }
		ruleRelationalOperator
		{ after(grammarAccess.getRelationalExpressionAccess().getOperatorRelationalOperatorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalExpressionAccess().getOperandRangeExpressionParserRuleCall_1_2_0()); }
		ruleRangeExpression
		{ after(grammarAccess.getRelationalExpressionAccess().getOperandRangeExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeExpressionAccess().getOperatorFullStopFullStopKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getRangeExpressionAccess().getOperatorFullStopFullStopKeyword_1_1_0()); }
			'..'
			{ after(grammarAccess.getRangeExpressionAccess().getOperatorFullStopFullStopKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getRangeExpressionAccess().getOperatorFullStopFullStopKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__OperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeExpressionAccess().getOperandAdditiveExpressionParserRuleCall_1_2_0()); }
		ruleAdditiveExpression
		{ after(grammarAccess.getRangeExpressionAccess().getOperandAdditiveExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getOperatorAdditiveOperatorParserRuleCall_1_1_0()); }
		ruleAdditiveOperator
		{ after(grammarAccess.getAdditiveExpressionAccess().getOperatorAdditiveOperatorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getOperandMultiplicativeExpressionParserRuleCall_1_2_0()); }
		ruleMultiplicativeExpression
		{ after(grammarAccess.getAdditiveExpressionAccess().getOperandMultiplicativeExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorMultiplicativeOperatorParserRuleCall_1_1_0()); }
		ruleMultiplicativeOperator
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorMultiplicativeOperatorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperandExponentiationExpressionParserRuleCall_1_2_0()); }
		ruleExponentiationExpression
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperandExponentiationExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentiationExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExponentiationExpressionAccess().getOperatorExponentiationOperatorParserRuleCall_1_1_0()); }
		ruleExponentiationOperator
		{ after(grammarAccess.getExponentiationExpressionAccess().getOperatorExponentiationOperatorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentiationExpression__OperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExponentiationExpressionAccess().getOperandUnitsExpressionParserRuleCall_1_2_0()); }
		ruleUnitsExpression
		{ after(grammarAccess.getExponentiationExpressionAccess().getOperandUnitsExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitsExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnitsExpressionAccess().getOperatorCommercialAtLeftSquareBracketKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getUnitsExpressionAccess().getOperatorCommercialAtLeftSquareBracketKeyword_1_1_0()); }
			'@['
			{ after(grammarAccess.getUnitsExpressionAccess().getOperatorCommercialAtLeftSquareBracketKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getUnitsExpressionAccess().getOperatorCommercialAtLeftSquareBracketKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitsExpression__OperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnitsExpressionAccess().getOperandOwnedExpressionParserRuleCall_1_2_0()); }
		ruleOwnedExpression
		{ after(grammarAccess.getUnitsExpressionAccess().getOperandOwnedExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OperatorAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getOperatorUnaryOperatorParserRuleCall_0_1_0()); }
		ruleUnaryOperator
		{ after(grammarAccess.getUnaryExpressionAccess().getOperatorUnaryOperatorParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OperandAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getOperandExtentExpressionParserRuleCall_0_2_0()); }
		ruleExtentExpression
		{ after(grammarAccess.getUnaryExpressionAccess().getOperandExtentExpressionParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtentExpression__OperatorAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtentExpressionAccess().getOperatorAllKeyword_0_1_0()); }
		(
			{ before(grammarAccess.getExtentExpressionAccess().getOperatorAllKeyword_0_1_0()); }
			'all'
			{ after(grammarAccess.getExtentExpressionAccess().getOperatorAllKeyword_0_1_0()); }
		)
		{ after(grammarAccess.getExtentExpressionAccess().getOperatorAllKeyword_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtentExpression__OwnedRelationshipAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtentExpressionAccess().getOwnedRelationshipTypeReferenceMemberParserRuleCall_0_2_0()); }
		ruleTypeReferenceMember
		{ after(grammarAccess.getExtentExpressionAccess().getOwnedRelationshipTypeReferenceMemberParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__OperatorAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getOperatorLeftSquareBracketKeyword_1_0_1_0()); }
		(
			{ before(grammarAccess.getPrimaryExpressionAccess().getOperatorLeftSquareBracketKeyword_1_0_1_0()); }
			'['
			{ after(grammarAccess.getPrimaryExpressionAccess().getOperatorLeftSquareBracketKeyword_1_0_1_0()); }
		)
		{ after(grammarAccess.getPrimaryExpressionAccess().getOperatorLeftSquareBracketKeyword_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__OperandAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getOperandSequenceExpressionParserRuleCall_1_0_2_0()); }
		ruleSequenceExpression
		{ after(grammarAccess.getPrimaryExpressionAccess().getOperandSequenceExpressionParserRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__OwnedRelationshipAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getOwnedRelationshipOwnedFeatureTypingParserRuleCall_1_1_2_0()); }
		ruleOwnedFeatureTyping
		{ after(grammarAccess.getPrimaryExpressionAccess().getOwnedRelationshipOwnedFeatureTypingParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__OwnedRelationshipAssignment_1_1_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getOwnedRelationshipExpressionBodyMemberParserRuleCall_1_1_3_0_0()); }
		ruleExpressionBodyMember
		{ after(grammarAccess.getPrimaryExpressionAccess().getOwnedRelationshipExpressionBodyMemberParserRuleCall_1_1_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__OwnedRelationshipAssignment_1_1_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getOwnedRelationshipFunctionReferenceMemberParserRuleCall_1_1_3_1_0()); }
		ruleFunctionReferenceMember
		{ after(grammarAccess.getPrimaryExpressionAccess().getOwnedRelationshipFunctionReferenceMemberParserRuleCall_1_1_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__OperandAssignment_1_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getOperandFeatureReferenceExpressionParserRuleCall_1_2_2_0()); }
		ruleFeatureReferenceExpression
		{ after(grammarAccess.getPrimaryExpressionAccess().getOperandFeatureReferenceExpressionParserRuleCall_1_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__OwnedRelationshipAssignment_1_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getOwnedRelationshipExpressionBodyMemberParserRuleCall_1_3_2_0()); }
		ruleExpressionBodyMember
		{ after(grammarAccess.getPrimaryExpressionAccess().getOwnedRelationshipExpressionBodyMemberParserRuleCall_1_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionBodyMember__OwnedRelatedElementAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionBodyMemberAccess().getOwnedRelatedElementExpressionBodyParserRuleCall_0()); }
		ruleExpressionBody
		{ after(grammarAccess.getExpressionBodyMemberAccess().getOwnedRelatedElementExpressionBodyParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionReferenceMember__OwnedRelatedElementAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionReferenceMemberAccess().getOwnedRelatedElementFunctionReferenceParserRuleCall_0()); }
		ruleFunctionReference
		{ after(grammarAccess.getFunctionReferenceMemberAccess().getOwnedRelatedElementFunctionReferenceParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionReference__OwnedRelationshipAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionReferenceAccess().getOwnedRelationshipOwnedFeatureTypingParserRuleCall_0()); }
		ruleOwnedFeatureTyping
		{ after(grammarAccess.getFunctionReferenceAccess().getOwnedRelationshipOwnedFeatureTypingParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionBody__OwnedRelationshipAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionBodyAccess().getOwnedRelationshipBodyParameterMemberParserRuleCall_1_0_0()); }
		ruleBodyParameterMember
		{ after(grammarAccess.getExpressionBodyAccess().getOwnedRelationshipBodyParameterMemberParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionBody__OwnedRelationshipAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionBodyAccess().getOwnedRelationshipResultExpressionMemberParserRuleCall_2_0()); }
		ruleResultExpressionMember
		{ after(grammarAccess.getExpressionBodyAccess().getOwnedRelationshipResultExpressionMemberParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ResultExpressionMember__OwnedRelatedElementAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResultExpressionMemberAccess().getOwnedRelatedElementOwnedExpressionParserRuleCall_0()); }
		ruleOwnedExpression
		{ after(grammarAccess.getResultExpressionMemberAccess().getOwnedRelatedElementOwnedExpressionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BodyParameterMember__MemberNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyParameterMemberAccess().getMemberNameNameParserRuleCall_1_0()); }
		ruleName
		{ after(grammarAccess.getBodyParameterMemberAccess().getMemberNameNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BodyParameterMember__OwnedRelatedElementAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyParameterMemberAccess().getOwnedRelatedElementBodyParameterParserRuleCall_2_0()); }
		ruleBodyParameter
		{ after(grammarAccess.getBodyParameterMemberAccess().getOwnedRelatedElementBodyParameterParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceExpression__OperatorAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSequenceExpressionAccess().getOperatorCommaKeyword_1_1_1_0()); }
		(
			{ before(grammarAccess.getSequenceExpressionAccess().getOperatorCommaKeyword_1_1_1_0()); }
			','
			{ after(grammarAccess.getSequenceExpressionAccess().getOperatorCommaKeyword_1_1_1_0()); }
		)
		{ after(grammarAccess.getSequenceExpressionAccess().getOperatorCommaKeyword_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceExpression__OperandAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSequenceExpressionAccess().getOperandSequenceExpressionParserRuleCall_1_1_2_0()); }
		ruleSequenceExpression
		{ after(grammarAccess.getSequenceExpressionAccess().getOperandSequenceExpressionParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureReferenceExpression__OwnedRelationshipAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureReferenceExpressionAccess().getOwnedRelationshipFeatureReferenceMemberParserRuleCall_0()); }
		ruleFeatureReferenceMember
		{ after(grammarAccess.getFeatureReferenceExpressionAccess().getOwnedRelationshipFeatureReferenceMemberParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureReferenceMember__MemberElementAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureReferenceMemberAccess().getMemberElementFeatureCrossReference_0()); }
		(
			{ before(grammarAccess.getFeatureReferenceMemberAccess().getMemberElementFeatureQualifiedNameParserRuleCall_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getFeatureReferenceMemberAccess().getMemberElementFeatureQualifiedNameParserRuleCall_0_1()); }
		)
		{ after(grammarAccess.getFeatureReferenceMemberAccess().getMemberElementFeatureCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvocationExpression__OwnedRelationshipAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInvocationExpressionAccess().getOwnedRelationshipOwnedFeatureTypingParserRuleCall_0_0()); }
		ruleOwnedFeatureTyping
		{ after(grammarAccess.getInvocationExpressionAccess().getOwnedRelationshipOwnedFeatureTypingParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositionalArgumentList__OwnedRelationshipAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositionalArgumentListAccess().getOwnedRelationshipOwnedExpressionMemberParserRuleCall_0_0()); }
		ruleOwnedExpressionMember
		{ after(grammarAccess.getPositionalArgumentListAccess().getOwnedRelationshipOwnedExpressionMemberParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositionalArgumentList__OwnedRelationshipAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositionalArgumentListAccess().getOwnedRelationshipOwnedExpressionMemberParserRuleCall_1_1_0()); }
		ruleOwnedExpressionMember
		{ after(grammarAccess.getPositionalArgumentListAccess().getOwnedRelationshipOwnedExpressionMemberParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgumentList__OwnedRelationshipAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNamedArgumentListAccess().getOwnedRelationshipNamedExpressionMemberParserRuleCall_0_0()); }
		ruleNamedExpressionMember
		{ after(grammarAccess.getNamedArgumentListAccess().getOwnedRelationshipNamedExpressionMemberParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgumentList__OwnedRelationshipAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNamedArgumentListAccess().getOwnedRelationshipNamedExpressionMemberParserRuleCall_1_1_0()); }
		ruleNamedExpressionMember
		{ after(grammarAccess.getNamedArgumentListAccess().getOwnedRelationshipNamedExpressionMemberParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedExpressionMember__MemberNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNamedExpressionMemberAccess().getMemberNameNameParserRuleCall_0_0()); }
		ruleName
		{ after(grammarAccess.getNamedExpressionMemberAccess().getMemberNameNameParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedExpressionMember__OwnedRelatedElementAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNamedExpressionMemberAccess().getOwnedRelatedElementOwnedExpressionParserRuleCall_2_0()); }
		ruleOwnedExpression
		{ after(grammarAccess.getNamedExpressionMemberAccess().getOwnedRelatedElementOwnedExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralBoolean__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralBooleanAccess().getValueBooleanValueParserRuleCall_0()); }
		ruleBooleanValue
		{ after(grammarAccess.getLiteralBooleanAccess().getValueBooleanValueParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralString__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralStringAccess().getValueSTRING_VALUETerminalRuleCall_0()); }
		RULE_STRING_VALUE
		{ after(grammarAccess.getLiteralStringAccess().getValueSTRING_VALUETerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralInteger__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralIntegerAccess().getValueDECIMAL_VALUETerminalRuleCall_0()); }
		RULE_DECIMAL_VALUE
		{ after(grammarAccess.getLiteralIntegerAccess().getValueDECIMAL_VALUETerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralReal__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralRealAccess().getValueRealValueParserRuleCall_0()); }
		ruleRealValue
		{ after(grammarAccess.getLiteralRealAccess().getValueRealValueParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_DECIMAL_VALUE : '0'..'9' ('0'..'9')*;

RULE_EXP_VALUE : RULE_DECIMAL_VALUE ('e'|'E') ('+'|'-')? RULE_DECIMAL_VALUE;

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_UNRESTRICTED_NAME : '\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'';

RULE_STRING_VALUE : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_REGULAR_COMMENT : '/*' ~('*') ( options {greedy=false;} : . )*'*/';

RULE_DOCUMENTATION_COMMENT : '/**' ( options {greedy=false;} : . )*'*/';

RULE_ML_NOTE : '//*' ( options {greedy=false;} : . )*'*/';

RULE_SL_NOTE : '//' (~(('\n'|'\r')) ~(('\n'|'\r'))*)? ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;
