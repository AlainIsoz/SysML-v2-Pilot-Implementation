//* XPECT_SETUP org.omg.kerml.xpect.tests.expression.KerMLExpressionTest
        ResourceSet {
                ThisFile {}
                File {from ="/library/Base.kerml"}
                File {from ="/library/Links.kerml"}
                File {from ="/library/Occurrences.kerml"}
                File {from ="/library/Objects.kerml"}
                File {from ="/library/Performances.kerml"}
                File {from ="/library/Transfers.kerml"}
                File {from ="/library/ScalarValues.kerml"}
                File {from ="/library/BaseFunctions.kerml"}
                File {from ="/library/DataFunctions.kerml"}
                File {from ="/library/ControlFunctions.kerml"}
        }
        Workspace {
                JavaProject {
                        SrcFolder {
                                ThisFile {}
                                File {from ="/library/Base.kerml"}
                                File {from ="/library/Links.kerml"}
                                File {from ="/library/Occurrences.kerml"}
                 				File {from ="/library/Objects.kerml"}
                				File {from ="/library/Performances.kerml"}
                				File {from ="/library/Transfers.kerml"}
                                File {from ="/library/ScalarValues.kerml"}
                                File {from ="/library/BaseFunctions.kerml"}
                                File {from ="/library/DataFunctions.kerml"}
                				File {from ="/library/ControlFunctions.kerml"}
                        }
                }
        }
END_SETUP
*/

package P {
    import ScalarValues::*;
    
    struct V {
    	feature n : Integer;
    	struct S;
    }
    
    feature v1 : V;
    feature v2 : V;
        
    feature v1_n : Integer = v1.n;
    
    //* XPECT errors ---
        "Must be a valid feature" at "S"
        "Must be a valid feature" at "S"
        --- */
    feature v1_m : Integer = v1.S;
    
    // XPECT errors ---> "Must be a valid feature" at "V"
    feature v2_m : Integer = V;
    
    binding v1.n = v2.n;
    
    behavior B {
    	out feature a : Integer;
    	step b {
    		step c {
    			feature d : Integer;
    		}
    	}
    }
    
    feature b1 : B;
    feature b2 : B;
    
    // Testing deeply nested item flow connection.
    flow b1.a to b2.b.c.d;
}
