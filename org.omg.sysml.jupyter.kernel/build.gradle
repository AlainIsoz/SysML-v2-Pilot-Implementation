plugins {
    id 'java'
    //getting the jupyter kernel form local library
    //this is a temporary workaround until the java 17 compatible version of this plugin is deployed to plugin sites
    //visit settings.gradle for the local repository config
    id 'io.github.spencerpark.jupyter-kernel-installer'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'com.github.jk1.dependency-license-report' version '2.7'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

wrapper {
    gradleVersion = '8.0.0'
    distributionType = Wrapper.DistributionType.ALL
}

repositories {
    mavenCentral()
    flatDir {
        dirs '../org.omg.sysml.interactive/target'
    }
}

dependencies {
    implementation group: 'io.github.spencerpark', name: 'jupyter-jvm-basekernel', version: '2.3.0'
    implementation group: 'org.omg.sysml', name: 'org.omg.sysml.interactive', version: project.version, classifier: 'all'
}

licenseReport {
    configurations = ['compile']
}

jupyter {
    kernelName = 'sysml'
    kernelDisplayName = 'SysML'
    kernelLanguage = 'sysml'
    kernelInterruptMode = 'message'
    kernelExecutable = shadowJar.archivePath
    kernelResources = files('src/main/resources/kernel/', fileTree('../') { include 'sysml.library/**' })

    kernelParameters {
        list('library-path', 'ISYSML_LIBRARY_PATH') {
            separator = PATH_SEPARATOR
            description = '''A file path separator delimited list of library path entries that should be available to the user code. **Important:** no matter what OS, this should use forward slash "/" as the file separator.'''
        }
        string('api-base-path', 'ISYSML_API_BASE_PATH') {
            description = '''The base path for the API that the model is published to using the %publish magic command.'''
        }
        string('graphviz-path', 'ISYSML_GRAPHVIZ_PATH') {
            description = '''The path to the Graphviz dot executable that is used for the %viz magic command.'''
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'org.omg.sysml.jupyter.kernel.ISysML'
    }
}

artifacts {
    archives shadowJar
}

generateKernelJson.dependsOn shadowJar
zipKernel.dependsOn shadowJar
installKernel.dependsOn shadowJar

installKernel{
    kernelInstallPath = commandLineSpecifiedPathOr(userInstallPath)
}


zipKernel {
    from('src/main/resources/installer/') {
        into '/'
    }
    from(generateLicenseReport.outputFolder) {
        into 'dependency-licenses'
    }
}
zipKernel.dependsOn 'generateLicenseReport'