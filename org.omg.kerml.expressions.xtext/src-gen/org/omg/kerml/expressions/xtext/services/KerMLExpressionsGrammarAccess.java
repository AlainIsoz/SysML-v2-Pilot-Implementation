/*
 * generated by Xtext 2.25.0
 */
package org.omg.kerml.expressions.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KerMLExpressionsGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class OwnedExpressionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.OwnedExpressionMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedExpressionParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		///* EXPRESSIONS */
		///* Operator Expressions */
		//OwnedExpressionMember returns SysML::FeatureMembership :
		//    ownedRelatedElement += OwnedExpression // ownedMemberFeature = OwnedExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += OwnedExpression
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//OwnedExpression
		public RuleCall getOwnedRelatedElementOwnedExpressionParserRuleCall_0() { return cOwnedRelatedElementOwnedExpressionParserRuleCall_0; }
	}
	public class OwnedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.OwnedExpression");
		private final RuleCall cConditionalExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OwnedExpression returns SysML::Expression :
		//     ConditionalExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionalExpression
		public RuleCall getConditionalExpressionParserRuleCall() { return cConditionalExpressionParserRuleCall; }
	}
	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ConditionalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cNullCoalescingExpressionParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cOperatorConditionalOperatorParserRuleCall_0_1_1_0 = (RuleCall)cOperatorAssignment_0_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cOperandOwnedExpressionParserRuleCall_0_1_2_0 = (RuleCall)cOperandAssignment_0_1_2.eContents().get(0);
		private final Keyword cColonKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Assignment cOperandAssignment_0_1_4 = (Assignment)cGroup_0_1.eContents().get(4);
		private final RuleCall cOperandConditionalExpressionParserRuleCall_0_1_4_0 = (RuleCall)cOperandAssignment_0_1_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOperatorExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cIfKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandNullCoalescingExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		private final Assignment cOperatorAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOperatorConditionalOperatorParserRuleCall_1_3_0 = (RuleCall)cOperatorAssignment_1_3.eContents().get(0);
		private final Assignment cOperandAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cOperandOwnedExpressionParserRuleCall_1_4_0 = (RuleCall)cOperandAssignment_1_4.eContents().get(0);
		private final Keyword cElseKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cOperandAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cOperandConditionalExpressionParserRuleCall_1_6_0 = (RuleCall)cOperandAssignment_1_6.eContents().get(0);
		
		//// Conditional Test Expressions
		//ConditionalExpression returns SysML::Expression :
		//      NullCoalescingExpression ( {SysML::OperatorExpression.operand += current}
		//          operator = ConditionalOperator operand += OwnedExpression ':' operand += ConditionalExpression
		//      )?
		//    | {SysML::OperatorExpression} 'if' operand += NullCoalescingExpression
		//          operator = ConditionalOperator operand += OwnedExpression 'else' operand += ConditionalExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  NullCoalescingExpression ( {SysML::OperatorExpression.operand += current}
		//      operator = ConditionalOperator operand += OwnedExpression ':' operand += ConditionalExpression
		//  )?
		//| {SysML::OperatorExpression} 'if' operand += NullCoalescingExpression
		//      operator = ConditionalOperator operand += OwnedExpression 'else' operand += ConditionalExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NullCoalescingExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = ConditionalOperator operand += OwnedExpression ':' operand += ConditionalExpression
		//)?
		public Group getGroup_0() { return cGroup_0; }
		
		//NullCoalescingExpression
		public RuleCall getNullCoalescingExpressionParserRuleCall_0_0() { return cNullCoalescingExpressionParserRuleCall_0_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//         operator = ConditionalOperator operand += OwnedExpression ':' operand += ConditionalExpression
		//     )?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_0_1_0() { return cOperatorExpressionOperandAction_0_1_0; }
		
		//operator = ConditionalOperator
		public Assignment getOperatorAssignment_0_1_1() { return cOperatorAssignment_0_1_1; }
		
		//ConditionalOperator
		public RuleCall getOperatorConditionalOperatorParserRuleCall_0_1_1_0() { return cOperatorConditionalOperatorParserRuleCall_0_1_1_0; }
		
		//operand += OwnedExpression
		public Assignment getOperandAssignment_0_1_2() { return cOperandAssignment_0_1_2; }
		
		//OwnedExpression
		public RuleCall getOperandOwnedExpressionParserRuleCall_0_1_2_0() { return cOperandOwnedExpressionParserRuleCall_0_1_2_0; }
		
		//':'
		public Keyword getColonKeyword_0_1_3() { return cColonKeyword_0_1_3; }
		
		//operand += ConditionalExpression
		public Assignment getOperandAssignment_0_1_4() { return cOperandAssignment_0_1_4; }
		
		//ConditionalExpression
		public RuleCall getOperandConditionalExpressionParserRuleCall_0_1_4_0() { return cOperandConditionalExpressionParserRuleCall_0_1_4_0; }
		
		//{SysML::OperatorExpression} 'if' operand += NullCoalescingExpression
		//         operator = ConditionalOperator operand += OwnedExpression 'else' operand += ConditionalExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression}
		public Action getOperatorExpressionAction_1_0() { return cOperatorExpressionAction_1_0; }
		
		//'if'
		public Keyword getIfKeyword_1_1() { return cIfKeyword_1_1; }
		
		//operand += NullCoalescingExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//NullCoalescingExpression
		public RuleCall getOperandNullCoalescingExpressionParserRuleCall_1_2_0() { return cOperandNullCoalescingExpressionParserRuleCall_1_2_0; }
		
		//operator = ConditionalOperator
		public Assignment getOperatorAssignment_1_3() { return cOperatorAssignment_1_3; }
		
		//ConditionalOperator
		public RuleCall getOperatorConditionalOperatorParserRuleCall_1_3_0() { return cOperatorConditionalOperatorParserRuleCall_1_3_0; }
		
		//operand += OwnedExpression
		public Assignment getOperandAssignment_1_4() { return cOperandAssignment_1_4; }
		
		//OwnedExpression
		public RuleCall getOperandOwnedExpressionParserRuleCall_1_4_0() { return cOperandOwnedExpressionParserRuleCall_1_4_0; }
		
		//'else'
		public Keyword getElseKeyword_1_5() { return cElseKeyword_1_5; }
		
		//operand += ConditionalExpression
		public Assignment getOperandAssignment_1_6() { return cOperandAssignment_1_6; }
		
		//ConditionalExpression
		public RuleCall getOperandConditionalExpressionParserRuleCall_1_6_0() { return cOperandConditionalExpressionParserRuleCall_1_6_0; }
	}
	public class ConditionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ConditionalOperator");
		private final Keyword cQuestionMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//ConditionalOperator :
		//    '?'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'?'
		public Keyword getQuestionMarkKeyword() { return cQuestionMarkKeyword; }
	}
	public class NullCoalescingExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.NullCoalescingExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImpliesExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorNullCoalescingOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandImpliesExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//// Null Coalescing Expressions
		//NullCoalescingExpression returns SysML::Expression :
		//    ImpliesExpression ( {SysML::OperatorExpression.operand += current}
		//        operator = NullCoalescingOperator operand += ImpliesExpression )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ImpliesExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = NullCoalescingOperator operand += ImpliesExpression )*
		public Group getGroup() { return cGroup; }
		
		//ImpliesExpression
		public RuleCall getImpliesExpressionParserRuleCall_0() { return cImpliesExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = NullCoalescingOperator operand += ImpliesExpression )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//operator = NullCoalescingOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//NullCoalescingOperator
		public RuleCall getOperatorNullCoalescingOperatorParserRuleCall_1_1_0() { return cOperatorNullCoalescingOperatorParserRuleCall_1_1_0; }
		
		//operand += ImpliesExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//ImpliesExpression
		public RuleCall getOperandImpliesExpressionParserRuleCall_1_2_0() { return cOperandImpliesExpressionParserRuleCall_1_2_0; }
	}
	public class NullCoalescingOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.NullCoalescingOperator");
		private final Keyword cQuestionMarkQuestionMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//NullCoalescingOperator :
		//    '??'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'??'
		public Keyword getQuestionMarkQuestionMarkKeyword() { return cQuestionMarkQuestionMarkKeyword; }
	}
	public class ImpliesExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ImpliesExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorImpliesOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandOrExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//// Logical Expressions
		//ImpliesExpression returns SysML::Expression :
		//    OrExpression ( {SysML::OperatorExpression.operand += current}
		//        operator = ImpliesOperator operand += OrExpression )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = ImpliesOperator operand += OrExpression )*
		public Group getGroup() { return cGroup; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_0() { return cOrExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = ImpliesOperator operand += OrExpression )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//operator = ImpliesOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ImpliesOperator
		public RuleCall getOperatorImpliesOperatorParserRuleCall_1_1_0() { return cOperatorImpliesOperatorParserRuleCall_1_1_0; }
		
		//operand += OrExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//OrExpression
		public RuleCall getOperandOrExpressionParserRuleCall_1_2_0() { return cOperandOrExpressionParserRuleCall_1_2_0; }
	}
	public class ImpliesOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ImpliesOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cImpliesKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ImpliesOperator :
		//    '=>' | 'implies'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'=>' | 'implies'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_0() { return cEqualsSignGreaterThanSignKeyword_0; }
		
		//'implies'
		public Keyword getImpliesKeyword_1() { return cImpliesKeyword_1; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorOrOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandXorExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//OrExpression returns SysML::Expression :
		//    XorExpression ( {SysML::OperatorExpression.operand += current}
		//        operator = OrOperator operand += XorExpression )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//XorExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = OrOperator operand += XorExpression )*
		public Group getGroup() { return cGroup; }
		
		//XorExpression
		public RuleCall getXorExpressionParserRuleCall_0() { return cXorExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = OrOperator operand += XorExpression )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//operator = OrOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//OrOperator
		public RuleCall getOperatorOrOperatorParserRuleCall_1_1_0() { return cOperatorOrOperatorParserRuleCall_1_1_0; }
		
		//operand += XorExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//XorExpression
		public RuleCall getOperandXorExpressionParserRuleCall_1_2_0() { return cOperandXorExpressionParserRuleCall_1_2_0; }
	}
	public class OrOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.OrOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOrKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OrOperator :
		//    '|' | '||' | 'or'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'|' | '||' | 'or'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1() { return cVerticalLineVerticalLineKeyword_1; }
		
		//'or'
		public Keyword getOrKeyword_2() { return cOrKeyword_2; }
	}
	public class XorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.XorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorXorOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandAndExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//XorExpression returns SysML::Expression :
		//    AndExpression ( {SysML::OperatorExpression.operand += current}
		//        operator = XorOperator operand += AndExpression )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = XorOperator operand += AndExpression )*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = XorOperator operand += AndExpression )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//operator = XorOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//XorOperator
		public RuleCall getOperatorXorOperatorParserRuleCall_1_1_0() { return cOperatorXorOperatorParserRuleCall_1_1_0; }
		
		//operand += AndExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//AndExpression
		public RuleCall getOperandAndExpressionParserRuleCall_1_2_0() { return cOperandAndExpressionParserRuleCall_1_2_0; }
	}
	public class XorOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.XorOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCircumflexAccentCircumflexAccentKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cXorKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//XorOperator :
		//    '^^' | 'xor'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'^^' | 'xor'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'^^'
		public Keyword getCircumflexAccentCircumflexAccentKeyword_0() { return cCircumflexAccentCircumflexAccentKeyword_0; }
		
		//'xor'
		public Keyword getXorKeyword_1() { return cXorKeyword_1; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAndOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//AndExpression returns SysML::Expression :
		//    EqualityExpression ( {SysML::OperatorExpression.operand += current}
		//        operator = AndOperator operand += EqualityExpression )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = AndOperator operand += EqualityExpression )*
		public Group getGroup() { return cGroup; }
		
		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = AndOperator operand += EqualityExpression )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//operator = AndOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AndOperator
		public RuleCall getOperatorAndOperatorParserRuleCall_1_1_0() { return cOperatorAndOperatorParserRuleCall_1_1_0; }
		
		//operand += EqualityExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//EqualityExpression
		public RuleCall getOperandEqualityExpressionParserRuleCall_1_2_0() { return cOperandEqualityExpressionParserRuleCall_1_2_0; }
	}
	public class AndOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.AndOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAndKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//AndOperator :
		//    '&' | '&&' | 'and'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'&' | '&&' | 'and'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'&'
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1() { return cAmpersandAmpersandKeyword_1; }
		
		//'and'
		public Keyword getAndKeyword_2() { return cAndKeyword_2; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassificationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEqualityOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandClassificationExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//// Equality Expressions
		//EqualityExpression returns SysML::Expression :
		//    ClassificationExpression ( {SysML::OperatorExpression.operand += current}
		//        operator = EqualityOperator operand += ClassificationExpression )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ClassificationExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = EqualityOperator operand += ClassificationExpression )*
		public Group getGroup() { return cGroup; }
		
		//ClassificationExpression
		public RuleCall getClassificationExpressionParserRuleCall_0() { return cClassificationExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = EqualityOperator operand += ClassificationExpression )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//operator = EqualityOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//EqualityOperator
		public RuleCall getOperatorEqualityOperatorParserRuleCall_1_1_0() { return cOperatorEqualityOperatorParserRuleCall_1_1_0; }
		
		//operand += ClassificationExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//ClassificationExpression
		public RuleCall getOperandClassificationExpressionParserRuleCall_1_2_0() { return cOperandClassificationExpressionParserRuleCall_1_2_0; }
	}
	public class EqualityOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.EqualityOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EqualityOperator :
		//    '==' | '!='
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'==' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}
	public class ClassificationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ClassificationExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cRelationalExpressionParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cOperatorClassificationOperatorParserRuleCall_0_1_1_0 = (RuleCall)cOperatorAssignment_0_1_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cOwnedRelationshipTypeReferenceMemberParserRuleCall_0_1_2_0 = (RuleCall)cOwnedRelationshipAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOperatorExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandSelfReferenceExpressionParserRuleCall_1_1_0 = (RuleCall)cOperandAssignment_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperatorClassificationOperatorParserRuleCall_1_2_0 = (RuleCall)cOperatorAssignment_1_2.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOwnedRelationshipTypeReferenceMemberParserRuleCall_1_3_0 = (RuleCall)cOwnedRelationshipAssignment_1_3.eContents().get(0);
		
		//// Classification Expressions
		//ClassificationExpression returns SysML::Expression :
		//      RelationalExpression ( {SysML::OperatorExpression.operand += current}
		//        operator = ClassificationOperator ownedRelationship += TypeReferenceMember )?
		//    | {SysML::OperatorExpression} operand += SelfReferenceExpression
		//        operator = ClassificationOperator ownedRelationship += TypeReferenceMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  RelationalExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = ClassificationOperator ownedRelationship += TypeReferenceMember )?
		//| {SysML::OperatorExpression} operand += SelfReferenceExpression
		//    operator = ClassificationOperator ownedRelationship += TypeReferenceMember
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RelationalExpression ( {SysML::OperatorExpression.operand += current}
		//  operator = ClassificationOperator ownedRelationship += TypeReferenceMember )?
		public Group getGroup_0() { return cGroup_0; }
		
		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0_0() { return cRelationalExpressionParserRuleCall_0_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = ClassificationOperator ownedRelationship += TypeReferenceMember )?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_0_1_0() { return cOperatorExpressionOperandAction_0_1_0; }
		
		//operator = ClassificationOperator
		public Assignment getOperatorAssignment_0_1_1() { return cOperatorAssignment_0_1_1; }
		
		//ClassificationOperator
		public RuleCall getOperatorClassificationOperatorParserRuleCall_0_1_1_0() { return cOperatorClassificationOperatorParserRuleCall_0_1_1_0; }
		
		//ownedRelationship += TypeReferenceMember
		public Assignment getOwnedRelationshipAssignment_0_1_2() { return cOwnedRelationshipAssignment_0_1_2; }
		
		//TypeReferenceMember
		public RuleCall getOwnedRelationshipTypeReferenceMemberParserRuleCall_0_1_2_0() { return cOwnedRelationshipTypeReferenceMemberParserRuleCall_0_1_2_0; }
		
		//{SysML::OperatorExpression} operand += SelfReferenceExpression
		//       operator = ClassificationOperator ownedRelationship += TypeReferenceMember
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression}
		public Action getOperatorExpressionAction_1_0() { return cOperatorExpressionAction_1_0; }
		
		//operand += SelfReferenceExpression
		public Assignment getOperandAssignment_1_1() { return cOperandAssignment_1_1; }
		
		//SelfReferenceExpression
		public RuleCall getOperandSelfReferenceExpressionParserRuleCall_1_1_0() { return cOperandSelfReferenceExpressionParserRuleCall_1_1_0; }
		
		//operator = ClassificationOperator
		public Assignment getOperatorAssignment_1_2() { return cOperatorAssignment_1_2; }
		
		//ClassificationOperator
		public RuleCall getOperatorClassificationOperatorParserRuleCall_1_2_0() { return cOperatorClassificationOperatorParserRuleCall_1_2_0; }
		
		//ownedRelationship += TypeReferenceMember
		public Assignment getOwnedRelationshipAssignment_1_3() { return cOwnedRelationshipAssignment_1_3; }
		
		//TypeReferenceMember
		public RuleCall getOwnedRelationshipTypeReferenceMemberParserRuleCall_1_3_0() { return cOwnedRelationshipTypeReferenceMemberParserRuleCall_1_3_0; }
	}
	public class ClassificationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ClassificationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHastypeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIstypeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCommercialAtKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAsKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//ClassificationOperator :
		//    'hastype' | 'istype' | '@' | 'as'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'hastype' | 'istype' | '@' | 'as'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'hastype'
		public Keyword getHastypeKeyword_0() { return cHastypeKeyword_0; }
		
		//'istype'
		public Keyword getIstypeKeyword_1() { return cIstypeKeyword_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_2() { return cCommercialAtKeyword_2; }
		
		//'as'
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }
	}
	public class TypeReferenceMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.TypeReferenceMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementTypeReferenceParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//TypeReferenceMember returns SysML::FeatureMembership :
		//    ownedRelatedElement += TypeReference
		//    // ownedMemberFeature = TypeReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += TypeReference
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//TypeReference
		public RuleCall getOwnedRelatedElementTypeReferenceParserRuleCall_0() { return cOwnedRelatedElementTypeReferenceParserRuleCall_0; }
	}
	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.TypeReference");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedFeatureTypingParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		//TypeReference returns SysML::Feature :
		//    ownedRelationship += OwnedFeatureTyping
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += OwnedFeatureTyping
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//OwnedFeatureTyping
		public RuleCall getOwnedRelationshipOwnedFeatureTypingParserRuleCall_0() { return cOwnedRelationshipOwnedFeatureTypingParserRuleCall_0; }
	}
	public class OwnedFeatureTypingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.OwnedFeatureTyping");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_0_1 = (RuleCall)cTypeTypeCrossReference_0.eContents().get(1);
		
		//OwnedFeatureTyping returns SysML::FeatureTyping :
		//    type = [SysML::Type | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = [SysML::Type | QualifiedName]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[SysML::Type | QualifiedName]
		public CrossReference getTypeTypeCrossReference_0() { return cTypeTypeCrossReference_0; }
		
		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_0_1() { return cTypeTypeQualifiedNameParserRuleCall_0_1; }
	}
	public class SelfReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.SelfReferenceExpression");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipSelfReferenceMemberParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		//SelfReferenceExpression returns SysML::FeatureReferenceExpression :
		//    ownedRelationship += SelfReferenceMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += SelfReferenceMember
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//SelfReferenceMember
		public RuleCall getOwnedRelationshipSelfReferenceMemberParserRuleCall_0() { return cOwnedRelationshipSelfReferenceMemberParserRuleCall_0; }
	}
	public class SelfReferenceMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.SelfReferenceMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementEmptyFeatureParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//SelfReferenceMember returns SysML::ReturnParameterMembership :
		//    ownedRelatedElement += EmptyFeature // ownedMemberFeature = EmptyFeature
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += EmptyFeature
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//EmptyFeature
		public RuleCall getOwnedRelatedElementEmptyFeatureParserRuleCall_0() { return cOwnedRelatedElementEmptyFeatureParserRuleCall_0; }
	}
	public class EmptyFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.EmptyFeature");
		private final Action cFeatureAction = (Action)rule.eContents().get(1);
		
		//EmptyFeature returns SysML::Feature :
		//    {SysML::Feature}
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::Feature}
		public Action getFeatureAction() { return cFeatureAction; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRangeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorRelationalOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandRangeExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//// Relational Expressions
		//RelationalExpression returns SysML::Expression :
		//    RangeExpression ( {SysML::OperatorExpression.operand += current}
		//        operator = RelationalOperator operand += RangeExpression )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RangeExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = RelationalOperator operand += RangeExpression )*
		public Group getGroup() { return cGroup; }
		
		//RangeExpression
		public RuleCall getRangeExpressionParserRuleCall_0() { return cRangeExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = RelationalOperator operand += RangeExpression )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//operator = RelationalOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorParserRuleCall_1_1_0() { return cOperatorRelationalOperatorParserRuleCall_1_1_0; }
		
		//operand += RangeExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//RangeExpression
		public RuleCall getOperandRangeExpressionParserRuleCall_1_2_0() { return cOperandRangeExpressionParserRuleCall_1_2_0; }
	}
	public class RelationalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//RelationalOperator :
		//    '<' | '>' | '<=' | '>='
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'<' | '>' | '<=' | '>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }
	}
	public class RangeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.RangeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorFullStopFullStopKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//// Range Expressions
		//RangeExpression returns SysML::Expression :
		//    AdditiveExpression ( {SysML::OperatorExpression.operand += current}
		//        operator = '..' operand += AdditiveExpression )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditiveExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = '..' operand += AdditiveExpression )?
		public Group getGroup() { return cGroup; }
		
		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = '..' operand += AdditiveExpression )?
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//operator = '..'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'..'
		public Keyword getOperatorFullStopFullStopKeyword_1_1_0() { return cOperatorFullStopFullStopKeyword_1_1_0; }
		
		//operand += AdditiveExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//AdditiveExpression
		public RuleCall getOperandAdditiveExpressionParserRuleCall_1_2_0() { return cOperandAdditiveExpressionParserRuleCall_1_2_0; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAdditiveOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//// Arithmetic Expressions
		//AdditiveExpression returns SysML::Expression :
		//    MultiplicativeExpression ( {SysML::OperatorExpression.operand += current}
		//        operator = AdditiveOperator operand += MultiplicativeExpression )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicativeExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = AdditiveOperator operand += MultiplicativeExpression )*
		public Group getGroup() { return cGroup; }
		
		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = AdditiveOperator operand += MultiplicativeExpression )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//operator = AdditiveOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AdditiveOperator
		public RuleCall getOperatorAdditiveOperatorParserRuleCall_1_1_0() { return cOperatorAdditiveOperatorParserRuleCall_1_1_0; }
		
		//operand += MultiplicativeExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//MultiplicativeExpression
		public RuleCall getOperandMultiplicativeExpressionParserRuleCall_1_2_0() { return cOperandMultiplicativeExpressionParserRuleCall_1_2_0; }
	}
	public class AdditiveOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AdditiveOperator :
		//    '+' | '-'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExponentiationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorMultiplicativeOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandExponentiationExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression returns SysML::Expression :
		//    ExponentiationExpression ( {SysML::OperatorExpression.operand += current}
		//        operator = MultiplicativeOperator operand += ExponentiationExpression )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExponentiationExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = MultiplicativeOperator operand += ExponentiationExpression )*
		public Group getGroup() { return cGroup; }
		
		//ExponentiationExpression
		public RuleCall getExponentiationExpressionParserRuleCall_0() { return cExponentiationExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = MultiplicativeOperator operand += ExponentiationExpression )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//operator = MultiplicativeOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//MultiplicativeOperator
		public RuleCall getOperatorMultiplicativeOperatorParserRuleCall_1_1_0() { return cOperatorMultiplicativeOperatorParserRuleCall_1_1_0; }
		
		//operand += ExponentiationExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//ExponentiationExpression
		public RuleCall getOperandExponentiationExpressionParserRuleCall_1_2_0() { return cOperandExponentiationExpressionParserRuleCall_1_2_0; }
	}
	public class MultiplicativeOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.MultiplicativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//MultiplicativeOperator :
		//    '*' | '/' | '%'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '/' | '%'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}
	public class ExponentiationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ExponentiationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorExponentiationOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandUnaryExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//ExponentiationExpression returns SysML::Expression :
		//    UnaryExpression ( {SysML::OperatorExpression.operand += current}
		//        operator = ExponentiationOperator operand += UnaryExpression )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression ( {SysML::OperatorExpression.operand += current}
		//    operator = ExponentiationOperator operand += UnaryExpression )*
		public Group getGroup() { return cGroup; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//       operator = ExponentiationOperator operand += UnaryExpression )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0() { return cOperatorExpressionOperandAction_1_0; }
		
		//operator = ExponentiationOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ExponentiationOperator
		public RuleCall getOperatorExponentiationOperatorParserRuleCall_1_1_0() { return cOperatorExponentiationOperatorParserRuleCall_1_1_0; }
		
		//operand += UnaryExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//UnaryExpression
		public RuleCall getOperandUnaryExpressionParserRuleCall_1_2_0() { return cOperandUnaryExpressionParserRuleCall_1_2_0; }
	}
	public class ExponentiationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ExponentiationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ExponentiationOperator :
		//    '**' | '^'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'**' | '^'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'**'
		public Keyword getAsteriskAsteriskKeyword_0() { return cAsteriskAsteriskKeyword_0; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1() { return cCircumflexAccentKeyword_1; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorUnaryOperatorParserRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandExtentExpressionParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cExtentExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Unary Expressions
		//UnaryExpression returns SysML::Expression:
		//      {SysML::OperatorExpression} operator = UnaryOperator operand += ExtentExpression
		//    | ExtentExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  {SysML::OperatorExpression} operator = UnaryOperator operand += ExtentExpression
		//| ExtentExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SysML::OperatorExpression} operator = UnaryOperator operand += ExtentExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//{SysML::OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//operator = UnaryOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//UnaryOperator
		public RuleCall getOperatorUnaryOperatorParserRuleCall_0_1_0() { return cOperatorUnaryOperatorParserRuleCall_0_1_0; }
		
		//operand += ExtentExpression
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }
		
		//ExtentExpression
		public RuleCall getOperandExtentExpressionParserRuleCall_0_2_0() { return cOperandExtentExpressionParserRuleCall_0_2_0; }
		
		//ExtentExpression
		public RuleCall getExtentExpressionParserRuleCall_1() { return cExtentExpressionParserRuleCall_1; }
	}
	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTildeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cNotKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//UnaryOperator :
		//    '+' | '-' | '!' | '~' | 'not'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '!' | '~' | 'not'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
		
		//'~'
		public Keyword getTildeKeyword_3() { return cTildeKeyword_3; }
		
		//'not'
		public Keyword getNotKeyword_4() { return cNotKeyword_4; }
	}
	public class ExtentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ExtentExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOperatorAllKeyword_0_1_0 = (Keyword)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOwnedRelationshipTypeReferenceMemberParserRuleCall_0_2_0 = (RuleCall)cOwnedRelationshipAssignment_0_2.eContents().get(0);
		private final RuleCall cPrimaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Extent Expressions
		//ExtentExpression returns SysML::Expression :
		//      {SysML::OperatorExpression} operator = 'all' ownedRelationship += TypeReferenceMember
		//    | PrimaryExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  {SysML::OperatorExpression} operator = 'all' ownedRelationship += TypeReferenceMember
		//| PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SysML::OperatorExpression} operator = 'all' ownedRelationship += TypeReferenceMember
		public Group getGroup_0() { return cGroup_0; }
		
		//{SysML::OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//operator = 'all'
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//'all'
		public Keyword getOperatorAllKeyword_0_1_0() { return cOperatorAllKeyword_0_1_0; }
		
		//ownedRelationship += TypeReferenceMember
		public Assignment getOwnedRelationshipAssignment_0_2() { return cOwnedRelationshipAssignment_0_2; }
		
		//TypeReferenceMember
		public RuleCall getOwnedRelationshipTypeReferenceMemberParserRuleCall_0_2_0() { return cOwnedRelationshipTypeReferenceMemberParserRuleCall_0_2_0; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_1() { return cPrimaryExpressionParserRuleCall_1; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.PrimaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBaseExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cOperatorExpressionOperandAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cOperatorLeftSquareBracketKeyword_1_0_1_0 = (Keyword)cOperatorAssignment_1_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cOperandSequenceExpressionParserRuleCall_1_0_2_0 = (RuleCall)cOperandAssignment_1_0_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cOwnedRelationshipOwnedFeatureTypingParserRuleCall_1_1_2_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_1_3 = (Alternatives)cGroup_1_1.eContents().get(3);
		private final Assignment cOwnedRelationshipAssignment_1_1_3_0 = (Assignment)cAlternatives_1_1_3.eContents().get(0);
		private final RuleCall cOwnedRelationshipExpressionBodyMemberParserRuleCall_1_1_3_0_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_3_0.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1_3_1 = (Assignment)cAlternatives_1_1_3.eContents().get(1);
		private final RuleCall cOwnedRelationshipFunctionReferenceMemberParserRuleCall_1_1_3_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1_3_1.eContents().get(0);
		private final RuleCall cArgumentListParserRuleCall_1_1_3_2 = (RuleCall)cAlternatives_1_1_3.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cPathStepExpressionOperandAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cFullStopKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cOperandAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cOperandFeatureReferenceExpressionParserRuleCall_1_2_2_0 = (RuleCall)cOperandAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cPathSelectExpressionOperandAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cFullStopKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cOwnedRelationshipExpressionBodyMemberParserRuleCall_1_3_2_0 = (RuleCall)cOwnedRelationshipAssignment_1_3_2.eContents().get(0);
		
		///* Primary Expressions */
		//PrimaryExpression returns SysML::Expression :
		//    BaseExpression
		//    ( {SysML::OperatorExpression.operand += current}
		//      operator = '[' operand += SequenceExpression ']'
		//    | {SysML::OperatorExpression.operand += current} '->'
		//      ownedRelationship += OwnedFeatureTyping
		//      ( ownedRelationship += ExpressionBodyMember
		//      | ownedRelationship += FunctionReferenceMember
		//      | ArgumentList
		//      )
		//    | {SysML::PathStepExpression.operand += current} '.'
		//      operand += FeatureReferenceExpression
		//    | {SysML::PathSelectExpression.operand += current} '.'
		//      ownedRelationship += ExpressionBodyMember
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BaseExpression
		//( {SysML::OperatorExpression.operand += current}
		//  operator = '[' operand += SequenceExpression ']'
		//| {SysML::OperatorExpression.operand += current} '->'
		//  ownedRelationship += OwnedFeatureTyping
		//  ( ownedRelationship += ExpressionBodyMember
		//  | ownedRelationship += FunctionReferenceMember
		//  | ArgumentList
		//  )
		//| {SysML::PathStepExpression.operand += current} '.'
		//  operand += FeatureReferenceExpression
		//| {SysML::PathSelectExpression.operand += current} '.'
		//  ownedRelationship += ExpressionBodyMember
		//)*
		public Group getGroup() { return cGroup; }
		
		//BaseExpression
		public RuleCall getBaseExpressionParserRuleCall_0() { return cBaseExpressionParserRuleCall_0; }
		
		//( {SysML::OperatorExpression.operand += current}
		//  operator = '[' operand += SequenceExpression ']'
		//| {SysML::OperatorExpression.operand += current} '->'
		//  ownedRelationship += OwnedFeatureTyping
		//  ( ownedRelationship += ExpressionBodyMember
		//  | ownedRelationship += FunctionReferenceMember
		//  | ArgumentList
		//  )
		//| {SysML::PathStepExpression.operand += current} '.'
		//  operand += FeatureReferenceExpression
		//| {SysML::PathSelectExpression.operand += current} '.'
		//  ownedRelationship += ExpressionBodyMember
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{SysML::OperatorExpression.operand += current}
		//     operator = '[' operand += SequenceExpression ']'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_0_0() { return cOperatorExpressionOperandAction_1_0_0; }
		
		//operator = '['
		public Assignment getOperatorAssignment_1_0_1() { return cOperatorAssignment_1_0_1; }
		
		//'['
		public Keyword getOperatorLeftSquareBracketKeyword_1_0_1_0() { return cOperatorLeftSquareBracketKeyword_1_0_1_0; }
		
		//operand += SequenceExpression
		public Assignment getOperandAssignment_1_0_2() { return cOperandAssignment_1_0_2; }
		
		//SequenceExpression
		public RuleCall getOperandSequenceExpressionParserRuleCall_1_0_2_0() { return cOperandSequenceExpressionParserRuleCall_1_0_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_0_3() { return cRightSquareBracketKeyword_1_0_3; }
		
		//{SysML::OperatorExpression.operand += current} '->'
		//     ownedRelationship += OwnedFeatureTyping
		//     ( ownedRelationship += ExpressionBodyMember
		//     | ownedRelationship += FunctionReferenceMember
		//     | ArgumentList
		//     )
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_1_0() { return cOperatorExpressionOperandAction_1_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1_1() { return cHyphenMinusGreaterThanSignKeyword_1_1_1; }
		
		//ownedRelationship += OwnedFeatureTyping
		public Assignment getOwnedRelationshipAssignment_1_1_2() { return cOwnedRelationshipAssignment_1_1_2; }
		
		//OwnedFeatureTyping
		public RuleCall getOwnedRelationshipOwnedFeatureTypingParserRuleCall_1_1_2_0() { return cOwnedRelationshipOwnedFeatureTypingParserRuleCall_1_1_2_0; }
		
		//( ownedRelationship += ExpressionBodyMember
		//| ownedRelationship += FunctionReferenceMember
		//| ArgumentList
		//)
		public Alternatives getAlternatives_1_1_3() { return cAlternatives_1_1_3; }
		
		//ownedRelationship += ExpressionBodyMember
		public Assignment getOwnedRelationshipAssignment_1_1_3_0() { return cOwnedRelationshipAssignment_1_1_3_0; }
		
		//ExpressionBodyMember
		public RuleCall getOwnedRelationshipExpressionBodyMemberParserRuleCall_1_1_3_0_0() { return cOwnedRelationshipExpressionBodyMemberParserRuleCall_1_1_3_0_0; }
		
		//ownedRelationship += FunctionReferenceMember
		public Assignment getOwnedRelationshipAssignment_1_1_3_1() { return cOwnedRelationshipAssignment_1_1_3_1; }
		
		//FunctionReferenceMember
		public RuleCall getOwnedRelationshipFunctionReferenceMemberParserRuleCall_1_1_3_1_0() { return cOwnedRelationshipFunctionReferenceMemberParserRuleCall_1_1_3_1_0; }
		
		//ArgumentList
		public RuleCall getArgumentListParserRuleCall_1_1_3_2() { return cArgumentListParserRuleCall_1_1_3_2; }
		
		//{SysML::PathStepExpression.operand += current} '.'
		//     operand += FeatureReferenceExpression
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{SysML::PathStepExpression.operand += current}
		public Action getPathStepExpressionOperandAction_1_2_0() { return cPathStepExpressionOperandAction_1_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_2_1() { return cFullStopKeyword_1_2_1; }
		
		//operand += FeatureReferenceExpression
		public Assignment getOperandAssignment_1_2_2() { return cOperandAssignment_1_2_2; }
		
		//FeatureReferenceExpression
		public RuleCall getOperandFeatureReferenceExpressionParserRuleCall_1_2_2_0() { return cOperandFeatureReferenceExpressionParserRuleCall_1_2_2_0; }
		
		//{SysML::PathSelectExpression.operand += current} '.'
		//     ownedRelationship += ExpressionBodyMember
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//{SysML::PathSelectExpression.operand += current}
		public Action getPathSelectExpressionOperandAction_1_3_0() { return cPathSelectExpressionOperandAction_1_3_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_3_1() { return cFullStopKeyword_1_3_1; }
		
		//ownedRelationship += ExpressionBodyMember
		public Assignment getOwnedRelationshipAssignment_1_3_2() { return cOwnedRelationshipAssignment_1_3_2; }
		
		//ExpressionBodyMember
		public RuleCall getOwnedRelationshipExpressionBodyMemberParserRuleCall_1_3_2_0() { return cOwnedRelationshipExpressionBodyMemberParserRuleCall_1_3_2_0; }
	}
	public class ExpressionBodyMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ExpressionBodyMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementExpressionBodyParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//ExpressionBodyMember returns SysML::FeatureMembership :
		//    ownedRelatedElement += ExpressionBody // ownedMemberFeature = BodyExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += ExpressionBody
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//ExpressionBody
		public RuleCall getOwnedRelatedElementExpressionBodyParserRuleCall_0() { return cOwnedRelatedElementExpressionBodyParserRuleCall_0; }
	}
	public class FunctionReferenceMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.FunctionReferenceMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementFunctionReferenceParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//FunctionReferenceMember returns SysML::FeatureMembership :
		//    ownedRelatedElement += FunctionReference // ownedMemberFeature = FunctionReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += FunctionReference
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//FunctionReference
		public RuleCall getOwnedRelatedElementFunctionReferenceParserRuleCall_0() { return cOwnedRelatedElementFunctionReferenceParserRuleCall_0; }
	}
	public class FunctionReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.FunctionReference");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedFeatureTypingParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		//FunctionReference returns SysML::Expression :
		//    ownedRelationship += OwnedFeatureTyping
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += OwnedFeatureTyping
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//OwnedFeatureTyping
		public RuleCall getOwnedRelationshipOwnedFeatureTypingParserRuleCall_0() { return cOwnedRelationshipOwnedFeatureTypingParserRuleCall_0; }
	}
	public class BaseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.BaseExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNullExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFeatureReferenceExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInvocationExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExpressionBodyParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cSequenceExpressionParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		///* Base Expressions */
		//BaseExpression returns SysML::Expression :
		//      NullExpression
		//    | LiteralExpression
		//    | FeatureReferenceExpression
		//    | InvocationExpression
		//    | ExpressionBody
		//    | '(' SequenceExpression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  NullExpression
		//| LiteralExpression
		//| FeatureReferenceExpression
		//| InvocationExpression
		//| ExpressionBody
		//| '(' SequenceExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NullExpression
		public RuleCall getNullExpressionParserRuleCall_0() { return cNullExpressionParserRuleCall_0; }
		
		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall_1() { return cLiteralExpressionParserRuleCall_1; }
		
		//FeatureReferenceExpression
		public RuleCall getFeatureReferenceExpressionParserRuleCall_2() { return cFeatureReferenceExpressionParserRuleCall_2; }
		
		//InvocationExpression
		public RuleCall getInvocationExpressionParserRuleCall_3() { return cInvocationExpressionParserRuleCall_3; }
		
		//ExpressionBody
		public RuleCall getExpressionBodyParserRuleCall_4() { return cExpressionBodyParserRuleCall_4; }
		
		//'(' SequenceExpression ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//SequenceExpression
		public RuleCall getSequenceExpressionParserRuleCall_5_1() { return cSequenceExpressionParserRuleCall_5_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
	}
	public class ExpressionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ExpressionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOwnedRelationshipBodyParameterMemberParserRuleCall_1_0_0 = (RuleCall)cOwnedRelationshipAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelationshipResultExpressionMemberParserRuleCall_2_0 = (RuleCall)cOwnedRelationshipAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Expression Bodies
		//// This default production is overridden in the KerML and SysML grammars.
		//ExpressionBody returns SysML::Expression :
		//    '{' ( ownedRelationship += BodyParameterMember ';' )*
		//        ownedRelationship += ResultExpressionMember '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'{' ( ownedRelationship += BodyParameterMember ';' )*
		//    ownedRelationship += ResultExpressionMember '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//( ownedRelationship += BodyParameterMember ';' )*
		public Group getGroup_1() { return cGroup_1; }
		
		//ownedRelationship += BodyParameterMember
		public Assignment getOwnedRelationshipAssignment_1_0() { return cOwnedRelationshipAssignment_1_0; }
		
		//BodyParameterMember
		public RuleCall getOwnedRelationshipBodyParameterMemberParserRuleCall_1_0_0() { return cOwnedRelationshipBodyParameterMemberParserRuleCall_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//ownedRelationship += ResultExpressionMember
		public Assignment getOwnedRelationshipAssignment_2() { return cOwnedRelationshipAssignment_2; }
		
		//ResultExpressionMember
		public RuleCall getOwnedRelationshipResultExpressionMemberParserRuleCall_2_0() { return cOwnedRelationshipResultExpressionMemberParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ResultExpressionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ResultExpressionMember");
		private final Assignment cOwnedRelatedElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelatedElementOwnedExpressionParserRuleCall_0 = (RuleCall)cOwnedRelatedElementAssignment.eContents().get(0);
		
		//ResultExpressionMember returns SysML::ResultExpressionMembership :
		//    ownedRelatedElement += OwnedExpression // ownedResultExpression = OwnedExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelatedElement += OwnedExpression
		public Assignment getOwnedRelatedElementAssignment() { return cOwnedRelatedElementAssignment; }
		
		//OwnedExpression
		public RuleCall getOwnedRelatedElementOwnedExpressionParserRuleCall_0() { return cOwnedRelatedElementOwnedExpressionParserRuleCall_0; }
	}
	public class BodyParameterMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.BodyParameterMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMemberNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMemberNameNameParserRuleCall_1_0 = (RuleCall)cMemberNameAssignment_1.eContents().get(0);
		private final Assignment cOwnedRelatedElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelatedElementBodyParameterParserRuleCall_2_0 = (RuleCall)cOwnedRelatedElementAssignment_2.eContents().get(0);
		
		//BodyParameterMember returns SysML::ParameterMembership :
		//    'in' memberName = Name ownedRelatedElement += BodyParameter // ownedMemberParameter = BodyParameter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'in' memberName = Name ownedRelatedElement += BodyParameter
		public Group getGroup() { return cGroup; }
		
		//'in'
		public Keyword getInKeyword_0() { return cInKeyword_0; }
		
		//memberName = Name
		public Assignment getMemberNameAssignment_1() { return cMemberNameAssignment_1; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_1_0() { return cMemberNameNameParserRuleCall_1_0; }
		
		//ownedRelatedElement += BodyParameter
		public Assignment getOwnedRelatedElementAssignment_2() { return cOwnedRelatedElementAssignment_2; }
		
		//BodyParameter
		public RuleCall getOwnedRelatedElementBodyParameterParserRuleCall_2_0() { return cOwnedRelatedElementBodyParameterParserRuleCall_2_0; }
	}
	public class BodyParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.BodyParameter");
		private final Action cFeatureAction = (Action)rule.eContents().get(1);
		
		//BodyParameter returns SysML::Feature :
		//    {SysML::Feature}
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::Feature}
		public Action getFeatureAction() { return cFeatureAction; }
	}
	public class SequenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.SequenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOwnedExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cOperatorExpressionOperandAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cOperatorCommaKeyword_1_1_1_0 = (Keyword)cOperatorAssignment_1_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cOperandSequenceExpressionParserRuleCall_1_1_2_0 = (RuleCall)cOperandAssignment_1_1_2.eContents().get(0);
		
		//// Sequence Expressions
		//SequenceExpression returns SysML::Expression :
		//    OwnedExpression
		//    ( ','
		//    | {SysML::OperatorExpression.operand += current} operator = ','
		//      operand += SequenceExpression
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OwnedExpression
		//( ','
		//| {SysML::OperatorExpression.operand += current} operator = ','
		//  operand += SequenceExpression
		//)?
		public Group getGroup() { return cGroup; }
		
		//OwnedExpression
		public RuleCall getOwnedExpressionParserRuleCall_0() { return cOwnedExpressionParserRuleCall_0; }
		
		//( ','
		//| {SysML::OperatorExpression.operand += current} operator = ','
		//  operand += SequenceExpression
		//)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//{SysML::OperatorExpression.operand += current} operator = ','
		//     operand += SequenceExpression
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{SysML::OperatorExpression.operand += current}
		public Action getOperatorExpressionOperandAction_1_1_0() { return cOperatorExpressionOperandAction_1_1_0; }
		
		//operator = ','
		public Assignment getOperatorAssignment_1_1_1() { return cOperatorAssignment_1_1_1; }
		
		//','
		public Keyword getOperatorCommaKeyword_1_1_1_0() { return cOperatorCommaKeyword_1_1_1_0; }
		
		//operand += SequenceExpression
		public Assignment getOperandAssignment_1_1_2() { return cOperandAssignment_1_1_2; }
		
		//SequenceExpression
		public RuleCall getOperandSequenceExpressionParserRuleCall_1_1_2_0() { return cOperandSequenceExpressionParserRuleCall_1_1_2_0; }
	}
	public class FeatureReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.FeatureReferenceExpression");
		private final Assignment cOwnedRelationshipAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedRelationshipFeatureReferenceMemberParserRuleCall_0 = (RuleCall)cOwnedRelationshipAssignment.eContents().get(0);
		
		//// Feature Reference Expressions
		//FeatureReferenceExpression returns SysML::FeatureReferenceExpression :
		//    ownedRelationship += FeatureReferenceMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += FeatureReferenceMember
		public Assignment getOwnedRelationshipAssignment() { return cOwnedRelationshipAssignment; }
		
		//FeatureReferenceMember
		public RuleCall getOwnedRelationshipFeatureReferenceMemberParserRuleCall_0() { return cOwnedRelationshipFeatureReferenceMemberParserRuleCall_0; }
	}
	public class FeatureReferenceMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.FeatureReferenceMember");
		private final Assignment cMemberElementAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cMemberElementFeatureCrossReference_0 = (CrossReference)cMemberElementAssignment.eContents().get(0);
		private final RuleCall cMemberElementFeatureQualifiedNameParserRuleCall_0_1 = (RuleCall)cMemberElementFeatureCrossReference_0.eContents().get(1);
		
		//FeatureReferenceMember returns SysML::Membership :
		//    memberElement = [SysML::Feature | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//memberElement = [SysML::Feature | QualifiedName]
		public Assignment getMemberElementAssignment() { return cMemberElementAssignment; }
		
		//[SysML::Feature | QualifiedName]
		public CrossReference getMemberElementFeatureCrossReference_0() { return cMemberElementFeatureCrossReference_0; }
		
		//QualifiedName
		public RuleCall getMemberElementFeatureQualifiedNameParserRuleCall_0_1() { return cMemberElementFeatureQualifiedNameParserRuleCall_0_1; }
	}
	public class InvocationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.InvocationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationshipOwnedFeatureTypingParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final RuleCall cArgumentListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// Invocation Expressions
		//InvocationExpression returns SysML::InvocationExpression :
		//    ownedRelationship += OwnedFeatureTyping ArgumentList
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += OwnedFeatureTyping ArgumentList
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship += OwnedFeatureTyping
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//OwnedFeatureTyping
		public RuleCall getOwnedRelationshipOwnedFeatureTypingParserRuleCall_0_0() { return cOwnedRelationshipOwnedFeatureTypingParserRuleCall_0_0; }
		
		//ArgumentList
		public RuleCall getArgumentListParserRuleCall_1() { return cArgumentListParserRuleCall_1; }
	}
	public class ArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ArgumentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cPositionalArgumentListParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cNamedArgumentListParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//fragment ArgumentList returns SysML::Expression :
		//    '(' ( PositionalArgumentList | NamedArgumentList )? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' ( PositionalArgumentList | NamedArgumentList )? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//( PositionalArgumentList | NamedArgumentList )?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//PositionalArgumentList
		public RuleCall getPositionalArgumentListParserRuleCall_1_0() { return cPositionalArgumentListParserRuleCall_1_0; }
		
		//NamedArgumentList
		public RuleCall getNamedArgumentListParserRuleCall_1_1() { return cNamedArgumentListParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class PositionalArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.PositionalArgumentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationshipOwnedExpressionMemberParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipOwnedExpressionMemberParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1.eContents().get(0);
		
		//fragment PositionalArgumentList returns SysML::Expression :
		//    ownedRelationship += OwnedExpressionMember
		//    ( ',' ownedRelationship += OwnedExpressionMember )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += OwnedExpressionMember
		//( ',' ownedRelationship += OwnedExpressionMember )*
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship += OwnedExpressionMember
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//OwnedExpressionMember
		public RuleCall getOwnedRelationshipOwnedExpressionMemberParserRuleCall_0_0() { return cOwnedRelationshipOwnedExpressionMemberParserRuleCall_0_0; }
		
		//( ',' ownedRelationship += OwnedExpressionMember )*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ownedRelationship += OwnedExpressionMember
		public Assignment getOwnedRelationshipAssignment_1_1() { return cOwnedRelationshipAssignment_1_1; }
		
		//OwnedExpressionMember
		public RuleCall getOwnedRelationshipOwnedExpressionMemberParserRuleCall_1_1_0() { return cOwnedRelationshipOwnedExpressionMemberParserRuleCall_1_1_0; }
	}
	public class NamedArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.NamedArgumentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedRelationshipAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedRelationshipNamedExpressionMemberParserRuleCall_0_0 = (RuleCall)cOwnedRelationshipAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedRelationshipAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedRelationshipNamedExpressionMemberParserRuleCall_1_1_0 = (RuleCall)cOwnedRelationshipAssignment_1_1.eContents().get(0);
		
		//fragment NamedArgumentList returns SysML::Expression :
		//    ownedRelationship += NamedExpressionMember
		//    ( ',' ownedRelationship += NamedExpressionMember )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedRelationship += NamedExpressionMember
		//( ',' ownedRelationship += NamedExpressionMember )*
		public Group getGroup() { return cGroup; }
		
		//ownedRelationship += NamedExpressionMember
		public Assignment getOwnedRelationshipAssignment_0() { return cOwnedRelationshipAssignment_0; }
		
		//NamedExpressionMember
		public RuleCall getOwnedRelationshipNamedExpressionMemberParserRuleCall_0_0() { return cOwnedRelationshipNamedExpressionMemberParserRuleCall_0_0; }
		
		//( ',' ownedRelationship += NamedExpressionMember )*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ownedRelationship += NamedExpressionMember
		public Assignment getOwnedRelationshipAssignment_1_1() { return cOwnedRelationshipAssignment_1_1; }
		
		//NamedExpressionMember
		public RuleCall getOwnedRelationshipNamedExpressionMemberParserRuleCall_1_1_0() { return cOwnedRelationshipNamedExpressionMemberParserRuleCall_1_1_0; }
	}
	public class NamedExpressionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.NamedExpressionMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMemberNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMemberNameNameParserRuleCall_0_0 = (RuleCall)cMemberNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedRelatedElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedRelatedElementOwnedExpressionParserRuleCall_2_0 = (RuleCall)cOwnedRelatedElementAssignment_2.eContents().get(0);
		
		//NamedExpressionMember returns SysML::FeatureMembership :
		//    memberName = Name '=' ownedRelatedElement += OwnedExpression // ownedMemberFeature = OwnedExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//memberName = Name '=' ownedRelatedElement += OwnedExpression
		public Group getGroup() { return cGroup; }
		
		//memberName = Name
		public Assignment getMemberNameAssignment_0() { return cMemberNameAssignment_0; }
		
		//Name
		public RuleCall getMemberNameNameParserRuleCall_0_0() { return cMemberNameNameParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//ownedRelatedElement += OwnedExpression
		public Assignment getOwnedRelatedElementAssignment_2() { return cOwnedRelatedElementAssignment_2; }
		
		//OwnedExpression
		public RuleCall getOwnedRelatedElementOwnedExpressionParserRuleCall_2_0() { return cOwnedRelatedElementOwnedExpressionParserRuleCall_2_0; }
	}
	public class NullExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.NullExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cNullKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		//// Null Expressions
		//NullExpression returns SysML::NullExpression :
		//    {SysML::NullExpression} ( 'null' | '(' ')' )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::NullExpression} ( 'null' | '(' ')' )
		public Group getGroup() { return cGroup; }
		
		//{SysML::NullExpression}
		public Action getNullExpressionAction_0() { return cNullExpressionAction_0; }
		
		//( 'null' | '(' ')' )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'null'
		public Keyword getNullKeyword_1_0() { return cNullKeyword_1_0; }
		
		//'(' ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_1() { return cRightParenthesisKeyword_1_1_1; }
	}
	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.LiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralBooleanParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralIntegerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralRealParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLiteralInfinityParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		///* Literal Expressions */
		//LiteralExpression returns SysML::LiteralExpression :
		//      LiteralBoolean
		//    | LiteralString
		//    | LiteralInteger
		//    | LiteralReal
		//    | LiteralInfinity
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  LiteralBoolean
		//| LiteralString
		//| LiteralInteger
		//| LiteralReal
		//| LiteralInfinity
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralBoolean
		public RuleCall getLiteralBooleanParserRuleCall_0() { return cLiteralBooleanParserRuleCall_0; }
		
		//LiteralString
		public RuleCall getLiteralStringParserRuleCall_1() { return cLiteralStringParserRuleCall_1; }
		
		//LiteralInteger
		public RuleCall getLiteralIntegerParserRuleCall_2() { return cLiteralIntegerParserRuleCall_2; }
		
		//LiteralReal
		public RuleCall getLiteralRealParserRuleCall_3() { return cLiteralRealParserRuleCall_3; }
		
		//LiteralInfinity
		public RuleCall getLiteralInfinityParserRuleCall_4() { return cLiteralInfinityParserRuleCall_4; }
	}
	public class LiteralBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.LiteralBoolean");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LiteralBoolean returns SysML::LiteralBoolean :
		//    value = BooleanValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = BooleanValue
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BooleanValue
		public RuleCall getValueBooleanValueParserRuleCall_0() { return cValueBooleanValueParserRuleCall_0; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.BooleanValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BooleanValue returns Ecore::EBoolean :
		//    'true' | 'false'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class LiteralStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.LiteralString");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRING_VALUETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LiteralString returns SysML::LiteralString :
		//    value = STRING_VALUE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = STRING_VALUE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING_VALUE
		public RuleCall getValueSTRING_VALUETerminalRuleCall_0() { return cValueSTRING_VALUETerminalRuleCall_0; }
	}
	public class LiteralIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.LiteralInteger");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDECIMAL_VALUETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LiteralInteger returns SysML::LiteralInteger:
		//    value = DECIMAL_VALUE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = DECIMAL_VALUE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DECIMAL_VALUE
		public RuleCall getValueDECIMAL_VALUETerminalRuleCall_0() { return cValueDECIMAL_VALUETerminalRuleCall_0; }
	}
	public class LiteralRealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.LiteralReal");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueRealValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LiteralReal returns SysML::LiteralRational:
		//    value = RealValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = RealValue
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//RealValue
		public RuleCall getValueRealValueParserRuleCall_0() { return cValueRealValueParserRuleCall_0; }
	}
	public class RealValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.RealValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDECIMAL_VALUETerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final RuleCall cDECIMAL_VALUETerminalRuleCall_0_2_0 = (RuleCall)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cEXP_VALUETerminalRuleCall_0_2_1 = (RuleCall)cAlternatives_0_2.eContents().get(1);
		private final RuleCall cEXP_VALUETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RealValue returns Ecore::EDouble:
		//    DECIMAL_VALUE? '.' ( DECIMAL_VALUE | EXP_VALUE ) | EXP_VALUE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//DECIMAL_VALUE? '.' ( DECIMAL_VALUE | EXP_VALUE ) | EXP_VALUE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DECIMAL_VALUE? '.' ( DECIMAL_VALUE | EXP_VALUE )
		public Group getGroup_0() { return cGroup_0; }
		
		//DECIMAL_VALUE?
		public RuleCall getDECIMAL_VALUETerminalRuleCall_0_0() { return cDECIMAL_VALUETerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//( DECIMAL_VALUE | EXP_VALUE )
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//DECIMAL_VALUE
		public RuleCall getDECIMAL_VALUETerminalRuleCall_0_2_0() { return cDECIMAL_VALUETerminalRuleCall_0_2_0; }
		
		//EXP_VALUE
		public RuleCall getEXP_VALUETerminalRuleCall_0_2_1() { return cEXP_VALUETerminalRuleCall_0_2_1; }
		
		//EXP_VALUE
		public RuleCall getEXP_VALUETerminalRuleCall_1() { return cEXP_VALUETerminalRuleCall_1; }
	}
	public class LiteralInfinityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.LiteralInfinity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralInfinityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LiteralInfinity returns SysML::LiteralInfinity :
		//    {SysML::LiteralInfinity} '*'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SysML::LiteralInfinity} '*'
		public Group getGroup() { return cGroup; }
		
		//{SysML::LiteralInfinity}
		public Action getLiteralInfinityAction_0() { return cLiteralInfinityAction_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUNRESTRICTED_NAMETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* NAMES */
		//Name:
		//    ID | UNRESTRICTED_NAME
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | UNRESTRICTED_NAME
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//UNRESTRICTED_NAME
		public RuleCall getUNRESTRICTED_NAMETerminalRuleCall_1() { return cUNRESTRICTED_NAMETerminalRuleCall_1; }
	}
	public class QualificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.Qualification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Qualification :
		//    ( Name '::' )+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( Name '::' )+
		public Group getGroup() { return cGroup; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//'::'
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualificationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//QualifiedName:
		//    Qualification? Name
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Qualification? Name
		public Group getGroup() { return cGroup; }
		
		//Qualification?
		public RuleCall getQualificationParserRuleCall_0() { return cQualificationParserRuleCall_0; }
		
		//Name
		public RuleCall getNameParserRuleCall_1() { return cNameParserRuleCall_1; }
	}
	
	
	private final OwnedExpressionMemberElements pOwnedExpressionMember;
	private final OwnedExpressionElements pOwnedExpression;
	private final ConditionalExpressionElements pConditionalExpression;
	private final ConditionalOperatorElements pConditionalOperator;
	private final NullCoalescingExpressionElements pNullCoalescingExpression;
	private final NullCoalescingOperatorElements pNullCoalescingOperator;
	private final ImpliesExpressionElements pImpliesExpression;
	private final ImpliesOperatorElements pImpliesOperator;
	private final OrExpressionElements pOrExpression;
	private final OrOperatorElements pOrOperator;
	private final XorExpressionElements pXorExpression;
	private final XorOperatorElements pXorOperator;
	private final AndExpressionElements pAndExpression;
	private final AndOperatorElements pAndOperator;
	private final EqualityExpressionElements pEqualityExpression;
	private final EqualityOperatorElements pEqualityOperator;
	private final ClassificationExpressionElements pClassificationExpression;
	private final ClassificationOperatorElements pClassificationOperator;
	private final TypeReferenceMemberElements pTypeReferenceMember;
	private final TypeReferenceElements pTypeReference;
	private final OwnedFeatureTypingElements pOwnedFeatureTyping;
	private final SelfReferenceExpressionElements pSelfReferenceExpression;
	private final SelfReferenceMemberElements pSelfReferenceMember;
	private final EmptyFeatureElements pEmptyFeature;
	private final RelationalExpressionElements pRelationalExpression;
	private final RelationalOperatorElements pRelationalOperator;
	private final RangeExpressionElements pRangeExpression;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final AdditiveOperatorElements pAdditiveOperator;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final MultiplicativeOperatorElements pMultiplicativeOperator;
	private final ExponentiationExpressionElements pExponentiationExpression;
	private final ExponentiationOperatorElements pExponentiationOperator;
	private final UnaryExpressionElements pUnaryExpression;
	private final UnaryOperatorElements pUnaryOperator;
	private final ExtentExpressionElements pExtentExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final ExpressionBodyMemberElements pExpressionBodyMember;
	private final FunctionReferenceMemberElements pFunctionReferenceMember;
	private final FunctionReferenceElements pFunctionReference;
	private final BaseExpressionElements pBaseExpression;
	private final ExpressionBodyElements pExpressionBody;
	private final ResultExpressionMemberElements pResultExpressionMember;
	private final BodyParameterMemberElements pBodyParameterMember;
	private final BodyParameterElements pBodyParameter;
	private final SequenceExpressionElements pSequenceExpression;
	private final FeatureReferenceExpressionElements pFeatureReferenceExpression;
	private final FeatureReferenceMemberElements pFeatureReferenceMember;
	private final InvocationExpressionElements pInvocationExpression;
	private final ArgumentListElements pArgumentList;
	private final PositionalArgumentListElements pPositionalArgumentList;
	private final NamedArgumentListElements pNamedArgumentList;
	private final NamedExpressionMemberElements pNamedExpressionMember;
	private final NullExpressionElements pNullExpression;
	private final LiteralExpressionElements pLiteralExpression;
	private final LiteralBooleanElements pLiteralBoolean;
	private final BooleanValueElements pBooleanValue;
	private final LiteralStringElements pLiteralString;
	private final LiteralIntegerElements pLiteralInteger;
	private final LiteralRealElements pLiteralReal;
	private final RealValueElements pRealValue;
	private final LiteralInfinityElements pLiteralInfinity;
	private final NameElements pName;
	private final QualificationElements pQualification;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tDECIMAL_VALUE;
	private final TerminalRule tEXP_VALUE;
	private final TerminalRule tID;
	private final TerminalRule tUNRESTRICTED_NAME;
	private final TerminalRule tSTRING_VALUE;
	private final TerminalRule tREGULAR_COMMENT;
	private final TerminalRule tDOCUMENTATION_COMMENT;
	private final TerminalRule tML_NOTE;
	private final TerminalRule tSL_NOTE;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public KerMLExpressionsGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pOwnedExpressionMember = new OwnedExpressionMemberElements();
		this.pOwnedExpression = new OwnedExpressionElements();
		this.pConditionalExpression = new ConditionalExpressionElements();
		this.pConditionalOperator = new ConditionalOperatorElements();
		this.pNullCoalescingExpression = new NullCoalescingExpressionElements();
		this.pNullCoalescingOperator = new NullCoalescingOperatorElements();
		this.pImpliesExpression = new ImpliesExpressionElements();
		this.pImpliesOperator = new ImpliesOperatorElements();
		this.pOrExpression = new OrExpressionElements();
		this.pOrOperator = new OrOperatorElements();
		this.pXorExpression = new XorExpressionElements();
		this.pXorOperator = new XorOperatorElements();
		this.pAndExpression = new AndExpressionElements();
		this.pAndOperator = new AndOperatorElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pEqualityOperator = new EqualityOperatorElements();
		this.pClassificationExpression = new ClassificationExpressionElements();
		this.pClassificationOperator = new ClassificationOperatorElements();
		this.pTypeReferenceMember = new TypeReferenceMemberElements();
		this.pTypeReference = new TypeReferenceElements();
		this.pOwnedFeatureTyping = new OwnedFeatureTypingElements();
		this.pSelfReferenceExpression = new SelfReferenceExpressionElements();
		this.pSelfReferenceMember = new SelfReferenceMemberElements();
		this.pEmptyFeature = new EmptyFeatureElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pRelationalOperator = new RelationalOperatorElements();
		this.pRangeExpression = new RangeExpressionElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pAdditiveOperator = new AdditiveOperatorElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pMultiplicativeOperator = new MultiplicativeOperatorElements();
		this.pExponentiationExpression = new ExponentiationExpressionElements();
		this.pExponentiationOperator = new ExponentiationOperatorElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pUnaryOperator = new UnaryOperatorElements();
		this.pExtentExpression = new ExtentExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pExpressionBodyMember = new ExpressionBodyMemberElements();
		this.pFunctionReferenceMember = new FunctionReferenceMemberElements();
		this.pFunctionReference = new FunctionReferenceElements();
		this.pBaseExpression = new BaseExpressionElements();
		this.pExpressionBody = new ExpressionBodyElements();
		this.pResultExpressionMember = new ResultExpressionMemberElements();
		this.pBodyParameterMember = new BodyParameterMemberElements();
		this.pBodyParameter = new BodyParameterElements();
		this.pSequenceExpression = new SequenceExpressionElements();
		this.pFeatureReferenceExpression = new FeatureReferenceExpressionElements();
		this.pFeatureReferenceMember = new FeatureReferenceMemberElements();
		this.pInvocationExpression = new InvocationExpressionElements();
		this.pArgumentList = new ArgumentListElements();
		this.pPositionalArgumentList = new PositionalArgumentListElements();
		this.pNamedArgumentList = new NamedArgumentListElements();
		this.pNamedExpressionMember = new NamedExpressionMemberElements();
		this.pNullExpression = new NullExpressionElements();
		this.pLiteralExpression = new LiteralExpressionElements();
		this.pLiteralBoolean = new LiteralBooleanElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pLiteralString = new LiteralStringElements();
		this.pLiteralInteger = new LiteralIntegerElements();
		this.pLiteralReal = new LiteralRealElements();
		this.pRealValue = new RealValueElements();
		this.pLiteralInfinity = new LiteralInfinityElements();
		this.pName = new NameElements();
		this.pQualification = new QualificationElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tDECIMAL_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.DECIMAL_VALUE");
		this.tEXP_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.EXP_VALUE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ID");
		this.tUNRESTRICTED_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.UNRESTRICTED_NAME");
		this.tSTRING_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.STRING_VALUE");
		this.tREGULAR_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.REGULAR_COMMENT");
		this.tDOCUMENTATION_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.DOCUMENTATION_COMMENT");
		this.tML_NOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.ML_NOTE");
		this.tSL_NOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.SL_NOTE");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.expressions.xtext.KerMLExpressions.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.omg.kerml.expressions.xtext.KerMLExpressions".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	///* EXPRESSIONS */
	///* Operator Expressions */
	//OwnedExpressionMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += OwnedExpression // ownedMemberFeature = OwnedExpression
	//;
	public OwnedExpressionMemberElements getOwnedExpressionMemberAccess() {
		return pOwnedExpressionMember;
	}
	
	public ParserRule getOwnedExpressionMemberRule() {
		return getOwnedExpressionMemberAccess().getRule();
	}
	
	//OwnedExpression returns SysML::Expression :
	//     ConditionalExpression
	//;
	public OwnedExpressionElements getOwnedExpressionAccess() {
		return pOwnedExpression;
	}
	
	public ParserRule getOwnedExpressionRule() {
		return getOwnedExpressionAccess().getRule();
	}
	
	//// Conditional Test Expressions
	//ConditionalExpression returns SysML::Expression :
	//      NullCoalescingExpression ( {SysML::OperatorExpression.operand += current}
	//          operator = ConditionalOperator operand += OwnedExpression ':' operand += ConditionalExpression
	//      )?
	//    | {SysML::OperatorExpression} 'if' operand += NullCoalescingExpression
	//          operator = ConditionalOperator operand += OwnedExpression 'else' operand += ConditionalExpression
	//;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return pConditionalExpression;
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	//ConditionalOperator :
	//    '?'
	//;
	public ConditionalOperatorElements getConditionalOperatorAccess() {
		return pConditionalOperator;
	}
	
	public ParserRule getConditionalOperatorRule() {
		return getConditionalOperatorAccess().getRule();
	}
	
	//// Null Coalescing Expressions
	//NullCoalescingExpression returns SysML::Expression :
	//    ImpliesExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = NullCoalescingOperator operand += ImpliesExpression )*
	//;
	public NullCoalescingExpressionElements getNullCoalescingExpressionAccess() {
		return pNullCoalescingExpression;
	}
	
	public ParserRule getNullCoalescingExpressionRule() {
		return getNullCoalescingExpressionAccess().getRule();
	}
	
	//NullCoalescingOperator :
	//    '??'
	//;
	public NullCoalescingOperatorElements getNullCoalescingOperatorAccess() {
		return pNullCoalescingOperator;
	}
	
	public ParserRule getNullCoalescingOperatorRule() {
		return getNullCoalescingOperatorAccess().getRule();
	}
	
	//// Logical Expressions
	//ImpliesExpression returns SysML::Expression :
	//    OrExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = ImpliesOperator operand += OrExpression )*
	//;
	public ImpliesExpressionElements getImpliesExpressionAccess() {
		return pImpliesExpression;
	}
	
	public ParserRule getImpliesExpressionRule() {
		return getImpliesExpressionAccess().getRule();
	}
	
	//ImpliesOperator :
	//    '=>' | 'implies'
	//;
	public ImpliesOperatorElements getImpliesOperatorAccess() {
		return pImpliesOperator;
	}
	
	public ParserRule getImpliesOperatorRule() {
		return getImpliesOperatorAccess().getRule();
	}
	
	//OrExpression returns SysML::Expression :
	//    XorExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = OrOperator operand += XorExpression )*
	//;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//OrOperator :
	//    '|' | '||' | 'or'
	//;
	public OrOperatorElements getOrOperatorAccess() {
		return pOrOperator;
	}
	
	public ParserRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}
	
	//XorExpression returns SysML::Expression :
	//    AndExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = XorOperator operand += AndExpression )*
	//;
	public XorExpressionElements getXorExpressionAccess() {
		return pXorExpression;
	}
	
	public ParserRule getXorExpressionRule() {
		return getXorExpressionAccess().getRule();
	}
	
	//XorOperator :
	//    '^^' | 'xor'
	//;
	public XorOperatorElements getXorOperatorAccess() {
		return pXorOperator;
	}
	
	public ParserRule getXorOperatorRule() {
		return getXorOperatorAccess().getRule();
	}
	
	//AndExpression returns SysML::Expression :
	//    EqualityExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = AndOperator operand += EqualityExpression )*
	//;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//AndOperator :
	//    '&' | '&&' | 'and'
	//;
	public AndOperatorElements getAndOperatorAccess() {
		return pAndOperator;
	}
	
	public ParserRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}
	
	//// Equality Expressions
	//EqualityExpression returns SysML::Expression :
	//    ClassificationExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = EqualityOperator operand += ClassificationExpression )*
	//;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//EqualityOperator :
	//    '==' | '!='
	//;
	public EqualityOperatorElements getEqualityOperatorAccess() {
		return pEqualityOperator;
	}
	
	public ParserRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}
	
	//// Classification Expressions
	//ClassificationExpression returns SysML::Expression :
	//      RelationalExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = ClassificationOperator ownedRelationship += TypeReferenceMember )?
	//    | {SysML::OperatorExpression} operand += SelfReferenceExpression
	//        operator = ClassificationOperator ownedRelationship += TypeReferenceMember
	//;
	public ClassificationExpressionElements getClassificationExpressionAccess() {
		return pClassificationExpression;
	}
	
	public ParserRule getClassificationExpressionRule() {
		return getClassificationExpressionAccess().getRule();
	}
	
	//ClassificationOperator :
	//    'hastype' | 'istype' | '@' | 'as'
	//;
	public ClassificationOperatorElements getClassificationOperatorAccess() {
		return pClassificationOperator;
	}
	
	public ParserRule getClassificationOperatorRule() {
		return getClassificationOperatorAccess().getRule();
	}
	
	//TypeReferenceMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += TypeReference
	//    // ownedMemberFeature = TypeReference
	//;
	public TypeReferenceMemberElements getTypeReferenceMemberAccess() {
		return pTypeReferenceMember;
	}
	
	public ParserRule getTypeReferenceMemberRule() {
		return getTypeReferenceMemberAccess().getRule();
	}
	
	//TypeReference returns SysML::Feature :
	//    ownedRelationship += OwnedFeatureTyping
	//;
	public TypeReferenceElements getTypeReferenceAccess() {
		return pTypeReference;
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}
	
	//OwnedFeatureTyping returns SysML::FeatureTyping :
	//    type = [SysML::Type | QualifiedName]
	//;
	public OwnedFeatureTypingElements getOwnedFeatureTypingAccess() {
		return pOwnedFeatureTyping;
	}
	
	public ParserRule getOwnedFeatureTypingRule() {
		return getOwnedFeatureTypingAccess().getRule();
	}
	
	//SelfReferenceExpression returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += SelfReferenceMember
	//;
	public SelfReferenceExpressionElements getSelfReferenceExpressionAccess() {
		return pSelfReferenceExpression;
	}
	
	public ParserRule getSelfReferenceExpressionRule() {
		return getSelfReferenceExpressionAccess().getRule();
	}
	
	//SelfReferenceMember returns SysML::ReturnParameterMembership :
	//    ownedRelatedElement += EmptyFeature // ownedMemberFeature = EmptyFeature
	//;
	public SelfReferenceMemberElements getSelfReferenceMemberAccess() {
		return pSelfReferenceMember;
	}
	
	public ParserRule getSelfReferenceMemberRule() {
		return getSelfReferenceMemberAccess().getRule();
	}
	
	//EmptyFeature returns SysML::Feature :
	//    {SysML::Feature}
	//;
	public EmptyFeatureElements getEmptyFeatureAccess() {
		return pEmptyFeature;
	}
	
	public ParserRule getEmptyFeatureRule() {
		return getEmptyFeatureAccess().getRule();
	}
	
	//// Relational Expressions
	//RelationalExpression returns SysML::Expression :
	//    RangeExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = RelationalOperator operand += RangeExpression )*
	//;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//RelationalOperator :
	//    '<' | '>' | '<=' | '>='
	//;
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return pRelationalOperator;
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}
	
	//// Range Expressions
	//RangeExpression returns SysML::Expression :
	//    AdditiveExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = '..' operand += AdditiveExpression )?
	//;
	public RangeExpressionElements getRangeExpressionAccess() {
		return pRangeExpression;
	}
	
	public ParserRule getRangeExpressionRule() {
		return getRangeExpressionAccess().getRule();
	}
	
	//// Arithmetic Expressions
	//AdditiveExpression returns SysML::Expression :
	//    MultiplicativeExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = AdditiveOperator operand += MultiplicativeExpression )*
	//;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//AdditiveOperator :
	//    '+' | '-'
	//;
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return pAdditiveOperator;
	}
	
	public ParserRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}
	
	//MultiplicativeExpression returns SysML::Expression :
	//    ExponentiationExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = MultiplicativeOperator operand += ExponentiationExpression )*
	//;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//MultiplicativeOperator :
	//    '*' | '/' | '%'
	//;
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return pMultiplicativeOperator;
	}
	
	public ParserRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}
	
	//ExponentiationExpression returns SysML::Expression :
	//    UnaryExpression ( {SysML::OperatorExpression.operand += current}
	//        operator = ExponentiationOperator operand += UnaryExpression )*
	//;
	public ExponentiationExpressionElements getExponentiationExpressionAccess() {
		return pExponentiationExpression;
	}
	
	public ParserRule getExponentiationExpressionRule() {
		return getExponentiationExpressionAccess().getRule();
	}
	
	//ExponentiationOperator :
	//    '**' | '^'
	//;
	public ExponentiationOperatorElements getExponentiationOperatorAccess() {
		return pExponentiationOperator;
	}
	
	public ParserRule getExponentiationOperatorRule() {
		return getExponentiationOperatorAccess().getRule();
	}
	
	//// Unary Expressions
	//UnaryExpression returns SysML::Expression:
	//      {SysML::OperatorExpression} operator = UnaryOperator operand += ExtentExpression
	//    | ExtentExpression
	//;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//UnaryOperator :
	//    '+' | '-' | '!' | '~' | 'not'
	//;
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return pUnaryOperator;
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//// Extent Expressions
	//ExtentExpression returns SysML::Expression :
	//      {SysML::OperatorExpression} operator = 'all' ownedRelationship += TypeReferenceMember
	//    | PrimaryExpression
	//;
	public ExtentExpressionElements getExtentExpressionAccess() {
		return pExtentExpression;
	}
	
	public ParserRule getExtentExpressionRule() {
		return getExtentExpressionAccess().getRule();
	}
	
	///* Primary Expressions */
	//PrimaryExpression returns SysML::Expression :
	//    BaseExpression
	//    ( {SysML::OperatorExpression.operand += current}
	//      operator = '[' operand += SequenceExpression ']'
	//    | {SysML::OperatorExpression.operand += current} '->'
	//      ownedRelationship += OwnedFeatureTyping
	//      ( ownedRelationship += ExpressionBodyMember
	//      | ownedRelationship += FunctionReferenceMember
	//      | ArgumentList
	//      )
	//    | {SysML::PathStepExpression.operand += current} '.'
	//      operand += FeatureReferenceExpression
	//    | {SysML::PathSelectExpression.operand += current} '.'
	//      ownedRelationship += ExpressionBodyMember
	//    )*
	//;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//ExpressionBodyMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += ExpressionBody // ownedMemberFeature = BodyExpression
	//;
	public ExpressionBodyMemberElements getExpressionBodyMemberAccess() {
		return pExpressionBodyMember;
	}
	
	public ParserRule getExpressionBodyMemberRule() {
		return getExpressionBodyMemberAccess().getRule();
	}
	
	//FunctionReferenceMember returns SysML::FeatureMembership :
	//    ownedRelatedElement += FunctionReference // ownedMemberFeature = FunctionReference
	//;
	public FunctionReferenceMemberElements getFunctionReferenceMemberAccess() {
		return pFunctionReferenceMember;
	}
	
	public ParserRule getFunctionReferenceMemberRule() {
		return getFunctionReferenceMemberAccess().getRule();
	}
	
	//FunctionReference returns SysML::Expression :
	//    ownedRelationship += OwnedFeatureTyping
	//;
	public FunctionReferenceElements getFunctionReferenceAccess() {
		return pFunctionReference;
	}
	
	public ParserRule getFunctionReferenceRule() {
		return getFunctionReferenceAccess().getRule();
	}
	
	///* Base Expressions */
	//BaseExpression returns SysML::Expression :
	//      NullExpression
	//    | LiteralExpression
	//    | FeatureReferenceExpression
	//    | InvocationExpression
	//    | ExpressionBody
	//    | '(' SequenceExpression ')'
	//;
	public BaseExpressionElements getBaseExpressionAccess() {
		return pBaseExpression;
	}
	
	public ParserRule getBaseExpressionRule() {
		return getBaseExpressionAccess().getRule();
	}
	
	//// Expression Bodies
	//// This default production is overridden in the KerML and SysML grammars.
	//ExpressionBody returns SysML::Expression :
	//    '{' ( ownedRelationship += BodyParameterMember ';' )*
	//        ownedRelationship += ResultExpressionMember '}'
	//;
	public ExpressionBodyElements getExpressionBodyAccess() {
		return pExpressionBody;
	}
	
	public ParserRule getExpressionBodyRule() {
		return getExpressionBodyAccess().getRule();
	}
	
	//ResultExpressionMember returns SysML::ResultExpressionMembership :
	//    ownedRelatedElement += OwnedExpression // ownedResultExpression = OwnedExpression
	//;
	public ResultExpressionMemberElements getResultExpressionMemberAccess() {
		return pResultExpressionMember;
	}
	
	public ParserRule getResultExpressionMemberRule() {
		return getResultExpressionMemberAccess().getRule();
	}
	
	//BodyParameterMember returns SysML::ParameterMembership :
	//    'in' memberName = Name ownedRelatedElement += BodyParameter // ownedMemberParameter = BodyParameter
	//;
	public BodyParameterMemberElements getBodyParameterMemberAccess() {
		return pBodyParameterMember;
	}
	
	public ParserRule getBodyParameterMemberRule() {
		return getBodyParameterMemberAccess().getRule();
	}
	
	//BodyParameter returns SysML::Feature :
	//    {SysML::Feature}
	//;
	public BodyParameterElements getBodyParameterAccess() {
		return pBodyParameter;
	}
	
	public ParserRule getBodyParameterRule() {
		return getBodyParameterAccess().getRule();
	}
	
	//// Sequence Expressions
	//SequenceExpression returns SysML::Expression :
	//    OwnedExpression
	//    ( ','
	//    | {SysML::OperatorExpression.operand += current} operator = ','
	//      operand += SequenceExpression
	//    )?
	//;
	public SequenceExpressionElements getSequenceExpressionAccess() {
		return pSequenceExpression;
	}
	
	public ParserRule getSequenceExpressionRule() {
		return getSequenceExpressionAccess().getRule();
	}
	
	//// Feature Reference Expressions
	//FeatureReferenceExpression returns SysML::FeatureReferenceExpression :
	//    ownedRelationship += FeatureReferenceMember
	//;
	public FeatureReferenceExpressionElements getFeatureReferenceExpressionAccess() {
		return pFeatureReferenceExpression;
	}
	
	public ParserRule getFeatureReferenceExpressionRule() {
		return getFeatureReferenceExpressionAccess().getRule();
	}
	
	//FeatureReferenceMember returns SysML::Membership :
	//    memberElement = [SysML::Feature | QualifiedName]
	//;
	public FeatureReferenceMemberElements getFeatureReferenceMemberAccess() {
		return pFeatureReferenceMember;
	}
	
	public ParserRule getFeatureReferenceMemberRule() {
		return getFeatureReferenceMemberAccess().getRule();
	}
	
	//// Invocation Expressions
	//InvocationExpression returns SysML::InvocationExpression :
	//    ownedRelationship += OwnedFeatureTyping ArgumentList
	//;
	public InvocationExpressionElements getInvocationExpressionAccess() {
		return pInvocationExpression;
	}
	
	public ParserRule getInvocationExpressionRule() {
		return getInvocationExpressionAccess().getRule();
	}
	
	//fragment ArgumentList returns SysML::Expression :
	//    '(' ( PositionalArgumentList | NamedArgumentList )? ')'
	//;
	public ArgumentListElements getArgumentListAccess() {
		return pArgumentList;
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}
	
	//fragment PositionalArgumentList returns SysML::Expression :
	//    ownedRelationship += OwnedExpressionMember
	//    ( ',' ownedRelationship += OwnedExpressionMember )*
	//;
	public PositionalArgumentListElements getPositionalArgumentListAccess() {
		return pPositionalArgumentList;
	}
	
	public ParserRule getPositionalArgumentListRule() {
		return getPositionalArgumentListAccess().getRule();
	}
	
	//fragment NamedArgumentList returns SysML::Expression :
	//    ownedRelationship += NamedExpressionMember
	//    ( ',' ownedRelationship += NamedExpressionMember )*
	//;
	public NamedArgumentListElements getNamedArgumentListAccess() {
		return pNamedArgumentList;
	}
	
	public ParserRule getNamedArgumentListRule() {
		return getNamedArgumentListAccess().getRule();
	}
	
	//NamedExpressionMember returns SysML::FeatureMembership :
	//    memberName = Name '=' ownedRelatedElement += OwnedExpression // ownedMemberFeature = OwnedExpression
	//;
	public NamedExpressionMemberElements getNamedExpressionMemberAccess() {
		return pNamedExpressionMember;
	}
	
	public ParserRule getNamedExpressionMemberRule() {
		return getNamedExpressionMemberAccess().getRule();
	}
	
	//// Null Expressions
	//NullExpression returns SysML::NullExpression :
	//    {SysML::NullExpression} ( 'null' | '(' ')' )
	//;
	public NullExpressionElements getNullExpressionAccess() {
		return pNullExpression;
	}
	
	public ParserRule getNullExpressionRule() {
		return getNullExpressionAccess().getRule();
	}
	
	///* Literal Expressions */
	//LiteralExpression returns SysML::LiteralExpression :
	//      LiteralBoolean
	//    | LiteralString
	//    | LiteralInteger
	//    | LiteralReal
	//    | LiteralInfinity
	//;
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return pLiteralExpression;
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//LiteralBoolean returns SysML::LiteralBoolean :
	//    value = BooleanValue
	//;
	public LiteralBooleanElements getLiteralBooleanAccess() {
		return pLiteralBoolean;
	}
	
	public ParserRule getLiteralBooleanRule() {
		return getLiteralBooleanAccess().getRule();
	}
	
	//BooleanValue returns Ecore::EBoolean :
	//    'true' | 'false'
	//;
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//LiteralString returns SysML::LiteralString :
	//    value = STRING_VALUE
	//;
	public LiteralStringElements getLiteralStringAccess() {
		return pLiteralString;
	}
	
	public ParserRule getLiteralStringRule() {
		return getLiteralStringAccess().getRule();
	}
	
	//LiteralInteger returns SysML::LiteralInteger:
	//    value = DECIMAL_VALUE
	//;
	public LiteralIntegerElements getLiteralIntegerAccess() {
		return pLiteralInteger;
	}
	
	public ParserRule getLiteralIntegerRule() {
		return getLiteralIntegerAccess().getRule();
	}
	
	//LiteralReal returns SysML::LiteralRational:
	//    value = RealValue
	//;
	public LiteralRealElements getLiteralRealAccess() {
		return pLiteralReal;
	}
	
	public ParserRule getLiteralRealRule() {
		return getLiteralRealAccess().getRule();
	}
	
	//RealValue returns Ecore::EDouble:
	//    DECIMAL_VALUE? '.' ( DECIMAL_VALUE | EXP_VALUE ) | EXP_VALUE
	//;
	public RealValueElements getRealValueAccess() {
		return pRealValue;
	}
	
	public ParserRule getRealValueRule() {
		return getRealValueAccess().getRule();
	}
	
	//LiteralInfinity returns SysML::LiteralInfinity :
	//    {SysML::LiteralInfinity} '*'
	//;
	public LiteralInfinityElements getLiteralInfinityAccess() {
		return pLiteralInfinity;
	}
	
	public ParserRule getLiteralInfinityRule() {
		return getLiteralInfinityAccess().getRule();
	}
	
	///* NAMES */
	//Name:
	//    ID | UNRESTRICTED_NAME
	//;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//Qualification :
	//    ( Name '::' )+
	//;
	public QualificationElements getQualificationAccess() {
		return pQualification;
	}
	
	public ParserRule getQualificationRule() {
		return getQualificationAccess().getRule();
	}
	
	//QualifiedName:
	//    Qualification? Name
	//;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	///* TERMINALS */
	//terminal DECIMAL_VALUE returns Ecore::EInt:
	//    '0'..'9' ('0'..'9')*;
	public TerminalRule getDECIMAL_VALUERule() {
		return tDECIMAL_VALUE;
	}
	
	//terminal EXP_VALUE:
	//    DECIMAL_VALUE ('e' | 'E') ('+' | '-')? DECIMAL_VALUE;
	public TerminalRule getEXP_VALUERule() {
		return tEXP_VALUE;
	}
	
	//terminal ID:
	//    ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal UNRESTRICTED_NAME returns Ecore::EString:
	//    '\'' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '\''))* '\'';
	public TerminalRule getUNRESTRICTED_NAMERule() {
		return tUNRESTRICTED_NAME;
	}
	
	//terminal STRING_VALUE returns Ecore::EString:
	//    '"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRING_VALUERule() {
		return tSTRING_VALUE;
	}
	
	//terminal REGULAR_COMMENT:
	//    '/*' !('*') ->'*/';
	public TerminalRule getREGULAR_COMMENTRule() {
		return tREGULAR_COMMENT;
	}
	
	//terminal DOCUMENTATION_COMMENT:
	//    '/**'->'*/';
	public TerminalRule getDOCUMENTATION_COMMENTRule() {
		return tDOCUMENTATION_COMMENT;
	}
	
	//terminal ML_NOTE:
	//    '//*'->'*/';
	public TerminalRule getML_NOTERule() {
		return tML_NOTE;
	}
	
	//terminal SL_NOTE:
	//    '//' (!('\n' | '\r') !('\n' | '\r')*)? ('\r'? '\n')?;
	public TerminalRule getSL_NOTERule() {
		return tSL_NOTE;
	}
	
	//terminal WS:
	//    (' ' | '\t' | '\r' | '\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
