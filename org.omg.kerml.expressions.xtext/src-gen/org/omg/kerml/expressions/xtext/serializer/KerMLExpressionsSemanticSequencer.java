/*
 * generated by Xtext 2.25.0
 */
package org.omg.kerml.expressions.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.omg.kerml.expressions.xtext.services.KerMLExpressionsGrammarAccess;
import org.omg.sysml.lang.sysml.Expression;
import org.omg.sysml.lang.sysml.Feature;
import org.omg.sysml.lang.sysml.FeatureChaining;
import org.omg.sysml.lang.sysml.FeatureMembership;
import org.omg.sysml.lang.sysml.FeatureReferenceExpression;
import org.omg.sysml.lang.sysml.FeatureTyping;
import org.omg.sysml.lang.sysml.InvocationExpression;
import org.omg.sysml.lang.sysml.LiteralBoolean;
import org.omg.sysml.lang.sysml.LiteralInfinity;
import org.omg.sysml.lang.sysml.LiteralInteger;
import org.omg.sysml.lang.sysml.LiteralRational;
import org.omg.sysml.lang.sysml.LiteralString;
import org.omg.sysml.lang.sysml.Membership;
import org.omg.sysml.lang.sysml.NullExpression;
import org.omg.sysml.lang.sysml.OperatorExpression;
import org.omg.sysml.lang.sysml.ParameterMembership;
import org.omg.sysml.lang.sysml.PathSelectExpression;
import org.omg.sysml.lang.sysml.PathStepExpression;
import org.omg.sysml.lang.sysml.ResultExpressionMembership;
import org.omg.sysml.lang.sysml.ReturnParameterMembership;
import org.omg.sysml.lang.sysml.SysMLPackage;

@SuppressWarnings("all")
public class KerMLExpressionsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private KerMLExpressionsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SysMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SysMLPackage.EXPRESSION:
				if (rule == grammarAccess.getOwnedExpressionRule()
						|| rule == grammarAccess.getConditionalExpressionRule()
						|| action == grammarAccess.getConditionalExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getNullCoalescingExpressionRule()
						|| action == grammarAccess.getNullCoalescingExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getXorExpressionRule()
						|| action == grammarAccess.getXorExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getEqualityExpressionRule()
						|| action == grammarAccess.getEqualityExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getClassificationExpressionRule()
						|| action == grammarAccess.getClassificationExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getRelationalExpressionRule()
						|| action == grammarAccess.getRelationalExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getRangeExpressionRule()
						|| action == grammarAccess.getRangeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAdditiveExpressionRule()
						|| action == grammarAccess.getAdditiveExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getMultiplicativeExpressionRule()
						|| action == grammarAccess.getMultiplicativeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getExponentiationExpressionRule()
						|| action == grammarAccess.getExponentiationExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getUnaryExpressionRule()
						|| rule == grammarAccess.getExtentExpressionRule()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_1_0_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_1_1_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getPathStepExpressionOperandAction_1_2_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getPathSelectExpressionOperandAction_1_3_0()
						|| rule == grammarAccess.getBaseExpressionRule()
						|| rule == grammarAccess.getExpressionBodyRule()
						|| rule == grammarAccess.getSequenceExpressionRule()
						|| action == grammarAccess.getSequenceExpressionAccess().getOperatorExpressionOperandAction_1_1_0()) {
					sequence_ExpressionBody(context, (Expression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFunctionReferenceRule()) {
					sequence_FunctionReference(context, (Expression) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE:
				if (rule == grammarAccess.getEmptyFeatureRule()
						|| rule == grammarAccess.getBodyParameterRule()) {
					sequence_BodyParameter_EmptyFeature(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFeatureChainRule()) {
					sequence_FeatureChain(context, (Feature) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeReferenceRule()) {
					sequence_TypeReference(context, (Feature) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_CHAINING:
				sequence_OwnedFeatureChaining(context, (FeatureChaining) semanticObject); 
				return; 
			case SysMLPackage.FEATURE_MEMBERSHIP:
				if (rule == grammarAccess.getExpressionBodyMemberRule()) {
					sequence_ExpressionBodyMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFunctionReferenceMemberRule()) {
					sequence_FunctionReferenceMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNamedExpressionMemberRule()) {
					sequence_NamedExpressionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOwnedExpressionMemberRule()) {
					sequence_OwnedExpressionMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeReferenceMemberRule()) {
					sequence_TypeReferenceMember(context, (FeatureMembership) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_REFERENCE_EXPRESSION:
				if (rule == grammarAccess.getOwnedExpressionRule()
						|| rule == grammarAccess.getConditionalExpressionRule()
						|| action == grammarAccess.getConditionalExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getNullCoalescingExpressionRule()
						|| action == grammarAccess.getNullCoalescingExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getXorExpressionRule()
						|| action == grammarAccess.getXorExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getEqualityExpressionRule()
						|| action == grammarAccess.getEqualityExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getClassificationExpressionRule()
						|| action == grammarAccess.getClassificationExpressionAccess().getOperatorExpressionOperandAction_0_1_0()
						|| rule == grammarAccess.getRelationalExpressionRule()
						|| action == grammarAccess.getRelationalExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getRangeExpressionRule()
						|| action == grammarAccess.getRangeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getAdditiveExpressionRule()
						|| action == grammarAccess.getAdditiveExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getMultiplicativeExpressionRule()
						|| action == grammarAccess.getMultiplicativeExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getExponentiationExpressionRule()
						|| action == grammarAccess.getExponentiationExpressionAccess().getOperatorExpressionOperandAction_1_0()
						|| rule == grammarAccess.getUnaryExpressionRule()
						|| rule == grammarAccess.getExtentExpressionRule()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_1_0_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getOperatorExpressionOperandAction_1_1_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getPathStepExpressionOperandAction_1_2_0()
						|| action == grammarAccess.getPrimaryExpressionAccess().getPathSelectExpressionOperandAction_1_3_0()
						|| rule == grammarAccess.getBaseExpressionRule()
						|| rule == grammarAccess.getSequenceExpressionRule()
						|| action == grammarAccess.getSequenceExpressionAccess().getOperatorExpressionOperandAction_1_1_0()
						|| rule == grammarAccess.getFeatureReferenceExpressionRule()) {
					sequence_FeatureReferenceExpression(context, (FeatureReferenceExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSelfReferenceExpressionRule()) {
					sequence_SelfReferenceExpression(context, (FeatureReferenceExpression) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.FEATURE_TYPING:
				if (rule == grammarAccess.getOwnedFeatureTypingRule()) {
					sequence_OwnedFeatureTyping(context, (FeatureTyping) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getReferenceTypingRule()) {
					sequence_ReferenceTyping(context, (FeatureTyping) semanticObject); 
					return; 
				}
				else break;
			case SysMLPackage.INVOCATION_EXPRESSION:
				sequence_InvocationExpression_NamedArgumentList_PositionalArgumentList(context, (InvocationExpression) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_BOOLEAN:
				sequence_LiteralBoolean(context, (LiteralBoolean) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_INFINITY:
				sequence_LiteralInfinity(context, (LiteralInfinity) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_INTEGER:
				sequence_LiteralInteger(context, (LiteralInteger) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_RATIONAL:
				sequence_LiteralReal(context, (LiteralRational) semanticObject); 
				return; 
			case SysMLPackage.LITERAL_STRING:
				sequence_LiteralString(context, (LiteralString) semanticObject); 
				return; 
			case SysMLPackage.MEMBERSHIP:
				sequence_FeatureReferenceMember(context, (Membership) semanticObject); 
				return; 
			case SysMLPackage.NULL_EXPRESSION:
				sequence_NullExpression(context, (NullExpression) semanticObject); 
				return; 
			case SysMLPackage.OPERATOR_EXPRESSION:
				sequence_AdditiveExpression_AndExpression_ClassificationExpression_ConditionalExpression_EqualityExpression_ExponentiationExpression_ExtentExpression_ImpliesExpression_MultiplicativeExpression_NamedArgumentList_NullCoalescingExpression_OrExpression_PositionalArgumentList_PrimaryExpression_RangeExpression_RelationalExpression_SequenceExpression_UnaryExpression_XorExpression(context, (OperatorExpression) semanticObject); 
				return; 
			case SysMLPackage.PARAMETER_MEMBERSHIP:
				sequence_BodyParameterMember(context, (ParameterMembership) semanticObject); 
				return; 
			case SysMLPackage.PATH_SELECT_EXPRESSION:
				sequence_PrimaryExpression(context, (PathSelectExpression) semanticObject); 
				return; 
			case SysMLPackage.PATH_STEP_EXPRESSION:
				sequence_PrimaryExpression(context, (PathStepExpression) semanticObject); 
				return; 
			case SysMLPackage.RESULT_EXPRESSION_MEMBERSHIP:
				sequence_ResultExpressionMember(context, (ResultExpressionMembership) semanticObject); 
				return; 
			case SysMLPackage.RETURN_PARAMETER_MEMBERSHIP:
				sequence_SelfReferenceMember(context, (ReturnParameterMembership) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     OwnedExpression returns OperatorExpression
	 *     ConditionalExpression returns OperatorExpression
	 *     ConditionalExpression.OperatorExpression_0_1_0 returns OperatorExpression
	 *     NullCoalescingExpression returns OperatorExpression
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ImpliesExpression returns OperatorExpression
	 *     ImpliesExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     OrExpression returns OperatorExpression
	 *     OrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     XorExpression returns OperatorExpression
	 *     XorExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     AndExpression returns OperatorExpression
	 *     AndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     EqualityExpression returns OperatorExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ClassificationExpression returns OperatorExpression
	 *     ClassificationExpression.OperatorExpression_0_1_0 returns OperatorExpression
	 *     RelationalExpression returns OperatorExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     RangeExpression returns OperatorExpression
	 *     RangeExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     AdditiveExpression returns OperatorExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     MultiplicativeExpression returns OperatorExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ExponentiationExpression returns OperatorExpression
	 *     ExponentiationExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     UnaryExpression returns OperatorExpression
	 *     ExtentExpression returns OperatorExpression
	 *     PrimaryExpression returns OperatorExpression
	 *     PrimaryExpression.OperatorExpression_1_0_0 returns OperatorExpression
	 *     PrimaryExpression.OperatorExpression_1_1_0 returns OperatorExpression
	 *     PrimaryExpression.PathStepExpression_1_2_0 returns OperatorExpression
	 *     PrimaryExpression.PathSelectExpression_1_3_0 returns OperatorExpression
	 *     BaseExpression returns OperatorExpression
	 *     SequenceExpression returns OperatorExpression
	 *     SequenceExpression.OperatorExpression_1_1_0 returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (operand+=ConditionalExpression_OperatorExpression_0_1_0 operator=ConditionalOperator operand+=OwnedExpression operand+=ConditionalExpression) | 
	 *         (operand+=NullCoalescingExpression operator=ConditionalOperator operand+=OwnedExpression operand+=ConditionalExpression) | 
	 *         (operand+=NullCoalescingExpression_OperatorExpression_1_0 operator=NullCoalescingOperator operand+=ImpliesExpression) | 
	 *         (operand+=ImpliesExpression_OperatorExpression_1_0 operator=ImpliesOperator operand+=OrExpression) | 
	 *         (operand+=OrExpression_OperatorExpression_1_0 operator=OrOperator operand+=XorExpression) | 
	 *         (operand+=XorExpression_OperatorExpression_1_0 operator=XorOperator operand+=AndExpression) | 
	 *         (operand+=AndExpression_OperatorExpression_1_0 operator=AndOperator operand+=EqualityExpression) | 
	 *         (operand+=EqualityExpression_OperatorExpression_1_0 operator=EqualityOperator operand+=ClassificationExpression) | 
	 *         (operand+=ClassificationExpression_OperatorExpression_0_1_0 operator=ClassificationOperator ownedRelationship+=TypeReferenceMember) | 
	 *         (operand+=SelfReferenceExpression operator=ClassificationOperator ownedRelationship+=TypeReferenceMember) | 
	 *         (operand+=RelationalExpression_OperatorExpression_1_0 operator=RelationalOperator operand+=RangeExpression) | 
	 *         (operand+=RangeExpression_OperatorExpression_1_0 operator='..' operand+=AdditiveExpression) | 
	 *         (operand+=AdditiveExpression_OperatorExpression_1_0 operator=AdditiveOperator operand+=MultiplicativeExpression) | 
	 *         (operand+=MultiplicativeExpression_OperatorExpression_1_0 operator=MultiplicativeOperator operand+=ExponentiationExpression) | 
	 *         (operand+=ExponentiationExpression_OperatorExpression_1_0 operator=ExponentiationOperator operand+=UnaryExpression) | 
	 *         (operator=UnaryOperator operand+=ExtentExpression) | 
	 *         (operator='all' ownedRelationship+=TypeReferenceMember) | 
	 *         (operand+=PrimaryExpression_OperatorExpression_1_0_0 operator='[' operand+=SequenceExpression) | 
	 *         (
	 *             operand+=PrimaryExpression_OperatorExpression_1_1_0 
	 *             ownedRelationship+=ReferenceTyping 
	 *             (
	 *                 ownedRelationship+=ExpressionBodyMember | 
	 *                 ownedRelationship+=FunctionReferenceMember | 
	 *                 (ownedRelationship+=OwnedExpressionMember ownedRelationship+=OwnedExpressionMember*) | 
	 *                 (ownedRelationship+=NamedExpressionMember ownedRelationship+=NamedExpressionMember*)
	 *             )?
	 *         ) | 
	 *         (operand+=SequenceExpression_OperatorExpression_1_1_0 operator=',' operand+=SequenceExpression)
	 *     )
	 */
	protected void sequence_AdditiveExpression_AndExpression_ClassificationExpression_ConditionalExpression_EqualityExpression_ExponentiationExpression_ExtentExpression_ImpliesExpression_MultiplicativeExpression_NamedArgumentList_NullCoalescingExpression_OrExpression_PositionalArgumentList_PrimaryExpression_RangeExpression_RelationalExpression_SequenceExpression_UnaryExpression_XorExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BodyParameterMember returns ParameterMembership
	 *
	 * Constraint:
	 *     (memberName=Name ownedRelatedElement+=BodyParameter)
	 */
	protected void sequence_BodyParameterMember(ISerializationContext context, ParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyFeature returns Feature
	 *     BodyParameter returns Feature
	 *
	 * Constraint:
	 *     {Feature}
	 */
	protected void sequence_BodyParameter_EmptyFeature(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpressionBodyMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=ExpressionBody
	 */
	protected void sequence_ExpressionBodyMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns Expression
	 *     ConditionalExpression returns Expression
	 *     ConditionalExpression.OperatorExpression_0_1_0 returns Expression
	 *     NullCoalescingExpression returns Expression
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns Expression
	 *     ImpliesExpression returns Expression
	 *     ImpliesExpression.OperatorExpression_1_0 returns Expression
	 *     OrExpression returns Expression
	 *     OrExpression.OperatorExpression_1_0 returns Expression
	 *     XorExpression returns Expression
	 *     XorExpression.OperatorExpression_1_0 returns Expression
	 *     AndExpression returns Expression
	 *     AndExpression.OperatorExpression_1_0 returns Expression
	 *     EqualityExpression returns Expression
	 *     EqualityExpression.OperatorExpression_1_0 returns Expression
	 *     ClassificationExpression returns Expression
	 *     ClassificationExpression.OperatorExpression_0_1_0 returns Expression
	 *     RelationalExpression returns Expression
	 *     RelationalExpression.OperatorExpression_1_0 returns Expression
	 *     RangeExpression returns Expression
	 *     RangeExpression.OperatorExpression_1_0 returns Expression
	 *     AdditiveExpression returns Expression
	 *     AdditiveExpression.OperatorExpression_1_0 returns Expression
	 *     MultiplicativeExpression returns Expression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns Expression
	 *     ExponentiationExpression returns Expression
	 *     ExponentiationExpression.OperatorExpression_1_0 returns Expression
	 *     UnaryExpression returns Expression
	 *     ExtentExpression returns Expression
	 *     PrimaryExpression returns Expression
	 *     PrimaryExpression.OperatorExpression_1_0_0 returns Expression
	 *     PrimaryExpression.OperatorExpression_1_1_0 returns Expression
	 *     PrimaryExpression.PathStepExpression_1_2_0 returns Expression
	 *     PrimaryExpression.PathSelectExpression_1_3_0 returns Expression
	 *     BaseExpression returns Expression
	 *     ExpressionBody returns Expression
	 *     SequenceExpression returns Expression
	 *     SequenceExpression.OperatorExpression_1_1_0 returns Expression
	 *
	 * Constraint:
	 *     (ownedRelationship+=BodyParameterMember* ownedRelationship+=ResultExpressionMember)
	 */
	protected void sequence_ExpressionBody(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureChain returns Feature
	 *
	 * Constraint:
	 *     (ownedRelationship+=OwnedFeatureChaining ownedRelationship+=OwnedFeatureChaining+)
	 */
	protected void sequence_FeatureChain(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns FeatureReferenceExpression
	 *     ConditionalExpression returns FeatureReferenceExpression
	 *     ConditionalExpression.OperatorExpression_0_1_0 returns FeatureReferenceExpression
	 *     NullCoalescingExpression returns FeatureReferenceExpression
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     ImpliesExpression returns FeatureReferenceExpression
	 *     ImpliesExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     OrExpression returns FeatureReferenceExpression
	 *     OrExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     XorExpression returns FeatureReferenceExpression
	 *     XorExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     AndExpression returns FeatureReferenceExpression
	 *     AndExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     EqualityExpression returns FeatureReferenceExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     ClassificationExpression returns FeatureReferenceExpression
	 *     ClassificationExpression.OperatorExpression_0_1_0 returns FeatureReferenceExpression
	 *     RelationalExpression returns FeatureReferenceExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     RangeExpression returns FeatureReferenceExpression
	 *     RangeExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     AdditiveExpression returns FeatureReferenceExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     MultiplicativeExpression returns FeatureReferenceExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     ExponentiationExpression returns FeatureReferenceExpression
	 *     ExponentiationExpression.OperatorExpression_1_0 returns FeatureReferenceExpression
	 *     UnaryExpression returns FeatureReferenceExpression
	 *     ExtentExpression returns FeatureReferenceExpression
	 *     PrimaryExpression returns FeatureReferenceExpression
	 *     PrimaryExpression.OperatorExpression_1_0_0 returns FeatureReferenceExpression
	 *     PrimaryExpression.OperatorExpression_1_1_0 returns FeatureReferenceExpression
	 *     PrimaryExpression.PathStepExpression_1_2_0 returns FeatureReferenceExpression
	 *     PrimaryExpression.PathSelectExpression_1_3_0 returns FeatureReferenceExpression
	 *     BaseExpression returns FeatureReferenceExpression
	 *     SequenceExpression returns FeatureReferenceExpression
	 *     SequenceExpression.OperatorExpression_1_1_0 returns FeatureReferenceExpression
	 *     FeatureReferenceExpression returns FeatureReferenceExpression
	 *
	 * Constraint:
	 *     ownedRelationship+=FeatureReferenceMember
	 */
	protected void sequence_FeatureReferenceExpression(ISerializationContext context, FeatureReferenceExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureReferenceMember returns Membership
	 *
	 * Constraint:
	 *     memberElement=[Feature|QualifiedName]
	 */
	protected void sequence_FeatureReferenceMember(ISerializationContext context, Membership semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.MEMBERSHIP__MEMBER_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.MEMBERSHIP__MEMBER_ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFeatureReferenceMemberAccess().getMemberElementFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.MEMBERSHIP__MEMBER_ELEMENT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FunctionReferenceMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=FunctionReference
	 */
	protected void sequence_FunctionReferenceMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionReference returns Expression
	 *
	 * Constraint:
	 *     ownedRelationship+=ReferenceTyping
	 */
	protected void sequence_FunctionReference(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns InvocationExpression
	 *     ConditionalExpression returns InvocationExpression
	 *     ConditionalExpression.OperatorExpression_0_1_0 returns InvocationExpression
	 *     NullCoalescingExpression returns InvocationExpression
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     ImpliesExpression returns InvocationExpression
	 *     ImpliesExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     OrExpression returns InvocationExpression
	 *     OrExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     XorExpression returns InvocationExpression
	 *     XorExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     AndExpression returns InvocationExpression
	 *     AndExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     EqualityExpression returns InvocationExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     ClassificationExpression returns InvocationExpression
	 *     ClassificationExpression.OperatorExpression_0_1_0 returns InvocationExpression
	 *     RelationalExpression returns InvocationExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     RangeExpression returns InvocationExpression
	 *     RangeExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     AdditiveExpression returns InvocationExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     MultiplicativeExpression returns InvocationExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     ExponentiationExpression returns InvocationExpression
	 *     ExponentiationExpression.OperatorExpression_1_0 returns InvocationExpression
	 *     UnaryExpression returns InvocationExpression
	 *     ExtentExpression returns InvocationExpression
	 *     PrimaryExpression returns InvocationExpression
	 *     PrimaryExpression.OperatorExpression_1_0_0 returns InvocationExpression
	 *     PrimaryExpression.OperatorExpression_1_1_0 returns InvocationExpression
	 *     PrimaryExpression.PathStepExpression_1_2_0 returns InvocationExpression
	 *     PrimaryExpression.PathSelectExpression_1_3_0 returns InvocationExpression
	 *     BaseExpression returns InvocationExpression
	 *     SequenceExpression returns InvocationExpression
	 *     SequenceExpression.OperatorExpression_1_1_0 returns InvocationExpression
	 *     InvocationExpression returns InvocationExpression
	 *
	 * Constraint:
	 *     (
	 *         ownedRelationship+=OwnedFeatureTyping 
	 *         (
	 *             (ownedRelationship+=OwnedExpressionMember ownedRelationship+=OwnedExpressionMember*) | 
	 *             (ownedRelationship+=NamedExpressionMember ownedRelationship+=NamedExpressionMember*)
	 *         )?
	 *     )
	 */
	protected void sequence_InvocationExpression_NamedArgumentList_PositionalArgumentList(ISerializationContext context, InvocationExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns LiteralBoolean
	 *     ConditionalExpression returns LiteralBoolean
	 *     ConditionalExpression.OperatorExpression_0_1_0 returns LiteralBoolean
	 *     NullCoalescingExpression returns LiteralBoolean
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     ImpliesExpression returns LiteralBoolean
	 *     ImpliesExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     OrExpression returns LiteralBoolean
	 *     OrExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     XorExpression returns LiteralBoolean
	 *     XorExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     AndExpression returns LiteralBoolean
	 *     AndExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     EqualityExpression returns LiteralBoolean
	 *     EqualityExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     ClassificationExpression returns LiteralBoolean
	 *     ClassificationExpression.OperatorExpression_0_1_0 returns LiteralBoolean
	 *     RelationalExpression returns LiteralBoolean
	 *     RelationalExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     RangeExpression returns LiteralBoolean
	 *     RangeExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     AdditiveExpression returns LiteralBoolean
	 *     AdditiveExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     MultiplicativeExpression returns LiteralBoolean
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     ExponentiationExpression returns LiteralBoolean
	 *     ExponentiationExpression.OperatorExpression_1_0 returns LiteralBoolean
	 *     UnaryExpression returns LiteralBoolean
	 *     ExtentExpression returns LiteralBoolean
	 *     PrimaryExpression returns LiteralBoolean
	 *     PrimaryExpression.OperatorExpression_1_0_0 returns LiteralBoolean
	 *     PrimaryExpression.OperatorExpression_1_1_0 returns LiteralBoolean
	 *     PrimaryExpression.PathStepExpression_1_2_0 returns LiteralBoolean
	 *     PrimaryExpression.PathSelectExpression_1_3_0 returns LiteralBoolean
	 *     BaseExpression returns LiteralBoolean
	 *     SequenceExpression returns LiteralBoolean
	 *     SequenceExpression.OperatorExpression_1_1_0 returns LiteralBoolean
	 *     LiteralExpression returns LiteralBoolean
	 *     LiteralBoolean returns LiteralBoolean
	 *
	 * Constraint:
	 *     value=BooleanValue
	 */
	protected void sequence_LiteralBoolean(ISerializationContext context, LiteralBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.LITERAL_BOOLEAN__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.LITERAL_BOOLEAN__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiteralBooleanAccess().getValueBooleanValueParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns LiteralInfinity
	 *     ConditionalExpression returns LiteralInfinity
	 *     ConditionalExpression.OperatorExpression_0_1_0 returns LiteralInfinity
	 *     NullCoalescingExpression returns LiteralInfinity
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns LiteralInfinity
	 *     ImpliesExpression returns LiteralInfinity
	 *     ImpliesExpression.OperatorExpression_1_0 returns LiteralInfinity
	 *     OrExpression returns LiteralInfinity
	 *     OrExpression.OperatorExpression_1_0 returns LiteralInfinity
	 *     XorExpression returns LiteralInfinity
	 *     XorExpression.OperatorExpression_1_0 returns LiteralInfinity
	 *     AndExpression returns LiteralInfinity
	 *     AndExpression.OperatorExpression_1_0 returns LiteralInfinity
	 *     EqualityExpression returns LiteralInfinity
	 *     EqualityExpression.OperatorExpression_1_0 returns LiteralInfinity
	 *     ClassificationExpression returns LiteralInfinity
	 *     ClassificationExpression.OperatorExpression_0_1_0 returns LiteralInfinity
	 *     RelationalExpression returns LiteralInfinity
	 *     RelationalExpression.OperatorExpression_1_0 returns LiteralInfinity
	 *     RangeExpression returns LiteralInfinity
	 *     RangeExpression.OperatorExpression_1_0 returns LiteralInfinity
	 *     AdditiveExpression returns LiteralInfinity
	 *     AdditiveExpression.OperatorExpression_1_0 returns LiteralInfinity
	 *     MultiplicativeExpression returns LiteralInfinity
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns LiteralInfinity
	 *     ExponentiationExpression returns LiteralInfinity
	 *     ExponentiationExpression.OperatorExpression_1_0 returns LiteralInfinity
	 *     UnaryExpression returns LiteralInfinity
	 *     ExtentExpression returns LiteralInfinity
	 *     PrimaryExpression returns LiteralInfinity
	 *     PrimaryExpression.OperatorExpression_1_0_0 returns LiteralInfinity
	 *     PrimaryExpression.OperatorExpression_1_1_0 returns LiteralInfinity
	 *     PrimaryExpression.PathStepExpression_1_2_0 returns LiteralInfinity
	 *     PrimaryExpression.PathSelectExpression_1_3_0 returns LiteralInfinity
	 *     BaseExpression returns LiteralInfinity
	 *     SequenceExpression returns LiteralInfinity
	 *     SequenceExpression.OperatorExpression_1_1_0 returns LiteralInfinity
	 *     LiteralExpression returns LiteralInfinity
	 *     LiteralInfinity returns LiteralInfinity
	 *
	 * Constraint:
	 *     {LiteralInfinity}
	 */
	protected void sequence_LiteralInfinity(ISerializationContext context, LiteralInfinity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns LiteralInteger
	 *     ConditionalExpression returns LiteralInteger
	 *     ConditionalExpression.OperatorExpression_0_1_0 returns LiteralInteger
	 *     NullCoalescingExpression returns LiteralInteger
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     ImpliesExpression returns LiteralInteger
	 *     ImpliesExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     OrExpression returns LiteralInteger
	 *     OrExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     XorExpression returns LiteralInteger
	 *     XorExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     AndExpression returns LiteralInteger
	 *     AndExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     EqualityExpression returns LiteralInteger
	 *     EqualityExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     ClassificationExpression returns LiteralInteger
	 *     ClassificationExpression.OperatorExpression_0_1_0 returns LiteralInteger
	 *     RelationalExpression returns LiteralInteger
	 *     RelationalExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     RangeExpression returns LiteralInteger
	 *     RangeExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     AdditiveExpression returns LiteralInteger
	 *     AdditiveExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     MultiplicativeExpression returns LiteralInteger
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     ExponentiationExpression returns LiteralInteger
	 *     ExponentiationExpression.OperatorExpression_1_0 returns LiteralInteger
	 *     UnaryExpression returns LiteralInteger
	 *     ExtentExpression returns LiteralInteger
	 *     PrimaryExpression returns LiteralInteger
	 *     PrimaryExpression.OperatorExpression_1_0_0 returns LiteralInteger
	 *     PrimaryExpression.OperatorExpression_1_1_0 returns LiteralInteger
	 *     PrimaryExpression.PathStepExpression_1_2_0 returns LiteralInteger
	 *     PrimaryExpression.PathSelectExpression_1_3_0 returns LiteralInteger
	 *     BaseExpression returns LiteralInteger
	 *     SequenceExpression returns LiteralInteger
	 *     SequenceExpression.OperatorExpression_1_1_0 returns LiteralInteger
	 *     LiteralExpression returns LiteralInteger
	 *     LiteralInteger returns LiteralInteger
	 *
	 * Constraint:
	 *     value=DECIMAL_VALUE
	 */
	protected void sequence_LiteralInteger(ISerializationContext context, LiteralInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.LITERAL_INTEGER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.LITERAL_INTEGER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiteralIntegerAccess().getValueDECIMAL_VALUETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns LiteralRational
	 *     ConditionalExpression returns LiteralRational
	 *     ConditionalExpression.OperatorExpression_0_1_0 returns LiteralRational
	 *     NullCoalescingExpression returns LiteralRational
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns LiteralRational
	 *     ImpliesExpression returns LiteralRational
	 *     ImpliesExpression.OperatorExpression_1_0 returns LiteralRational
	 *     OrExpression returns LiteralRational
	 *     OrExpression.OperatorExpression_1_0 returns LiteralRational
	 *     XorExpression returns LiteralRational
	 *     XorExpression.OperatorExpression_1_0 returns LiteralRational
	 *     AndExpression returns LiteralRational
	 *     AndExpression.OperatorExpression_1_0 returns LiteralRational
	 *     EqualityExpression returns LiteralRational
	 *     EqualityExpression.OperatorExpression_1_0 returns LiteralRational
	 *     ClassificationExpression returns LiteralRational
	 *     ClassificationExpression.OperatorExpression_0_1_0 returns LiteralRational
	 *     RelationalExpression returns LiteralRational
	 *     RelationalExpression.OperatorExpression_1_0 returns LiteralRational
	 *     RangeExpression returns LiteralRational
	 *     RangeExpression.OperatorExpression_1_0 returns LiteralRational
	 *     AdditiveExpression returns LiteralRational
	 *     AdditiveExpression.OperatorExpression_1_0 returns LiteralRational
	 *     MultiplicativeExpression returns LiteralRational
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns LiteralRational
	 *     ExponentiationExpression returns LiteralRational
	 *     ExponentiationExpression.OperatorExpression_1_0 returns LiteralRational
	 *     UnaryExpression returns LiteralRational
	 *     ExtentExpression returns LiteralRational
	 *     PrimaryExpression returns LiteralRational
	 *     PrimaryExpression.OperatorExpression_1_0_0 returns LiteralRational
	 *     PrimaryExpression.OperatorExpression_1_1_0 returns LiteralRational
	 *     PrimaryExpression.PathStepExpression_1_2_0 returns LiteralRational
	 *     PrimaryExpression.PathSelectExpression_1_3_0 returns LiteralRational
	 *     BaseExpression returns LiteralRational
	 *     SequenceExpression returns LiteralRational
	 *     SequenceExpression.OperatorExpression_1_1_0 returns LiteralRational
	 *     LiteralExpression returns LiteralRational
	 *     LiteralReal returns LiteralRational
	 *
	 * Constraint:
	 *     value=RealValue
	 */
	protected void sequence_LiteralReal(ISerializationContext context, LiteralRational semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.LITERAL_RATIONAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.LITERAL_RATIONAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiteralRealAccess().getValueRealValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns LiteralString
	 *     ConditionalExpression returns LiteralString
	 *     ConditionalExpression.OperatorExpression_0_1_0 returns LiteralString
	 *     NullCoalescingExpression returns LiteralString
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns LiteralString
	 *     ImpliesExpression returns LiteralString
	 *     ImpliesExpression.OperatorExpression_1_0 returns LiteralString
	 *     OrExpression returns LiteralString
	 *     OrExpression.OperatorExpression_1_0 returns LiteralString
	 *     XorExpression returns LiteralString
	 *     XorExpression.OperatorExpression_1_0 returns LiteralString
	 *     AndExpression returns LiteralString
	 *     AndExpression.OperatorExpression_1_0 returns LiteralString
	 *     EqualityExpression returns LiteralString
	 *     EqualityExpression.OperatorExpression_1_0 returns LiteralString
	 *     ClassificationExpression returns LiteralString
	 *     ClassificationExpression.OperatorExpression_0_1_0 returns LiteralString
	 *     RelationalExpression returns LiteralString
	 *     RelationalExpression.OperatorExpression_1_0 returns LiteralString
	 *     RangeExpression returns LiteralString
	 *     RangeExpression.OperatorExpression_1_0 returns LiteralString
	 *     AdditiveExpression returns LiteralString
	 *     AdditiveExpression.OperatorExpression_1_0 returns LiteralString
	 *     MultiplicativeExpression returns LiteralString
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns LiteralString
	 *     ExponentiationExpression returns LiteralString
	 *     ExponentiationExpression.OperatorExpression_1_0 returns LiteralString
	 *     UnaryExpression returns LiteralString
	 *     ExtentExpression returns LiteralString
	 *     PrimaryExpression returns LiteralString
	 *     PrimaryExpression.OperatorExpression_1_0_0 returns LiteralString
	 *     PrimaryExpression.OperatorExpression_1_1_0 returns LiteralString
	 *     PrimaryExpression.PathStepExpression_1_2_0 returns LiteralString
	 *     PrimaryExpression.PathSelectExpression_1_3_0 returns LiteralString
	 *     BaseExpression returns LiteralString
	 *     SequenceExpression returns LiteralString
	 *     SequenceExpression.OperatorExpression_1_1_0 returns LiteralString
	 *     LiteralExpression returns LiteralString
	 *     LiteralString returns LiteralString
	 *
	 * Constraint:
	 *     value=STRING_VALUE
	 */
	protected void sequence_LiteralString(ISerializationContext context, LiteralString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.LITERAL_STRING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.LITERAL_STRING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiteralStringAccess().getValueSTRING_VALUETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NamedExpressionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     (memberName=Name ownedRelatedElement+=OwnedExpression)
	 */
	protected void sequence_NamedExpressionMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns NullExpression
	 *     ConditionalExpression returns NullExpression
	 *     ConditionalExpression.OperatorExpression_0_1_0 returns NullExpression
	 *     NullCoalescingExpression returns NullExpression
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns NullExpression
	 *     ImpliesExpression returns NullExpression
	 *     ImpliesExpression.OperatorExpression_1_0 returns NullExpression
	 *     OrExpression returns NullExpression
	 *     OrExpression.OperatorExpression_1_0 returns NullExpression
	 *     XorExpression returns NullExpression
	 *     XorExpression.OperatorExpression_1_0 returns NullExpression
	 *     AndExpression returns NullExpression
	 *     AndExpression.OperatorExpression_1_0 returns NullExpression
	 *     EqualityExpression returns NullExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns NullExpression
	 *     ClassificationExpression returns NullExpression
	 *     ClassificationExpression.OperatorExpression_0_1_0 returns NullExpression
	 *     RelationalExpression returns NullExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns NullExpression
	 *     RangeExpression returns NullExpression
	 *     RangeExpression.OperatorExpression_1_0 returns NullExpression
	 *     AdditiveExpression returns NullExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns NullExpression
	 *     MultiplicativeExpression returns NullExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns NullExpression
	 *     ExponentiationExpression returns NullExpression
	 *     ExponentiationExpression.OperatorExpression_1_0 returns NullExpression
	 *     UnaryExpression returns NullExpression
	 *     ExtentExpression returns NullExpression
	 *     PrimaryExpression returns NullExpression
	 *     PrimaryExpression.OperatorExpression_1_0_0 returns NullExpression
	 *     PrimaryExpression.OperatorExpression_1_1_0 returns NullExpression
	 *     PrimaryExpression.PathStepExpression_1_2_0 returns NullExpression
	 *     PrimaryExpression.PathSelectExpression_1_3_0 returns NullExpression
	 *     BaseExpression returns NullExpression
	 *     SequenceExpression returns NullExpression
	 *     SequenceExpression.OperatorExpression_1_1_0 returns NullExpression
	 *     NullExpression returns NullExpression
	 *
	 * Constraint:
	 *     {NullExpression}
	 */
	protected void sequence_NullExpression(ISerializationContext context, NullExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpressionMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=OwnedExpression
	 */
	protected void sequence_OwnedExpressionMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedFeatureChaining returns FeatureChaining
	 *
	 * Constraint:
	 *     chainingFeature=[Feature|QualifiedName]
	 */
	protected void sequence_OwnedFeatureChaining(ISerializationContext context, FeatureChaining semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_CHAINING__CHAINING_FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_CHAINING__CHAINING_FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedFeatureChainingAccess().getChainingFeatureFeatureQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.FEATURE_CHAINING__CHAINING_FEATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OwnedFeatureTyping returns FeatureTyping
	 *
	 * Constraint:
	 *     (type=[Type|QualifiedName] | ownedRelatedElement+=FeatureChain)
	 */
	protected void sequence_OwnedFeatureTyping(ISerializationContext context, FeatureTyping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns PathSelectExpression
	 *     ConditionalExpression returns PathSelectExpression
	 *     ConditionalExpression.OperatorExpression_0_1_0 returns PathSelectExpression
	 *     NullCoalescingExpression returns PathSelectExpression
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns PathSelectExpression
	 *     ImpliesExpression returns PathSelectExpression
	 *     ImpliesExpression.OperatorExpression_1_0 returns PathSelectExpression
	 *     OrExpression returns PathSelectExpression
	 *     OrExpression.OperatorExpression_1_0 returns PathSelectExpression
	 *     XorExpression returns PathSelectExpression
	 *     XorExpression.OperatorExpression_1_0 returns PathSelectExpression
	 *     AndExpression returns PathSelectExpression
	 *     AndExpression.OperatorExpression_1_0 returns PathSelectExpression
	 *     EqualityExpression returns PathSelectExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns PathSelectExpression
	 *     ClassificationExpression returns PathSelectExpression
	 *     ClassificationExpression.OperatorExpression_0_1_0 returns PathSelectExpression
	 *     RelationalExpression returns PathSelectExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns PathSelectExpression
	 *     RangeExpression returns PathSelectExpression
	 *     RangeExpression.OperatorExpression_1_0 returns PathSelectExpression
	 *     AdditiveExpression returns PathSelectExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns PathSelectExpression
	 *     MultiplicativeExpression returns PathSelectExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns PathSelectExpression
	 *     ExponentiationExpression returns PathSelectExpression
	 *     ExponentiationExpression.OperatorExpression_1_0 returns PathSelectExpression
	 *     UnaryExpression returns PathSelectExpression
	 *     ExtentExpression returns PathSelectExpression
	 *     PrimaryExpression returns PathSelectExpression
	 *     PrimaryExpression.OperatorExpression_1_0_0 returns PathSelectExpression
	 *     PrimaryExpression.OperatorExpression_1_1_0 returns PathSelectExpression
	 *     PrimaryExpression.PathStepExpression_1_2_0 returns PathSelectExpression
	 *     PrimaryExpression.PathSelectExpression_1_3_0 returns PathSelectExpression
	 *     BaseExpression returns PathSelectExpression
	 *     SequenceExpression returns PathSelectExpression
	 *     SequenceExpression.OperatorExpression_1_1_0 returns PathSelectExpression
	 *
	 * Constraint:
	 *     (operand+=PrimaryExpression_PathSelectExpression_1_3_0 ownedRelationship+=ExpressionBodyMember)
	 */
	protected void sequence_PrimaryExpression(ISerializationContext context, PathSelectExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedExpression returns PathStepExpression
	 *     ConditionalExpression returns PathStepExpression
	 *     ConditionalExpression.OperatorExpression_0_1_0 returns PathStepExpression
	 *     NullCoalescingExpression returns PathStepExpression
	 *     NullCoalescingExpression.OperatorExpression_1_0 returns PathStepExpression
	 *     ImpliesExpression returns PathStepExpression
	 *     ImpliesExpression.OperatorExpression_1_0 returns PathStepExpression
	 *     OrExpression returns PathStepExpression
	 *     OrExpression.OperatorExpression_1_0 returns PathStepExpression
	 *     XorExpression returns PathStepExpression
	 *     XorExpression.OperatorExpression_1_0 returns PathStepExpression
	 *     AndExpression returns PathStepExpression
	 *     AndExpression.OperatorExpression_1_0 returns PathStepExpression
	 *     EqualityExpression returns PathStepExpression
	 *     EqualityExpression.OperatorExpression_1_0 returns PathStepExpression
	 *     ClassificationExpression returns PathStepExpression
	 *     ClassificationExpression.OperatorExpression_0_1_0 returns PathStepExpression
	 *     RelationalExpression returns PathStepExpression
	 *     RelationalExpression.OperatorExpression_1_0 returns PathStepExpression
	 *     RangeExpression returns PathStepExpression
	 *     RangeExpression.OperatorExpression_1_0 returns PathStepExpression
	 *     AdditiveExpression returns PathStepExpression
	 *     AdditiveExpression.OperatorExpression_1_0 returns PathStepExpression
	 *     MultiplicativeExpression returns PathStepExpression
	 *     MultiplicativeExpression.OperatorExpression_1_0 returns PathStepExpression
	 *     ExponentiationExpression returns PathStepExpression
	 *     ExponentiationExpression.OperatorExpression_1_0 returns PathStepExpression
	 *     UnaryExpression returns PathStepExpression
	 *     ExtentExpression returns PathStepExpression
	 *     PrimaryExpression returns PathStepExpression
	 *     PrimaryExpression.OperatorExpression_1_0_0 returns PathStepExpression
	 *     PrimaryExpression.OperatorExpression_1_1_0 returns PathStepExpression
	 *     PrimaryExpression.PathStepExpression_1_2_0 returns PathStepExpression
	 *     PrimaryExpression.PathSelectExpression_1_3_0 returns PathStepExpression
	 *     BaseExpression returns PathStepExpression
	 *     SequenceExpression returns PathStepExpression
	 *     SequenceExpression.OperatorExpression_1_1_0 returns PathStepExpression
	 *
	 * Constraint:
	 *     (operand+=PrimaryExpression_PathStepExpression_1_2_0 operand+=FeatureReferenceExpression)
	 */
	protected void sequence_PrimaryExpression(ISerializationContext context, PathStepExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReferenceTyping returns FeatureTyping
	 *
	 * Constraint:
	 *     type=[Type|QualifiedName]
	 */
	protected void sequence_ReferenceTyping(ISerializationContext context, FeatureTyping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLPackage.Literals.FEATURE_TYPING__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReferenceTypingAccess().getTypeTypeQualifiedNameParserRuleCall_0_1(), semanticObject.eGet(SysMLPackage.Literals.FEATURE_TYPING__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ResultExpressionMember returns ResultExpressionMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=OwnedExpression
	 */
	protected void sequence_ResultExpressionMember(ISerializationContext context, ResultExpressionMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SelfReferenceExpression returns FeatureReferenceExpression
	 *
	 * Constraint:
	 *     ownedRelationship+=SelfReferenceMember
	 */
	protected void sequence_SelfReferenceExpression(ISerializationContext context, FeatureReferenceExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SelfReferenceMember returns ReturnParameterMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=EmptyFeature
	 */
	protected void sequence_SelfReferenceMember(ISerializationContext context, ReturnParameterMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeReferenceMember returns FeatureMembership
	 *
	 * Constraint:
	 *     ownedRelatedElement+=TypeReference
	 */
	protected void sequence_TypeReferenceMember(ISerializationContext context, FeatureMembership semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeReference returns Feature
	 *
	 * Constraint:
	 *     ownedRelationship+=ReferenceTyping
	 */
	protected void sequence_TypeReference(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
