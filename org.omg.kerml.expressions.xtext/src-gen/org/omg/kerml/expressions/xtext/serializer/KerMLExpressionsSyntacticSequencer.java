/*
 * generated by Xtext 2.25.0
 */
package org.omg.kerml.expressions.xtext.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.omg.kerml.expressions.xtext.services.KerMLExpressionsGrammarAccess;

@SuppressWarnings("all")
public class KerMLExpressionsSyntacticSequencer extends AbstractSyntacticSequencer {

	protected KerMLExpressionsGrammarAccess grammarAccess;
	protected AbstractElementAlias match_BaseExpression_LeftParenthesisKeyword_4_0_a;
	protected AbstractElementAlias match_BaseExpression_LeftParenthesisKeyword_4_0_p;
	protected AbstractElementAlias match_NullExpression_NullKeyword_1_0_or___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_1__;
	protected AbstractElementAlias match_SequenceExpression_CommaKeyword_1_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (KerMLExpressionsGrammarAccess) access;
		match_BaseExpression_LeftParenthesisKeyword_4_0_a = new TokenAlias(true, true, grammarAccess.getBaseExpressionAccess().getLeftParenthesisKeyword_4_0());
		match_BaseExpression_LeftParenthesisKeyword_4_0_p = new TokenAlias(true, false, grammarAccess.getBaseExpressionAccess().getLeftParenthesisKeyword_4_0());
		match_NullExpression_NullKeyword_1_0_or___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getNullExpressionAccess().getLeftParenthesisKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getNullExpressionAccess().getRightParenthesisKeyword_1_1_1())), new TokenAlias(false, false, grammarAccess.getNullExpressionAccess().getNullKeyword_1_0()));
		match_SequenceExpression_CommaKeyword_1_0_q = new TokenAlias(false, true, grammarAccess.getSequenceExpressionAccess().getCommaKeyword_1_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_BaseExpression_LeftParenthesisKeyword_4_0_a.equals(syntax))
				emit_BaseExpression_LeftParenthesisKeyword_4_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BaseExpression_LeftParenthesisKeyword_4_0_p.equals(syntax))
				emit_BaseExpression_LeftParenthesisKeyword_4_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NullExpression_NullKeyword_1_0_or___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_1__.equals(syntax))
				emit_NullExpression_NullKeyword_1_0_or___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SequenceExpression_CommaKeyword_1_0_q.equals(syntax))
				emit_SequenceExpression_CommaKeyword_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '*' (rule start)
	 *     (rule start) (ambiguity) '{' ownedRelationship+=BodyParameterMember
	 *     (rule start) (ambiguity) '{' ownedRelationship+=ResultExpressionMember
	 *     (rule start) (ambiguity) ('null' | ('(' ')')) (rule start)
	 *     (rule start) (ambiguity) operand+=SelfReferenceExpression
	 *     (rule start) (ambiguity) operator='all'
	 *     (rule start) (ambiguity) operator=UnaryOperator
	 *     (rule start) (ambiguity) ownedRelationship+=FeatureReferenceMember
	 *     (rule start) (ambiguity) ownedRelationship+=OwnedFeatureTyping
	 *     (rule start) (ambiguity) value=BooleanValue
	 *     (rule start) (ambiguity) value=DECIMAL_VALUE
	 *     (rule start) (ambiguity) value=RealValue
	 *     (rule start) (ambiguity) value=STRING_VALUE
	 *     (rule start) (ambiguity) {OperatorExpression.operand+=}
	 *     (rule start) (ambiguity) {PathSelectExpression.operand+=}
	 *     (rule start) (ambiguity) {PathStepExpression.operand+=}
	 */
	protected void emit_BaseExpression_LeftParenthesisKeyword_4_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '{' ownedRelationship+=BodyParameterMember
	 *     (rule start) (ambiguity) '{' ownedRelationship+=ResultExpressionMember
	 *     (rule start) (ambiguity) operand+=SelfReferenceExpression
	 *     (rule start) (ambiguity) operator='all'
	 *     (rule start) (ambiguity) operator=UnaryOperator
	 *     (rule start) (ambiguity) {OperatorExpression.operand+=}
	 *     (rule start) (ambiguity) {PathSelectExpression.operand+=}
	 *     (rule start) (ambiguity) {PathStepExpression.operand+=}
	 */
	protected void emit_BaseExpression_LeftParenthesisKeyword_4_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'null' | ('(' ')')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('* (ambiguity) (rule start)
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_NullExpression_NullKeyword_1_0_or___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     operand+=AdditiveExpression (ambiguity) ')' (rule end)
	 *     operand+=AndExpression (ambiguity) ')' (rule end)
	 *     operand+=ClassificationExpression (ambiguity) ')' (rule end)
	 *     operand+=ConditionalAndExpression (ambiguity) ')' (rule end)
	 *     operand+=ConditionalExpression (ambiguity) ')' (rule end)
	 *     operand+=ConditionalOrExpression (ambiguity) ')' (rule end)
	 *     operand+=EqualityExpression (ambiguity) ')' (rule end)
	 *     operand+=ExponentiationExpression (ambiguity) ')' (rule end)
	 *     operand+=ExtentExpression (ambiguity) ')' (rule end)
	 *     operand+=FeatureReferenceExpression (ambiguity) ')' (rule end)
	 *     operand+=MultiplicativeExpression (ambiguity) ')' (rule end)
	 *     operand+=OrExpression (ambiguity) ')' (rule end)
	 *     operand+=OwnedExpression ']' (ambiguity) ')' (rule end)
	 *     operand+=RangeExpression (ambiguity) ')' (rule end)
	 *     operand+=SequenceExpression ']' (ambiguity) ')' (rule end)
	 *     operand+=UnitsExpression (ambiguity) ')' (rule end)
	 *     operand+=XorExpression (ambiguity) ')' (rule end)
	 *     ownedRelationship+=ExpressionBodyMember (ambiguity) ')' (rule end)
	 *     ownedRelationship+=FunctionReferenceMember (ambiguity) ')' (rule end)
	 *     ownedRelationship+=NamedExpressionMember ')' (ambiguity) ')' (rule end)
	 *     ownedRelationship+=OwnedExpressionMember ')' (ambiguity) ')' (rule end)
	 *     ownedRelationship+=OwnedFeatureTyping '(' ')' (ambiguity) ')' (rule end)
	 *     ownedRelationship+=ResultExpressionMember '}' (ambiguity) ')' (rule end)
	 *     ownedRelationship+=TypeReferenceMember (ambiguity) ')' (rule end)
	 */
	protected void emit_SequenceExpression_CommaKeyword_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
