/**
 * generated by Xtext 2.12.0
 */
package org.omg.sysml.ui.outline;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.swt.graphics.Image;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.omg.sysml.lang.sysml.Element;
import org.omg.sysml.lang.sysml.Feature;
import org.omg.sysml.lang.sysml.Generalization;
import org.omg.sysml.lang.sysml.Import;
import org.omg.sysml.lang.sysml.Membership;
import org.omg.sysml.lang.sysml.Redefinition;
import org.omg.sysml.lang.sysml.Subset;
import org.omg.sysml.lang.sysml.SysMLPackage;
import org.omg.sysml.lang.sysml.VisibilityKind;

/**
 * Customization of the default outline structure.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
@SuppressWarnings("all")
public class AlfOutlineTreeProvider extends DefaultOutlineTreeProvider {
  public String _text(final Element element) {
    String _xblockexpression = null;
    {
      String text = element.eClass().getName();
      String _name = element.getName();
      boolean _tripleNotEquals = (_name != null);
      if (_tripleNotEquals) {
        String _text = text;
        String _name_1 = element.getName();
        String _plus = (" " + _name_1);
        text = (_text + _plus);
      } else {
        if ((element instanceof Membership)) {
          Membership member = ((Membership) element);
          VisibilityKind _visibility = member.getVisibility();
          boolean _tripleNotEquals_1 = (_visibility != null);
          if (_tripleNotEquals_1) {
            String _text_1 = text;
            VisibilityKind _visibility_1 = member.getVisibility();
            String _plus_1 = (" " + _visibility_1);
            text = (_text_1 + _plus_1);
          }
          String _memberName = member.getMemberName();
          boolean _tripleNotEquals_2 = (_memberName != null);
          if (_tripleNotEquals_2) {
            String _text_2 = text;
            String _memberName_1 = member.getMemberName();
            String _plus_2 = (" " + _memberName_1);
            text = (_text_2 + _plus_2);
          } else {
            Element _ownedMemberElement = member.getOwnedMemberElement();
            boolean _tripleNotEquals_3 = (_ownedMemberElement != null);
            if (_tripleNotEquals_3) {
              String _text_3 = text;
              text = (_text_3 + " owns");
              String _name_2 = member.getOwnedMemberElement().getName();
              boolean _tripleNotEquals_4 = (_name_2 != null);
              if (_tripleNotEquals_4) {
                String _text_4 = text;
                String _name_3 = member.getOwnedMemberElement().getName();
                String _plus_3 = (" " + _name_3);
                text = (_text_4 + _plus_3);
              }
            } else {
              Element _memberElement = member.getMemberElement();
              boolean _tripleNotEquals_5 = (_memberElement != null);
              if (_tripleNotEquals_5) {
                String _name_4 = member.getMemberElement().getName();
                boolean _tripleNotEquals_6 = (_name_4 != null);
                if (_tripleNotEquals_6) {
                  String _text_5 = text;
                  String _name_5 = member.getMemberElement().getName();
                  String _plus_4 = (" " + _name_5);
                  text = (_text_5 + _plus_4);
                }
              }
            }
          }
        } else {
          if ((element instanceof Import)) {
            Import import_ = ((Import) element);
            VisibilityKind _visibility_2 = import_.getVisibility();
            boolean _tripleNotEquals_7 = (_visibility_2 != null);
            if (_tripleNotEquals_7) {
              String _text_6 = text;
              VisibilityKind _visibility_3 = import_.getVisibility();
              String _plus_5 = (" " + _visibility_3);
              text = (_text_6 + _plus_5);
            }
            if (((import_.getImportedPackage() != null) && 
              (import_.getImportedPackage().getName() != null))) {
              String _text_7 = text;
              String _name_6 = import_.getImportedPackage().getName();
              String _plus_6 = (" " + _name_6);
              text = (_text_7 + _plus_6);
            }
          }
        }
      }
      _xblockexpression = text;
    }
    return _xblockexpression;
  }
  
  public boolean _isLeaf(final Membership membership) {
    return false;
  }
  
  public void _createChildren(final IOutlineNode parentNode, final Membership membership) {
    Element memberElement = membership.getMemberElement();
    if (((membership.getOwnedMemberElement() == null) && 
      (memberElement != null))) {
      Image __image = this._image(memberElement);
      String __text = this._text(memberElement);
      this.createEObjectNode(parentNode, memberElement, __image, __text, 
        (Objects.equal(membership.getOwningPackage(), memberElement) || this._isLeaf(memberElement)));
    }
    super._createChildren(parentNode, membership);
  }
  
  public boolean _isLeaf(final Import _import) {
    org.omg.sysml.lang.sysml.Package _importedPackage = _import.getImportedPackage();
    return (_importedPackage != null);
  }
  
  public void _createChildren(final IOutlineNode parentNode, final Import _import) {
    org.omg.sysml.lang.sysml.Package importedPackage = _import.getImportedPackage();
    if ((importedPackage != null)) {
      Image __image = this._image(importedPackage);
      String __text = this._text(importedPackage);
      this.createEObjectNode(parentNode, importedPackage, __image, __text, 
        (Objects.equal(_import.getImportingPackage(), importedPackage) || this._isLeaf(importedPackage)));
    }
  }
  
  public boolean _isLeaf(final Feature feature) {
    return (super._isLeaf(feature) && feature.getReferencedType().isEmpty());
  }
  
  public void _createChildren(final IOutlineNode parentNode, final Feature feature) {
    EList<org.omg.sysml.lang.sysml.Class> referencedTypes = feature.getReferencedType();
    boolean _isEmpty = referencedTypes.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      Image __image = this._image(referencedTypes);
      String __text = this._text(referencedTypes.get(0));
      String _plus = ("type " + __text);
      this.createEStructuralFeatureNode(parentNode, feature, 
        SysMLPackage.Literals.FEATURE__REFERENCED_TYPE, __image, _plus, 
        (Objects.equal(referencedTypes.get(0), feature) || this._isLeaf(referencedTypes.get(0))));
    }
    super._createChildren(parentNode, feature);
  }
  
  public boolean _isLeaf(final Generalization generalization) {
    org.omg.sysml.lang.sysml.Class _general = generalization.getGeneral();
    return (_general == null);
  }
  
  public void _createChildren(final IOutlineNode parentNode, final Generalization generalization) {
    org.omg.sysml.lang.sysml.Class _general = generalization.getGeneral();
    boolean _tripleNotEquals = (_general != null);
    if (_tripleNotEquals) {
      org.omg.sysml.lang.sysml.Class _general_1 = generalization.getGeneral();
      Image __image = this._image(generalization.getGeneral());
      String __text = this._text(generalization.getGeneral());
      this.createEObjectNode(parentNode, _general_1, __image, __text, 
        (Objects.equal(generalization.getOwner(), generalization.getGeneral()) || this._isLeaf(generalization.getGeneral())));
    }
  }
  
  public boolean _isLeaf(final Redefinition redefinition) {
    Feature _redefinedFeature = redefinition.getRedefinedFeature();
    return (_redefinedFeature == null);
  }
  
  public void _createChildren(final IOutlineNode parentNode, final Redefinition redefinition) {
    Feature _redefinedFeature = redefinition.getRedefinedFeature();
    boolean _tripleNotEquals = (_redefinedFeature != null);
    if (_tripleNotEquals) {
      Feature _redefinedFeature_1 = redefinition.getRedefinedFeature();
      Image __image = this._image(redefinition.getRedefinedFeature());
      String __text = this._text(redefinition.getRedefinedFeature());
      this.createEObjectNode(parentNode, _redefinedFeature_1, __image, __text, 
        (Objects.equal(redefinition.getOwner(), redefinition.getRedefinedFeature()) || this._isLeaf(redefinition.getRedefinedFeature())));
    }
  }
  
  public boolean _isLeaf(final Subset subset) {
    Feature _subsettedFeature = subset.getSubsettedFeature();
    return (_subsettedFeature == null);
  }
  
  public void _createChildren(final IOutlineNode parentNode, final Subset subset) {
    Feature _subsettedFeature = subset.getSubsettedFeature();
    boolean _tripleNotEquals = (_subsettedFeature != null);
    if (_tripleNotEquals) {
      Feature _subsettedFeature_1 = subset.getSubsettedFeature();
      Image __image = this._image(subset.getSubsettedFeature());
      String __text = this._text(subset.getSubsettedFeature());
      this.createEObjectNode(parentNode, _subsettedFeature_1, __image, __text, 
        (Objects.equal(subset.getOwner(), subset.getSubsettedFeature()) || this._isLeaf(subset.getSubsettedFeature())));
    }
  }
}
