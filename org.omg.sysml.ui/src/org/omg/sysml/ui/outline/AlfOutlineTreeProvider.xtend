/*
 * generated by Xtext 2.12.0
 */
package org.omg.sysml.ui.outline

import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.omg.sysml.lang.sysml.Element
import org.omg.sysml.lang.sysml.Feature
import org.omg.sysml.lang.sysml.Generalization
import org.omg.sysml.lang.sysml.Membership
import org.omg.sysml.lang.sysml.Redefinition
import org.omg.sysml.lang.sysml.Import
import org.omg.sysml.lang.sysml.ConnectorEnd
import org.omg.sysml.lang.sysml.Subsetting
import org.omg.sysml.lang.sysml.OperatorExpression
import org.omg.sysml.lang.sysml.Relationship
import org.omg.sysml.lang.sysml.LiteralString
import org.omg.sysml.lang.sysml.LiteralBoolean
import org.omg.sysml.lang.sysml.LiteralInteger
import org.omg.sysml.lang.sysml.LiteralReal
import org.omg.sysml.lang.sysml.LiteralUnbounded
import org.omg.sysml.lang.sysml.LiteralNull
import org.omg.sysml.lang.sysml.FeatureMembership
import org.omg.sysml.lang.sysml.Expression
import org.omg.sysml.lang.sysml.ElementReferenceExpression

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
class AlfOutlineTreeProvider extends DefaultOutlineTreeProvider {

	def String _text(Element element) {
		var text = element.eClass.name;
		if (element.name !== null) {
			text += ' ' + element.name;
		} else if (element instanceof Membership) {
			if (element.visibility !== null) {
				text += ' ' + element.visibility;
			}
			if (element.ownedMemberElement !== null) {
				text += ' owns'
			}
			if (element instanceof FeatureMembership) {
				if (element.direction !== null) {
					text += ' ' + element.direction
				}
			}
			if (element.memberName !== null) {
				text += ' ' + element.memberName
			} else if (element.memberElement?.name !== null) {
				text += ' ' + element.memberElement.name;
			}
		} else if (element instanceof Import) {
			if (element.visibility !== null) {
				text += ' ' + element.visibility
			}
			if (element.importedPackage?.name !== null) {
				text += ' ' + element.importedPackage.name
			}
		}
		text 
	}
	
	def String _text(LiteralString literal) {
		"LiteralString " + literal.value
	}
	
	def String _text(LiteralBoolean literal) {
		"LiteralBoolean " + literal.value
	}
	
	def String _text(LiteralInteger literal) {
		"LiteralInteger " + literal.value
	}
	
	def String _text(LiteralReal literal) {
		"LiteralReal " + literal.value
	}
	
	def String _text(LiteralUnbounded literal) {
		"LiteralUnbounded *"
	}
	
	def String _text(LiteralNull literal) {
		"LiteralNull null"
	}
	
	def boolean _isLeaf(Membership membership) {
		false
	}
	
	def void _createChildren(IOutlineNode parentNode, Membership membership) {
		super._createChildren(parentNode, membership)
		var memberElement = membership.memberElement;
		if (membership.ownedMemberElement === null && 
				memberElement !== null) {
			createEObjectNode(parentNode, memberElement, 
				memberElement._image, memberElement._text, 
				membership.membershipOwningPackage == memberElement || memberElement._isLeaf
			)
		}
	}
	
	def boolean _isLeaf(Import _import) {
		_import.importedPackage === null && _import.ownedElement.isEmpty
	}
	
	def void _createChildren(IOutlineNode parentNode, Import _import) {
		super._createChildren(parentNode, _import)
		var importedPackage = _import.importedPackage;
		if (importedPackage !== null) {
			createEObjectNode(parentNode, importedPackage, 
				importedPackage._image, importedPackage._text, 
				_import.importOwningPackage == importedPackage || importedPackage._isLeaf
			)
		}
	}
	
	def boolean _isLeaf(org.omg.sysml.lang.sysml.Class class_) {
		// Ensure default subclassing
		class_.ownedSuperclassing
		super._isLeaf(class_)
	}
	
	def boolean _isLeaf(Feature feature) {
		// Ensure default redefinition/subsetting
		feature.ownedRedefinition
		// Ensure valuation connector
		feature.feature
		super._isLeaf(feature)
	}
	
	def boolean _isLeaf(Generalization generalization) {
		generalization.general === null
	}
	
	def void _createChildren(IOutlineNode parentNode, Generalization generalization) {
		if (generalization.general !== null) {
			createEObjectNode(parentNode, generalization.general, 
				generalization.general._image, generalization.general._text, 
				true
			)
		}
	}
	
	def boolean _isLeaf(Redefinition redefinition) {
		redefinition.redefinedFeature === null
	}

	def void _createChildren(IOutlineNode parentNode, Redefinition redefinition) {
		if (redefinition.redefinedFeature !== null) {
			createEObjectNode(parentNode, redefinition.redefinedFeature, 
				redefinition.redefinedFeature._image, redefinition.redefinedFeature._text, 
				true
			)
		}
	}

	def boolean _isLeaf(Subsetting subset) {
		subset.subsettedFeature === null
	}

	def void _createChildren(IOutlineNode parentNode, Subsetting subset) {
		if (subset.subsettedFeature !== null) {
			createEObjectNode(parentNode, subset.subsettedFeature, 
				_image(subset.subsettedFeature), subset.subsettedFeature._text, 
				true
			)
		}
	}
	
	def boolean _isLeaf(ConnectorEnd connectorEnd) {
		connectorEnd.end === null && connectorEnd.feature === null;
	}
	
	def void _createChildren(IOutlineNode parentNode, ConnectorEnd connectorEnd) {
		if (connectorEnd.end !== null) {
			createEObjectNode(parentNode, connectorEnd.end, 
				_image(connectorEnd.end), "end " + connectorEnd.end._text, 
				true
			)
		}
		if (connectorEnd.feature !== null) {
			createEObjectNode(parentNode, connectorEnd.feature, 
				_image(connectorEnd.feature), "feature " + connectorEnd.feature._text, 
				true
			)
		}
	}
	
	def boolean _isLeaf(Expression expression) {
		// Ensure derivation of inputs and outputs
		expression.input
		expression.output
		return _isLeaf(expression as Feature)
	}
	
	def boolean _isLeaf(ElementReferenceExpression expression) {
		// Ensure derivation of referent feature
		expression.referent
		_isLeaf(expression as Expression)
	}
	
	def boolean _isLeaf(OperatorExpression expression) {
		// Ensure derivation of typing
		expression.typing
		_isLeaf(expression as Expression) && expression.ownedMembership.isEmpty
	}
	
	def void _createChildren(IOutlineNode parentNode, OperatorExpression expression) {
		for (Relationship relationship : expression.allOwnedRelationships) {
			createEObjectNode(parentNode, relationship, 
				_image(relationship), relationship._text, false
			);
		}
	}

}
