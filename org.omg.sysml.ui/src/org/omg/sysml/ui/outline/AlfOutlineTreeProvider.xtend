/*
 * generated by Xtext 2.12.0
 */
package org.omg.sysml.ui.outline

import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.omg.sysml.lang.sysml.Element
import org.omg.sysml.lang.sysml.Feature
import org.omg.sysml.lang.sysml.Generalization
import org.omg.sysml.lang.sysml.SysMLPackage
import org.omg.sysml.lang.sysml.Membership
import org.omg.sysml.lang.sysml.Redefinition
import org.omg.sysml.lang.sysml.Subset
import org.omg.sysml.lang.sysml.Import

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
class AlfOutlineTreeProvider extends DefaultOutlineTreeProvider {

	def String _text(Element element) {
		var text = element.eClass.name;
		if (element.name !== null) {
			text += ' ' + element.name;
		} else if (element instanceof Membership) {
			var member = element as Membership;
			if (member.visibility !== null) {
				text += ' ' + member.visibility;
			}
			if (member.memberName !== null) {
				text += ' ' + member.memberName
			} else if (member.ownedMemberElement !== null) {
				if (member.ownedMemberElement.name !== null) {
					text += ' ' + member.ownedMemberElement.name;
				}
			} else if (member.memberElement !== null) {
				if (member.memberElement.name !== null) {
					text += ' ' + member.memberElement.name;
				}
			}
		}
		text 
	}
	
	def boolean _isLeaf(Membership membership) {
		false
	}
	
	def void _createChildren(IOutlineNode parentNode, Membership membership) {
		var memberElement = membership.memberElement;
		if (membership.ownedMemberElement === null && 
				memberElement !== null) {
			createEStructuralFeatureNode(parentNode, membership, 
				SysMLPackage.Literals.IMPORT__IMPORTED_PACKAGE, 
				_image(memberElement), "imports " + memberElement._text, 
				memberElement._isLeaf
			)
		}
		super._createChildren(parentNode, membership)
	}
	
	def boolean _isLeaf(Import _import) {
		false
	}
	
	def void _createChildren(IOutlineNode parentNode, Import _import) {
		var importedPackage = _import.importedPackage;
		if (importedPackage !== null) {
			createEStructuralFeatureNode(parentNode, _import, 
				SysMLPackage.Literals.IMPORT__IMPORTED_PACKAGE, 
				_image(importedPackage), "imports " + importedPackage._text, 
				importedPackage._isLeaf
			)
		}
	}
	
	def boolean _isLeaf(Feature feature) {
		false
	}
	
	def void _createChildren(IOutlineNode parentNode, Feature feature) {
		var referencedTypes = feature.referencedType
		if (!referencedTypes.isEmpty) {
			createEStructuralFeatureNode(parentNode, feature, 
				SysMLPackage.Literals.FEATURE__REFERENCED_TYPE, 
				_image(referencedTypes), "type " + referencedTypes.get(0)._text, 
				referencedTypes.get(0)._isLeaf
			)
		}
		super._createChildren(parentNode, feature)
	}

	def boolean _isLeaf(Generalization generalization) {
		generalization === null
	}
	
	def void _createChildren(IOutlineNode parentNode, Generalization generalization) {
		if (generalization.general !== null) {
			createEStructuralFeatureNode(parentNode, generalization, 
				SysMLPackage.Literals.GENERALIZATION__GENERAL, 
				_image(generalization.general), "general " + generalization.general._text, 
				generalization.general._isLeaf
			)
		}
	}
	
	def boolean _isLeaf(Redefinition redefinition) {
		redefinition === null
	}

	def void _createChildren(IOutlineNode parentNode, Redefinition redefinition) {
		if (redefinition.redefinedFeature !== null) {
			createEStructuralFeatureNode(parentNode, redefinition, 
				SysMLPackage.Literals.REDEFINITION__REDEFINED_FEATURE, 
				_image(redefinition.redefinedFeature), "redefines " + redefinition.redefinedFeature._text, 
				redefinition.redefinedFeature._isLeaf
			)
		}
	}

	def boolean _isLeaf(Subset subset) {
		subset === null
	}

	def void _createChildren(IOutlineNode parentNode, Subset subset) {
		if (subset.subsettedFeature !== null) {
			createEStructuralFeatureNode(parentNode, subset, 
				SysMLPackage.Literals.SUBSET__SUBSETTED_FEATURE, 
				_image(subset.subsettedFeature), "subsets " + subset.subsettedFeature._text, 
				subset.subsettedFeature._isLeaf
			)
		}
	}

}
