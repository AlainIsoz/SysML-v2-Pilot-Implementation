/**
 * generated by Xtext 2.18.0.M3
 */
package org.omg.kerml.owl.owl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.omg.kerml.owl.owl.Annotation;
import org.omg.kerml.owl.owl.AnnotationAssertion;
import org.omg.kerml.owl.owl.AnnotationAxiom;
import org.omg.kerml.owl.owl.AnnotationProperty;
import org.omg.kerml.owl.owl.AnnotationPropertyDomain;
import org.omg.kerml.owl.owl.AnnotationPropertyRange;
import org.omg.kerml.owl.owl.AnnotationSubject;
import org.omg.kerml.owl.owl.AnnotationValue;
import org.omg.kerml.owl.owl.AnonymousIndividual;
import org.omg.kerml.owl.owl.AnonymousIndividualReference;
import org.omg.kerml.owl.owl.Assertion;
import org.omg.kerml.owl.owl.AsymmetricObjectProperty;
import org.omg.kerml.owl.owl.Axiom;
import org.omg.kerml.owl.owl.ClassAssertion;
import org.omg.kerml.owl.owl.ClassAxiom;
import org.omg.kerml.owl.owl.ClassExpression;
import org.omg.kerml.owl.owl.ClassReference;
import org.omg.kerml.owl.owl.DataAllValuesFrom;
import org.omg.kerml.owl.owl.DataComplementOf;
import org.omg.kerml.owl.owl.DataExactCardinality;
import org.omg.kerml.owl.owl.DataHasValue;
import org.omg.kerml.owl.owl.DataIntersectionOf;
import org.omg.kerml.owl.owl.DataMaxCardinality;
import org.omg.kerml.owl.owl.DataMinCardinality;
import org.omg.kerml.owl.owl.DataOneOf;
import org.omg.kerml.owl.owl.DataProperty;
import org.omg.kerml.owl.owl.DataPropertyAssertion;
import org.omg.kerml.owl.owl.DataPropertyAxiom;
import org.omg.kerml.owl.owl.DataPropertyDomain;
import org.omg.kerml.owl.owl.DataPropertyExpression;
import org.omg.kerml.owl.owl.DataPropertyRange;
import org.omg.kerml.owl.owl.DataPropertyReference;
import org.omg.kerml.owl.owl.DataRange;
import org.omg.kerml.owl.owl.DataSomeValuesFrom;
import org.omg.kerml.owl.owl.DataUnionOf;
import org.omg.kerml.owl.owl.Datatype;
import org.omg.kerml.owl.owl.DatatypeDefinition;
import org.omg.kerml.owl.owl.DatatypeReference;
import org.omg.kerml.owl.owl.DatatypeRestriction;
import org.omg.kerml.owl.owl.Declaration;
import org.omg.kerml.owl.owl.DifferentIndividuals;
import org.omg.kerml.owl.owl.DisjointClasses;
import org.omg.kerml.owl.owl.DisjointDataProperties;
import org.omg.kerml.owl.owl.DisjointObjectProperties;
import org.omg.kerml.owl.owl.DisjointUnion;
import org.omg.kerml.owl.owl.Entity;
import org.omg.kerml.owl.owl.EquivalentClasses;
import org.omg.kerml.owl.owl.EquivalentDataProperties;
import org.omg.kerml.owl.owl.EquivalentObjectProperties;
import org.omg.kerml.owl.owl.FacetRestriction;
import org.omg.kerml.owl.owl.FunctionalDataProperty;
import org.omg.kerml.owl.owl.FunctionalObjectProperty;
import org.omg.kerml.owl.owl.HasKey;
import org.omg.kerml.owl.owl.Individual;
import org.omg.kerml.owl.owl.IndividualReference;
import org.omg.kerml.owl.owl.InverseFunctionalObjectProperty;
import org.omg.kerml.owl.owl.InverseObjectProperties;
import org.omg.kerml.owl.owl.InverseObjectProperty;
import org.omg.kerml.owl.owl.IrreflexiveObjectProperty;
import org.omg.kerml.owl.owl.Literal;
import org.omg.kerml.owl.owl.NamedIndividual;
import org.omg.kerml.owl.owl.NamedIndividualReference;
import org.omg.kerml.owl.owl.NegativeDataPropertyAssertion;
import org.omg.kerml.owl.owl.NegativeObjectPropertyAssertion;
import org.omg.kerml.owl.owl.ObjectAllValuesFrom;
import org.omg.kerml.owl.owl.ObjectComplementOf;
import org.omg.kerml.owl.owl.ObjectExactCardinality;
import org.omg.kerml.owl.owl.ObjectHasSelf;
import org.omg.kerml.owl.owl.ObjectHasValue;
import org.omg.kerml.owl.owl.ObjectIntersectionOf;
import org.omg.kerml.owl.owl.ObjectMaxCardinality;
import org.omg.kerml.owl.owl.ObjectMinCardinality;
import org.omg.kerml.owl.owl.ObjectOneOf;
import org.omg.kerml.owl.owl.ObjectProperty;
import org.omg.kerml.owl.owl.ObjectPropertyAssertion;
import org.omg.kerml.owl.owl.ObjectPropertyAxiom;
import org.omg.kerml.owl.owl.ObjectPropertyDomain;
import org.omg.kerml.owl.owl.ObjectPropertyExpression;
import org.omg.kerml.owl.owl.ObjectPropertyRange;
import org.omg.kerml.owl.owl.ObjectPropertyReference;
import org.omg.kerml.owl.owl.ObjectSomeValuesFrom;
import org.omg.kerml.owl.owl.ObjectUnionOf;
import org.omg.kerml.owl.owl.Ontology;
import org.omg.kerml.owl.owl.OntologyDocument;
import org.omg.kerml.owl.owl.OntologyFile;
import org.omg.kerml.owl.owl.OwlPackage;
import org.omg.kerml.owl.owl.PrefixDeclaration;
import org.omg.kerml.owl.owl.ReflexiveObjectProperty;
import org.omg.kerml.owl.owl.SameIndividual;
import org.omg.kerml.owl.owl.StringLiteral;
import org.omg.kerml.owl.owl.SubAnnotationPropertyOf;
import org.omg.kerml.owl.owl.SubClassOf;
import org.omg.kerml.owl.owl.SubDataPropertyOf;
import org.omg.kerml.owl.owl.SubObjectPropertyOf;
import org.omg.kerml.owl.owl.SymmetricObjectProperty;
import org.omg.kerml.owl.owl.TransitiveObjectProperty;
import org.omg.kerml.owl.owl.TypedLiteral;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.omg.kerml.owl.owl.OwlPackage
 * @generated
 */
public class OwlAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static OwlPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OwlAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = OwlPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OwlSwitch<Adapter> modelSwitch =
    new OwlSwitch<Adapter>()
    {
      @Override
      public Adapter caseOntologyFile(OntologyFile object)
      {
        return createOntologyFileAdapter();
      }
      @Override
      public Adapter caseOntologyDocument(OntologyDocument object)
      {
        return createOntologyDocumentAdapter();
      }
      @Override
      public Adapter casePrefixDeclaration(PrefixDeclaration object)
      {
        return createPrefixDeclarationAdapter();
      }
      @Override
      public Adapter caseOntology(Ontology object)
      {
        return createOntologyAdapter();
      }
      @Override
      public Adapter caseEntity(Entity object)
      {
        return createEntityAdapter();
      }
      @Override
      public Adapter caseClass(org.omg.kerml.owl.owl.Class object)
      {
        return createClassAdapter();
      }
      @Override
      public Adapter caseDatatype(Datatype object)
      {
        return createDatatypeAdapter();
      }
      @Override
      public Adapter caseObjectProperty(ObjectProperty object)
      {
        return createObjectPropertyAdapter();
      }
      @Override
      public Adapter caseDataProperty(DataProperty object)
      {
        return createDataPropertyAdapter();
      }
      @Override
      public Adapter caseAnnotationProperty(AnnotationProperty object)
      {
        return createAnnotationPropertyAdapter();
      }
      @Override
      public Adapter caseIndividual(Individual object)
      {
        return createIndividualAdapter();
      }
      @Override
      public Adapter caseNamedIndividual(NamedIndividual object)
      {
        return createNamedIndividualAdapter();
      }
      @Override
      public Adapter caseAnonymousIndividual(AnonymousIndividual object)
      {
        return createAnonymousIndividualAdapter();
      }
      @Override
      public Adapter caseLiteral(Literal object)
      {
        return createLiteralAdapter();
      }
      @Override
      public Adapter caseTypedLiteral(TypedLiteral object)
      {
        return createTypedLiteralAdapter();
      }
      @Override
      public Adapter caseStringLiteral(StringLiteral object)
      {
        return createStringLiteralAdapter();
      }
      @Override
      public Adapter caseDeclaration(Declaration object)
      {
        return createDeclarationAdapter();
      }
      @Override
      public Adapter caseObjectPropertyExpression(ObjectPropertyExpression object)
      {
        return createObjectPropertyExpressionAdapter();
      }
      @Override
      public Adapter caseObjectPropertyReference(ObjectPropertyReference object)
      {
        return createObjectPropertyReferenceAdapter();
      }
      @Override
      public Adapter caseInverseObjectProperty(InverseObjectProperty object)
      {
        return createInverseObjectPropertyAdapter();
      }
      @Override
      public Adapter caseDataPropertyExpression(DataPropertyExpression object)
      {
        return createDataPropertyExpressionAdapter();
      }
      @Override
      public Adapter caseDataPropertyReference(DataPropertyReference object)
      {
        return createDataPropertyReferenceAdapter();
      }
      @Override
      public Adapter caseDataRange(DataRange object)
      {
        return createDataRangeAdapter();
      }
      @Override
      public Adapter caseDatatypeReference(DatatypeReference object)
      {
        return createDatatypeReferenceAdapter();
      }
      @Override
      public Adapter caseDataIntersectionOf(DataIntersectionOf object)
      {
        return createDataIntersectionOfAdapter();
      }
      @Override
      public Adapter caseDataUnionOf(DataUnionOf object)
      {
        return createDataUnionOfAdapter();
      }
      @Override
      public Adapter caseDataComplementOf(DataComplementOf object)
      {
        return createDataComplementOfAdapter();
      }
      @Override
      public Adapter caseDataOneOf(DataOneOf object)
      {
        return createDataOneOfAdapter();
      }
      @Override
      public Adapter caseDatatypeRestriction(DatatypeRestriction object)
      {
        return createDatatypeRestrictionAdapter();
      }
      @Override
      public Adapter caseFacetRestriction(FacetRestriction object)
      {
        return createFacetRestrictionAdapter();
      }
      @Override
      public Adapter caseClassExpression(ClassExpression object)
      {
        return createClassExpressionAdapter();
      }
      @Override
      public Adapter caseClassReference(ClassReference object)
      {
        return createClassReferenceAdapter();
      }
      @Override
      public Adapter caseObjectIntersectionOf(ObjectIntersectionOf object)
      {
        return createObjectIntersectionOfAdapter();
      }
      @Override
      public Adapter caseObjectUnionOf(ObjectUnionOf object)
      {
        return createObjectUnionOfAdapter();
      }
      @Override
      public Adapter caseObjectComplementOf(ObjectComplementOf object)
      {
        return createObjectComplementOfAdapter();
      }
      @Override
      public Adapter caseObjectOneOf(ObjectOneOf object)
      {
        return createObjectOneOfAdapter();
      }
      @Override
      public Adapter caseIndividualReference(IndividualReference object)
      {
        return createIndividualReferenceAdapter();
      }
      @Override
      public Adapter caseNamedIndividualReference(NamedIndividualReference object)
      {
        return createNamedIndividualReferenceAdapter();
      }
      @Override
      public Adapter caseAnonymousIndividualReference(AnonymousIndividualReference object)
      {
        return createAnonymousIndividualReferenceAdapter();
      }
      @Override
      public Adapter caseObjectSomeValuesFrom(ObjectSomeValuesFrom object)
      {
        return createObjectSomeValuesFromAdapter();
      }
      @Override
      public Adapter caseObjectAllValuesFrom(ObjectAllValuesFrom object)
      {
        return createObjectAllValuesFromAdapter();
      }
      @Override
      public Adapter caseObjectHasValue(ObjectHasValue object)
      {
        return createObjectHasValueAdapter();
      }
      @Override
      public Adapter caseObjectHasSelf(ObjectHasSelf object)
      {
        return createObjectHasSelfAdapter();
      }
      @Override
      public Adapter caseObjectMinCardinality(ObjectMinCardinality object)
      {
        return createObjectMinCardinalityAdapter();
      }
      @Override
      public Adapter caseObjectMaxCardinality(ObjectMaxCardinality object)
      {
        return createObjectMaxCardinalityAdapter();
      }
      @Override
      public Adapter caseObjectExactCardinality(ObjectExactCardinality object)
      {
        return createObjectExactCardinalityAdapter();
      }
      @Override
      public Adapter caseDataSomeValuesFrom(DataSomeValuesFrom object)
      {
        return createDataSomeValuesFromAdapter();
      }
      @Override
      public Adapter caseDataAllValuesFrom(DataAllValuesFrom object)
      {
        return createDataAllValuesFromAdapter();
      }
      @Override
      public Adapter caseDataHasValue(DataHasValue object)
      {
        return createDataHasValueAdapter();
      }
      @Override
      public Adapter caseDataMinCardinality(DataMinCardinality object)
      {
        return createDataMinCardinalityAdapter();
      }
      @Override
      public Adapter caseDataMaxCardinality(DataMaxCardinality object)
      {
        return createDataMaxCardinalityAdapter();
      }
      @Override
      public Adapter caseDataExactCardinality(DataExactCardinality object)
      {
        return createDataExactCardinalityAdapter();
      }
      @Override
      public Adapter caseAxiom(Axiom object)
      {
        return createAxiomAdapter();
      }
      @Override
      public Adapter caseClassAxiom(ClassAxiom object)
      {
        return createClassAxiomAdapter();
      }
      @Override
      public Adapter caseSubClassOf(SubClassOf object)
      {
        return createSubClassOfAdapter();
      }
      @Override
      public Adapter caseEquivalentClasses(EquivalentClasses object)
      {
        return createEquivalentClassesAdapter();
      }
      @Override
      public Adapter caseDisjointClasses(DisjointClasses object)
      {
        return createDisjointClassesAdapter();
      }
      @Override
      public Adapter caseDisjointUnion(DisjointUnion object)
      {
        return createDisjointUnionAdapter();
      }
      @Override
      public Adapter caseObjectPropertyAxiom(ObjectPropertyAxiom object)
      {
        return createObjectPropertyAxiomAdapter();
      }
      @Override
      public Adapter caseSubObjectPropertyOf(SubObjectPropertyOf object)
      {
        return createSubObjectPropertyOfAdapter();
      }
      @Override
      public Adapter caseEquivalentObjectProperties(EquivalentObjectProperties object)
      {
        return createEquivalentObjectPropertiesAdapter();
      }
      @Override
      public Adapter caseDisjointObjectProperties(DisjointObjectProperties object)
      {
        return createDisjointObjectPropertiesAdapter();
      }
      @Override
      public Adapter caseInverseObjectProperties(InverseObjectProperties object)
      {
        return createInverseObjectPropertiesAdapter();
      }
      @Override
      public Adapter caseObjectPropertyDomain(ObjectPropertyDomain object)
      {
        return createObjectPropertyDomainAdapter();
      }
      @Override
      public Adapter caseObjectPropertyRange(ObjectPropertyRange object)
      {
        return createObjectPropertyRangeAdapter();
      }
      @Override
      public Adapter caseFunctionalObjectProperty(FunctionalObjectProperty object)
      {
        return createFunctionalObjectPropertyAdapter();
      }
      @Override
      public Adapter caseInverseFunctionalObjectProperty(InverseFunctionalObjectProperty object)
      {
        return createInverseFunctionalObjectPropertyAdapter();
      }
      @Override
      public Adapter caseReflexiveObjectProperty(ReflexiveObjectProperty object)
      {
        return createReflexiveObjectPropertyAdapter();
      }
      @Override
      public Adapter caseIrreflexiveObjectProperty(IrreflexiveObjectProperty object)
      {
        return createIrreflexiveObjectPropertyAdapter();
      }
      @Override
      public Adapter caseSymmetricObjectProperty(SymmetricObjectProperty object)
      {
        return createSymmetricObjectPropertyAdapter();
      }
      @Override
      public Adapter caseAsymmetricObjectProperty(AsymmetricObjectProperty object)
      {
        return createAsymmetricObjectPropertyAdapter();
      }
      @Override
      public Adapter caseTransitiveObjectProperty(TransitiveObjectProperty object)
      {
        return createTransitiveObjectPropertyAdapter();
      }
      @Override
      public Adapter caseDataPropertyAxiom(DataPropertyAxiom object)
      {
        return createDataPropertyAxiomAdapter();
      }
      @Override
      public Adapter caseSubDataPropertyOf(SubDataPropertyOf object)
      {
        return createSubDataPropertyOfAdapter();
      }
      @Override
      public Adapter caseEquivalentDataProperties(EquivalentDataProperties object)
      {
        return createEquivalentDataPropertiesAdapter();
      }
      @Override
      public Adapter caseDisjointDataProperties(DisjointDataProperties object)
      {
        return createDisjointDataPropertiesAdapter();
      }
      @Override
      public Adapter caseDataPropertyDomain(DataPropertyDomain object)
      {
        return createDataPropertyDomainAdapter();
      }
      @Override
      public Adapter caseDataPropertyRange(DataPropertyRange object)
      {
        return createDataPropertyRangeAdapter();
      }
      @Override
      public Adapter caseFunctionalDataProperty(FunctionalDataProperty object)
      {
        return createFunctionalDataPropertyAdapter();
      }
      @Override
      public Adapter caseDatatypeDefinition(DatatypeDefinition object)
      {
        return createDatatypeDefinitionAdapter();
      }
      @Override
      public Adapter caseHasKey(HasKey object)
      {
        return createHasKeyAdapter();
      }
      @Override
      public Adapter caseAssertion(Assertion object)
      {
        return createAssertionAdapter();
      }
      @Override
      public Adapter caseSameIndividual(SameIndividual object)
      {
        return createSameIndividualAdapter();
      }
      @Override
      public Adapter caseDifferentIndividuals(DifferentIndividuals object)
      {
        return createDifferentIndividualsAdapter();
      }
      @Override
      public Adapter caseClassAssertion(ClassAssertion object)
      {
        return createClassAssertionAdapter();
      }
      @Override
      public Adapter caseObjectPropertyAssertion(ObjectPropertyAssertion object)
      {
        return createObjectPropertyAssertionAdapter();
      }
      @Override
      public Adapter caseNegativeObjectPropertyAssertion(NegativeObjectPropertyAssertion object)
      {
        return createNegativeObjectPropertyAssertionAdapter();
      }
      @Override
      public Adapter caseDataPropertyAssertion(DataPropertyAssertion object)
      {
        return createDataPropertyAssertionAdapter();
      }
      @Override
      public Adapter caseNegativeDataPropertyAssertion(NegativeDataPropertyAssertion object)
      {
        return createNegativeDataPropertyAssertionAdapter();
      }
      @Override
      public Adapter caseAnnotation(Annotation object)
      {
        return createAnnotationAdapter();
      }
      @Override
      public Adapter caseAnnotationValue(AnnotationValue object)
      {
        return createAnnotationValueAdapter();
      }
      @Override
      public Adapter caseAnnotationAxiom(AnnotationAxiom object)
      {
        return createAnnotationAxiomAdapter();
      }
      @Override
      public Adapter caseAnnotationAssertion(AnnotationAssertion object)
      {
        return createAnnotationAssertionAdapter();
      }
      @Override
      public Adapter caseAnnotationSubject(AnnotationSubject object)
      {
        return createAnnotationSubjectAdapter();
      }
      @Override
      public Adapter caseSubAnnotationPropertyOf(SubAnnotationPropertyOf object)
      {
        return createSubAnnotationPropertyOfAdapter();
      }
      @Override
      public Adapter caseAnnotationPropertyDomain(AnnotationPropertyDomain object)
      {
        return createAnnotationPropertyDomainAdapter();
      }
      @Override
      public Adapter caseAnnotationPropertyRange(AnnotationPropertyRange object)
      {
        return createAnnotationPropertyRangeAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.OntologyFile <em>Ontology File</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.OntologyFile
   * @generated
   */
  public Adapter createOntologyFileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.OntologyDocument <em>Ontology Document</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.OntologyDocument
   * @generated
   */
  public Adapter createOntologyDocumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.PrefixDeclaration <em>Prefix Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.PrefixDeclaration
   * @generated
   */
  public Adapter createPrefixDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.Ontology <em>Ontology</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.Ontology
   * @generated
   */
  public Adapter createOntologyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.Entity <em>Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.Entity
   * @generated
   */
  public Adapter createEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.Class <em>Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.Class
   * @generated
   */
  public Adapter createClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.Datatype <em>Datatype</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.Datatype
   * @generated
   */
  public Adapter createDatatypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ObjectProperty <em>Object Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ObjectProperty
   * @generated
   */
  public Adapter createObjectPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DataProperty <em>Data Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DataProperty
   * @generated
   */
  public Adapter createDataPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.AnnotationProperty <em>Annotation Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.AnnotationProperty
   * @generated
   */
  public Adapter createAnnotationPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.Individual <em>Individual</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.Individual
   * @generated
   */
  public Adapter createIndividualAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.NamedIndividual <em>Named Individual</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.NamedIndividual
   * @generated
   */
  public Adapter createNamedIndividualAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.AnonymousIndividual <em>Anonymous Individual</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.AnonymousIndividual
   * @generated
   */
  public Adapter createAnonymousIndividualAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.Literal <em>Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.Literal
   * @generated
   */
  public Adapter createLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.TypedLiteral <em>Typed Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.TypedLiteral
   * @generated
   */
  public Adapter createTypedLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.StringLiteral <em>String Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.StringLiteral
   * @generated
   */
  public Adapter createStringLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.Declaration <em>Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.Declaration
   * @generated
   */
  public Adapter createDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ObjectPropertyExpression <em>Object Property Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ObjectPropertyExpression
   * @generated
   */
  public Adapter createObjectPropertyExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ObjectPropertyReference <em>Object Property Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ObjectPropertyReference
   * @generated
   */
  public Adapter createObjectPropertyReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.InverseObjectProperty <em>Inverse Object Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.InverseObjectProperty
   * @generated
   */
  public Adapter createInverseObjectPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DataPropertyExpression <em>Data Property Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DataPropertyExpression
   * @generated
   */
  public Adapter createDataPropertyExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DataPropertyReference <em>Data Property Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DataPropertyReference
   * @generated
   */
  public Adapter createDataPropertyReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DataRange <em>Data Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DataRange
   * @generated
   */
  public Adapter createDataRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DatatypeReference <em>Datatype Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DatatypeReference
   * @generated
   */
  public Adapter createDatatypeReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DataIntersectionOf <em>Data Intersection Of</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DataIntersectionOf
   * @generated
   */
  public Adapter createDataIntersectionOfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DataUnionOf <em>Data Union Of</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DataUnionOf
   * @generated
   */
  public Adapter createDataUnionOfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DataComplementOf <em>Data Complement Of</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DataComplementOf
   * @generated
   */
  public Adapter createDataComplementOfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DataOneOf <em>Data One Of</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DataOneOf
   * @generated
   */
  public Adapter createDataOneOfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DatatypeRestriction <em>Datatype Restriction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DatatypeRestriction
   * @generated
   */
  public Adapter createDatatypeRestrictionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.FacetRestriction <em>Facet Restriction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.FacetRestriction
   * @generated
   */
  public Adapter createFacetRestrictionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ClassExpression <em>Class Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ClassExpression
   * @generated
   */
  public Adapter createClassExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ClassReference <em>Class Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ClassReference
   * @generated
   */
  public Adapter createClassReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ObjectIntersectionOf <em>Object Intersection Of</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ObjectIntersectionOf
   * @generated
   */
  public Adapter createObjectIntersectionOfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ObjectUnionOf <em>Object Union Of</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ObjectUnionOf
   * @generated
   */
  public Adapter createObjectUnionOfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ObjectComplementOf <em>Object Complement Of</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ObjectComplementOf
   * @generated
   */
  public Adapter createObjectComplementOfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ObjectOneOf <em>Object One Of</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ObjectOneOf
   * @generated
   */
  public Adapter createObjectOneOfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.IndividualReference <em>Individual Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.IndividualReference
   * @generated
   */
  public Adapter createIndividualReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.NamedIndividualReference <em>Named Individual Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.NamedIndividualReference
   * @generated
   */
  public Adapter createNamedIndividualReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.AnonymousIndividualReference <em>Anonymous Individual Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.AnonymousIndividualReference
   * @generated
   */
  public Adapter createAnonymousIndividualReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ObjectSomeValuesFrom <em>Object Some Values From</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ObjectSomeValuesFrom
   * @generated
   */
  public Adapter createObjectSomeValuesFromAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ObjectAllValuesFrom <em>Object All Values From</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ObjectAllValuesFrom
   * @generated
   */
  public Adapter createObjectAllValuesFromAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ObjectHasValue <em>Object Has Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ObjectHasValue
   * @generated
   */
  public Adapter createObjectHasValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ObjectHasSelf <em>Object Has Self</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ObjectHasSelf
   * @generated
   */
  public Adapter createObjectHasSelfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ObjectMinCardinality <em>Object Min Cardinality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ObjectMinCardinality
   * @generated
   */
  public Adapter createObjectMinCardinalityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ObjectMaxCardinality <em>Object Max Cardinality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ObjectMaxCardinality
   * @generated
   */
  public Adapter createObjectMaxCardinalityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ObjectExactCardinality <em>Object Exact Cardinality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ObjectExactCardinality
   * @generated
   */
  public Adapter createObjectExactCardinalityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DataSomeValuesFrom <em>Data Some Values From</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DataSomeValuesFrom
   * @generated
   */
  public Adapter createDataSomeValuesFromAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DataAllValuesFrom <em>Data All Values From</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DataAllValuesFrom
   * @generated
   */
  public Adapter createDataAllValuesFromAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DataHasValue <em>Data Has Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DataHasValue
   * @generated
   */
  public Adapter createDataHasValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DataMinCardinality <em>Data Min Cardinality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DataMinCardinality
   * @generated
   */
  public Adapter createDataMinCardinalityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DataMaxCardinality <em>Data Max Cardinality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DataMaxCardinality
   * @generated
   */
  public Adapter createDataMaxCardinalityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DataExactCardinality <em>Data Exact Cardinality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DataExactCardinality
   * @generated
   */
  public Adapter createDataExactCardinalityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.Axiom <em>Axiom</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.Axiom
   * @generated
   */
  public Adapter createAxiomAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ClassAxiom <em>Class Axiom</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ClassAxiom
   * @generated
   */
  public Adapter createClassAxiomAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.SubClassOf <em>Sub Class Of</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.SubClassOf
   * @generated
   */
  public Adapter createSubClassOfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.EquivalentClasses <em>Equivalent Classes</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.EquivalentClasses
   * @generated
   */
  public Adapter createEquivalentClassesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DisjointClasses <em>Disjoint Classes</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DisjointClasses
   * @generated
   */
  public Adapter createDisjointClassesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DisjointUnion <em>Disjoint Union</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DisjointUnion
   * @generated
   */
  public Adapter createDisjointUnionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ObjectPropertyAxiom <em>Object Property Axiom</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ObjectPropertyAxiom
   * @generated
   */
  public Adapter createObjectPropertyAxiomAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.SubObjectPropertyOf <em>Sub Object Property Of</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.SubObjectPropertyOf
   * @generated
   */
  public Adapter createSubObjectPropertyOfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.EquivalentObjectProperties <em>Equivalent Object Properties</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.EquivalentObjectProperties
   * @generated
   */
  public Adapter createEquivalentObjectPropertiesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DisjointObjectProperties <em>Disjoint Object Properties</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DisjointObjectProperties
   * @generated
   */
  public Adapter createDisjointObjectPropertiesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.InverseObjectProperties <em>Inverse Object Properties</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.InverseObjectProperties
   * @generated
   */
  public Adapter createInverseObjectPropertiesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ObjectPropertyDomain <em>Object Property Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ObjectPropertyDomain
   * @generated
   */
  public Adapter createObjectPropertyDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ObjectPropertyRange <em>Object Property Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ObjectPropertyRange
   * @generated
   */
  public Adapter createObjectPropertyRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.FunctionalObjectProperty <em>Functional Object Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.FunctionalObjectProperty
   * @generated
   */
  public Adapter createFunctionalObjectPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.InverseFunctionalObjectProperty <em>Inverse Functional Object Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.InverseFunctionalObjectProperty
   * @generated
   */
  public Adapter createInverseFunctionalObjectPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ReflexiveObjectProperty <em>Reflexive Object Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ReflexiveObjectProperty
   * @generated
   */
  public Adapter createReflexiveObjectPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.IrreflexiveObjectProperty <em>Irreflexive Object Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.IrreflexiveObjectProperty
   * @generated
   */
  public Adapter createIrreflexiveObjectPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.SymmetricObjectProperty <em>Symmetric Object Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.SymmetricObjectProperty
   * @generated
   */
  public Adapter createSymmetricObjectPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.AsymmetricObjectProperty <em>Asymmetric Object Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.AsymmetricObjectProperty
   * @generated
   */
  public Adapter createAsymmetricObjectPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.TransitiveObjectProperty <em>Transitive Object Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.TransitiveObjectProperty
   * @generated
   */
  public Adapter createTransitiveObjectPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DataPropertyAxiom <em>Data Property Axiom</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DataPropertyAxiom
   * @generated
   */
  public Adapter createDataPropertyAxiomAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.SubDataPropertyOf <em>Sub Data Property Of</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.SubDataPropertyOf
   * @generated
   */
  public Adapter createSubDataPropertyOfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.EquivalentDataProperties <em>Equivalent Data Properties</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.EquivalentDataProperties
   * @generated
   */
  public Adapter createEquivalentDataPropertiesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DisjointDataProperties <em>Disjoint Data Properties</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DisjointDataProperties
   * @generated
   */
  public Adapter createDisjointDataPropertiesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DataPropertyDomain <em>Data Property Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DataPropertyDomain
   * @generated
   */
  public Adapter createDataPropertyDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DataPropertyRange <em>Data Property Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DataPropertyRange
   * @generated
   */
  public Adapter createDataPropertyRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.FunctionalDataProperty <em>Functional Data Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.FunctionalDataProperty
   * @generated
   */
  public Adapter createFunctionalDataPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DatatypeDefinition <em>Datatype Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DatatypeDefinition
   * @generated
   */
  public Adapter createDatatypeDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.HasKey <em>Has Key</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.HasKey
   * @generated
   */
  public Adapter createHasKeyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.Assertion <em>Assertion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.Assertion
   * @generated
   */
  public Adapter createAssertionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.SameIndividual <em>Same Individual</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.SameIndividual
   * @generated
   */
  public Adapter createSameIndividualAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DifferentIndividuals <em>Different Individuals</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DifferentIndividuals
   * @generated
   */
  public Adapter createDifferentIndividualsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ClassAssertion <em>Class Assertion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ClassAssertion
   * @generated
   */
  public Adapter createClassAssertionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.ObjectPropertyAssertion <em>Object Property Assertion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.ObjectPropertyAssertion
   * @generated
   */
  public Adapter createObjectPropertyAssertionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.NegativeObjectPropertyAssertion <em>Negative Object Property Assertion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.NegativeObjectPropertyAssertion
   * @generated
   */
  public Adapter createNegativeObjectPropertyAssertionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.DataPropertyAssertion <em>Data Property Assertion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.DataPropertyAssertion
   * @generated
   */
  public Adapter createDataPropertyAssertionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.NegativeDataPropertyAssertion <em>Negative Data Property Assertion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.NegativeDataPropertyAssertion
   * @generated
   */
  public Adapter createNegativeDataPropertyAssertionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.Annotation <em>Annotation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.Annotation
   * @generated
   */
  public Adapter createAnnotationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.AnnotationValue <em>Annotation Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.AnnotationValue
   * @generated
   */
  public Adapter createAnnotationValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.AnnotationAxiom <em>Annotation Axiom</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.AnnotationAxiom
   * @generated
   */
  public Adapter createAnnotationAxiomAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.AnnotationAssertion <em>Annotation Assertion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.AnnotationAssertion
   * @generated
   */
  public Adapter createAnnotationAssertionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.AnnotationSubject <em>Annotation Subject</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.AnnotationSubject
   * @generated
   */
  public Adapter createAnnotationSubjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.SubAnnotationPropertyOf <em>Sub Annotation Property Of</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.SubAnnotationPropertyOf
   * @generated
   */
  public Adapter createSubAnnotationPropertyOfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.AnnotationPropertyDomain <em>Annotation Property Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.AnnotationPropertyDomain
   * @generated
   */
  public Adapter createAnnotationPropertyDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omg.kerml.owl.owl.AnnotationPropertyRange <em>Annotation Property Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omg.kerml.owl.owl.AnnotationPropertyRange
   * @generated
   */
  public Adapter createAnnotationPropertyRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //OwlAdapterFactory
