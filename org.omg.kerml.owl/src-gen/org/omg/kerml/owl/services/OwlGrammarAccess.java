/*
 * generated by Xtext 2.18.0.M3
 */
package org.omg.kerml.owl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class OwlGrammarAccess extends AbstractGrammarElementFinder {
	
	public class OntologyFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.OntologyFile");
		private final Assignment cDocumentsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDocumentsOntologyDocumentParserRuleCall_0 = (RuleCall)cDocumentsAssignment.eContents().get(0);
		
		//// Ontologies
		//OntologyFile:
		//	documents+=OntologyDocument+;
		@Override public ParserRule getRule() { return rule; }
		
		//documents+=OntologyDocument+
		public Assignment getDocumentsAssignment() { return cDocumentsAssignment; }
		
		//OntologyDocument
		public RuleCall getDocumentsOntologyDocumentParserRuleCall_0() { return cDocumentsOntologyDocumentParserRuleCall_0; }
	}
	public class OntologyDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.OntologyDocument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixDeclarationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrefixDeclarationsPrefixDeclarationParserRuleCall_0_0 = (RuleCall)cPrefixDeclarationsAssignment_0.eContents().get(0);
		private final Assignment cOntologyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOntologyOntologyParserRuleCall_1_0 = (RuleCall)cOntologyAssignment_1.eContents().get(0);
		
		//OntologyDocument:
		//	prefixDeclarations+=PrefixDeclaration*
		//	ontology=Ontology;
		@Override public ParserRule getRule() { return rule; }
		
		//prefixDeclarations+=PrefixDeclaration* ontology=Ontology
		public Group getGroup() { return cGroup; }
		
		//prefixDeclarations+=PrefixDeclaration*
		public Assignment getPrefixDeclarationsAssignment_0() { return cPrefixDeclarationsAssignment_0; }
		
		//PrefixDeclaration
		public RuleCall getPrefixDeclarationsPrefixDeclarationParserRuleCall_0_0() { return cPrefixDeclarationsPrefixDeclarationParserRuleCall_0_0; }
		
		//ontology=Ontology
		public Assignment getOntologyAssignment_1() { return cOntologyAssignment_1; }
		
		//Ontology
		public RuleCall getOntologyOntologyParserRuleCall_1_0() { return cOntologyOntologyParserRuleCall_1_0; }
	}
	public class PrefixDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.PrefixDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrefixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPrefixNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPrefixNamePrefixNameParserRuleCall_2_0 = (RuleCall)cPrefixNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFullIRIAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFullIRIFullIRIParserRuleCall_4_0 = (RuleCall)cFullIRIAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PrefixDeclaration:
		//	'Prefix' '(' prefixName=PrefixName '=' fullIRI=FullIRI ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Prefix' '(' prefixName=PrefixName '=' fullIRI=FullIRI ')'
		public Group getGroup() { return cGroup; }
		
		//'Prefix'
		public Keyword getPrefixKeyword_0() { return cPrefixKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//prefixName=PrefixName
		public Assignment getPrefixNameAssignment_2() { return cPrefixNameAssignment_2; }
		
		//PrefixName
		public RuleCall getPrefixNamePrefixNameParserRuleCall_2_0() { return cPrefixNamePrefixNameParserRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//fullIRI=FullIRI
		public Assignment getFullIRIAssignment_4() { return cFullIRIAssignment_4; }
		
		//FullIRI
		public RuleCall getFullIRIFullIRIParserRuleCall_4_0() { return cFullIRIFullIRIParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class OntologyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.Ontology");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOntologyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOntologyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOntologyIRIAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cOntologyIRIIRIParserRuleCall_3_0_0 = (RuleCall)cOntologyIRIAssignment_3_0.eContents().get(0);
		private final Assignment cVersionIRIAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVersionIRIIRIParserRuleCall_3_1_0 = (RuleCall)cVersionIRIAssignment_3_1.eContents().get(0);
		private final Assignment cDirectlyImportsDocumentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDirectlyImportsDocumentsDirectlyImportsDocumentParserRuleCall_4_0 = (RuleCall)cDirectlyImportsDocumentsAssignment_4.eContents().get(0);
		private final Assignment cOntologyAnnotationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOntologyAnnotationsAnnotationParserRuleCall_5_0 = (RuleCall)cOntologyAnnotationsAssignment_5.eContents().get(0);
		private final Assignment cAxiomsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAxiomsAxiomParserRuleCall_6_0 = (RuleCall)cAxiomsAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Ontology:
		//	{Ontology} 'Ontology' '(' (ontologyIRI=IRI versionIRI=IRI?)?
		//	directlyImportsDocuments+=DirectlyImportsDocument*
		//	ontologyAnnotations+=Annotation*
		//	axioms+=Axiom*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Ontology} 'Ontology' '(' (ontologyIRI=IRI versionIRI=IRI?)? directlyImportsDocuments+=DirectlyImportsDocument*
		//ontologyAnnotations+=Annotation* axioms+=Axiom* ')'
		public Group getGroup() { return cGroup; }
		
		//{Ontology}
		public Action getOntologyAction_0() { return cOntologyAction_0; }
		
		//'Ontology'
		public Keyword getOntologyKeyword_1() { return cOntologyKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(ontologyIRI=IRI versionIRI=IRI?)?
		public Group getGroup_3() { return cGroup_3; }
		
		//ontologyIRI=IRI
		public Assignment getOntologyIRIAssignment_3_0() { return cOntologyIRIAssignment_3_0; }
		
		//IRI
		public RuleCall getOntologyIRIIRIParserRuleCall_3_0_0() { return cOntologyIRIIRIParserRuleCall_3_0_0; }
		
		//versionIRI=IRI?
		public Assignment getVersionIRIAssignment_3_1() { return cVersionIRIAssignment_3_1; }
		
		//IRI
		public RuleCall getVersionIRIIRIParserRuleCall_3_1_0() { return cVersionIRIIRIParserRuleCall_3_1_0; }
		
		//directlyImportsDocuments+=DirectlyImportsDocument*
		public Assignment getDirectlyImportsDocumentsAssignment_4() { return cDirectlyImportsDocumentsAssignment_4; }
		
		//DirectlyImportsDocument
		public RuleCall getDirectlyImportsDocumentsDirectlyImportsDocumentParserRuleCall_4_0() { return cDirectlyImportsDocumentsDirectlyImportsDocumentParserRuleCall_4_0; }
		
		//ontologyAnnotations+=Annotation*
		public Assignment getOntologyAnnotationsAssignment_5() { return cOntologyAnnotationsAssignment_5; }
		
		//Annotation
		public RuleCall getOntologyAnnotationsAnnotationParserRuleCall_5_0() { return cOntologyAnnotationsAnnotationParserRuleCall_5_0; }
		
		//axioms+=Axiom*
		public Assignment getAxiomsAssignment_6() { return cAxiomsAssignment_6; }
		
		//Axiom
		public RuleCall getAxiomsAxiomParserRuleCall_6_0() { return cAxiomsAxiomParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class DirectlyImportsDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DirectlyImportsDocument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIRIParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DirectlyImportsDocument:
		//	'Import' '(' IRI ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Import' '(' IRI ')'
		public Group getGroup() { return cGroup; }
		
		//'Import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//IRI
		public RuleCall getIRIParserRuleCall_2() { return cIRIParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataPropertyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAnnotationPropertyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDatatypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNamedIndividualParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// Entities, Literals, and Anonymous Individuals
		//Entity:
		//	Class | ObjectProperty | DataProperty | AnnotationProperty | Datatype | NamedIndividual;
		@Override public ParserRule getRule() { return rule; }
		
		//Class | ObjectProperty | DataProperty | AnnotationProperty | Datatype | NamedIndividual
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Class
		public RuleCall getClassParserRuleCall_0() { return cClassParserRuleCall_0; }
		
		//ObjectProperty
		public RuleCall getObjectPropertyParserRuleCall_1() { return cObjectPropertyParserRuleCall_1; }
		
		//DataProperty
		public RuleCall getDataPropertyParserRuleCall_2() { return cDataPropertyParserRuleCall_2; }
		
		//AnnotationProperty
		public RuleCall getAnnotationPropertyParserRuleCall_3() { return cAnnotationPropertyParserRuleCall_3; }
		
		//Datatype
		public RuleCall getDatatypeParserRuleCall_4() { return cDatatypeParserRuleCall_4; }
		
		//NamedIndividual
		public RuleCall getNamedIndividualParserRuleCall_5() { return cNamedIndividualParserRuleCall_5; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.Class");
		private final Assignment cEntityIRIAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEntityIRIIRIParserRuleCall_0 = (RuleCall)cEntityIRIAssignment.eContents().get(0);
		
		//Class:
		//	entityIRI=IRI;
		@Override public ParserRule getRule() { return rule; }
		
		//entityIRI=IRI
		public Assignment getEntityIRIAssignment() { return cEntityIRIAssignment; }
		
		//IRI
		public RuleCall getEntityIRIIRIParserRuleCall_0() { return cEntityIRIIRIParserRuleCall_0; }
	}
	public class DatatypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.Datatype");
		private final Assignment cEntityIRIAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEntityIRIIRIParserRuleCall_0 = (RuleCall)cEntityIRIAssignment.eContents().get(0);
		
		//Datatype:
		//	entityIRI=IRI;
		@Override public ParserRule getRule() { return rule; }
		
		//entityIRI=IRI
		public Assignment getEntityIRIAssignment() { return cEntityIRIAssignment; }
		
		//IRI
		public RuleCall getEntityIRIIRIParserRuleCall_0() { return cEntityIRIIRIParserRuleCall_0; }
	}
	public class ObjectPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ObjectProperty");
		private final Assignment cEntityIRIAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEntityIRIIRIParserRuleCall_0 = (RuleCall)cEntityIRIAssignment.eContents().get(0);
		
		//ObjectProperty:
		//	entityIRI=IRI;
		@Override public ParserRule getRule() { return rule; }
		
		//entityIRI=IRI
		public Assignment getEntityIRIAssignment() { return cEntityIRIAssignment; }
		
		//IRI
		public RuleCall getEntityIRIIRIParserRuleCall_0() { return cEntityIRIIRIParserRuleCall_0; }
	}
	public class DataPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DataProperty");
		private final Assignment cEntityIRIAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEntityIRIIRIParserRuleCall_0 = (RuleCall)cEntityIRIAssignment.eContents().get(0);
		
		//DataProperty:
		//	entityIRI=IRI;
		@Override public ParserRule getRule() { return rule; }
		
		//entityIRI=IRI
		public Assignment getEntityIRIAssignment() { return cEntityIRIAssignment; }
		
		//IRI
		public RuleCall getEntityIRIIRIParserRuleCall_0() { return cEntityIRIIRIParserRuleCall_0; }
	}
	public class AnnotationPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.AnnotationProperty");
		private final Assignment cEntityIRIAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEntityIRIIRIParserRuleCall_0 = (RuleCall)cEntityIRIAssignment.eContents().get(0);
		
		//AnnotationProperty:
		//	entityIRI=IRI;
		@Override public ParserRule getRule() { return rule; }
		
		//entityIRI=IRI
		public Assignment getEntityIRIAssignment() { return cEntityIRIAssignment; }
		
		//IRI
		public RuleCall getEntityIRIIRIParserRuleCall_0() { return cEntityIRIIRIParserRuleCall_0; }
	}
	public class IndividualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.Individual");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNamedIndividualParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnonymousIndividualParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Individual:
		//	NamedIndividual | AnonymousIndividual;
		@Override public ParserRule getRule() { return rule; }
		
		//NamedIndividual | AnonymousIndividual
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NamedIndividual
		public RuleCall getNamedIndividualParserRuleCall_0() { return cNamedIndividualParserRuleCall_0; }
		
		//AnonymousIndividual
		public RuleCall getAnonymousIndividualParserRuleCall_1() { return cAnonymousIndividualParserRuleCall_1; }
	}
	public class NamedIndividualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.NamedIndividual");
		private final Assignment cEntityIRIAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEntityIRIIRIParserRuleCall_0 = (RuleCall)cEntityIRIAssignment.eContents().get(0);
		
		//NamedIndividual:
		//	entityIRI=IRI;
		@Override public ParserRule getRule() { return rule; }
		
		//entityIRI=IRI
		public Assignment getEntityIRIAssignment() { return cEntityIRIAssignment; }
		
		//IRI
		public RuleCall getEntityIRIIRIParserRuleCall_0() { return cEntityIRIIRIParserRuleCall_0; }
	}
	public class AnonymousIndividualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.AnonymousIndividual");
		private final Assignment cNodeIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNodeIdNodeIDParserRuleCall_0 = (RuleCall)cNodeIdAssignment.eContents().get(0);
		
		//AnonymousIndividual:
		//	nodeId=NodeID;
		@Override public ParserRule getRule() { return rule; }
		
		//nodeId=NodeID
		public Assignment getNodeIdAssignment() { return cNodeIdAssignment; }
		
		//NodeID
		public RuleCall getNodeIdNodeIDParserRuleCall_0() { return cNodeIdNodeIDParserRuleCall_0; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypedLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Literal:
		//	TypedLiteral | StringLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//TypedLiteral | StringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypedLiteral
		public RuleCall getTypedLiteralParserRuleCall_0() { return cTypedLiteralParserRuleCall_0; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }
	}
	public class TypedLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.TypedLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLexicalFormAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLexicalFormSTRINGTerminalRuleCall_0_0 = (RuleCall)cLexicalFormAssignment_0.eContents().get(0);
		private final Keyword cCircumflexAccentCircumflexAccentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDatatypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDatatypeIRIParserRuleCall_2_0 = (RuleCall)cDatatypeAssignment_2.eContents().get(0);
		
		//TypedLiteral:
		//	lexicalForm=STRING '^^' datatype=IRI // [Datatype|IRI]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//lexicalForm=STRING '^^' datatype=IRI
		public Group getGroup() { return cGroup; }
		
		//lexicalForm=STRING
		public Assignment getLexicalFormAssignment_0() { return cLexicalFormAssignment_0; }
		
		//STRING
		public RuleCall getLexicalFormSTRINGTerminalRuleCall_0_0() { return cLexicalFormSTRINGTerminalRuleCall_0_0; }
		
		//'^^'
		public Keyword getCircumflexAccentCircumflexAccentKeyword_1() { return cCircumflexAccentCircumflexAccentKeyword_1; }
		
		//datatype=IRI
		public Assignment getDatatypeAssignment_2() { return cDatatypeAssignment_2; }
		
		//IRI
		public RuleCall getDatatypeIRIParserRuleCall_2_0() { return cDatatypeIRIParserRuleCall_2_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.StringLiteral");
		private final Assignment cLexicalFormAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLexicalFormSTRINGTerminalRuleCall_0 = (RuleCall)cLexicalFormAssignment.eContents().get(0);
		
		//StringLiteral:
		//	lexicalForm=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//lexicalForm=STRING
		public Assignment getLexicalFormAssignment() { return cLexicalFormAssignment; }
		
		//STRING
		public RuleCall getLexicalFormSTRINGTerminalRuleCall_0() { return cLexicalFormSTRINGTerminalRuleCall_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeclarationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationAssignment_2.eContents().get(0);
		private final Assignment cEntityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEntityEntityDeclarationParserRuleCall_3_0 = (RuleCall)cEntityAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Declaration:
		//	'Declaration' '('
		//	axiomAnnotation+=Annotation*
		//	entity=EntityDeclaration
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Declaration' '(' axiomAnnotation+=Annotation* entity=EntityDeclaration ')'
		public Group getGroup() { return cGroup; }
		
		//'Declaration'
		public Keyword getDeclarationKeyword_0() { return cDeclarationKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotation+=Annotation*
		public Assignment getAxiomAnnotationAssignment_2() { return cAxiomAnnotationAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationAnnotationParserRuleCall_2_0() { return cAxiomAnnotationAnnotationParserRuleCall_2_0; }
		
		//entity=EntityDeclaration
		public Assignment getEntityAssignment_3() { return cEntityAssignment_3; }
		
		//EntityDeclaration
		public RuleCall getEntityEntityDeclarationParserRuleCall_3_0() { return cEntityEntityDeclarationParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EntityDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.EntityDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cClassKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cClassParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDatatypeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cDatatypeParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cObjectPropertyKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cObjectPropertyParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cDataPropertyKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cDataPropertyParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cAnnotationPropertyKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cAnnotationPropertyParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cNamedIndividualKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final RuleCall cNamedIndividualParserRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//EntityDeclaration Entity:
		//	'Class' '(' Class ')' |
		//	'Datatype' '(' Datatype ')' |
		//	'ObjectProperty' '(' ObjectProperty ')' |
		//	'DataProperty' '(' DataProperty ')' |
		//	'AnnotationProperty' '(' AnnotationProperty ')' |
		//	'NamedIndividual' '(' NamedIndividual ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Class' '(' Class ')' | 'Datatype' '(' Datatype ')' | 'ObjectProperty' '(' ObjectProperty ')' | 'DataProperty' '('
		//DataProperty ')' | 'AnnotationProperty' '(' AnnotationProperty ')' | 'NamedIndividual' '(' NamedIndividual ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Class' '(' Class ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'Class'
		public Keyword getClassKeyword_0_0() { return cClassKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//Class
		public RuleCall getClassParserRuleCall_0_2() { return cClassParserRuleCall_0_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//'Datatype' '(' Datatype ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'Datatype'
		public Keyword getDatatypeKeyword_1_0() { return cDatatypeKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//Datatype
		public RuleCall getDatatypeParserRuleCall_1_2() { return cDatatypeParserRuleCall_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//'ObjectProperty' '(' ObjectProperty ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'ObjectProperty'
		public Keyword getObjectPropertyKeyword_2_0() { return cObjectPropertyKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//ObjectProperty
		public RuleCall getObjectPropertyParserRuleCall_2_2() { return cObjectPropertyParserRuleCall_2_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//'DataProperty' '(' DataProperty ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'DataProperty'
		public Keyword getDataPropertyKeyword_3_0() { return cDataPropertyKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//DataProperty
		public RuleCall getDataPropertyParserRuleCall_3_2() { return cDataPropertyParserRuleCall_3_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//'AnnotationProperty' '(' AnnotationProperty ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'AnnotationProperty'
		public Keyword getAnnotationPropertyKeyword_4_0() { return cAnnotationPropertyKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//AnnotationProperty
		public RuleCall getAnnotationPropertyParserRuleCall_4_2() { return cAnnotationPropertyParserRuleCall_4_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//'NamedIndividual' '(' NamedIndividual ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'NamedIndividual'
		public Keyword getNamedIndividualKeyword_5_0() { return cNamedIndividualKeyword_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//NamedIndividual
		public RuleCall getNamedIndividualParserRuleCall_5_2() { return cNamedIndividualParserRuleCall_5_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
	}
	public class ObjectPropertyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ObjectPropertyExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectPropertyReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInverseObjectPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Property Expressions
		//ObjectPropertyExpression:
		//	ObjectPropertyReference | InverseObjectProperty;
		@Override public ParserRule getRule() { return rule; }
		
		//ObjectPropertyReference | InverseObjectProperty
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ObjectPropertyReference
		public RuleCall getObjectPropertyReferenceParserRuleCall_0() { return cObjectPropertyReferenceParserRuleCall_0; }
		
		//InverseObjectProperty
		public RuleCall getInverseObjectPropertyParserRuleCall_1() { return cInverseObjectPropertyParserRuleCall_1; }
	}
	public class ObjectPropertyReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ObjectPropertyReference");
		private final Assignment cObjectPropertyAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cObjectPropertyIRIParserRuleCall_0 = (RuleCall)cObjectPropertyAssignment.eContents().get(0);
		
		//ObjectPropertyReference:
		//	objectProperty=IRI // [ObjectProperty|IRI]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//objectProperty=IRI
		public Assignment getObjectPropertyAssignment() { return cObjectPropertyAssignment; }
		
		//IRI
		public RuleCall getObjectPropertyIRIParserRuleCall_0() { return cObjectPropertyIRIParserRuleCall_0; }
	}
	public class InverseObjectPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.InverseObjectProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectInverseOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObjectPropertyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectPropertyIRIParserRuleCall_2_0 = (RuleCall)cObjectPropertyAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InverseObjectProperty:
		//	'ObjectInverseOf' '('
		//	objectProperty=IRI // [ObjectProperty|IRI] 
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ObjectInverseOf' '(' objectProperty=IRI // [ObjectProperty|IRI] 
		//')'
		public Group getGroup() { return cGroup; }
		
		//'ObjectInverseOf'
		public Keyword getObjectInverseOfKeyword_0() { return cObjectInverseOfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//objectProperty=IRI
		public Assignment getObjectPropertyAssignment_2() { return cObjectPropertyAssignment_2; }
		
		//IRI
		public RuleCall getObjectPropertyIRIParserRuleCall_2_0() { return cObjectPropertyIRIParserRuleCall_2_0; }
		
		//// [ObjectProperty|IRI] 
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class DataPropertyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DataPropertyExpression");
		private final RuleCall cDataPropertyReferenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DataPropertyExpression:
		//	DataPropertyReference;
		@Override public ParserRule getRule() { return rule; }
		
		//DataPropertyReference
		public RuleCall getDataPropertyReferenceParserRuleCall() { return cDataPropertyReferenceParserRuleCall; }
	}
	public class DataPropertyReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DataPropertyReference");
		private final Assignment cDataPropertyAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDataPropertyIRIParserRuleCall_0 = (RuleCall)cDataPropertyAssignment.eContents().get(0);
		
		//DataPropertyReference:
		//	dataProperty=IRI // [DataProperty|IRI]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//dataProperty=IRI
		public Assignment getDataPropertyAssignment() { return cDataPropertyAssignment; }
		
		//IRI
		public RuleCall getDataPropertyIRIParserRuleCall_0() { return cDataPropertyIRIParserRuleCall_0; }
	}
	public class DataRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DataRange");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDatatypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataIntersectionOfParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataUnionOfParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDataComplementOfParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDataOneOfParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDatatypeRestrictionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// Data Ranges
		//DataRange:
		//	DatatypeReference | DataIntersectionOf | DataUnionOf | DataComplementOf | DataOneOf | DatatypeRestriction;
		@Override public ParserRule getRule() { return rule; }
		
		//DatatypeReference | DataIntersectionOf | DataUnionOf | DataComplementOf | DataOneOf | DatatypeRestriction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DatatypeReference
		public RuleCall getDatatypeReferenceParserRuleCall_0() { return cDatatypeReferenceParserRuleCall_0; }
		
		//DataIntersectionOf
		public RuleCall getDataIntersectionOfParserRuleCall_1() { return cDataIntersectionOfParserRuleCall_1; }
		
		//DataUnionOf
		public RuleCall getDataUnionOfParserRuleCall_2() { return cDataUnionOfParserRuleCall_2; }
		
		//DataComplementOf
		public RuleCall getDataComplementOfParserRuleCall_3() { return cDataComplementOfParserRuleCall_3; }
		
		//DataOneOf
		public RuleCall getDataOneOfParserRuleCall_4() { return cDataOneOfParserRuleCall_4; }
		
		//DatatypeRestriction
		public RuleCall getDatatypeRestrictionParserRuleCall_5() { return cDatatypeRestrictionParserRuleCall_5; }
	}
	public class DatatypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DatatypeReference");
		private final Assignment cDatatypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDatatypeIRIParserRuleCall_0 = (RuleCall)cDatatypeAssignment.eContents().get(0);
		
		//DatatypeReference:
		//	datatype=IRI // [Datatype|IRI]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//datatype=IRI
		public Assignment getDatatypeAssignment() { return cDatatypeAssignment; }
		
		//IRI
		public RuleCall getDatatypeIRIParserRuleCall_0() { return cDatatypeIRIParserRuleCall_0; }
	}
	public class DataIntersectionOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DataIntersectionOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataIntersectionOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDataRangesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataRangesDataRangeParserRuleCall_2_0 = (RuleCall)cDataRangesAssignment_2.eContents().get(0);
		private final Assignment cDataRangesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDataRangesDataRangeParserRuleCall_3_0 = (RuleCall)cDataRangesAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DataIntersectionOf:
		//	'DataIntersectionOf' '('
		//	dataRanges+=DataRange
		//	dataRanges+=DataRange+
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DataIntersectionOf' '(' dataRanges+=DataRange dataRanges+=DataRange+ ')'
		public Group getGroup() { return cGroup; }
		
		//'DataIntersectionOf'
		public Keyword getDataIntersectionOfKeyword_0() { return cDataIntersectionOfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//dataRanges+=DataRange
		public Assignment getDataRangesAssignment_2() { return cDataRangesAssignment_2; }
		
		//DataRange
		public RuleCall getDataRangesDataRangeParserRuleCall_2_0() { return cDataRangesDataRangeParserRuleCall_2_0; }
		
		//dataRanges+=DataRange+
		public Assignment getDataRangesAssignment_3() { return cDataRangesAssignment_3; }
		
		//DataRange
		public RuleCall getDataRangesDataRangeParserRuleCall_3_0() { return cDataRangesDataRangeParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DataUnionOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DataUnionOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataUnionOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDataRangesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataRangesDataRangeParserRuleCall_2_0 = (RuleCall)cDataRangesAssignment_2.eContents().get(0);
		private final Assignment cDataRangesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDataRangesDataRangeParserRuleCall_3_0 = (RuleCall)cDataRangesAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DataUnionOf:
		//	'DataUnionOf' '('
		//	dataRanges+=DataRange
		//	dataRanges+=DataRange+
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DataUnionOf' '(' dataRanges+=DataRange dataRanges+=DataRange+ ')'
		public Group getGroup() { return cGroup; }
		
		//'DataUnionOf'
		public Keyword getDataUnionOfKeyword_0() { return cDataUnionOfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//dataRanges+=DataRange
		public Assignment getDataRangesAssignment_2() { return cDataRangesAssignment_2; }
		
		//DataRange
		public RuleCall getDataRangesDataRangeParserRuleCall_2_0() { return cDataRangesDataRangeParserRuleCall_2_0; }
		
		//dataRanges+=DataRange+
		public Assignment getDataRangesAssignment_3() { return cDataRangesAssignment_3; }
		
		//DataRange
		public RuleCall getDataRangesDataRangeParserRuleCall_3_0() { return cDataRangesDataRangeParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DataComplementOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DataComplementOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataComplementOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDataRangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataRangeDataRangeParserRuleCall_2_0 = (RuleCall)cDataRangeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DataComplementOf:
		//	'DataComplementOf' '('
		//	dataRange=DataRange
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DataComplementOf' '(' dataRange=DataRange ')'
		public Group getGroup() { return cGroup; }
		
		//'DataComplementOf'
		public Keyword getDataComplementOfKeyword_0() { return cDataComplementOfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//dataRange=DataRange
		public Assignment getDataRangeAssignment_2() { return cDataRangeAssignment_2; }
		
		//DataRange
		public RuleCall getDataRangeDataRangeParserRuleCall_2_0() { return cDataRangeDataRangeParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class DataOneOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DataOneOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataOneOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLiteralsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLiteralsLiteralParserRuleCall_2_0 = (RuleCall)cLiteralsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DataOneOf:
		//	'DataOneOf' '('
		//	literals+=Literal+
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DataOneOf' '(' literals+=Literal+ ')'
		public Group getGroup() { return cGroup; }
		
		//'DataOneOf'
		public Keyword getDataOneOfKeyword_0() { return cDataOneOfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//literals+=Literal+
		public Assignment getLiteralsAssignment_2() { return cLiteralsAssignment_2; }
		
		//Literal
		public RuleCall getLiteralsLiteralParserRuleCall_2_0() { return cLiteralsLiteralParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class DatatypeRestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DatatypeRestriction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeRestrictionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDataTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataTypeDatatypeReferenceParserRuleCall_2_0 = (RuleCall)cDataTypeAssignment_2.eContents().get(0);
		private final Assignment cRestrictionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRestrictionsFacetRestrictionParserRuleCall_3_0 = (RuleCall)cRestrictionsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DatatypeRestriction:
		//	'DatatypeRestriction' '('
		//	dataType=DatatypeReference
		//	restrictions+=FacetRestriction+
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DatatypeRestriction' '(' dataType=DatatypeReference restrictions+=FacetRestriction+ ')'
		public Group getGroup() { return cGroup; }
		
		//'DatatypeRestriction'
		public Keyword getDatatypeRestrictionKeyword_0() { return cDatatypeRestrictionKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//dataType=DatatypeReference
		public Assignment getDataTypeAssignment_2() { return cDataTypeAssignment_2; }
		
		//DatatypeReference
		public RuleCall getDataTypeDatatypeReferenceParserRuleCall_2_0() { return cDataTypeDatatypeReferenceParserRuleCall_2_0; }
		
		//restrictions+=FacetRestriction+
		public Assignment getRestrictionsAssignment_3() { return cRestrictionsAssignment_3; }
		
		//FacetRestriction
		public RuleCall getRestrictionsFacetRestrictionParserRuleCall_3_0() { return cRestrictionsFacetRestrictionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class FacetRestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.FacetRestriction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstrainingFacetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConstrainingFacetIRIParserRuleCall_0_0 = (RuleCall)cConstrainingFacetAssignment_0.eContents().get(0);
		private final Assignment cRestrictionValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRestrictionValueLiteralParserRuleCall_1_0 = (RuleCall)cRestrictionValueAssignment_1.eContents().get(0);
		
		//FacetRestriction:
		//	constrainingFacet=IRI restrictionValue=Literal;
		@Override public ParserRule getRule() { return rule; }
		
		//constrainingFacet=IRI restrictionValue=Literal
		public Group getGroup() { return cGroup; }
		
		//constrainingFacet=IRI
		public Assignment getConstrainingFacetAssignment_0() { return cConstrainingFacetAssignment_0; }
		
		//IRI
		public RuleCall getConstrainingFacetIRIParserRuleCall_0_0() { return cConstrainingFacetIRIParserRuleCall_0_0; }
		
		//restrictionValue=Literal
		public Assignment getRestrictionValueAssignment_1() { return cRestrictionValueAssignment_1; }
		
		//Literal
		public RuleCall getRestrictionValueLiteralParserRuleCall_1_0() { return cRestrictionValueLiteralParserRuleCall_1_0; }
	}
	public class ClassExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ClassExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectIntersectionOfParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cObjectUnionOfParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cObjectComplementOfParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cObjectOneOfParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cObjectSomeValuesFromParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cObjectAllValuesFromParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cObjectHasValueParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cObjectHasSelfParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cObjectMinCardinalityParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cObjectMaxCardinalityParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cObjectExactCardinalityParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cDataSomeValuesFromParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cDataAllValuesFromParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cDataHasValueParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cDataMinCardinalityParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cDataMaxCardinalityParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cDataExactCardinalityParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		
		//// Class Expressions
		//ClassExpression:
		//	ClassReference | ObjectIntersectionOf | ObjectUnionOf | ObjectComplementOf | ObjectOneOf | ObjectSomeValuesFrom |
		//	ObjectAllValuesFrom | ObjectHasValue | ObjectHasSelf | ObjectMinCardinality | ObjectMaxCardinality |
		//	ObjectExactCardinality | DataSomeValuesFrom | DataAllValuesFrom | DataHasValue | DataMinCardinality |
		//	DataMaxCardinality | DataExactCardinality;
		@Override public ParserRule getRule() { return rule; }
		
		//ClassReference | ObjectIntersectionOf | ObjectUnionOf | ObjectComplementOf | ObjectOneOf | ObjectSomeValuesFrom |
		//ObjectAllValuesFrom | ObjectHasValue | ObjectHasSelf | ObjectMinCardinality | ObjectMaxCardinality |
		//ObjectExactCardinality | DataSomeValuesFrom | DataAllValuesFrom | DataHasValue | DataMinCardinality |
		//DataMaxCardinality | DataExactCardinality
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ClassReference
		public RuleCall getClassReferenceParserRuleCall_0() { return cClassReferenceParserRuleCall_0; }
		
		//ObjectIntersectionOf
		public RuleCall getObjectIntersectionOfParserRuleCall_1() { return cObjectIntersectionOfParserRuleCall_1; }
		
		//ObjectUnionOf
		public RuleCall getObjectUnionOfParserRuleCall_2() { return cObjectUnionOfParserRuleCall_2; }
		
		//ObjectComplementOf
		public RuleCall getObjectComplementOfParserRuleCall_3() { return cObjectComplementOfParserRuleCall_3; }
		
		//ObjectOneOf
		public RuleCall getObjectOneOfParserRuleCall_4() { return cObjectOneOfParserRuleCall_4; }
		
		//ObjectSomeValuesFrom
		public RuleCall getObjectSomeValuesFromParserRuleCall_5() { return cObjectSomeValuesFromParserRuleCall_5; }
		
		//ObjectAllValuesFrom
		public RuleCall getObjectAllValuesFromParserRuleCall_6() { return cObjectAllValuesFromParserRuleCall_6; }
		
		//ObjectHasValue
		public RuleCall getObjectHasValueParserRuleCall_7() { return cObjectHasValueParserRuleCall_7; }
		
		//ObjectHasSelf
		public RuleCall getObjectHasSelfParserRuleCall_8() { return cObjectHasSelfParserRuleCall_8; }
		
		//ObjectMinCardinality
		public RuleCall getObjectMinCardinalityParserRuleCall_9() { return cObjectMinCardinalityParserRuleCall_9; }
		
		//ObjectMaxCardinality
		public RuleCall getObjectMaxCardinalityParserRuleCall_10() { return cObjectMaxCardinalityParserRuleCall_10; }
		
		//ObjectExactCardinality
		public RuleCall getObjectExactCardinalityParserRuleCall_11() { return cObjectExactCardinalityParserRuleCall_11; }
		
		//DataSomeValuesFrom
		public RuleCall getDataSomeValuesFromParserRuleCall_12() { return cDataSomeValuesFromParserRuleCall_12; }
		
		//DataAllValuesFrom
		public RuleCall getDataAllValuesFromParserRuleCall_13() { return cDataAllValuesFromParserRuleCall_13; }
		
		//DataHasValue
		public RuleCall getDataHasValueParserRuleCall_14() { return cDataHasValueParserRuleCall_14; }
		
		//DataMinCardinality
		public RuleCall getDataMinCardinalityParserRuleCall_15() { return cDataMinCardinalityParserRuleCall_15; }
		
		//DataMaxCardinality
		public RuleCall getDataMaxCardinalityParserRuleCall_16() { return cDataMaxCardinalityParserRuleCall_16; }
		
		//DataExactCardinality
		public RuleCall getDataExactCardinalityParserRuleCall_17() { return cDataExactCardinalityParserRuleCall_17; }
	}
	public class ClassReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ClassReference");
		private final Assignment cClassAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cClassIRIParserRuleCall_0 = (RuleCall)cClassAssignment.eContents().get(0);
		
		//ClassReference:
		//	class=IRI // [Class|IRI]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//class=IRI
		public Assignment getClassAssignment() { return cClassAssignment; }
		
		//IRI
		public RuleCall getClassIRIParserRuleCall_0() { return cClassIRIParserRuleCall_0; }
	}
	public class ObjectIntersectionOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ObjectIntersectionOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectIntersectionOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassExpressionsClassExpressionParserRuleCall_2_0 = (RuleCall)cClassExpressionsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ObjectIntersectionOf:
		//	'ObjectIntersectionOf' '('
		//	classExpressions+=ClassExpression+
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ObjectIntersectionOf' '(' classExpressions+=ClassExpression+ ')'
		public Group getGroup() { return cGroup; }
		
		//'ObjectIntersectionOf'
		public Keyword getObjectIntersectionOfKeyword_0() { return cObjectIntersectionOfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//classExpressions+=ClassExpression+
		public Assignment getClassExpressionsAssignment_2() { return cClassExpressionsAssignment_2; }
		
		//ClassExpression
		public RuleCall getClassExpressionsClassExpressionParserRuleCall_2_0() { return cClassExpressionsClassExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ObjectUnionOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ObjectUnionOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectUnionOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassExpressionsClassExpressionParserRuleCall_2_0 = (RuleCall)cClassExpressionsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ObjectUnionOf:
		//	'ObjectUnionOf' '('
		//	classExpressions+=ClassExpression+
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ObjectUnionOf' '(' classExpressions+=ClassExpression+ ')'
		public Group getGroup() { return cGroup; }
		
		//'ObjectUnionOf'
		public Keyword getObjectUnionOfKeyword_0() { return cObjectUnionOfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//classExpressions+=ClassExpression+
		public Assignment getClassExpressionsAssignment_2() { return cClassExpressionsAssignment_2; }
		
		//ClassExpression
		public RuleCall getClassExpressionsClassExpressionParserRuleCall_2_0() { return cClassExpressionsClassExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ObjectComplementOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ObjectComplementOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectComplementOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassExpressionClassExpressionParserRuleCall_2_0 = (RuleCall)cClassExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ObjectComplementOf:
		//	'ObjectComplementOf' '('
		//	classExpression=ClassExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ObjectComplementOf' '(' classExpression=ClassExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'ObjectComplementOf'
		public Keyword getObjectComplementOfKeyword_0() { return cObjectComplementOfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//classExpression=ClassExpression
		public Assignment getClassExpressionAssignment_2() { return cClassExpressionAssignment_2; }
		
		//ClassExpression
		public RuleCall getClassExpressionClassExpressionParserRuleCall_2_0() { return cClassExpressionClassExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ObjectOneOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ObjectOneOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectOneOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndividualsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndividualsIndividualReferenceParserRuleCall_2_0 = (RuleCall)cIndividualsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ObjectOneOf:
		//	'ObjectOneOf' '('
		//	individuals+=IndividualReference+
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ObjectOneOf' '(' individuals+=IndividualReference+ ')'
		public Group getGroup() { return cGroup; }
		
		//'ObjectOneOf'
		public Keyword getObjectOneOfKeyword_0() { return cObjectOneOfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//individuals+=IndividualReference+
		public Assignment getIndividualsAssignment_2() { return cIndividualsAssignment_2; }
		
		//IndividualReference
		public RuleCall getIndividualsIndividualReferenceParserRuleCall_2_0() { return cIndividualsIndividualReferenceParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class IndividualReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.IndividualReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNamedIndividualReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnonymousIndividualReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IndividualReference:
		//	NamedIndividualReference | AnonymousIndividualReference;
		@Override public ParserRule getRule() { return rule; }
		
		//NamedIndividualReference | AnonymousIndividualReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NamedIndividualReference
		public RuleCall getNamedIndividualReferenceParserRuleCall_0() { return cNamedIndividualReferenceParserRuleCall_0; }
		
		//AnonymousIndividualReference
		public RuleCall getAnonymousIndividualReferenceParserRuleCall_1() { return cAnonymousIndividualReferenceParserRuleCall_1; }
	}
	public class NamedIndividualReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.NamedIndividualReference");
		private final Assignment cIndividualAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIndividualIRIParserRuleCall_0 = (RuleCall)cIndividualAssignment.eContents().get(0);
		
		//NamedIndividualReference:
		//	individual=IRI // [NamedIndividual|IRI]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//individual=IRI
		public Assignment getIndividualAssignment() { return cIndividualAssignment; }
		
		//IRI
		public RuleCall getIndividualIRIParserRuleCall_0() { return cIndividualIRIParserRuleCall_0; }
	}
	public class AnonymousIndividualReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.AnonymousIndividualReference");
		private final Assignment cIndividualAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIndividualNodeIDParserRuleCall_0 = (RuleCall)cIndividualAssignment.eContents().get(0);
		
		//AnonymousIndividualReference:
		//	individual=NodeID // [AnonymousIndividual|NodeID]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//individual=NodeID
		public Assignment getIndividualAssignment() { return cIndividualAssignment; }
		
		//NodeID
		public RuleCall getIndividualNodeIDParserRuleCall_0() { return cIndividualNodeIDParserRuleCall_0; }
	}
	public class ObjectSomeValuesFromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ObjectSomeValuesFrom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectSomeValuesFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObjectPropertyExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_2_0 = (RuleCall)cObjectPropertyExpressionAssignment_2.eContents().get(0);
		private final Assignment cClassExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassExpressionClassExpressionParserRuleCall_3_0 = (RuleCall)cClassExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ObjectSomeValuesFrom:
		//	'ObjectSomeValuesFrom' '('
		//	objectPropertyExpression=ObjectPropertyExpression
		//	classExpression=ClassExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ObjectSomeValuesFrom' '(' objectPropertyExpression=ObjectPropertyExpression classExpression=ClassExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'ObjectSomeValuesFrom'
		public Keyword getObjectSomeValuesFromKeyword_0() { return cObjectSomeValuesFromKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//objectPropertyExpression=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionAssignment_2() { return cObjectPropertyExpressionAssignment_2; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_2_0() { return cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_2_0; }
		
		//classExpression=ClassExpression
		public Assignment getClassExpressionAssignment_3() { return cClassExpressionAssignment_3; }
		
		//ClassExpression
		public RuleCall getClassExpressionClassExpressionParserRuleCall_3_0() { return cClassExpressionClassExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ObjectAllValuesFromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ObjectAllValuesFrom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectAllValuesFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObjectPropertyExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_2_0 = (RuleCall)cObjectPropertyExpressionAssignment_2.eContents().get(0);
		private final Assignment cClassExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassExpressionClassExpressionParserRuleCall_3_0 = (RuleCall)cClassExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ObjectAllValuesFrom:
		//	'ObjectAllValuesFrom' '('
		//	objectPropertyExpression=ObjectPropertyExpression
		//	classExpression=ClassExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ObjectAllValuesFrom' '(' objectPropertyExpression=ObjectPropertyExpression classExpression=ClassExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'ObjectAllValuesFrom'
		public Keyword getObjectAllValuesFromKeyword_0() { return cObjectAllValuesFromKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//objectPropertyExpression=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionAssignment_2() { return cObjectPropertyExpressionAssignment_2; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_2_0() { return cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_2_0; }
		
		//classExpression=ClassExpression
		public Assignment getClassExpressionAssignment_3() { return cClassExpressionAssignment_3; }
		
		//ClassExpression
		public RuleCall getClassExpressionClassExpressionParserRuleCall_3_0() { return cClassExpressionClassExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ObjectHasValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ObjectHasValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectHasValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObjectPropertyExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_2_0 = (RuleCall)cObjectPropertyExpressionAssignment_2.eContents().get(0);
		private final Assignment cIndividualAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndividualIndividualReferenceParserRuleCall_3_0 = (RuleCall)cIndividualAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ObjectHasValue:
		//	'ObjectHasValue' '('
		//	objectPropertyExpression=ObjectPropertyExpression
		//	individual=IndividualReference
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ObjectHasValue' '(' objectPropertyExpression=ObjectPropertyExpression individual=IndividualReference ')'
		public Group getGroup() { return cGroup; }
		
		//'ObjectHasValue'
		public Keyword getObjectHasValueKeyword_0() { return cObjectHasValueKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//objectPropertyExpression=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionAssignment_2() { return cObjectPropertyExpressionAssignment_2; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_2_0() { return cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_2_0; }
		
		//individual=IndividualReference
		public Assignment getIndividualAssignment_3() { return cIndividualAssignment_3; }
		
		//IndividualReference
		public RuleCall getIndividualIndividualReferenceParserRuleCall_3_0() { return cIndividualIndividualReferenceParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ObjectHasSelfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ObjectHasSelf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectHasSelfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObjectPropertyExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_2_0 = (RuleCall)cObjectPropertyExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ObjectHasSelf:
		//	'ObjectHasSelf' '('
		//	objectPropertyExpression=ObjectPropertyExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ObjectHasSelf' '(' objectPropertyExpression=ObjectPropertyExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'ObjectHasSelf'
		public Keyword getObjectHasSelfKeyword_0() { return cObjectHasSelfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//objectPropertyExpression=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionAssignment_2() { return cObjectPropertyExpressionAssignment_2; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_2_0() { return cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ObjectMinCardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ObjectMinCardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectMinCardinalityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCardinalityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCardinalityINTTerminalRuleCall_2_0 = (RuleCall)cCardinalityAssignment_2.eContents().get(0);
		private final Assignment cObjectPropertyExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0 = (RuleCall)cObjectPropertyExpressionAssignment_3.eContents().get(0);
		private final Assignment cClassExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassExpressionClassExpressionParserRuleCall_4_0 = (RuleCall)cClassExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ObjectMinCardinality:
		//	'ObjectMinCardinality' '('
		//	cardinality=INT
		//	objectPropertyExpression=ObjectPropertyExpression
		//	classExpression=ClassExpression?
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ObjectMinCardinality' '(' cardinality=INT objectPropertyExpression=ObjectPropertyExpression
		//classExpression=ClassExpression? ')'
		public Group getGroup() { return cGroup; }
		
		//'ObjectMinCardinality'
		public Keyword getObjectMinCardinalityKeyword_0() { return cObjectMinCardinalityKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cardinality=INT
		public Assignment getCardinalityAssignment_2() { return cCardinalityAssignment_2; }
		
		//INT
		public RuleCall getCardinalityINTTerminalRuleCall_2_0() { return cCardinalityINTTerminalRuleCall_2_0; }
		
		//objectPropertyExpression=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionAssignment_3() { return cObjectPropertyExpressionAssignment_3; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0() { return cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0; }
		
		//classExpression=ClassExpression?
		public Assignment getClassExpressionAssignment_4() { return cClassExpressionAssignment_4; }
		
		//ClassExpression
		public RuleCall getClassExpressionClassExpressionParserRuleCall_4_0() { return cClassExpressionClassExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ObjectMaxCardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ObjectMaxCardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectMaxCardinalityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCardinalityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCardinalityINTTerminalRuleCall_2_0 = (RuleCall)cCardinalityAssignment_2.eContents().get(0);
		private final Assignment cObjectPropertyExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0 = (RuleCall)cObjectPropertyExpressionAssignment_3.eContents().get(0);
		private final Assignment cClassExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassExpressionClassExpressionParserRuleCall_4_0 = (RuleCall)cClassExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ObjectMaxCardinality:
		//	'ObjectMaxCardinality' '('
		//	cardinality=INT
		//	objectPropertyExpression=ObjectPropertyExpression
		//	classExpression=ClassExpression?
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ObjectMaxCardinality' '(' cardinality=INT objectPropertyExpression=ObjectPropertyExpression
		//classExpression=ClassExpression? ')'
		public Group getGroup() { return cGroup; }
		
		//'ObjectMaxCardinality'
		public Keyword getObjectMaxCardinalityKeyword_0() { return cObjectMaxCardinalityKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cardinality=INT
		public Assignment getCardinalityAssignment_2() { return cCardinalityAssignment_2; }
		
		//INT
		public RuleCall getCardinalityINTTerminalRuleCall_2_0() { return cCardinalityINTTerminalRuleCall_2_0; }
		
		//objectPropertyExpression=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionAssignment_3() { return cObjectPropertyExpressionAssignment_3; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0() { return cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0; }
		
		//classExpression=ClassExpression?
		public Assignment getClassExpressionAssignment_4() { return cClassExpressionAssignment_4; }
		
		//ClassExpression
		public RuleCall getClassExpressionClassExpressionParserRuleCall_4_0() { return cClassExpressionClassExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ObjectExactCardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ObjectExactCardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectExactCardinalityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCardinalityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCardinalityINTTerminalRuleCall_2_0 = (RuleCall)cCardinalityAssignment_2.eContents().get(0);
		private final Assignment cObjectPropertyExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0 = (RuleCall)cObjectPropertyExpressionAssignment_3.eContents().get(0);
		private final Assignment cClassExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassExpressionClassExpressionParserRuleCall_4_0 = (RuleCall)cClassExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ObjectExactCardinality:
		//	'ObjectExactCardinality' '('
		//	cardinality=INT
		//	objectPropertyExpression=ObjectPropertyExpression
		//	classExpression=ClassExpression?
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ObjectExactCardinality' '(' cardinality=INT objectPropertyExpression=ObjectPropertyExpression
		//classExpression=ClassExpression? ')'
		public Group getGroup() { return cGroup; }
		
		//'ObjectExactCardinality'
		public Keyword getObjectExactCardinalityKeyword_0() { return cObjectExactCardinalityKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cardinality=INT
		public Assignment getCardinalityAssignment_2() { return cCardinalityAssignment_2; }
		
		//INT
		public RuleCall getCardinalityINTTerminalRuleCall_2_0() { return cCardinalityINTTerminalRuleCall_2_0; }
		
		//objectPropertyExpression=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionAssignment_3() { return cObjectPropertyExpressionAssignment_3; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0() { return cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0; }
		
		//classExpression=ClassExpression?
		public Assignment getClassExpressionAssignment_4() { return cClassExpressionAssignment_4; }
		
		//ClassExpression
		public RuleCall getClassExpressionClassExpressionParserRuleCall_4_0() { return cClassExpressionClassExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class DataSomeValuesFromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DataSomeValuesFrom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataSomeValuesFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDataPropertyExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataPropertyExpressionsDataPropertyExpressionParserRuleCall_2_0 = (RuleCall)cDataPropertyExpressionsAssignment_2.eContents().get(0);
		private final Assignment cDataRangeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDataRangeDataRangeParserRuleCall_3_0 = (RuleCall)cDataRangeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DataSomeValuesFrom:
		//	'DataSomeValuesFrom' '('
		//	dataPropertyExpressions+=DataPropertyExpression+
		//	dataRange+=DataRange
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DataSomeValuesFrom' '(' dataPropertyExpressions+=DataPropertyExpression+ dataRange+=DataRange ')'
		public Group getGroup() { return cGroup; }
		
		//'DataSomeValuesFrom'
		public Keyword getDataSomeValuesFromKeyword_0() { return cDataSomeValuesFromKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//dataPropertyExpressions+=DataPropertyExpression+
		public Assignment getDataPropertyExpressionsAssignment_2() { return cDataPropertyExpressionsAssignment_2; }
		
		//DataPropertyExpression
		public RuleCall getDataPropertyExpressionsDataPropertyExpressionParserRuleCall_2_0() { return cDataPropertyExpressionsDataPropertyExpressionParserRuleCall_2_0; }
		
		//dataRange+=DataRange
		public Assignment getDataRangeAssignment_3() { return cDataRangeAssignment_3; }
		
		//DataRange
		public RuleCall getDataRangeDataRangeParserRuleCall_3_0() { return cDataRangeDataRangeParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DataAllValuesFromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DataAllValuesFrom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataAllValuesFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDataPropertyExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataPropertyExpressionsDataPropertyExpressionParserRuleCall_2_0 = (RuleCall)cDataPropertyExpressionsAssignment_2.eContents().get(0);
		private final Assignment cDataRangeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDataRangeDataRangeParserRuleCall_3_0 = (RuleCall)cDataRangeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DataAllValuesFrom:
		//	'DataAllValuesFrom' '('
		//	dataPropertyExpressions+=DataPropertyExpression+
		//	dataRange+=DataRange
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DataAllValuesFrom' '(' dataPropertyExpressions+=DataPropertyExpression+ dataRange+=DataRange ')'
		public Group getGroup() { return cGroup; }
		
		//'DataAllValuesFrom'
		public Keyword getDataAllValuesFromKeyword_0() { return cDataAllValuesFromKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//dataPropertyExpressions+=DataPropertyExpression+
		public Assignment getDataPropertyExpressionsAssignment_2() { return cDataPropertyExpressionsAssignment_2; }
		
		//DataPropertyExpression
		public RuleCall getDataPropertyExpressionsDataPropertyExpressionParserRuleCall_2_0() { return cDataPropertyExpressionsDataPropertyExpressionParserRuleCall_2_0; }
		
		//dataRange+=DataRange
		public Assignment getDataRangeAssignment_3() { return cDataRangeAssignment_3; }
		
		//DataRange
		public RuleCall getDataRangeDataRangeParserRuleCall_3_0() { return cDataRangeDataRangeParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DataHasValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DataHasValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataHasValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDataPropertyExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataPropertyExpressionDataPropertyExpressionParserRuleCall_2_0 = (RuleCall)cDataPropertyExpressionAssignment_2.eContents().get(0);
		private final Assignment cLiteralAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLiteralLiteralParserRuleCall_3_0 = (RuleCall)cLiteralAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DataHasValue:
		//	'DataHasValue' '('
		//	dataPropertyExpression=DataPropertyExpression
		//	literal=Literal
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DataHasValue' '(' dataPropertyExpression=DataPropertyExpression literal=Literal ')'
		public Group getGroup() { return cGroup; }
		
		//'DataHasValue'
		public Keyword getDataHasValueKeyword_0() { return cDataHasValueKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//dataPropertyExpression=DataPropertyExpression
		public Assignment getDataPropertyExpressionAssignment_2() { return cDataPropertyExpressionAssignment_2; }
		
		//DataPropertyExpression
		public RuleCall getDataPropertyExpressionDataPropertyExpressionParserRuleCall_2_0() { return cDataPropertyExpressionDataPropertyExpressionParserRuleCall_2_0; }
		
		//literal=Literal
		public Assignment getLiteralAssignment_3() { return cLiteralAssignment_3; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_3_0() { return cLiteralLiteralParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DataMinCardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DataMinCardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataMinCardinalityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCardinalityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCardinalityINTTerminalRuleCall_2_0 = (RuleCall)cCardinalityAssignment_2.eContents().get(0);
		private final Assignment cDataPropertyExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDataPropertyExpressionDataPropertyExpressionParserRuleCall_3_0 = (RuleCall)cDataPropertyExpressionAssignment_3.eContents().get(0);
		private final Assignment cDataRangeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDataRangeDataRangeParserRuleCall_4_0 = (RuleCall)cDataRangeAssignment_4.eContents().get(0);
		
		//DataMinCardinality:
		//	'DataMinCardinality' '('
		//	cardinality=INT
		//	dataPropertyExpression=DataPropertyExpression
		//	dataRange=DataRange?;
		@Override public ParserRule getRule() { return rule; }
		
		//'DataMinCardinality' '(' cardinality=INT dataPropertyExpression=DataPropertyExpression dataRange=DataRange?
		public Group getGroup() { return cGroup; }
		
		//'DataMinCardinality'
		public Keyword getDataMinCardinalityKeyword_0() { return cDataMinCardinalityKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cardinality=INT
		public Assignment getCardinalityAssignment_2() { return cCardinalityAssignment_2; }
		
		//INT
		public RuleCall getCardinalityINTTerminalRuleCall_2_0() { return cCardinalityINTTerminalRuleCall_2_0; }
		
		//dataPropertyExpression=DataPropertyExpression
		public Assignment getDataPropertyExpressionAssignment_3() { return cDataPropertyExpressionAssignment_3; }
		
		//DataPropertyExpression
		public RuleCall getDataPropertyExpressionDataPropertyExpressionParserRuleCall_3_0() { return cDataPropertyExpressionDataPropertyExpressionParserRuleCall_3_0; }
		
		//dataRange=DataRange?
		public Assignment getDataRangeAssignment_4() { return cDataRangeAssignment_4; }
		
		//DataRange
		public RuleCall getDataRangeDataRangeParserRuleCall_4_0() { return cDataRangeDataRangeParserRuleCall_4_0; }
	}
	public class DataMaxCardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DataMaxCardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataMaxCardinalityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCardinalityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCardinalityINTTerminalRuleCall_2_0 = (RuleCall)cCardinalityAssignment_2.eContents().get(0);
		private final Assignment cDataPropertyExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDataPropertyExpressionDataPropertyExpressionParserRuleCall_3_0 = (RuleCall)cDataPropertyExpressionAssignment_3.eContents().get(0);
		private final Assignment cDataRangeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDataRangeDataRangeParserRuleCall_4_0 = (RuleCall)cDataRangeAssignment_4.eContents().get(0);
		
		//DataMaxCardinality:
		//	'DataMaxCardinality' '('
		//	cardinality=INT
		//	dataPropertyExpression=DataPropertyExpression
		//	dataRange=DataRange?;
		@Override public ParserRule getRule() { return rule; }
		
		//'DataMaxCardinality' '(' cardinality=INT dataPropertyExpression=DataPropertyExpression dataRange=DataRange?
		public Group getGroup() { return cGroup; }
		
		//'DataMaxCardinality'
		public Keyword getDataMaxCardinalityKeyword_0() { return cDataMaxCardinalityKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cardinality=INT
		public Assignment getCardinalityAssignment_2() { return cCardinalityAssignment_2; }
		
		//INT
		public RuleCall getCardinalityINTTerminalRuleCall_2_0() { return cCardinalityINTTerminalRuleCall_2_0; }
		
		//dataPropertyExpression=DataPropertyExpression
		public Assignment getDataPropertyExpressionAssignment_3() { return cDataPropertyExpressionAssignment_3; }
		
		//DataPropertyExpression
		public RuleCall getDataPropertyExpressionDataPropertyExpressionParserRuleCall_3_0() { return cDataPropertyExpressionDataPropertyExpressionParserRuleCall_3_0; }
		
		//dataRange=DataRange?
		public Assignment getDataRangeAssignment_4() { return cDataRangeAssignment_4; }
		
		//DataRange
		public RuleCall getDataRangeDataRangeParserRuleCall_4_0() { return cDataRangeDataRangeParserRuleCall_4_0; }
	}
	public class DataExactCardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DataExactCardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataExactCardinalityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCardinalityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCardinalityINTTerminalRuleCall_2_0 = (RuleCall)cCardinalityAssignment_2.eContents().get(0);
		private final Assignment cDataPropertyExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDataPropertyExpressionDataPropertyExpressionParserRuleCall_3_0 = (RuleCall)cDataPropertyExpressionAssignment_3.eContents().get(0);
		private final Assignment cDataRangeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDataRangeDataRangeParserRuleCall_4_0 = (RuleCall)cDataRangeAssignment_4.eContents().get(0);
		
		//DataExactCardinality:
		//	'DataExactCardinality' '('
		//	cardinality=INT
		//	dataPropertyExpression=DataPropertyExpression
		//	dataRange=DataRange?;
		@Override public ParserRule getRule() { return rule; }
		
		//'DataExactCardinality' '(' cardinality=INT dataPropertyExpression=DataPropertyExpression dataRange=DataRange?
		public Group getGroup() { return cGroup; }
		
		//'DataExactCardinality'
		public Keyword getDataExactCardinalityKeyword_0() { return cDataExactCardinalityKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cardinality=INT
		public Assignment getCardinalityAssignment_2() { return cCardinalityAssignment_2; }
		
		//INT
		public RuleCall getCardinalityINTTerminalRuleCall_2_0() { return cCardinalityINTTerminalRuleCall_2_0; }
		
		//dataPropertyExpression=DataPropertyExpression
		public Assignment getDataPropertyExpressionAssignment_3() { return cDataPropertyExpressionAssignment_3; }
		
		//DataPropertyExpression
		public RuleCall getDataPropertyExpressionDataPropertyExpressionParserRuleCall_3_0() { return cDataPropertyExpressionDataPropertyExpressionParserRuleCall_3_0; }
		
		//dataRange=DataRange?
		public Assignment getDataRangeAssignment_4() { return cDataRangeAssignment_4; }
		
		//DataRange
		public RuleCall getDataRangeDataRangeParserRuleCall_4_0() { return cDataRangeDataRangeParserRuleCall_4_0; }
	}
	public class AxiomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.Axiom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassAxiomParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cObjectPropertyAxiomParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDataPropertyAxiomParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDatatypeDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cHasKeyParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAssertionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAnnotationAxiomParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//// Axioms
		//Axiom:
		//	Declaration | ClassAxiom | ObjectPropertyAxiom | DataPropertyAxiom | DatatypeDefinition | HasKey | Assertion |
		//	AnnotationAxiom;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration | ClassAxiom | ObjectPropertyAxiom | DataPropertyAxiom | DatatypeDefinition | HasKey | Assertion |
		//AnnotationAxiom
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall_0() { return cDeclarationParserRuleCall_0; }
		
		//ClassAxiom
		public RuleCall getClassAxiomParserRuleCall_1() { return cClassAxiomParserRuleCall_1; }
		
		//ObjectPropertyAxiom
		public RuleCall getObjectPropertyAxiomParserRuleCall_2() { return cObjectPropertyAxiomParserRuleCall_2; }
		
		//DataPropertyAxiom
		public RuleCall getDataPropertyAxiomParserRuleCall_3() { return cDataPropertyAxiomParserRuleCall_3; }
		
		//DatatypeDefinition
		public RuleCall getDatatypeDefinitionParserRuleCall_4() { return cDatatypeDefinitionParserRuleCall_4; }
		
		//HasKey
		public RuleCall getHasKeyParserRuleCall_5() { return cHasKeyParserRuleCall_5; }
		
		//Assertion
		public RuleCall getAssertionParserRuleCall_6() { return cAssertionParserRuleCall_6; }
		
		//AnnotationAxiom
		public RuleCall getAnnotationAxiomParserRuleCall_7() { return cAnnotationAxiomParserRuleCall_7; }
	}
	public class ClassAxiomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ClassAxiom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubClassOfParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEquivalentClassesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDisjointClassesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDisjointUnionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// Class Axioms
		//ClassAxiom:
		//	SubClassOf | EquivalentClasses | DisjointClasses | DisjointUnion;
		@Override public ParserRule getRule() { return rule; }
		
		//SubClassOf | EquivalentClasses | DisjointClasses | DisjointUnion
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SubClassOf
		public RuleCall getSubClassOfParserRuleCall_0() { return cSubClassOfParserRuleCall_0; }
		
		//EquivalentClasses
		public RuleCall getEquivalentClassesParserRuleCall_1() { return cEquivalentClassesParserRuleCall_1; }
		
		//DisjointClasses
		public RuleCall getDisjointClassesParserRuleCall_2() { return cDisjointClassesParserRuleCall_2; }
		
		//DisjointUnion
		public RuleCall getDisjointUnionParserRuleCall_3() { return cDisjointUnionParserRuleCall_3; }
	}
	public class SubClassOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.SubClassOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubClassOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cSubClassExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubClassExpressionClassExpressionParserRuleCall_3_0 = (RuleCall)cSubClassExpressionAssignment_3.eContents().get(0);
		private final Assignment cSuperClassExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSuperClassExpressionClassExpressionParserRuleCall_4_0 = (RuleCall)cSuperClassExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SubClassOf:
		//	'SubClassOf' '('
		//	axiomAnnotations+=Annotation*
		//	subClassExpression=ClassExpression
		//	superClassExpression=ClassExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'SubClassOf' '(' axiomAnnotations+=Annotation* subClassExpression=ClassExpression superClassExpression=ClassExpression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'SubClassOf'
		public Keyword getSubClassOfKeyword_0() { return cSubClassOfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//subClassExpression=ClassExpression
		public Assignment getSubClassExpressionAssignment_3() { return cSubClassExpressionAssignment_3; }
		
		//ClassExpression
		public RuleCall getSubClassExpressionClassExpressionParserRuleCall_3_0() { return cSubClassExpressionClassExpressionParserRuleCall_3_0; }
		
		//superClassExpression=ClassExpression
		public Assignment getSuperClassExpressionAssignment_4() { return cSuperClassExpressionAssignment_4; }
		
		//ClassExpression
		public RuleCall getSuperClassExpressionClassExpressionParserRuleCall_4_0() { return cSuperClassExpressionClassExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class EquivalentClassesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.EquivalentClasses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEquivalentClassesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cClassExpressionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassExpressionsClassExpressionParserRuleCall_3_0 = (RuleCall)cClassExpressionsAssignment_3.eContents().get(0);
		private final Assignment cClassExpressionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassExpressionsClassExpressionParserRuleCall_4_0 = (RuleCall)cClassExpressionsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EquivalentClasses:
		//	'EquivalentClasses' '('
		//	axiomAnnotations+=Annotation*
		//	classExpressions+=ClassExpression
		//	classExpressions+=ClassExpression+
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'EquivalentClasses' '(' axiomAnnotations+=Annotation* classExpressions+=ClassExpression
		//classExpressions+=ClassExpression+ ')'
		public Group getGroup() { return cGroup; }
		
		//'EquivalentClasses'
		public Keyword getEquivalentClassesKeyword_0() { return cEquivalentClassesKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//classExpressions+=ClassExpression
		public Assignment getClassExpressionsAssignment_3() { return cClassExpressionsAssignment_3; }
		
		//ClassExpression
		public RuleCall getClassExpressionsClassExpressionParserRuleCall_3_0() { return cClassExpressionsClassExpressionParserRuleCall_3_0; }
		
		//classExpressions+=ClassExpression+
		public Assignment getClassExpressionsAssignment_4() { return cClassExpressionsAssignment_4; }
		
		//ClassExpression
		public RuleCall getClassExpressionsClassExpressionParserRuleCall_4_0() { return cClassExpressionsClassExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class DisjointClassesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DisjointClasses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDisjointClassesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cClassExpressionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassExpressionsClassExpressionParserRuleCall_3_0 = (RuleCall)cClassExpressionsAssignment_3.eContents().get(0);
		private final Assignment cClassExpressionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassExpressionsClassExpressionParserRuleCall_4_0 = (RuleCall)cClassExpressionsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DisjointClasses:
		//	'DisjointClasses' '('
		//	axiomAnnotations+=Annotation*
		//	classExpressions+=ClassExpression
		//	classExpressions+=ClassExpression+
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DisjointClasses' '(' axiomAnnotations+=Annotation* classExpressions+=ClassExpression classExpressions+=ClassExpression+
		//')'
		public Group getGroup() { return cGroup; }
		
		//'DisjointClasses'
		public Keyword getDisjointClassesKeyword_0() { return cDisjointClassesKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//classExpressions+=ClassExpression
		public Assignment getClassExpressionsAssignment_3() { return cClassExpressionsAssignment_3; }
		
		//ClassExpression
		public RuleCall getClassExpressionsClassExpressionParserRuleCall_3_0() { return cClassExpressionsClassExpressionParserRuleCall_3_0; }
		
		//classExpressions+=ClassExpression+
		public Assignment getClassExpressionsAssignment_4() { return cClassExpressionsAssignment_4; }
		
		//ClassExpression
		public RuleCall getClassExpressionsClassExpressionParserRuleCall_4_0() { return cClassExpressionsClassExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class DisjointUnionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DisjointUnion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDisjointUnionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cClassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassClassReferenceParserRuleCall_3_0 = (RuleCall)cClassAssignment_3.eContents().get(0);
		private final Assignment cDisjointClassExpressionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDisjointClassExpressionsClassExpressionParserRuleCall_4_0 = (RuleCall)cDisjointClassExpressionsAssignment_4.eContents().get(0);
		private final Assignment cDisjointClassExpressionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDisjointClassExpressionsClassExpressionParserRuleCall_5_0 = (RuleCall)cDisjointClassExpressionsAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DisjointUnion:
		//	'DisjointUnion' '('
		//	axiomAnnotations+=Annotation*
		//	class=ClassReference
		//	disjointClassExpressions+=ClassExpression
		//	disjointClassExpressions+=ClassExpression+
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DisjointUnion' '(' axiomAnnotations+=Annotation* class=ClassReference disjointClassExpressions+=ClassExpression
		//disjointClassExpressions+=ClassExpression+ ')'
		public Group getGroup() { return cGroup; }
		
		//'DisjointUnion'
		public Keyword getDisjointUnionKeyword_0() { return cDisjointUnionKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//class=ClassReference
		public Assignment getClassAssignment_3() { return cClassAssignment_3; }
		
		//ClassReference
		public RuleCall getClassClassReferenceParserRuleCall_3_0() { return cClassClassReferenceParserRuleCall_3_0; }
		
		//disjointClassExpressions+=ClassExpression
		public Assignment getDisjointClassExpressionsAssignment_4() { return cDisjointClassExpressionsAssignment_4; }
		
		//ClassExpression
		public RuleCall getDisjointClassExpressionsClassExpressionParserRuleCall_4_0() { return cDisjointClassExpressionsClassExpressionParserRuleCall_4_0; }
		
		//disjointClassExpressions+=ClassExpression+
		public Assignment getDisjointClassExpressionsAssignment_5() { return cDisjointClassExpressionsAssignment_5; }
		
		//ClassExpression
		public RuleCall getDisjointClassExpressionsClassExpressionParserRuleCall_5_0() { return cDisjointClassExpressionsClassExpressionParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ObjectPropertyAxiomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ObjectPropertyAxiom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubObjectPropertyOfParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEquivalentObjectPropertiesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDisjointObjectPropertiesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInverseObjectPropertiesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cObjectPropertyDomainParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cObjectPropertyRangeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFunctionalObjectPropertyParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cInverseFunctionalObjectPropertyParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cReflexiveObjectPropertyParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cIrreflexiveObjectPropertyParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cSymmetricObjectPropertyParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cAsymmetricObjectPropertyParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cTransitiveObjectPropertyParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//// Object Property Axioms
		//ObjectPropertyAxiom:
		//	SubObjectPropertyOf | EquivalentObjectProperties | DisjointObjectProperties | InverseObjectProperties |
		//	ObjectPropertyDomain | ObjectPropertyRange | FunctionalObjectProperty | InverseFunctionalObjectProperty |
		//	ReflexiveObjectProperty | IrreflexiveObjectProperty | SymmetricObjectProperty | AsymmetricObjectProperty |
		//	TransitiveObjectProperty;
		@Override public ParserRule getRule() { return rule; }
		
		//SubObjectPropertyOf | EquivalentObjectProperties | DisjointObjectProperties | InverseObjectProperties |
		//ObjectPropertyDomain | ObjectPropertyRange | FunctionalObjectProperty | InverseFunctionalObjectProperty |
		//ReflexiveObjectProperty | IrreflexiveObjectProperty | SymmetricObjectProperty | AsymmetricObjectProperty |
		//TransitiveObjectProperty
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SubObjectPropertyOf
		public RuleCall getSubObjectPropertyOfParserRuleCall_0() { return cSubObjectPropertyOfParserRuleCall_0; }
		
		//EquivalentObjectProperties
		public RuleCall getEquivalentObjectPropertiesParserRuleCall_1() { return cEquivalentObjectPropertiesParserRuleCall_1; }
		
		//DisjointObjectProperties
		public RuleCall getDisjointObjectPropertiesParserRuleCall_2() { return cDisjointObjectPropertiesParserRuleCall_2; }
		
		//InverseObjectProperties
		public RuleCall getInverseObjectPropertiesParserRuleCall_3() { return cInverseObjectPropertiesParserRuleCall_3; }
		
		//ObjectPropertyDomain
		public RuleCall getObjectPropertyDomainParserRuleCall_4() { return cObjectPropertyDomainParserRuleCall_4; }
		
		//ObjectPropertyRange
		public RuleCall getObjectPropertyRangeParserRuleCall_5() { return cObjectPropertyRangeParserRuleCall_5; }
		
		//FunctionalObjectProperty
		public RuleCall getFunctionalObjectPropertyParserRuleCall_6() { return cFunctionalObjectPropertyParserRuleCall_6; }
		
		//InverseFunctionalObjectProperty
		public RuleCall getInverseFunctionalObjectPropertyParserRuleCall_7() { return cInverseFunctionalObjectPropertyParserRuleCall_7; }
		
		//ReflexiveObjectProperty
		public RuleCall getReflexiveObjectPropertyParserRuleCall_8() { return cReflexiveObjectPropertyParserRuleCall_8; }
		
		//IrreflexiveObjectProperty
		public RuleCall getIrreflexiveObjectPropertyParserRuleCall_9() { return cIrreflexiveObjectPropertyParserRuleCall_9; }
		
		//SymmetricObjectProperty
		public RuleCall getSymmetricObjectPropertyParserRuleCall_10() { return cSymmetricObjectPropertyParserRuleCall_10; }
		
		//AsymmetricObjectProperty
		public RuleCall getAsymmetricObjectPropertyParserRuleCall_11() { return cAsymmetricObjectPropertyParserRuleCall_11; }
		
		//TransitiveObjectProperty
		public RuleCall getTransitiveObjectPropertyParserRuleCall_12() { return cTransitiveObjectPropertyParserRuleCall_12; }
	}
	public class SubObjectPropertyOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.SubObjectPropertyOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubObjectPropertyOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cSubObjectPropertyExpressionAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cSubObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0_0 = (RuleCall)cSubObjectPropertyExpressionAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cObjectPropertyChainKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cSubObjectPropertyExpressionAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cSubObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_1_2_0 = (RuleCall)cSubObjectPropertyExpressionAssignment_3_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SubObjectPropertyOf:
		//	'SubObjectPropertyOf' '('
		//	axiomAnnotations+=Annotation* (subObjectPropertyExpression+=ObjectPropertyExpression |
		//	'ObjectPropertyChain' '('
		//	subObjectPropertyExpression+=ObjectPropertyExpression+
		//	')')
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'SubObjectPropertyOf' '(' axiomAnnotations+=Annotation* (subObjectPropertyExpression+=ObjectPropertyExpression |
		//'ObjectPropertyChain' '(' subObjectPropertyExpression+=ObjectPropertyExpression+ ')') ')'
		public Group getGroup() { return cGroup; }
		
		//'SubObjectPropertyOf'
		public Keyword getSubObjectPropertyOfKeyword_0() { return cSubObjectPropertyOfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//subObjectPropertyExpression+=ObjectPropertyExpression | 'ObjectPropertyChain' '('
		//subObjectPropertyExpression+=ObjectPropertyExpression+ ')'
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//subObjectPropertyExpression+=ObjectPropertyExpression
		public Assignment getSubObjectPropertyExpressionAssignment_3_0() { return cSubObjectPropertyExpressionAssignment_3_0; }
		
		//ObjectPropertyExpression
		public RuleCall getSubObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0_0() { return cSubObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0_0; }
		
		//'ObjectPropertyChain' '(' subObjectPropertyExpression+=ObjectPropertyExpression+ ')'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'ObjectPropertyChain'
		public Keyword getObjectPropertyChainKeyword_3_1_0() { return cObjectPropertyChainKeyword_3_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1_1() { return cLeftParenthesisKeyword_3_1_1; }
		
		//subObjectPropertyExpression+=ObjectPropertyExpression+
		public Assignment getSubObjectPropertyExpressionAssignment_3_1_2() { return cSubObjectPropertyExpressionAssignment_3_1_2; }
		
		//ObjectPropertyExpression
		public RuleCall getSubObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_1_2_0() { return cSubObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_1_3() { return cRightParenthesisKeyword_3_1_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EquivalentObjectPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.EquivalentObjectProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEquivalentObjectPropertiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cObjectPropertyExpressionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectPropertyExpressionsObjectPropertyExpressionParserRuleCall_3_0 = (RuleCall)cObjectPropertyExpressionsAssignment_3.eContents().get(0);
		private final Assignment cObjectPropertyExpressionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjectPropertyExpressionsObjectPropertyExpressionParserRuleCall_4_0 = (RuleCall)cObjectPropertyExpressionsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EquivalentObjectProperties:
		//	'EquivalentObjectProperties' '('
		//	axiomAnnotations+=Annotation*
		//	objectPropertyExpressions+=ObjectPropertyExpression
		//	objectPropertyExpressions+=ObjectPropertyExpression+
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'EquivalentObjectProperties' '(' axiomAnnotations+=Annotation* objectPropertyExpressions+=ObjectPropertyExpression
		//objectPropertyExpressions+=ObjectPropertyExpression+ ')'
		public Group getGroup() { return cGroup; }
		
		//'EquivalentObjectProperties'
		public Keyword getEquivalentObjectPropertiesKeyword_0() { return cEquivalentObjectPropertiesKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//objectPropertyExpressions+=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionsAssignment_3() { return cObjectPropertyExpressionsAssignment_3; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionsObjectPropertyExpressionParserRuleCall_3_0() { return cObjectPropertyExpressionsObjectPropertyExpressionParserRuleCall_3_0; }
		
		//objectPropertyExpressions+=ObjectPropertyExpression+
		public Assignment getObjectPropertyExpressionsAssignment_4() { return cObjectPropertyExpressionsAssignment_4; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionsObjectPropertyExpressionParserRuleCall_4_0() { return cObjectPropertyExpressionsObjectPropertyExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class DisjointObjectPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DisjointObjectProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDisjointObjectPropertiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cObjectPropertyExpressionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectPropertyExpressionsObjectPropertyExpressionParserRuleCall_3_0 = (RuleCall)cObjectPropertyExpressionsAssignment_3.eContents().get(0);
		private final Assignment cObjectPropertyExpressionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjectPropertyExpressionsObjectPropertyExpressionParserRuleCall_4_0 = (RuleCall)cObjectPropertyExpressionsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DisjointObjectProperties:
		//	'DisjointObjectProperties' '('
		//	axiomAnnotations+=Annotation*
		//	objectPropertyExpressions+=ObjectPropertyExpression
		//	objectPropertyExpressions+=ObjectPropertyExpression+
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DisjointObjectProperties' '(' axiomAnnotations+=Annotation* objectPropertyExpressions+=ObjectPropertyExpression
		//objectPropertyExpressions+=ObjectPropertyExpression+ ')'
		public Group getGroup() { return cGroup; }
		
		//'DisjointObjectProperties'
		public Keyword getDisjointObjectPropertiesKeyword_0() { return cDisjointObjectPropertiesKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//objectPropertyExpressions+=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionsAssignment_3() { return cObjectPropertyExpressionsAssignment_3; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionsObjectPropertyExpressionParserRuleCall_3_0() { return cObjectPropertyExpressionsObjectPropertyExpressionParserRuleCall_3_0; }
		
		//objectPropertyExpressions+=ObjectPropertyExpression+
		public Assignment getObjectPropertyExpressionsAssignment_4() { return cObjectPropertyExpressionsAssignment_4; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionsObjectPropertyExpressionParserRuleCall_4_0() { return cObjectPropertyExpressionsObjectPropertyExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class InverseObjectPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.InverseObjectProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInverseObjectPropertiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cObjectPropertyExpression1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectPropertyExpression1ObjectPropertyExpressionParserRuleCall_3_0 = (RuleCall)cObjectPropertyExpression1Assignment_3.eContents().get(0);
		private final Assignment cObjectPropertyExpression2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjectPropertyExpression2ObjectPropertyExpressionParserRuleCall_4_0 = (RuleCall)cObjectPropertyExpression2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//InverseObjectProperties:
		//	'InverseObjectProperties' '('
		//	axiomAnnotations+=Annotation*
		//	objectPropertyExpression1=ObjectPropertyExpression
		//	objectPropertyExpression2=ObjectPropertyExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'InverseObjectProperties' '(' axiomAnnotations+=Annotation* objectPropertyExpression1=ObjectPropertyExpression
		//objectPropertyExpression2=ObjectPropertyExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'InverseObjectProperties'
		public Keyword getInverseObjectPropertiesKeyword_0() { return cInverseObjectPropertiesKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//objectPropertyExpression1=ObjectPropertyExpression
		public Assignment getObjectPropertyExpression1Assignment_3() { return cObjectPropertyExpression1Assignment_3; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpression1ObjectPropertyExpressionParserRuleCall_3_0() { return cObjectPropertyExpression1ObjectPropertyExpressionParserRuleCall_3_0; }
		
		//objectPropertyExpression2=ObjectPropertyExpression
		public Assignment getObjectPropertyExpression2Assignment_4() { return cObjectPropertyExpression2Assignment_4; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpression2ObjectPropertyExpressionParserRuleCall_4_0() { return cObjectPropertyExpression2ObjectPropertyExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ObjectPropertyDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ObjectPropertyDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectPropertyDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cObjectPropertyExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0 = (RuleCall)cObjectPropertyExpressionAssignment_3.eContents().get(0);
		private final Assignment cClassExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassExpressionClassExpressionParserRuleCall_4_0 = (RuleCall)cClassExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ObjectPropertyDomain:
		//	'ObjectPropertyDomain' '('
		//	axiomAnnotations+=Annotation*
		//	objectPropertyExpression=ObjectPropertyExpression
		//	classExpression=ClassExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ObjectPropertyDomain' '(' axiomAnnotations+=Annotation* objectPropertyExpression=ObjectPropertyExpression
		//classExpression=ClassExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'ObjectPropertyDomain'
		public Keyword getObjectPropertyDomainKeyword_0() { return cObjectPropertyDomainKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//objectPropertyExpression=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionAssignment_3() { return cObjectPropertyExpressionAssignment_3; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0() { return cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0; }
		
		//classExpression=ClassExpression
		public Assignment getClassExpressionAssignment_4() { return cClassExpressionAssignment_4; }
		
		//ClassExpression
		public RuleCall getClassExpressionClassExpressionParserRuleCall_4_0() { return cClassExpressionClassExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ObjectPropertyRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ObjectPropertyRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectPropertyRangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cObjectPropertyExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0 = (RuleCall)cObjectPropertyExpressionAssignment_3.eContents().get(0);
		private final Assignment cClassExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassExpressionClassExpressionParserRuleCall_4_0 = (RuleCall)cClassExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ObjectPropertyRange:
		//	'ObjectPropertyRange' '('
		//	axiomAnnotations+=Annotation*
		//	objectPropertyExpression=ObjectPropertyExpression
		//	classExpression=ClassExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ObjectPropertyRange' '(' axiomAnnotations+=Annotation* objectPropertyExpression=ObjectPropertyExpression
		//classExpression=ClassExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'ObjectPropertyRange'
		public Keyword getObjectPropertyRangeKeyword_0() { return cObjectPropertyRangeKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//objectPropertyExpression=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionAssignment_3() { return cObjectPropertyExpressionAssignment_3; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0() { return cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0; }
		
		//classExpression=ClassExpression
		public Assignment getClassExpressionAssignment_4() { return cClassExpressionAssignment_4; }
		
		//ClassExpression
		public RuleCall getClassExpressionClassExpressionParserRuleCall_4_0() { return cClassExpressionClassExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class FunctionalObjectPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.FunctionalObjectProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionalObjectPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cObjectPropertyExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0 = (RuleCall)cObjectPropertyExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FunctionalObjectProperty:
		//	'FunctionalObjectProperty' '('
		//	axiomAnnotations+=Annotation*
		//	objectPropertyExpression=ObjectPropertyExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'FunctionalObjectProperty' '(' axiomAnnotations+=Annotation* objectPropertyExpression=ObjectPropertyExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'FunctionalObjectProperty'
		public Keyword getFunctionalObjectPropertyKeyword_0() { return cFunctionalObjectPropertyKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//objectPropertyExpression=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionAssignment_3() { return cObjectPropertyExpressionAssignment_3; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0() { return cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class InverseFunctionalObjectPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.InverseFunctionalObjectProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInverseFunctionalObjectPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cObjectPropertyExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0 = (RuleCall)cObjectPropertyExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InverseFunctionalObjectProperty:
		//	'InverseFunctionalObjectProperty' '('
		//	axiomAnnotations+=Annotation*
		//	objectPropertyExpression=ObjectPropertyExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'InverseFunctionalObjectProperty' '(' axiomAnnotations+=Annotation* objectPropertyExpression=ObjectPropertyExpression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'InverseFunctionalObjectProperty'
		public Keyword getInverseFunctionalObjectPropertyKeyword_0() { return cInverseFunctionalObjectPropertyKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//objectPropertyExpression=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionAssignment_3() { return cObjectPropertyExpressionAssignment_3; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0() { return cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ReflexiveObjectPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ReflexiveObjectProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReflectiveObjectPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cObjectPropertyExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0 = (RuleCall)cObjectPropertyExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ReflexiveObjectProperty:
		//	'ReflectiveObjectProperty' '('
		//	axiomAnnotations+=Annotation*
		//	objectPropertyExpression=ObjectPropertyExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReflectiveObjectProperty' '(' axiomAnnotations+=Annotation* objectPropertyExpression=ObjectPropertyExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'ReflectiveObjectProperty'
		public Keyword getReflectiveObjectPropertyKeyword_0() { return cReflectiveObjectPropertyKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//objectPropertyExpression=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionAssignment_3() { return cObjectPropertyExpressionAssignment_3; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0() { return cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class IrreflexiveObjectPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.IrreflexiveObjectProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIrreflectiveObjectPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cObjectPropertyExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0 = (RuleCall)cObjectPropertyExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IrreflexiveObjectProperty:
		//	'IrreflectiveObjectProperty' '('
		//	axiomAnnotations+=Annotation*
		//	objectPropertyExpression=ObjectPropertyExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'IrreflectiveObjectProperty' '(' axiomAnnotations+=Annotation* objectPropertyExpression=ObjectPropertyExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'IrreflectiveObjectProperty'
		public Keyword getIrreflectiveObjectPropertyKeyword_0() { return cIrreflectiveObjectPropertyKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//objectPropertyExpression=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionAssignment_3() { return cObjectPropertyExpressionAssignment_3; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0() { return cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class SymmetricObjectPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.SymmetricObjectProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSymmetricObjectPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cObjectPropertyExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0 = (RuleCall)cObjectPropertyExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SymmetricObjectProperty:
		//	'SymmetricObjectProperty' '('
		//	axiomAnnotations+=Annotation*
		//	objectPropertyExpression=ObjectPropertyExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'SymmetricObjectProperty' '(' axiomAnnotations+=Annotation* objectPropertyExpression=ObjectPropertyExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'SymmetricObjectProperty'
		public Keyword getSymmetricObjectPropertyKeyword_0() { return cSymmetricObjectPropertyKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//objectPropertyExpression=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionAssignment_3() { return cObjectPropertyExpressionAssignment_3; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0() { return cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AsymmetricObjectPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.AsymmetricObjectProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsymmetricObjectPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cObjectPropertyExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0 = (RuleCall)cObjectPropertyExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AsymmetricObjectProperty:
		//	'AsymmetricObjectProperty' '('
		//	axiomAnnotations+=Annotation*
		//	objectPropertyExpression=ObjectPropertyExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'AsymmetricObjectProperty' '(' axiomAnnotations+=Annotation* objectPropertyExpression=ObjectPropertyExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'AsymmetricObjectProperty'
		public Keyword getAsymmetricObjectPropertyKeyword_0() { return cAsymmetricObjectPropertyKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//objectPropertyExpression=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionAssignment_3() { return cObjectPropertyExpressionAssignment_3; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0() { return cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class TransitiveObjectPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.TransitiveObjectProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitiveObjectPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cObjectPropertyExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0 = (RuleCall)cObjectPropertyExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TransitiveObjectProperty:
		//	'TransitiveObjectProperty' '('
		//	axiomAnnotations+=Annotation*
		//	objectPropertyExpression=ObjectPropertyExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'TransitiveObjectProperty' '(' axiomAnnotations+=Annotation* objectPropertyExpression=ObjectPropertyExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'TransitiveObjectProperty'
		public Keyword getTransitiveObjectPropertyKeyword_0() { return cTransitiveObjectPropertyKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//objectPropertyExpression=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionAssignment_3() { return cObjectPropertyExpressionAssignment_3; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0() { return cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DataPropertyAxiomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DataPropertyAxiom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubDataPropertyOfParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEquivalentDataPropertiesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDisjointDataPropertiesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDataPropertyDomainParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDataPropertyRangeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFunctionalDataPropertyParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// Data Property Axioms
		//DataPropertyAxiom:
		//	SubDataPropertyOf | EquivalentDataProperties | DisjointDataProperties | DataPropertyDomain | DataPropertyRange |
		//	FunctionalDataProperty;
		@Override public ParserRule getRule() { return rule; }
		
		//SubDataPropertyOf | EquivalentDataProperties | DisjointDataProperties | DataPropertyDomain | DataPropertyRange |
		//FunctionalDataProperty
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SubDataPropertyOf
		public RuleCall getSubDataPropertyOfParserRuleCall_0() { return cSubDataPropertyOfParserRuleCall_0; }
		
		//EquivalentDataProperties
		public RuleCall getEquivalentDataPropertiesParserRuleCall_1() { return cEquivalentDataPropertiesParserRuleCall_1; }
		
		//DisjointDataProperties
		public RuleCall getDisjointDataPropertiesParserRuleCall_2() { return cDisjointDataPropertiesParserRuleCall_2; }
		
		//DataPropertyDomain
		public RuleCall getDataPropertyDomainParserRuleCall_3() { return cDataPropertyDomainParserRuleCall_3; }
		
		//DataPropertyRange
		public RuleCall getDataPropertyRangeParserRuleCall_4() { return cDataPropertyRangeParserRuleCall_4; }
		
		//FunctionalDataProperty
		public RuleCall getFunctionalDataPropertyParserRuleCall_5() { return cFunctionalDataPropertyParserRuleCall_5; }
	}
	public class SubDataPropertyOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.SubDataPropertyOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubDataPropertyOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cSubDataPropertyExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubDataPropertyExpressionDataPropertyExpressionParserRuleCall_3_0 = (RuleCall)cSubDataPropertyExpressionAssignment_3.eContents().get(0);
		private final Assignment cSuperDataPropertyExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSuperDataPropertyExpressionDataPropertyExpressionParserRuleCall_4_0 = (RuleCall)cSuperDataPropertyExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SubDataPropertyOf:
		//	'SubDataPropertyOf' '('
		//	axiomAnnotations+=Annotation*
		//	subDataPropertyExpression=DataPropertyExpression
		//	superDataPropertyExpression=DataPropertyExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'SubDataPropertyOf' '(' axiomAnnotations+=Annotation* subDataPropertyExpression=DataPropertyExpression
		//superDataPropertyExpression=DataPropertyExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'SubDataPropertyOf'
		public Keyword getSubDataPropertyOfKeyword_0() { return cSubDataPropertyOfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//subDataPropertyExpression=DataPropertyExpression
		public Assignment getSubDataPropertyExpressionAssignment_3() { return cSubDataPropertyExpressionAssignment_3; }
		
		//DataPropertyExpression
		public RuleCall getSubDataPropertyExpressionDataPropertyExpressionParserRuleCall_3_0() { return cSubDataPropertyExpressionDataPropertyExpressionParserRuleCall_3_0; }
		
		//superDataPropertyExpression=DataPropertyExpression
		public Assignment getSuperDataPropertyExpressionAssignment_4() { return cSuperDataPropertyExpressionAssignment_4; }
		
		//DataPropertyExpression
		public RuleCall getSuperDataPropertyExpressionDataPropertyExpressionParserRuleCall_4_0() { return cSuperDataPropertyExpressionDataPropertyExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class EquivalentDataPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.EquivalentDataProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEquivalentDataPropertiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cDataPropertyExpressionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDataPropertyExpressionsDataPropertyExpressionParserRuleCall_3_0 = (RuleCall)cDataPropertyExpressionsAssignment_3.eContents().get(0);
		private final Assignment cDataPropertyExpressionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDataPropertyExpressionsDataPropertyExpressionParserRuleCall_4_0 = (RuleCall)cDataPropertyExpressionsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EquivalentDataProperties:
		//	'EquivalentDataProperties' '('
		//	axiomAnnotations+=Annotation*
		//	dataPropertyExpressions+=DataPropertyExpression
		//	dataPropertyExpressions+=DataPropertyExpression+
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'EquivalentDataProperties' '(' axiomAnnotations+=Annotation* dataPropertyExpressions+=DataPropertyExpression
		//dataPropertyExpressions+=DataPropertyExpression+ ')'
		public Group getGroup() { return cGroup; }
		
		//'EquivalentDataProperties'
		public Keyword getEquivalentDataPropertiesKeyword_0() { return cEquivalentDataPropertiesKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//dataPropertyExpressions+=DataPropertyExpression
		public Assignment getDataPropertyExpressionsAssignment_3() { return cDataPropertyExpressionsAssignment_3; }
		
		//DataPropertyExpression
		public RuleCall getDataPropertyExpressionsDataPropertyExpressionParserRuleCall_3_0() { return cDataPropertyExpressionsDataPropertyExpressionParserRuleCall_3_0; }
		
		//dataPropertyExpressions+=DataPropertyExpression+
		public Assignment getDataPropertyExpressionsAssignment_4() { return cDataPropertyExpressionsAssignment_4; }
		
		//DataPropertyExpression
		public RuleCall getDataPropertyExpressionsDataPropertyExpressionParserRuleCall_4_0() { return cDataPropertyExpressionsDataPropertyExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class DisjointDataPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DisjointDataProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDisjointDataPropertiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cDataPropertyExpressionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDataPropertyExpressionsDataPropertyExpressionParserRuleCall_3_0 = (RuleCall)cDataPropertyExpressionsAssignment_3.eContents().get(0);
		private final Assignment cDataPropertyExpressionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDataPropertyExpressionsDataPropertyExpressionParserRuleCall_4_0 = (RuleCall)cDataPropertyExpressionsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DisjointDataProperties:
		//	'DisjointDataProperties' '('
		//	axiomAnnotations+=Annotation*
		//	dataPropertyExpressions+=DataPropertyExpression
		//	dataPropertyExpressions+=DataPropertyExpression+
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DisjointDataProperties' '(' axiomAnnotations+=Annotation* dataPropertyExpressions+=DataPropertyExpression
		//dataPropertyExpressions+=DataPropertyExpression+ ')'
		public Group getGroup() { return cGroup; }
		
		//'DisjointDataProperties'
		public Keyword getDisjointDataPropertiesKeyword_0() { return cDisjointDataPropertiesKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//dataPropertyExpressions+=DataPropertyExpression
		public Assignment getDataPropertyExpressionsAssignment_3() { return cDataPropertyExpressionsAssignment_3; }
		
		//DataPropertyExpression
		public RuleCall getDataPropertyExpressionsDataPropertyExpressionParserRuleCall_3_0() { return cDataPropertyExpressionsDataPropertyExpressionParserRuleCall_3_0; }
		
		//dataPropertyExpressions+=DataPropertyExpression+
		public Assignment getDataPropertyExpressionsAssignment_4() { return cDataPropertyExpressionsAssignment_4; }
		
		//DataPropertyExpression
		public RuleCall getDataPropertyExpressionsDataPropertyExpressionParserRuleCall_4_0() { return cDataPropertyExpressionsDataPropertyExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class DataPropertyDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DataPropertyDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataPropertyDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cDataPropertyExpressionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDataPropertyExpressionsDataPropertyExpressionParserRuleCall_3_0 = (RuleCall)cDataPropertyExpressionsAssignment_3.eContents().get(0);
		private final Assignment cClassExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassExpressionClassExpressionParserRuleCall_4_0 = (RuleCall)cClassExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DataPropertyDomain:
		//	'DataPropertyDomain' '('
		//	axiomAnnotations+=Annotation*
		//	dataPropertyExpressions+=DataPropertyExpression
		//	classExpression=ClassExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DataPropertyDomain' '(' axiomAnnotations+=Annotation* dataPropertyExpressions+=DataPropertyExpression
		//classExpression=ClassExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'DataPropertyDomain'
		public Keyword getDataPropertyDomainKeyword_0() { return cDataPropertyDomainKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//dataPropertyExpressions+=DataPropertyExpression
		public Assignment getDataPropertyExpressionsAssignment_3() { return cDataPropertyExpressionsAssignment_3; }
		
		//DataPropertyExpression
		public RuleCall getDataPropertyExpressionsDataPropertyExpressionParserRuleCall_3_0() { return cDataPropertyExpressionsDataPropertyExpressionParserRuleCall_3_0; }
		
		//classExpression=ClassExpression
		public Assignment getClassExpressionAssignment_4() { return cClassExpressionAssignment_4; }
		
		//ClassExpression
		public RuleCall getClassExpressionClassExpressionParserRuleCall_4_0() { return cClassExpressionClassExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class DataPropertyRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DataPropertyRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataPropertyRangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cDataPropertyExpressionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDataPropertyExpressionsDataPropertyExpressionParserRuleCall_3_0 = (RuleCall)cDataPropertyExpressionsAssignment_3.eContents().get(0);
		private final Assignment cClassExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassExpressionClassExpressionParserRuleCall_4_0 = (RuleCall)cClassExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DataPropertyRange:
		//	'DataPropertyRange' '('
		//	axiomAnnotations+=Annotation*
		//	dataPropertyExpressions+=DataPropertyExpression
		//	classExpression=ClassExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DataPropertyRange' '(' axiomAnnotations+=Annotation* dataPropertyExpressions+=DataPropertyExpression
		//classExpression=ClassExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'DataPropertyRange'
		public Keyword getDataPropertyRangeKeyword_0() { return cDataPropertyRangeKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//dataPropertyExpressions+=DataPropertyExpression
		public Assignment getDataPropertyExpressionsAssignment_3() { return cDataPropertyExpressionsAssignment_3; }
		
		//DataPropertyExpression
		public RuleCall getDataPropertyExpressionsDataPropertyExpressionParserRuleCall_3_0() { return cDataPropertyExpressionsDataPropertyExpressionParserRuleCall_3_0; }
		
		//classExpression=ClassExpression
		public Assignment getClassExpressionAssignment_4() { return cClassExpressionAssignment_4; }
		
		//ClassExpression
		public RuleCall getClassExpressionClassExpressionParserRuleCall_4_0() { return cClassExpressionClassExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class FunctionalDataPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.FunctionalDataProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionalDataPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cDataPropertyExpressionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDataPropertyExpressionsDataPropertyExpressionParserRuleCall_3_0 = (RuleCall)cDataPropertyExpressionsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FunctionalDataProperty:
		//	'FunctionalDataProperty' '('
		//	axiomAnnotations+=Annotation*
		//	dataPropertyExpressions+=DataPropertyExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'FunctionalDataProperty' '(' axiomAnnotations+=Annotation* dataPropertyExpressions+=DataPropertyExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'FunctionalDataProperty'
		public Keyword getFunctionalDataPropertyKeyword_0() { return cFunctionalDataPropertyKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//dataPropertyExpressions+=DataPropertyExpression
		public Assignment getDataPropertyExpressionsAssignment_3() { return cDataPropertyExpressionsAssignment_3; }
		
		//DataPropertyExpression
		public RuleCall getDataPropertyExpressionsDataPropertyExpressionParserRuleCall_3_0() { return cDataPropertyExpressionsDataPropertyExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DatatypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DatatypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeDefinitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cDatatypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDatatypeDatatypeReferenceParserRuleCall_3_0 = (RuleCall)cDatatypeAssignment_3.eContents().get(0);
		private final Assignment cDataRangeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDataRangeDataRangeParserRuleCall_4_0 = (RuleCall)cDataRangeAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Datatype Definitions
		//DatatypeDefinition:
		//	'DatatypeDefinition' '('
		//	axiomAnnotations+=Annotation*
		//	datatype=DatatypeReference
		//	dataRange=DataRange
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DatatypeDefinition' '(' axiomAnnotations+=Annotation* datatype=DatatypeReference dataRange=DataRange ')'
		public Group getGroup() { return cGroup; }
		
		//'DatatypeDefinition'
		public Keyword getDatatypeDefinitionKeyword_0() { return cDatatypeDefinitionKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//datatype=DatatypeReference
		public Assignment getDatatypeAssignment_3() { return cDatatypeAssignment_3; }
		
		//DatatypeReference
		public RuleCall getDatatypeDatatypeReferenceParserRuleCall_3_0() { return cDatatypeDatatypeReferenceParserRuleCall_3_0; }
		
		//dataRange=DataRange
		public Assignment getDataRangeAssignment_4() { return cDataRangeAssignment_4; }
		
		//DataRange
		public RuleCall getDataRangeDataRangeParserRuleCall_4_0() { return cDataRangeDataRangeParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class HasKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.HasKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHasKeyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cClassExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassExpressionClassExpressionParserRuleCall_3_0 = (RuleCall)cClassExpressionAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cObjectPropertyExpressionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cObjectPropertyExpressionsObjectPropertyExpressionParserRuleCall_5_0 = (RuleCall)cObjectPropertyExpressionsAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDataPropertyExpressionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDataPropertyExpressionsDataPropertyExpressionParserRuleCall_8_0 = (RuleCall)cDataPropertyExpressionsAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//// Keys
		//HasKey:
		//	'HasKey' '('
		//	axiomAnnotations+=Annotation*
		//	classExpression=ClassExpression
		//	'(' objectPropertyExpressions+=ObjectPropertyExpression* ')'
		//	'(' dataPropertyExpressions+=DataPropertyExpression* ')'
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'HasKey' '(' axiomAnnotations+=Annotation* classExpression=ClassExpression '('
		//objectPropertyExpressions+=ObjectPropertyExpression* ')' '(' dataPropertyExpressions+=DataPropertyExpression* ')' ')'
		public Group getGroup() { return cGroup; }
		
		//'HasKey'
		public Keyword getHasKeyKeyword_0() { return cHasKeyKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//classExpression=ClassExpression
		public Assignment getClassExpressionAssignment_3() { return cClassExpressionAssignment_3; }
		
		//ClassExpression
		public RuleCall getClassExpressionClassExpressionParserRuleCall_3_0() { return cClassExpressionClassExpressionParserRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//objectPropertyExpressions+=ObjectPropertyExpression*
		public Assignment getObjectPropertyExpressionsAssignment_5() { return cObjectPropertyExpressionsAssignment_5; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionsObjectPropertyExpressionParserRuleCall_5_0() { return cObjectPropertyExpressionsObjectPropertyExpressionParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }
		
		//dataPropertyExpressions+=DataPropertyExpression*
		public Assignment getDataPropertyExpressionsAssignment_8() { return cDataPropertyExpressionsAssignment_8; }
		
		//DataPropertyExpression
		public RuleCall getDataPropertyExpressionsDataPropertyExpressionParserRuleCall_8_0() { return cDataPropertyExpressionsDataPropertyExpressionParserRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
	}
	public class AssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.Assertion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSameIndividualParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDifferentIndividualsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClassAssertionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cObjectPropertyAssertionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNegativeObjectPropertyAssertionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDataPropertyAssertionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cNegativeDataPropertyAssertionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//// Assertions
		//Assertion:
		//	SameIndividual | DifferentIndividuals | ClassAssertion | ObjectPropertyAssertion | NegativeObjectPropertyAssertion |
		//	DataPropertyAssertion | NegativeDataPropertyAssertion;
		@Override public ParserRule getRule() { return rule; }
		
		//SameIndividual | DifferentIndividuals | ClassAssertion | ObjectPropertyAssertion | NegativeObjectPropertyAssertion |
		//DataPropertyAssertion | NegativeDataPropertyAssertion
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SameIndividual
		public RuleCall getSameIndividualParserRuleCall_0() { return cSameIndividualParserRuleCall_0; }
		
		//DifferentIndividuals
		public RuleCall getDifferentIndividualsParserRuleCall_1() { return cDifferentIndividualsParserRuleCall_1; }
		
		//ClassAssertion
		public RuleCall getClassAssertionParserRuleCall_2() { return cClassAssertionParserRuleCall_2; }
		
		//ObjectPropertyAssertion
		public RuleCall getObjectPropertyAssertionParserRuleCall_3() { return cObjectPropertyAssertionParserRuleCall_3; }
		
		//NegativeObjectPropertyAssertion
		public RuleCall getNegativeObjectPropertyAssertionParserRuleCall_4() { return cNegativeObjectPropertyAssertionParserRuleCall_4; }
		
		//DataPropertyAssertion
		public RuleCall getDataPropertyAssertionParserRuleCall_5() { return cDataPropertyAssertionParserRuleCall_5; }
		
		//NegativeDataPropertyAssertion
		public RuleCall getNegativeDataPropertyAssertionParserRuleCall_6() { return cNegativeDataPropertyAssertionParserRuleCall_6; }
	}
	public class SameIndividualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.SameIndividual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSameIndividualKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cIndividualsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndividualsIndividualReferenceParserRuleCall_3_0 = (RuleCall)cIndividualsAssignment_3.eContents().get(0);
		private final Assignment cIndividualsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIndividualsIndividualReferenceParserRuleCall_4_0 = (RuleCall)cIndividualsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SameIndividual:
		//	'SameIndividual' '('
		//	axiomAnnotations+=Annotation*
		//	individuals+=IndividualReference
		//	individuals+=IndividualReference+
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'SameIndividual' '(' axiomAnnotations+=Annotation* individuals+=IndividualReference individuals+=IndividualReference+
		//')'
		public Group getGroup() { return cGroup; }
		
		//'SameIndividual'
		public Keyword getSameIndividualKeyword_0() { return cSameIndividualKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//individuals+=IndividualReference
		public Assignment getIndividualsAssignment_3() { return cIndividualsAssignment_3; }
		
		//IndividualReference
		public RuleCall getIndividualsIndividualReferenceParserRuleCall_3_0() { return cIndividualsIndividualReferenceParserRuleCall_3_0; }
		
		//individuals+=IndividualReference+
		public Assignment getIndividualsAssignment_4() { return cIndividualsAssignment_4; }
		
		//IndividualReference
		public RuleCall getIndividualsIndividualReferenceParserRuleCall_4_0() { return cIndividualsIndividualReferenceParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class DifferentIndividualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DifferentIndividuals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDifferentIndividualsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cIndividualsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndividualsIndividualReferenceParserRuleCall_3_0 = (RuleCall)cIndividualsAssignment_3.eContents().get(0);
		private final Assignment cIndividualsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIndividualsIndividualReferenceParserRuleCall_4_0 = (RuleCall)cIndividualsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DifferentIndividuals:
		//	'DifferentIndividuals' '('
		//	axiomAnnotations+=Annotation*
		//	individuals+=IndividualReference
		//	individuals+=IndividualReference+
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DifferentIndividuals' '(' axiomAnnotations+=Annotation* individuals+=IndividualReference
		//individuals+=IndividualReference+ ')'
		public Group getGroup() { return cGroup; }
		
		//'DifferentIndividuals'
		public Keyword getDifferentIndividualsKeyword_0() { return cDifferentIndividualsKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//individuals+=IndividualReference
		public Assignment getIndividualsAssignment_3() { return cIndividualsAssignment_3; }
		
		//IndividualReference
		public RuleCall getIndividualsIndividualReferenceParserRuleCall_3_0() { return cIndividualsIndividualReferenceParserRuleCall_3_0; }
		
		//individuals+=IndividualReference+
		public Assignment getIndividualsAssignment_4() { return cIndividualsAssignment_4; }
		
		//IndividualReference
		public RuleCall getIndividualsIndividualReferenceParserRuleCall_4_0() { return cIndividualsIndividualReferenceParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ClassAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ClassAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassAssertionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cClassExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassExpressionClassExpressionParserRuleCall_3_0 = (RuleCall)cClassExpressionAssignment_3.eContents().get(0);
		private final Assignment cIndividualAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIndividualIndividualReferenceParserRuleCall_4_0 = (RuleCall)cIndividualAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ClassAssertion:
		//	'ClassAssertion' '('
		//	axiomAnnotations+=Annotation*
		//	classExpression=ClassExpression
		//	individual=IndividualReference
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ClassAssertion' '(' axiomAnnotations+=Annotation* classExpression=ClassExpression individual=IndividualReference ')'
		public Group getGroup() { return cGroup; }
		
		//'ClassAssertion'
		public Keyword getClassAssertionKeyword_0() { return cClassAssertionKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//classExpression=ClassExpression
		public Assignment getClassExpressionAssignment_3() { return cClassExpressionAssignment_3; }
		
		//ClassExpression
		public RuleCall getClassExpressionClassExpressionParserRuleCall_3_0() { return cClassExpressionClassExpressionParserRuleCall_3_0; }
		
		//individual=IndividualReference
		public Assignment getIndividualAssignment_4() { return cIndividualAssignment_4; }
		
		//IndividualReference
		public RuleCall getIndividualIndividualReferenceParserRuleCall_4_0() { return cIndividualIndividualReferenceParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ObjectPropertyAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ObjectPropertyAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectPropertyAssertionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cObjectPropertyExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0 = (RuleCall)cObjectPropertyExpressionAssignment_3.eContents().get(0);
		private final Assignment cSourceIndividualAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSourceIndividualIndividualReferenceParserRuleCall_4_0 = (RuleCall)cSourceIndividualAssignment_4.eContents().get(0);
		private final Assignment cTargetIndividualAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTargetIndividualIndividualReferenceParserRuleCall_5_0 = (RuleCall)cTargetIndividualAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ObjectPropertyAssertion:
		//	'ObjectPropertyAssertion' '('
		//	axiomAnnotations+=Annotation*
		//	objectPropertyExpression=ObjectPropertyExpression
		//	sourceIndividual=IndividualReference
		//	targetIndividual=IndividualReference
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ObjectPropertyAssertion' '(' axiomAnnotations+=Annotation* objectPropertyExpression=ObjectPropertyExpression
		//sourceIndividual=IndividualReference targetIndividual=IndividualReference ')'
		public Group getGroup() { return cGroup; }
		
		//'ObjectPropertyAssertion'
		public Keyword getObjectPropertyAssertionKeyword_0() { return cObjectPropertyAssertionKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//objectPropertyExpression=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionAssignment_3() { return cObjectPropertyExpressionAssignment_3; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0() { return cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0; }
		
		//sourceIndividual=IndividualReference
		public Assignment getSourceIndividualAssignment_4() { return cSourceIndividualAssignment_4; }
		
		//IndividualReference
		public RuleCall getSourceIndividualIndividualReferenceParserRuleCall_4_0() { return cSourceIndividualIndividualReferenceParserRuleCall_4_0; }
		
		//targetIndividual=IndividualReference
		public Assignment getTargetIndividualAssignment_5() { return cTargetIndividualAssignment_5; }
		
		//IndividualReference
		public RuleCall getTargetIndividualIndividualReferenceParserRuleCall_5_0() { return cTargetIndividualIndividualReferenceParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class NegativeObjectPropertyAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.NegativeObjectPropertyAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNegativeObjectPropertyAssertionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cObjectPropertyExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0 = (RuleCall)cObjectPropertyExpressionAssignment_3.eContents().get(0);
		private final Assignment cSourceIndividualAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSourceIndividualIndividualReferenceParserRuleCall_4_0 = (RuleCall)cSourceIndividualAssignment_4.eContents().get(0);
		private final Assignment cTargetIndividualAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTargetIndividualIndividualReferenceParserRuleCall_5_0 = (RuleCall)cTargetIndividualAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NegativeObjectPropertyAssertion:
		//	'NegativeObjectPropertyAssertion' '('
		//	axiomAnnotations+=Annotation*
		//	objectPropertyExpression=ObjectPropertyExpression
		//	sourceIndividual=IndividualReference
		//	targetIndividual=IndividualReference
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'NegativeObjectPropertyAssertion' '(' axiomAnnotations+=Annotation* objectPropertyExpression=ObjectPropertyExpression
		//sourceIndividual=IndividualReference targetIndividual=IndividualReference ')'
		public Group getGroup() { return cGroup; }
		
		//'NegativeObjectPropertyAssertion'
		public Keyword getNegativeObjectPropertyAssertionKeyword_0() { return cNegativeObjectPropertyAssertionKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//objectPropertyExpression=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionAssignment_3() { return cObjectPropertyExpressionAssignment_3; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0() { return cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0; }
		
		//sourceIndividual=IndividualReference
		public Assignment getSourceIndividualAssignment_4() { return cSourceIndividualAssignment_4; }
		
		//IndividualReference
		public RuleCall getSourceIndividualIndividualReferenceParserRuleCall_4_0() { return cSourceIndividualIndividualReferenceParserRuleCall_4_0; }
		
		//targetIndividual=IndividualReference
		public Assignment getTargetIndividualAssignment_5() { return cTargetIndividualAssignment_5; }
		
		//IndividualReference
		public RuleCall getTargetIndividualIndividualReferenceParserRuleCall_5_0() { return cTargetIndividualIndividualReferenceParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class DataPropertyAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.DataPropertyAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataPropertyAssertionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cObjectPropertyExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0 = (RuleCall)cObjectPropertyExpressionAssignment_3.eContents().get(0);
		private final Assignment cSourceIndividualAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSourceIndividualIndividualReferenceParserRuleCall_4_0 = (RuleCall)cSourceIndividualAssignment_4.eContents().get(0);
		private final Assignment cTargetValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTargetValueLiteralParserRuleCall_5_0 = (RuleCall)cTargetValueAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DataPropertyAssertion:
		//	'DataPropertyAssertion' '('
		//	axiomAnnotations+=Annotation*
		//	objectPropertyExpression=ObjectPropertyExpression
		//	sourceIndividual=IndividualReference
		//	targetValue=Literal
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DataPropertyAssertion' '(' axiomAnnotations+=Annotation* objectPropertyExpression=ObjectPropertyExpression
		//sourceIndividual=IndividualReference targetValue=Literal ')'
		public Group getGroup() { return cGroup; }
		
		//'DataPropertyAssertion'
		public Keyword getDataPropertyAssertionKeyword_0() { return cDataPropertyAssertionKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//objectPropertyExpression=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionAssignment_3() { return cObjectPropertyExpressionAssignment_3; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0() { return cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0; }
		
		//sourceIndividual=IndividualReference
		public Assignment getSourceIndividualAssignment_4() { return cSourceIndividualAssignment_4; }
		
		//IndividualReference
		public RuleCall getSourceIndividualIndividualReferenceParserRuleCall_4_0() { return cSourceIndividualIndividualReferenceParserRuleCall_4_0; }
		
		//targetValue=Literal
		public Assignment getTargetValueAssignment_5() { return cTargetValueAssignment_5; }
		
		//Literal
		public RuleCall getTargetValueLiteralParserRuleCall_5_0() { return cTargetValueLiteralParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class NegativeDataPropertyAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.NegativeDataPropertyAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNegativeDataPropertyAssertionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxiomAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxiomAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAxiomAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cObjectPropertyExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0 = (RuleCall)cObjectPropertyExpressionAssignment_3.eContents().get(0);
		private final Assignment cSourceIndividualAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSourceIndividualIndividualReferenceParserRuleCall_4_0 = (RuleCall)cSourceIndividualAssignment_4.eContents().get(0);
		private final Assignment cTargetValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTargetValueLiteralParserRuleCall_5_0 = (RuleCall)cTargetValueAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NegativeDataPropertyAssertion:
		//	'NegativeDataPropertyAssertion' '('
		//	axiomAnnotations+=Annotation*
		//	objectPropertyExpression=ObjectPropertyExpression
		//	sourceIndividual=IndividualReference
		//	targetValue=Literal
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'NegativeDataPropertyAssertion' '(' axiomAnnotations+=Annotation* objectPropertyExpression=ObjectPropertyExpression
		//sourceIndividual=IndividualReference targetValue=Literal ')'
		public Group getGroup() { return cGroup; }
		
		//'NegativeDataPropertyAssertion'
		public Keyword getNegativeDataPropertyAssertionKeyword_0() { return cNegativeDataPropertyAssertionKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//axiomAnnotations+=Annotation*
		public Assignment getAxiomAnnotationsAssignment_2() { return cAxiomAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAxiomAnnotationsAnnotationParserRuleCall_2_0() { return cAxiomAnnotationsAnnotationParserRuleCall_2_0; }
		
		//objectPropertyExpression=ObjectPropertyExpression
		public Assignment getObjectPropertyExpressionAssignment_3() { return cObjectPropertyExpressionAssignment_3; }
		
		//ObjectPropertyExpression
		public RuleCall getObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0() { return cObjectPropertyExpressionObjectPropertyExpressionParserRuleCall_3_0; }
		
		//sourceIndividual=IndividualReference
		public Assignment getSourceIndividualAssignment_4() { return cSourceIndividualAssignment_4; }
		
		//IndividualReference
		public RuleCall getSourceIndividualIndividualReferenceParserRuleCall_4_0() { return cSourceIndividualIndividualReferenceParserRuleCall_4_0; }
		
		//targetValue=Literal
		public Assignment getTargetValueAssignment_5() { return cTargetValueAssignment_5; }
		
		//Literal
		public RuleCall getTargetValueLiteralParserRuleCall_5_0() { return cTargetValueLiteralParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnotationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnnotationAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAnnotationAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cAnnotationPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationPropertyAnnotationPropertyParserRuleCall_3_0 = (RuleCall)cAnnotationPropertyAssignment_3.eContents().get(0);
		private final Assignment cAnnotationvalueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnnotationvalueAnnotationValueParserRuleCall_4_0 = (RuleCall)cAnnotationvalueAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Annotations
		//Annotation:
		//	'Annotation' '('
		//	annotationAnnotations+=Annotation*
		//	annotationProperty=AnnotationProperty
		//	annotationvalue=AnnotationValue
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Annotation' '(' annotationAnnotations+=Annotation* annotationProperty=AnnotationProperty
		//annotationvalue=AnnotationValue ')'
		public Group getGroup() { return cGroup; }
		
		//'Annotation'
		public Keyword getAnnotationKeyword_0() { return cAnnotationKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//annotationAnnotations+=Annotation*
		public Assignment getAnnotationAnnotationsAssignment_2() { return cAnnotationAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAnnotationAnnotationsAnnotationParserRuleCall_2_0() { return cAnnotationAnnotationsAnnotationParserRuleCall_2_0; }
		
		//annotationProperty=AnnotationProperty
		public Assignment getAnnotationPropertyAssignment_3() { return cAnnotationPropertyAssignment_3; }
		
		//AnnotationProperty
		public RuleCall getAnnotationPropertyAnnotationPropertyParserRuleCall_3_0() { return cAnnotationPropertyAnnotationPropertyParserRuleCall_3_0; }
		
		//annotationvalue=AnnotationValue
		public Assignment getAnnotationvalueAssignment_4() { return cAnnotationvalueAssignment_4; }
		
		//AnnotationValue
		public RuleCall getAnnotationvalueAnnotationValueParserRuleCall_4_0() { return cAnnotationvalueAnnotationValueParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class AnnotationValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.AnnotationValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnonymousIndividualReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAnnotationValueAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cIRIParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AnnotationValue:
		//	AnonymousIndividualReference | {AnnotationValue} IRI | Literal;
		@Override public ParserRule getRule() { return rule; }
		
		//AnonymousIndividualReference | {AnnotationValue} IRI | Literal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AnonymousIndividualReference
		public RuleCall getAnonymousIndividualReferenceParserRuleCall_0() { return cAnonymousIndividualReferenceParserRuleCall_0; }
		
		//{AnnotationValue} IRI
		public Group getGroup_1() { return cGroup_1; }
		
		//{AnnotationValue}
		public Action getAnnotationValueAction_1_0() { return cAnnotationValueAction_1_0; }
		
		//IRI
		public RuleCall getIRIParserRuleCall_1_1() { return cIRIParserRuleCall_1_1; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_2() { return cLiteralParserRuleCall_2; }
	}
	public class AnnotationAxiomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.AnnotationAxiom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnnotationAssertionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubAnnotationPropertyOfParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAnnotationPropertyDomainParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAnnotationPropertyRangeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// Annotation Axioms
		//AnnotationAxiom:
		//	AnnotationAssertion | SubAnnotationPropertyOf | AnnotationPropertyDomain | AnnotationPropertyRange;
		@Override public ParserRule getRule() { return rule; }
		
		//AnnotationAssertion | SubAnnotationPropertyOf | AnnotationPropertyDomain | AnnotationPropertyRange
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AnnotationAssertion
		public RuleCall getAnnotationAssertionParserRuleCall_0() { return cAnnotationAssertionParserRuleCall_0; }
		
		//SubAnnotationPropertyOf
		public RuleCall getSubAnnotationPropertyOfParserRuleCall_1() { return cSubAnnotationPropertyOfParserRuleCall_1; }
		
		//AnnotationPropertyDomain
		public RuleCall getAnnotationPropertyDomainParserRuleCall_2() { return cAnnotationPropertyDomainParserRuleCall_2; }
		
		//AnnotationPropertyRange
		public RuleCall getAnnotationPropertyRangeParserRuleCall_3() { return cAnnotationPropertyRangeParserRuleCall_3; }
	}
	public class AnnotationAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.AnnotationAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnotationAssertionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnnotationAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAnnotationAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cAnnotationPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationPropertyAnnotationPropertyParserRuleCall_3_0 = (RuleCall)cAnnotationPropertyAssignment_3.eContents().get(0);
		private final Assignment cAnnotationSubjectAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnnotationSubjectAnnotationSubjectParserRuleCall_4_0 = (RuleCall)cAnnotationSubjectAssignment_4.eContents().get(0);
		private final Assignment cAnnotationValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAnnotationValueAnnotationValueParserRuleCall_5_0 = (RuleCall)cAnnotationValueAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AnnotationAssertion:
		//	'AnnotationAssertion' '('
		//	annotationAnnotations+=Annotation*
		//	annotationProperty=AnnotationProperty
		//	annotationSubject=AnnotationSubject
		//	annotationValue=AnnotationValue
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'AnnotationAssertion' '(' annotationAnnotations+=Annotation* annotationProperty=AnnotationProperty
		//annotationSubject=AnnotationSubject annotationValue=AnnotationValue ')'
		public Group getGroup() { return cGroup; }
		
		//'AnnotationAssertion'
		public Keyword getAnnotationAssertionKeyword_0() { return cAnnotationAssertionKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//annotationAnnotations+=Annotation*
		public Assignment getAnnotationAnnotationsAssignment_2() { return cAnnotationAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAnnotationAnnotationsAnnotationParserRuleCall_2_0() { return cAnnotationAnnotationsAnnotationParserRuleCall_2_0; }
		
		//annotationProperty=AnnotationProperty
		public Assignment getAnnotationPropertyAssignment_3() { return cAnnotationPropertyAssignment_3; }
		
		//AnnotationProperty
		public RuleCall getAnnotationPropertyAnnotationPropertyParserRuleCall_3_0() { return cAnnotationPropertyAnnotationPropertyParserRuleCall_3_0; }
		
		//annotationSubject=AnnotationSubject
		public Assignment getAnnotationSubjectAssignment_4() { return cAnnotationSubjectAssignment_4; }
		
		//AnnotationSubject
		public RuleCall getAnnotationSubjectAnnotationSubjectParserRuleCall_4_0() { return cAnnotationSubjectAnnotationSubjectParserRuleCall_4_0; }
		
		//annotationValue=AnnotationValue
		public Assignment getAnnotationValueAssignment_5() { return cAnnotationValueAssignment_5; }
		
		//AnnotationValue
		public RuleCall getAnnotationValueAnnotationValueParserRuleCall_5_0() { return cAnnotationValueAnnotationValueParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class AnnotationSubjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.AnnotationSubject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAnnotationSubjectAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cIRIParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cAnonymousIndividualReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AnnotationSubject:
		//	{AnnotationSubject} IRI | AnonymousIndividualReference;
		@Override public ParserRule getRule() { return rule; }
		
		//{AnnotationSubject} IRI | AnonymousIndividualReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{AnnotationSubject} IRI
		public Group getGroup_0() { return cGroup_0; }
		
		//{AnnotationSubject}
		public Action getAnnotationSubjectAction_0_0() { return cAnnotationSubjectAction_0_0; }
		
		//IRI
		public RuleCall getIRIParserRuleCall_0_1() { return cIRIParserRuleCall_0_1; }
		
		//AnonymousIndividualReference
		public RuleCall getAnonymousIndividualReferenceParserRuleCall_1() { return cAnonymousIndividualReferenceParserRuleCall_1; }
	}
	public class SubAnnotationPropertyOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.SubAnnotationPropertyOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubAnnotationPropertyOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnnotationAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAnnotationAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cSubAnnotationPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubAnnotationPropertyAnnotationPropertyParserRuleCall_3_0 = (RuleCall)cSubAnnotationPropertyAssignment_3.eContents().get(0);
		private final Assignment cSuperAnnotationPropertyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSuperAnnotationPropertyAnnotationPropertyParserRuleCall_4_0 = (RuleCall)cSuperAnnotationPropertyAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SubAnnotationPropertyOf:
		//	'SubAnnotationPropertyOf' '('
		//	annotationAnnotations+=Annotation*
		//	subAnnotationProperty=AnnotationProperty
		//	superAnnotationProperty=AnnotationProperty
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'SubAnnotationPropertyOf' '(' annotationAnnotations+=Annotation* subAnnotationProperty=AnnotationProperty
		//superAnnotationProperty=AnnotationProperty ')'
		public Group getGroup() { return cGroup; }
		
		//'SubAnnotationPropertyOf'
		public Keyword getSubAnnotationPropertyOfKeyword_0() { return cSubAnnotationPropertyOfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//annotationAnnotations+=Annotation*
		public Assignment getAnnotationAnnotationsAssignment_2() { return cAnnotationAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAnnotationAnnotationsAnnotationParserRuleCall_2_0() { return cAnnotationAnnotationsAnnotationParserRuleCall_2_0; }
		
		//subAnnotationProperty=AnnotationProperty
		public Assignment getSubAnnotationPropertyAssignment_3() { return cSubAnnotationPropertyAssignment_3; }
		
		//AnnotationProperty
		public RuleCall getSubAnnotationPropertyAnnotationPropertyParserRuleCall_3_0() { return cSubAnnotationPropertyAnnotationPropertyParserRuleCall_3_0; }
		
		//superAnnotationProperty=AnnotationProperty
		public Assignment getSuperAnnotationPropertyAssignment_4() { return cSuperAnnotationPropertyAssignment_4; }
		
		//AnnotationProperty
		public RuleCall getSuperAnnotationPropertyAnnotationPropertyParserRuleCall_4_0() { return cSuperAnnotationPropertyAnnotationPropertyParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class AnnotationPropertyDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.AnnotationPropertyDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnotationPropertyDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnnotationAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAnnotationAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cAnnotationPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationPropertyAnnotationPropertyParserRuleCall_3_0 = (RuleCall)cAnnotationPropertyAssignment_3.eContents().get(0);
		private final Assignment cDomainAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDomainIRIParserRuleCall_4_0 = (RuleCall)cDomainAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AnnotationPropertyDomain:
		//	'AnnotationPropertyDomain' '('
		//	annotationAnnotations+=Annotation*
		//	annotationProperty=AnnotationProperty
		//	domain=IRI
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'AnnotationPropertyDomain' '(' annotationAnnotations+=Annotation* annotationProperty=AnnotationProperty domain=IRI ')'
		public Group getGroup() { return cGroup; }
		
		//'AnnotationPropertyDomain'
		public Keyword getAnnotationPropertyDomainKeyword_0() { return cAnnotationPropertyDomainKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//annotationAnnotations+=Annotation*
		public Assignment getAnnotationAnnotationsAssignment_2() { return cAnnotationAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAnnotationAnnotationsAnnotationParserRuleCall_2_0() { return cAnnotationAnnotationsAnnotationParserRuleCall_2_0; }
		
		//annotationProperty=AnnotationProperty
		public Assignment getAnnotationPropertyAssignment_3() { return cAnnotationPropertyAssignment_3; }
		
		//AnnotationProperty
		public RuleCall getAnnotationPropertyAnnotationPropertyParserRuleCall_3_0() { return cAnnotationPropertyAnnotationPropertyParserRuleCall_3_0; }
		
		//domain=IRI
		public Assignment getDomainAssignment_4() { return cDomainAssignment_4; }
		
		//IRI
		public RuleCall getDomainIRIParserRuleCall_4_0() { return cDomainIRIParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class AnnotationPropertyRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.AnnotationPropertyRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnotationPropertyRangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnnotationAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAnnotationAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cAnnotationPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationPropertyAnnotationPropertyParserRuleCall_3_0 = (RuleCall)cAnnotationPropertyAssignment_3.eContents().get(0);
		private final Assignment cRangeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRangeIRIParserRuleCall_4_0 = (RuleCall)cRangeAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AnnotationPropertyRange:
		//	'AnnotationPropertyRange' '('
		//	annotationAnnotations+=Annotation*
		//	annotationProperty=AnnotationProperty
		//	range=IRI
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'AnnotationPropertyRange' '(' annotationAnnotations+=Annotation* annotationProperty=AnnotationProperty range=IRI ')'
		public Group getGroup() { return cGroup; }
		
		//'AnnotationPropertyRange'
		public Keyword getAnnotationPropertyRangeKeyword_0() { return cAnnotationPropertyRangeKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//annotationAnnotations+=Annotation*
		public Assignment getAnnotationAnnotationsAssignment_2() { return cAnnotationAnnotationsAssignment_2; }
		
		//Annotation
		public RuleCall getAnnotationAnnotationsAnnotationParserRuleCall_2_0() { return cAnnotationAnnotationsAnnotationParserRuleCall_2_0; }
		
		//annotationProperty=AnnotationProperty
		public Assignment getAnnotationPropertyAssignment_3() { return cAnnotationPropertyAssignment_3; }
		
		//AnnotationProperty
		public RuleCall getAnnotationPropertyAnnotationPropertyParserRuleCall_3_0() { return cAnnotationPropertyAnnotationPropertyParserRuleCall_3_0; }
		
		//range=IRI
		public Assignment getRangeAssignment_4() { return cRangeAssignment_4; }
		
		//IRI
		public RuleCall getRangeIRIParserRuleCall_4_0() { return cRangeIRIParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class IRIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.IRI");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFullIRIParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbbreviatedIRIParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Identification
		//IRI:
		//	FullIRI | AbbreviatedIRI;
		@Override public ParserRule getRule() { return rule; }
		
		//FullIRI | AbbreviatedIRI
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FullIRI
		public RuleCall getFullIRIParserRuleCall_0() { return cFullIRIParserRuleCall_0; }
		
		//AbbreviatedIRI
		public RuleCall getAbbreviatedIRIParserRuleCall_1() { return cAbbreviatedIRIParserRuleCall_1; }
	}
	public class FullIRIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.FullIRI");
		private final RuleCall cFULL_IRITerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FullIRI:
		//	FULL_IRI;
		@Override public ParserRule getRule() { return rule; }
		
		//FULL_IRI
		public RuleCall getFULL_IRITerminalRuleCall() { return cFULL_IRITerminalRuleCall; }
	}
	public class AbbreviatedIRIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.AbbreviatedIRI");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPN_PREFIXTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPN_LOCALTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//AbbreviatedIRI:
		//	PN_PREFIX? PN_LOCAL;
		@Override public ParserRule getRule() { return rule; }
		
		//PN_PREFIX? PN_LOCAL
		public Group getGroup() { return cGroup; }
		
		//PN_PREFIX?
		public RuleCall getPN_PREFIXTerminalRuleCall_0() { return cPN_PREFIXTerminalRuleCall_0; }
		
		//PN_LOCAL
		public RuleCall getPN_LOCALTerminalRuleCall_1() { return cPN_LOCALTerminalRuleCall_1; }
	}
	public class PrefixNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.PrefixName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPN_PREFIXTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PrefixName:
		//	PN_PREFIX? ':';
		@Override public ParserRule getRule() { return rule; }
		
		//PN_PREFIX? ':'
		public Group getGroup() { return cGroup; }
		
		//PN_PREFIX?
		public RuleCall getPN_PREFIXTerminalRuleCall_0() { return cPN_PREFIXTerminalRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
	}
	public class NodeIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.NodeID");
		private final RuleCall cBLANK_NODE_LABELTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NodeID:
		//	BLANK_NODE_LABEL;
		@Override public ParserRule getRule() { return rule; }
		
		//BLANK_NODE_LABEL
		public RuleCall getBLANK_NODE_LABELTerminalRuleCall() { return cBLANK_NODE_LABELTerminalRuleCall; }
	}
	
	
	private final OntologyFileElements pOntologyFile;
	private final OntologyDocumentElements pOntologyDocument;
	private final PrefixDeclarationElements pPrefixDeclaration;
	private final OntologyElements pOntology;
	private final DirectlyImportsDocumentElements pDirectlyImportsDocument;
	private final EntityElements pEntity;
	private final ClassElements pClass;
	private final DatatypeElements pDatatype;
	private final ObjectPropertyElements pObjectProperty;
	private final DataPropertyElements pDataProperty;
	private final AnnotationPropertyElements pAnnotationProperty;
	private final IndividualElements pIndividual;
	private final NamedIndividualElements pNamedIndividual;
	private final AnonymousIndividualElements pAnonymousIndividual;
	private final LiteralElements pLiteral;
	private final TypedLiteralElements pTypedLiteral;
	private final StringLiteralElements pStringLiteral;
	private final DeclarationElements pDeclaration;
	private final EntityDeclarationElements pEntityDeclaration;
	private final ObjectPropertyExpressionElements pObjectPropertyExpression;
	private final ObjectPropertyReferenceElements pObjectPropertyReference;
	private final InverseObjectPropertyElements pInverseObjectProperty;
	private final DataPropertyExpressionElements pDataPropertyExpression;
	private final DataPropertyReferenceElements pDataPropertyReference;
	private final DataRangeElements pDataRange;
	private final DatatypeReferenceElements pDatatypeReference;
	private final DataIntersectionOfElements pDataIntersectionOf;
	private final DataUnionOfElements pDataUnionOf;
	private final DataComplementOfElements pDataComplementOf;
	private final DataOneOfElements pDataOneOf;
	private final DatatypeRestrictionElements pDatatypeRestriction;
	private final FacetRestrictionElements pFacetRestriction;
	private final ClassExpressionElements pClassExpression;
	private final ClassReferenceElements pClassReference;
	private final ObjectIntersectionOfElements pObjectIntersectionOf;
	private final ObjectUnionOfElements pObjectUnionOf;
	private final ObjectComplementOfElements pObjectComplementOf;
	private final ObjectOneOfElements pObjectOneOf;
	private final IndividualReferenceElements pIndividualReference;
	private final NamedIndividualReferenceElements pNamedIndividualReference;
	private final AnonymousIndividualReferenceElements pAnonymousIndividualReference;
	private final ObjectSomeValuesFromElements pObjectSomeValuesFrom;
	private final ObjectAllValuesFromElements pObjectAllValuesFrom;
	private final ObjectHasValueElements pObjectHasValue;
	private final ObjectHasSelfElements pObjectHasSelf;
	private final ObjectMinCardinalityElements pObjectMinCardinality;
	private final ObjectMaxCardinalityElements pObjectMaxCardinality;
	private final ObjectExactCardinalityElements pObjectExactCardinality;
	private final DataSomeValuesFromElements pDataSomeValuesFrom;
	private final DataAllValuesFromElements pDataAllValuesFrom;
	private final DataHasValueElements pDataHasValue;
	private final DataMinCardinalityElements pDataMinCardinality;
	private final DataMaxCardinalityElements pDataMaxCardinality;
	private final DataExactCardinalityElements pDataExactCardinality;
	private final AxiomElements pAxiom;
	private final ClassAxiomElements pClassAxiom;
	private final SubClassOfElements pSubClassOf;
	private final EquivalentClassesElements pEquivalentClasses;
	private final DisjointClassesElements pDisjointClasses;
	private final DisjointUnionElements pDisjointUnion;
	private final ObjectPropertyAxiomElements pObjectPropertyAxiom;
	private final SubObjectPropertyOfElements pSubObjectPropertyOf;
	private final EquivalentObjectPropertiesElements pEquivalentObjectProperties;
	private final DisjointObjectPropertiesElements pDisjointObjectProperties;
	private final InverseObjectPropertiesElements pInverseObjectProperties;
	private final ObjectPropertyDomainElements pObjectPropertyDomain;
	private final ObjectPropertyRangeElements pObjectPropertyRange;
	private final FunctionalObjectPropertyElements pFunctionalObjectProperty;
	private final InverseFunctionalObjectPropertyElements pInverseFunctionalObjectProperty;
	private final ReflexiveObjectPropertyElements pReflexiveObjectProperty;
	private final IrreflexiveObjectPropertyElements pIrreflexiveObjectProperty;
	private final SymmetricObjectPropertyElements pSymmetricObjectProperty;
	private final AsymmetricObjectPropertyElements pAsymmetricObjectProperty;
	private final TransitiveObjectPropertyElements pTransitiveObjectProperty;
	private final DataPropertyAxiomElements pDataPropertyAxiom;
	private final SubDataPropertyOfElements pSubDataPropertyOf;
	private final EquivalentDataPropertiesElements pEquivalentDataProperties;
	private final DisjointDataPropertiesElements pDisjointDataProperties;
	private final DataPropertyDomainElements pDataPropertyDomain;
	private final DataPropertyRangeElements pDataPropertyRange;
	private final FunctionalDataPropertyElements pFunctionalDataProperty;
	private final DatatypeDefinitionElements pDatatypeDefinition;
	private final HasKeyElements pHasKey;
	private final AssertionElements pAssertion;
	private final SameIndividualElements pSameIndividual;
	private final DifferentIndividualsElements pDifferentIndividuals;
	private final ClassAssertionElements pClassAssertion;
	private final ObjectPropertyAssertionElements pObjectPropertyAssertion;
	private final NegativeObjectPropertyAssertionElements pNegativeObjectPropertyAssertion;
	private final DataPropertyAssertionElements pDataPropertyAssertion;
	private final NegativeDataPropertyAssertionElements pNegativeDataPropertyAssertion;
	private final AnnotationElements pAnnotation;
	private final AnnotationValueElements pAnnotationValue;
	private final AnnotationAxiomElements pAnnotationAxiom;
	private final AnnotationAssertionElements pAnnotationAssertion;
	private final AnnotationSubjectElements pAnnotationSubject;
	private final SubAnnotationPropertyOfElements pSubAnnotationPropertyOf;
	private final AnnotationPropertyDomainElements pAnnotationPropertyDomain;
	private final AnnotationPropertyRangeElements pAnnotationPropertyRange;
	private final IRIElements pIRI;
	private final FullIRIElements pFullIRI;
	private final AbbreviatedIRIElements pAbbreviatedIRI;
	private final PrefixNameElements pPrefixName;
	private final NodeIDElements pNodeID;
	private final TerminalRule tISEGMENT;
	private final TerminalRule tFULL_IRI;
	private final TerminalRule tPN_CHARS_BASE;
	private final TerminalRule tPN_CHARS_U;
	private final TerminalRule tPN_CHARS;
	private final TerminalRule tPN_PREFIX;
	private final TerminalRule tPN_LOCAL;
	private final TerminalRule tBLANK_NODE_LABEL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public OwlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pOntologyFile = new OntologyFileElements();
		this.pOntologyDocument = new OntologyDocumentElements();
		this.pPrefixDeclaration = new PrefixDeclarationElements();
		this.pOntology = new OntologyElements();
		this.pDirectlyImportsDocument = new DirectlyImportsDocumentElements();
		this.pEntity = new EntityElements();
		this.pClass = new ClassElements();
		this.pDatatype = new DatatypeElements();
		this.pObjectProperty = new ObjectPropertyElements();
		this.pDataProperty = new DataPropertyElements();
		this.pAnnotationProperty = new AnnotationPropertyElements();
		this.pIndividual = new IndividualElements();
		this.pNamedIndividual = new NamedIndividualElements();
		this.pAnonymousIndividual = new AnonymousIndividualElements();
		this.pLiteral = new LiteralElements();
		this.pTypedLiteral = new TypedLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pDeclaration = new DeclarationElements();
		this.pEntityDeclaration = new EntityDeclarationElements();
		this.pObjectPropertyExpression = new ObjectPropertyExpressionElements();
		this.pObjectPropertyReference = new ObjectPropertyReferenceElements();
		this.pInverseObjectProperty = new InverseObjectPropertyElements();
		this.pDataPropertyExpression = new DataPropertyExpressionElements();
		this.pDataPropertyReference = new DataPropertyReferenceElements();
		this.pDataRange = new DataRangeElements();
		this.pDatatypeReference = new DatatypeReferenceElements();
		this.pDataIntersectionOf = new DataIntersectionOfElements();
		this.pDataUnionOf = new DataUnionOfElements();
		this.pDataComplementOf = new DataComplementOfElements();
		this.pDataOneOf = new DataOneOfElements();
		this.pDatatypeRestriction = new DatatypeRestrictionElements();
		this.pFacetRestriction = new FacetRestrictionElements();
		this.pClassExpression = new ClassExpressionElements();
		this.pClassReference = new ClassReferenceElements();
		this.pObjectIntersectionOf = new ObjectIntersectionOfElements();
		this.pObjectUnionOf = new ObjectUnionOfElements();
		this.pObjectComplementOf = new ObjectComplementOfElements();
		this.pObjectOneOf = new ObjectOneOfElements();
		this.pIndividualReference = new IndividualReferenceElements();
		this.pNamedIndividualReference = new NamedIndividualReferenceElements();
		this.pAnonymousIndividualReference = new AnonymousIndividualReferenceElements();
		this.pObjectSomeValuesFrom = new ObjectSomeValuesFromElements();
		this.pObjectAllValuesFrom = new ObjectAllValuesFromElements();
		this.pObjectHasValue = new ObjectHasValueElements();
		this.pObjectHasSelf = new ObjectHasSelfElements();
		this.pObjectMinCardinality = new ObjectMinCardinalityElements();
		this.pObjectMaxCardinality = new ObjectMaxCardinalityElements();
		this.pObjectExactCardinality = new ObjectExactCardinalityElements();
		this.pDataSomeValuesFrom = new DataSomeValuesFromElements();
		this.pDataAllValuesFrom = new DataAllValuesFromElements();
		this.pDataHasValue = new DataHasValueElements();
		this.pDataMinCardinality = new DataMinCardinalityElements();
		this.pDataMaxCardinality = new DataMaxCardinalityElements();
		this.pDataExactCardinality = new DataExactCardinalityElements();
		this.pAxiom = new AxiomElements();
		this.pClassAxiom = new ClassAxiomElements();
		this.pSubClassOf = new SubClassOfElements();
		this.pEquivalentClasses = new EquivalentClassesElements();
		this.pDisjointClasses = new DisjointClassesElements();
		this.pDisjointUnion = new DisjointUnionElements();
		this.pObjectPropertyAxiom = new ObjectPropertyAxiomElements();
		this.pSubObjectPropertyOf = new SubObjectPropertyOfElements();
		this.pEquivalentObjectProperties = new EquivalentObjectPropertiesElements();
		this.pDisjointObjectProperties = new DisjointObjectPropertiesElements();
		this.pInverseObjectProperties = new InverseObjectPropertiesElements();
		this.pObjectPropertyDomain = new ObjectPropertyDomainElements();
		this.pObjectPropertyRange = new ObjectPropertyRangeElements();
		this.pFunctionalObjectProperty = new FunctionalObjectPropertyElements();
		this.pInverseFunctionalObjectProperty = new InverseFunctionalObjectPropertyElements();
		this.pReflexiveObjectProperty = new ReflexiveObjectPropertyElements();
		this.pIrreflexiveObjectProperty = new IrreflexiveObjectPropertyElements();
		this.pSymmetricObjectProperty = new SymmetricObjectPropertyElements();
		this.pAsymmetricObjectProperty = new AsymmetricObjectPropertyElements();
		this.pTransitiveObjectProperty = new TransitiveObjectPropertyElements();
		this.pDataPropertyAxiom = new DataPropertyAxiomElements();
		this.pSubDataPropertyOf = new SubDataPropertyOfElements();
		this.pEquivalentDataProperties = new EquivalentDataPropertiesElements();
		this.pDisjointDataProperties = new DisjointDataPropertiesElements();
		this.pDataPropertyDomain = new DataPropertyDomainElements();
		this.pDataPropertyRange = new DataPropertyRangeElements();
		this.pFunctionalDataProperty = new FunctionalDataPropertyElements();
		this.pDatatypeDefinition = new DatatypeDefinitionElements();
		this.pHasKey = new HasKeyElements();
		this.pAssertion = new AssertionElements();
		this.pSameIndividual = new SameIndividualElements();
		this.pDifferentIndividuals = new DifferentIndividualsElements();
		this.pClassAssertion = new ClassAssertionElements();
		this.pObjectPropertyAssertion = new ObjectPropertyAssertionElements();
		this.pNegativeObjectPropertyAssertion = new NegativeObjectPropertyAssertionElements();
		this.pDataPropertyAssertion = new DataPropertyAssertionElements();
		this.pNegativeDataPropertyAssertion = new NegativeDataPropertyAssertionElements();
		this.pAnnotation = new AnnotationElements();
		this.pAnnotationValue = new AnnotationValueElements();
		this.pAnnotationAxiom = new AnnotationAxiomElements();
		this.pAnnotationAssertion = new AnnotationAssertionElements();
		this.pAnnotationSubject = new AnnotationSubjectElements();
		this.pSubAnnotationPropertyOf = new SubAnnotationPropertyOfElements();
		this.pAnnotationPropertyDomain = new AnnotationPropertyDomainElements();
		this.pAnnotationPropertyRange = new AnnotationPropertyRangeElements();
		this.pIRI = new IRIElements();
		this.pFullIRI = new FullIRIElements();
		this.pAbbreviatedIRI = new AbbreviatedIRIElements();
		this.pPrefixName = new PrefixNameElements();
		this.pNodeID = new NodeIDElements();
		this.tISEGMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.ISEGMENT");
		this.tFULL_IRI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.FULL_IRI");
		this.tPN_CHARS_BASE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.PN_CHARS_BASE");
		this.tPN_CHARS_U = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.PN_CHARS_U");
		this.tPN_CHARS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.PN_CHARS");
		this.tPN_PREFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.PN_PREFIX");
		this.tPN_LOCAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.PN_LOCAL");
		this.tBLANK_NODE_LABEL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.omg.kerml.owl.Owl.BLANK_NODE_LABEL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.omg.kerml.owl.Owl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Ontologies
	//OntologyFile:
	//	documents+=OntologyDocument+;
	public OntologyFileElements getOntologyFileAccess() {
		return pOntologyFile;
	}
	
	public ParserRule getOntologyFileRule() {
		return getOntologyFileAccess().getRule();
	}
	
	//OntologyDocument:
	//	prefixDeclarations+=PrefixDeclaration*
	//	ontology=Ontology;
	public OntologyDocumentElements getOntologyDocumentAccess() {
		return pOntologyDocument;
	}
	
	public ParserRule getOntologyDocumentRule() {
		return getOntologyDocumentAccess().getRule();
	}
	
	//PrefixDeclaration:
	//	'Prefix' '(' prefixName=PrefixName '=' fullIRI=FullIRI ')';
	public PrefixDeclarationElements getPrefixDeclarationAccess() {
		return pPrefixDeclaration;
	}
	
	public ParserRule getPrefixDeclarationRule() {
		return getPrefixDeclarationAccess().getRule();
	}
	
	//Ontology:
	//	{Ontology} 'Ontology' '(' (ontologyIRI=IRI versionIRI=IRI?)?
	//	directlyImportsDocuments+=DirectlyImportsDocument*
	//	ontologyAnnotations+=Annotation*
	//	axioms+=Axiom*
	//	')';
	public OntologyElements getOntologyAccess() {
		return pOntology;
	}
	
	public ParserRule getOntologyRule() {
		return getOntologyAccess().getRule();
	}
	
	//DirectlyImportsDocument:
	//	'Import' '(' IRI ')';
	public DirectlyImportsDocumentElements getDirectlyImportsDocumentAccess() {
		return pDirectlyImportsDocument;
	}
	
	public ParserRule getDirectlyImportsDocumentRule() {
		return getDirectlyImportsDocumentAccess().getRule();
	}
	
	//// Entities, Literals, and Anonymous Individuals
	//Entity:
	//	Class | ObjectProperty | DataProperty | AnnotationProperty | Datatype | NamedIndividual;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Class:
	//	entityIRI=IRI;
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//Datatype:
	//	entityIRI=IRI;
	public DatatypeElements getDatatypeAccess() {
		return pDatatype;
	}
	
	public ParserRule getDatatypeRule() {
		return getDatatypeAccess().getRule();
	}
	
	//ObjectProperty:
	//	entityIRI=IRI;
	public ObjectPropertyElements getObjectPropertyAccess() {
		return pObjectProperty;
	}
	
	public ParserRule getObjectPropertyRule() {
		return getObjectPropertyAccess().getRule();
	}
	
	//DataProperty:
	//	entityIRI=IRI;
	public DataPropertyElements getDataPropertyAccess() {
		return pDataProperty;
	}
	
	public ParserRule getDataPropertyRule() {
		return getDataPropertyAccess().getRule();
	}
	
	//AnnotationProperty:
	//	entityIRI=IRI;
	public AnnotationPropertyElements getAnnotationPropertyAccess() {
		return pAnnotationProperty;
	}
	
	public ParserRule getAnnotationPropertyRule() {
		return getAnnotationPropertyAccess().getRule();
	}
	
	//Individual:
	//	NamedIndividual | AnonymousIndividual;
	public IndividualElements getIndividualAccess() {
		return pIndividual;
	}
	
	public ParserRule getIndividualRule() {
		return getIndividualAccess().getRule();
	}
	
	//NamedIndividual:
	//	entityIRI=IRI;
	public NamedIndividualElements getNamedIndividualAccess() {
		return pNamedIndividual;
	}
	
	public ParserRule getNamedIndividualRule() {
		return getNamedIndividualAccess().getRule();
	}
	
	//AnonymousIndividual:
	//	nodeId=NodeID;
	public AnonymousIndividualElements getAnonymousIndividualAccess() {
		return pAnonymousIndividual;
	}
	
	public ParserRule getAnonymousIndividualRule() {
		return getAnonymousIndividualAccess().getRule();
	}
	
	//Literal:
	//	TypedLiteral | StringLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//TypedLiteral:
	//	lexicalForm=STRING '^^' datatype=IRI // [Datatype|IRI]
	//;
	public TypedLiteralElements getTypedLiteralAccess() {
		return pTypedLiteral;
	}
	
	public ParserRule getTypedLiteralRule() {
		return getTypedLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//	lexicalForm=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//Declaration:
	//	'Declaration' '('
	//	axiomAnnotation+=Annotation*
	//	entity=EntityDeclaration
	//	')';
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//EntityDeclaration Entity:
	//	'Class' '(' Class ')' |
	//	'Datatype' '(' Datatype ')' |
	//	'ObjectProperty' '(' ObjectProperty ')' |
	//	'DataProperty' '(' DataProperty ')' |
	//	'AnnotationProperty' '(' AnnotationProperty ')' |
	//	'NamedIndividual' '(' NamedIndividual ')';
	public EntityDeclarationElements getEntityDeclarationAccess() {
		return pEntityDeclaration;
	}
	
	public ParserRule getEntityDeclarationRule() {
		return getEntityDeclarationAccess().getRule();
	}
	
	//// Property Expressions
	//ObjectPropertyExpression:
	//	ObjectPropertyReference | InverseObjectProperty;
	public ObjectPropertyExpressionElements getObjectPropertyExpressionAccess() {
		return pObjectPropertyExpression;
	}
	
	public ParserRule getObjectPropertyExpressionRule() {
		return getObjectPropertyExpressionAccess().getRule();
	}
	
	//ObjectPropertyReference:
	//	objectProperty=IRI // [ObjectProperty|IRI]
	//;
	public ObjectPropertyReferenceElements getObjectPropertyReferenceAccess() {
		return pObjectPropertyReference;
	}
	
	public ParserRule getObjectPropertyReferenceRule() {
		return getObjectPropertyReferenceAccess().getRule();
	}
	
	//InverseObjectProperty:
	//	'ObjectInverseOf' '('
	//	objectProperty=IRI // [ObjectProperty|IRI] 
	//	')';
	public InverseObjectPropertyElements getInverseObjectPropertyAccess() {
		return pInverseObjectProperty;
	}
	
	public ParserRule getInverseObjectPropertyRule() {
		return getInverseObjectPropertyAccess().getRule();
	}
	
	//DataPropertyExpression:
	//	DataPropertyReference;
	public DataPropertyExpressionElements getDataPropertyExpressionAccess() {
		return pDataPropertyExpression;
	}
	
	public ParserRule getDataPropertyExpressionRule() {
		return getDataPropertyExpressionAccess().getRule();
	}
	
	//DataPropertyReference:
	//	dataProperty=IRI // [DataProperty|IRI]
	//;
	public DataPropertyReferenceElements getDataPropertyReferenceAccess() {
		return pDataPropertyReference;
	}
	
	public ParserRule getDataPropertyReferenceRule() {
		return getDataPropertyReferenceAccess().getRule();
	}
	
	//// Data Ranges
	//DataRange:
	//	DatatypeReference | DataIntersectionOf | DataUnionOf | DataComplementOf | DataOneOf | DatatypeRestriction;
	public DataRangeElements getDataRangeAccess() {
		return pDataRange;
	}
	
	public ParserRule getDataRangeRule() {
		return getDataRangeAccess().getRule();
	}
	
	//DatatypeReference:
	//	datatype=IRI // [Datatype|IRI]
	//;
	public DatatypeReferenceElements getDatatypeReferenceAccess() {
		return pDatatypeReference;
	}
	
	public ParserRule getDatatypeReferenceRule() {
		return getDatatypeReferenceAccess().getRule();
	}
	
	//DataIntersectionOf:
	//	'DataIntersectionOf' '('
	//	dataRanges+=DataRange
	//	dataRanges+=DataRange+
	//	')';
	public DataIntersectionOfElements getDataIntersectionOfAccess() {
		return pDataIntersectionOf;
	}
	
	public ParserRule getDataIntersectionOfRule() {
		return getDataIntersectionOfAccess().getRule();
	}
	
	//DataUnionOf:
	//	'DataUnionOf' '('
	//	dataRanges+=DataRange
	//	dataRanges+=DataRange+
	//	')';
	public DataUnionOfElements getDataUnionOfAccess() {
		return pDataUnionOf;
	}
	
	public ParserRule getDataUnionOfRule() {
		return getDataUnionOfAccess().getRule();
	}
	
	//DataComplementOf:
	//	'DataComplementOf' '('
	//	dataRange=DataRange
	//	')';
	public DataComplementOfElements getDataComplementOfAccess() {
		return pDataComplementOf;
	}
	
	public ParserRule getDataComplementOfRule() {
		return getDataComplementOfAccess().getRule();
	}
	
	//DataOneOf:
	//	'DataOneOf' '('
	//	literals+=Literal+
	//	')';
	public DataOneOfElements getDataOneOfAccess() {
		return pDataOneOf;
	}
	
	public ParserRule getDataOneOfRule() {
		return getDataOneOfAccess().getRule();
	}
	
	//DatatypeRestriction:
	//	'DatatypeRestriction' '('
	//	dataType=DatatypeReference
	//	restrictions+=FacetRestriction+
	//	')';
	public DatatypeRestrictionElements getDatatypeRestrictionAccess() {
		return pDatatypeRestriction;
	}
	
	public ParserRule getDatatypeRestrictionRule() {
		return getDatatypeRestrictionAccess().getRule();
	}
	
	//FacetRestriction:
	//	constrainingFacet=IRI restrictionValue=Literal;
	public FacetRestrictionElements getFacetRestrictionAccess() {
		return pFacetRestriction;
	}
	
	public ParserRule getFacetRestrictionRule() {
		return getFacetRestrictionAccess().getRule();
	}
	
	//// Class Expressions
	//ClassExpression:
	//	ClassReference | ObjectIntersectionOf | ObjectUnionOf | ObjectComplementOf | ObjectOneOf | ObjectSomeValuesFrom |
	//	ObjectAllValuesFrom | ObjectHasValue | ObjectHasSelf | ObjectMinCardinality | ObjectMaxCardinality |
	//	ObjectExactCardinality | DataSomeValuesFrom | DataAllValuesFrom | DataHasValue | DataMinCardinality |
	//	DataMaxCardinality | DataExactCardinality;
	public ClassExpressionElements getClassExpressionAccess() {
		return pClassExpression;
	}
	
	public ParserRule getClassExpressionRule() {
		return getClassExpressionAccess().getRule();
	}
	
	//ClassReference:
	//	class=IRI // [Class|IRI]
	//;
	public ClassReferenceElements getClassReferenceAccess() {
		return pClassReference;
	}
	
	public ParserRule getClassReferenceRule() {
		return getClassReferenceAccess().getRule();
	}
	
	//ObjectIntersectionOf:
	//	'ObjectIntersectionOf' '('
	//	classExpressions+=ClassExpression+
	//	')';
	public ObjectIntersectionOfElements getObjectIntersectionOfAccess() {
		return pObjectIntersectionOf;
	}
	
	public ParserRule getObjectIntersectionOfRule() {
		return getObjectIntersectionOfAccess().getRule();
	}
	
	//ObjectUnionOf:
	//	'ObjectUnionOf' '('
	//	classExpressions+=ClassExpression+
	//	')';
	public ObjectUnionOfElements getObjectUnionOfAccess() {
		return pObjectUnionOf;
	}
	
	public ParserRule getObjectUnionOfRule() {
		return getObjectUnionOfAccess().getRule();
	}
	
	//ObjectComplementOf:
	//	'ObjectComplementOf' '('
	//	classExpression=ClassExpression
	//	')';
	public ObjectComplementOfElements getObjectComplementOfAccess() {
		return pObjectComplementOf;
	}
	
	public ParserRule getObjectComplementOfRule() {
		return getObjectComplementOfAccess().getRule();
	}
	
	//ObjectOneOf:
	//	'ObjectOneOf' '('
	//	individuals+=IndividualReference+
	//	')';
	public ObjectOneOfElements getObjectOneOfAccess() {
		return pObjectOneOf;
	}
	
	public ParserRule getObjectOneOfRule() {
		return getObjectOneOfAccess().getRule();
	}
	
	//IndividualReference:
	//	NamedIndividualReference | AnonymousIndividualReference;
	public IndividualReferenceElements getIndividualReferenceAccess() {
		return pIndividualReference;
	}
	
	public ParserRule getIndividualReferenceRule() {
		return getIndividualReferenceAccess().getRule();
	}
	
	//NamedIndividualReference:
	//	individual=IRI // [NamedIndividual|IRI]
	//;
	public NamedIndividualReferenceElements getNamedIndividualReferenceAccess() {
		return pNamedIndividualReference;
	}
	
	public ParserRule getNamedIndividualReferenceRule() {
		return getNamedIndividualReferenceAccess().getRule();
	}
	
	//AnonymousIndividualReference:
	//	individual=NodeID // [AnonymousIndividual|NodeID]
	//;
	public AnonymousIndividualReferenceElements getAnonymousIndividualReferenceAccess() {
		return pAnonymousIndividualReference;
	}
	
	public ParserRule getAnonymousIndividualReferenceRule() {
		return getAnonymousIndividualReferenceAccess().getRule();
	}
	
	//ObjectSomeValuesFrom:
	//	'ObjectSomeValuesFrom' '('
	//	objectPropertyExpression=ObjectPropertyExpression
	//	classExpression=ClassExpression
	//	')';
	public ObjectSomeValuesFromElements getObjectSomeValuesFromAccess() {
		return pObjectSomeValuesFrom;
	}
	
	public ParserRule getObjectSomeValuesFromRule() {
		return getObjectSomeValuesFromAccess().getRule();
	}
	
	//ObjectAllValuesFrom:
	//	'ObjectAllValuesFrom' '('
	//	objectPropertyExpression=ObjectPropertyExpression
	//	classExpression=ClassExpression
	//	')';
	public ObjectAllValuesFromElements getObjectAllValuesFromAccess() {
		return pObjectAllValuesFrom;
	}
	
	public ParserRule getObjectAllValuesFromRule() {
		return getObjectAllValuesFromAccess().getRule();
	}
	
	//ObjectHasValue:
	//	'ObjectHasValue' '('
	//	objectPropertyExpression=ObjectPropertyExpression
	//	individual=IndividualReference
	//	')';
	public ObjectHasValueElements getObjectHasValueAccess() {
		return pObjectHasValue;
	}
	
	public ParserRule getObjectHasValueRule() {
		return getObjectHasValueAccess().getRule();
	}
	
	//ObjectHasSelf:
	//	'ObjectHasSelf' '('
	//	objectPropertyExpression=ObjectPropertyExpression
	//	')';
	public ObjectHasSelfElements getObjectHasSelfAccess() {
		return pObjectHasSelf;
	}
	
	public ParserRule getObjectHasSelfRule() {
		return getObjectHasSelfAccess().getRule();
	}
	
	//ObjectMinCardinality:
	//	'ObjectMinCardinality' '('
	//	cardinality=INT
	//	objectPropertyExpression=ObjectPropertyExpression
	//	classExpression=ClassExpression?
	//	')';
	public ObjectMinCardinalityElements getObjectMinCardinalityAccess() {
		return pObjectMinCardinality;
	}
	
	public ParserRule getObjectMinCardinalityRule() {
		return getObjectMinCardinalityAccess().getRule();
	}
	
	//ObjectMaxCardinality:
	//	'ObjectMaxCardinality' '('
	//	cardinality=INT
	//	objectPropertyExpression=ObjectPropertyExpression
	//	classExpression=ClassExpression?
	//	')';
	public ObjectMaxCardinalityElements getObjectMaxCardinalityAccess() {
		return pObjectMaxCardinality;
	}
	
	public ParserRule getObjectMaxCardinalityRule() {
		return getObjectMaxCardinalityAccess().getRule();
	}
	
	//ObjectExactCardinality:
	//	'ObjectExactCardinality' '('
	//	cardinality=INT
	//	objectPropertyExpression=ObjectPropertyExpression
	//	classExpression=ClassExpression?
	//	')';
	public ObjectExactCardinalityElements getObjectExactCardinalityAccess() {
		return pObjectExactCardinality;
	}
	
	public ParserRule getObjectExactCardinalityRule() {
		return getObjectExactCardinalityAccess().getRule();
	}
	
	//DataSomeValuesFrom:
	//	'DataSomeValuesFrom' '('
	//	dataPropertyExpressions+=DataPropertyExpression+
	//	dataRange+=DataRange
	//	')';
	public DataSomeValuesFromElements getDataSomeValuesFromAccess() {
		return pDataSomeValuesFrom;
	}
	
	public ParserRule getDataSomeValuesFromRule() {
		return getDataSomeValuesFromAccess().getRule();
	}
	
	//DataAllValuesFrom:
	//	'DataAllValuesFrom' '('
	//	dataPropertyExpressions+=DataPropertyExpression+
	//	dataRange+=DataRange
	//	')';
	public DataAllValuesFromElements getDataAllValuesFromAccess() {
		return pDataAllValuesFrom;
	}
	
	public ParserRule getDataAllValuesFromRule() {
		return getDataAllValuesFromAccess().getRule();
	}
	
	//DataHasValue:
	//	'DataHasValue' '('
	//	dataPropertyExpression=DataPropertyExpression
	//	literal=Literal
	//	')';
	public DataHasValueElements getDataHasValueAccess() {
		return pDataHasValue;
	}
	
	public ParserRule getDataHasValueRule() {
		return getDataHasValueAccess().getRule();
	}
	
	//DataMinCardinality:
	//	'DataMinCardinality' '('
	//	cardinality=INT
	//	dataPropertyExpression=DataPropertyExpression
	//	dataRange=DataRange?;
	public DataMinCardinalityElements getDataMinCardinalityAccess() {
		return pDataMinCardinality;
	}
	
	public ParserRule getDataMinCardinalityRule() {
		return getDataMinCardinalityAccess().getRule();
	}
	
	//DataMaxCardinality:
	//	'DataMaxCardinality' '('
	//	cardinality=INT
	//	dataPropertyExpression=DataPropertyExpression
	//	dataRange=DataRange?;
	public DataMaxCardinalityElements getDataMaxCardinalityAccess() {
		return pDataMaxCardinality;
	}
	
	public ParserRule getDataMaxCardinalityRule() {
		return getDataMaxCardinalityAccess().getRule();
	}
	
	//DataExactCardinality:
	//	'DataExactCardinality' '('
	//	cardinality=INT
	//	dataPropertyExpression=DataPropertyExpression
	//	dataRange=DataRange?;
	public DataExactCardinalityElements getDataExactCardinalityAccess() {
		return pDataExactCardinality;
	}
	
	public ParserRule getDataExactCardinalityRule() {
		return getDataExactCardinalityAccess().getRule();
	}
	
	//// Axioms
	//Axiom:
	//	Declaration | ClassAxiom | ObjectPropertyAxiom | DataPropertyAxiom | DatatypeDefinition | HasKey | Assertion |
	//	AnnotationAxiom;
	public AxiomElements getAxiomAccess() {
		return pAxiom;
	}
	
	public ParserRule getAxiomRule() {
		return getAxiomAccess().getRule();
	}
	
	//// Class Axioms
	//ClassAxiom:
	//	SubClassOf | EquivalentClasses | DisjointClasses | DisjointUnion;
	public ClassAxiomElements getClassAxiomAccess() {
		return pClassAxiom;
	}
	
	public ParserRule getClassAxiomRule() {
		return getClassAxiomAccess().getRule();
	}
	
	//SubClassOf:
	//	'SubClassOf' '('
	//	axiomAnnotations+=Annotation*
	//	subClassExpression=ClassExpression
	//	superClassExpression=ClassExpression
	//	')';
	public SubClassOfElements getSubClassOfAccess() {
		return pSubClassOf;
	}
	
	public ParserRule getSubClassOfRule() {
		return getSubClassOfAccess().getRule();
	}
	
	//EquivalentClasses:
	//	'EquivalentClasses' '('
	//	axiomAnnotations+=Annotation*
	//	classExpressions+=ClassExpression
	//	classExpressions+=ClassExpression+
	//	')';
	public EquivalentClassesElements getEquivalentClassesAccess() {
		return pEquivalentClasses;
	}
	
	public ParserRule getEquivalentClassesRule() {
		return getEquivalentClassesAccess().getRule();
	}
	
	//DisjointClasses:
	//	'DisjointClasses' '('
	//	axiomAnnotations+=Annotation*
	//	classExpressions+=ClassExpression
	//	classExpressions+=ClassExpression+
	//	')';
	public DisjointClassesElements getDisjointClassesAccess() {
		return pDisjointClasses;
	}
	
	public ParserRule getDisjointClassesRule() {
		return getDisjointClassesAccess().getRule();
	}
	
	//DisjointUnion:
	//	'DisjointUnion' '('
	//	axiomAnnotations+=Annotation*
	//	class=ClassReference
	//	disjointClassExpressions+=ClassExpression
	//	disjointClassExpressions+=ClassExpression+
	//	')';
	public DisjointUnionElements getDisjointUnionAccess() {
		return pDisjointUnion;
	}
	
	public ParserRule getDisjointUnionRule() {
		return getDisjointUnionAccess().getRule();
	}
	
	//// Object Property Axioms
	//ObjectPropertyAxiom:
	//	SubObjectPropertyOf | EquivalentObjectProperties | DisjointObjectProperties | InverseObjectProperties |
	//	ObjectPropertyDomain | ObjectPropertyRange | FunctionalObjectProperty | InverseFunctionalObjectProperty |
	//	ReflexiveObjectProperty | IrreflexiveObjectProperty | SymmetricObjectProperty | AsymmetricObjectProperty |
	//	TransitiveObjectProperty;
	public ObjectPropertyAxiomElements getObjectPropertyAxiomAccess() {
		return pObjectPropertyAxiom;
	}
	
	public ParserRule getObjectPropertyAxiomRule() {
		return getObjectPropertyAxiomAccess().getRule();
	}
	
	//SubObjectPropertyOf:
	//	'SubObjectPropertyOf' '('
	//	axiomAnnotations+=Annotation* (subObjectPropertyExpression+=ObjectPropertyExpression |
	//	'ObjectPropertyChain' '('
	//	subObjectPropertyExpression+=ObjectPropertyExpression+
	//	')')
	//	')';
	public SubObjectPropertyOfElements getSubObjectPropertyOfAccess() {
		return pSubObjectPropertyOf;
	}
	
	public ParserRule getSubObjectPropertyOfRule() {
		return getSubObjectPropertyOfAccess().getRule();
	}
	
	//EquivalentObjectProperties:
	//	'EquivalentObjectProperties' '('
	//	axiomAnnotations+=Annotation*
	//	objectPropertyExpressions+=ObjectPropertyExpression
	//	objectPropertyExpressions+=ObjectPropertyExpression+
	//	')';
	public EquivalentObjectPropertiesElements getEquivalentObjectPropertiesAccess() {
		return pEquivalentObjectProperties;
	}
	
	public ParserRule getEquivalentObjectPropertiesRule() {
		return getEquivalentObjectPropertiesAccess().getRule();
	}
	
	//DisjointObjectProperties:
	//	'DisjointObjectProperties' '('
	//	axiomAnnotations+=Annotation*
	//	objectPropertyExpressions+=ObjectPropertyExpression
	//	objectPropertyExpressions+=ObjectPropertyExpression+
	//	')';
	public DisjointObjectPropertiesElements getDisjointObjectPropertiesAccess() {
		return pDisjointObjectProperties;
	}
	
	public ParserRule getDisjointObjectPropertiesRule() {
		return getDisjointObjectPropertiesAccess().getRule();
	}
	
	//InverseObjectProperties:
	//	'InverseObjectProperties' '('
	//	axiomAnnotations+=Annotation*
	//	objectPropertyExpression1=ObjectPropertyExpression
	//	objectPropertyExpression2=ObjectPropertyExpression
	//	')';
	public InverseObjectPropertiesElements getInverseObjectPropertiesAccess() {
		return pInverseObjectProperties;
	}
	
	public ParserRule getInverseObjectPropertiesRule() {
		return getInverseObjectPropertiesAccess().getRule();
	}
	
	//ObjectPropertyDomain:
	//	'ObjectPropertyDomain' '('
	//	axiomAnnotations+=Annotation*
	//	objectPropertyExpression=ObjectPropertyExpression
	//	classExpression=ClassExpression
	//	')';
	public ObjectPropertyDomainElements getObjectPropertyDomainAccess() {
		return pObjectPropertyDomain;
	}
	
	public ParserRule getObjectPropertyDomainRule() {
		return getObjectPropertyDomainAccess().getRule();
	}
	
	//ObjectPropertyRange:
	//	'ObjectPropertyRange' '('
	//	axiomAnnotations+=Annotation*
	//	objectPropertyExpression=ObjectPropertyExpression
	//	classExpression=ClassExpression
	//	')';
	public ObjectPropertyRangeElements getObjectPropertyRangeAccess() {
		return pObjectPropertyRange;
	}
	
	public ParserRule getObjectPropertyRangeRule() {
		return getObjectPropertyRangeAccess().getRule();
	}
	
	//FunctionalObjectProperty:
	//	'FunctionalObjectProperty' '('
	//	axiomAnnotations+=Annotation*
	//	objectPropertyExpression=ObjectPropertyExpression
	//	')';
	public FunctionalObjectPropertyElements getFunctionalObjectPropertyAccess() {
		return pFunctionalObjectProperty;
	}
	
	public ParserRule getFunctionalObjectPropertyRule() {
		return getFunctionalObjectPropertyAccess().getRule();
	}
	
	//InverseFunctionalObjectProperty:
	//	'InverseFunctionalObjectProperty' '('
	//	axiomAnnotations+=Annotation*
	//	objectPropertyExpression=ObjectPropertyExpression
	//	')';
	public InverseFunctionalObjectPropertyElements getInverseFunctionalObjectPropertyAccess() {
		return pInverseFunctionalObjectProperty;
	}
	
	public ParserRule getInverseFunctionalObjectPropertyRule() {
		return getInverseFunctionalObjectPropertyAccess().getRule();
	}
	
	//ReflexiveObjectProperty:
	//	'ReflectiveObjectProperty' '('
	//	axiomAnnotations+=Annotation*
	//	objectPropertyExpression=ObjectPropertyExpression
	//	')';
	public ReflexiveObjectPropertyElements getReflexiveObjectPropertyAccess() {
		return pReflexiveObjectProperty;
	}
	
	public ParserRule getReflexiveObjectPropertyRule() {
		return getReflexiveObjectPropertyAccess().getRule();
	}
	
	//IrreflexiveObjectProperty:
	//	'IrreflectiveObjectProperty' '('
	//	axiomAnnotations+=Annotation*
	//	objectPropertyExpression=ObjectPropertyExpression
	//	')';
	public IrreflexiveObjectPropertyElements getIrreflexiveObjectPropertyAccess() {
		return pIrreflexiveObjectProperty;
	}
	
	public ParserRule getIrreflexiveObjectPropertyRule() {
		return getIrreflexiveObjectPropertyAccess().getRule();
	}
	
	//SymmetricObjectProperty:
	//	'SymmetricObjectProperty' '('
	//	axiomAnnotations+=Annotation*
	//	objectPropertyExpression=ObjectPropertyExpression
	//	')';
	public SymmetricObjectPropertyElements getSymmetricObjectPropertyAccess() {
		return pSymmetricObjectProperty;
	}
	
	public ParserRule getSymmetricObjectPropertyRule() {
		return getSymmetricObjectPropertyAccess().getRule();
	}
	
	//AsymmetricObjectProperty:
	//	'AsymmetricObjectProperty' '('
	//	axiomAnnotations+=Annotation*
	//	objectPropertyExpression=ObjectPropertyExpression
	//	')';
	public AsymmetricObjectPropertyElements getAsymmetricObjectPropertyAccess() {
		return pAsymmetricObjectProperty;
	}
	
	public ParserRule getAsymmetricObjectPropertyRule() {
		return getAsymmetricObjectPropertyAccess().getRule();
	}
	
	//TransitiveObjectProperty:
	//	'TransitiveObjectProperty' '('
	//	axiomAnnotations+=Annotation*
	//	objectPropertyExpression=ObjectPropertyExpression
	//	')';
	public TransitiveObjectPropertyElements getTransitiveObjectPropertyAccess() {
		return pTransitiveObjectProperty;
	}
	
	public ParserRule getTransitiveObjectPropertyRule() {
		return getTransitiveObjectPropertyAccess().getRule();
	}
	
	//// Data Property Axioms
	//DataPropertyAxiom:
	//	SubDataPropertyOf | EquivalentDataProperties | DisjointDataProperties | DataPropertyDomain | DataPropertyRange |
	//	FunctionalDataProperty;
	public DataPropertyAxiomElements getDataPropertyAxiomAccess() {
		return pDataPropertyAxiom;
	}
	
	public ParserRule getDataPropertyAxiomRule() {
		return getDataPropertyAxiomAccess().getRule();
	}
	
	//SubDataPropertyOf:
	//	'SubDataPropertyOf' '('
	//	axiomAnnotations+=Annotation*
	//	subDataPropertyExpression=DataPropertyExpression
	//	superDataPropertyExpression=DataPropertyExpression
	//	')';
	public SubDataPropertyOfElements getSubDataPropertyOfAccess() {
		return pSubDataPropertyOf;
	}
	
	public ParserRule getSubDataPropertyOfRule() {
		return getSubDataPropertyOfAccess().getRule();
	}
	
	//EquivalentDataProperties:
	//	'EquivalentDataProperties' '('
	//	axiomAnnotations+=Annotation*
	//	dataPropertyExpressions+=DataPropertyExpression
	//	dataPropertyExpressions+=DataPropertyExpression+
	//	')';
	public EquivalentDataPropertiesElements getEquivalentDataPropertiesAccess() {
		return pEquivalentDataProperties;
	}
	
	public ParserRule getEquivalentDataPropertiesRule() {
		return getEquivalentDataPropertiesAccess().getRule();
	}
	
	//DisjointDataProperties:
	//	'DisjointDataProperties' '('
	//	axiomAnnotations+=Annotation*
	//	dataPropertyExpressions+=DataPropertyExpression
	//	dataPropertyExpressions+=DataPropertyExpression+
	//	')';
	public DisjointDataPropertiesElements getDisjointDataPropertiesAccess() {
		return pDisjointDataProperties;
	}
	
	public ParserRule getDisjointDataPropertiesRule() {
		return getDisjointDataPropertiesAccess().getRule();
	}
	
	//DataPropertyDomain:
	//	'DataPropertyDomain' '('
	//	axiomAnnotations+=Annotation*
	//	dataPropertyExpressions+=DataPropertyExpression
	//	classExpression=ClassExpression
	//	')';
	public DataPropertyDomainElements getDataPropertyDomainAccess() {
		return pDataPropertyDomain;
	}
	
	public ParserRule getDataPropertyDomainRule() {
		return getDataPropertyDomainAccess().getRule();
	}
	
	//DataPropertyRange:
	//	'DataPropertyRange' '('
	//	axiomAnnotations+=Annotation*
	//	dataPropertyExpressions+=DataPropertyExpression
	//	classExpression=ClassExpression
	//	')';
	public DataPropertyRangeElements getDataPropertyRangeAccess() {
		return pDataPropertyRange;
	}
	
	public ParserRule getDataPropertyRangeRule() {
		return getDataPropertyRangeAccess().getRule();
	}
	
	//FunctionalDataProperty:
	//	'FunctionalDataProperty' '('
	//	axiomAnnotations+=Annotation*
	//	dataPropertyExpressions+=DataPropertyExpression
	//	')';
	public FunctionalDataPropertyElements getFunctionalDataPropertyAccess() {
		return pFunctionalDataProperty;
	}
	
	public ParserRule getFunctionalDataPropertyRule() {
		return getFunctionalDataPropertyAccess().getRule();
	}
	
	//// Datatype Definitions
	//DatatypeDefinition:
	//	'DatatypeDefinition' '('
	//	axiomAnnotations+=Annotation*
	//	datatype=DatatypeReference
	//	dataRange=DataRange
	//	')';
	public DatatypeDefinitionElements getDatatypeDefinitionAccess() {
		return pDatatypeDefinition;
	}
	
	public ParserRule getDatatypeDefinitionRule() {
		return getDatatypeDefinitionAccess().getRule();
	}
	
	//// Keys
	//HasKey:
	//	'HasKey' '('
	//	axiomAnnotations+=Annotation*
	//	classExpression=ClassExpression
	//	'(' objectPropertyExpressions+=ObjectPropertyExpression* ')'
	//	'(' dataPropertyExpressions+=DataPropertyExpression* ')'
	//	')';
	public HasKeyElements getHasKeyAccess() {
		return pHasKey;
	}
	
	public ParserRule getHasKeyRule() {
		return getHasKeyAccess().getRule();
	}
	
	//// Assertions
	//Assertion:
	//	SameIndividual | DifferentIndividuals | ClassAssertion | ObjectPropertyAssertion | NegativeObjectPropertyAssertion |
	//	DataPropertyAssertion | NegativeDataPropertyAssertion;
	public AssertionElements getAssertionAccess() {
		return pAssertion;
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}
	
	//SameIndividual:
	//	'SameIndividual' '('
	//	axiomAnnotations+=Annotation*
	//	individuals+=IndividualReference
	//	individuals+=IndividualReference+
	//	')';
	public SameIndividualElements getSameIndividualAccess() {
		return pSameIndividual;
	}
	
	public ParserRule getSameIndividualRule() {
		return getSameIndividualAccess().getRule();
	}
	
	//DifferentIndividuals:
	//	'DifferentIndividuals' '('
	//	axiomAnnotations+=Annotation*
	//	individuals+=IndividualReference
	//	individuals+=IndividualReference+
	//	')';
	public DifferentIndividualsElements getDifferentIndividualsAccess() {
		return pDifferentIndividuals;
	}
	
	public ParserRule getDifferentIndividualsRule() {
		return getDifferentIndividualsAccess().getRule();
	}
	
	//ClassAssertion:
	//	'ClassAssertion' '('
	//	axiomAnnotations+=Annotation*
	//	classExpression=ClassExpression
	//	individual=IndividualReference
	//	')';
	public ClassAssertionElements getClassAssertionAccess() {
		return pClassAssertion;
	}
	
	public ParserRule getClassAssertionRule() {
		return getClassAssertionAccess().getRule();
	}
	
	//ObjectPropertyAssertion:
	//	'ObjectPropertyAssertion' '('
	//	axiomAnnotations+=Annotation*
	//	objectPropertyExpression=ObjectPropertyExpression
	//	sourceIndividual=IndividualReference
	//	targetIndividual=IndividualReference
	//	')';
	public ObjectPropertyAssertionElements getObjectPropertyAssertionAccess() {
		return pObjectPropertyAssertion;
	}
	
	public ParserRule getObjectPropertyAssertionRule() {
		return getObjectPropertyAssertionAccess().getRule();
	}
	
	//NegativeObjectPropertyAssertion:
	//	'NegativeObjectPropertyAssertion' '('
	//	axiomAnnotations+=Annotation*
	//	objectPropertyExpression=ObjectPropertyExpression
	//	sourceIndividual=IndividualReference
	//	targetIndividual=IndividualReference
	//	')';
	public NegativeObjectPropertyAssertionElements getNegativeObjectPropertyAssertionAccess() {
		return pNegativeObjectPropertyAssertion;
	}
	
	public ParserRule getNegativeObjectPropertyAssertionRule() {
		return getNegativeObjectPropertyAssertionAccess().getRule();
	}
	
	//DataPropertyAssertion:
	//	'DataPropertyAssertion' '('
	//	axiomAnnotations+=Annotation*
	//	objectPropertyExpression=ObjectPropertyExpression
	//	sourceIndividual=IndividualReference
	//	targetValue=Literal
	//	')';
	public DataPropertyAssertionElements getDataPropertyAssertionAccess() {
		return pDataPropertyAssertion;
	}
	
	public ParserRule getDataPropertyAssertionRule() {
		return getDataPropertyAssertionAccess().getRule();
	}
	
	//NegativeDataPropertyAssertion:
	//	'NegativeDataPropertyAssertion' '('
	//	axiomAnnotations+=Annotation*
	//	objectPropertyExpression=ObjectPropertyExpression
	//	sourceIndividual=IndividualReference
	//	targetValue=Literal
	//	')';
	public NegativeDataPropertyAssertionElements getNegativeDataPropertyAssertionAccess() {
		return pNegativeDataPropertyAssertion;
	}
	
	public ParserRule getNegativeDataPropertyAssertionRule() {
		return getNegativeDataPropertyAssertionAccess().getRule();
	}
	
	//// Annotations
	//Annotation:
	//	'Annotation' '('
	//	annotationAnnotations+=Annotation*
	//	annotationProperty=AnnotationProperty
	//	annotationvalue=AnnotationValue
	//	')';
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//AnnotationValue:
	//	AnonymousIndividualReference | {AnnotationValue} IRI | Literal;
	public AnnotationValueElements getAnnotationValueAccess() {
		return pAnnotationValue;
	}
	
	public ParserRule getAnnotationValueRule() {
		return getAnnotationValueAccess().getRule();
	}
	
	//// Annotation Axioms
	//AnnotationAxiom:
	//	AnnotationAssertion | SubAnnotationPropertyOf | AnnotationPropertyDomain | AnnotationPropertyRange;
	public AnnotationAxiomElements getAnnotationAxiomAccess() {
		return pAnnotationAxiom;
	}
	
	public ParserRule getAnnotationAxiomRule() {
		return getAnnotationAxiomAccess().getRule();
	}
	
	//AnnotationAssertion:
	//	'AnnotationAssertion' '('
	//	annotationAnnotations+=Annotation*
	//	annotationProperty=AnnotationProperty
	//	annotationSubject=AnnotationSubject
	//	annotationValue=AnnotationValue
	//	')';
	public AnnotationAssertionElements getAnnotationAssertionAccess() {
		return pAnnotationAssertion;
	}
	
	public ParserRule getAnnotationAssertionRule() {
		return getAnnotationAssertionAccess().getRule();
	}
	
	//AnnotationSubject:
	//	{AnnotationSubject} IRI | AnonymousIndividualReference;
	public AnnotationSubjectElements getAnnotationSubjectAccess() {
		return pAnnotationSubject;
	}
	
	public ParserRule getAnnotationSubjectRule() {
		return getAnnotationSubjectAccess().getRule();
	}
	
	//SubAnnotationPropertyOf:
	//	'SubAnnotationPropertyOf' '('
	//	annotationAnnotations+=Annotation*
	//	subAnnotationProperty=AnnotationProperty
	//	superAnnotationProperty=AnnotationProperty
	//	')';
	public SubAnnotationPropertyOfElements getSubAnnotationPropertyOfAccess() {
		return pSubAnnotationPropertyOf;
	}
	
	public ParserRule getSubAnnotationPropertyOfRule() {
		return getSubAnnotationPropertyOfAccess().getRule();
	}
	
	//AnnotationPropertyDomain:
	//	'AnnotationPropertyDomain' '('
	//	annotationAnnotations+=Annotation*
	//	annotationProperty=AnnotationProperty
	//	domain=IRI
	//	')';
	public AnnotationPropertyDomainElements getAnnotationPropertyDomainAccess() {
		return pAnnotationPropertyDomain;
	}
	
	public ParserRule getAnnotationPropertyDomainRule() {
		return getAnnotationPropertyDomainAccess().getRule();
	}
	
	//AnnotationPropertyRange:
	//	'AnnotationPropertyRange' '('
	//	annotationAnnotations+=Annotation*
	//	annotationProperty=AnnotationProperty
	//	range=IRI
	//	')';
	public AnnotationPropertyRangeElements getAnnotationPropertyRangeAccess() {
		return pAnnotationPropertyRange;
	}
	
	public ParserRule getAnnotationPropertyRangeRule() {
		return getAnnotationPropertyRangeAccess().getRule();
	}
	
	//// Identification
	//IRI:
	//	FullIRI | AbbreviatedIRI;
	public IRIElements getIRIAccess() {
		return pIRI;
	}
	
	public ParserRule getIRIRule() {
		return getIRIAccess().getRule();
	}
	
	//FullIRI:
	//	FULL_IRI;
	public FullIRIElements getFullIRIAccess() {
		return pFullIRI;
	}
	
	public ParserRule getFullIRIRule() {
		return getFullIRIAccess().getRule();
	}
	
	//AbbreviatedIRI:
	//	PN_PREFIX? PN_LOCAL;
	public AbbreviatedIRIElements getAbbreviatedIRIAccess() {
		return pAbbreviatedIRI;
	}
	
	public ParserRule getAbbreviatedIRIRule() {
		return getAbbreviatedIRIAccess().getRule();
	}
	
	//PrefixName:
	//	PN_PREFIX? ':';
	public PrefixNameElements getPrefixNameAccess() {
		return pPrefixName;
	}
	
	public ParserRule getPrefixNameRule() {
		return getPrefixNameAccess().getRule();
	}
	
	//NodeID:
	//	BLANK_NODE_LABEL;
	public NodeIDElements getNodeIDAccess() {
		return pNodeID;
	}
	
	public ParserRule getNodeIDRule() {
		return getNodeIDAccess().getRule();
	}
	
	//terminal fragment ISEGMENT:
	//	'a'..'z' | 'A'..'Z' | '_' | '-' | '.' | '~' | '0'..'9'*;
	public TerminalRule getISEGMENTRule() {
		return tISEGMENT;
	}
	
	//terminal FULL_IRI:
	//	'<' ID ':' '//' ISEGMENT ('/' ISEGMENT)* ('#' ISEGMENT)? '>';
	public TerminalRule getFULL_IRIRule() {
		return tFULL_IRI;
	}
	
	//terminal fragment PN_CHARS_BASE:
	//	'a'..'z' | 'A'..'Z';
	public TerminalRule getPN_CHARS_BASERule() {
		return tPN_CHARS_BASE;
	}
	
	//terminal fragment PN_CHARS_U:
	//	PN_CHARS_BASE | '_';
	public TerminalRule getPN_CHARS_URule() {
		return tPN_CHARS_U;
	}
	
	//terminal fragment PN_CHARS:
	//	PN_CHARS_U | '-' | '0'..'9';
	public TerminalRule getPN_CHARSRule() {
		return tPN_CHARS;
	}
	
	//terminal PN_PREFIX:
	//	PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?;
	public TerminalRule getPN_PREFIXRule() {
		return tPN_PREFIX;
	}
	
	//terminal PN_LOCAL:
	//	':' (PN_CHARS_U | '0'..'9') ((PN_CHARS | '.')* PN_CHARS)?;
	public TerminalRule getPN_LOCALRule() {
		return tPN_LOCAL;
	}
	
	//terminal BLANK_NODE_LABEL:
	//	'_:' (PN_CHARS_U | '0'..'9') ((PN_CHARS | '.')* PN_CHARS)?;
	public TerminalRule getBLANK_NODE_LABELRule() {
		return tBLANK_NODE_LABEL;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
