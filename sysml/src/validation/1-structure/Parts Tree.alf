package 'Parts Tree' {
	
	package 'Create Generic Hierarchical Structure' {
		
		/* Definitions */
		
		class Vehicle {
			feature mass;
		}
		
		class AxleAssembly { }
		
		class Axle { }
		
		class Wheel { }
		
		/* Usages */
		
		/** 
		 * 'vehicle1' is a package-owned feature of type Vehicle.
		 * It is not marked as a "part", because that is only
		 * valid in the context of a nested feature.
		 */
		vehicle1: Vehicle {
			
			/**
			 * 'frontAxleAssembly' is a nested feature of feature 'vehicle1'.
			 * It is marked as a "part", which indicates that it is a
			 * composite part of the containing feature.
			 * 
			 * (And similarly for 'rearAxleAssembly'.)
			 */
			part frontAxleAssembly: AxleAssembly {
				part frontAxle: Axle;
				
				/** 
				 * 'frontWheel' is a nested feature of type 'Wheel' with
				 * multiplicity "2". This means that this axle assembly
				 * must have exactly two wheels. However, there is still
				 * only one 'frontWheel' feature. The feature is "ordered",
				 * so that the first wheel can be distinguished from the
				 * second.
				 */
				part frontWheel: Wheel[2] ordered;
			}
			
			part rearAxleAssembly: AxleAssembly {
				part rearAxle: Axle;
				part rearWheel: Wheel[2] ordered;
			}
			
		}
	}
	
	package 'Copy of Generic Hierarchical Structure' {
		import 'Create Generic Hierarchical Structure'::*;
		
		/* Usages */
		
		/**
		 * 'vehicle1_c1' is a redefinition of 'vehicle1'. It is 
		 * effectively a "virtual copy". Any change to the original will
		 * also be propagated to the "copy".
		 * 
		 * Even though the part structure does not appear in the
		 * redefinition, the parts of 'vehicle1' are inherited as
		 * members of 'vehicle1-c1'. Thus, vehicle1_c1::frontAxleAssembly
		 * names the same (M1) model element as vehicle1::frontAxleAssembly,
		 * but vehicle1_c1.frontAxleAssembly will be a distinct (M0) object
		 * from vehicle1.frontAxleAssembly.
		 *
		 * @Version 1.0
		 */
		 vehicle1_c1 redefines vehicle1;
	}
	
	package 'Create Localized Usages' {
		import 'Create Generic Hierarchical Structure'::*;
		
		/*
		 * Note: These imports are currently necessary because of qualified name
		 * resolution limitations in the context of inheritance.
		 */
		import 'Create Generic Hierarchical Structure'::vehicle1::*;
		import 'Create Generic Hierarchical Structure'::vehicle1::frontAxleAssembly::*;
		import 'Create Generic Hierarchical Structure'::vehicle1::rearAxleAssembly::*;
		
		/* Definitions */
		
		class FrontAxle specializes Axle { }		
		class RearAxle specializes Axle { }
		
		/* Usages */
		
		/**
		 * 'vehicle1_c1' is a redefinition of 'vehicle1'. This redefinition has 
		 * been further refined so that vehicle1_c1::frontAxleAssembly::frontAxle 
		 * is redefined to have the specialized type FrontAxle, and 
		 * vehicle1_c1::rearAxleAssembly::rearAxle has been redefined to have the 
		 * specialized type RearAxle. Any parts that are not explicitly redefined 
		 * are inherited as defined in the original 'vehicle1'.
		 *
		 * @Version 1.1
		 */
		 vehicle1_c1 redefines vehicle1 {
			
			/**
			 * 'frontAxleAssembly' must be redefined in order to redefine one
			 * of its composite parts. 
			 * 
			 * (And similarly for 'rearAxleAssembly'.)
			 */
			part redefines frontAxleAssembly {
				
				/**
				 * This redefines the part 'frontAxle' to have type 'FrontAxle',
				 * without changing the name of the part.
				 */
				part redefines frontAxle: FrontAxle;
			}
			
			part redefines rearAxleAssembly {
				part redefines rearAxle: RearAxle;
			}
			
		}
	}
	
	package 'Create Unambiguous Deeply Nested Structure' {
		import 'Create Generic Hierarchical Structure'::*;
		
		/*
		 * Note: These imports are currently necessary because of qualified name
		 * resolution limitations in the context of inheritance.
		 */
		import 'Create Generic Hierarchical Structure'::vehicle1::*;
		import 'Create Generic Hierarchical Structure'::vehicle1::frontAxleAssembly::*;
		import 'Create Generic Hierarchical Structure'::vehicle1::rearAxleAssembly::*;
		
		/* Definitions */
		
		class FrontAxle specializes Axle { }		
		class RearAxle specializes Axle { }
		
		/* Usages */
		
		/**
		 * 'vehicle1_c1' is a redefinition of 'vehicle1'. This redefinition has 
		 * been further refined so that vehicle1_c1::frontAxleAssembly::frontAxle 
		 * is redefined to have the specialized type FrontAxle, and 
		 * vehicle1_c1::rearAxleAssembly::rearAxle has been redefined to have the 
		 * specialized type RearAxle. In addition, additional features have been
		 * defined in each axle assembly to distinguish each of the front and rear
		 * wheels.
		 *
		 * @Version 1.2
		 */
		 vehicle1_c1 redefines vehicle1 {
			
			/**
			 * 'frontAxleAssembly' must be redefined in order to redefine and
			 * subset its composite parts. 
			 * 
			 * (And similarly for 'rearAxleAssembly'.)
			 */
			part redefines frontAxleAssembly {
				part redefines frontAxle: FrontAxle;
				
				/**
				 * 'frontWheel_1' is a separate feature from 'frontWheel',
				 * but it essentially provides an alternate name specifically
				 * for the first of the two front wheels, as given by the
				 * expression frontWheel[1].
				 * 
				 * (And similarly for 'frontWheel_2'.)
				 */
				part frontWheel_1 subsets frontWheel = frontWheel[1];
				part frontWheel_2 subsets frontWheel = frontWheel[2];
			}
			
			part redefines rearAxleAssembly {
				part redefines rearAxle: RearAxle;
				
				part rearWheel_1 subsets rearWheel = rearWheel[1];
				part rearWheel_2 subsets rearWheel = rearWheel[2];
			}
			
		}
		
	}
}