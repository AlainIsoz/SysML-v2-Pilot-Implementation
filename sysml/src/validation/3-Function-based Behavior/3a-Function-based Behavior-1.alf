package '3a-Function-based Behavior-1' {
	import Transfers::Reception;
	import ControlNodes::Merge;
	import Base::Occurrence::startShot;
	
	// ITEMS
	
	class FuelCmd;
	class Torque is ISQ::TorqueValue;
	
	// SIGNALS
	
	class EngineStart;
	class EngineOff;
	
	// ACTIVITIES
	
	behavior 'Generate Torque'(in fuelCmd: FuelCmd, out engineTorque: Torque);
	behavior 'Amplify Torque'(in engineTorque: Torque, out transmissionTorque: Torque);
	behavior 'Transfer Torque'(in transmissionTorque: Torque, out driveshaftTorque: Torque);
	behavior 'Distribute Torque'(in driveShaftTorque: Torque, out wheelTorque1: Torque, out wheelTorque2: Torque);
	
	behavior 'Provide Power'(in fuelCmd: FuelCmd, out wheelTorque1: Torque, out wheelTorque2: Torque);
	behavior 'Provide Power With Control'(in fuelCmd: FuelCmd, out wheelTorque1: Torque, out wheelTorque2: Torque);
	
	// ACTIONS
	
	step 'provide power': 'Provide Power'(
		in fuelCmd: FuelCmd, 
		out wheelTorque1: Torque, 
		out wheelTorque2: Torque
	) {
		step 'generate torque': 'Generate Torque'(
			in fuelCmd = 'Provide Power'::fuelCmd, 
			out engineTorque
		);
		
		step 'amplify torque': 'Amplify Torque'(
			in engineTorque from 'generate torque'::engineTorque, 
			out transmissionTorque
		);
		
		step 'transfer torque': 'Transfer Torque'(
			in transmissionTorque from 'amplify torque'::transmissionTorque, 
			out driveshaftTorque
		);
		
		step 'distribute torque': 'Distribute Torque'(
			in driveshaftTorque from 'transfer torque'::driveshaftTorque, 
			out wheelTorque1 = 'provide power'::wheelTorque1, 
			out wheelTorque2 = 'provide power'::wheelTorque2
		); 
	}
	
	step 'provide power with control': 'Provide Power With Control'(
		in fuelCmd: FuelCmd, 
		out wheelTorque1: Torque, 
		out wheelTorque2: Torque
	) {
		succession startShot[0..1] then merge[1];
		
		step merge: Merge[*];
		
		succession merge[1] then engineStart[1];
		
		step engineStart: Reception[*](out :EngineStart);
		
		succession engineStart[1] then engineOff[1];
		
		step engineOff: Reception[*](out :EngineOff);
		
		succession engineOff[0..1] then merge[1];		
		
		succession engineStart[1] then 'provide power'[1];
		
		step 'provide power'[*] (
			in fuelCmd = 'provide power with control'::fuelCmd, 
			out wheelTorque1 = 'provide power with control'::wheelTorque1,
			out wheelTorque2 = 'provide power with control'::wheelTorque2
		) redefines '3a-Function-based Behavior'::'provide power';
		
		succession 'provide power'[1] then engineOff[1];		
	}
}