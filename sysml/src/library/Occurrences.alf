/**
 * This package defines associations between occurrences that assert relationships
 * modeling four-dimensional semantics. [Currently this is primarily time semantics.]
 */
package Occurrences {
	private import Base::*;
	
	/**
	 * HappensDuring asserts that the shorterOccurrence happens during the longerOccurrence.
	 * That is, the start time of the shorterOccurrence is no earlier than the start time
	 * of the longerOccurrence, and the end time of the shorterOccurrence is no later than
	 * the end time of the longerOccurrence. Note that this implies that every occurrence
	 * "happens during" itself.
	 */
	assoc HappensDuring {
		end shorterOccurrence: Occurrence[0..*] redefines Occurrence::encompassedOccurrences;
		end longerOccurrence: Occurrence[0..*];
	}
	
	/**
	 * HappensWhile asserts that two occurrences happen during each other, that is, they
	 * each start at the same time and end at the same time.
	 */
	assoc HappensWhile specializes HappensDuring {
		end thisOccurrence: Occurrence[0..*] redefines shorterOccurrence;
		end thatOccurrence: Occurrence[0..*] redefines longerOccurrence;
		
		connector :HappensDuring (
			shorterOccurrence => thatOccurrence,
			longerOccurrence => thisOccurrence
		);
	}
	
	/**
	 * HappensWhile asserts that the earlierOccurrence happens before the laterOccurrence.
	 * That is, the end time of the earlierOccurrence happens no later than the start time
	 * of the laterOccurrence.
	 */
	assoc HappensBefore {
		end earlierOccurrence: Occurrence[0..*];
		end laterOccurrence: Occurrence[0..*];
	}
	
	/**
	 * Portioning asserts one occurrence is a portion of another.
	 */
	assoc Portioning { 
		end whole: Occurrence[0..1];
		end portion 'portion': Occurrence[0..*] redefines Occurrence::portions; 
	}
	
	/** 
	 * Involvement asserts that an involvedObject is involved in the behavior carried out
	 * by the involvingPerformance.
	 */
	assoc Involvement {
		end involvingPerformance: Performance[0..*];
		end involvedObject: Object[0..*];
	}
}