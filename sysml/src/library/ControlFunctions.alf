package ControlFunctions {
	import Base::*;
	import ScalarValues::*;
	
	function '?'(test: Boolean): Anything[0..*] {
		abstract step then();
		abstract step else();
	}
	
	function while(initial: Anything[0..*]): Anything[0..*] {
		abstract expr condition(argument: Anything[0..*]): Boolean;
		abstract expr body(argument: Anything[0..*]): Anything[0..*];
	}
	
	function collect(collection: Anything[0..*]): Anything[0..*] {
		abstract expr mapper(argument: Anything[1]): Anything[0..*];
	}
	
	function select(collection: Anything[0..*]): Anything[0..*] {
		abstract expr selector(argument: Anything[1]): Boolean;
	}
	
	function reject(collection: Anything[0..*]): Anything[0..*] {
		abstract expr rejector(argument: Anything[1]): Boolean;
	}
	
	function reduce(collection: Anything[0..*]): Anything[0..*] {
		abstract expr reducer(first: Anything[1], second: Anything[1]): Anything[1];
	}
	
	function forAll(collection: Anything[0..*]): Anything[0..*] {
		abstract expr test(argument: Anything[1]): Boolean;
	}
	
	function exists(collection: Anything[0..*]): Anything[0..*] {
		abstract expr test(argument: Anything[1]): Boolean;
	}
	
}