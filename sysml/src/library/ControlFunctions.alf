package ControlFunctions {
	import Base::*;
	import ScalarValues::*;
	
	abstract function '?'(test: Boolean): Anything[0..*] {
		abstract expr then(): Anything[0..*];
		abstract expr else(): Anything[0..*];
	}
	
	function '&&'(first: Boolean): Boolean {
		abstract expr second():Boolean;
	}
	
	function '||'(first: Boolean): Boolean {
		abstract expr second():Boolean;
	}
	
	abstract function 'while'(initial: Anything[0..*]): Anything[0..*] {
		abstract expr condition(argument: Anything[0..*]): Boolean;
		abstract expr body(argument: Anything[0..*]): Anything[0..*];
	}
	
	abstract function collect(collection: Anything[0..*]): Anything[0..*] {
		abstract expr mapper(argument: Anything[1]): Anything[0..*];
	}
	
	abstract function select(collection: Anything[0..*]): Anything[0..*] {
		abstract expr selector(argument: Anything[1]): Boolean;
	}
	
	abstract function reject(collection: Anything[0..*]): Anything[0..*] {
		abstract expr rejector(argument: Anything[1]): Boolean;
	}
	
	abstract function reduce(collection: Anything[0..*]): Anything[0..*] {
		abstract expr reducer(first: Anything[1], second: Anything[1]): Anything[1];
	}
	
	abstract function forAll(collection: Anything[0..*]): Boolean {
		abstract expr test(argument: Anything[1]): Boolean;
	}
	
	abstract function exists(collection: Anything[0..*]): Boolean {
		abstract expr test(argument: Anything[1]): Boolean;
	}
	
}