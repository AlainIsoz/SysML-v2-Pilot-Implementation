package ScalarFunctions {
	import Base::*;
	import ScalarValues::*;
	import BaseFunctions::*;
	
	// Generic functions without special expression notation.

	abstract function Abs(x: ScalarValue): ScalarValue;
	abstract function Max(x: ScalarValue, y: ScalarValue): ScalarValue;
	abstract function Min(x: ScalarValue, y: ScalarValue): ScalarValue;
	
	// Functions that can be used with a prefix/infix notation in expressions.
	
	abstract function '+'(x: ScalarValue, y: ScalarValue[0..1]): ScalarValue;
	abstract function '-'(x: ScalarValue, y: ScalarValue[0..1]): ScalarValue;
	abstract function '*'(x: ScalarValue, y: ScalarValue): ScalarValue;
	abstract function '/'(x: ScalarValue, y: ScalarValue): ScalarValue;
	abstract function '**'(x: ScalarValue, y: ScalarValue): ScalarValue;
	abstract function '%'(x: ScalarValue, y: ScalarValue): ScalarValue;
	
	abstract function '!'(x: ScalarValue): ScalarValue;
	abstract function '~'(x: ScalarValue): ScalarValue;
	
	abstract function '|'(x: ScalarValue, y: ScalarValue): ScalarValue;
	abstract function '^'(x: ScalarValue, y: ScalarValue): ScalarValue;
	abstract function '&'(x: ScalarValue, y: ScalarValue): ScalarValue;
	
	abstract function '<'(x: ScalarValue, y: ScalarValue): Boolean;
	abstract function '>'(x: ScalarValue, y: ScalarValue): Boolean;
	abstract function '<='(x: ScalarValue, y: ScalarValue): Boolean;
	abstract function '>='(x: ScalarValue, y: ScalarValue): Boolean;
	
	// Functions specialized to specific scalar types.

	package StringFunctions {
		function '+'(x: String, y:String): String specializes ScalarFunctions::'+';
		
		function Size(x: String): Natural;
		function Substring(x: String, lower: Integer, upper: Integer): String;
		
		function ToString(x: String): String specializes ScalarFunctions::ToString;
	}
	
	package BooleanFunctions {
		function '!'(x: Boolean): Boolean specializes ScalarFunctions::'!';
		
		function '|'(x: Boolean, y: Boolean): Boolean specializes ScalarFunctions::'|';
		function '^'(x: Boolean, y: Boolean): Boolean specializes ScalarFunctions::'^';
		function '&'(x: Boolean, y: Boolean): Boolean specializes ScalarFunctions::'&';
		
		function '='(x: Integer, y: Integer): Boolean specializes ScalarFunctions::'==';
		function '/='(x: Integer, y: Integer): Boolean specializes ScalarFunctions::'/=';
		
		function ToString(x: Boolean): String specializes ScalarFunctions::ToString;
		function ToBoolean(x: String): Boolean;
	}
	
	package IntegerFunctions {
		function Abs(x: Integer): Natural specializes ScalarFunctions::Abs;
		
		function Max(x: Integer, y: Integer): Integer specializes ScalarFunctions::Max;
		function Min(x: Integer, y: Integer): Integer specializes ScalarFunctions::Min;

		function '+'(x: Integer, y: Integer[0..1]): Integer specializes ScalarFunctions::'+';
		function '-'(x: Integer, y: Integer[0..1]): Integer specializes ScalarFunctions::'-';
		function '*'(x: Integer, y: Integer): Integer specializes ScalarFunctions::'*';
		function '/'(x: Integer, y: Integer): Integer specializes ScalarFunctions::'/';
		function '**'(x: Integer, y: Natural): Integer specializes ScalarFunctions::'**';
		function '%'(x: Integer, y: Integer): Integer specializes ScalarFunctions::'%';
		
		function '<'(x: Integer, y: Integer): Boolean specializes ScalarFunctions::'<';
		function '>'(x: Integer, y: Integer): Boolean specializes ScalarFunctions::'>';
		function '<='(x: Integer, y: Integer): Boolean specializes ScalarFunctions::'<=';
		function '>='(x: Integer, y: Integer): Boolean specializes ScalarFunctions::'>=';
	
		function '='(x: Integer, y: Integer): Boolean specializes ScalarFunctions::'==';
		function '/='(x: Integer, y: Integer): Boolean specializes ScalarFunctions::'/=';
		
		function ToString(x: Integer): String specializes ScalarFunctions::ToString;
		function ToNatural(x: Integer): Natural;
		function ToInteger(x: String): Integer;
		function ToReal(x: Integer): Real;
	}	

	package UnlimitedNaturalFunctions {
		function Max(x: UnlimitedNatural, y: UnlimitedNatural): UnlimitedNatural;
		function Min(x: UnlimitedNatural, y: UnlimitedNatural): UnlimitedNatural;

		function '<'(x: UnlimitedNatural, y: UnlimitedNatural): Boolean specializes ScalarFunctions::'<';
		function '>'(x: UnlimitedNatural, y: UnlimitedNatural): Boolean specializes ScalarFunctions::'>';
		function '<='(x: UnlimitedNatural, y: UnlimitedNatural): Boolean specializes ScalarFunctions::'<=';
		function '>='(x: UnlimitedNatural, y: UnlimitedNatural): Boolean specializes ScalarFunctions::'>=';	
	
		function '='(x: UnlimitedNatural, y: UnlimitedNatural): Boolean specializes ScalarFunctions::'==';
		function '/='(x: UnlimitedNatural, y: UnlimitedNatural): Boolean specializes ScalarFunctions::'/=';
		
		function ToString(x: UnlimitedNatural): String specializes ScalarFunctions::ToString;
		function ToNatural(x: UnlimitedNatural): Natural;
		function ToUnlimitedNatural(x: String): UnlimitedNatural;
	}

	package NaturalFunctions {
		function '+'(x: Natural, y: Natural[0..1]): Natural specializes IntegerFunctions::'+';
		function '*'(x: Natural, y: Natural): Natural specializes IntegerFunctions::'*';
		function '/'(x: Natural, y: Natural): Natural specializes IntegerFunctions::'/';
		function '%'(x: Natural, y: Natural): Natural specializes IntegerFunctions::'%';
		
		function Max(x: Natural, y: Natural): Natural specializes IntegerFunctions::Max, UnlimitedNaturalFunctions::Max;

		function '<'(x: Natural, y: Natural): Boolean specializes IntegerFunctions::'<', UnlimitedNaturalFunctions::'<';
		function '>'(x: Natural, y: Natural): Boolean specializes IntegerFunctions::'>', UnlimitedNaturalFunctions::'>';
		function '<='(x: Natural, y: Natural): Boolean specializes IntegerFunctions::'<=', UnlimitedNaturalFunctions::'<=';
		function '>='(x: Natural, y: Natural): Boolean specializes IntegerFunctions::'>=', UnlimitedNaturalFunctions::'>=';	
	
		function '='(x: UnlimitedNatural, y: UnlimitedNatural): Boolean specializes IntegerFunctions::'=', UnlimitedNaturalFunctions::'=';
		function '/='(x: UnlimitedNatural, y: UnlimitedNatural): Boolean specializes IntegerFunctions::'/=', UnlimitedNaturalFunctions::'/=';
		
		function ToString(x: Natural): String specializes IntegerFunctions::ToString, UnlimitedNaturalFunctions::ToString;
		function ToNatural(x: String): Natural;
	}	

	package RealFunctions {
		function Abs(x: Real): Real specializes ScalarFunctions::Abs;
		function Max(x: Real, y: Real): Real specializes ScalarFunctions::Max;
		function Min(x: Real, y: Real): Real specializes ScalarFunctions::Min;

		function '+'(x: Real, y: Real[0..1]): Real specializes ScalarFunctions::'+';
		function '-'(x: Real, y: Real[0..1]): Real specializes ScalarFunctions::'-';
		function '*'(x: Real, y: Real): Real specializes ScalarFunctions::'*';
		function '/'(x: Real, y: Real): Real specializes ScalarFunctions::'/';
		function '**'(x: Real, y: Real): Real specializes ScalarFunctions::'**';
		
		function '<'(x: Real, y: Real): Boolean specializes ScalarFunctions::'<';
		function '>'(x: Real, y: Real): Boolean specializes ScalarFunctions::'>';
		function '<='(x: Real, y: Real): Boolean specializes ScalarFunctions::'<=';
		function '>='(x: Real, y: Real): Boolean specializes ScalarFunctions::'>=';
	
		function '='(x: Real, y: Real): Boolean specializes ScalarFunctions::'==';
		function '/='(x: Real, y: Real): Boolean specializes ScalarFunctions::'/=';
		
		function Floor(x: Real): Integer;
		function Round(x: Real): Integer;
		
		function ToString(x: Real): String specializes ScalarFunctions::ToString;
		function ToInteger(x: Real): Integer;
		function ToReal(x: String): Real;
		function ToComplex(x: Real): Complex;
	}
	
	package ComplexFunctions {		
		i: Complex = Rect(0, 1);
		
		function Rect(re: Real, im: Real): Complex;
		function Polar(abs: Real, arg: Real): Complex;
		
		function Re(x: Complex): Real;
		function Im(x: Complex): Real;
		
		function Abs(x: Complex): Real specializes ScalarFunctions::Abs;
		function Arg(x: Complex): Real;
		
		function '+'(x: Complex, y: Complex[0..1]): Complex specializes ScalarFunctions::'+';
		function '-'(x: Complex, y: Complex[0..1]): Complex specializes ScalarFunctions::'-';
		function '*'(x: Complex, y: Complex): Complex specializes ScalarFunctions::'*';
		function '/'(x: Complex, y: Complex): Complex specializes ScalarFunctions::'/';
		function '**'(x: Complex, y: Complex): Complex specializes ScalarFunctions::'**';
		
		function '='(x: Complex, y: Complex): Boolean specializes ScalarFunctions::'==';
		function '/='(x: Complex, y: Complex): Boolean specializes ScalarFunctions::'/=';
		
		function ToString(x: Complex): String specializes ScalarFunctions::ToString;
		function ToComplex(x: String): Complex;
	}
	
}