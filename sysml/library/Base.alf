/**
 * This package defines the classes and features that provide the bases for the typing
 * of all elements in the language.
 */
package Base {
		
    /*
     * Anything is the top level generalized type in the language. 
     */
	abstract Class Anything;
	
	/*
	 * Object is the most general class of individuals with reference identity.
	 */
	abstract class Object specializes Anything;
	
	/*
	 * Value is the most general class of individuals with value identity.
	 * EnumeratedValue is a specialization that is the most general class for enumerated values.
	 */
	abstract datatype Value specializes Anything;
	abstract datatype EnumeratedValue specializes Value;
	
	/*
	 * Link is the most general association between two or more things.
	 * (It is actually class, not an association, because an association
	 * must have a specific number of ends.)
	 */
	class Link specializes Object {
		feature participant: Anything[2..*] ordered;
	}
	
	/*
	 * BinaryLink is the most general binary association between exactly two things, 
	 * nominally directed from source to target.
	 */
	assoc BinaryLink specializes Link {
		end sourceEnd: Anything[0..*];
	    end targetEnd: Anything[0..*];     

	    feature participant: Anything[2] redefines Link::participant;
		
	    feature sourceParticipant: Anything[1..1] subsets participant = participant[1];
	    feature targetParticipant: Anything[1..1] subsets participant = participant[2];
	
	    private connector linkage: BinaryLink is sourceParticipant to targetParticipant;	
	}
	
	/*
	 * SelfLink is a binary association in which the individuals at the two ends are asserted
	 * to be the same.
	 */
	assoc SelfLink specializes Link {
		end self: Anything[0..*] redefines BinaryLink::sourceEnd;
		end myself: Anything[0..*] redefines BinaryLink::targetEnd;
		
		feature sourceParticipant: Anything[1..1] redefines BinaryLink::sourceParticipant subsets targetParticipant; 
		feature targetParticipant: Anything[1..1] redefines BinaryLink::targetParticipant subsets sourceParticipant;
	}
	
	/*  
	 * Occurrence is the most general class of entities that may occur over time.
	 * BehaviorOccurrence and FunctionOccurrence are specializations representing the
	 * occurrence (execution/evaluation) of behaviors and functions. LiteralEvaluation
	 * and NullEvaluation are further specializations of FunctionOccurrence representing
	 * literal and null expressions.
	 */
	abstract class Occurrence specializes Anything;
	abstract behavior BehaviorOccurrence() specializes Occurrence;
	abstract function FunctionEvaluation(): Anything[0..*] specializes BehaviorOccurrence;				
	function LiteralEvaluation(): Anything specializes FunctionEvaluation;
	function NullEvaluation(): Anything[0..0] specializes FunctionEvaluation;

	/*
	 * things is the top-level feature in the language.
	 * objects and values are specializations that restrict the feature type
	 * to Object and Value, respectively.
	 */
	abstract feature things: Anything[0..*] nonunique;
	abstract feature objects: Object[0..*] nonunique subsets things;
	abstract feature values: Value[0..*] nonunique subsets things;
	
	/*
	 * links is the most general feature of links between individuals.
	 * binaryLinks and selfLinks are specializations of binary links and self links.
	 */	
	abstract feature links: Link[0..*] nonunique subsets objects;
	abstract feature binaryLinks: BinaryLink[0..*] nonunique subsets links;
	abstract feature selfLinks: SelfLink[0..*] nonunique subsets binaryLinks;
	
	/*
	 * behaviorOccurrences is the most general feature of occurrences of behaviors.
	 * functionEvaluations is a specialization for occurrences of functions.
	 * literalEvaluations and nullEvaluations are specializations of functionEvaluations
	 * that restrict the feature type to LiteralEvaluation and NullEvaluation, respectively.
	 */
	abstract step behaviorOccurrences: BehaviorOccurrence[0..*] nonunique subsets things;
	abstract expr functionEvaluations: FunctionEvaluation[0..*] nonunique subsets behaviorOccurrences;	
	abstract expr literalEvaluations: LiteralEvaluation[0..*] nonunique subsets functionEvaluations;
	abstract expr nullEvaluations: NullEvaluation[0..*] nonunique subsets functionEvaluations;
}